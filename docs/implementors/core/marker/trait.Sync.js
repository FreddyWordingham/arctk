(function() {var implementors = {};
implementors["adler"] = [{"text":"impl Sync for Adler32","synthetic":true,"types":[]}];
implementors["adler32"] = [{"text":"impl Sync for RollingAdler32","synthetic":true,"types":[]}];
implementors["ahash"] = [{"text":"impl Sync for AHasher","synthetic":true,"types":[]},{"text":"impl Sync for RandomState","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; Sync for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Sync for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Sync for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; Sync for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Match","synthetic":true,"types":[]},{"text":"impl Sync for MatchKind","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; Sync for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Searcher","synthetic":true,"types":[]},{"text":"impl Sync for MatchKind","synthetic":true,"types":[]}];
implementors["ansi_rgb"] = [{"text":"impl&lt;T&gt; Sync for WithBackground&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for WithForeground&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["approx"] = [{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; Sync for AbsDiff&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; Sync for Relative&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; Sync for Ulps&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["arctk"] = [{"text":"impl Sync for Rate","synthetic":true,"types":[]},{"text":"impl Sync for RateLinker","synthetic":true,"types":[]},{"text":"impl Sync for Reaction","synthetic":true,"types":[]},{"text":"impl Sync for ReactionLinker","synthetic":true,"types":[]},{"text":"impl Sync for Reactor","synthetic":true,"types":[]},{"text":"impl Sync for ReactorLinker","synthetic":true,"types":[]},{"text":"impl Sync for Average","synthetic":true,"types":[]},{"text":"impl Sync for Histogram","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Table&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Redirect&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Camera","synthetic":true,"types":[]},{"text":"impl Sync for CameraBuilder","synthetic":true,"types":[]},{"text":"impl Sync for Emitter","synthetic":true,"types":[]},{"text":"impl Sync for EmitterLoader","synthetic":true,"types":[]},{"text":"impl Sync for Grid","synthetic":true,"types":[]},{"text":"impl Sync for GridBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Surface&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SurfaceLinker","synthetic":true,"types":[]},{"text":"impl Sync for SurfaceLinkerLoader","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Tree&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TreeSettings","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Hit&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Orient","synthetic":true,"types":[]},{"text":"impl Sync for Ray","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Scan&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Side","synthetic":true,"types":[]},{"text":"impl Sync for Cube","synthetic":true,"types":[]},{"text":"impl Sync for Mesh","synthetic":true,"types":[]},{"text":"impl Sync for MeshLoader","synthetic":true,"types":[]},{"text":"impl Sync for SmoothTriangle","synthetic":true,"types":[]},{"text":"impl Sync for Triangle","synthetic":true,"types":[]},{"text":"impl Sync for AspectRatio","synthetic":true,"types":[]},{"text":"impl Sync for GradientBuilder","synthetic":true,"types":[]},{"text":"impl Sync for Image","synthetic":true,"types":[]},{"text":"impl Sync for Formula","synthetic":true,"types":[]},{"text":"impl Sync for FormulaBuilder","synthetic":true,"types":[]},{"text":"impl Sync for Probability","synthetic":true,"types":[]},{"text":"impl Sync for ProbabilityBuilder","synthetic":true,"types":[]},{"text":"impl Sync for Trans3Builder","synthetic":true,"types":[]},{"text":"impl Sync for ArrayLinker","synthetic":true,"types":[]},{"text":"impl Sync for Greek","synthetic":true,"types":[]},{"text":"impl Sync for RGB","synthetic":true,"types":[]},{"text":"impl Sync for Cartesian","synthetic":true,"types":[]},{"text":"impl Sync for Polar","synthetic":true,"types":[]},{"text":"impl Sync for Spherical","synthetic":true,"types":[]},{"text":"impl Sync for Name","synthetic":true,"types":[]},{"text":"impl Sync for Register","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Set&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Crossing","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Light&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for LightLinker","synthetic":true,"types":[]},{"text":"impl Sync for LightLinkerBuilder","synthetic":true,"types":[]},{"text":"impl Sync for LightLinkerBuilderLoader","synthetic":true,"types":[]},{"text":"impl Sync for Local","synthetic":true,"types":[]},{"text":"impl Sync for Material","synthetic":true,"types":[]},{"text":"impl Sync for MaterialBuilder","synthetic":true,"types":[]},{"text":"impl Sync for Photon","synthetic":true,"types":[]},{"text":"impl Sync for Operation","synthetic":true,"types":[]},{"text":"impl Sync for OperationBuilder","synthetic":true,"types":[]},{"text":"impl Sync for OperationBuilderLoader","synthetic":true,"types":[]},{"text":"impl Sync for Parameters","synthetic":true,"types":[]},{"text":"impl Sync for Attribute","synthetic":true,"types":[]},{"text":"impl Sync for AttributeLinker","synthetic":true,"types":[]},{"text":"impl Sync for Caster","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Event&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Input&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Output&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Parameters","synthetic":true,"types":[]},{"text":"impl Sync for ParametersBuilder","synthetic":true,"types":[]},{"text":"impl Sync for ParametersBuilderLoader","synthetic":true,"types":[]},{"text":"impl Sync for Settings","synthetic":true,"types":[]},{"text":"impl Sync for SuperSample","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Input&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Output","synthetic":true,"types":[]},{"text":"impl Sync for Parameters","synthetic":true,"types":[]},{"text":"impl Sync for ParametersBuilder","synthetic":true,"types":[]},{"text":"impl Sync for ParametersBuilderLoader","synthetic":true,"types":[]},{"text":"impl Sync for Settings","synthetic":true,"types":[]},{"text":"impl Sync for Grad","synthetic":true,"types":[]},{"text":"impl Sync for Reflect","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Input&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Parameters","synthetic":true,"types":[]},{"text":"impl Sync for ParametersLoader","synthetic":true,"types":[]},{"text":"impl Sync for Settings","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Input&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Parameters","synthetic":true,"types":[]},{"text":"impl Sync for ParametersBuilder","synthetic":true,"types":[]},{"text":"impl Sync for ParametersBuilderLoader","synthetic":true,"types":[]},{"text":"impl Sync for Settings","synthetic":true,"types":[]},{"text":"impl Sync for Grad","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for AttributeLinker","synthetic":true,"types":[]},{"text":"impl Sync for AttributeLinkerLinker","synthetic":true,"types":[]},{"text":"impl Sync for EngineBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Event&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Input&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Output&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Parameters","synthetic":true,"types":[]},{"text":"impl Sync for ParametersBuilder","synthetic":true,"types":[]},{"text":"impl Sync for ParametersBuilderLoader","synthetic":true,"types":[]},{"text":"impl Sync for Settings","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for AttributeLinker","synthetic":true,"types":[]},{"text":"impl Sync for EngineBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Input&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Parameters","synthetic":true,"types":[]},{"text":"impl Sync for ParametersBuilder","synthetic":true,"types":[]},{"text":"impl Sync for ParametersBuilderLoader","synthetic":true,"types":[]},{"text":"impl Sync for Settings","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Shader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ShaderLinker","synthetic":true,"types":[]},{"text":"impl Sync for Tracer","synthetic":true,"types":[]},{"text":"impl Sync for Binner","synthetic":true,"types":[]},{"text":"impl Sync for ProgressBar","synthetic":true,"types":[]},{"text":"impl Sync for Range","synthetic":true,"types":[]},{"text":"impl Sync for SilentProgressBar","synthetic":true,"types":[]},{"text":"impl Sync for DataCube","synthetic":true,"types":[]},{"text":"impl Sync for DataSquare","synthetic":true,"types":[]},{"text":"impl Sync for DataTesseract","synthetic":true,"types":[]},{"text":"impl Sync for Player","synthetic":true,"types":[]},{"text":"impl Sync for Position","synthetic":true,"types":[]},{"text":"impl Sync for Renderable","synthetic":true,"types":[]},{"text":"impl Sync for Viewshed","synthetic":true,"types":[]},{"text":"impl Sync for Map","synthetic":true,"types":[]},{"text":"impl Sync for Tile","synthetic":true,"types":[]},{"text":"impl Sync for Zone","synthetic":true,"types":[]},{"text":"impl Sync for State","synthetic":true,"types":[]},{"text":"impl Sync for Visibility","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Output&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Sync for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A:&nbsp;Array + Sync&gt; Sync for Drain&lt;'a, A&gt;","synthetic":false,"types":[]}];
implementors["atom"] = [{"text":"impl&lt;P&gt; Sync for AtomSetOnce&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Sync for Atom&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: IntoRawPtr + FromRawPtr + Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["atty"] = [{"text":"impl Sync for Stream","synthetic":true,"types":[]}];
implementors["block"] = [{"text":"impl&lt;A, R&gt; !Sync for Block&lt;A, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, R&gt; !Sync for RcBlock&lt;A, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, R, F&gt; !Sync for ConcreteBlock&lt;A, R, F&gt;","synthetic":true,"types":[]}];
implementors["bracket_color"] = [{"text":"impl Sync for ColorPair","synthetic":true,"types":[]},{"text":"impl Sync for HSV","synthetic":true,"types":[]},{"text":"impl Sync for RgbLerp","synthetic":true,"types":[]},{"text":"impl Sync for HsvLerp","synthetic":true,"types":[]},{"text":"impl Sync for RgbaLerp","synthetic":true,"types":[]},{"text":"impl Sync for AlphaLerp","synthetic":true,"types":[]},{"text":"impl Sync for RGB","synthetic":true,"types":[]},{"text":"impl Sync for HtmlColorConversionError","synthetic":true,"types":[]},{"text":"impl Sync for RGBA","synthetic":true,"types":[]},{"text":"impl Sync for XpColor","synthetic":true,"types":[]}];
implementors["bracket_geometry"] = [{"text":"impl Sync for BresenhamCircle","synthetic":true,"types":[]},{"text":"impl Sync for BresenhamCircleNoDiag","synthetic":true,"types":[]},{"text":"impl Sync for DistanceAlg","synthetic":true,"types":[]},{"text":"impl Sync for Bresenham","synthetic":true,"types":[]},{"text":"impl Sync for VectorLine","synthetic":true,"types":[]},{"text":"impl Sync for LineAlg","synthetic":true,"types":[]},{"text":"impl Sync for Point","synthetic":true,"types":[]},{"text":"impl Sync for Point3","synthetic":true,"types":[]},{"text":"impl Sync for Rect","synthetic":true,"types":[]},{"text":"impl Sync for RectF","synthetic":true,"types":[]},{"text":"impl Sync for Degrees","synthetic":true,"types":[]},{"text":"impl Sync for Radians","synthetic":true,"types":[]}];
implementors["bracket_noise"] = [{"text":"impl Sync for FastNoise","synthetic":true,"types":[]},{"text":"impl Sync for NoiseType","synthetic":true,"types":[]},{"text":"impl Sync for Interp","synthetic":true,"types":[]},{"text":"impl Sync for FractalType","synthetic":true,"types":[]},{"text":"impl Sync for CellularDistanceFunction","synthetic":true,"types":[]},{"text":"impl Sync for CellularReturnType","synthetic":true,"types":[]}];
implementors["bracket_pathfinding"] = [{"text":"impl Sync for NavigationPath","synthetic":true,"types":[]},{"text":"impl Sync for DijkstraMap","synthetic":true,"types":[]}];
implementors["bracket_random"] = [{"text":"impl Sync for RandomNumberGenerator","synthetic":true,"types":[]},{"text":"impl Sync for DiceType","synthetic":true,"types":[]},{"text":"impl Sync for DiceParseError","synthetic":true,"types":[]},{"text":"impl !Sync for DiceIterator","synthetic":true,"types":[]}];
implementors["bracket_terminal"] = [{"text":"impl !Sync for DisplayConsole","synthetic":true,"types":[]},{"text":"impl Sync for BACKEND_INTERNAL","synthetic":true,"types":[]},{"text":"impl Sync for BTerm","synthetic":true,"types":[]},{"text":"impl Sync for DrawBatch","synthetic":true,"types":[]},{"text":"impl Sync for DrawCommand","synthetic":true,"types":[]},{"text":"impl Sync for Tile","synthetic":true,"types":[]},{"text":"impl Sync for TextAlign","synthetic":true,"types":[]},{"text":"impl Sync for CharacterTranslationMode","synthetic":true,"types":[]},{"text":"impl Sync for FlexiTile","synthetic":true,"types":[]},{"text":"impl Sync for FlexiConsole","synthetic":true,"types":[]},{"text":"impl Sync for SimpleConsole","synthetic":true,"types":[]},{"text":"impl Sync for SparseTile","synthetic":true,"types":[]},{"text":"impl Sync for SparseConsole","synthetic":true,"types":[]},{"text":"impl Sync for RenderSprite","synthetic":true,"types":[]},{"text":"impl Sync for SpriteConsole","synthetic":true,"types":[]},{"text":"impl Sync for Sprite","synthetic":true,"types":[]},{"text":"impl Sync for SpriteSheet","synthetic":true,"types":[]},{"text":"impl Sync for MultiTileSprite","synthetic":true,"types":[]},{"text":"impl Sync for TextBlock","synthetic":true,"types":[]},{"text":"impl Sync for TextBuilder","synthetic":true,"types":[]},{"text":"impl Sync for CommandType","synthetic":true,"types":[]},{"text":"impl Sync for VirtualConsole","synthetic":true,"types":[]},{"text":"impl Sync for EMBED","synthetic":true,"types":[]},{"text":"impl Sync for Dictionary","synthetic":true,"types":[]},{"text":"impl Sync for BTermPlatform","synthetic":true,"types":[]},{"text":"impl Sync for Shader","synthetic":true,"types":[]},{"text":"impl Sync for Font","synthetic":true,"types":[]},{"text":"impl Sync for BACKEND","synthetic":true,"types":[]},{"text":"impl Sync for InitHints","synthetic":true,"types":[]},{"text":"impl Sync for BTermBuilder","synthetic":true,"types":[]},{"text":"impl Sync for INPUT","synthetic":true,"types":[]},{"text":"impl Sync for Input","synthetic":true,"types":[]},{"text":"impl Sync for BEvent","synthetic":true,"types":[]},{"text":"impl Sync for XpCell","synthetic":true,"types":[]},{"text":"impl Sync for XpLayer","synthetic":true,"types":[]},{"text":"impl Sync for XpFile","synthetic":true,"types":[]},{"text":"impl Sync for BTermInternal","synthetic":false,"types":[]}];
implementors["bytemuck"] = [{"text":"impl Sync for PodCastError","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Sync for BigEndian","synthetic":true,"types":[]},{"text":"impl Sync for LittleEndian","synthetic":true,"types":[]}];
implementors["cocoa"] = [{"text":"impl Sync for NSApplicationPresentationOptions","synthetic":true,"types":[]},{"text":"impl Sync for NSWindowStyleMask","synthetic":true,"types":[]},{"text":"impl Sync for NSWindowOrderingMode","synthetic":true,"types":[]},{"text":"impl Sync for NSAlignmentOptions","synthetic":true,"types":[]},{"text":"impl Sync for NSWindowCollectionBehavior","synthetic":true,"types":[]},{"text":"impl Sync for NSWindowOcclusionState","synthetic":true,"types":[]},{"text":"impl Sync for NSEventSwipeTrackingOptions","synthetic":true,"types":[]},{"text":"impl Sync for NSEventPhase","synthetic":true,"types":[]},{"text":"impl Sync for NSTouchPhase","synthetic":true,"types":[]},{"text":"impl Sync for NSEventMask","synthetic":true,"types":[]},{"text":"impl Sync for NSEventModifierFlags","synthetic":true,"types":[]},{"text":"impl Sync for NSApplicationActivationPolicy","synthetic":true,"types":[]},{"text":"impl Sync for NSApplicationActivationOptions","synthetic":true,"types":[]},{"text":"impl Sync for NSApplicationTerminateReply","synthetic":true,"types":[]},{"text":"impl Sync for NSWindowTitleVisibility","synthetic":true,"types":[]},{"text":"impl Sync for NSWindowTabbingMode","synthetic":true,"types":[]},{"text":"impl Sync for NSBackingStoreType","synthetic":true,"types":[]},{"text":"impl Sync for NSOpenGLPixelFormatAttribute","synthetic":true,"types":[]},{"text":"impl Sync for NSOpenGLPFAOpenGLProfiles","synthetic":true,"types":[]},{"text":"impl Sync for NSOpenGLContextParameter","synthetic":true,"types":[]},{"text":"impl Sync for NSWindowButton","synthetic":true,"types":[]},{"text":"impl Sync for NSBezelStyle","synthetic":true,"types":[]},{"text":"impl Sync for NSRequestUserAttentionType","synthetic":true,"types":[]},{"text":"impl Sync for NSPasteboardReadingOptions","synthetic":true,"types":[]},{"text":"impl Sync for NSPasteboardWritingOptions","synthetic":true,"types":[]},{"text":"impl Sync for NSEventGestureAxis","synthetic":true,"types":[]},{"text":"impl Sync for NSEventType","synthetic":true,"types":[]},{"text":"impl Sync for NSPointingDeviceType","synthetic":true,"types":[]},{"text":"impl Sync for NSEventButtonMask","synthetic":true,"types":[]},{"text":"impl Sync for NSEventSubtype","synthetic":true,"types":[]},{"text":"impl Sync for NSCompositingOperation","synthetic":true,"types":[]},{"text":"impl Sync for NSImageCacheMode","synthetic":true,"types":[]},{"text":"impl Sync for NSTIFFCompression","synthetic":true,"types":[]},{"text":"impl Sync for NSImageLoadStatus","synthetic":true,"types":[]},{"text":"impl Sync for NSTabViewType","synthetic":true,"types":[]},{"text":"impl Sync for NSTabState","synthetic":true,"types":[]},{"text":"impl Sync for NSPoint","synthetic":true,"types":[]},{"text":"impl Sync for NSSize","synthetic":true,"types":[]},{"text":"impl Sync for NSRect","synthetic":true,"types":[]},{"text":"impl Sync for NSRange","synthetic":true,"types":[]},{"text":"impl Sync for NSOperatingSystemVersion","synthetic":true,"types":[]},{"text":"impl Sync for NSEnumerationOptions","synthetic":true,"types":[]},{"text":"impl !Sync for NSFastIterator","synthetic":true,"types":[]},{"text":"impl Sync for NSURLBookmarkCreationOptions","synthetic":true,"types":[]},{"text":"impl Sync for NSURLBookmarkResolutionOptions","synthetic":true,"types":[]},{"text":"impl Sync for NSDataReadingOptions","synthetic":true,"types":[]},{"text":"impl Sync for NSDataBase64EncodingOptions","synthetic":true,"types":[]},{"text":"impl Sync for NSDataBase64DecodingOptions","synthetic":true,"types":[]},{"text":"impl Sync for NSDataWritingOptions","synthetic":true,"types":[]},{"text":"impl Sync for NSDataSearchOptions","synthetic":true,"types":[]},{"text":"impl Sync for NSRectEdge","synthetic":true,"types":[]},{"text":"impl Sync for NSComparisonResult","synthetic":true,"types":[]},{"text":"impl Sync for EdgeAntialiasingMask","synthetic":true,"types":[]},{"text":"impl Sync for CornerMask","synthetic":true,"types":[]},{"text":"impl Sync for AutoresizingMask","synthetic":true,"types":[]},{"text":"impl Sync for CATransform3D","synthetic":true,"types":[]},{"text":"impl Sync for CVTimeStamp","synthetic":true,"types":[]},{"text":"impl Sync for CVSMPTETime","synthetic":true,"types":[]},{"text":"impl !Sync for ContentsGravity","synthetic":true,"types":[]},{"text":"impl !Sync for ContentsFormat","synthetic":true,"types":[]},{"text":"impl !Sync for Filter","synthetic":true,"types":[]},{"text":"impl Sync for CALayer","synthetic":false,"types":[]},{"text":"impl Sync for CARenderer","synthetic":false,"types":[]}];
implementors["color_quant"] = [{"text":"impl Sync for NeuQuant","synthetic":true,"types":[]}];
implementors["colored"] = [{"text":"impl Sync for Style","synthetic":true,"types":[]},{"text":"impl Sync for ColoredString","synthetic":true,"types":[]},{"text":"impl Sync for Color","synthetic":true,"types":[]},{"text":"impl Sync for Styles","synthetic":true,"types":[]},{"text":"impl Sync for ShouldColorize","synthetic":true,"types":[]},{"text":"impl Sync for SHOULD_COLORIZE","synthetic":true,"types":[]}];
implementors["console"] = [{"text":"impl Sync for Term","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for TermFeatures&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for Emoji&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Style","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for StyledObject&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for AnsiCodeIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Key","synthetic":true,"types":[]},{"text":"impl Sync for TermFamily","synthetic":true,"types":[]},{"text":"impl Sync for TermTarget","synthetic":true,"types":[]},{"text":"impl Sync for Alignment","synthetic":true,"types":[]},{"text":"impl Sync for Attribute","synthetic":true,"types":[]},{"text":"impl Sync for Color","synthetic":true,"types":[]}];
implementors["core_foundation"] = [{"text":"impl&lt;T&nbsp;=&nbsp;*const c_void&gt; !Sync for CFArray&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for CFArrayIterator&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for CFAttributedString","synthetic":true,"types":[]},{"text":"impl !Sync for CFMutableAttributedString","synthetic":true,"types":[]},{"text":"impl !Sync for CFType","synthetic":true,"types":[]},{"text":"impl !Sync for CFAllocator","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for ItemRef&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for ItemMutRef&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for CFBoolean","synthetic":true,"types":[]},{"text":"impl !Sync for CFCharacterSet","synthetic":true,"types":[]},{"text":"impl !Sync for CFData","synthetic":true,"types":[]},{"text":"impl !Sync for CFDate","synthetic":true,"types":[]},{"text":"impl&lt;K&nbsp;=&nbsp;*const c_void, V&nbsp;=&nbsp;*const c_void&gt; !Sync for CFDictionary&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&nbsp;=&nbsp;*const c_void, V&nbsp;=&nbsp;*const c_void&gt; !Sync for CFMutableDictionary&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for CFError","synthetic":true,"types":[]},{"text":"impl !Sync for CFFileDescriptor","synthetic":true,"types":[]},{"text":"impl !Sync for CFNumber","synthetic":true,"types":[]},{"text":"impl&lt;T&nbsp;=&nbsp;*const c_void&gt; !Sync for CFSet&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for CFString","synthetic":true,"types":[]},{"text":"impl !Sync for CFURL","synthetic":true,"types":[]},{"text":"impl !Sync for CFBundle","synthetic":true,"types":[]},{"text":"impl !Sync for CFPropertyList","synthetic":true,"types":[]},{"text":"impl !Sync for CFRunLoop","synthetic":true,"types":[]},{"text":"impl !Sync for CFRunLoopTimer","synthetic":true,"types":[]},{"text":"impl !Sync for CFRunLoopSource","synthetic":true,"types":[]},{"text":"impl !Sync for CFRunLoopObserver","synthetic":true,"types":[]},{"text":"impl !Sync for CFTimeZone","synthetic":true,"types":[]},{"text":"impl !Sync for CFUUID","synthetic":true,"types":[]}];
implementors["core_foundation_sys"] = [{"text":"impl Sync for CFArrayCallBacks","synthetic":true,"types":[]},{"text":"impl Sync for __CFArray","synthetic":true,"types":[]},{"text":"impl Sync for __CFAttributedString","synthetic":true,"types":[]},{"text":"impl Sync for CFRange","synthetic":true,"types":[]},{"text":"impl !Sync for CFAllocatorContext","synthetic":true,"types":[]},{"text":"impl Sync for CFComparisonResult","synthetic":true,"types":[]},{"text":"impl Sync for __CFBundle","synthetic":true,"types":[]},{"text":"impl Sync for __CFCharacterSet","synthetic":true,"types":[]},{"text":"impl Sync for __CFData","synthetic":true,"types":[]},{"text":"impl Sync for __CFDate","synthetic":true,"types":[]},{"text":"impl Sync for CFDictionaryKeyCallBacks","synthetic":true,"types":[]},{"text":"impl Sync for CFDictionaryValueCallBacks","synthetic":true,"types":[]},{"text":"impl Sync for __CFDictionary","synthetic":true,"types":[]},{"text":"impl Sync for __CFError","synthetic":true,"types":[]},{"text":"impl Sync for __CFFileDescriptor","synthetic":true,"types":[]},{"text":"impl !Sync for CFFileDescriptorContext","synthetic":true,"types":[]},{"text":"impl !Sync for CFMessagePortContext","synthetic":true,"types":[]},{"text":"impl Sync for __CFMessagePort","synthetic":true,"types":[]},{"text":"impl Sync for __CFBoolean","synthetic":true,"types":[]},{"text":"impl Sync for __CFNumber","synthetic":true,"types":[]},{"text":"impl Sync for __CFRunLoop","synthetic":true,"types":[]},{"text":"impl Sync for __CFRunLoopSource","synthetic":true,"types":[]},{"text":"impl Sync for __CFRunLoopObserver","synthetic":true,"types":[]},{"text":"impl !Sync for CFRunLoopSourceContext","synthetic":true,"types":[]},{"text":"impl !Sync for CFRunLoopSourceContext1","synthetic":true,"types":[]},{"text":"impl !Sync for CFRunLoopObserverContext","synthetic":true,"types":[]},{"text":"impl !Sync for CFRunLoopTimerContext","synthetic":true,"types":[]},{"text":"impl Sync for __CFRunLoopTimer","synthetic":true,"types":[]},{"text":"impl !Sync for CFSetCallBacks","synthetic":true,"types":[]},{"text":"impl Sync for __CFSet","synthetic":true,"types":[]},{"text":"impl Sync for __CFString","synthetic":true,"types":[]},{"text":"impl Sync for __CFTimeZone","synthetic":true,"types":[]},{"text":"impl Sync for __CFURL","synthetic":true,"types":[]},{"text":"impl Sync for __CFUUID","synthetic":true,"types":[]},{"text":"impl Sync for CFUUIDBytes","synthetic":true,"types":[]}];
implementors["core_graphics"] = [{"text":"impl !Sync for CGColor","synthetic":true,"types":[]},{"text":"impl !Sync for CGColorSpace","synthetic":true,"types":[]},{"text":"impl !Sync for CGColorSpaceRef","synthetic":true,"types":[]},{"text":"impl !Sync for CGContext","synthetic":true,"types":[]},{"text":"impl !Sync for CGContextRef","synthetic":true,"types":[]},{"text":"impl Sync for CGBlendMode","synthetic":true,"types":[]},{"text":"impl Sync for CGTextDrawingMode","synthetic":true,"types":[]},{"text":"impl Sync for CGLineCap","synthetic":true,"types":[]},{"text":"impl Sync for CGLineJoin","synthetic":true,"types":[]},{"text":"impl Sync for CGPathDrawingMode","synthetic":true,"types":[]},{"text":"impl Sync for CGInterpolationQuality","synthetic":true,"types":[]},{"text":"impl !Sync for CGDataProvider","synthetic":true,"types":[]},{"text":"impl !Sync for CGDataProviderRef","synthetic":true,"types":[]},{"text":"impl Sync for CGDisplay","synthetic":true,"types":[]},{"text":"impl !Sync for CGDisplayMode","synthetic":true,"types":[]},{"text":"impl !Sync for CGDisplayModeRef","synthetic":true,"types":[]},{"text":"impl Sync for CGConfigureOption","synthetic":true,"types":[]},{"text":"impl Sync for CGEventFlags","synthetic":true,"types":[]},{"text":"impl Sync for KeyCode","synthetic":true,"types":[]},{"text":"impl Sync for ScrollEventUnit","synthetic":true,"types":[]},{"text":"impl Sync for EventField","synthetic":true,"types":[]},{"text":"impl !Sync for CGEvent","synthetic":true,"types":[]},{"text":"impl !Sync for CGEventRef","synthetic":true,"types":[]},{"text":"impl Sync for CGEventType","synthetic":true,"types":[]},{"text":"impl Sync for CGMouseButton","synthetic":true,"types":[]},{"text":"impl Sync for CGEventTapLocation","synthetic":true,"types":[]},{"text":"impl !Sync for CGEventSource","synthetic":true,"types":[]},{"text":"impl !Sync for CGEventSourceRef","synthetic":true,"types":[]},{"text":"impl Sync for CGEventSourceStateID","synthetic":true,"types":[]},{"text":"impl !Sync for CGFontRef","synthetic":true,"types":[]},{"text":"impl Sync for CGSize","synthetic":true,"types":[]},{"text":"impl Sync for CGPoint","synthetic":true,"types":[]},{"text":"impl Sync for CGRect","synthetic":true,"types":[]},{"text":"impl Sync for CGAffineTransform","synthetic":true,"types":[]},{"text":"impl Sync for CGGradientDrawingOptions","synthetic":true,"types":[]},{"text":"impl !Sync for CGGradient","synthetic":true,"types":[]},{"text":"impl !Sync for CGGradientRef","synthetic":true,"types":[]},{"text":"impl !Sync for CGSRegion","synthetic":true,"types":[]},{"text":"impl Sync for CGSSurface","synthetic":true,"types":[]},{"text":"impl !Sync for CGImage","synthetic":true,"types":[]},{"text":"impl !Sync for CGImageRef","synthetic":true,"types":[]},{"text":"impl Sync for CGImageAlphaInfo","synthetic":true,"types":[]},{"text":"impl Sync for CGImageByteOrderInfo","synthetic":true,"types":[]},{"text":"impl !Sync for CGPath","synthetic":true,"types":[]},{"text":"impl !Sync for CGPathRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for CGPathElementRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for CGPathElement","synthetic":true,"types":[]},{"text":"impl Sync for CGPathElementType","synthetic":true,"types":[]},{"text":"impl Sync for __CGColor","synthetic":true,"types":[]},{"text":"impl Sync for CGImage","synthetic":true,"types":[]},{"text":"impl Sync for CGColorSpace","synthetic":true,"types":[]},{"text":"impl Sync for CGPath","synthetic":true,"types":[]},{"text":"impl Sync for CGDataProvider","synthetic":true,"types":[]},{"text":"impl Sync for CGFont","synthetic":true,"types":[]},{"text":"impl Sync for CGContext","synthetic":true,"types":[]},{"text":"impl Sync for CGGradient","synthetic":true,"types":[]},{"text":"impl Sync for CGEvent","synthetic":true,"types":[]},{"text":"impl Sync for CGEventSource","synthetic":true,"types":[]},{"text":"impl Sync for CGDisplayMode","synthetic":true,"types":[]},{"text":"impl Sync for CGFont","synthetic":false,"types":[]}];
implementors["core_video_sys"] = [{"text":"impl Sync for CVSMPTETime","synthetic":true,"types":[]},{"text":"impl Sync for CVTime","synthetic":true,"types":[]},{"text":"impl Sync for CVTimeStamp","synthetic":true,"types":[]},{"text":"impl Sync for __CVBuffer","synthetic":true,"types":[]},{"text":"impl Sync for CVPlanarComponentInfo","synthetic":true,"types":[]},{"text":"impl Sync for CVPlanarPixelBufferInfo","synthetic":true,"types":[]},{"text":"impl Sync for CVPlanarPixelBufferInfo_YCbCrPlanar","synthetic":true,"types":[]},{"text":"impl Sync for CVPlanarPixelBufferInfo_YCbCrBiPlanar","synthetic":true,"types":[]},{"text":"impl !Sync for CVFillExtendedPixelsCallBackData","synthetic":true,"types":[]},{"text":"impl Sync for __CVDisplayLink","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Sync for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for TryIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl Sync for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Sync for TryReadyError","synthetic":true,"types":[]},{"text":"impl Sync for TrySelectError","synthetic":true,"types":[]},{"text":"impl Sync for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Sync for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sync for Select&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; !Sync for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Stealer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Injector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T, P&gt; !Sync for CompareAndSetError&lt;'g, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; !Sync for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for LocalHandle","synthetic":true,"types":[]},{"text":"impl !Sync for Guard","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send + Sync&gt; Sync for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Collector","synthetic":false,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl Sync for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for ArrayQueue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for SegQueue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl !Sync for Backoff","synthetic":true,"types":[]},{"text":"impl !Sync for Parker","synthetic":true,"types":[]},{"text":"impl Sync for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Sync for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sync&gt; Sync for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Unparker","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send + Sync&gt; Sync for ShardedLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized + Sync&gt; Sync for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized + Sync&gt; Sync for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'env&gt; Sync for Scope&lt;'env&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope, T&gt; Sync for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":false,"types":[]}];
implementors["deflate"] = [{"text":"impl Sync for CompressionOptions","synthetic":true,"types":[]},{"text":"impl Sync for Compression","synthetic":true,"types":[]},{"text":"impl Sync for SpecialOptions","synthetic":true,"types":[]},{"text":"impl Sync for MatchingType","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["dispatch"] = [{"text":"impl Sync for GroupGuard","synthetic":true,"types":[]},{"text":"impl Sync for SuspendGuard","synthetic":true,"types":[]},{"text":"impl Sync for SemaphoreGuard","synthetic":true,"types":[]},{"text":"impl Sync for WaitTimeout","synthetic":true,"types":[]},{"text":"impl Sync for QueueAttribute","synthetic":true,"types":[]},{"text":"impl Sync for QueuePriority","synthetic":true,"types":[]},{"text":"impl Sync for dispatch_object_s","synthetic":true,"types":[]},{"text":"impl Sync for Group","synthetic":false,"types":[]},{"text":"impl Sync for Queue","synthetic":false,"types":[]},{"text":"impl Sync for Once","synthetic":false,"types":[]},{"text":"impl Sync for Semaphore","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Sync for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["flate2"] = [{"text":"impl Sync for Crc","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for CrcReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for CrcWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for GzBuilder","synthetic":true,"types":[]},{"text":"impl Sync for GzHeader","synthetic":true,"types":[]},{"text":"impl Sync for Compress","synthetic":true,"types":[]},{"text":"impl Sync for CompressError","synthetic":true,"types":[]},{"text":"impl Sync for Decompress","synthetic":true,"types":[]},{"text":"impl Sync for DecompressError","synthetic":true,"types":[]},{"text":"impl Sync for Compression","synthetic":true,"types":[]},{"text":"impl Sync for Status","synthetic":true,"types":[]},{"text":"impl Sync for FlushCompress","synthetic":true,"types":[]},{"text":"impl Sync for FlushDecompress","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for DeflateDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for GzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for GzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for ZlibDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["foreign_types_shared"] = [{"text":"impl !Sync for Opaque","synthetic":true,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T, N&gt; Sync for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Sync, N:&nbsp;ArrayLength&lt;T&gt;&gt; Sync for GenericArray&lt;T, N&gt;","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["glow"] = [{"text":"impl !Sync for Context","synthetic":true,"types":[]},{"text":"impl Sync for ActiveUniform","synthetic":true,"types":[]},{"text":"impl Sync for ActiveAttribute","synthetic":true,"types":[]},{"text":"impl Sync for DebugMessageLogEntry","synthetic":true,"types":[]}];
implementors["glutin"] = [{"text":"impl&lt;T&gt; Sync for Context&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for PossiblyCurrent","synthetic":true,"types":[]},{"text":"impl&lt;T, W&gt; Sync for ContextWrapper&lt;T, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for ContextBuilder&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PixelFormat","synthetic":true,"types":[]},{"text":"impl Sync for PixelFormatRequirements","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for GlAttributes&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Rect","synthetic":true,"types":[]},{"text":"impl Sync for NotCurrent","synthetic":true,"types":[]},{"text":"impl Sync for CreationError","synthetic":true,"types":[]},{"text":"impl Sync for ContextError","synthetic":true,"types":[]},{"text":"impl Sync for Api","synthetic":true,"types":[]},{"text":"impl Sync for GlProfile","synthetic":true,"types":[]},{"text":"impl Sync for GlRequest","synthetic":true,"types":[]},{"text":"impl Sync for Robustness","synthetic":true,"types":[]},{"text":"impl Sync for ReleaseBehavior","synthetic":true,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K, V, S&gt; Sync for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, F&gt; Sync for DrainFilter&lt;'a, K, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for RawEntryBuilderMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for RawVacantEntryMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for RawEntryBuilder&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for RawEntryMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Sync for Iter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Sync for IntoIter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Sync for Drain&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for SymmetricDifference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, '_&gt; Sync for RawOccupiedEntryMut&lt;'_, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, S, '_&gt; Sync for OccupiedEntry&lt;'_, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["hdf5_sys"] = [{"text":"impl Sync for H5_ih_info_t","synthetic":true,"types":[]},{"text":"impl Sync for H5_iter_order_t","synthetic":true,"types":[]},{"text":"impl Sync for H5_index_t","synthetic":true,"types":[]},{"text":"impl Sync for H5A_info_t","synthetic":true,"types":[]},{"text":"impl Sync for H5AC_cache_config_t","synthetic":true,"types":[]},{"text":"impl Sync for H5AC_cache_image_config_t","synthetic":true,"types":[]},{"text":"impl Sync for H5C_cache_incr_mode","synthetic":true,"types":[]},{"text":"impl Sync for H5C_cache_flash_incr_mode","synthetic":true,"types":[]},{"text":"impl Sync for H5C_cache_decr_mode","synthetic":true,"types":[]},{"text":"impl Sync for H5D_alloc_time_t","synthetic":true,"types":[]},{"text":"impl Sync for H5D_space_status_t","synthetic":true,"types":[]},{"text":"impl Sync for H5D_fill_time_t","synthetic":true,"types":[]},{"text":"impl Sync for H5D_fill_value_t","synthetic":true,"types":[]},{"text":"impl Sync for H5D_mpio_actual_chunk_opt_mode_t","synthetic":true,"types":[]},{"text":"impl Sync for H5D_mpio_actual_io_mode_t","synthetic":true,"types":[]},{"text":"impl Sync for H5D_mpio_no_collective_cause_t","synthetic":true,"types":[]},{"text":"impl Sync for H5D_layout_t","synthetic":true,"types":[]},{"text":"impl Sync for H5D_vds_view_t","synthetic":true,"types":[]},{"text":"impl !Sync for H5E_error2_t","synthetic":true,"types":[]},{"text":"impl Sync for H5E_type_t","synthetic":true,"types":[]},{"text":"impl Sync for H5E_direction_t","synthetic":true,"types":[]},{"text":"impl Sync for H5F_info_t","synthetic":true,"types":[]},{"text":"impl Sync for H5F_info_t__sohm","synthetic":true,"types":[]},{"text":"impl !Sync for H5F_retry_info_t","synthetic":true,"types":[]},{"text":"impl Sync for H5F_sect_info_t","synthetic":true,"types":[]},{"text":"impl Sync for H5F_info2_t","synthetic":true,"types":[]},{"text":"impl Sync for H5F_info2_t__super","synthetic":true,"types":[]},{"text":"impl Sync for H5F_info2_t__free","synthetic":true,"types":[]},{"text":"impl Sync for H5F_info2_t__sohm","synthetic":true,"types":[]},{"text":"impl Sync for H5F_scope_t","synthetic":true,"types":[]},{"text":"impl Sync for H5F_close_degree_t","synthetic":true,"types":[]},{"text":"impl Sync for H5F_mem_t","synthetic":true,"types":[]},{"text":"impl Sync for H5F_libver_t","synthetic":true,"types":[]},{"text":"impl Sync for H5F_file_space_type_t","synthetic":true,"types":[]},{"text":"impl Sync for H5F_fspace_strategy_t","synthetic":true,"types":[]},{"text":"impl !Sync for H5FD_class_t","synthetic":true,"types":[]},{"text":"impl !Sync for H5FD_free_t","synthetic":true,"types":[]},{"text":"impl !Sync for H5FD_t","synthetic":true,"types":[]},{"text":"impl !Sync for H5FD_file_image_callbacks_t","synthetic":true,"types":[]},{"text":"impl Sync for H5FD_file_image_op_t","synthetic":true,"types":[]},{"text":"impl Sync for H5G_info_t","synthetic":true,"types":[]},{"text":"impl Sync for H5G_storage_type_t","synthetic":true,"types":[]},{"text":"impl Sync for H5I_type_t","synthetic":true,"types":[]},{"text":"impl Sync for H5L_info1_t","synthetic":true,"types":[]},{"text":"impl Sync for H5L_info1_t__u","synthetic":true,"types":[]},{"text":"impl Sync for H5L_info2_t","synthetic":true,"types":[]},{"text":"impl !Sync for H5L_class_t","synthetic":true,"types":[]},{"text":"impl Sync for H5L_info2_t__u","synthetic":true,"types":[]},{"text":"impl Sync for H5L_type_t","synthetic":true,"types":[]},{"text":"impl Sync for H5O_hdr_info_t","synthetic":true,"types":[]},{"text":"impl Sync for H5O_hdr_info_t__space","synthetic":true,"types":[]},{"text":"impl Sync for H5O_hdr_info_t__mesg","synthetic":true,"types":[]},{"text":"impl Sync for H5O_info_t","synthetic":true,"types":[]},{"text":"impl Sync for H5O_info_t__meta_size","synthetic":true,"types":[]},{"text":"impl Sync for H5O_token_t","synthetic":true,"types":[]},{"text":"impl Sync for H5O_info2_t","synthetic":true,"types":[]},{"text":"impl Sync for H5O_native_info_meta_size_t","synthetic":true,"types":[]},{"text":"impl Sync for H5O_native_info_t","synthetic":true,"types":[]},{"text":"impl Sync for H5O_type_t","synthetic":true,"types":[]},{"text":"impl Sync for H5O_mcdt_search_ret_t","synthetic":true,"types":[]},{"text":"impl Sync for H5R_ref_t","synthetic":true,"types":[]},{"text":"impl Sync for H5R_ref_t_u","synthetic":true,"types":[]},{"text":"impl Sync for H5R_type_t","synthetic":true,"types":[]},{"text":"impl Sync for H5S_class_t","synthetic":true,"types":[]},{"text":"impl Sync for H5S_seloper_t","synthetic":true,"types":[]},{"text":"impl Sync for H5S_sel_type","synthetic":true,"types":[]},{"text":"impl !Sync for H5T_cdata_t","synthetic":true,"types":[]},{"text":"impl !Sync for hvl_t","synthetic":true,"types":[]},{"text":"impl Sync for H5T_class_t","synthetic":true,"types":[]},{"text":"impl Sync for H5T_order_t","synthetic":true,"types":[]},{"text":"impl Sync for H5T_sign_t","synthetic":true,"types":[]},{"text":"impl Sync for H5T_norm_t","synthetic":true,"types":[]},{"text":"impl Sync for H5T_cset_t","synthetic":true,"types":[]},{"text":"impl Sync for H5T_str_t","synthetic":true,"types":[]},{"text":"impl Sync for H5T_pad_t","synthetic":true,"types":[]},{"text":"impl Sync for H5T_cmd_t","synthetic":true,"types":[]},{"text":"impl Sync for H5T_bkg_t","synthetic":true,"types":[]},{"text":"impl Sync for H5T_pers_t","synthetic":true,"types":[]},{"text":"impl Sync for H5T_direction_t","synthetic":true,"types":[]},{"text":"impl Sync for H5T_conv_except_t","synthetic":true,"types":[]},{"text":"impl Sync for H5T_conv_ret_t","synthetic":true,"types":[]},{"text":"impl !Sync for H5Z_cb_t","synthetic":true,"types":[]},{"text":"impl !Sync for H5Z_class2_t","synthetic":true,"types":[]},{"text":"impl Sync for H5Z_SO_scale_type_t","synthetic":true,"types":[]},{"text":"impl Sync for H5Z_EDC_t","synthetic":true,"types":[]},{"text":"impl Sync for H5Z_cb_return_t","synthetic":true,"types":[]},{"text":"impl Sync for H5PL_type_t","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl Sync for FromHexError","synthetic":true,"types":[]}];
implementors["hibitset"] = [{"text":"impl Sync for AtomicBitSet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for BitIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for DrainBitIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for BitParIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for BitProducer&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BitSetAll","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for BitSetAnd&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for BitSetNot&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for BitSetOr&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for BitSetXor&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BitSet","synthetic":true,"types":[]}];
implementors["image"] = [{"text":"impl&lt;T&gt; Sync for Luma&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for LumaA&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Rgb&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Rgba&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Bgr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Bgra&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Progress","synthetic":true,"types":[]},{"text":"impl&lt;'a, I:&nbsp;?Sized&gt; Sync for Pixels&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for SubImage&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Container&gt; Sync for ImageBuffer&lt;P, Container&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Container: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Delay","synthetic":true,"types":[]},{"text":"impl Sync for Frame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Frames&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ColorType","synthetic":true,"types":[]},{"text":"impl Sync for ExtendedColorType","synthetic":true,"types":[]},{"text":"impl Sync for ImageFormat","synthetic":true,"types":[]},{"text":"impl Sync for ImageOutputFormat","synthetic":true,"types":[]},{"text":"impl Sync for DynamicImage","synthetic":true,"types":[]},{"text":"impl Sync for UnsupportedError","synthetic":true,"types":[]},{"text":"impl Sync for EncodingError","synthetic":true,"types":[]},{"text":"impl Sync for ParameterError","synthetic":true,"types":[]},{"text":"impl Sync for DecodingError","synthetic":true,"types":[]},{"text":"impl Sync for LimitError","synthetic":true,"types":[]},{"text":"impl Sync for ImageError","synthetic":true,"types":[]},{"text":"impl Sync for UnsupportedErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for ParameterErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for LimitErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for ImageFormatHint","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for EnumeratePixels&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for EnumeratePixelsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for EnumerateRows&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for EnumerateRowsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for Pixels&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for PixelsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for Rows&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; Sync for RowsMut&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Rect","synthetic":true,"types":[]},{"text":"impl Sync for NeuQuant","synthetic":true,"types":[]},{"text":"impl Sync for FilterType","synthetic":true,"types":[]},{"text":"impl Sync for BiLevel","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer&gt; Sync for FlatSamples&lt;Buffer&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SampleLayout","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; Sync for View&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; Sync for ViewMut&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for NormalForm","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for JpegDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Sync for JpegEncoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PixelDensity","synthetic":true,"types":[]},{"text":"impl Sync for PixelDensityUnit","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for PngReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for PngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ApngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for PngEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CompressionType","synthetic":true,"types":[]},{"text":"impl Sync for FilterType","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; Sync for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Sync for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; Sync for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K:&nbsp;Sync, V:&nbsp;Sync, '_&gt; Sync for OccupiedEntry&lt;'_, K, V&gt;","synthetic":false,"types":[]}];
implementors["indicatif"] = [{"text":"impl Sync for BinaryBytes","synthetic":true,"types":[]},{"text":"impl Sync for DecimalBytes","synthetic":true,"types":[]},{"text":"impl Sync for FormattedDuration","synthetic":true,"types":[]},{"text":"impl Sync for HumanBytes","synthetic":true,"types":[]},{"text":"impl Sync for HumanDuration","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ProgressBarIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ProgressBar","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for ProgressBarWrap&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ProgressDrawTarget","synthetic":true,"types":[]},{"text":"impl Sync for WeakProgressBar","synthetic":true,"types":[]},{"text":"impl Sync for ProgressStyle","synthetic":true,"types":[]},{"text":"impl Sync for MultiProgress","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, J&gt; Sync for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, Pred&gt; Sync for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; Sync for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Sync for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Sync for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Sync for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Sync for Format&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !Sync for FormatWith&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Sync for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Sync for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; Sync for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Sync for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Sync for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Sync for Buffer","synthetic":true,"types":[]}];
implementors["jpeg_decoder"] = [{"text":"impl&lt;R&gt; Sync for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ImageInfo","synthetic":true,"types":[]},{"text":"impl Sync for PixelFormat","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for UnsupportedFeature","synthetic":true,"types":[]}];
implementors["json5"] = [{"text":"impl Sync for Location","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl !Sync for group","synthetic":true,"types":[]},{"text":"impl Sync for utimbuf","synthetic":true,"types":[]},{"text":"impl Sync for timeval","synthetic":true,"types":[]},{"text":"impl Sync for timespec","synthetic":true,"types":[]},{"text":"impl Sync for rlimit","synthetic":true,"types":[]},{"text":"impl Sync for rusage","synthetic":true,"types":[]},{"text":"impl Sync for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl !Sync for hostent","synthetic":true,"types":[]},{"text":"impl !Sync for iovec","synthetic":true,"types":[]},{"text":"impl Sync for pollfd","synthetic":true,"types":[]},{"text":"impl Sync for winsize","synthetic":true,"types":[]},{"text":"impl Sync for linger","synthetic":true,"types":[]},{"text":"impl !Sync for sigval","synthetic":true,"types":[]},{"text":"impl Sync for itimerval","synthetic":true,"types":[]},{"text":"impl Sync for tms","synthetic":true,"types":[]},{"text":"impl !Sync for servent","synthetic":true,"types":[]},{"text":"impl !Sync for protoent","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl !Sync for passwd","synthetic":true,"types":[]},{"text":"impl !Sync for ifaddrs","synthetic":true,"types":[]},{"text":"impl Sync for fd_set","synthetic":true,"types":[]},{"text":"impl !Sync for tm","synthetic":true,"types":[]},{"text":"impl !Sync for msghdr","synthetic":true,"types":[]},{"text":"impl Sync for cmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for fsid_t","synthetic":true,"types":[]},{"text":"impl !Sync for if_nameindex","synthetic":true,"types":[]},{"text":"impl !Sync for regex_t","synthetic":true,"types":[]},{"text":"impl Sync for regmatch_t","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Sync for utsname","synthetic":true,"types":[]},{"text":"impl Sync for ip_mreq","synthetic":true,"types":[]},{"text":"impl !Sync for aiocb","synthetic":true,"types":[]},{"text":"impl !Sync for glob_t","synthetic":true,"types":[]},{"text":"impl !Sync for addrinfo","synthetic":true,"types":[]},{"text":"impl Sync for mach_timebase_info","synthetic":true,"types":[]},{"text":"impl Sync for stat","synthetic":true,"types":[]},{"text":"impl Sync for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl !Sync for siginfo_t","synthetic":true,"types":[]},{"text":"impl Sync for sigaction","synthetic":true,"types":[]},{"text":"impl !Sync for stack_t","synthetic":true,"types":[]},{"text":"impl Sync for fstore_t","synthetic":true,"types":[]},{"text":"impl Sync for radvisory","synthetic":true,"types":[]},{"text":"impl Sync for statvfs","synthetic":true,"types":[]},{"text":"impl !Sync for Dl_info","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Sync for kevent64_s","synthetic":true,"types":[]},{"text":"impl Sync for dqblk","synthetic":true,"types":[]},{"text":"impl Sync for if_msghdr","synthetic":true,"types":[]},{"text":"impl Sync for termios","synthetic":true,"types":[]},{"text":"impl Sync for flock","synthetic":true,"types":[]},{"text":"impl !Sync for sf_hdtr","synthetic":true,"types":[]},{"text":"impl !Sync for lconv","synthetic":true,"types":[]},{"text":"impl Sync for proc_taskinfo","synthetic":true,"types":[]},{"text":"impl Sync for proc_bsdinfo","synthetic":true,"types":[]},{"text":"impl Sync for proc_taskallinfo","synthetic":true,"types":[]},{"text":"impl Sync for xsw_usage","synthetic":true,"types":[]},{"text":"impl Sync for xucred","synthetic":true,"types":[]},{"text":"impl Sync for mach_header","synthetic":true,"types":[]},{"text":"impl Sync for mach_header_64","synthetic":true,"types":[]},{"text":"impl Sync for segment_command","synthetic":true,"types":[]},{"text":"impl Sync for segment_command_64","synthetic":true,"types":[]},{"text":"impl Sync for load_command","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_dl","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_inarp","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_ctl","synthetic":true,"types":[]},{"text":"impl Sync for in_pktinfo","synthetic":true,"types":[]},{"text":"impl Sync for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Sync for ipc_perm","synthetic":true,"types":[]},{"text":"impl Sync for sembuf","synthetic":true,"types":[]},{"text":"impl Sync for arphdr","synthetic":true,"types":[]},{"text":"impl Sync for in_addr","synthetic":true,"types":[]},{"text":"impl !Sync for sa_endpoints_t","synthetic":true,"types":[]},{"text":"impl Sync for timex","synthetic":true,"types":[]},{"text":"impl Sync for ntptimeval","synthetic":true,"types":[]},{"text":"impl !Sync for kevent","synthetic":true,"types":[]},{"text":"impl Sync for semid_ds","synthetic":true,"types":[]},{"text":"impl !Sync for shmid_ds","synthetic":true,"types":[]},{"text":"impl Sync for proc_threadinfo","synthetic":true,"types":[]},{"text":"impl Sync for statfs","synthetic":true,"types":[]},{"text":"impl Sync for dirent","synthetic":true,"types":[]},{"text":"impl Sync for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Sync for utmpx","synthetic":true,"types":[]},{"text":"impl !Sync for sigevent","synthetic":true,"types":[]},{"text":"impl Sync for timeval32","synthetic":true,"types":[]},{"text":"impl Sync for if_data","synthetic":true,"types":[]},{"text":"impl Sync for bpf_hdr","synthetic":true,"types":[]},{"text":"impl !Sync for ucontext_t","synthetic":true,"types":[]},{"text":"impl Sync for __darwin_mcontext64","synthetic":true,"types":[]},{"text":"impl Sync for __darwin_x86_exception_state64","synthetic":true,"types":[]},{"text":"impl Sync for __darwin_x86_thread_state64","synthetic":true,"types":[]},{"text":"impl Sync for __darwin_x86_float_state64","synthetic":true,"types":[]},{"text":"impl Sync for __darwin_mmst_reg","synthetic":true,"types":[]},{"text":"impl Sync for __darwin_xmm_reg","synthetic":true,"types":[]},{"text":"impl Sync for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Sync for max_align_t","synthetic":true,"types":[]},{"text":"impl Sync for in6_addr","synthetic":true,"types":[]},{"text":"impl !Sync for semun","synthetic":true,"types":[]},{"text":"impl Sync for DIR","synthetic":true,"types":[]},{"text":"impl Sync for FILE","synthetic":true,"types":[]},{"text":"impl Sync for fpos_t","synthetic":true,"types":[]},{"text":"impl Sync for timezone","synthetic":true,"types":[]}];
implementors["libz_sys"] = [{"text":"impl !Sync for gz_header","synthetic":true,"types":[]},{"text":"impl !Sync for z_stream","synthetic":true,"types":[]},{"text":"impl Sync for gzFile_s","synthetic":true,"types":[]},{"text":"impl Sync for internal_state","synthetic":true,"types":[]}];
implementors["lock_api"] = [{"text":"impl Sync for GuardSend","synthetic":true,"types":[]},{"text":"impl !Sync for GuardNoSend","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Sync, T:&nbsp;?Sized + Send&gt; Sync for Mutex&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedMutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Sync, G:&nbsp;GetThreadId + Sync, T:&nbsp;?Sized + Send&gt; Sync for ReentrantMutex&lt;R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, G:&nbsp;GetThreadId + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, G:&nbsp;GetThreadId + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawRwLock + Sync, T:&nbsp;?Sized + Send + Sync&gt; Sync for RwLock&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for RwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for RwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLockUpgrade + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for RwLockUpgradableReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedRwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedRwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; !Sync for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Sync for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Sync for Level","synthetic":true,"types":[]},{"text":"impl Sync for LevelFilter","synthetic":true,"types":[]}];
implementors["malloc_buf"] = [{"text":"impl&lt;T&gt; !Sync for MallocBuffer&lt;T&gt;","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Sync for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Sync for StreamResult","synthetic":true,"types":[]},{"text":"impl Sync for MZFlush","synthetic":true,"types":[]},{"text":"impl Sync for MZStatus","synthetic":true,"types":[]},{"text":"impl Sync for MZError","synthetic":true,"types":[]},{"text":"impl Sync for DataFormat","synthetic":true,"types":[]},{"text":"impl Sync for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Sync for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl Sync for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl Sync for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl Sync for TINFLStatus","synthetic":true,"types":[]},{"text":"impl Sync for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl Sync for MinReset","synthetic":true,"types":[]},{"text":"impl Sync for ZeroReset","synthetic":true,"types":[]},{"text":"impl Sync for FullReset","synthetic":true,"types":[]},{"text":"impl Sync for InflateState","synthetic":true,"types":[]}];
implementors["nalgebra"] = [{"text":"impl&lt;N, R, C, S&gt; Sync for Matrix&lt;N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for EuclideanNorm","synthetic":true,"types":[]},{"text":"impl Sync for LpNorm","synthetic":true,"types":[]},{"text":"impl Sync for UniformNorm","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Unit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; Sync for ArrayStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; Sync for VecStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ShapeConstraint","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for X&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for XY&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for XYZ&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for XYZW&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for XYZWA&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for XYZWAB&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for IJKW&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M2x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M2x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M2x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M2x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M2x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M3x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M3x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M3x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M3x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M3x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M4x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M4x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M4x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M4x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M4x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M5x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M5x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M5x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M5x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M5x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M6x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M6x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M6x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M6x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for M6x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DefaultAllocator","synthetic":true,"types":[]},{"text":"impl Sync for Dynamic","synthetic":true,"types":[]},{"text":"impl Sync for U1","synthetic":true,"types":[]},{"text":"impl Sync for U0","synthetic":true,"types":[]},{"text":"impl Sync for U2","synthetic":true,"types":[]},{"text":"impl Sync for U3","synthetic":true,"types":[]},{"text":"impl Sync for U4","synthetic":true,"types":[]},{"text":"impl Sync for U5","synthetic":true,"types":[]},{"text":"impl Sync for U6","synthetic":true,"types":[]},{"text":"impl Sync for U7","synthetic":true,"types":[]},{"text":"impl Sync for U8","synthetic":true,"types":[]},{"text":"impl Sync for U9","synthetic":true,"types":[]},{"text":"impl Sync for U10","synthetic":true,"types":[]},{"text":"impl Sync for U11","synthetic":true,"types":[]},{"text":"impl Sync for U12","synthetic":true,"types":[]},{"text":"impl Sync for U13","synthetic":true,"types":[]},{"text":"impl Sync for U14","synthetic":true,"types":[]},{"text":"impl Sync for U15","synthetic":true,"types":[]},{"text":"impl Sync for U16","synthetic":true,"types":[]},{"text":"impl Sync for U17","synthetic":true,"types":[]},{"text":"impl Sync for U18","synthetic":true,"types":[]},{"text":"impl Sync for U19","synthetic":true,"types":[]},{"text":"impl Sync for U20","synthetic":true,"types":[]},{"text":"impl Sync for U21","synthetic":true,"types":[]},{"text":"impl Sync for U22","synthetic":true,"types":[]},{"text":"impl Sync for U23","synthetic":true,"types":[]},{"text":"impl Sync for U24","synthetic":true,"types":[]},{"text":"impl Sync for U25","synthetic":true,"types":[]},{"text":"impl Sync for U26","synthetic":true,"types":[]},{"text":"impl Sync for U27","synthetic":true,"types":[]},{"text":"impl Sync for U28","synthetic":true,"types":[]},{"text":"impl Sync for U29","synthetic":true,"types":[]},{"text":"impl Sync for U30","synthetic":true,"types":[]},{"text":"impl Sync for U31","synthetic":true,"types":[]},{"text":"impl Sync for U32","synthetic":true,"types":[]},{"text":"impl Sync for U33","synthetic":true,"types":[]},{"text":"impl Sync for U34","synthetic":true,"types":[]},{"text":"impl Sync for U35","synthetic":true,"types":[]},{"text":"impl Sync for U36","synthetic":true,"types":[]},{"text":"impl Sync for U37","synthetic":true,"types":[]},{"text":"impl Sync for U38","synthetic":true,"types":[]},{"text":"impl Sync for U39","synthetic":true,"types":[]},{"text":"impl Sync for U40","synthetic":true,"types":[]},{"text":"impl Sync for U41","synthetic":true,"types":[]},{"text":"impl Sync for U42","synthetic":true,"types":[]},{"text":"impl Sync for U43","synthetic":true,"types":[]},{"text":"impl Sync for U44","synthetic":true,"types":[]},{"text":"impl Sync for U45","synthetic":true,"types":[]},{"text":"impl Sync for U46","synthetic":true,"types":[]},{"text":"impl Sync for U47","synthetic":true,"types":[]},{"text":"impl Sync for U48","synthetic":true,"types":[]},{"text":"impl Sync for U49","synthetic":true,"types":[]},{"text":"impl Sync for U50","synthetic":true,"types":[]},{"text":"impl Sync for U51","synthetic":true,"types":[]},{"text":"impl Sync for U52","synthetic":true,"types":[]},{"text":"impl Sync for U53","synthetic":true,"types":[]},{"text":"impl Sync for U54","synthetic":true,"types":[]},{"text":"impl Sync for U55","synthetic":true,"types":[]},{"text":"impl Sync for U56","synthetic":true,"types":[]},{"text":"impl Sync for U57","synthetic":true,"types":[]},{"text":"impl Sync for U58","synthetic":true,"types":[]},{"text":"impl Sync for U59","synthetic":true,"types":[]},{"text":"impl Sync for U60","synthetic":true,"types":[]},{"text":"impl Sync for U61","synthetic":true,"types":[]},{"text":"impl Sync for U62","synthetic":true,"types":[]},{"text":"impl Sync for U63","synthetic":true,"types":[]},{"text":"impl Sync for U64","synthetic":true,"types":[]},{"text":"impl Sync for U65","synthetic":true,"types":[]},{"text":"impl Sync for U66","synthetic":true,"types":[]},{"text":"impl Sync for U67","synthetic":true,"types":[]},{"text":"impl Sync for U68","synthetic":true,"types":[]},{"text":"impl Sync for U69","synthetic":true,"types":[]},{"text":"impl Sync for U70","synthetic":true,"types":[]},{"text":"impl Sync for U71","synthetic":true,"types":[]},{"text":"impl Sync for U72","synthetic":true,"types":[]},{"text":"impl Sync for U73","synthetic":true,"types":[]},{"text":"impl Sync for U74","synthetic":true,"types":[]},{"text":"impl Sync for U75","synthetic":true,"types":[]},{"text":"impl Sync for U76","synthetic":true,"types":[]},{"text":"impl Sync for U77","synthetic":true,"types":[]},{"text":"impl Sync for U78","synthetic":true,"types":[]},{"text":"impl Sync for U79","synthetic":true,"types":[]},{"text":"impl Sync for U80","synthetic":true,"types":[]},{"text":"impl Sync for U81","synthetic":true,"types":[]},{"text":"impl Sync for U82","synthetic":true,"types":[]},{"text":"impl Sync for U83","synthetic":true,"types":[]},{"text":"impl Sync for U84","synthetic":true,"types":[]},{"text":"impl Sync for U85","synthetic":true,"types":[]},{"text":"impl Sync for U86","synthetic":true,"types":[]},{"text":"impl Sync for U87","synthetic":true,"types":[]},{"text":"impl Sync for U88","synthetic":true,"types":[]},{"text":"impl Sync for U89","synthetic":true,"types":[]},{"text":"impl Sync for U90","synthetic":true,"types":[]},{"text":"impl Sync for U91","synthetic":true,"types":[]},{"text":"impl Sync for U92","synthetic":true,"types":[]},{"text":"impl Sync for U93","synthetic":true,"types":[]},{"text":"impl Sync for U94","synthetic":true,"types":[]},{"text":"impl Sync for U95","synthetic":true,"types":[]},{"text":"impl Sync for U96","synthetic":true,"types":[]},{"text":"impl Sync for U97","synthetic":true,"types":[]},{"text":"impl Sync for U98","synthetic":true,"types":[]},{"text":"impl Sync for U99","synthetic":true,"types":[]},{"text":"impl Sync for U100","synthetic":true,"types":[]},{"text":"impl Sync for U101","synthetic":true,"types":[]},{"text":"impl Sync for U102","synthetic":true,"types":[]},{"text":"impl Sync for U103","synthetic":true,"types":[]},{"text":"impl Sync for U104","synthetic":true,"types":[]},{"text":"impl Sync for U105","synthetic":true,"types":[]},{"text":"impl Sync for U106","synthetic":true,"types":[]},{"text":"impl Sync for U107","synthetic":true,"types":[]},{"text":"impl Sync for U108","synthetic":true,"types":[]},{"text":"impl Sync for U109","synthetic":true,"types":[]},{"text":"impl Sync for U110","synthetic":true,"types":[]},{"text":"impl Sync for U111","synthetic":true,"types":[]},{"text":"impl Sync for U112","synthetic":true,"types":[]},{"text":"impl Sync for U113","synthetic":true,"types":[]},{"text":"impl Sync for U114","synthetic":true,"types":[]},{"text":"impl Sync for U115","synthetic":true,"types":[]},{"text":"impl Sync for U116","synthetic":true,"types":[]},{"text":"impl Sync for U117","synthetic":true,"types":[]},{"text":"impl Sync for U118","synthetic":true,"types":[]},{"text":"impl Sync for U119","synthetic":true,"types":[]},{"text":"impl Sync for U120","synthetic":true,"types":[]},{"text":"impl Sync for U121","synthetic":true,"types":[]},{"text":"impl Sync for U122","synthetic":true,"types":[]},{"text":"impl Sync for U123","synthetic":true,"types":[]},{"text":"impl Sync for U124","synthetic":true,"types":[]},{"text":"impl Sync for U125","synthetic":true,"types":[]},{"text":"impl Sync for U126","synthetic":true,"types":[]},{"text":"impl Sync for U127","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !Sync for MatrixIter&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !Sync for MatrixIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; Sync for RowIter&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !Sync for RowIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; Sync for ColumnIter&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !Sync for ColumnIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Sync for Point&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Sync for Rotation&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for DualQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Sync for Translation&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, R&gt; !Sync for Isometry&lt;N, D, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, R&gt; !Sync for Similarity&lt;N, D, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, C&gt; !Sync for Transform&lt;N, D, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, S&gt; Sync for Reflection&lt;N, D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Orthographic3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for Perspective3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TGeneral","synthetic":true,"types":[]},{"text":"impl Sync for TProjective","synthetic":true,"types":[]},{"text":"impl Sync for TAffine","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Sync for Bidiagonal&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Sync for Cholesky&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Sync for FullPivLU&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Sync for Hessenberg&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Sync for LU&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !Sync for PermutationSequence&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Sync for QR&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Sync for Schur&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !Sync for SVD&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Sync for SymmetricEigen&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !Sync for SymmetricTridiagonal&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for GivensRotation&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ComplexField&gt;::RealField: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N:&nbsp;Scalar + Sync, R:&nbsp;Dim, C:&nbsp;Dim, RStride:&nbsp;Dim, CStride:&nbsp;Dim&gt; Sync for SliceStorage&lt;'a, N, R, C, RStride, CStride&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;Scalar + Sync, R:&nbsp;Dim, C:&nbsp;Dim, RStride:&nbsp;Dim, CStride:&nbsp;Dim&gt; Sync for SliceStorageMut&lt;'a, N, R, C, RStride, CStride&gt;","synthetic":false,"types":[]}];
implementors["ndarray"] = [{"text":"impl&lt;I:&nbsp;?Sized&gt; Sync for Dim&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Axis","synthetic":true,"types":[]},{"text":"impl Sync for AxisDescription","synthetic":true,"types":[]},{"text":"impl Sync for IxDynImpl","synthetic":true,"types":[]},{"text":"impl Sync for ShapeError","synthetic":true,"types":[]},{"text":"impl Sync for Slice","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, D&gt; Sync for SliceInfo&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Parts, D&gt; Sync for Zip&lt;Parts, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Parts: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for OwnedArcRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RawViewRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for ViewRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for Shape&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for StrideShape&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for SliceOrIndex","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Sync for CowRepr&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, D&gt; Sync for Axes&lt;'a, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for Indices&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for IndicesIter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for ExactChunks&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for ExactChunksIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for ExactChunksIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for ExactChunksMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for Lanes&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for LanesMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for Windows&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Parallel&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, D&gt; Sync for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync + Data,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A&gt; Sync for OwnedRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for Iter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for IndexedIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for LanesIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for AxisIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for AxisChunksIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for IterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for IndexedIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for LanesIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for AxisIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for AxisChunksIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["ndarray_parallel"] = [{"text":"impl&lt;I&gt; Sync for Parallel&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ndarray_stats"] = [{"text":"impl Sync for Higher","synthetic":true,"types":[]},{"text":"impl Sync for Lower","synthetic":true,"types":[]},{"text":"impl Sync for Nearest","synthetic":true,"types":[]},{"text":"impl Sync for Midpoint","synthetic":true,"types":[]},{"text":"impl Sync for Linear","synthetic":true,"types":[]},{"text":"impl Sync for EmptyInput","synthetic":true,"types":[]},{"text":"impl Sync for ShapeMismatch","synthetic":true,"types":[]},{"text":"impl Sync for MinMaxError","synthetic":true,"types":[]},{"text":"impl Sync for MultiInputError","synthetic":true,"types":[]},{"text":"impl Sync for QuantileError","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for Bins&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for Edges&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for Grid&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for GridBuilder&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for Histogram&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BinNotFound","synthetic":true,"types":[]},{"text":"impl Sync for BinsBuildError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Sqrt&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Rice&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Sturges&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for FreedmanDiaconis&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Auto&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["netcdf"] = [{"text":"impl&lt;'a&gt; Sync for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for AttrValue","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Sync for Dimension&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Identifier","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Options","synthetic":true,"types":[]},{"text":"impl Sync for File","synthetic":true,"types":[]},{"text":"impl Sync for MutableFile","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Sync for Group&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; Sync for GroupMut&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl Sync for OpaqueType","synthetic":true,"types":[]},{"text":"impl Sync for VlenType","synthetic":true,"types":[]},{"text":"impl Sync for EnumType","synthetic":true,"types":[]},{"text":"impl Sync for CompoundType","synthetic":true,"types":[]},{"text":"impl Sync for CompoundField","synthetic":true,"types":[]},{"text":"impl Sync for CompoundBuilder","synthetic":true,"types":[]},{"text":"impl Sync for BasicType","synthetic":true,"types":[]},{"text":"impl Sync for VariableType","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Sync for Variable&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Sync for VariableMut&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Endianness","synthetic":true,"types":[]}];
implementors["netcdf_sys"] = [{"text":"impl !Sync for nc_vlen_t","synthetic":true,"types":[]}];
implementors["noisy_float"] = [{"text":"impl&lt;F, C&gt; Sync for NoisyFloat&lt;F, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for NumChecker","synthetic":true,"types":[]},{"text":"impl Sync for FiniteChecker","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; Sync for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Sync for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; Sync for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Sync for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Sync for ParseFloatError","synthetic":true,"types":[]},{"text":"impl Sync for FloatErrorKind","synthetic":true,"types":[]}];
implementors["number_prefix"] = [{"text":"impl Sync for Prefix","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for NumberPrefix&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["objc"] = [{"text":"impl !Sync for Encoding","synthetic":true,"types":[]},{"text":"impl Sync for MessageError","synthetic":true,"types":[]},{"text":"impl Sync for Ivar","synthetic":true,"types":[]},{"text":"impl Sync for Method","synthetic":true,"types":[]},{"text":"impl Sync for Class","synthetic":true,"types":[]},{"text":"impl Sync for Protocol","synthetic":true,"types":[]},{"text":"impl Sync for Object","synthetic":true,"types":[]},{"text":"impl !Sync for ClassDecl","synthetic":true,"types":[]},{"text":"impl !Sync for ProtocolDecl","synthetic":true,"types":[]},{"text":"impl !Sync for StrongPtr","synthetic":true,"types":[]},{"text":"impl !Sync for WeakPtr","synthetic":true,"types":[]},{"text":"impl Sync for Sel","synthetic":false,"types":[]}];
implementors["object_pool"] = [{"text":"impl&lt;'a, T&gt; Sync for Pool&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Reusable&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["palette"] = [{"text":"impl&lt;C, T&gt; Sync for Alpha&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Sync for Hsl&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Sync for Hsv&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Sync for Hwb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; Sync for Lab&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; Sync for Lch&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; Sync for Xyz&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; Sync for Yxy&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for OutOfBounds&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for LabHue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RgbHue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Equations","synthetic":true,"types":[]},{"text":"impl Sync for Parameters","synthetic":true,"types":[]},{"text":"impl&lt;C, T&gt; Sync for PreAlpha&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Equation","synthetic":true,"types":[]},{"text":"impl Sync for Parameter","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Sync for Gradient&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Mix&gt;::Scalar: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; Sync for Take&lt;'a, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Mix&gt;::Scalar: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; Sync for Slice&lt;'a, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Mix&gt;::Scalar: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Range&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Sync for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Sync for Rgb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ConeResponseMatrices&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Method","synthetic":true,"types":[]},{"text":"impl Sync for Srgb","synthetic":true,"types":[]},{"text":"impl&lt;S, N&gt; Sync for Gamma&lt;S, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for GammaFn&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for F2p2","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Sync for Linear&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for LinearFn","synthetic":true,"types":[]},{"text":"impl Sync for A","synthetic":true,"types":[]},{"text":"impl Sync for B","synthetic":true,"types":[]},{"text":"impl Sync for C","synthetic":true,"types":[]},{"text":"impl Sync for D50","synthetic":true,"types":[]},{"text":"impl Sync for D55","synthetic":true,"types":[]},{"text":"impl Sync for D65","synthetic":true,"types":[]},{"text":"impl Sync for D75","synthetic":true,"types":[]},{"text":"impl Sync for E","synthetic":true,"types":[]},{"text":"impl Sync for F2","synthetic":true,"types":[]},{"text":"impl Sync for F7","synthetic":true,"types":[]},{"text":"impl Sync for F11","synthetic":true,"types":[]},{"text":"impl Sync for D50Degree10","synthetic":true,"types":[]},{"text":"impl Sync for D55Degree10","synthetic":true,"types":[]},{"text":"impl Sync for D65Degree10","synthetic":true,"types":[]},{"text":"impl Sync for D75Degree10","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Sync for Condvar","synthetic":true,"types":[]},{"text":"impl Sync for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl Sync for Once","synthetic":true,"types":[]},{"text":"impl Sync for RawMutex","synthetic":true,"types":[]},{"text":"impl Sync for RawRwLock","synthetic":true,"types":[]},{"text":"impl Sync for RawThreadId","synthetic":true,"types":[]},{"text":"impl Sync for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Sync for ParkToken","synthetic":true,"types":[]},{"text":"impl Sync for UnparkResult","synthetic":true,"types":[]},{"text":"impl Sync for UnparkToken","synthetic":true,"types":[]},{"text":"impl Sync for SpinWait","synthetic":true,"types":[]},{"text":"impl Sync for FilterOp","synthetic":true,"types":[]},{"text":"impl Sync for ParkResult","synthetic":true,"types":[]},{"text":"impl Sync for RequeueOp","synthetic":true,"types":[]}];
implementors["pest"] = [{"text":"impl&lt;'i, R&gt; Sync for ParserState&lt;'i, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Sync for Position&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Sync for Lines&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Sync for Span&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Atomicity","synthetic":true,"types":[]},{"text":"impl Sync for Lookahead","synthetic":true,"types":[]},{"text":"impl Sync for MatchDir","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; Sync for Token&lt;'i, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Error&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ErrorVariant&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for InputLocation","synthetic":true,"types":[]},{"text":"impl Sync for LineColLocation","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; !Sync for FlatPairs&lt;'i, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; !Sync for Pair&lt;'i, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; !Sync for Pairs&lt;'i, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; !Sync for Tokens&lt;'i, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Operator&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for PrecClimber&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Assoc","synthetic":true,"types":[]}];
implementors["pest_meta"] = [{"text":"impl Sync for Rule","synthetic":true,"types":[]},{"text":"impl Sync for ExprTopDownIterator","synthetic":true,"types":[]},{"text":"impl Sync for RuleType","synthetic":true,"types":[]},{"text":"impl Sync for Expr","synthetic":true,"types":[]},{"text":"impl Sync for OptimizedRule","synthetic":true,"types":[]},{"text":"impl Sync for OptimizedExprTopDownIterator","synthetic":true,"types":[]},{"text":"impl Sync for OptimizedExpr","synthetic":true,"types":[]},{"text":"impl Sync for PestParser","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Sync for ParserRule&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Sync for ParserNode&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Rule","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Sync for ParserExpr&lt;'i&gt;","synthetic":true,"types":[]}];
implementors["phf"] = [{"text":"impl&lt;K, V&gt; Sync for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Set&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Entries&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["phf_shared"] = [{"text":"impl Sync for Hashes","synthetic":true,"types":[]}];
implementors["png"] = [{"text":"impl Sync for PixelDimensions","synthetic":true,"types":[]},{"text":"impl Sync for FrameControl","synthetic":true,"types":[]},{"text":"impl Sync for AnimationControl","synthetic":true,"types":[]},{"text":"impl Sync for Info","synthetic":true,"types":[]},{"text":"impl Sync for Transformations","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Limits","synthetic":true,"types":[]},{"text":"impl Sync for OutputInfo","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Sync for StreamWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ColorType","synthetic":true,"types":[]},{"text":"impl Sync for BitDepth","synthetic":true,"types":[]},{"text":"impl Sync for Unit","synthetic":true,"types":[]},{"text":"impl Sync for DisposeOp","synthetic":true,"types":[]},{"text":"impl Sync for BlendOp","synthetic":true,"types":[]},{"text":"impl Sync for Compression","synthetic":true,"types":[]},{"text":"impl Sync for Decoded","synthetic":true,"types":[]},{"text":"impl Sync for DecodingError","synthetic":true,"types":[]},{"text":"impl Sync for EncodingError","synthetic":true,"types":[]},{"text":"impl Sync for FilterType","synthetic":true,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Sync for YesS3","synthetic":true,"types":[]},{"text":"impl Sync for NoS3","synthetic":true,"types":[]},{"text":"impl Sync for YesS4","synthetic":true,"types":[]},{"text":"impl Sync for NoS4","synthetic":true,"types":[]},{"text":"impl Sync for YesA1","synthetic":true,"types":[]},{"text":"impl Sync for NoA1","synthetic":true,"types":[]},{"text":"impl Sync for YesA2","synthetic":true,"types":[]},{"text":"impl Sync for NoA2","synthetic":true,"types":[]},{"text":"impl Sync for YesNI","synthetic":true,"types":[]},{"text":"impl Sync for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Sync for SseMachine&lt;S3, S4, NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S3: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S4: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Sync for Avx2Machine&lt;NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for vec128_storage","synthetic":true,"types":[]},{"text":"impl Sync for vec256_storage","synthetic":true,"types":[]},{"text":"impl Sync for vec512_storage","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !Sync for TokenStream","synthetic":true,"types":[]},{"text":"impl !Sync for LexError","synthetic":true,"types":[]},{"text":"impl !Sync for Span","synthetic":true,"types":[]},{"text":"impl !Sync for Group","synthetic":true,"types":[]},{"text":"impl !Sync for Punct","synthetic":true,"types":[]},{"text":"impl !Sync for Ident","synthetic":true,"types":[]},{"text":"impl !Sync for Literal","synthetic":true,"types":[]},{"text":"impl !Sync for TokenTree","synthetic":true,"types":[]},{"text":"impl Sync for Delimiter","synthetic":true,"types":[]},{"text":"impl Sync for Spacing","synthetic":true,"types":[]},{"text":"impl !Sync for IntoIter","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Sync for Bernoulli","synthetic":true,"types":[]},{"text":"impl Sync for Open01","synthetic":true,"types":[]},{"text":"impl Sync for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Sync for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Sync for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Sync for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Sync for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Standard","synthetic":true,"types":[]},{"text":"impl Sync for BernoulliError","synthetic":true,"types":[]},{"text":"impl Sync for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Sync for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for UniformChar","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Sync for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for StdRng","synthetic":true,"types":[]},{"text":"impl !Sync for ThreadRng","synthetic":true,"types":[]},{"text":"impl Sync for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Sync for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Sync for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Sync for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Sync for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Sync for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Sync for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Sync for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Sync for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Sync for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Sync for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_distr"] = [{"text":"impl Sync for Binomial","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Cauchy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Dirichlet&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Exp&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Exp1","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Beta&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for ChiSquared&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for FisherF&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Gamma&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for StudentT&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for InverseGaussian&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for LogNormal&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Normal&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for StandardNormal","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for NormalInverseGaussian&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Pareto&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Pert&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Poisson&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Triangular&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for UnitBall","synthetic":true,"types":[]},{"text":"impl Sync for UnitCircle","synthetic":true,"types":[]},{"text":"impl Sync for UnitDisc","synthetic":true,"types":[]},{"text":"impl Sync for UnitSphere","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Weibull&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for BetaError","synthetic":true,"types":[]},{"text":"impl Sync for ChiSquaredError","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for FisherFError","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for PertError","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for TriangularError","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for WeightedAliasIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_pcg"] = [{"text":"impl Sync for Lcg64Xsh32","synthetic":true,"types":[]},{"text":"impl Sync for Lcg128Xsl64","synthetic":true,"types":[]},{"text":"impl Sync for Mcg128Xsl64","synthetic":true,"types":[]}];
implementors["rand_xorshift"] = [{"text":"impl Sync for XorShiftRng","synthetic":true,"types":[]}];
implementors["raw_window_handle"] = [{"text":"impl !Sync for RawWindowHandle","synthetic":true,"types":[]},{"text":"impl !Sync for MacOSHandle","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Sync for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Sync for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for FlatMapIter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for FlattenIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; Sync for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Sync for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; Sync for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; Sync for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Sync for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Sync for Positions&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Sync for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; Sync for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Sync for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for Iter&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for Chunks&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for ChunksExact&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for Windows&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for IterMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for ChunksMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for ChunksExactMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Sync for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Sync for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Sync for Split&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Sync for SplitTerminator&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Sync for Matches&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Sync for MatchIndices&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Drain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for Drain&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !Sync for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ThreadPool","synthetic":true,"types":[]},{"text":"impl Sync for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !Sync for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for Configuration","synthetic":true,"types":[]},{"text":"impl !Sync for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Sync for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl Sync for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Sync for RegexSet","synthetic":true,"types":[]},{"text":"impl Sync for SetMatches","synthetic":true,"types":[]},{"text":"impl Sync for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Sync for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Sync for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Sync for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Sync for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Sync for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Sync for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Sync for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Sync for RegexSet","synthetic":true,"types":[]},{"text":"impl Sync for SetMatches","synthetic":true,"types":[]},{"text":"impl Sync for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl !Sync for Parser","synthetic":true,"types":[]},{"text":"impl Sync for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Sync for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Span","synthetic":true,"types":[]},{"text":"impl Sync for Position","synthetic":true,"types":[]},{"text":"impl Sync for WithComments","synthetic":true,"types":[]},{"text":"impl Sync for Comment","synthetic":true,"types":[]},{"text":"impl Sync for Alternation","synthetic":true,"types":[]},{"text":"impl Sync for Concat","synthetic":true,"types":[]},{"text":"impl Sync for Literal","synthetic":true,"types":[]},{"text":"impl Sync for ClassPerl","synthetic":true,"types":[]},{"text":"impl Sync for ClassAscii","synthetic":true,"types":[]},{"text":"impl Sync for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Sync for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Sync for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Sync for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Sync for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Sync for Assertion","synthetic":true,"types":[]},{"text":"impl Sync for Repetition","synthetic":true,"types":[]},{"text":"impl Sync for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Sync for Group","synthetic":true,"types":[]},{"text":"impl Sync for CaptureName","synthetic":true,"types":[]},{"text":"impl Sync for SetFlags","synthetic":true,"types":[]},{"text":"impl Sync for Flags","synthetic":true,"types":[]},{"text":"impl Sync for FlagsItem","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for Ast","synthetic":true,"types":[]},{"text":"impl Sync for LiteralKind","synthetic":true,"types":[]},{"text":"impl Sync for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Sync for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Sync for Class","synthetic":true,"types":[]},{"text":"impl Sync for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Sync for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Sync for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Sync for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Sync for ClassSet","synthetic":true,"types":[]},{"text":"impl Sync for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Sync for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Sync for AssertionKind","synthetic":true,"types":[]},{"text":"impl Sync for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Sync for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Sync for GroupKind","synthetic":true,"types":[]},{"text":"impl Sync for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Sync for Flag","synthetic":true,"types":[]},{"text":"impl Sync for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for Parser","synthetic":true,"types":[]},{"text":"impl Sync for Printer","synthetic":true,"types":[]},{"text":"impl Sync for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Hir","synthetic":true,"types":[]},{"text":"impl Sync for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Sync for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Sync for Group","synthetic":true,"types":[]},{"text":"impl Sync for Repetition","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for HirKind","synthetic":true,"types":[]},{"text":"impl Sync for Literal","synthetic":true,"types":[]},{"text":"impl Sync for Class","synthetic":true,"types":[]},{"text":"impl Sync for Anchor","synthetic":true,"types":[]},{"text":"impl Sync for WordBoundary","synthetic":true,"types":[]},{"text":"impl Sync for GroupKind","synthetic":true,"types":[]},{"text":"impl Sync for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Sync for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Sync for Literals","synthetic":true,"types":[]},{"text":"impl Sync for Literal","synthetic":true,"types":[]},{"text":"impl Sync for Printer","synthetic":true,"types":[]},{"text":"impl Sync for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for Translator","synthetic":true,"types":[]},{"text":"impl Sync for Utf8Range","synthetic":true,"types":[]},{"text":"impl Sync for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl Sync for Utf8Sequence","synthetic":true,"types":[]}];
implementors["rgb"] = [{"text":"impl&lt;ComponentType&gt; Sync for RGB&lt;ComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ComponentType, AlphaComponentType&gt; Sync for RGBA&lt;ComponentType, AlphaComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AlphaComponentType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ComponentType&gt; Sync for BGR&lt;ComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ComponentType, AlphaComponentType&gt; Sync for BGRA&lt;ComponentType, AlphaComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AlphaComponentType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ComponentType&gt; Sync for Gray&lt;ComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ComponentType, AlphaComponentType&gt; Sync for GrayAlpha&lt;ComponentType, AlphaComponentType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AlphaComponentType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ComponentType: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Sync for Buffer","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl Sync for Always","synthetic":true,"types":[]},{"text":"impl&lt;T, F, S&gt; Sync for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(T),<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Strategy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Sync for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Sync for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Sync for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Sync for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Sync for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Sync for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Sync for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Sync for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; Sync for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Sync for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Sync for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Number","synthetic":true,"types":[]},{"text":"impl Sync for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CharEscape","synthetic":true,"types":[]},{"text":"impl Sync for Serializer","synthetic":true,"types":[]}];
implementors["shred"] = [{"text":"impl&lt;'a, R&gt; !Sync for AsyncDispatcher&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Sync for Par&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, T&gt; Sync for ParSeq&lt;P, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; Sync for Seq&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BatchAccessor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BatchUncheckedWorld&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Sync for DefaultBatchControllerSystem&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Sync for Dispatcher&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Sync for DispatcherBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Sync for MetaIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Sync for MetaIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Sync for MetaTable&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for StaticAccessor&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DefaultProvider","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Entry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Fetch&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for FetchMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PanicHandler","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F&gt; Sync for Read&lt;'a, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ResourceId","synthetic":true,"types":[]},{"text":"impl Sync for World","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F&gt; Sync for Write&lt;'a, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T:&nbsp;?Sized&gt; Sync for AccessorCow&lt;'a, 'b, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as System&lt;'a&gt;&gt;::SystemData as DynamicSystemData&lt;'a&gt;&gt;::Accessor: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as System&lt;'a&gt;&gt;::SystemData: DynamicSystemData&lt;'a&gt;,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RunningTime","synthetic":true,"types":[]},{"text":"impl Sync for InvalidBorrow","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Sync for Ref&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Sync for RefMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TrustCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["shrev"] = [{"text":"impl&lt;T&gt; Sync for ReaderId&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for StorageIterator&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for EventChannel&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["simba"] = [{"text":"impl&lt;N&gt; Sync for AutoSimd&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Sync for AutoBoolSimd&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Sync for SimdOption&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as SimdValue&gt;::SimdBool: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["siphasher"] = [{"text":"impl Sync for SipHasher13","synthetic":true,"types":[]},{"text":"impl Sync for SipHasher24","synthetic":true,"types":[]},{"text":"impl Sync for SipHasher","synthetic":true,"types":[]},{"text":"impl Sync for Hash128","synthetic":true,"types":[]},{"text":"impl Sync for SipHasher13","synthetic":true,"types":[]},{"text":"impl Sync for SipHasher24","synthetic":true,"types":[]},{"text":"impl Sync for SipHasher","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, T&gt; Sync for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["specs"] = [{"text":"impl&lt;T&gt; Sync for DefaultVecStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DenseVecStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, T&gt; Sync for FlaggedStorage&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for HashMapStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for NullStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for VecStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Entity","synthetic":true,"types":[]},{"text":"impl Sync for LazyUpdate","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ChangeSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BoxedErr","synthetic":true,"types":[]},{"text":"impl Sync for WrongGeneration","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for NoError","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; Sync for JoinParIter&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; Sync for MaybeJoin&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; Sync for JoinIter&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Join&gt;::Mask: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Join&gt;::Value: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ComponentEvent","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; Sync for Entries&lt;'a, 'b, T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; Sync for OccupiedEntry&lt;'a, 'b, T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; Sync for VacantEntry&lt;'a, 'b, T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'rf, 'st, C, S, B, Restrict&gt; Sync for RestrictedStorage&lt;'rf, 'st, C, S, B, Restrict&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Restrict: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for BTreeStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for AntiStorage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for MaskedStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Component&gt;::Storage: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'e, T, D&gt; Sync for Storage&lt;'e, T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; Sync for StorageEntry&lt;'a, 'b, T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ImmutableParallelRestriction","synthetic":true,"types":[]},{"text":"impl Sync for MutableParallelRestriction","synthetic":true,"types":[]},{"text":"impl Sync for SequentialRestriction","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for CreateIterAtomic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for EntitiesRes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for EntityResBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Generation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for LazyBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for CreateIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for EntityBuilder&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl !Sync for Attribute","synthetic":true,"types":[]},{"text":"impl !Sync for MetaList","synthetic":true,"types":[]},{"text":"impl !Sync for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !Sync for Field","synthetic":true,"types":[]},{"text":"impl !Sync for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !Sync for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !Sync for Variant","synthetic":true,"types":[]},{"text":"impl !Sync for VisCrate","synthetic":true,"types":[]},{"text":"impl !Sync for VisPublic","synthetic":true,"types":[]},{"text":"impl !Sync for VisRestricted","synthetic":true,"types":[]},{"text":"impl !Sync for Arm","synthetic":true,"types":[]},{"text":"impl !Sync for FieldValue","synthetic":true,"types":[]},{"text":"impl !Sync for Label","synthetic":true,"types":[]},{"text":"impl !Sync for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl !Sync for ExprArray","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAssign","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAsync","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAwait","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBinary","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBlock","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBox","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBreak","synthetic":true,"types":[]},{"text":"impl !Sync for ExprCall","synthetic":true,"types":[]},{"text":"impl !Sync for ExprCast","synthetic":true,"types":[]},{"text":"impl !Sync for ExprClosure","synthetic":true,"types":[]},{"text":"impl !Sync for ExprContinue","synthetic":true,"types":[]},{"text":"impl !Sync for ExprField","synthetic":true,"types":[]},{"text":"impl !Sync for ExprForLoop","synthetic":true,"types":[]},{"text":"impl !Sync for ExprGroup","synthetic":true,"types":[]},{"text":"impl !Sync for ExprIf","synthetic":true,"types":[]},{"text":"impl !Sync for ExprIndex","synthetic":true,"types":[]},{"text":"impl !Sync for ExprLet","synthetic":true,"types":[]},{"text":"impl !Sync for ExprLit","synthetic":true,"types":[]},{"text":"impl !Sync for ExprLoop","synthetic":true,"types":[]},{"text":"impl !Sync for ExprMacro","synthetic":true,"types":[]},{"text":"impl !Sync for ExprMatch","synthetic":true,"types":[]},{"text":"impl !Sync for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl !Sync for ExprParen","synthetic":true,"types":[]},{"text":"impl !Sync for ExprPath","synthetic":true,"types":[]},{"text":"impl !Sync for ExprRange","synthetic":true,"types":[]},{"text":"impl !Sync for ExprReference","synthetic":true,"types":[]},{"text":"impl !Sync for ExprRepeat","synthetic":true,"types":[]},{"text":"impl !Sync for ExprReturn","synthetic":true,"types":[]},{"text":"impl !Sync for ExprStruct","synthetic":true,"types":[]},{"text":"impl !Sync for ExprTry","synthetic":true,"types":[]},{"text":"impl !Sync for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl !Sync for ExprTuple","synthetic":true,"types":[]},{"text":"impl !Sync for ExprType","synthetic":true,"types":[]},{"text":"impl !Sync for ExprUnary","synthetic":true,"types":[]},{"text":"impl !Sync for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl !Sync for ExprWhile","synthetic":true,"types":[]},{"text":"impl !Sync for ExprYield","synthetic":true,"types":[]},{"text":"impl !Sync for Index","synthetic":true,"types":[]},{"text":"impl !Sync for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !Sync for ConstParam","synthetic":true,"types":[]},{"text":"impl !Sync for Generics","synthetic":true,"types":[]},{"text":"impl !Sync for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateEq","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateType","synthetic":true,"types":[]},{"text":"impl !Sync for TraitBound","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParam","synthetic":true,"types":[]},{"text":"impl !Sync for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItemType","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItemConst","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItemType","synthetic":true,"types":[]},{"text":"impl !Sync for ItemConst","synthetic":true,"types":[]},{"text":"impl !Sync for ItemEnum","synthetic":true,"types":[]},{"text":"impl !Sync for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl !Sync for ItemFn","synthetic":true,"types":[]},{"text":"impl !Sync for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl !Sync for ItemImpl","synthetic":true,"types":[]},{"text":"impl !Sync for ItemMacro","synthetic":true,"types":[]},{"text":"impl !Sync for ItemMacro2","synthetic":true,"types":[]},{"text":"impl !Sync for ItemMod","synthetic":true,"types":[]},{"text":"impl !Sync for ItemStatic","synthetic":true,"types":[]},{"text":"impl !Sync for ItemStruct","synthetic":true,"types":[]},{"text":"impl !Sync for ItemTrait","synthetic":true,"types":[]},{"text":"impl !Sync for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl !Sync for ItemType","synthetic":true,"types":[]},{"text":"impl !Sync for ItemUnion","synthetic":true,"types":[]},{"text":"impl !Sync for ItemUse","synthetic":true,"types":[]},{"text":"impl !Sync for Receiver","synthetic":true,"types":[]},{"text":"impl !Sync for Signature","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItemConst","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItemType","synthetic":true,"types":[]},{"text":"impl !Sync for UseGlob","synthetic":true,"types":[]},{"text":"impl !Sync for UseGroup","synthetic":true,"types":[]},{"text":"impl !Sync for UseName","synthetic":true,"types":[]},{"text":"impl !Sync for UsePath","synthetic":true,"types":[]},{"text":"impl !Sync for UseRename","synthetic":true,"types":[]},{"text":"impl !Sync for File","synthetic":true,"types":[]},{"text":"impl !Sync for Lifetime","synthetic":true,"types":[]},{"text":"impl !Sync for LitBool","synthetic":true,"types":[]},{"text":"impl !Sync for LitByte","synthetic":true,"types":[]},{"text":"impl !Sync for LitByteStr","synthetic":true,"types":[]},{"text":"impl !Sync for LitChar","synthetic":true,"types":[]},{"text":"impl !Sync for LitFloat","synthetic":true,"types":[]},{"text":"impl !Sync for LitInt","synthetic":true,"types":[]},{"text":"impl !Sync for LitStr","synthetic":true,"types":[]},{"text":"impl !Sync for Macro","synthetic":true,"types":[]},{"text":"impl !Sync for DataEnum","synthetic":true,"types":[]},{"text":"impl !Sync for DataStruct","synthetic":true,"types":[]},{"text":"impl !Sync for DataUnion","synthetic":true,"types":[]},{"text":"impl !Sync for DeriveInput","synthetic":true,"types":[]},{"text":"impl !Sync for Block","synthetic":true,"types":[]},{"text":"impl !Sync for Local","synthetic":true,"types":[]},{"text":"impl !Sync for Abi","synthetic":true,"types":[]},{"text":"impl !Sync for BareFnArg","synthetic":true,"types":[]},{"text":"impl !Sync for TypeArray","synthetic":true,"types":[]},{"text":"impl !Sync for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !Sync for TypeGroup","synthetic":true,"types":[]},{"text":"impl !Sync for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !Sync for TypeInfer","synthetic":true,"types":[]},{"text":"impl !Sync for TypeMacro","synthetic":true,"types":[]},{"text":"impl !Sync for TypeNever","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParen","synthetic":true,"types":[]},{"text":"impl !Sync for TypePath","synthetic":true,"types":[]},{"text":"impl !Sync for TypePtr","synthetic":true,"types":[]},{"text":"impl !Sync for TypeReference","synthetic":true,"types":[]},{"text":"impl !Sync for TypeSlice","synthetic":true,"types":[]},{"text":"impl !Sync for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !Sync for TypeTuple","synthetic":true,"types":[]},{"text":"impl !Sync for Variadic","synthetic":true,"types":[]},{"text":"impl !Sync for FieldPat","synthetic":true,"types":[]},{"text":"impl !Sync for PatBox","synthetic":true,"types":[]},{"text":"impl !Sync for PatIdent","synthetic":true,"types":[]},{"text":"impl !Sync for PatLit","synthetic":true,"types":[]},{"text":"impl !Sync for PatMacro","synthetic":true,"types":[]},{"text":"impl !Sync for PatOr","synthetic":true,"types":[]},{"text":"impl !Sync for PatPath","synthetic":true,"types":[]},{"text":"impl !Sync for PatRange","synthetic":true,"types":[]},{"text":"impl !Sync for PatReference","synthetic":true,"types":[]},{"text":"impl !Sync for PatRest","synthetic":true,"types":[]},{"text":"impl !Sync for PatSlice","synthetic":true,"types":[]},{"text":"impl !Sync for PatStruct","synthetic":true,"types":[]},{"text":"impl !Sync for PatTuple","synthetic":true,"types":[]},{"text":"impl !Sync for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl !Sync for PatType","synthetic":true,"types":[]},{"text":"impl !Sync for PatWild","synthetic":true,"types":[]},{"text":"impl !Sync for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Sync for Binding","synthetic":true,"types":[]},{"text":"impl !Sync for Constraint","synthetic":true,"types":[]},{"text":"impl !Sync for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Sync for Path","synthetic":true,"types":[]},{"text":"impl !Sync for PathSegment","synthetic":true,"types":[]},{"text":"impl !Sync for QSelf","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl !Sync for AttrStyle","synthetic":true,"types":[]},{"text":"impl !Sync for Meta","synthetic":true,"types":[]},{"text":"impl !Sync for NestedMeta","synthetic":true,"types":[]},{"text":"impl !Sync for Fields","synthetic":true,"types":[]},{"text":"impl !Sync for Visibility","synthetic":true,"types":[]},{"text":"impl !Sync for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl !Sync for RangeLimits","synthetic":true,"types":[]},{"text":"impl !Sync for Expr","synthetic":true,"types":[]},{"text":"impl !Sync for Member","synthetic":true,"types":[]},{"text":"impl !Sync for GenericParam","synthetic":true,"types":[]},{"text":"impl !Sync for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !Sync for WherePredicate","synthetic":true,"types":[]},{"text":"impl !Sync for FnArg","synthetic":true,"types":[]},{"text":"impl !Sync for ForeignItem","synthetic":true,"types":[]},{"text":"impl !Sync for ImplItem","synthetic":true,"types":[]},{"text":"impl !Sync for Item","synthetic":true,"types":[]},{"text":"impl !Sync for TraitItem","synthetic":true,"types":[]},{"text":"impl !Sync for UseTree","synthetic":true,"types":[]},{"text":"impl !Sync for Lit","synthetic":true,"types":[]},{"text":"impl Sync for StrStyle","synthetic":true,"types":[]},{"text":"impl !Sync for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !Sync for Data","synthetic":true,"types":[]},{"text":"impl !Sync for BinOp","synthetic":true,"types":[]},{"text":"impl !Sync for UnOp","synthetic":true,"types":[]},{"text":"impl !Sync for Stmt","synthetic":true,"types":[]},{"text":"impl !Sync for ReturnType","synthetic":true,"types":[]},{"text":"impl !Sync for Type","synthetic":true,"types":[]},{"text":"impl !Sync for Pat","synthetic":true,"types":[]},{"text":"impl !Sync for GenericArgument","synthetic":true,"types":[]},{"text":"impl !Sync for PathArguments","synthetic":true,"types":[]},{"text":"impl !Sync for Underscore","synthetic":true,"types":[]},{"text":"impl !Sync for Abstract","synthetic":true,"types":[]},{"text":"impl !Sync for As","synthetic":true,"types":[]},{"text":"impl !Sync for Async","synthetic":true,"types":[]},{"text":"impl !Sync for Auto","synthetic":true,"types":[]},{"text":"impl !Sync for Await","synthetic":true,"types":[]},{"text":"impl !Sync for Become","synthetic":true,"types":[]},{"text":"impl !Sync for Box","synthetic":true,"types":[]},{"text":"impl !Sync for Break","synthetic":true,"types":[]},{"text":"impl !Sync for Const","synthetic":true,"types":[]},{"text":"impl !Sync for Continue","synthetic":true,"types":[]},{"text":"impl !Sync for Crate","synthetic":true,"types":[]},{"text":"impl !Sync for Default","synthetic":true,"types":[]},{"text":"impl !Sync for Do","synthetic":true,"types":[]},{"text":"impl !Sync for Dyn","synthetic":true,"types":[]},{"text":"impl !Sync for Else","synthetic":true,"types":[]},{"text":"impl !Sync for Enum","synthetic":true,"types":[]},{"text":"impl !Sync for Extern","synthetic":true,"types":[]},{"text":"impl !Sync for Final","synthetic":true,"types":[]},{"text":"impl !Sync for Fn","synthetic":true,"types":[]},{"text":"impl !Sync for For","synthetic":true,"types":[]},{"text":"impl !Sync for If","synthetic":true,"types":[]},{"text":"impl !Sync for Impl","synthetic":true,"types":[]},{"text":"impl !Sync for In","synthetic":true,"types":[]},{"text":"impl !Sync for Let","synthetic":true,"types":[]},{"text":"impl !Sync for Loop","synthetic":true,"types":[]},{"text":"impl !Sync for Macro","synthetic":true,"types":[]},{"text":"impl !Sync for Match","synthetic":true,"types":[]},{"text":"impl !Sync for Mod","synthetic":true,"types":[]},{"text":"impl !Sync for Move","synthetic":true,"types":[]},{"text":"impl !Sync for Mut","synthetic":true,"types":[]},{"text":"impl !Sync for Override","synthetic":true,"types":[]},{"text":"impl !Sync for Priv","synthetic":true,"types":[]},{"text":"impl !Sync for Pub","synthetic":true,"types":[]},{"text":"impl !Sync for Ref","synthetic":true,"types":[]},{"text":"impl !Sync for Return","synthetic":true,"types":[]},{"text":"impl !Sync for SelfType","synthetic":true,"types":[]},{"text":"impl !Sync for SelfValue","synthetic":true,"types":[]},{"text":"impl !Sync for Static","synthetic":true,"types":[]},{"text":"impl !Sync for Struct","synthetic":true,"types":[]},{"text":"impl !Sync for Super","synthetic":true,"types":[]},{"text":"impl !Sync for Trait","synthetic":true,"types":[]},{"text":"impl !Sync for Try","synthetic":true,"types":[]},{"text":"impl !Sync for Type","synthetic":true,"types":[]},{"text":"impl !Sync for Typeof","synthetic":true,"types":[]},{"text":"impl !Sync for Union","synthetic":true,"types":[]},{"text":"impl !Sync for Unsafe","synthetic":true,"types":[]},{"text":"impl !Sync for Unsized","synthetic":true,"types":[]},{"text":"impl !Sync for Use","synthetic":true,"types":[]},{"text":"impl !Sync for Virtual","synthetic":true,"types":[]},{"text":"impl !Sync for Where","synthetic":true,"types":[]},{"text":"impl !Sync for While","synthetic":true,"types":[]},{"text":"impl !Sync for Yield","synthetic":true,"types":[]},{"text":"impl !Sync for Add","synthetic":true,"types":[]},{"text":"impl !Sync for AddEq","synthetic":true,"types":[]},{"text":"impl !Sync for And","synthetic":true,"types":[]},{"text":"impl !Sync for AndAnd","synthetic":true,"types":[]},{"text":"impl !Sync for AndEq","synthetic":true,"types":[]},{"text":"impl !Sync for At","synthetic":true,"types":[]},{"text":"impl !Sync for Bang","synthetic":true,"types":[]},{"text":"impl !Sync for Caret","synthetic":true,"types":[]},{"text":"impl !Sync for CaretEq","synthetic":true,"types":[]},{"text":"impl !Sync for Colon","synthetic":true,"types":[]},{"text":"impl !Sync for Colon2","synthetic":true,"types":[]},{"text":"impl !Sync for Comma","synthetic":true,"types":[]},{"text":"impl !Sync for Div","synthetic":true,"types":[]},{"text":"impl !Sync for DivEq","synthetic":true,"types":[]},{"text":"impl !Sync for Dollar","synthetic":true,"types":[]},{"text":"impl !Sync for Dot","synthetic":true,"types":[]},{"text":"impl !Sync for Dot2","synthetic":true,"types":[]},{"text":"impl !Sync for Dot3","synthetic":true,"types":[]},{"text":"impl !Sync for DotDotEq","synthetic":true,"types":[]},{"text":"impl !Sync for Eq","synthetic":true,"types":[]},{"text":"impl !Sync for EqEq","synthetic":true,"types":[]},{"text":"impl !Sync for Ge","synthetic":true,"types":[]},{"text":"impl !Sync for Gt","synthetic":true,"types":[]},{"text":"impl !Sync for Le","synthetic":true,"types":[]},{"text":"impl !Sync for Lt","synthetic":true,"types":[]},{"text":"impl !Sync for MulEq","synthetic":true,"types":[]},{"text":"impl !Sync for Ne","synthetic":true,"types":[]},{"text":"impl !Sync for Or","synthetic":true,"types":[]},{"text":"impl !Sync for OrEq","synthetic":true,"types":[]},{"text":"impl !Sync for OrOr","synthetic":true,"types":[]},{"text":"impl !Sync for Pound","synthetic":true,"types":[]},{"text":"impl !Sync for Question","synthetic":true,"types":[]},{"text":"impl !Sync for RArrow","synthetic":true,"types":[]},{"text":"impl !Sync for LArrow","synthetic":true,"types":[]},{"text":"impl !Sync for Rem","synthetic":true,"types":[]},{"text":"impl !Sync for RemEq","synthetic":true,"types":[]},{"text":"impl !Sync for FatArrow","synthetic":true,"types":[]},{"text":"impl !Sync for Semi","synthetic":true,"types":[]},{"text":"impl !Sync for Shl","synthetic":true,"types":[]},{"text":"impl !Sync for ShlEq","synthetic":true,"types":[]},{"text":"impl !Sync for Shr","synthetic":true,"types":[]},{"text":"impl !Sync for ShrEq","synthetic":true,"types":[]},{"text":"impl !Sync for Star","synthetic":true,"types":[]},{"text":"impl !Sync for Sub","synthetic":true,"types":[]},{"text":"impl !Sync for SubEq","synthetic":true,"types":[]},{"text":"impl !Sync for Tilde","synthetic":true,"types":[]},{"text":"impl !Sync for Brace","synthetic":true,"types":[]},{"text":"impl !Sync for Bracket","synthetic":true,"types":[]},{"text":"impl !Sync for Paren","synthetic":true,"types":[]},{"text":"impl !Sync for Group","synthetic":true,"types":[]},{"text":"impl !Sync for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Sync for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Sync for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !Sync for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Nothing","synthetic":true,"types":[]}];
implementors["terminal_size"] = [{"text":"impl Sync for Width","synthetic":true,"types":[]},{"text":"impl Sync for Height","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !Sync for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for CachedThreadLocal&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for ThreadLocal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tynm"] = [{"text":"impl&lt;'s&gt; Sync for TypeNameDisplay&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; Sync for TypeName&lt;'s&gt;","synthetic":true,"types":[]}];
implementors["typenum"] = [{"text":"impl Sync for Greater","synthetic":true,"types":[]},{"text":"impl Sync for Less","synthetic":true,"types":[]},{"text":"impl Sync for Equal","synthetic":true,"types":[]},{"text":"impl Sync for B0","synthetic":true,"types":[]},{"text":"impl Sync for B1","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Sync for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Sync for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Z0","synthetic":true,"types":[]},{"text":"impl Sync for UTerm","synthetic":true,"types":[]},{"text":"impl&lt;U, B&gt; Sync for UInt&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ATerm","synthetic":true,"types":[]},{"text":"impl&lt;V, A&gt; Sync for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ucd_trie"] = [{"text":"impl Sync for TrieSetOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for TrieSetSlice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["ultraviolet"] = [{"text":"impl Sync for Bivec2","synthetic":true,"types":[]},{"text":"impl Sync for WBivec2","synthetic":true,"types":[]},{"text":"impl Sync for Bivec3","synthetic":true,"types":[]},{"text":"impl Sync for WBivec3","synthetic":true,"types":[]},{"text":"impl Sync for Mat2","synthetic":true,"types":[]},{"text":"impl Sync for Wat2","synthetic":true,"types":[]},{"text":"impl Sync for Mat3","synthetic":true,"types":[]},{"text":"impl Sync for Wat3","synthetic":true,"types":[]},{"text":"impl Sync for Mat4","synthetic":true,"types":[]},{"text":"impl Sync for Wat4","synthetic":true,"types":[]},{"text":"impl Sync for Rotor2","synthetic":true,"types":[]},{"text":"impl Sync for WRotor2","synthetic":true,"types":[]},{"text":"impl Sync for Rotor3","synthetic":true,"types":[]},{"text":"impl Sync for WRotor3","synthetic":true,"types":[]},{"text":"impl Sync for Isometry2","synthetic":true,"types":[]},{"text":"impl Sync for WIsometry2","synthetic":true,"types":[]},{"text":"impl Sync for Isometry3","synthetic":true,"types":[]},{"text":"impl Sync for WIsometry3","synthetic":true,"types":[]},{"text":"impl Sync for Similarity2","synthetic":true,"types":[]},{"text":"impl Sync for WSimilarity2","synthetic":true,"types":[]},{"text":"impl Sync for Similarity3","synthetic":true,"types":[]},{"text":"impl Sync for WSimilarity3","synthetic":true,"types":[]},{"text":"impl Sync for Vec2","synthetic":true,"types":[]},{"text":"impl Sync for Wec2","synthetic":true,"types":[]},{"text":"impl Sync for Vec3","synthetic":true,"types":[]},{"text":"impl Sync for Wec3","synthetic":true,"types":[]},{"text":"impl Sync for Vec4","synthetic":true,"types":[]},{"text":"impl Sync for Wec4","synthetic":true,"types":[]},{"text":"impl Sync for Vec2u","synthetic":true,"types":[]},{"text":"impl Sync for Vec2i","synthetic":true,"types":[]},{"text":"impl Sync for Vec3u","synthetic":true,"types":[]},{"text":"impl Sync for Vec3i","synthetic":true,"types":[]},{"text":"impl Sync for Vec4u","synthetic":true,"types":[]},{"text":"impl Sync for Vec4i","synthetic":true,"types":[]},{"text":"impl Sync for Plane","synthetic":true,"types":[]},{"text":"impl Sync for Ray","synthetic":true,"types":[]},{"text":"impl Sync for Planeu","synthetic":true,"types":[]},{"text":"impl Sync for Rayu","synthetic":true,"types":[]},{"text":"impl Sync for Planei","synthetic":true,"types":[]},{"text":"impl Sync for Rayi","synthetic":true,"types":[]},{"text":"impl Sync for Aabb","synthetic":true,"types":[]},{"text":"impl Sync for Aabbu","synthetic":true,"types":[]},{"text":"impl Sync for Aabbi","synthetic":true,"types":[]},{"text":"impl Sync for AabbLinearIterator","synthetic":true,"types":[]},{"text":"impl Sync for AabbuLinearIterator","synthetic":true,"types":[]},{"text":"impl Sync for AabbiLinearIterator","synthetic":true,"types":[]}];
implementors["wide"] = [{"text":"impl Sync for f32x4","synthetic":true,"types":[]},{"text":"impl Sync for i32x4","synthetic":true,"types":[]},{"text":"impl Sync for ConstUnionHack_f32x4","synthetic":true,"types":[]},{"text":"impl Sync for ConstUnionHack_i32x4","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Align2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Align4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Align8&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Align16&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Align32&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for m128","synthetic":true,"types":[]},{"text":"impl Sync for m128i","synthetic":true,"types":[]},{"text":"impl Sync for m128d","synthetic":true,"types":[]}];
implementors["winit"] = [{"text":"impl&lt;P&gt; Sync for LogicalPosition&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Sync for PhysicalPosition&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Sync for LogicalSize&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Sync for PhysicalSize&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Size","synthetic":true,"types":[]},{"text":"impl Sync for Position","synthetic":true,"types":[]},{"text":"impl Sync for NotSupportedError","synthetic":true,"types":[]},{"text":"impl Sync for OsError","synthetic":true,"types":[]},{"text":"impl Sync for ExternalError","synthetic":true,"types":[]},{"text":"impl Sync for DeviceId","synthetic":true,"types":[]},{"text":"impl Sync for KeyboardInput","synthetic":true,"types":[]},{"text":"impl Sync for Touch","synthetic":true,"types":[]},{"text":"impl Sync for ModifiersState","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Event&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for StartCause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for WindowEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DeviceEvent","synthetic":true,"types":[]},{"text":"impl Sync for TouchPhase","synthetic":true,"types":[]},{"text":"impl Sync for Force","synthetic":true,"types":[]},{"text":"impl Sync for ElementState","synthetic":true,"types":[]},{"text":"impl Sync for MouseButton","synthetic":true,"types":[]},{"text":"impl Sync for MouseScrollDelta","synthetic":true,"types":[]},{"text":"impl Sync for VirtualKeyCode","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for EventLoop&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for EventLoopWindowTarget&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for EventLoopProxy&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for EventLoopClosed&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ControlFlow","synthetic":true,"types":[]},{"text":"impl Sync for Icon","synthetic":true,"types":[]},{"text":"impl Sync for BadIcon","synthetic":true,"types":[]},{"text":"impl !Sync for VideoMode","synthetic":true,"types":[]},{"text":"impl Sync for MonitorHandle","synthetic":true,"types":[]},{"text":"impl Sync for Window","synthetic":true,"types":[]},{"text":"impl Sync for WindowId","synthetic":true,"types":[]},{"text":"impl !Sync for WindowBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for WindowAttributes","synthetic":true,"types":[]},{"text":"impl Sync for CursorIcon","synthetic":true,"types":[]},{"text":"impl !Sync for Fullscreen","synthetic":true,"types":[]},{"text":"impl Sync for Theme","synthetic":true,"types":[]},{"text":"impl Sync for RequestUserAttentionType","synthetic":true,"types":[]},{"text":"impl Sync for ActivationPolicy","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()