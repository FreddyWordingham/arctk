(function() {var implementors = {};
implementors["cocoa"] = [{"text":"impl Not for NSApplicationPresentationOptions","synthetic":false,"types":[]},{"text":"impl Not for NSWindowStyleMask","synthetic":false,"types":[]},{"text":"impl Not for NSWindowOrderingMode","synthetic":false,"types":[]},{"text":"impl Not for NSAlignmentOptions","synthetic":false,"types":[]},{"text":"impl Not for NSWindowCollectionBehavior","synthetic":false,"types":[]},{"text":"impl Not for NSWindowOcclusionState","synthetic":false,"types":[]},{"text":"impl Not for NSEventSwipeTrackingOptions","synthetic":false,"types":[]},{"text":"impl Not for NSEventPhase","synthetic":false,"types":[]},{"text":"impl Not for NSTouchPhase","synthetic":false,"types":[]},{"text":"impl Not for NSEventMask","synthetic":false,"types":[]},{"text":"impl Not for NSEventModifierFlags","synthetic":false,"types":[]},{"text":"impl Not for NSEnumerationOptions","synthetic":false,"types":[]},{"text":"impl Not for NSURLBookmarkCreationOptions","synthetic":false,"types":[]},{"text":"impl Not for NSURLBookmarkResolutionOptions","synthetic":false,"types":[]},{"text":"impl Not for NSDataReadingOptions","synthetic":false,"types":[]},{"text":"impl Not for NSDataBase64EncodingOptions","synthetic":false,"types":[]},{"text":"impl Not for NSDataBase64DecodingOptions","synthetic":false,"types":[]},{"text":"impl Not for NSDataWritingOptions","synthetic":false,"types":[]},{"text":"impl Not for NSDataSearchOptions","synthetic":false,"types":[]},{"text":"impl Not for EdgeAntialiasingMask","synthetic":false,"types":[]},{"text":"impl Not for CornerMask","synthetic":false,"types":[]},{"text":"impl Not for AutoresizingMask","synthetic":false,"types":[]}];
implementors["core_graphics"] = [{"text":"impl Not for CGEventFlags","synthetic":false,"types":[]},{"text":"impl Not for CGGradientDrawingOptions","synthetic":false,"types":[]}];
implementors["hibitset"] = [{"text":"impl Not for BitSet","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Not for &amp;'a BitSet","synthetic":false,"types":[]},{"text":"impl Not for AtomicBitSet","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Not for &amp;'a AtomicBitSet","synthetic":false,"types":[]},{"text":"impl&lt;A&gt; Not for BitSetNot&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: BitSetLike,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A&gt; Not for &amp;'a BitSetNot&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: BitSetLike,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, B&gt; Not for BitSetAnd&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: BitSetLike,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: BitSetLike,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, B&gt; Not for &amp;'a BitSetAnd&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: BitSetLike,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: BitSetLike,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, B&gt; Not for BitSetOr&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: BitSetLike,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: BitSetLike,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, B&gt; Not for &amp;'a BitSetOr&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: BitSetLike,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: BitSetLike,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, B&gt; Not for BitSetXor&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: BitSetLike,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: BitSetLike,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, B&gt; Not for &amp;'a BitSetXor&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: BitSetLike,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: BitSetLike,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Not for BitSetAll","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Not for &amp;'a BitSetAll","synthetic":false,"types":[]}];
implementors["ndarray"] = [{"text":"impl&lt;A, S, D&gt; Not for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Clone + Not&lt;Output = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = A&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, S, D&gt; Not for &amp;'a ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;'a A: 'a + Not&lt;Output = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["netcdf"] = [{"text":"impl Not for Options","synthetic":false,"types":[]}];
implementors["png"] = [{"text":"impl Not for Transformations","synthetic":false,"types":[]}];
implementors["simba"] = [{"text":"impl Not for AutoSimd&lt;[bool; 1]&gt;","synthetic":false,"types":[]},{"text":"impl Not for AutoSimd&lt;[bool; 2]&gt;","synthetic":false,"types":[]},{"text":"impl Not for AutoSimd&lt;[bool; 4]&gt;","synthetic":false,"types":[]},{"text":"impl Not for AutoSimd&lt;[bool; 8]&gt;","synthetic":false,"types":[]},{"text":"impl Not for AutoSimd&lt;[bool; 16]&gt;","synthetic":false,"types":[]},{"text":"impl Not for AutoSimd&lt;[bool; 32]&gt;","synthetic":false,"types":[]}];
implementors["specs"] = [{"text":"impl&lt;'a, 'e, T, D&gt; Not for &amp;'a Storage&lt;'e, T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Deref&lt;Target = MaskedStorage&lt;T&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl Not for B0","synthetic":false,"types":[]},{"text":"impl Not for B1","synthetic":false,"types":[]}];
implementors["wide"] = [{"text":"impl Not for m128","synthetic":false,"types":[]},{"text":"impl Not for m128i","synthetic":false,"types":[]},{"text":"impl Not for m128d","synthetic":false,"types":[]},{"text":"impl Not for f32x4","synthetic":false,"types":[]},{"text":"impl Not for i32x4","synthetic":false,"types":[]}];
implementors["winit"] = [{"text":"impl Not for ModifiersState","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()