(function() {var implementors = {};
implementors["cocoa"] = [{"text":"impl SubAssign&lt;NSApplicationPresentationOptions&gt; for NSApplicationPresentationOptions","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;NSWindowStyleMask&gt; for NSWindowStyleMask","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;NSWindowOrderingMode&gt; for NSWindowOrderingMode","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;NSAlignmentOptions&gt; for NSAlignmentOptions","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;NSWindowCollectionBehavior&gt; for NSWindowCollectionBehavior","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;NSWindowOcclusionState&gt; for NSWindowOcclusionState","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;NSEventSwipeTrackingOptions&gt; for NSEventSwipeTrackingOptions","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;NSEventPhase&gt; for NSEventPhase","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;NSTouchPhase&gt; for NSTouchPhase","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;NSEventMask&gt; for NSEventMask","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;NSEventModifierFlags&gt; for NSEventModifierFlags","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;NSEnumerationOptions&gt; for NSEnumerationOptions","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;NSURLBookmarkCreationOptions&gt; for NSURLBookmarkCreationOptions","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;NSURLBookmarkResolutionOptions&gt; for NSURLBookmarkResolutionOptions","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;NSDataReadingOptions&gt; for NSDataReadingOptions","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;NSDataBase64EncodingOptions&gt; for NSDataBase64EncodingOptions","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;NSDataBase64DecodingOptions&gt; for NSDataBase64DecodingOptions","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;NSDataWritingOptions&gt; for NSDataWritingOptions","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;NSDataSearchOptions&gt; for NSDataSearchOptions","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;EdgeAntialiasingMask&gt; for EdgeAntialiasingMask","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;CornerMask&gt; for CornerMask","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoresizingMask&gt; for AutoresizingMask","synthetic":false,"types":[]}];
implementors["core_graphics"] = [{"text":"impl SubAssign&lt;CGEventFlags&gt; for CGEventFlags","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;CGGradientDrawingOptions&gt; for CGGradientDrawingOptions","synthetic":false,"types":[]}];
implementors["nalgebra"] = [{"text":"impl&lt;'b, N, R1, C1, R2, C2, SA, SB&gt; SubAssign&lt;&amp;'b Matrix&lt;N, R2, C2, SB&gt;&gt; for Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R1: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;C1: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;R2: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;C2: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedSub,<br>&nbsp;&nbsp;&nbsp;&nbsp;SA: StorageMut&lt;N, R1, C1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;SB: Storage&lt;N, R2, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;R1, R2&gt; + SameNumberOfColumns&lt;C1, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, R1, C1, R2, C2, SA, SB&gt; SubAssign&lt;Matrix&lt;N, R2, C2, SB&gt;&gt; for Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R1: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;C1: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;R2: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;C2: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedSub,<br>&nbsp;&nbsp;&nbsp;&nbsp;SA: StorageMut&lt;N, R1, C1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;SB: Storage&lt;N, R2, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;R1, R2&gt; + SameNumberOfColumns&lt;C1, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D1:&nbsp;DimName, D2:&nbsp;Dim, SB&gt; SubAssign&lt;&amp;'b Matrix&lt;N, D2, U1, SB&gt;&gt; for Point&lt;N, D1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedSub,<br>&nbsp;&nbsp;&nbsp;&nbsp;SB: Storage&lt;N, D2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D1, D2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D1:&nbsp;DimName, D2:&nbsp;Dim, SB&gt; SubAssign&lt;Matrix&lt;N, D2, U1, SB&gt;&gt; for Point&lt;N, D1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedSub,<br>&nbsp;&nbsp;&nbsp;&nbsp;SB: Storage&lt;N, D2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D1, D2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; SubAssign&lt;&amp;'b Quaternion&lt;N&gt;&gt; for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; SubAssign&lt;Quaternion&lt;N&gt;&gt; for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["ndarray"] = [{"text":"impl&lt;I&gt; SubAssign&lt;Dim&lt;I&gt;&gt; for Dim&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dim&lt;I&gt;: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, I&gt; SubAssign&lt;&amp;'a Dim&lt;I&gt;&gt; for Dim&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dim&lt;I&gt;: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;usize&gt; for Dim&lt;[Ix; 1]&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, S, S2, D, E&gt; SubAssign&lt;&amp;'a ArrayBase&lt;S2, E&gt;&gt; for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Clone + SubAssign&lt;A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataMut&lt;Elem = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Data&lt;Elem = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, S, D&gt; SubAssign&lt;A&gt; for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: ScalarOperand + SubAssign&lt;A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataMut&lt;Elem = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["netcdf"] = [{"text":"impl SubAssign&lt;Options&gt; for Options","synthetic":false,"types":[]}];
implementors["noisy_float"] = [{"text":"impl&lt;F:&nbsp;Float + SubAssign, C:&nbsp;FloatChecker&lt;F&gt;&gt; SubAssign&lt;F&gt; for NoisyFloat&lt;F, C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Float + SubAssign, C:&nbsp;FloatChecker&lt;F&gt;&gt; SubAssign&lt;&amp;'a F&gt; for NoisyFloat&lt;F, C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Float + SubAssign, C:&nbsp;FloatChecker&lt;F&gt;&gt; SubAssign&lt;NoisyFloat&lt;F, C&gt;&gt; for NoisyFloat&lt;F, C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Float + SubAssign, C:&nbsp;FloatChecker&lt;F&gt;&gt; SubAssign&lt;&amp;'a NoisyFloat&lt;F, C&gt;&gt; for NoisyFloat&lt;F, C&gt;","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T:&nbsp;Clone + NumAssign&gt; SubAssign&lt;Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + NumAssign&gt; SubAssign&lt;T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + NumAssign&gt; SubAssign&lt;&amp;'a Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + NumAssign&gt; SubAssign&lt;&amp;'a T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Clone + Integer + NumAssign&gt; SubAssign&lt;Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Integer + NumAssign&gt; SubAssign&lt;T&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Integer + NumAssign&gt; SubAssign&lt;&amp;'a Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Integer + NumAssign&gt; SubAssign&lt;&amp;'a T&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]}];
implementors["palette"] = [{"text":"impl&lt;C:&nbsp;SubAssign, T:&nbsp;Float + SubAssign&gt; SubAssign&lt;PreAlpha&lt;C, T&gt;&gt; for PreAlpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float + SubAssign, C:&nbsp;SubAssign&lt;T&gt;&gt; SubAssign&lt;T&gt; for PreAlpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;SubAssign, T:&nbsp;Float + SubAssign&gt; SubAssign&lt;Alpha&lt;C, T&gt;&gt; for Alpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;SubAssign + Copy, C:&nbsp;SubAssign&lt;T&gt;&gt; SubAssign&lt;T&gt; for Alpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; SubAssign&lt;Hsl&lt;S, T&gt;&gt; for Hsl&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + SubAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbSpace,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; SubAssign&lt;T&gt; for Hsl&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + SubAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbSpace,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; SubAssign&lt;Hsv&lt;S, T&gt;&gt; for Hsv&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + SubAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbSpace,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; SubAssign&lt;T&gt; for Hsv&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + SubAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbSpace,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; SubAssign&lt;Hwb&lt;S, T&gt;&gt; for Hwb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + SubAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbSpace,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; SubAssign&lt;T&gt; for Hwb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + SubAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbSpace,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; SubAssign&lt;Lab&lt;Wp, T&gt;&gt; for Lab&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + SubAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; SubAssign&lt;T&gt; for Lab&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + SubAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; SubAssign&lt;Lch&lt;Wp, T&gt;&gt; for Lch&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + SubAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; SubAssign&lt;T&gt; for Lch&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + SubAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; SubAssign&lt;Luma&lt;S, T&gt;&gt; for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + SubAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: LumaStandard&lt;TransferFn = LinearFn&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; SubAssign&lt;T&gt; for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + SubAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: LumaStandard&lt;TransferFn = LinearFn&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; SubAssign&lt;Rgb&lt;S, T&gt;&gt; for Rgb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard&lt;TransferFn = LinearFn&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + SubAssign,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; SubAssign&lt;T&gt; for Rgb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard&lt;TransferFn = LinearFn&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + SubAssign,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; SubAssign&lt;Xyz&lt;Wp, T&gt;&gt; for Xyz&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + SubAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; SubAssign&lt;T&gt; for Xyz&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + SubAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; SubAssign&lt;Yxy&lt;Wp, T&gt;&gt; for Yxy&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + SubAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; SubAssign&lt;T&gt; for Yxy&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + SubAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float + SubAssign&gt; SubAssign&lt;LabHue&lt;T&gt;&gt; for LabHue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float + SubAssign&gt; SubAssign&lt;T&gt; for LabHue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;LabHue&lt;f32&gt;&gt; for f32","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;LabHue&lt;f64&gt;&gt; for f64","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float + SubAssign&gt; SubAssign&lt;RgbHue&lt;T&gt;&gt; for RgbHue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float + SubAssign&gt; SubAssign&lt;T&gt; for RgbHue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;RgbHue&lt;f32&gt;&gt; for f32","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;RgbHue&lt;f64&gt;&gt; for f64","synthetic":false,"types":[]}];
implementors["png"] = [{"text":"impl SubAssign&lt;Transformations&gt; for Transformations","synthetic":false,"types":[]}];
implementors["rgb"] = [{"text":"impl&lt;T&gt; SubAssign&lt;T&gt; for RGB&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Sub&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; SubAssign&lt;T&gt; for RGBA&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Sub&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; SubAssign&lt;T&gt; for Gray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Sub&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; SubAssign&lt;T&gt; for GrayAlpha&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Sub&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; SubAssign&lt;RGB&lt;T&gt;&gt; for RGB&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sub&lt;Output = T&gt; + Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; SubAssign&lt;Gray&lt;T&gt;&gt; for Gray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sub&lt;Output = T&gt; + Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, A&gt; SubAssign&lt;RGBA&lt;T, A&gt;&gt; for RGBA&lt;T, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sub&lt;Output = T&gt; + Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sub&lt;Output = A&gt; + Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, A&gt; SubAssign&lt;GrayAlpha&lt;T, A&gt;&gt; for GrayAlpha&lt;T, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sub&lt;Output = T&gt; + Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sub&lt;Output = A&gt; + Copy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["simba"] = [{"text":"impl SubAssign&lt;AutoSimd&lt;[f32; 2]&gt;&gt; for AutoSimd&lt;[f32; 2]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[f32; 4]&gt;&gt; for AutoSimd&lt;[f32; 4]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[f32; 8]&gt;&gt; for AutoSimd&lt;[f32; 8]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[f32; 16]&gt;&gt; for AutoSimd&lt;[f32; 16]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[f64; 2]&gt;&gt; for AutoSimd&lt;[f64; 2]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[f64; 4]&gt;&gt; for AutoSimd&lt;[f64; 4]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[f64; 8]&gt;&gt; for AutoSimd&lt;[f64; 8]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[i128; 1]&gt;&gt; for AutoSimd&lt;[i128; 1]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[i128; 2]&gt;&gt; for AutoSimd&lt;[i128; 2]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[i128; 4]&gt;&gt; for AutoSimd&lt;[i128; 4]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[i16; 2]&gt;&gt; for AutoSimd&lt;[i16; 2]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[i16; 4]&gt;&gt; for AutoSimd&lt;[i16; 4]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[i16; 8]&gt;&gt; for AutoSimd&lt;[i16; 8]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[i16; 16]&gt;&gt; for AutoSimd&lt;[i16; 16]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[i16; 32]&gt;&gt; for AutoSimd&lt;[i16; 32]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[i32; 2]&gt;&gt; for AutoSimd&lt;[i32; 2]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[i32; 4]&gt;&gt; for AutoSimd&lt;[i32; 4]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[i32; 8]&gt;&gt; for AutoSimd&lt;[i32; 8]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[i32; 16]&gt;&gt; for AutoSimd&lt;[i32; 16]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[i64; 2]&gt;&gt; for AutoSimd&lt;[i64; 2]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[i64; 4]&gt;&gt; for AutoSimd&lt;[i64; 4]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[i64; 8]&gt;&gt; for AutoSimd&lt;[i64; 8]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[i8; 2]&gt;&gt; for AutoSimd&lt;[i8; 2]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[i8; 4]&gt;&gt; for AutoSimd&lt;[i8; 4]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[i8; 8]&gt;&gt; for AutoSimd&lt;[i8; 8]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[i8; 16]&gt;&gt; for AutoSimd&lt;[i8; 16]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[i8; 32]&gt;&gt; for AutoSimd&lt;[i8; 32]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[isize; 2]&gt;&gt; for AutoSimd&lt;[isize; 2]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[isize; 4]&gt;&gt; for AutoSimd&lt;[isize; 4]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[isize; 8]&gt;&gt; for AutoSimd&lt;[isize; 8]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[u128; 1]&gt;&gt; for AutoSimd&lt;[u128; 1]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[u128; 2]&gt;&gt; for AutoSimd&lt;[u128; 2]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[u128; 4]&gt;&gt; for AutoSimd&lt;[u128; 4]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[u16; 2]&gt;&gt; for AutoSimd&lt;[u16; 2]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[u16; 4]&gt;&gt; for AutoSimd&lt;[u16; 4]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[u16; 8]&gt;&gt; for AutoSimd&lt;[u16; 8]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[u16; 16]&gt;&gt; for AutoSimd&lt;[u16; 16]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[u16; 32]&gt;&gt; for AutoSimd&lt;[u16; 32]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[u32; 2]&gt;&gt; for AutoSimd&lt;[u32; 2]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[u32; 4]&gt;&gt; for AutoSimd&lt;[u32; 4]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[u32; 8]&gt;&gt; for AutoSimd&lt;[u32; 8]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[u32; 16]&gt;&gt; for AutoSimd&lt;[u32; 16]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[u64; 2]&gt;&gt; for AutoSimd&lt;[u64; 2]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[u64; 4]&gt;&gt; for AutoSimd&lt;[u64; 4]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[u64; 8]&gt;&gt; for AutoSimd&lt;[u64; 8]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[u8; 2]&gt;&gt; for AutoSimd&lt;[u8; 2]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[u8; 4]&gt;&gt; for AutoSimd&lt;[u8; 4]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[u8; 8]&gt;&gt; for AutoSimd&lt;[u8; 8]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[u8; 16]&gt;&gt; for AutoSimd&lt;[u8; 16]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[u8; 32]&gt;&gt; for AutoSimd&lt;[u8; 32]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[usize; 2]&gt;&gt; for AutoSimd&lt;[usize; 2]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[usize; 4]&gt;&gt; for AutoSimd&lt;[usize; 4]&gt;","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;AutoSimd&lt;[usize; 8]&gt;&gt; for AutoSimd&lt;[usize; 8]&gt;","synthetic":false,"types":[]}];
implementors["ultraviolet"] = [{"text":"impl SubAssign&lt;Bivec2&gt; for Bivec2","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;WBivec2&gt; for WBivec2","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;Bivec3&gt; for Bivec3","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;WBivec3&gt; for WBivec3","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;Rotor2&gt; for Rotor2","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;WRotor2&gt; for WRotor2","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;Rotor3&gt; for Rotor3","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;WRotor3&gt; for WRotor3","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;Vec2&gt; for Vec2","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;Wec2&gt; for Wec2","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;Vec3&gt; for Vec3","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;Wec3&gt; for Wec3","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;Vec4&gt; for Vec4","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;Wec4&gt; for Wec4","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;Vec2u&gt; for Vec2u","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;Vec2i&gt; for Vec2i","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;Vec3u&gt; for Vec3u","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;Vec3i&gt; for Vec3i","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;Vec4u&gt; for Vec4u","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;Vec4i&gt; for Vec4i","synthetic":false,"types":[]}];
implementors["wide"] = [{"text":"impl SubAssign&lt;m128&gt; for m128","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;m128d&gt; for m128d","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;f32x4&gt; for f32x4","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; SubAssign&lt;&amp;'_ f32x4&gt; for f32x4","synthetic":false,"types":[]}];
implementors["winit"] = [{"text":"impl SubAssign&lt;ModifiersState&gt; for ModifiersState","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()