(function() {var implementors = {};
implementors["arrayvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Extend&lt;&lt;A as Array&gt;::Item&gt; for ArrayVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["cocoa"] = [{"text":"impl Extend&lt;NSApplicationPresentationOptions&gt; for NSApplicationPresentationOptions","synthetic":false,"types":[]},{"text":"impl Extend&lt;NSWindowStyleMask&gt; for NSWindowStyleMask","synthetic":false,"types":[]},{"text":"impl Extend&lt;NSWindowOrderingMode&gt; for NSWindowOrderingMode","synthetic":false,"types":[]},{"text":"impl Extend&lt;NSAlignmentOptions&gt; for NSAlignmentOptions","synthetic":false,"types":[]},{"text":"impl Extend&lt;NSWindowCollectionBehavior&gt; for NSWindowCollectionBehavior","synthetic":false,"types":[]},{"text":"impl Extend&lt;NSWindowOcclusionState&gt; for NSWindowOcclusionState","synthetic":false,"types":[]},{"text":"impl Extend&lt;NSEventSwipeTrackingOptions&gt; for NSEventSwipeTrackingOptions","synthetic":false,"types":[]},{"text":"impl Extend&lt;NSEventPhase&gt; for NSEventPhase","synthetic":false,"types":[]},{"text":"impl Extend&lt;NSTouchPhase&gt; for NSTouchPhase","synthetic":false,"types":[]},{"text":"impl Extend&lt;NSEventMask&gt; for NSEventMask","synthetic":false,"types":[]},{"text":"impl Extend&lt;NSEventModifierFlags&gt; for NSEventModifierFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;NSEnumerationOptions&gt; for NSEnumerationOptions","synthetic":false,"types":[]},{"text":"impl Extend&lt;NSURLBookmarkCreationOptions&gt; for NSURLBookmarkCreationOptions","synthetic":false,"types":[]},{"text":"impl Extend&lt;NSURLBookmarkResolutionOptions&gt; for NSURLBookmarkResolutionOptions","synthetic":false,"types":[]},{"text":"impl Extend&lt;NSDataReadingOptions&gt; for NSDataReadingOptions","synthetic":false,"types":[]},{"text":"impl Extend&lt;NSDataBase64EncodingOptions&gt; for NSDataBase64EncodingOptions","synthetic":false,"types":[]},{"text":"impl Extend&lt;NSDataBase64DecodingOptions&gt; for NSDataBase64DecodingOptions","synthetic":false,"types":[]},{"text":"impl Extend&lt;NSDataWritingOptions&gt; for NSDataWritingOptions","synthetic":false,"types":[]},{"text":"impl Extend&lt;NSDataSearchOptions&gt; for NSDataSearchOptions","synthetic":false,"types":[]},{"text":"impl Extend&lt;EdgeAntialiasingMask&gt; for EdgeAntialiasingMask","synthetic":false,"types":[]},{"text":"impl Extend&lt;CornerMask&gt; for CornerMask","synthetic":false,"types":[]},{"text":"impl Extend&lt;AutoresizingMask&gt; for AutoresizingMask","synthetic":false,"types":[]}];
implementors["core_graphics"] = [{"text":"impl Extend&lt;CGEventFlags&gt; for CGEventFlags","synthetic":false,"types":[]},{"text":"impl Extend&lt;CGGradientDrawingOptions&gt; for CGGradientDrawingOptions","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R, A&gt; Extend&lt;A&gt; for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Extend&lt;A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Extend&lt;A&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K, V, S&gt; Extend&lt;(K, V)&gt; for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Hash,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Extend&lt;(&amp;'a K, &amp;'a V)&gt; for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Hash + Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Extend&lt;T&gt; for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, S&gt; Extend&lt;&amp;'a T&gt; for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a + Eq + Hash + Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["hibitset"] = [{"text":"impl Extend&lt;u32&gt; for BitSet","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Extend&lt;&amp;'a u32&gt; for BitSet","synthetic":false,"types":[]},{"text":"impl Extend&lt;u32&gt; for AtomicBitSet","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Extend&lt;&amp;'a u32&gt; for AtomicBitSet","synthetic":false,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;K, V, S&gt; Extend&lt;(K, V)&gt; for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Hash + Eq,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Extend&lt;(&amp;'a K, &amp;'a V)&gt; for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Hash + Eq + Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Extend&lt;T&gt; for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Hash + Eq,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, S&gt; Extend&lt;&amp;'a T&gt; for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Hash + Eq + Copy + 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["nalgebra"] = [{"text":"impl&lt;N, R, S&gt; Extend&lt;N&gt; for Matrix&lt;N, R, Dynamic, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Extend&lt;N&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, S&gt; Extend&lt;N&gt; for Matrix&lt;N, Dynamic, U1, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Extend&lt;N&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, R, S, RV, SV&gt; Extend&lt;Matrix&lt;N, RV, U1, SV&gt;&gt; for Matrix&lt;N, R, Dynamic, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Extend&lt;Vector&lt;N, RV, SV&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;RV: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;SV: Storage&lt;N, RV&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;R, RV&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, R:&nbsp;Dim&gt; Extend&lt;N&gt; for VecStorage&lt;N, R, Dynamic&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;'a + Copy, R:&nbsp;Dim&gt; Extend&lt;&amp;'a N&gt; for VecStorage&lt;N, R, Dynamic&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N, R, RV, SV&gt; Extend&lt;Matrix&lt;N, RV, U1, SV&gt;&gt; for VecStorage&lt;N, R, Dynamic&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;RV: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;SV: Storage&lt;N, RV&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;R, RV&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N&gt; Extend&lt;N&gt; for VecStorage&lt;N, Dynamic, U1&gt;","synthetic":false,"types":[]}];
implementors["netcdf"] = [{"text":"impl Extend&lt;Options&gt; for Options","synthetic":false,"types":[]}];
implementors["png"] = [{"text":"impl Extend&lt;Transformations&gt; for Transformations","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Extend&lt;TokenTree&gt; for TokenStream","synthetic":false,"types":[]},{"text":"impl Extend&lt;TokenStream&gt; for TokenStream","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Extend&lt;(String, Value)&gt; for Map&lt;String, Value&gt;","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Extend&lt;&lt;A as Array&gt;::Item&gt; for SmallVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["specs"] = [{"text":"impl&lt;T&gt; Extend&lt;(Entity, T)&gt; for ChangeSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AddAssign,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl&lt;T, P&gt; Extend&lt;T&gt; for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Extend&lt;Pair&lt;T, P&gt;&gt; for Punctuated&lt;T, P&gt;","synthetic":false,"types":[]},{"text":"impl Extend&lt;Error&gt; for Error","synthetic":false,"types":[]}];
implementors["winit"] = [{"text":"impl Extend&lt;ModifiersState&gt; for ModifiersState","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()