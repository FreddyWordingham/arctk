(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;T:&nbsp;Any&gt; Error for CapacityError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["bracket_random"] = [{"text":"impl Error for DiceParseError","synthetic":false,"types":[]}];
implementors["core_foundation"] = [{"text":"impl Error for CFError","synthetic":false,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T:&nbsp;Send&gt; Error for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Error for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Error for SendTimeoutError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for RecvError","synthetic":false,"types":[]},{"text":"impl Error for TryRecvError","synthetic":false,"types":[]},{"text":"impl Error for RecvTimeoutError","synthetic":false,"types":[]},{"text":"impl Error for TrySelectError","synthetic":false,"types":[]},{"text":"impl Error for SelectTimeoutError","synthetic":false,"types":[]}];
implementors["dispatch"] = [{"text":"impl Error for WaitTimeout","synthetic":false,"types":[]}];
implementors["flate2"] = [{"text":"impl Error for DecompressError","synthetic":false,"types":[]},{"text":"impl Error for CompressError","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["glutin"] = [{"text":"impl Error for CreationError","synthetic":false,"types":[]},{"text":"impl Error for ContextError","synthetic":false,"types":[]}];
implementors["hex"] = [{"text":"impl Error for FromHexError","synthetic":false,"types":[]}];
implementors["image"] = [{"text":"impl Error for ImageError","synthetic":false,"types":[]},{"text":"impl Error for UnsupportedError","synthetic":false,"types":[]},{"text":"impl Error for ParameterError","synthetic":false,"types":[]},{"text":"impl Error for EncodingError","synthetic":false,"types":[]},{"text":"impl Error for DecodingError","synthetic":false,"types":[]},{"text":"impl Error for LimitError","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["jpeg_decoder"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["json5"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["ndarray"] = [{"text":"impl Error for ShapeError","synthetic":false,"types":[]}];
implementors["ndarray_stats"] = [{"text":"impl Error for EmptyInput","synthetic":false,"types":[]},{"text":"impl Error for MinMaxError","synthetic":false,"types":[]},{"text":"impl Error for ShapeMismatch","synthetic":false,"types":[]},{"text":"impl Error for MultiInputError","synthetic":false,"types":[]},{"text":"impl Error for QuantileError","synthetic":false,"types":[]},{"text":"impl Error for BinNotFound","synthetic":false,"types":[]},{"text":"impl Error for BinsBuildError","synthetic":false,"types":[]}];
implementors["netcdf"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["nom"] = [{"text":"impl&lt;E&gt; Error for Err&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;E:&nbsp;Error&gt; Error for ParseComplexError&lt;E&gt;","synthetic":false,"types":[]}];
implementors["objc"] = [{"text":"impl Error for MessageError","synthetic":false,"types":[]}];
implementors["palette"] = [{"text":"impl&lt;T:&nbsp;Debug&gt; Error for OutOfBounds&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pest"] = [{"text":"impl&lt;'i, R:&nbsp;RuleType&gt; Error for Error&lt;R&gt;","synthetic":false,"types":[]}];
implementors["png"] = [{"text":"impl Error for DecodingError","synthetic":false,"types":[]},{"text":"impl Error for EncodingError","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Error for LexError","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Error for BernoulliError","synthetic":false,"types":[]},{"text":"impl Error for WeightedError","synthetic":false,"types":[]},{"text":"impl Error for ReadError","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["rayon_core"] = [{"text":"impl Error for ThreadPoolBuildError","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for CaseFoldError","synthetic":false,"types":[]},{"text":"impl Error for UnicodeWordError","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["shred"] = [{"text":"impl Error for InvalidBorrow","synthetic":false,"types":[]}];
implementors["specs"] = [{"text":"impl Error for BoxedErr","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for WrongGeneration","synthetic":false,"types":[]},{"text":"impl Error for NoError","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["ucd_trie"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["winit"] = [{"text":"impl Error for OsError","synthetic":false,"types":[]},{"text":"impl Error for ExternalError","synthetic":false,"types":[]},{"text":"impl Error for NotSupportedError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Error for EventLoopClosed&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Error for BadIcon","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()