(function() {var implementors = {};
implementors["adler32"] = [{"text":"impl UnwindSafe for RollingAdler32","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; UnwindSafe for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; UnwindSafe for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; UnwindSafe for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; UnwindSafe for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; UnwindSafe for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Searcher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchKind","synthetic":true,"types":[]}];
implementors["approx"] = [{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; UnwindSafe for AbsDiff&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; UnwindSafe for Relative&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A:&nbsp;?Sized, B:&nbsp;?Sized&gt; UnwindSafe for Ulps&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as AbsDiffEq&lt;B&gt;&gt;::Epsilon: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["arctk"] = [{"text":"impl UnwindSafe for Average","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Histogram","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Table&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Redirect&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Camera","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CameraBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Emitter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EmitterBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Grid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GridBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Surface&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SurfaceBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SurfaceLinker","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Tree&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TreeSettings","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Hit&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Orient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ray","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Scan&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Side","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cube","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mesh","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MeshBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SmoothTriangle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Triangle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AspectRatio","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GradientBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Image","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Formula","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FormulaBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Probability","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProbabilityBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trans3Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Greek","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGB","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cartesian","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Polar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Spherical","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Register","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Set&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Crossing","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Operation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OperationBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Caster","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Event&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Settings","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SuperSample","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Input&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Output&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParametersBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParametersLinker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EngineBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Event&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttributeLinker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Light","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LightBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Material","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaterialBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Photon","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Settings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SettingsLinker","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Input&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Output","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParametersBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParametersLinker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EngineBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttributeLinker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Settings","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Shader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShaderLinker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tracer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Input&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Output&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParametersBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParametersLinker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EngineBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binner","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProgressBar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Range","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SilentProgressBar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LeftWalker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Player","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Renderable","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for State","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WalkLeft","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; UnwindSafe for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; UnwindSafe for Drain&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["atom"] = [{"text":"impl&lt;P&gt; UnwindSafe for Atom&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for AtomSetOnce&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["babbage"] = [{"text":"impl UnwindSafe for Parameters","synthetic":true,"types":[]}];
implementors["block"] = [{"text":"impl&lt;A, R&gt; UnwindSafe for Block&lt;A, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, R&gt; UnwindSafe for RcBlock&lt;A, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, R, F&gt; UnwindSafe for ConcreteBlock&lt;A, R, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bracket_color"] = [{"text":"impl UnwindSafe for ColorPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HSV","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RgbLerp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HsvLerp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RgbaLerp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlphaLerp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGB","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HtmlColorConversionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RGBA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XpColor","synthetic":true,"types":[]}];
implementors["bracket_geometry"] = [{"text":"impl UnwindSafe for BresenhamCircle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BresenhamCircleNoDiag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DistanceAlg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bresenham","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VectorLine","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LineAlg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Point","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Point3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rect","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RectF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Degrees","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Radians","synthetic":true,"types":[]}];
implementors["bracket_noise"] = [{"text":"impl UnwindSafe for FastNoise","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoiseType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Interp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FractalType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CellularDistanceFunction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CellularReturnType","synthetic":true,"types":[]}];
implementors["bracket_pathfinding"] = [{"text":"impl UnwindSafe for NavigationPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DijkstraMap","synthetic":true,"types":[]}];
implementors["bracket_random"] = [{"text":"impl UnwindSafe for RandomNumberGenerator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiceType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiceParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DiceIterator","synthetic":true,"types":[]}];
implementors["bracket_terminal"] = [{"text":"impl !UnwindSafe for DisplayConsole","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BTermInternal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BACKEND_INTERNAL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BTerm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DrawBatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DrawCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextAlign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharacterTranslationMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlexiTile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlexiConsole","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SimpleConsole","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SparseTile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SparseConsole","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RenderSprite","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpriteConsole","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sprite","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpriteSheet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MultiTileSprite","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TextBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommandType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VirtualConsole","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EMBED","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dictionary","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BTermPlatform","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Font","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BACKEND","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InitHints","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BTermBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for INPUT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Input","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XpCell","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XpLayer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for XpFile","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl UnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["cocoa"] = [{"text":"impl UnwindSafe for NSApplicationPresentationOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSWindowStyleMask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSWindowOrderingMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSAlignmentOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSWindowCollectionBehavior","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSWindowOcclusionState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSEventSwipeTrackingOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSEventPhase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSTouchPhase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSEventMask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSEventModifierFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSApplicationActivationPolicy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSApplicationActivationOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSApplicationTerminateReply","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSWindowTitleVisibility","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSWindowTabbingMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSBackingStoreType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSOpenGLPixelFormatAttribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSOpenGLPFAOpenGLProfiles","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSOpenGLContextParameter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSWindowButton","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSBezelStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSRequestUserAttentionType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSPasteboardReadingOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSPasteboardWritingOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSEventGestureAxis","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSEventType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSPointingDeviceType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSEventButtonMask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSEventSubtype","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSCompositingOperation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSImageCacheMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSTIFFCompression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSImageLoadStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSTabViewType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSTabState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSPoint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSSize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSRect","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSOperatingSystemVersion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSEnumerationOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSFastIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSURLBookmarkCreationOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSURLBookmarkResolutionOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSDataReadingOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSDataBase64EncodingOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSDataBase64DecodingOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSDataWritingOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSDataSearchOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSRectEdge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NSComparisonResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CALayer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EdgeAntialiasingMask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CornerMask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AutoresizingMask","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CARenderer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CATransform3D","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CVTimeStamp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CVSMPTETime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentsGravity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentsFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Filter","synthetic":true,"types":[]}];
implementors["color_quant"] = [{"text":"impl UnwindSafe for NeuQuant","synthetic":true,"types":[]}];
implementors["colored"] = [{"text":"impl UnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColoredString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Styles","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShouldColorize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHOULD_COLORIZE","synthetic":true,"types":[]}];
implementors["console"] = [{"text":"impl UnwindSafe for Term","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TermFeatures&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; UnwindSafe for Emoji&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for StyledObject&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for AnsiCodeIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TermFamily","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TermTarget","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Alignment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Color","synthetic":true,"types":[]}];
implementors["core_foundation"] = [{"text":"impl&lt;T&gt; UnwindSafe for CFArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for CFArrayIterator&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFAttributedString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFMutableAttributedString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFAllocator","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for ItemRef&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for ItemMutRef&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFBoolean","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFCharacterSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFDate","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for CFDictionary&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for CFMutableDictionary&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFFileDescriptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFNumber","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CFSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFURL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFBundle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFPropertyList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFRunLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFRunLoopTimer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFRunLoopSource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFRunLoopObserver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFTimeZone","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFUUID","synthetic":true,"types":[]}];
implementors["core_foundation_sys"] = [{"text":"impl UnwindSafe for CFArrayCallBacks","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFAttributedString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFAllocatorContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFComparisonResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFBundle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFCharacterSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFDate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFDictionaryKeyCallBacks","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFDictionaryValueCallBacks","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFDictionary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFFileDescriptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFFileDescriptorContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFMessagePortContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFMessagePort","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFBoolean","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFNumber","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFRunLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFRunLoopSource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFRunLoopObserver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFRunLoopSourceContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFRunLoopSourceContext1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFRunLoopObserverContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFRunLoopTimerContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFRunLoopTimer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFSetCallBacks","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFTimeZone","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFURL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CFUUID","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CFUUIDBytes","synthetic":true,"types":[]}];
implementors["core_graphics"] = [{"text":"impl UnwindSafe for CGColor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGColorSpace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGColorSpaceRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGContextRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGBlendMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGTextDrawingMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGLineCap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGLineJoin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGPathDrawingMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGInterpolationQuality","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGDataProvider","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGDataProviderRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGDisplay","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGDisplayMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGDisplayModeRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGConfigureOption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGEventFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ScrollEventUnit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EventField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGEventRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGEventType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGMouseButton","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGEventTapLocation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGEventSource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGEventSourceRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGEventSourceStateID","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGFont","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGFontRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGSize","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGPoint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGRect","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGAffineTransform","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGGradientDrawingOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGGradient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGGradientRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGSRegion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGSSurface","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGImage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGImageRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGImageAlphaInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGImageByteOrderInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGPathRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CGPathElementRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGPathElement","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGPathElementType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CGColor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGImage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGColorSpace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGDataProvider","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGFont","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGGradient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGEventSource","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CGDisplayMode","synthetic":true,"types":[]}];
implementors["core_video_sys"] = [{"text":"impl UnwindSafe for CVSMPTETime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CVTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CVTimeStamp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CVBuffer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CVPlanarComponentInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CVPlanarPixelBufferInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CVPlanarPixelBufferInfo_YCbCrPlanar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CVPlanarPixelBufferInfo_YCbCrBiPlanar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CVFillExtendedPixelsCallBackData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for __CVDisplayLink","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl UnwindSafe for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryReadyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TrySelectError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; !UnwindSafe for Injector&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Stealer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Worker&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for Atomic&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized, P&gt; UnwindSafe for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized&gt; UnwindSafe for Shared&lt;'g, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Collector","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LocalHandle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl&lt;T&gt; !UnwindSafe for ArrayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for SegQueue&lt;T&gt;","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; UnwindSafe for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Backoff","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Parker","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; !UnwindSafe for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; !UnwindSafe for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; !UnwindSafe for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for ShardedLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["deflate"] = [{"text":"impl UnwindSafe for CompressionOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Compression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecialOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchingType","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["dispatch"] = [{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GroupGuard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Queue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SuspendGuard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Semaphore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SemaphoreGuard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitTimeout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueueAttribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QueuePriority","synthetic":true,"types":[]},{"text":"impl UnwindSafe for dispatch_object_s","synthetic":true,"types":[]}];
implementors["flate2"] = [{"text":"impl UnwindSafe for Crc","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for CrcReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for CrcWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GzBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GzHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Compress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Decompress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecompressError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Compression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlushCompress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlushDecompress","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for DeflateDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for GzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for MultiGzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for GzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !UnwindSafe for MultiGzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for GzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for GzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for ZlibDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["glow"] = [{"text":"impl UnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ActiveUniform","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ActiveAttribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DebugMessageLogEntry","synthetic":true,"types":[]}];
implementors["glutin"] = [{"text":"impl&lt;T&gt; UnwindSafe for Context&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PossiblyCurrent","synthetic":true,"types":[]},{"text":"impl&lt;T, W&gt; UnwindSafe for ContextWrapper&lt;T, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for ContextBuilder&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PixelFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PixelFormatRequirements","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for GlAttributes&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rect","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotCurrent","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for CreationError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ContextError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Api","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlProfile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GlRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Robustness","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReleaseBehavior","synthetic":true,"types":[]}];
implementors["hdf5_sys"] = [{"text":"impl UnwindSafe for H5_ih_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5_iter_order_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5_index_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5A_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5AC_cache_config_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5AC_cache_image_config_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5C_cache_incr_mode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5C_cache_flash_incr_mode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5C_cache_decr_mode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5D_alloc_time_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5D_space_status_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5D_fill_time_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5D_fill_value_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5D_mpio_actual_chunk_opt_mode_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5D_mpio_actual_io_mode_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5D_mpio_no_collective_cause_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5D_layout_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5D_vds_view_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5E_error2_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5E_type_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5E_direction_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5F_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5F_info_t__sohm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5F_retry_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5F_sect_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5F_info2_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5F_info2_t__super","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5F_info2_t__free","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5F_info2_t__sohm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5F_scope_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5F_close_degree_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5F_mem_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5F_libver_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5F_file_space_type_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5F_fspace_strategy_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5FD_class_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5FD_free_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5FD_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5FD_file_image_callbacks_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5FD_file_image_op_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5G_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5G_storage_type_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5I_type_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5L_info1_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5L_info1_t__u","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5L_info2_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5L_class_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5L_info2_t__u","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5L_type_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5O_hdr_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5O_hdr_info_t__space","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5O_hdr_info_t__mesg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5O_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5O_info_t__meta_size","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5O_token_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5O_info2_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5O_native_info_meta_size_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5O_native_info_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5O_type_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5O_mcdt_search_ret_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5R_ref_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5R_ref_t_u","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5R_type_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5S_class_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5S_seloper_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5S_sel_type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5T_cdata_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for hvl_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5T_class_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5T_order_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5T_sign_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5T_norm_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5T_cset_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5T_str_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5T_pad_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5T_cmd_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5T_bkg_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5T_pers_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5T_direction_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5T_conv_except_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5T_conv_ret_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5Z_cb_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5Z_class2_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5Z_SO_scale_type_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5Z_EDC_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5Z_cb_return_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for H5PL_type_t","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl UnwindSafe for FromHexError","synthetic":true,"types":[]}];
implementors["hibitset"] = [{"text":"impl UnwindSafe for AtomicBitSet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for BitIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for DrainBitIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for BitParIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for BitProducer&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitSetAll","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for BitSetAnd&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for BitSetNot&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for BitSetOr&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for BitSetXor&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitSet","synthetic":true,"types":[]}];
implementors["image"] = [{"text":"impl&lt;T&gt; UnwindSafe for Luma&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LumaA&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Rgb&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Rgba&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Bgr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Bgra&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Progress","synthetic":true,"types":[]},{"text":"impl&lt;'a, I:&nbsp;?Sized&gt; UnwindSafe for Pixels&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for SubImage&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Container&gt; UnwindSafe for ImageBuffer&lt;P, Container&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Container: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delay","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Frame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Frames&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColorType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtendedColorType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageOutputFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DynamicImage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnsupportedError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EncodingError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ParameterError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DecodingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LimitError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ImageError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnsupportedErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParameterErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LimitErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageFormatHint","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; UnwindSafe for EnumeratePixels&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !UnwindSafe for EnumeratePixelsMut&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; UnwindSafe for EnumerateRows&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !UnwindSafe for EnumerateRowsMut&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; UnwindSafe for Pixels&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !UnwindSafe for PixelsMut&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; UnwindSafe for Rows&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Pixel&gt;::Subpixel: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; !UnwindSafe for RowsMut&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rect","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NeuQuant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BiLevel","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer&gt; UnwindSafe for FlatSamples&lt;Buffer&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SampleLayout","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; UnwindSafe for View&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; UnwindSafe for ViewMut&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NormalForm","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for JpegDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for JpegEncoder&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PixelDensity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PixelDensityUnit","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for PngReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for PngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ApngDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for PngEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressionType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterType","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for OccupiedEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for VacantEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; UnwindSafe for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for Entry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; UnwindSafe for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["indicatif"] = [{"text":"impl UnwindSafe for BinaryBytes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecimalBytes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FormattedDuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HumanBytes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HumanDuration","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ProgressBarIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for MultiProgress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProgressBar","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for ProgressBarWrap&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProgressDrawTarget","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WeakProgressBar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProgressStyle","synthetic":true,"types":[]}];
implementors["jpeg_decoder"] = [{"text":"impl&lt;R&gt; UnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImageInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PixelFormat","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnsupportedFeature","synthetic":true,"types":[]}];
implementors["json5"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["libz_sys"] = [{"text":"impl UnwindSafe for gz_header","synthetic":true,"types":[]},{"text":"impl UnwindSafe for z_stream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for gzFile_s","synthetic":true,"types":[]},{"text":"impl UnwindSafe for internal_state","synthetic":true,"types":[]}];
implementors["malloc_buf"] = [{"text":"impl&lt;T&gt; UnwindSafe for MallocBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl UnwindSafe for StreamResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MZFlush","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MZStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MZError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataFormat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressionLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TINFLStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InflateState","synthetic":true,"types":[]}];
implementors["nalgebra"] = [{"text":"impl&lt;N, R, C, S&gt; UnwindSafe for Matrix&lt;N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EuclideanNorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LpNorm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UniformNorm","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Unit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; UnwindSafe for ArrayStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;&lt;R as DimName&gt;::Value as Mul&lt;&lt;C as DimName&gt;::Value&gt;&gt;::Output as ArrayLength&lt;N&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, RStride, CStride&gt; UnwindSafe for SliceStorage&lt;'a, N, R, C, RStride, CStride&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;CStride: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;RStride: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, RStride, CStride&gt; !UnwindSafe for SliceStorageMut&lt;'a, N, R, C, RStride, CStride&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; UnwindSafe for VecStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShapeConstraint","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for X&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for XY&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for XYZ&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for XYZW&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for XYZWA&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for XYZWAB&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for IJKW&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M2x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M2x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M2x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M2x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M2x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M3x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M3x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M3x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M3x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M3x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M4x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M4x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M4x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M4x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M4x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M5x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M5x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M5x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M5x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M5x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M6x2&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M6x3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M6x4&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M6x5&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for M6x6&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultAllocator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dynamic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U0","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U5","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U6","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U8","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U9","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U10","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U11","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U13","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U14","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U15","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U16","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U17","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U18","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U19","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U20","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U21","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U22","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U23","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U24","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U25","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U26","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U27","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U28","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U29","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U30","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U31","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U33","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U34","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U35","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U36","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U37","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U38","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U39","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U40","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U41","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U42","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U43","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U44","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U45","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U46","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U47","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U48","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U49","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U50","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U51","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U52","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U53","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U54","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U55","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U56","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U57","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U58","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U59","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U60","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U61","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U62","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U63","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U65","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U66","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U67","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U68","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U69","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U70","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U71","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U72","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U73","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U74","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U75","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U76","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U77","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U78","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U79","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U80","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U81","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U82","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U83","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U84","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U85","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U86","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U87","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U88","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U89","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U90","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U91","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U92","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U93","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U94","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U95","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U96","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U97","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U98","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U99","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U100","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U101","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U102","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U103","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U104","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U105","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U106","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U107","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U108","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U109","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U110","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U111","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U112","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U113","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U114","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U115","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U116","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U117","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U118","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U119","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U120","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U121","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U122","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U123","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U124","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U125","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U126","synthetic":true,"types":[]},{"text":"impl UnwindSafe for U127","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; UnwindSafe for MatrixIter&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Storage&lt;N, R, C&gt;&gt;::CStride: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Storage&lt;N, R, C&gt;&gt;::RStride: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !UnwindSafe for MatrixIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; UnwindSafe for RowIter&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !UnwindSafe for RowIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; UnwindSafe for ColumnIter&lt;'a, N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, R, C, S&gt; !UnwindSafe for ColumnIterMut&lt;'a, N, R, C, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !UnwindSafe for Point&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !UnwindSafe for Rotation&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !UnwindSafe for Translation&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, R&gt; !UnwindSafe for Isometry&lt;N, D, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, R&gt; !UnwindSafe for Similarity&lt;N, D, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, C&gt; !UnwindSafe for Transform&lt;N, D, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D, S&gt; UnwindSafe for Reflection&lt;N, D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Orthographic3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for Perspective3&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TGeneral","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TProjective","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TAffine","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !UnwindSafe for Bidiagonal&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !UnwindSafe for Cholesky&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !UnwindSafe for FullPivLU&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !UnwindSafe for Hessenberg&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !UnwindSafe for LU&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; !UnwindSafe for PermutationSequence&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !UnwindSafe for QR&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !UnwindSafe for Schur&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, R, C&gt; !UnwindSafe for SVD&lt;N, R, C&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !UnwindSafe for SymmetricEigen&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N, D&gt; !UnwindSafe for SymmetricTridiagonal&lt;N, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for GivensRotation&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ComplexField&gt;::RealField: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ndarray"] = [{"text":"impl&lt;I:&nbsp;?Sized&gt; UnwindSafe for Dim&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Axis","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AxisDescription","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IxDynImpl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShapeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Slice","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, D&gt; UnwindSafe for SliceInfo&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Parts, D&gt; UnwindSafe for Zip&lt;Parts, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Parts: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, D&gt; UnwindSafe for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as RawData&gt;::Elem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for OwnedRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for OwnedArcRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RawViewRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for ViewRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for Shape&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for StrideShape&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SliceOrIndex","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; UnwindSafe for CowRepr&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, D&gt; UnwindSafe for Axes&lt;'a, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for Indices&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for IndicesIter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; UnwindSafe for AxisChunksIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; !UnwindSafe for AxisChunksIterMut&lt;'a, A, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; UnwindSafe for AxisIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; !UnwindSafe for AxisIterMut&lt;'a, A, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; UnwindSafe for ExactChunks&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; UnwindSafe for ExactChunksIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; !UnwindSafe for ExactChunksIterMut&lt;'a, A, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; !UnwindSafe for ExactChunksMut&lt;'a, A, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; UnwindSafe for IndexedIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; !UnwindSafe for IndexedIterMut&lt;'a, A, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; UnwindSafe for Iter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; !UnwindSafe for IterMut&lt;'a, A, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; UnwindSafe for Lanes&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; UnwindSafe for LanesIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; !UnwindSafe for LanesIterMut&lt;'a, A, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; !UnwindSafe for LanesMut&lt;'a, A, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; UnwindSafe for Windows&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Parallel&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ndarray_parallel"] = [{"text":"impl&lt;I&gt; UnwindSafe for Parallel&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ndarray_stats"] = [{"text":"impl UnwindSafe for Higher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lower","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Nearest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Midpoint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Linear","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EmptyInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShapeMismatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MinMaxError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MultiInputError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuantileError","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for Bins&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for Edges&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for Grid&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; UnwindSafe for GridBuilder&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for Histogram&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinNotFound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinsBuildError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Sqrt&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Rice&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Sturges&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for FreedmanDiaconis&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Auto&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["netcdf"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttrValue","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for Dimension&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for File","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MutableFile","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; UnwindSafe for Group&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; !UnwindSafe for GroupMut&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpaqueType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VlenType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EnumType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompoundType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompoundField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompoundBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BasicType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VariableType","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; UnwindSafe for Variable&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; !UnwindSafe for VariableMut&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Endianness","synthetic":true,"types":[]}];
implementors["netcdf_sys"] = [{"text":"impl UnwindSafe for nc_vlen_t","synthetic":true,"types":[]}];
implementors["noisy_float"] = [{"text":"impl&lt;F, C&gt; UnwindSafe for NoisyFloat&lt;F, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NumChecker","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FiniteChecker","synthetic":true,"types":[]}];
implementors["nom"] = [{"text":"impl UnwindSafe for CompareResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Needed","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for Err&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for VerboseError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerboseErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;I, E, F&gt; UnwindSafe for ParserIterator&lt;I, E, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Endianness","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; UnwindSafe for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; UnwindSafe for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; UnwindSafe for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; UnwindSafe for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl UnwindSafe for ParseFloatError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloatErrorKind","synthetic":true,"types":[]}];
implementors["number_prefix"] = [{"text":"impl UnwindSafe for Prefix","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for NumberPrefix&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["objc"] = [{"text":"impl UnwindSafe for Encoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ivar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Protocol","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Object","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassDecl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtocolDecl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StrongPtr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WeakPtr","synthetic":true,"types":[]}];
implementors["object_pool"] = [{"text":"impl&lt;'a, T&gt; UnwindSafe for Pool&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Reusable&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["palette"] = [{"text":"impl&lt;C, T&gt; UnwindSafe for Alpha&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; UnwindSafe for Hsl&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; UnwindSafe for Hsv&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; UnwindSafe for Hwb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; UnwindSafe for Lab&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; UnwindSafe for Lch&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; UnwindSafe for Xyz&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Wp, T&gt; UnwindSafe for Yxy&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for OutOfBounds&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LabHue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RgbHue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Equations","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parameters","synthetic":true,"types":[]},{"text":"impl&lt;C, T&gt; UnwindSafe for PreAlpha&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Equation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parameter","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; UnwindSafe for Gradient&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Mix&gt;::Scalar: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; UnwindSafe for Take&lt;'a, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Mix&gt;::Scalar: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; UnwindSafe for Slice&lt;'a, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;C as Mix&gt;::Scalar: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Range&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; UnwindSafe for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; UnwindSafe for Rgb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ConeResponseMatrices&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Srgb","synthetic":true,"types":[]},{"text":"impl&lt;S, N&gt; UnwindSafe for Gamma&lt;S, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for GammaFn&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for F2p2","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Linear&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinearFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for A","synthetic":true,"types":[]},{"text":"impl UnwindSafe for B","synthetic":true,"types":[]},{"text":"impl UnwindSafe for C","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D50","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D55","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D65","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D75","synthetic":true,"types":[]},{"text":"impl UnwindSafe for E","synthetic":true,"types":[]},{"text":"impl UnwindSafe for F2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for F7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for F11","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D50Degree10","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D55Degree10","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D65Degree10","synthetic":true,"types":[]},{"text":"impl UnwindSafe for D75Degree10","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl UnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawThreadId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OnceState","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl UnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpinWait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequeueOp","synthetic":true,"types":[]}];
implementors["pest"] = [{"text":"impl&lt;'i, R&gt; UnwindSafe for ParserState&lt;'i, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; UnwindSafe for Position&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; UnwindSafe for Lines&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; UnwindSafe for Span&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Atomicity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lookahead","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchDir","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; UnwindSafe for Token&lt;'i, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Error&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ErrorVariant&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputLocation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LineColLocation","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; UnwindSafe for FlatPairs&lt;'i, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; UnwindSafe for Pair&lt;'i, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; UnwindSafe for Pairs&lt;'i, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; UnwindSafe for Tokens&lt;'i, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Operator&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for PrecClimber&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Assoc","synthetic":true,"types":[]}];
implementors["pest_meta"] = [{"text":"impl UnwindSafe for Rule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTopDownIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RuleType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OptimizedRule","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OptimizedExprTopDownIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OptimizedExpr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PestParser","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; UnwindSafe for ParserRule&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; UnwindSafe for ParserNode&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rule","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; UnwindSafe for ParserExpr&lt;'i&gt;","synthetic":true,"types":[]}];
implementors["phf"] = [{"text":"impl&lt;K, V&gt; UnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Set&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Entries&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["phf_shared"] = [{"text":"impl UnwindSafe for Hashes","synthetic":true,"types":[]}];
implementors["png"] = [{"text":"impl UnwindSafe for PixelDimensions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FrameControl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AnimationControl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Info","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Transformations","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Limits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputInfo","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for StreamWriter&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ColorType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BitDepth","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DisposeOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BlendOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Compression","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Decoded","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DecodingError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for EncodingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterType","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl UnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntoIter","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl UnwindSafe for Bernoulli","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Open01","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenClosed01","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binomial","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cauchy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dirichlet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Beta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChiSquared","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FisherF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gamma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StudentT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogNormal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pareto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Poisson","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Triangular","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitCircle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; UnwindSafe for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Standard","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EntropyRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SmallRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ThreadRng","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; UnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; UnwindSafe for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl UnwindSafe for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; UnwindSafe for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; UnwindSafe for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_distr"] = [{"text":"impl UnwindSafe for Binomial","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Cauchy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Dirichlet&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Exp&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Beta&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for ChiSquared&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for FisherF&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Gamma&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for StudentT&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for InverseGaussian&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for LogNormal&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Normal&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for NormalInverseGaussian&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Pareto&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Pert&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Poisson&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Triangular&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitBall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitCircle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitDisc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitSphere","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; UnwindSafe for Weibull&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BetaError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChiSquaredError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FisherFError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PertError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TriangularError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for WeightedAliasIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_pcg"] = [{"text":"impl UnwindSafe for Lcg64Xsh32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lcg128Xsl64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mcg128Xsl64","synthetic":true,"types":[]}];
implementors["rand_xorshift"] = [{"text":"impl UnwindSafe for XorShiftRng","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for FlatMapIter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for FlattenIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; UnwindSafe for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; UnwindSafe for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; UnwindSafe for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; UnwindSafe for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; UnwindSafe for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; UnwindSafe for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for Positions&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; UnwindSafe for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; UnwindSafe for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; UnwindSafe for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; UnwindSafe for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; UnwindSafe for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for Iter&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for Chunks&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for ChunksExact&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; UnwindSafe for Windows&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for IterMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for ChunksMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for ChunksExactMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; UnwindSafe for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; !UnwindSafe for SplitMut&lt;'data, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for Split&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for SplitTerminator&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; UnwindSafe for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for Matches&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; UnwindSafe for MatchIndices&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Drain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; !UnwindSafe for Drain&lt;'data, T&gt;","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !UnwindSafe for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !UnwindSafe for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !UnwindSafe for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ThreadPool","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !UnwindSafe for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Configuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl UnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; UnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; UnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !UnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; UnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; UnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !UnwindSafe for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; UnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl UnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WithComments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Alternation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Concat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassPerl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassAscii","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBracketed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Assertion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaptureName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlagsItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AssertionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaseFoldError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hir","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HirKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WordBoundary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literals","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Translator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Range","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utf8Sequence","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl UnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; UnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; UnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; UnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; UnwindSafe for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; UnwindSafe for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; UnwindSafe for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharEscape","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Serializer","synthetic":true,"types":[]}];
implementors["shred"] = [{"text":"impl&lt;'a, R&gt; !UnwindSafe for AsyncDispatcher&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; UnwindSafe for Par&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, T&gt; UnwindSafe for ParSeq&lt;P, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;H, T&gt; UnwindSafe for Seq&lt;H, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BatchAccessor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for BatchUncheckedWorld&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for DefaultBatchControllerSystem&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for Dispatcher&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for DispatcherBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for MetaIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for MetaIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; UnwindSafe for MetaTable&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for StaticAccessor&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DefaultProvider","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Fetch&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for FetchMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PanicHandler","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F&nbsp;=&nbsp;DefaultProvider&gt; !UnwindSafe for Read&lt;'a, T, F&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ResourceId","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for World","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F&nbsp;=&nbsp;DefaultProvider&gt; !UnwindSafe for Write&lt;'a, T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T:&nbsp;?Sized&gt; UnwindSafe for AccessorCow&lt;'a, 'b, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as System&lt;'a&gt;&gt;::SystemData as DynamicSystemData&lt;'a&gt;&gt;::Accessor: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as System&lt;'a&gt;&gt;::SystemData: DynamicSystemData&lt;'a&gt;,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RunningTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidBorrow","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; UnwindSafe for Ref&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for RefMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for TrustCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["shrev"] = [{"text":"impl&lt;T&gt; !UnwindSafe for ReaderId&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for StorageIterator&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; !UnwindSafe for EventChannel&lt;E&gt;","synthetic":true,"types":[]}];
implementors["simba"] = [{"text":"impl&lt;N&gt; UnwindSafe for AutoSimd&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for AutoBoolSimd&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; UnwindSafe for SimdOption&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as SimdValue&gt;::SimdBool: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, T&gt; !UnwindSafe for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["specs"] = [{"text":"impl&lt;T&gt; UnwindSafe for DefaultVecStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DenseVecStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, T&nbsp;=&nbsp;DenseVecStorage&lt;C&gt;&gt; !UnwindSafe for FlaggedStorage&lt;C, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for HashMapStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for NullStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for VecStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Entity","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LazyUpdate","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ChangeSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BoxedErr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WrongGeneration","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoError","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; UnwindSafe for JoinParIter&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; UnwindSafe for MaybeJoin&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;J: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;J&gt; UnwindSafe for JoinIter&lt;J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Join&gt;::Mask: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Join&gt;::Value: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ComponentEvent","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; !UnwindSafe for Entries&lt;'a, 'b, T, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; !UnwindSafe for OccupiedEntry&lt;'a, 'b, T, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; !UnwindSafe for VacantEntry&lt;'a, 'b, T, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'rf, 'st, C, S, B, Restrict&gt; !UnwindSafe for RestrictedStorage&lt;'rf, 'st, C, S, B, Restrict&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for BTreeStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for AntiStorage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for MaskedStorage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Component&gt;::Storage: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'e, T, D&gt; !UnwindSafe for Storage&lt;'e, T, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, T, D&gt; !UnwindSafe for StorageEntry&lt;'a, 'b, T, D&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImmutableParallelRestriction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MutableParallelRestriction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SequentialRestriction","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CreateIterAtomic&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EntitiesRes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for EntityResBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Generation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for LazyBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for CreateIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for EntityBuilder&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl UnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Arm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemImpl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMacro2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemStatic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemUse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseGlob","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UsePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseRename","synthetic":true,"types":[]},{"text":"impl UnwindSafe for File","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatRest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RangeLimits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl UnwindSafe for As","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for For","synthetic":true,"types":[]},{"text":"impl UnwindSafe for If","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for In","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl UnwindSafe for While","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for And","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for At","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; UnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; !UnwindSafe for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; UnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["terminal_size"] = [{"text":"impl UnwindSafe for Width","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Height","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !UnwindSafe for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send + UnwindSafe&gt; UnwindSafe for CachedThreadLocal&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send + UnwindSafe&gt; UnwindSafe for ThreadLocal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tynm"] = [{"text":"impl&lt;'s&gt; UnwindSafe for TypeNameDisplay&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; UnwindSafe for TypeName&lt;'s&gt;","synthetic":true,"types":[]}];
implementors["ucd_trie"] = [{"text":"impl UnwindSafe for TrieSetOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TrieSetSlice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["ultraviolet"] = [{"text":"impl UnwindSafe for Bivec2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WBivec2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bivec3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WBivec3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mat2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Wat2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mat3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Wat3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mat4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Wat4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rotor2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WRotor2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rotor3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WRotor3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Isometry2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WIsometry2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Isometry3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WIsometry3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Similarity2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WSimilarity2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Similarity3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WSimilarity3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Vec2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Wec2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Vec3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Wec3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Vec4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Wec4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Vec2u","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Vec2i","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Vec3u","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Vec3i","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Vec4u","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Vec4i","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Plane","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Planeu","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rayu","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Planei","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rayi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Aabb","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Aabbu","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Aabbi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AabbLinearIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AabbuLinearIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AabbiLinearIterator","synthetic":true,"types":[]}];
implementors["wide"] = [{"text":"impl UnwindSafe for f32x4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for i32x4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstUnionHack_f32x4","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstUnionHack_i32x4","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Align2&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Align4&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Align8&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Align16&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Align32&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for m128","synthetic":true,"types":[]},{"text":"impl UnwindSafe for m128i","synthetic":true,"types":[]},{"text":"impl UnwindSafe for m128d","synthetic":true,"types":[]}];
implementors["winit"] = [{"text":"impl&lt;P&gt; UnwindSafe for LogicalPosition&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for PhysicalPosition&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for LogicalSize&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for PhysicalSize&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Size","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NotSupportedError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExternalError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeviceId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyboardInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Touch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModifiersState","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Event&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StartCause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for WindowEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeviceEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TouchPhase","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Force","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ElementState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MouseButton","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MouseScrollDelta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VirtualKeyCode","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for EventLoop&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for EventLoopWindowTarget&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !UnwindSafe for EventLoopProxy&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for EventLoopClosed&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControlFlow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Icon","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for BadIcon","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VideoMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MonitorHandle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Window","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WindowId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WindowBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WindowAttributes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CursorIcon","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fullscreen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Theme","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestUserAttentionType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ActivationPolicy","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()