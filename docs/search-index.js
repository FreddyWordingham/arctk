var searchIndex = JSON.parse('{\
"adler32":{"doc":"A minimal implementation of Adler32 for Rust.","t":[3,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["RollingAdler32","adler32","borrow","borrow_mut","clone","clone_into","default","from","from_buffer","from_value","hash","into","new","remove","to_owned","try_from","try_into","type_id","update","update_buffer"],"q":["adler32","","","","","","","","","","","","","","","","","","",""],"d":["A rolling version of the Adler32 hash, which can ‘forget…","Consume a Read object and returns the Adler32 hash.","","","","","","","Convenience function initializing a context from the hash …","Creates an Adler32 context with the given initial value.","Returns the current hash.","","Creates an empty Adler32 context (with hash 1).","Removes the given <code>byte</code> that was fed to the algorithm <code>size</code> …","","","","","Feeds a new <code>byte</code> to the algorithm to update the hash.","Feeds a vector of bytes to the algorithm to update the …"],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[["read",8]],[["result",6],["u32",15]]],[[]],[[]],[[],["rollingadler32",3]],[[]],[[],["rollingadler32",3]],[[]],[[],["rollingadler32",3]],[[["u32",15]],["rollingadler32",3]],[[],["u32",15]],[[]],[[],["rollingadler32",3]],[[["usize",15],["u8",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["u8",15]]],[[]]],"p":[[3,"RollingAdler32"]]},\
"aho_corasick":{"doc":"A library for finding occurrences of many patterns at …","t":[3,3,3,4,3,3,13,13,3,4,13,13,8,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,3,13,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AhoCorasick","AhoCorasickBuilder","Error","ErrorKind","FindIter","FindOverlappingIter","LeftmostFirst","LeftmostLongest","Match","MatchKind","PremultiplyOverflow","Standard","StateID","StateIDOverflow","StreamFindIter","anchored","ascii_case_insensitive","auto_configure","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_with_size","byte_classes","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","dense_depth","description","dfa","earliest_find","end","eq","eq","find","find_iter","find_overlapping_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_usize","hash","heap_bytes","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_match","kind","match_kind","match_kind","max_id","max_pattern_len","ne","new","new","new_auto_configured","next","next","next","packed","pattern","pattern_count","prefilter","premultiply","replace_all","replace_all_bytes","replace_all_with","replace_all_with_bytes","start","stream_find_iter","stream_replace_all","stream_replace_all_with","supports_overlapping","supports_stream","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_usize","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","max","max","requested_max","Builder","Config","FindIter","LeftmostFirst","LeftmostLongest","MatchKind","Searcher","add","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","eq","extend","find","find_at","find_iter","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","heap_bytes","into","into","into","into","into","into_iter","match_kind","match_kind","minimum_len","new","new","new","next","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":["aho_corasick","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aho_corasick::ErrorKind","","","aho_corasick::packed","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An automaton for searching multiple strings in linear …","A builder for configuring an Aho-Corasick automaton.","An error that occurred during the construction of an …","The kind of error that occurred.","An iterator of non-overlapping matches in a particular …","An iterator of overlapping matches in a particular …","Use leftmost-first match semantics, which reports …","Use leftmost-longest match semantics, which reports …","A representation of a match reported by an Aho-Corasick …","A knob for controlling the match semantics of an …","An error that occurs when premultiplication of state IDs …","Use standard match semantics, which support overlapping …","A trait describing the representation of an automaton’s …","An error that occurs when constructing an automaton would …","An iterator that reports Aho-Corasick matches in a stream.","Enable anchored mode, which requires all matches to start …","Enable ASCII-aware case insensitive matching.","Automatically configure the settings on this builder …","","","","","","","","","","","","","","","","","","","Build an Aho-Corasick automaton using the configuration …","Build an Aho-Corasick automaton using the configuration …","Shrink the size of the transition alphabet by mapping …","","","","","","","","","","","","","","","Set the limit on how many NFA states use a dense …","","Compile the standard Aho-Corasick automaton into a …","Returns the location of the first detected match in …","The ending position of the match.","","","Returns the location of the first match according to the …","Returns an iterator of non-overlapping matches, using the …","Returns an iterator of overlapping matches in the given …","","","","","","","","","","","","","","","","","","","","Convert from a <code>usize</code> to this implementation’s …","","Returns the approximate total amount of heap used by this …","","","","","","","","","","","","","Returns true if and only if this match is empty. That is, …","Returns true if and only if this automaton matches the …","Return the kind of this error.","Returns the match kind used by this automaton.","Set the desired match semantics.","Return the maximum state identifier supported by this …","Returns the length of the longest pattern matched by this …","","Create a new Aho-Corasick automaton using the default …","Create a new builder for configuring an Aho-Corasick …","Build an Aho-Corasick automaton with an automatically …","","","","A lower level API for packed multiple substring search, …","Returns the identifier of the pattern that matched.","Return the total number of patterns matched by this …","Enable heuristic prefilter optimizations.","Premultiply state identifiers in the transition table. …","Replace all matches with a corresponding value in the …","Replace all matches using raw bytes with a corresponding …","Replace all matches using a closure called on each match. …","Replace all matches using raw bytes with a closure called …","The starting position of the match.","Returns an iterator of non-overlapping matches in the …","Search for and replace all matches of this automaton in …","Search the given reader and replace all matches of this …","Returns true if and only if this automaton supports …","Returns true if and only if this automaton supports …","","","","","","","","Convert this implementation’s representation to a <code>usize</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","The maximum possible state ID.","The maximum possible state id.","The maximum ID required by premultiplication.","A builder for constructing a packed searcher from a …","The configuration for a packed multiple pattern searcher.","An iterator over non-overlapping matches from a packed …","Use leftmost-first match semantics, which reports …","Use leftmost-longest match semantics, which reports …","A knob for controlling the match semantics of a packed …","A packed searcher for quickly finding occurrences of …","Add the given pattern to this set to match.","","","","","","","","","","","Build a searcher from the patterns added to this builder …","Create a packed builder from this configuration. The …","","","","","","","","","","","","","Add the given iterator of patterns to this set to match.","Return the first occurrence of any of the patterns in …","Return the first occurrence of any of the patterns in …","Return an iterator of non-overlapping occurrences of the …","","","","","","","","","","","Returns the approximate total amount of heap used by this …","","","","","","","Set the match semantics for this configuration.","Returns the match kind used by this packed searcher.","Returns the minimum length of a haystack that is required …","Create a new default configuration. A default …","Create a new builder for constructing a multi-pattern …","A convenience function for constructing a searcher from …","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,0,0,2,1,0,2,0,3,3,3,4,5,6,7,3,1,8,2,9,4,5,6,7,3,1,8,2,9,3,3,3,4,3,1,8,2,9,4,3,1,8,2,9,3,1,3,8,3,4,9,1,9,4,4,4,4,5,6,7,3,1,8,8,2,9,4,5,6,7,3,1,8,2,9,10,9,4,4,5,6,7,3,1,8,2,9,5,6,7,9,4,8,4,3,10,4,9,4,3,4,5,6,7,0,9,4,3,3,4,4,4,4,9,4,4,4,4,4,4,3,1,8,2,9,8,10,4,5,6,7,3,1,8,2,9,4,5,6,7,3,1,8,2,9,4,5,6,7,3,1,8,2,9,11,12,12,0,0,0,13,13,0,0,14,13,15,14,16,17,13,15,14,16,17,14,15,13,15,14,16,13,15,14,16,13,15,14,13,14,16,16,16,13,15,14,16,17,13,15,14,16,17,16,13,15,14,16,17,17,15,16,16,15,14,16,17,13,15,14,16,13,15,14,16,17,13,15,14,16,17,13,15,14,16,17],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["bool",15]],["ahocorasickbuilder",3]],[[["bool",15]],["ahocorasickbuilder",3]],[[],["ahocorasickbuilder",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ahocorasick",3]],[[],[["error",3],["result",4],["ahocorasick",3]]],[[["bool",15]],["ahocorasickbuilder",3]],[[],["ahocorasick",3]],[[],["ahocorasickbuilder",3]],[[],["matchkind",4]],[[],["error",3]],[[],["errorkind",4]],[[],["match",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ahocorasickbuilder",3]],[[],["matchkind",4]],[[["usize",15]],["ahocorasickbuilder",3]],[[],["str",15]],[[["bool",15]],["ahocorasickbuilder",3]],[[["asref",8]],[["match",3],["option",4]]],[[],["usize",15]],[[["matchkind",4]],["bool",15]],[[["match",3]],["bool",15]],[[["asref",8]],[["match",3],["option",4]]],[[],["finditer",3]],[[],["findoverlappingiter",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["asref",8]],["bool",15]],[[],["errorkind",4]],[[],["matchkind",4]],[[["matchkind",4]],["ahocorasickbuilder",3]],[[],["usize",15]],[[],["usize",15]],[[["match",3]],["bool",15]],[[],["ahocorasick",3]],[[],["ahocorasickbuilder",3]],[[],["ahocorasick",3]],[[],[["match",3],["option",4]]],[[],[["match",3],["option",4]]],[[],[["result",6],["option",4]]],null,[[],["usize",15]],[[],["usize",15]],[[["bool",15]],["ahocorasickbuilder",3]],[[["bool",15]],["ahocorasickbuilder",3]],[[["str",15]],["string",3]],[[],[["u8",15],["vec",3]]],[[["str",15],["string",3]]],[[["vec",3]]],[[],["usize",15]],[[["read",8]],[["streamfinditer",3],["read",8]]],[[],["result",6]],[[],["result",6]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["asref",8]],["builder",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["searcher",3],["option",4]]],[[],["builder",3]],[[],["matchkind",4]],[[],["config",3]],[[],["builder",3]],[[],["searcher",3]],[[]],[[]],[[]],[[]],[[],["matchkind",4]],[[],["config",3]],[[],["builder",3]],[[["matchkind",4]],["bool",15]],[[],["builder",3]],[[["asref",8]],[["match",3],["option",4]]],[[["usize",15],["asref",8]],[["match",3],["option",4]]],[[],["finditer",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["matchkind",4]],["config",3]],[[],["matchkind",4]],[[],["usize",15]],[[],["config",3]],[[],["builder",3]],[[],[["searcher",3],["option",4]]],[[],[["match",3],["option",4]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"MatchKind"],[4,"ErrorKind"],[3,"AhoCorasickBuilder"],[3,"AhoCorasick"],[3,"FindIter"],[3,"FindOverlappingIter"],[3,"StreamFindIter"],[3,"Error"],[3,"Match"],[8,"StateID"],[13,"StateIDOverflow"],[13,"PremultiplyOverflow"],[4,"MatchKind"],[3,"Builder"],[3,"Config"],[3,"Searcher"],[3,"FindIter"]]},\
"ansi_rgb":{"doc":"Colorful console text using ANSI escape sequences.","t":[8,8,3,3,10,5,5,5,11,11,11,11,5,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,5,5,5,5,11,11,11,11,11,11,5,5,5],"n":["Background","Foreground","WithBackground","WithForeground","bg","black","blue","blue_magenta","borrow","borrow","borrow_mut","borrow_mut","cyan","cyan_blue","fg","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","green","green_cyan","into","into","magenta","magenta_pink","orange","red","try_from","try_from","try_into","try_into","type_id","type_id","white","yellow","yellow_green"],"q":["ansi_rgb","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Adds a background color","Adds a foreground color","Something with a background color","Something with a foreground color","Adds the given background color","Makes black","Makes blue","Makes blue magenta","","","","","Makes cyan","Makes cyan blue","Adds the given foreground color","","","","","","","","","","","","","","","","","","","","","Makes green","Makes green cyan","","","Makes magenta","Makes magenta pink","Makes orange","Makes red","","","","","","","Makes white","Makes yellow","Makes yellow green"],"i":[0,0,0,0,1,0,0,0,2,3,2,3,0,0,4,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,2,3,0,0,2,3,0,0,0,0,2,3,2,3,2,3,0,0,0],"f":[null,null,null,null,[[["rgb8",6]],["withbackground",3]],[[],["rgb8",6]],[[],["rgb8",6]],[[],["rgb8",6]],[[]],[[]],[[]],[[]],[[],["rgb8",6]],[[],["rgb8",6]],[[["rgb8",6]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["rgb8",6]],[[],["rgb8",6]],[[]],[[]],[[],["rgb8",6]],[[],["rgb8",6]],[[],["rgb8",6]],[[],["rgb8",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["rgb8",6]],[[],["rgb8",6]],[[],["rgb8",6]]],"p":[[8,"Background"],[3,"WithBackground"],[3,"WithForeground"],[8,"Foreground"]]},\
"approx":{"doc":"A crate that provides facilities for testing the …","t":[3,8,16,3,8,3,8,10,14,11,11,14,14,14,14,14,14,14,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,10,14,11,11,14,11,11,11,11,11,11,11,11,11,10,14,11,11,14],"n":["AbsDiff","AbsDiffEq","Epsilon","Relative","RelativeEq","Ulps","UlpsEq","abs_diff_eq","abs_diff_eq","abs_diff_ne","abs_diff_ne","abs_diff_ne","assert_abs_diff_eq","assert_abs_diff_ne","assert_relative_eq","assert_relative_ne","assert_ulps_eq","assert_ulps_ne","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","default","default_epsilon","default_max_relative","default_max_ulps","epsilon","epsilon","epsilon","epsilon","epsilon","epsilon","eq","eq","eq","from","from","from","into","into","into","max_relative","max_relative","max_ulps","max_ulps","ne","ne","ne","relative_eq","relative_eq","relative_ne","relative_ne","relative_ne","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ulps_eq","ulps_eq","ulps_ne","ulps_ne","ulps_ne"],"q":["approx","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The requisite parameters for testing for approximate …","Equality that is defined using the absolute difference of …","Used for specifying relative comparisons.","The requisite parameters for testing for approximate …","Equality comparisons between two numbers using both the …","The requisite parameters for testing for approximate …","Equality comparisons between two numbers using both the …","A test for equality that uses the absolute difference to …","Approximate equality of using the absolute difference.","The inverse of [<code>AbsDiffEq::abs_diff_eq</code>].","The inverse of [<code>AbsDiffEq::abs_diff_eq</code>].","Approximate inequality of using the absolute difference.","An assertion that delegates to [<code>abs_diff_eq!</code>], and panics …","An assertion that delegates to [<code>abs_diff_ne!</code>], and panics …","An assertion that delegates to [<code>relative_eq!</code>], and panics …","An assertion that delegates to [<code>relative_ne!</code>], and panics …","An assertion that delegates to [<code>ulps_eq!</code>], and panics …","An assertion that delegates to [<code>ulps_ne!</code>], and panics …","","","","","","","","","","The default tolerance to use when testing values that are …","The default relative tolerance for testing values that …","The default ULPs to tolerate when testing values that are …","Replace the epsilon value with the one specified.","Replace the epsilon value with the one specified.","Replace the epsilon value with the one specified.","The tolerance to use when testing values that are close …","The tolerance to use when testing values that are close …","The tolerance to use when testing values that are close …","Peform the equality comparison","Peform the equality comparison","Peform the equality comparison","","","","","","","Replace the maximum relative value with the one specified.","The relative tolerance for testing values that are …","Replace the max ulps value with the one specified.","The ULPs to tolerate when testing values that are …","Peform the inequality comparison","Peform the inequality comparison","Peform the inequality comparison","A test for equality that uses a relative comparison if …","Approximate equality using both the absolute difference …","The inverse of [<code>RelativeEq::relative_eq</code>].","The inverse of [<code>RelativeEq::relative_eq</code>].","Approximate inequality using both the absolute difference …","","","","","","","","","","A test for equality that uses units in the last place …","Approximate equality using both the absolute difference …","The inverse of [<code>UlpsEq::ulps_eq</code>].","The inverse of [<code>UlpsEq::ulps_eq</code>].","Approximate inequality using both the absolute difference …"],"i":[0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,2,3,4,2,3,4,2,3,4,1,5,6,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,3,3,4,4,2,3,4,5,0,5,5,0,2,3,4,2,3,4,2,3,4,6,0,6,6,0],"f":[null,null,null,null,null,null,null,[[],["bool",15]],null,[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["absdiff",3]],[[],["relative",3]],[[],["ulps",3]],[[]],[[]],[[],["u32",15]],[[],["absdiff",3]],[[],["relative",3]],[[],["ulps",3]],null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["relative",3]],null,[[["u32",15]],["ulps",3]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["bool",15]],[[],["bool",15]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u32",15]],["bool",15]],null,[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],null],"p":[[8,"AbsDiffEq"],[3,"AbsDiff"],[3,"Relative"],[3,"Ulps"],[8,"RelativeEq"],[8,"UlpsEq"]]},\
"arctk":{"doc":"Library core.","tn":["access","args","cast","chem","clone","data","err","fmt_report","fmt_reports","fs","geom","img","map","math","meta","ord","pause","phys","report","reports","sim","tools","util","rate","rate_linker","reaction","reaction_linker","reactor","reactor_linker","Rate","adapt_into_using","bg","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","new","order","rate","rate_m","to_owned","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","RateLinker","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","link","load","order","requires","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Reaction","adapt_into_using","bg","borrow","borrow_mut","clone","clone_into","components","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","from","from_subset","init","into","is_in_subset","new","rate","to_owned","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","ReactionLinker","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","link","load","requires","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Reactor","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deltas","deref","deref_mut","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","new","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","ReactorLinker","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","link","load","requires","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","average","histogram","table","Average","adapt_into_using","add_assign","add_assign","add_assign","ave","bg","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","counts","default","deref","deref_mut","drop","fg","from","from_subset","init","into","is_in_subset","new","to_owned","to_subset","to_subset_unchecked","total","try_convert_into","try_from","try_into","type_id","vzip","Histogram","adapt_into_using","add_assign","bg","binner","borrow","borrow_mut","clone","clone_into","collect","collect_weight","convert_into","convert_unclamped_into","counts","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","new","new_range","save_data","to_owned","to_string","to_subset","to_subset_unchecked","try_collect","try_collect_weight","try_convert_into","try_from","try_into","type_id","vzip","Table","adapt_into_using","add_assign","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","into_inner","is_in_subset","load","new","new_from_array","rows","save_data","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","EnvVar","Error","Format","InvalidShape","LoadFile","MinMax","NetCdf","Parallel","ParseFloat","ParseHex","ParseInt","ReadJson","Text","WriteJson","WritePng","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_subset","init","into","is_in_subset","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","extensions","file","load","redirect","save","csv","json","netcdf","png","wavefront","from_json","from_json_str","File","load","new_from_file","Inst","Load","load","Here","Redirect","There","adapt_into_using","bg","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","load","save_data","serialize","to_owned","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Save","as_json","save","save_data","cast","dom","properties","rt","shape","camera","camera_builder","emitter","emitter_loader","Camera","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","emit","fg","fmt","from","from_subset","init","into","is_in_subset","new","num_pixels","num_samples","num_super_samples","pos","res","ss_power","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","CameraBuilder","adapt_into_using","bg","borrow","borrow_mut","build","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","new","to_owned","to_string","to_subset","to_subset_unchecked","travel","try_convert_into","try_from","try_into","type_id","vzip","Beam","Emitter","Points","Surface","Volume","WeightedPoints","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","emit","fg","fmt","from","from_subset","init","into","is_in_subset","new_beam","new_points","new_surface","new_volume","new_weighted_points","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Beam","EmitterLoader","Points","Surface","Volume","WeightedPoints","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","load","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","grid","grid_builder","surface","surface_linker","surface_linker_loader","tree","tree_settings","Grid","adapt_into_using","bg","borrow","borrow_mut","boundary","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","gen_index","gen_index_voxel","gen_voxel","init","into","is_in_subset","new","num_cells","res","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","voxel_size","voxel_vol","vzip","GridBuilder","adapt_into_using","bg","borrow","borrow_mut","boundary","build","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","new","num_cells","res","to_owned","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Surface","adapt_into_using","attr","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","mesh","new","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","SurfaceLinker","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","link","new","requires","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","SurfaceLinkerLoader","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","from","from_subset","init","into","is_in_subset","load","load","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Branch","Leaf","Tree","adapt_into_using","bg","borrow","borrow_mut","boundary","convert_into","convert_unclamped_into","depth","deref","deref_mut","drop","fg","find_leaf","fmt","from","from_subset","init","into","is_in_subset","new","num_cells","num_leaves","num_tris","scan","to_string","to_subset","to_subset_unchecked","try_convert_into","try_find_leaf","try_from","try_into","type_id","vzip","boundary","boundary","children","tris","TreeSettings","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","max_depth","new","padding","tar_tris","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","collide","emit","trace","transformable","Collide","overlap","Emit","cast","Trace","dist","dist_side","hit","Transformable","transform","hit","orient","ray","scan","side","Hit","adapt_into_using","bg","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","dist","dist_mut","drop","fg","from","from_subset","init","into","is_in_subset","new","side","tag","to_owned","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Orient","adapt_into_using","back","backward_ray","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","down","down_ray","drop","fg","fmt","fmt","forward","forward_ray","from","from_subset","init","into","is_in_subset","left","left_ray","new","new_tar","new_up","pos","pos_mut","right","right_ray","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","up","up_ray","vzip","Ray","adapt_into_using","bg","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","destruct","dir","dir_mut","drop","fg","from","from_subset","init","into","is_in_subset","new","pos","pos_mut","rotate","to_owned","to_subset","to_subset_unchecked","travel","try_convert_into","try_from","try_into","type_id","vzip","Boundary","Scan","Surface","adapt_into_using","bg","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","from","from_subset","init","into","is_in_subset","new_boundary","new_surface","to_owned","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Inside","Outside","Side","adapt_into_using","bg","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","from","from_subset","init","into","is_in_subset","is_inside","new","norm","to_owned","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","cube","mesh","mesh_loader","smooth_triangle","triangle","Cube","adapt_into_using","area","bg","borrow","borrow_mut","centre","clone","clone_into","contains","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","dist","dist_side","drop","expand","fg","fmt","fmt","from","from_subset","half_widths","hit","init","into","is_in_subset","load","maxs","mins","mins_maxs","new","new_centred","new_shrink","overlap","rand_pos","shrink","to_owned","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","uniform_pos","vol","vzip","widths","Mesh","adapt_into_using","area","bg","borrow","borrow_mut","boundary","cast","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","dist","dist_side","drop","fg","fmt","from","from_subset","hit","init","into","into_tris","is_in_subset","load","new","overlap","to_owned","to_string","to_subset","to_subset_unchecked","transform","tris","try_convert_into","try_from","try_into","type_id","vzip","MeshLoader","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","from","from_subset","init","into","is_in_subset","load","load","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","SmoothTriangle","adapt_into_using","bg","borrow","borrow_mut","cast","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","dist","dist_side","drop","fg","from","from_subset","hit","init","into","is_in_subset","new","new_from_verts","norms","overlap","to_owned","to_subset","to_subset_unchecked","transform","tri","try_convert_into","try_from","try_into","type_id","vzip","Triangle","adapt_into_using","area","bg","borrow","borrow_mut","cast","centre","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","dist","dist_side","drop","fg","from","from_subset","hit","init","intersection_coors","into","is_in_subset","new","overlap","perimeter","plane_norm","side_lengths","to_owned","to_subset","to_subset_unchecked","transform","try_convert_into","try_from","try_into","type_id","verts","vzip","aspect_ratio","colour","gradient","gradient_builder","image","AspectRatio","Classic","Custom","Golden","IPhone7","IPhoneXS","Silver","Square","Standard","Widescreen","adapt_into_using","bg","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","ratio","resolution","to_owned","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vt_res","vzip","Colour","Gradient","GradientBuilder","adapt_into_using","bg","borrow","borrow_mut","build","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Image","adapt_into_using","add_assign","bg","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","from","from_subset","init","into","is_in_subset","new","new_blank","pixels","pixels_mut","save_data","to_owned","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","alias","func","rng","slice","trans3_builder","Dir2","Dir3","Dir4","Mat2","Mat2I","Mat3","Mat3I","Mat4","Mat4I","Pos2","Pos2I","Pos3","Pos3I","Pos4","Pos4I","Rot2","Rot3","Trans2","Trans3","Vec2","Vec2I","Vec3","Vec3I","Vec4","Vec4I","formula","formula_builder","Bifurcation","Constant","ConstantSpline","Formula","Line","LinearSpline","QuadraticSpline","adapt_into_using","bg","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","new_constant_spline","new_linear_spline","new_linear_spline_auto","new_quadratic_spline","to_owned","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","y","c","c","grads","grads","m","over","quads","t","under","xs","xs","xs","ys","ys","ys","Bifurcation","Constant","ConstantSpline","FormulaBuilder","Line","LinearSpline","LinearSplineAuto","QuadraticSpline","adapt_into_using","bg","borrow","borrow_mut","build","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","distribution","probability","probability_builder","rand_circle_point","rand_hemisphere_point","rand_isotropic_dir","rand_sphere_point","sample_gaussian","sample_henyey_greenstein","sample_normal","ConstantSpline","Gaussian","Linear","LinearSpline","Point","Points","Probability","Uniform","adapt_into_using","bg","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","new_constant_spline","new_gaussian","new_linear","new_linear_spline","new_point","new_points","new_uniform","sample","to_owned","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","area","areas","c","cdf","cdf","cs","grad","grads","intercept","intercepts","max","min","mu","offset","offsets","sigma","ConstantSpline","Gaussian","Linear","LinearSpline","Point","Points","ProbabilityBuilder","Uniform","adapt_into_using","bg","borrow","borrow_mut","build","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","is_ascending","is_descending","kinds","max","min","mode","Trans3Builder","adapt_into_using","bg","borrow","borrow_mut","build","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","from","from_subset","init","into","is_in_subset","load","to_owned","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","access","args","map","pause","array_linker","build","link","list","map","name","register","set","ArrayLinker","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_empty","is_in_subset","len","link","load","requires","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Build","Inst","build","Inst","Link","link","requires","az","cols","dim","greek","ALPHA","Alpha","BETA","Beta","GAMMA","Gamma","Greek","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","from","from_subset","init","into","is_in_subset","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","rgb","BLUE","Blue","GREEN","Green","RED","Red","Rgb","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","from","from_subset","init","into","is_in_subset","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","cartesian","polar","spherical","Cartesian","X","X","Y","Y","Z","Z","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","from","from_subset","init","into","is_in_subset","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Polar","Rho","Theta","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","from","from_subset","init","into","is_in_subset","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","PHI","Phi","RHO","Rho","Spherical","THETA","Theta","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","from","from_subset","init","into","is_in_subset","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Map","Name","adapt_into_using","as_string","bg","borrow","borrow_mut","clone","clone_into","cmp","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","eq","equivalent","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","ne","partial_cmp","serialize","to_owned","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Register","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_empty","is_in_subset","len","names_list","new","set","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Set","adapt_into_using","bg","borrow","borrow_mut","build","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_pairs","from_subset","get","get_mut","init","into","into_iter","is_empty","is_in_subset","len","link","load","load","map","names_list","new","requires","serialize","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","values","vzip","crossing","light","light_linker","light_linker_builder","light_linker_builder_loader","local","material","material_builder","photon","Crossing","adapt_into_using","bg","borrow","borrow_mut","calc_ref_dir","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","from","from_subset","init","into","is_in_subset","new","ref_dir","ref_prob","to_subset","to_subset_unchecked","trans_dir","trans_prob","try_convert_into","try_from","try_into","type_id","vzip","Light","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","emit","fg","fmt","from","from_subset","init","into","is_in_subset","mat","new","power","spec","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","LightLinker","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","link","new","requires","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","LightLinkerBuilder","adapt_into_using","bg","borrow","borrow_mut","build","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","new","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","LightLinkerBuilderLoader","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","load","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Local","abs_coeff","adapt_into_using","albedo","asym","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","from","from_subset","init","inter_coeff","into","is_in_subset","new","ref_index","scat_coeff","shift_coeff","shift_prob","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Material","abs_coeff","adapt_into_using","asym_fact","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","new","ref_index","sample_environment","scat_coeff","shift_coeff","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","MaterialBuilder","adapt_into_using","bg","borrow","borrow_mut","build","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Photon","adapt_into_using","bg","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","from","from_subset","init","into","is_in_subset","kill","new","power","ray","ray_mut","to_owned","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","wavelength","wavelength_mut","weight","weight_mut","babbage","cartographer","diffuse","flask","mcrt","reactor","render","operation","operation_builder","operation_builder_loader","parameters","Add","Clamp","Div","Fill","Info","Mult","Norm","Operation","PiecewiseDiv","PiecewiseMult","Point","Remove","Sample","Stripe","Sub","Sum","Unit","Zero","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","from","from_subset","init","into","is_in_subset","run","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","maxs","mins","res","Add","Clamp","Div","Fill","Info","Mult","Norm","OperationBuilder","PiecewiseDiv","PiecewiseMult","Point","Remove","Sample","Stripe","Sub","Sum","Unit","Zero","adapt_into_using","bg","borrow","borrow_mut","build","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","from","from_subset","init","into","is_in_subset","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","maxs","mins","res","Add","Clamp","Div","Fill","Info","Mult","Norm","OperationBuilderLoader","PiecewiseDiv","PiecewiseMult","Point","Remove","Sample","Stripe","Sub","Sum","Unit","Zero","adapt_into_using","bg","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","load","to_owned","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","maxs","mins","res","Parameters","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","from","from_subset","init","into","is_in_subset","load","ops","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","attribute","attribute_linker","caster","engine","event","input","output","parameters","parameters_builder","parameters_builder_loader","run","settings","super_sample","Attribute","Interface","Mirror","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","AttributeLinker","Interface","Mirror","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","link","load","requires","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Caster","Direction","Radiant","Soft","Target","adapt_into_using","bg","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","gen_ray","init","into","is_in_subset","load","num_casts","to_owned","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","engine","Event","Grid","Surface","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","from","from_subset","init","into","is_in_subset","new","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Input","adapt_into_using","attrs","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","grid","init","into","is_in_subset","mat_reg","new","sett","to_string","to_subset","to_subset_unchecked","tree","try_convert_into","try_from","try_into","type_id","vzip","Output","adapt_into_using","add_assign","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","mat_reg","mats","new","save_data","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","void","vzip","Parameters","adapt_into_using","attrs","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","grid","init","into","is_in_subset","new","sett","surfs","to_string","to_subset","to_subset_unchecked","tree","try_convert_into","try_from","try_into","type_id","vzip","ParametersBuilder","adapt_into_using","bg","borrow","borrow_mut","build","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","new","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","ParametersBuilderLoader","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","from","from_subset","init","into","is_in_subset","load","load","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","multi_thread","single_thread","Settings","adapt_into_using","bg","block_size","borrow","borrow_mut","bump_dist","caster","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","loop_limit","new","super_sampling","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Off","Random","SuperSample","Uniform","adapt_into_using","bg","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","num_samples","sample","to_owned","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","input","output","parameters","parameters_builder","parameters_builder_loader","run","settings","stencil","Input","adapt_into_using","bg","borrow","borrow_mut","coeffs","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","grid","init","into","is_in_subset","new","sett","sources","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Output","adapt_into_using","add_assign","bg","borrow","borrow_mut","boundary","cell_vol","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","new","save_data","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Parameters","adapt_into_using","bg","borrow","borrow_mut","coeffs","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","grid","init","init","into","is_in_subset","new","sett","sources","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","ParametersBuilder","adapt_into_using","bg","borrow","borrow_mut","build","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","new","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","ParametersBuilderLoader","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","from","from_subset","init","into","is_in_subset","load","load","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","evolve","multi_thread","Settings","adapt_into_using","bg","block_size","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","dumps","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","new","quality","time","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","grad","reflect","Grad","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","new","rate","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Reflect","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","new","rate","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","input","parameters","parameters_loader","run","settings","Input","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","new","reactor","sett","sources","specs","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Parameters","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","init","into","is_in_subset","new","reactor","sett","sources","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","ParametersLoader","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","from","from_subset","init","into","is_in_subset","load","load","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","run","Settings","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","dumps","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","min_time","new","quality","time","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","attribute","attribute_linker","attribute_linker_linker","attribute_linker_linker_linker","engine","engine_builder","engine_builder_loader","engines","event","frame","frame_builder","input","output","parameters","parameters_builder","parameters_builder_loader","peel_off","run","scatter","settings","surface","travel","Attribute","Imager","Interface","Mirror","Spectrometer","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","AttributeLinker","Imager","Interface","Mirror","Spectrometer","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","link","requires","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","AttributeLinkerLinker","Imager","Interface","Mirror","Spectrometer","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","link","requires","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","AttributeLinkerLinkerLinker","Imager","Interface","Mirror","Spectrometer","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","link","load","requires","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Engine","Fluorescence","Photo","Raman","Standard","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","run","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","EngineBuilder","Fluorescence","Photo","Raman","Standard","adapt_into_using","bg","borrow","borrow_mut","build","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","EngineBuilderLoader","Fluorescence","Photo","Raman","Standard","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","load","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","fluorescence","photo","raman","standard","fluorescence","photo","wavelength_to_rbg","raman","standard","Event","Scattering","Surface","Voxel","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","from","from_subset","init","into","is_in_subset","new","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Frame","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","from","from_subset","init","into","is_in_subset","new","pos","res","to_subset","to_subset_unchecked","transform","try_convert_into","try_from","try_into","type_id","vzip","FrameBuilder","adapt_into_using","bg","borrow","borrow_mut","build","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","from","from_subset","init","into","is_in_subset","load","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Input","adapt_into_using","attrs","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","grid","init","into","is_in_subset","light","mats","new","sett","spec_reg","to_string","to_subset","to_subset_unchecked","tree","try_convert_into","try_from","try_into","type_id","vzip","Output","absorptions","adapt_into_using","add_assign","bg","borrow","borrow_mut","boundary","cell_vol","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","drop","emission","energy","fg","fmt","from","from_subset","img_reg","imgs","init","into","is_in_subset","new","save_data","shifts","spec_reg","specs","to_owned","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Parameters","adapt_into_using","attrs","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","engine","fg","fmt","from","from_subset","grid","init","into","is_in_subset","light","mats","new","sett","surfs","to_string","to_subset","to_subset_unchecked","tree","try_convert_into","try_from","try_into","type_id","vzip","ParametersBuilder","adapt_into_using","bg","borrow","borrow_mut","build","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","new","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","ParametersBuilderLoader","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","from","from_subset","init","into","is_in_subset","load","load","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","peel_off","multi_thread","scatter","shift_scatter","Settings","adapt_into_using","bg","block_size","borrow","borrow_mut","bump_dist","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","loop_limit","min_weight","new","num_phot","roulette_barrels","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","surface","travel","input","parameters","parameters_builder","parameters_builder_loader","run","settings","stencil","Input","adapt_into_using","bg","borrow","borrow_mut","coeffs","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","grid","init","into","is_in_subset","multipliers","new","reactor","sett","sources","specs","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Parameters","adapt_into_using","bg","borrow","borrow_mut","coeffs_values_sources","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","grid","init","into","is_in_subset","multipliers","new","reactor","sett","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","ParametersBuilder","adapt_into_using","bg","borrow","borrow_mut","build","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","new","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","ParametersBuilderLoader","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","from","from_subset","init","into","is_in_subset","load","load","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","evolve","multi_thread","Settings","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","d_block_size","d_quality","deref","deref_mut","deserialize","drop","dumps","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","min_time","new","r_block_size","r_quality","time","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","grad","reflect","Grad","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","new","rate","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Reflect","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","new","rate","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","attribute","attribute_linker","engine","engine_builder","engines","input","lighting","output","parameters","parameters_builder","parameters_builder_loader","run","settings","shader","shader_linker","tracer","Attribute","Luminous","Mirror","Opaque","Refractive","Switchable","Transparent","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","AttributeLinker","Luminous","Mirror","Opaque","Refractive","Switchable","Transparent","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","link","load","requires","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Engine","Antler","Cross","EngineBuilder","adapt_into_using","bg","borrow","borrow_mut","build","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","antler","cross","antler","cross","Input","adapt_into_using","attrs","bg","borrow","borrow_mut","cam","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","grads","img_id","init","into","is_in_subset","new","sett","shader","to_string","to_subset","to_subset_unchecked","tree","try_convert_into","try_from","try_into","type_id","vzip","light","occlusion","shadow","Output","adapt_into_using","add_assign","bg","borrow","borrow_mut","colour","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","light","new","save_data","shadow","time","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Parameters","adapt_into_using","attrs","bg","borrow","borrow_mut","cam","convert_into","convert_unclamped_into","deref","deref_mut","drop","engine","fg","fmt","from","from_subset","grads","init","into","is_in_subset","new","sett","shader","surfs","to_string","to_subset","to_subset_unchecked","tree","try_convert_into","try_from","try_into","type_id","vzip","ParametersBuilder","adapt_into_using","bg","borrow","borrow_mut","build","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","new","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","ParametersBuilderLoader","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","from","from_subset","init","into","is_in_subset","load","load","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","multi_thread","single_thread","Settings","adapt_into_using","bg","block_size","borrow","borrow_mut","bump_dist","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","load","loop_limit","min_weight","new","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Shader","adapt_into_using","ambient_shadow_samples","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","data_grad","deref","deref_mut","drop","fall_off","fg","fmt","from","from_subset","init","into","is_in_subset","light","new","occ_dist","shadow","sky_grad","soft_shadow_samples","spec_pow","sun_pos","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","ShaderLinker","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","link","load","requires","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Tracer","adapt_into_using","bg","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","from","from_subset","init","into","is_in_subset","new","ray","ray_mut","to_owned","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","weight","weight_mut","binner","index","progress_bar","range","silent_progress_bar","valid","Binner","adapt_into_using","bg","bin","bin_width","bins","borrow","borrow_mut","clone","clone_into","convert_into","convert_unclamped_into","deref","deref_mut","drop","eq","fg","fmt","fmt","from","from_subset","init","into","is_in_subset","ne","new","range","to_owned","to_string","to_subset","to_subset_unchecked","try_bin","try_convert_into","try_from","try_into","type_id","vzip","linear_to_three_dim","two_dim_to_linear","ProgressBar","adapt_into_using","bg","block","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","finish_with_message","from","from_subset","init","into","is_done","is_in_subset","new","tick","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Range","adapt_into_using","bg","borrow","borrow_mut","clone","clone_into","contains","convert_into","convert_unclamped_into","deref","deref_mut","deserialize","drop","eq","fg","fmt","fmt","from","from_subset","init","intersect","into","is_in_subset","load","max","min","ne","new","new_infinite","overlap","to_owned","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","width","SilentProgressBar","adapt_into_using","bg","block","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","from","from_subset","init","into","is_done","is_in_subset","new","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","Valid","check","fmt","install","analyze","banner","data_cube","data_square","data_tesseract","gradient","report","term","Analyze","Inst","display","section","sub_section","sub_sub_section","title","DataCube","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","new","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","DataSquare","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","new","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","DataTesseract","adapt_into_using","bg","borrow","borrow_mut","convert_into","convert_unclamped_into","deref","deref_mut","drop","fg","fmt","from","from_subset","init","into","is_in_subset","new","to_string","to_subset","to_subset_unchecked","try_convert_into","try_from","try_into","type_id","vzip","to_string","width","dir","exec","io_dirs","root","name"],"q":["arctk","","","","","","","","","","","","","","","","","","","","","","","arctk::chem","","","","","","arctk::chem::rate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::chem::rate_linker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::chem::reaction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::chem::reaction_linker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::chem::reactor","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::chem::reactor_linker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::data","","","arctk::data::average","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::data::histogram","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::data::table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::err","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::fs","","","","","arctk::fs::extensions","","","","","arctk::fs::extensions::json","","arctk::fs::file","","","arctk::fs::load","","","arctk::fs::redirect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::fs::save","","","","arctk::geom","","","","","arctk::geom::cast","","","","arctk::geom::cast::camera","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::cast::camera_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::cast::emitter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::cast::emitter_loader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::dom","","","","","","","arctk::geom::dom::grid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::dom::grid_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::dom::surface","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::dom::surface_linker","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::dom::surface_linker_loader","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::dom::tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::dom::tree::Tree","","","","arctk::geom::dom::tree_settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::properties","","","","arctk::geom::properties::collide","","arctk::geom::properties::emit","","arctk::geom::properties::trace","","","","arctk::geom::properties::transformable","","arctk::geom::rt","","","","","arctk::geom::rt::hit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::rt::orient","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::rt::ray","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::rt::scan","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::rt::side","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::shape","","","","","arctk::geom::shape::cube","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::shape::mesh","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::shape::mesh_loader","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::shape::smooth_triangle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::shape::triangle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::img","","","","","arctk::img::aspect_ratio","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::img::colour","arctk::img::gradient","arctk::img::gradient_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::img::image","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::math","","","","","arctk::math::alias","","","","","","","","","","","","","","","","","","","","","","","","","arctk::math::func","","arctk::math::func::formula","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::math::func::formula::Formula","","","","","","","","","","","","","","","arctk::math::func::formula_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::math::rng","","","arctk::math::rng::distribution","","","","","","","arctk::math::rng::probability","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::math::rng::probability::Probability","","","","","","","","","","","","","","","","arctk::math::rng::probability_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::math::slice","","","","","","arctk::math::trans3_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::meta","","","","arctk::ord","","","","","","","","arctk::ord::array_linker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::ord::build","","","arctk::ord::link","","","","arctk::ord::list","","","arctk::ord::list::az","arctk::ord::list::az::greek","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::ord::list::cols","arctk::ord::list::cols::rgb","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::ord::list::dim","","","arctk::ord::list::dim::cartesian","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::ord::list::dim::polar","","","","","","","","","","","","","","","","","","","","","","","","","arctk::ord::list::dim::spherical","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::ord::map","arctk::ord::name","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::ord::register","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::ord::set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::phys","","","","","","","","","arctk::phys::crossing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::phys::light","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::phys::light_linker","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::phys::light_linker_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::phys::light_linker_builder_loader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::phys::local","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::phys::material","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::phys::material_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::phys::photon","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim","","","","","","","arctk::sim::babbage","","","","arctk::sim::babbage::operation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::babbage::operation::Operation","","","arctk::sim::babbage::operation_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::babbage::operation_builder::OperationBuilder","","","arctk::sim::babbage::operation_builder_loader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::babbage::operation_builder_loader::OperationBuilderLoader","","","arctk::sim::babbage::parameters","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer","","","","","","","","","","","","","arctk::sim::cartographer::attribute","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::attribute_linker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::caster","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::engine","arctk::sim::cartographer::event","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::output","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::parameters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::parameters_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::parameters_builder_loader","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::run","","arctk::sim::cartographer::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::super_sample","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::diffuse","","","","","","","","arctk::sim::diffuse::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::diffuse::output","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::diffuse::parameters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::diffuse::parameters_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::diffuse::parameters_builder_loader","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::diffuse::run","","arctk::sim::diffuse::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::diffuse::stencil","","arctk::sim::diffuse::stencil::grad","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::diffuse::stencil::reflect","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::flask","","","","","arctk::sim::flask::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::flask::parameters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::flask::parameters_loader","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::flask::run","arctk::sim::flask::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::attribute","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::attribute_linker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::attribute_linker_linker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::attribute_linker_linker_linker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::engine","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::engine_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::engine_builder_loader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::engines","","","","arctk::sim::mcrt::engines::fluorescence","arctk::sim::mcrt::engines::photo","","arctk::sim::mcrt::engines::raman","arctk::sim::mcrt::engines::standard","arctk::sim::mcrt::event","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::frame","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::frame_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::output","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::parameters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::parameters_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::parameters_builder_loader","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::peel_off","arctk::sim::mcrt::run","arctk::sim::mcrt::scatter","","arctk::sim::mcrt::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::surface","arctk::sim::mcrt::travel","arctk::sim::reactor","","","","","","","arctk::sim::reactor::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::reactor::parameters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::reactor::parameters_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::reactor::parameters_builder_loader","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::reactor::run","","arctk::sim::reactor::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::reactor::stencil","","arctk::sim::reactor::stencil::grad","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::reactor::stencil::reflect","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render","","","","","","","","","","","","","","","","arctk::sim::render::attribute","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::attribute_linker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::engine","arctk::sim::render::engine_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::engines","","arctk::sim::render::engines::antler","arctk::sim::render::engines::cross","arctk::sim::render::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::lighting","","","arctk::sim::render::output","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::parameters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::parameters_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::parameters_builder_loader","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::run","","arctk::sim::render::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::shader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::shader_linker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::tracer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::tools","","","","","","arctk::tools::binner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::tools::index","","arctk::tools::progress_bar","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::tools::range","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::tools::silent_progress_bar","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::tools::valid","","arctk::util","","arctk::util::fmt","","","","","","","","arctk::util::fmt::analyze","","","arctk::util::fmt::banner","","","","arctk::util::fmt::data_cube","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::util::fmt::data_square","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::util::fmt::data_tesseract","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::util::fmt::gradient","arctk::util::fmt::term","arctk::util::install","","arctk::util::install::dir","","arctk::util::install::exec"],"d":["Succinctly create a reference method for the given …","Import command line arguments as a requested type.","","Chemical kinetics module.","Succinctly create a clone method for the given variable.","Data reduction.","Error handling.","Report an object and either its associated name, or a …","Report an iterable object and either its associated name, …","File IO.","Three-dimensional Euclidean geometry.","Image tools module.","Concisely construct a hashmap.","Mathematics.","Meta-programming.","Ordering module.","Pause the thread for the given number of milliseconds.","Physics module.","Report an object and either its associated name, or a …","Report an iterable object and either its associated name, …","Binary specific structures.","Useful tools.","Utilities.","Rate structure.","Rate building structure.","Reaction structure.","Reaction linker structure.","Reactor structure.","Reactor linking structure.","Rate of reaction.","","","","","","","","","","","","","","","","","","","","Construct a new instance.","Get the total order of the reaction.","Calculate the current rate given the current …","Calculate the current rate given the current …","","","","","","","","","","Rate of reaction builder.","","","","","","","","","","","","","","","","","","","","","Get the total order of the reaction.","","","","","","","","","","Reaction.","","","","","","","Separate into components.","","","","","","","","","","","","Construct a new instance.","Determine the rate of change for each chemical within the …","","","","","","","","","Reaction linker.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Complete reactor structure.","","","","","","","Calculate the overall rate of change given the current …","","","","","","","","","","","","Construct a new instance.","","","","","","","","","Reactor linking structure.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Rolling average implementation.","Histogram implementation.","Data table implementation.","Rolling average value recording.","","","","","Calculate the average value.","","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","","Static range, constant bin width, Histogram.","","","","","","","","","Increment the bin corresponding to x by unity.","Increment the bin corresponding to x by a given weight.","","","","","","","","","","","","","","Construct a new instance.","Construct a new instance using a range.","","","","","","Increment the bin corresponding to x by unity if x is …","Increment the bin corresponding to x by unity if x is …","","","","","","Table of row data.","","","","","","","","","","","","","","","","","Deconstruct the table and yield the inner rows vector.","","","Construct a new instance.","Construct a new instance from a two-dimensional array.","","","","","","","","","","","Missing environment variable error.","Error enumeration.","Formatting error.","Shape error.","File loading error.","Min/max error.","NetCDF io error.","Parallelisation poison.","Float parsing error.","Hexadecimal parsing error.","Integer parsing error.","Json reading error.","Description error.","Json writing error.","Png writing error.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","File extension loaders.","Load from file trait.","Build trait.","File re-direction implementation.","Save trait.","Commer-Separated-Variable file handling.","Json loading.","NetCDF file handling.","Png writing.","Wavefront file handling.","Deserialise the type in json format.","Deserialise the type in json format.","Types implementing this trait can be loaded from a file.","Deserialize the type from a given file.","Load an instance of this type from a given path.","End type to be built.","Types implementing this trait can be built into another …","Build the instance type.","Direct value.","Possible file redirection structure.","Path to file.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Types implementing this trait can be saved to file.","Serialise the type in json format.","Report the saving of a file (if it is a filepath) and …","Serialise the type to a given file","Ray-casting module.","Domain module.","Properties module.","Ray-tracing module.","Three dimensional Euclidean shapes.","Camera structure.","Camera builder structure.","Optical material.","Optical material.","Tracer emission structure.","","","","","","","","","","Emit a ray for the given pixel and super-sample.","","","","","","","","Construct a new instance.","Calculate the total number of samples.","Calculate the total number of samples.","Calculate the total number of super samples per pixel.","Reference the camera’s position.","","","","","","","","","","","Loadable camera structure.","","","","","","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","Move the camera.","","","","","","Single beam.","Ray emission structure.","Points.","Surface mesh.","Volume map.","Weighted points.","","","","","","","","","","Emit a new ray.","","","","","","","","Construct a new beam instance.","Construct a new points instance.","Construct a new surface instance.","Construct a new volume instance.","Construct a new points instance.","","","","","","","","","Single beam.","Ray emission structure.","Point list.","Surface mesh.","Volume map.","Weighted point list.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Regular Cartesian-grid cell scheme.","Regular-Cartesian grid builder.","Optical surface structure.","Surface linking structure.","Surface linker loading structure.","Adaptive tree cell scheme.","Adaptive tree construction settings.","Regular Cartesian-grid structure.","","","","","","","","","","","","","","","If the given position is contained within the grid, …","If the given position is contained within the grid, …","Generate the voxel for the given index.","","","","Construct a new instance.","Determine the total number of cells.","","","","","","","","","","Calculate the voxel volume.","","Grid builder.","","","","","","","","","","","","","","","","","","","","","","","","Construct a new instance.","Determine the total number of cells.","","","","","","","","","","","Optical surface.","","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","Surface with named attribute.","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","","Optical surface.","","","","","","","","","","","","","","","","","","","","","","","","","","","Branching cell.","Terminal populated cell.","Tree cell enumeration.","","","","","Reference the cell’s boundary.","","","Determine the maximum depth from this cell to a terminal …","","","","","Determine the terminal leaf cell containing the given …","","","","","","","Construct a new instance.","Determine the total number of cells used by this cell. …","Determine the number leaf of cells contained used by this …","Determine the number of triangle collision references …","Determine what a given Ray would observe. The maximum …","","","","","If a given position is contained within the cell to being …","","","","","Boundary.","Boundary.","Children.","Intersecting triangles and their corresponding mesh index.","Tree construction settings.","","","","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","","","Collide trait.","Emit trait.","Trace trait.","Transformable trait.","Collide trait implementation. Types implementing this …","Check for an overlapping collision.","Emit trait implementation. Types implementing this trait …","Cast a new ray.","Trace trait implementation. Types implementing this trait …","Distance to the surface along the ray’s line of travel.","Distance to the surface along the ray’s line of travel …","Determine if a ray hit occurs.","Types implementing this trait may be transformed.","Apply the given transformation.","Hit implementation.","Orientation implementation.","Ray implementation.","Hit-scan result enumeration.","Hit side enumeration.","Hit collision information.","","","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","","","Orientation structure.","","Reference the backward direction.","Create a backward ray.","","","","","","","","Reference the downward direction.","Create a downward ray.","","","","","","Create a forward ray.","","","","","","Reference the left direction.","Create a left ray.","Construct a new instance.","Construct a new instance.","Construct with an up-direction.","","","","Create a right ray.","","","","","","","","","Create a upward ray.","","Ray structure.","","","","","","","","","","","Destruct self into components.","","","","","","","","","","Construct a new instance.","","","Rotate the photon with a given pitch and subsequent roll …","","","","Move along the direction of travel a given distance.","","","","","","Boundary collision.","Hit-scan result enumeration.","Surface collision.","","","","","","","","","","","","","","","","","","Construct a new cell boundary detection instance.","Construct a new surface detection instance.","","","","","","","","","Inside of surface hit. d.dot(n) > 0.0","Outside of surface hit. d.dot(n) < 0.0","Side of a surface hit.","","","","","","","","","","","","","","","","","","Check if the side is an inside.","Construct a new instance.","Reference the surface-normal vector. This points away …","","","","","","","","","Axis-aligned-bounding-box implementation.","Smooth triangle-mesh implementation.","Mesh loader.","Smooth triangle implementation.","Flat triangle implementation.","Axis-aligned bounding box geometry. Used for spatial …","","Calculate the surface area.","","","","Calculate the centre position.","","","Determine if the given point if contained.","","","","","","","","","Expand the aabb by a fraction of its lengths, maintaining …","","","","","","Calculate the half-widths.","","","","","","","","Get mins and maxs together.","Construct a new instance.","Construct a new axis-aligned bounding box centred on a …","Initialise the boundary encompassing all of the mesh …","","Generate a random position within the cube’s volume.","Shrink the aabb by a fraction of its lengths, maintaining …","","","","","","","","","Generate a uniformly indexed position within the cube’s …","Calculate the volume.","","Calculate the widths.","Mesh geometry.","","","","","","","","","","","","","","","","","","","","","","","","Destruct the instance and retrieve the list of triangles.","","","Construct a new instance.","","","","","","","","","","","","","Loadable triangle mesh conglomerate structure.","","","","","","","","","","","","","","","","","","","","","","","","","","","Triangle geometry with normal interpolation.","","","","","","","","","","","","","","","","","","","","","","Construct a new instance.","Construct a new instance from vertices.","","","","","","","","","","","","","Triangle.","","Calculate the surface area.","","","","","Centre point.","","","","","","","","","","","","","","","Determine the intersection distance along a <code>Ray</code>’s …","","","Construct a new instance.","","Calculate the perimeter length.","","Calculate the side lengths.","","","","","","","","","","","Formula implementation.","Colour alias.","Gradient alias.","Gradient builder implementation.","Image alias.","Aspect-ratio enumeration.","Classic photographic film. 3:2.","Custom. (w x h)","Golden ratio. ((1+sqrt(5))/2):1","IPhone 7. (750 x 1334)","IPhone XS. (1125 x 2436)","Silver ratio. (1+sqrt(2)):1","Square. 1:1.","Standard. 16:9","Widescreen. 43:18","","","","","","","","","","","","","","","","","","","","","","Get the pixel ratios.","Determine a resolution for the target number of pixels. …","","","","","","","","","Calculate the vertical resolution for a given horizontal …","","Colour alias.","Colour gradient alias.","Loadable colour gradient structure.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Image builder.","","","","","","","","","","","","","","","","","","","Construct a new instance.","Construct a new blank instance.","","","","","","","","","","","","Aliases.","Mathematical function module.","Random-Number-Generation module.","Ordering functions.","Transform form implementation.","Normalised two-dimensional vector alias.","Normalised three-dimensional vector alias.","Normalised four-dimensional vector alias.","Two-by-two dimensional real-number matrix alias.","Two-by-two dimensional discrete-number matrix alias.","Three-by-three dimensional real-number matrix alias.","Three-by-three dimensional discrete-number matrix alias.","Four-by-four dimensional real-number matrix alias.","Four-by-four dimensional discrete-number matrix alias.","Two-dimensional real-number position alias.","Two-dimensional discrete-number position alias.","Three-dimensional real-number position alias.","Three-dimensional discrete-number position alias.","Four-dimensional real-number position alias.","Four-dimensional discrete-number position alias.","Two-dimensional rotation alias.","Three-dimensional rotation alias.","Two-dimensional transformation alias.","Three-dimensional transformation alias.","Two-dimensional real-number vector alias.","Two-dimensional discrete-number vector alias.","Three-dimensional real-number vector alias.","Three-dimensional discrete-number vector alias.","Four-dimensional real-number vector alias.","Four-dimensional discrete-number vector alias.","Formula implementation.","Formula form implementation.","Bifurcation formula. = if x < t { under } else { over }.","Constant value. = c","Constant value spline.","Mathematical formulae accepting a single scalar argument.","Line formula. = mx + c","Linear spline.","Quadratic spline.","","","","","","","","","","","","","","","","","","","","Construct a constant spline instance.","Construct a linear spline instance.","Construct a linear spline instance.","Construct a quadratic spline instance.","","","","","","","","","","Determine the corresponding output value for the given …","Constant.","Offset.","Gradient between points.","Gradient between points.","Gradient.","Over value.","Second order term between points.","Threshold value.","Under value.","X change points.","X change points.","X change points.","Y values.","Y values.","Y values.","Bifurcation formula. = x < y ? a : b.","Constant value. = c","Constant value spline.","Mathematical formulae accepting a single scalar argument.","Line formula. = (x * m) + c","Linear spline between points.","Connected linear spline between points.","Quadratic spline between points.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Distribution functions.","Probability distribution implementation.","Probability builder.","Sample points within a circle using the golden ratio.","Sample points on a hemisphere’s surface using the …","Create a random unit vector.","Sample points on a sphere’s surface using the golden …","Sample a gaussian distribution.","Sample the Henyey-Greenstein phase function with a given …","Sample the normal distribution.","Constant spline.","Gaussian distribution.","Linear.","Linear spline.","Point.","Points.","Probability distribution formulae.","Uniform range.","","","","","","","","","","","","","","","","","","","Construct a new constant spline instance.","Construct a new gaussian instance.","Construct a new linear instance.","Construct a new linear spline instance.","Construct a new point instance.","Construct a new points instance.","Construct a new uniform instance.","Sample a number from the described distribution.","","","","","","","","","","Area beneath line in range.","Area beneath line in each range.","Constant value.","Cumulative distribution function.","Cumulative distribution function.","Possible values.","Gradient.","Gradients.","Y-intercept.","Y-intercepts.","Maximum value.","Minimum value.","Average value.","Integration constant offset.","Integration constant offsets.","Variance.","Constant spline.","Gaussian distribution.","Linear function: xs, ps.","Linear spline.","Point.","Points.","Probability distribution builders.","Uniform range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Determine if the list is sorted in ascending order.","Determine if the list is sorted in descending order.","Get the number of kinds within a slice.","Determine the maximum value within a list.","Determine the minimum value within a list.","Get the mode of a slice.","Loadable transform structure.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Access macro.","Command line argument macro.","Map building macro.","Pause macro.","Array linker structure.","Build trait.","Setup trait.","Enumerated lists.","Map alias.","Name type.","Register structure.","Data set.","Array linking structure.","","","","","","","","","","","","","","","","","","Determine if the wrapped vec is unoccupied.","","Get the length of the wrapped vec.","Link the instance type.","","Get a list of all required resource keys.","","","","","","","","","Types implementing this trait can be built into another …","End type to be built.","Build the instance type.","Type to be built.","Types implementing this trait can be linked to a set to …","Link the instance type.","Get a list of all required resource keys.","Alphabets.","Colour systems.","Physical dimensions.","Greek alphabet.","Greek Alpha convenience indexing constant.","First letter.","Greek Beta convenience indexing constant.","Second letter.","Greek Gamma convenience indexing constant.","Third letter.","Greek letters.","","","","","","","","","","","","","","","","","","","","","","","Red-Green-Blue colour representation.","Blue convenience indexing constant.","Blue channel.","Green convenience indexing constant.","Green channel.","Red convenience indexing constant.","Red channel.","RGB format.","","","","","","","","","","","","","","","","","","","","","","","Cartesian dimensions.","Plane-polar dimensions.","Spherical-polar dimensions.","Cartesian coordinate system.","First spatial dimension.","Cartesian X convenience indexing constant.","Second spatial dimension.","Cartesian Y convenience indexing constant.","Third spatial dimension.","Cartesian Z convenience indexing constant.","","","","","","","","","","","","","","","","","","","","","","","Polar enumeration implementation.","Radial distance. [0 : inf]","Angle. [0 : 2*Pi]","","","","","","","","","","","","","","","","","","","","","","","Spherical-polar phi convenience indexing constant.","Azimuthal angle. [0 : 2*Pi]","Spherical-polar and plane-polar rho convenience indexing …","Radial distance. [0 : inf]","Spherical-polar coordinate system.","Spherical-polar and plane-polar theta convenience …","Angle. [0 : Pi]","","","","","","","","","","","","","","","","","","","","","","","Map alias type.","Human-readable identifier type.","","Get the name as a string.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Register used to index named data.","","","","","","","","","","","","","","","","Find if the number of entries is zero.","","Get the number of entries.","Get a list of the names.","Construct a new instance.","Access the internal set.","","","","","","","","","Data map.","","","","","","","","","","","","","","","","Construct an instance from a vector of pairs.","","Get a value from the map.","Get a mutable value from the map.","","","","Find if the number of entries is zero.","","Get the number of entries.","","","","Reference the internal map.","Get a list of the names.","Construct a new instance.","","","","","","","","","","Iterate over the values.","","Crossing implementation.","Light surface structure.","Light surface structure.","Light surface structure.","Loadable light surface structure.","Local optical environment.","Optical material.","Material builder.","Photon particle.","Optical interface crossing information. Calculates …","","","","","Calculate the reflection direction and the required …","","","","","","","","","","","","Construct a new instance.","","","","","","Get the transmission probability.","","","","","","Photon emission structure.","","","","","","","","","","Emit a new photon.","","","","","","","","","Construct a new instance.","","","","","","","","","","","Photon emission structure linker.","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","","Buildable light structure.","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","Loadable light structure.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Localised optical environment properties.","","","Calculate the albedo.","","","","","","","","","","","","","","Calculate the interaction coefficient.","","","Construct a new instance.","","","","Calculate the shifting probability.","","","","","","","","Optical properties.","","","","","","","","","","","","","","","","","","","Construct a new instance.","","Generate an optical environment for a given wavelength.","","","","","","","","","","","Loadable material.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Photon.","","","","","","","","","","","","","","","","","","Set the weight to zero.","Construct a new instance.","","","","","","","","","","","","","","","","Babbage datacube manipulation module.","Cartography surface-to-volume mapping module.","Diffusion simulation module.","Reaction kinetics module.","Monte Carlo Radiative-transfer module.","Reaction-diffusion simulation module.","Rendering module.","Operation implementation.","Operation builder.","Operation implementation.","Loadable parameters.","Add a value to the datacube.","Clamp the values within datacube.","Divide the datacube by the value.","Generate a partially filled cube, with a range of …","Report information about datacube.","Multiply the datacube by the value.","Normalise a datacube.","Possible operation enumeration.","Piecewise divide a datacube by another.","Piecewise multiply a datacube by another.","Generate a zero cube, with a point at the center, of the …","Remove one cube from another.","Sample the locations for their values. (Points, DataCube, …","Sample the center of a datacube.","Subtract a value from the datacube.","Sum cubes together.","Generate a unit cube of the given resolution.","Generate a zero cube of the given resolution.","","","","","","","","","","","","","","","","Perform the operation.","","","","","","","","Maximum inclusive filling bound.","Minimum inclusive filling bound.","Total resolution.","Add a value to the datacube.","Clamp the values within datacube.","Divide the datacube by the value.","Generate a partially filled cube, with a range of …","Report information about datacube.","Multiply the datacube by the value.","Normalise a datacube.","Possible operation enumeration.","Piecewise divide a datacube by another.","Piecewise multiply a datacube by another.","Generate a zero cube, with a point at the center, of the …","Remove one cube from another.","Sample the locations for their values. (Points, DataCube, …","Sample the center of a datacube.","Subtract a value from the datacube.","Sum cubes together.","Generate a unit cube of the given resolution.","Generate a zero cube of the given resolution.","","","","","","","","","","","","","","","","","","","","","","","","Maximum inclusive filling bound.","Minimum inclusive filling bound.","Total resolution.","Add a value to the datacube.","Clamp the values within datacube.","Divide the datacube by the value.","Generate a partially filled cube, with a range of …","Report information about a datacube.","Multiply the datacube by the value.","Normalise a datacube.","Possible operation enumeration.","Piecewise divide a datacube by another.","Piecewise multiply a datacube by another.","Generate a zero cube, with a point at the center, of the …","Remove one cube from another.","Sample the locations for their values. (Points, DataCube, …","Sample the center of a datacube.","Subtract a value from the datacube.","Sum cubes together.","Generate a unit cube of the given resolution.","Generate a zero cube of the given resolution.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Maximum inclusive filling bound.","Minimum inclusive filling bound.","Total resolution.","Loadable runtime parameters.","","","","","","","","","","","","","","","","","","","Operations to perform, and their output path.","","","","","","","","Optical attributes.","Attribute linker.","Ray caster enumeration.","Material detection engine function.","Event enumeration.","Simulation input.","Output data structure.","Runtime parameters.","Buildable parameters.","Loadable parameters.","Simulation running functions.","Cartographer settings.","Super sampling options.","Surface attributes.","Material interface, inside material index, outside …","Partially reflective mirror, reflection fraction.","","","","","","","","","","","","","","","","","","","","","","","","","Surface attribute setup.","Material interface, inside material name, outside …","Partially reflective mirror, reflection fraction.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Ray caster generation.","Direction.","Radiant (samples).","Soft-targeting (samples, target (m), spread (rad)).","Target (m).","","","","","","","","","","","","","","","","","","Calculate the total number of samples.","","","","","Retrieve the number of potential casts.","","","","","","","","","","Determine the material contents of a given voxel.","Event determination enumeration.","Grid boundary collision.","Surface hit.","","","","","","","","","","","","","","","","Construct a new instance. Surface interactions are …","","","","","","","","Cartographer simulation resources conglomerate.","","Attributes.","","","","","","","","","","","","","Measurement grid.","","","","Material register.","Construct a new instance.","General settings.","","","","Hit-scan tree.","","","","","","Cartographer output data.","","","","","","","","","","","","","","","","","","Material name register.","Occupying materials.","Construct a new instance.","","","","","","","","","Missing materials.","","Runtime parameters.","","Attributes.","","","","","","","","","","","","","Measurement grid settings.","","","","Construct a new instance.","Simulation specific settings.","Surfaces.","","","","Tree settings.","","","","","","Runtime parameters builder.","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","Loadable runtime parameters.","","","","","","","","","","","","","","","","","","","","","","","","","","","Run a multi-threaded Cartography simulation.","Run a Cartography simulation using a single thread.","General settings structure.","","","","","","","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","","Single sample.","Random.","Super sampling types.","Uniform.","","","","","","","","","","","","","","","","","","","","","","Calculate the total number of samples.","Determine the nth sampling position.","","","","","","","","","","Simulation input.","Output data structure.","Runtime parameters.","Loadable parameters.","Loadable parameters.","Simulation control functions.","Diffuse settings.","Diffusion stencils module.","Diffuse simulation resources conglomerate.","","","","","Map of diffusion coeffs.","","","","","","","","","","Measurement grid.","","","","Construct a new instance.","General settings.","Map sources/sinks.","","","","","","","","","Diffuse output data.","","","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","","Runtime parameters.","","","","","Diffusion coefficents map.","","","","","","","","","","Measurement grid.","","Initial concentration map.","","","Construct a new instance.","Simulation specific settings.","Source map.","","","","","","","","","Loadable runtime parameters.","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","Loadable runtime parameters.","","","","","","","","","","","","","","","","","","","","","","","","","","","Integrate forward a given amount of time.","Run a diffusion simulation.","General settings structure.","","","","","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","","","Gradient-type stencil structure.","Reflective-type stencil structure.","Gradient stencil implementation.","","","","","","","","","","","","","","","","","","Construct a new instance.","Calculate the rate of diffusion.","","","","","","","","","Reflective stencil implementation.","","","","","","","","","","","","","","","","","","Construct a new instance.","Calculate the rate of diffusion.","","","","","","","","","Simulation input.","Runtime parameters.","Loadable parameters.","Simulation control functions.","Flask settings.","Flask simulation resources conglomerate.","","","","","","","","","","","","","","","","","Construct a new instance.","Reactor processor.","General settings.","Sources.","Register of known species.","","","","","","","","","Runtime parameters.","","","","","","","","","","","","","","","Initial values.","","","Construct a new instance.","Reactions.","Simulation specific settings.","Sources.","","","","","","","","","Loadable runtime parameters.","","","","","","","","","","","","","","","","","","","","","","","","","","","Run a Flask simulation using a single thread.","General settings structure.","","","","","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","","","Optical attributes.","Attribute third-stage material linker.","Attribute second-stage spectrometer linker.","Attribute first-stage imager linker.","Engine function handler.","Engine selection.","Loadable Engine selection.","Engine functions.","Event enumeration.","Simulation input.","Simulation input.","Simulation input.","Output data structure.","Runtime parameters.","Buildable parameters.","Loadable parameters.","Peel-off function.","Simulation control functions.","Photon scattering function.","MCRT settings.","Photon scattering function.","Photon movement function.","Surface attributes.","Imager detector id, width, orientation.","Material interface, inside material reference, outside …","Partially reflective mirror, reflection fraction.","Spectrometer detector.","","","","","","","","","","","","","","","","","","","","","","","","","Surface attribute setup.","Imager id, width, orientation.","Material interface, inside material name, outside …","Partially reflective mirror, reflection fraction.","Spectrometer id.","","","","","","","","","","","","","","","","","","","","","","","","","","","Surface attribute setup. Handles detector linking.","Imager id, horizontal size, orientation.","Material interface, inside material name, outside …","Partially reflective mirror, reflection fraction.","Spectrometer id, range, resolution.","","","","","","","","","","","","","","","","","","","","","","","","","","","Surface attribute setup. Handles detector linking.","Imager id, resolution, horizontal width (m), center, …","Material interface, inside material name, outside …","Partially reflective mirror, reflection fraction.","Spectrometer id, range, resolution.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Engine selection.","Fluorescence engine.","Photography engine.","Raman engine.","Standard sampling engine.","","","","","","","","","","","","","","","","","Run the engine for a single photon.","","","","","","","","","Engine selection.","Fluorescence engine.","Photography engine.","Raman engine.","Standard sampling engine.","","","","","","","","","","","","","","","","","","","","","","","","","","Engine selection.","Fluorescence engine.","Photography engine.","Raman engine.","Standard sampling engine.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fluorescence photon-lifetime engine function.","Photography photon-lifetime engine function.","Raman photon-lifetime engine function.","Standard photon-lifetime engine function.","Lifetime of a single photon capable of participating in …","Photograph the life of a single photon.","Generate the RGB components of a given wavelength.","Simulate the life of a single photon which has the …","Simulate the life of a single photon.","Event determination enumeration.","Scattering event.","Surface hit.","Voxel boundary collision.","","","","","","","","","","","","","","","","Construct a new instance. Surface interactions are …","","","","","","","","Real-space to frame-space transformer.","","","","","","","","","","","","","","","","Construct a new instance.","","","","","Transform a position in real-space to a pixel element.","","","","","","Picture frame builder.","","","","","","","","","","","","","","","","","","","","","","","","","","","MCRT simulation resources conglomerate.","","Attributes.","","","","","","","","","","","","","Measurement grid.","","","","Emission light.","Materials.","Construct a new instance.","General settings.","Spectrometer register.","","","","Hit-scan tree.","","","","","","MCRT output data.","Absorptions.","","","","","","","","","","","","","","","Emission power.","Photo-energy.","","","","","","Image data.","","","","Construct a new instance.","","Wavelength shifts.","","Spectrometer data.","","","","","","","","","","Runtime parameters.","","Attributes.","","","","","","","","","Engine selection.","","","","","Measurement grid settings.","","","","Main light.","Materials.","Construct a new instance.","Simulation specific settings.","Surfaces.","","","","Tree settings.","","","","","","Buildable runtime parameters.","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","Loadable runtime parameters.","","","","","","","","","","","","","","","","","","","","","","","","","","","Perform a peel-off event. Calculate the change in weight …","Run a multi-threaded MCRT simulation.","Perform a photon scattering event.","Perform a photon scattering event with a probability of …","General settings structure.","","","","","","","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","","","Handle a surface collision.","Move the photon forward and record the flight.","Simulation input.","Runtime parameters.","Buildable parameters.","Loadable parameters.","Simulation control functions.","Reactor settings.","Diffusion stencils module.","Reactor simulation resources conglomerate.","","","","","Map of diffusion coeffs.","","","","","","","","","","Measurement grid.","","","","Map of rate multipliers.","Construct a new instance.","Reactor processor.","General settings.","Map of source/sinks.","Register of known species.","","","","","","","","","Runtime parameters.","","","","","List of diffusion coefficients, initial values, and …","","","","","","","","","","Measurement grid.","","","","Reaction rate multiplier map.","Construct a new instance.","Reactions.","Simulation specific settings.","","","","","","","","","Buildable runtime parameters.","","","","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","Loadable runtime parameters.","","","","","","","","","","","","","","","","","","","","","","","","","","","Integrate forward a given amount of time.","Run a multi-threaded reaction-diffusion simulation.","General settings structure.","","","","","","","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","","","","Gradient-type stencil structure.","Reflective-type stencil structure.","Gradient stencil implementation.","","","","","","","","","","","","","","","","","","Construct a new instance.","Calculate the rate of diffusion.","","","","","","","","","Reflective stencil implementation.","","","","","","","","","","","","","","","","","","Construct a new instance.","Calculate the rate of diffusion.","","","","","","","","","Attributes implementation.","Visual attributes.","Engine function alias.","Engine selection.","Engine functions.","Render input.","Lighting calculation.","Output data structure.","Runtime parameters.","Loadable parameters.","Loadable parameters.","Simulation running functions.","Rendering settings.","Shader settings.","Shader settings.","Colour particle.","Surface attributes.","Luminous surface, brightness multiplier.","Partially reflective mirror, absorption fraction.","Opaque coloured surface.","Refractive, absorption fraction, inside and outside …","Switchable condition, conditional value.","Partially transparent, absorption fraction.","","","","","","","","","","","","","","","","","","","","","","","","","Surface attribute setup.","Luminous surface, brightness multiplier.","Partially reflective mirror, absorption fraction.","Opaque coloured surface.","Refractive, absorption fraction, inside and outside …","Switchable condition, conditional value.","Partially transparent, absorption fraction.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Rendering engine function type.","Antler rendering engine.","Cross-section rendering engine.","Engine selection.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Pixel-sampling engine function.","Pixel-sampling engine function.","Calculate the colour of a single tracer.","Calculate the colour of a single tracer.","Rendering simulation resources conglomerate.","","Attributes.","","","","Capturing camera.","","","","","","","","","","Gradients.","Image number.","","","","Construct a new instance.","General settings.","Shader settings.","","","","Hit-scan tree.","","","","","","Calculate the lighting factor. Zero indicates darkness. …","Calculate the occlusion experienced over a distance along …","Calculate the shadowing factor. Zero completely …","Rendering output data.","","","","","","Colouring.","","","","","","","","","","","","","Lighting factors.","Construct a new instance.","","Shadowing factors.","Render time.","","","","","","","","","Runtime parameters.","","Attributes.","","","","Main camera.","","","","","","Engine selection.","","","","","Colour gradients.","","","","Construct a new instance.","Rendering specific settings.","Shader settings.","Surfaces.","","","","Tree settings.","","","","","","Loadable runtime parameters.","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","Loadable runtime parameters.","","","","","","","","","","","","","","","","","","","","","","","","","","","Run a multi-threaded rendering simulation.","Run a rendering simulation using a single thread.","General settings structure.","","","","","","","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","Colouring settings.","","","","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","","","","","","","Colouring settings.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Colour particle.","","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","","","","","Binner implementation.","Index manipulation functions.","Progress-Bar implementation.","Range implementation.","Silent progress-Bar implementation.","Validation trait.","One-dimensional binning structure.","","","Determine the corresponding bin.","Calculate the bin width.","","","","","","","","","","","","","","","","","","","","","Construct a new Range.","","","","","","Determine the corresponding bin if the value is within …","","","","","","Create the next three-dimensional index from the given …","Determine the linear index form a two-dimension index and …","Progress-bar structure.","","","Request a block of values to work on. Return the …","","","","","","","","","Finish with a message.","","","","","Check if the progress bar is complete.","","Construct a new instance.","Tick the bar forward a single increment.","","","","","","","","One-dimensional inclusive Range.","","","","","","","Determine if a value is contained within the Range.","","","","","","","","","","","","","","Determine if the Range intersects with another given …","","","","","","","Construct a new Range.","Construct an infinite Range.","From a range of overlapping values.","","","","","","","","","","Calculate the width of the Range.","Silent progress-bar structure.","","","Request a block of values to work on. Return the …","","","","","","","","","","","","","Check if the progress bar is complete.","","Construct a new instance.","","","","","","","","Types implementing this trait can be queried for validity.","Check if the current state is valid.","Formatting module.","Installation information module.","Display trait.","Banner printing functions.","Datacube formatting functions.","Datacube formatting functions.","Datacube formatting functions.","Gradient formatting function.","Reporting functions.","Terminal width calculation function.","Types implementing this trait can be analysed to produce …","End type to be built.","Create a displayable instance.","Print a section bar to the terminal.","Print a sub-section message to the terminal.","Print a sub-sub-section message to the terminal.","Print a colourful title bar to the terminal.","Three-dimensional array analysis structure.","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","Two-dimensional array analysis structure.","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","Four-dimensional array analysis structure.","","","","","","","","","","","","","","","","","Construct a new instance.","","","","","","","","","Create a string of a gradients colour.","Determine the terminal width. Return the fallback size if …","Install directory information.","Executable information.","Set and get the input and output directories. Returned …","Get the arc installation directory path from the …","Determine the name of the executable."],"i":[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,13,0,13,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,15,15,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,0,0,0,0,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,27,26,27,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,0,0,0,29,0,30,0,31,31,31,0,32,0,0,0,0,0,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,36,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,0,0,0,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,0,0,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,46,46,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,47,48,49,50,48,51,50,51,51,52,49,50,52,49,50,53,53,53,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,0,0,0,0,0,0,0,0,0,0,54,54,54,54,54,54,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55,56,57,58,56,59,55,56,55,56,60,60,61,55,56,61,62,62,62,62,62,62,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,0,0,0,0,0,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,0,0,0,0,0,0,0,0,0,0,0,0,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,0,65,65,66,0,66,66,0,0,0,0,0,67,0,67,0,67,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,0,68,0,68,0,68,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,0,0,0,69,0,69,0,69,0,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0,71,0,71,0,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,0,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,0,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,0,0,0,0,0,0,0,0,0,0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,0,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,0,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,0,0,0,0,0,0,0,0,0,0,0,84,84,84,84,84,84,84,0,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,85,85,85,86,86,86,86,86,86,86,0,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,87,87,87,88,88,88,88,88,88,88,0,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,89,89,89,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,0,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,0,0,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,0,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,0,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,0,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,0,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,0,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,0,0,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,101,101,0,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,0,0,0,0,0,0,0,0,0,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,0,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,0,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,0,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,0,0,0,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,0,0,0,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,0,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,0,0,0,0,0,0,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,0,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,0,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,0,0,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,0,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,0,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,0,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,0,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,0,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,0,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,0,0,0,0,0,0,0,0,0,0,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,0,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,0,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,0,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,0,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,0,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,0,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,0,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,0,0,0,0,0,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,0,0,0,0,0,0,0,0,0,0,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,0,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,0,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,0,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,0,0,0,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,0,0,0,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,0,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,0,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,0,139,139,0,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,0,0,0,0,0,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,0,0,0,0,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,0,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,0,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,0,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,0,0,0,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,0,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,0,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,0,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,0,0,0,0,0,0,0,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,0,0,0,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,0,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,0,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,0,153,0,0,0,0,0,0,0,0,0,0,0,154,154,0,0,0,0,0,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,0,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,0,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,0,0,0,0,0,0,0],"f":[null,null,[[],["ray",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["rate",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["f64",15],["vec",3]]],[[],["f64",15]],[[["arrayview1",6]],["f64",15]],[[["arrayview1",6]],["f64",15]],[[]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["set",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[],["f64",15]],[[],[["name",3],["vec",3]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["reaction",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["f64",15],["rate",3],["array1",6]]],[[["arrayview1",6]],[["f64",15],["array1",6]]],[[]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["set",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["arrayview1",6]],[["f64",15],["array1",6]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["array1",6],["array2",6],["f64",15],["rate",3]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["set",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],[[]],[[["f64",15]]],[[],["f64",15]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["average",3]],[[]],[[]],[[]],[[],["i32",15]],[[],["average",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["f64",15],["i32",15]]],[[]],[[],["option",4]],[[]],[[],["f64",15]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[],["binner",3]],[[]],[[]],[[],["histogram",3]],[[]],[[["f64",15]]],[[["f64",15]]],[[]],[[]],[[],["array1",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["f64",15],["u64",15]]],[[["range",3],["u64",15]]],[[["path",3]],[["result",4],["error",4]]],[[]],[[],["string",3]],[[],["option",4]],[[]],[[["f64",15]]],[[["f64",15]]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],[["vec",3],["vec",3]]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[["vec",3],["string",3],["vec",3],["vec",3]]],[[["vec",3],["string",3],["array2",6]]],[[],["vec",3]],[[["path",3]],[["result",4],["error",4]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["error",4]]],[[["fromhexerror",4]]],[[]],[[["poisonerror",3]]],[[["error",3]]],[[["varerror",4]]],[[["error",3]]],[[["parseinterror",3]]],[[["parsefloaterror",3]]],[[["str",15]]],[[["error",4]]],[[["minmaxerror",4]]],[[["shapeerror",3]]],[[["encodingerror",4]]],[[["error",3]]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,[[["path",3]],[["result",4],["error",4]]],[[["str",15]],[["result",4],["error",4]]],null,[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],null,null,[[["path",3]],[["error",4],["result",4]]],null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["redirect",4]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["result",4],["error",4]]],[[],["result",4]],[[]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],null,null,null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["ray",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["f64",15],["orient",3],["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["pos3",6]],[[]],[[],["usize",15]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[],["camerabuilder",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[["pos3",6],["f64",15],["option",4],["usize",15]]],[[]],[[],["string",3]],[[],["option",4]],[[]],[[["vec3",6]]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["ray",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["ray",3]]],[[["pos3",6],["vec",3]]],[[["mesh",3]]],[[["grid",3],["array3",6],["f64",15]]],[[["pos3",6],["vec",3]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["cube",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[["pos3",6]],["option",4]],[[["pos3",6]],["option",4]],[[],["cube",3]],[[],["usize",15]],[[]],[[],["bool",15]],[[["cube",3]]],[[],["usize",15]],[[]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["vec3",6]],[[],["f64",15]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["cube",3]],[[],["grid",3]],[[],["gridbuilder",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[["cube",3]]],[[],["usize",15]],[[]],[[]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["mesh",3]],[[["mesh",3]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["set",3]],[["error",4],["result",4]]],[[["mesh",3],["name",3]]],[[],[["name",3],["vec",3]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["cube",3]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["pos3",6]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["treesettings",3],["set",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["f64",15],["ray",3]],[["hit",3],["option",4]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[["pos3",6]],["option",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[],["u32",15]],[[["usize",15],["u32",15],["f64",15]]],[[],["f64",15]],[[],["usize",15]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[["cube",3]],["bool",15]],null,[[],["ray",3]],null,[[["ray",3]],[["f64",15],["option",4]]],[[["ray",3]],["option",4]],[[["ray",3]],["bool",15]],null,[[["trans3",6]]],null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["hit",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["f64",15]],[[],["f64",15]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["side",4],["f64",15]]],[[],["side",4]],[[]],[[]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[],["dir3",6]],[[],["ray",3]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["dir3",6]],[[],["ray",3]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[],["dir3",6]],[[],["ray",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["dir3",6]],[[],["ray",3]],[[["ray",3]]],[[["pos3",6],["pos3",6]]],[[["dir3",6],["ray",3]]],[[],["pos3",6]],[[],["pos3",6]],[[],["dir3",6]],[[],["ray",3]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["dir3",6]],[[],["ray",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["ray",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["dir3",6]],[[],["dir3",6]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["pos3",6],["dir3",6]]],[[],["pos3",6]],[[],["pos3",6]],[[["f64",15]]],[[]],[[],["option",4]],[[]],[[["f64",15]]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["scan",4]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["f64",15]]],[[["hit",3]]],[[]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["side",4]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[["dir3",6],["dir3",6]]],[[],["dir3",6]],[[]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[]],[[],["f64",15]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["pos3",6]],[[],["cube",3]],[[]],[[["pos3",6]],["bool",15]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["ray",3]],[["f64",15],["option",4]]],[[["ray",3]],["option",4]],[[["usize",15]]],[[["f64",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["vec3",6]],[[["ray",3]],["bool",15]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[],["pos3",6]],[[],["pos3",6]],[[]],[[["pos3",6]]],[[["vec3",6],["pos3",6]]],[[]],[[["cube",3]],["bool",15]],[[],["pos3",6]],[[["f64",15]]],[[]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["pos3",6]],[[],["f64",15]],[[]],[[],["vec3",6]],null,[[]],[[],["f64",15]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["cube",3]],[[],["ray",3]],[[],["mesh",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["ray",3]],[["f64",15],["option",4]]],[[["ray",3]],["option",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[["ray",3]],["bool",15]],[[],["usize",15]],[[]],[[],[["smoothtriangle",3],["vec",3]]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[["smoothtriangle",3],["vec",3]]],[[["cube",3]],["bool",15]],[[]],[[],["string",3]],[[],["option",4]],[[]],[[["trans3",6]]],[[],["vec",3]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["ray",3]],[[],["smoothtriangle",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["ray",3]],[["f64",15],["option",4]]],[[["ray",3]],["option",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[["ray",3]],["bool",15]],[[],["usize",15]],[[]],[[],["bool",15]],[[["triangle",3]]],[[]],[[]],[[["cube",3]],["bool",15]],[[]],[[],["option",4]],[[]],[[["trans3",6]]],[[],["triangle",3]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[],["f64",15]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["ray",3]],[[],["pos3",6]],[[],["triangle",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["ray",3]],[["f64",15],["option",4]]],[[["ray",3]],["option",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[["ray",3]],["bool",15]],[[],["usize",15]],[[["ray",3]],["option",4]],[[]],[[],["bool",15]],[[]],[[["cube",3]],["bool",15]],[[],["f64",15]],[[],["dir3",6]],[[]],[[]],[[],["option",4]],[[]],[[["trans3",6]]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["aspectratio",4]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[],["f64",15]],[[["u64",15]]],[[]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["u64",15]],["u64",15]],[[]],null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["image",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["array2",6],["colour",6]]],[[["colour",6]]],[[],["array2",6]],[[],["array2",6]],[[["path",3]],[["result",4],["error",4]]],[[]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["formula",4]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["f64",15],["array1",6]]],[[["f64",15],["array1",6]]],[[["f64",15],["array1",6]]],[[["f64",15],["array1",6]]],[[]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["f64",15]],["f64",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[["i32",15]]],[[["i32",15]]],[[],["dir3",6]],[[["i32",15]]],[[["f64",15]],["f64",15]],[[["f64",15]],["f64",15]],[[],["f64",15]],null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["probability",4]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["array1",6],["f64",15],["array1",6]]],[[["f64",15]]],[[]],[[["array1",6]]],[[["f64",15]]],[[["f64",15],["array1",6]]],[[["f64",15]]],[[],["f64",15]],[[]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["f64",15]],[[],["f64",15]],[[],[["option",4],["eq",8],["clone",8],["hash",8]]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[],["trans3builder",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[["set",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[]],null,null,[[["set",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[]],[[],["string",3]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["name",3]],[[]],[[["name",3]],["ordering",4]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["name",3]],["bool",15]],[[],["bool",15]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["name",3]],["bool",15]],[[["name",3]],[["ordering",4],["option",4]]],[[],["result",4]],[[]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],[["name",3],["vec",3]]],[[["name",3],["vec",3]]],[[],["set",3]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[["vec",3]],[["error",4],["result",4]]],[[]],[[["name",3]],["option",4]],[[["name",3]],["option",4]],[[],["usize",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[["set",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[],["map",6]],[[],[["name",3],["vec",3]]],[[["name",3],["map",6]]],[[],[["name",3],["vec",3]]],[[],["result",4]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],[["values",3],["name",3]]],[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[["dir3",6]],["dir3",6]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["dir3",6],["f64",15]]],[[],["dir3",6]],[[],["f64",15]],[[],["option",4]],[[]],[[],["option",4]],[[],["f64",15]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["f64",15]],["photon",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["material",3]],[[["probability",4],["emitter",4],["material",3],["f64",15]]],[[],["f64",15]],[[],["probability",4]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["set",3]],[["error",4],["result",4]]],[[["probability",4],["emitter",4],["name",3],["f64",15]]],[[],[["name",3],["vec",3]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["emitter",4],["probabilitybuilder",4],["name",3],["f64",15]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[],["f64",15]],[[]],[[],["f64",15]],[[],["f64",15]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[],["f64",15]],[[]],[[],["bool",15]],[[["f64",15]]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[],["option",4]],[[]],[[],["formula",4]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["formula",4],["option",4]]],[[],["formula",4]],[[["f64",15]],["local",3]],[[],["formula",4]],[[],["option",4]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["photon",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[]],[[["f64",15],["ray",3]]],[[],["f64",15]],[[],["ray",3]],[[],["ray",3]],[[]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3],["string",3]],[["result",4],["error",4]]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["operationbuilderloader",4]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],null,[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["set",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["caster",4]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[["pos3",6],["i32",15]],["ray",3]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[],["i32",15]],[[]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["threadrng",3],["output",3],["input",3]]],null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["hit",3],["f64",15],["option",4]]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],null,[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],null,[[],["usize",15]],[[]],[[],["bool",15]],null,[[["set",3],["grid",3],["tree",4],["settings",3],["register",3]]],null,[[],["string",3]],[[],["option",4]],[[]],null,[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],null,null,[[["register",3]]],[[["path",3]],[["result",4],["error",4]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],null,[[]],null,[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],null,[[],["usize",15]],[[]],[[],["bool",15]],[[["set",3],["surfacelinker",3],["attributelinker",4],["grid",3],["settings",3],["set",3],["treesettings",3]]],null,null,[[],["string",3]],[[],["option",4]],[[]],null,[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["set",3],["surfacelinker",3],["attributelinker",4],["gridbuilder",3],["settings",3],["set",3],["treesettings",3]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["input",3]],[["result",4],["error",4],["output",3]]],[[["input",3]],[["result",4],["error",4],["output",3]]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[],["usize",15]],[[]],[[]],[[],["f64",15]],[[],["caster",4]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[],["u64",15]],[[["caster",4],["supersample",4],["usize",15],["f64",15],["u64",15]]],[[],["supersample",4]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["supersample",4]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[],["usize",15]],[[["usize",15],["cube",3]],["pos3",6]],[[]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],null,[[],["usize",15]],[[]],[[],["bool",15]],[[["array3",6],["grid",3],["settings",3]]],null,null,[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["cube",3]],[[],["f64",15]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["cube",3]]],[[["path",3]],[["result",4],["error",4]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],null,[[],["usize",15]],null,[[]],[[],["bool",15]],[[["array3",6],["grid",3],["f64",15],["settings",3]]],null,null,[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["array3",6],["gridbuilder",3],["f64",15],["settings",3]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["input",3],["vec3",6],["array3",6],["f64",15]]],[[["input",3],["array3",6],["path",3],["f64",15]],[["result",4],["array3",6],["error",4]]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[],["usize",15]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[["f64",15],["usize",15]]],[[],["f64",15]],[[],["f64",15]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["array3",6]]],[[["f64",15],["vec3",6]],["f64",15]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["array3",6]]],[[["f64",15],["vec3",6]],["f64",15]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["array1",6],["settings",3],["reactor",3],["register",3]]],null,null,null,null,[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],null,[[]],[[],["bool",15]],[[["reactorlinker",3],["arraylinker",3],["settings",3]]],null,null,null,[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["input",3],["f64",15],["array1",6]],[["array2",6],["error",4],["result",4]]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[],["usize",15]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[],["f64",15]],[[["f64",15],["usize",15]]],[[],["f64",15]],[[],["f64",15]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["set",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["set",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["set",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["output",3],["input",3],["threadrng",3],["photon",3]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[["output",3],["array3",6],["photon",3],["input",3],["threadrng",3],["formula",4]]],[[["output",3],["set",3],["input",3],["threadrng",3],["photon",3]]],[[["f64",15]]],[[["output",3],["pos3",6],["input",3],["threadrng",3],["photon",3]]],[[["output",3],["input",3],["threadrng",3],["photon",3]]],null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["hit",3],["f64",15],["option",4]]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["pos3",6],["mat4",6]]],[[],["pos3",6]],[[]],[[],["option",4]],[[]],[[["pos3",6]],["option",4]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],null,[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],null,[[],["usize",15]],[[]],[[],["bool",15]],null,null,[[["set",3],["grid",3],["light",3],["set",3],["tree",4],["settings",3],["register",3]]],null,null,[[],["string",3]],[[],["option",4]],[[]],null,[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["cube",3]],[[],["f64",15]],[[],["output",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["register",3]],null,[[],["usize",15]],[[]],[[],["bool",15]],[[["cube",3],["histogram",3],["vec",3],["vec",3],["image",3],["register",3]]],[[["path",3]],[["result",4],["error",4]]],null,[[],["register",3]],null,[[]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],null,[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],null,[[],["usize",15]],[[]],[[],["bool",15]],null,null,[[["engine",4],["attributelinkerlinkerlinker",4],["treesettings",3],["lightlinker",3],["surfacelinker",3],["material",3],["set",3],["settings",3],["grid",3],["set",3],["set",3]]],null,null,[[],["string",3]],[[],["option",4]],[[]],null,[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["enginebuilder",4],["attributelinkerlinkerlinker",4],["materialbuilder",3],["treesettings",3],["surfacelinker",3],["set",3],["set",3],["settings",3],["gridbuilder",3],["set",3],["lightlinkerbuilder",3]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["input",3],["local",3],["pos3",6],["photon",3]],[["f64",15],["option",4]]],[[["input",3],["output",3],["engine",4]],[["error",4],["result",4],["output",3]]],[[["threadrng",3],["photon",3],["local",3]]],[[["threadrng",3],["photon",3],["local",3]]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[],["usize",15]],[[]],[[]],[[],["f64",15]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[],["u64",15]],[[],["f64",15]],[[["usize",15],["f64",15],["u64",15]]],[[],["usize",15]],[[],["u64",15]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["output",3],["local",3],["hit",3],["threadrng",3],["photon",3]]],[[["output",3],["local",3],["photon",3],["f64",15]]],null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],null,[[],["usize",15]],[[]],[[],["bool",15]],null,[[["settings",3],["grid",3],["array4",6],["array3",6],["reactor",3],["register",3]]],null,null,null,null,[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],null,[[],["usize",15]],[[]],[[],["bool",15]],null,[[["set",3],["array3",6],["settings",3],["reactorlinker",3],["grid",3],["f64",15]]],null,null,[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[["set",3],["array3",6],["settings",3],["reactorlinker",3],["gridbuilder",3],["f64",15]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["vec3",6],["array4",6],["input",3],["f64",15]],[["result",4],["error",4]]],[[["array4",6],["input",3],["f64",15],["path",3]],[["array4",6],["error",4],["result",4]]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["f64",15]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[],["usize",15]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[],["f64",15]],[[["f64",15],["usize",15]]],[[],["usize",15]],[[],["f64",15]],[[],["f64",15]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["array4",6]]],[[["f64",15],["vec3",6]],["f64",15]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["array4",6]]],[[["f64",15],["vec3",6]],["f64",15]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["set",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[["output",3],["input",3],["threadrng",3],["tracer",3]]],[[["output",3],["input",3],["threadrng",3],["tracer",3]]],null,[[]],null,[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],null,null,[[],["usize",15]],[[]],[[],["bool",15]],[[["tree",4],["shader",3],["usize",15],["set",3],["set",3],["camera",3],["settings",3]]],null,null,[[],["string",3]],[[],["option",4]],[[]],null,[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["input",3],["ray",3],["dir3",6]],["f64",15]],[[["input",3],["f64",15],["ray",3]],["f64",15]],[[["ray",3],["dir3",6],["input",3],["threadrng",3]],["f64",15]],null,[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],null,[[["usize",15],["gradient",6]]],[[["path",3]],[["result",4],["error",4]]],null,null,[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],null,[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],null,[[],["usize",15]],[[]],[[],["bool",15]],[[["attributelinker",4],["gradient",6],["shaderlinker",3],["treesettings",3],["surfacelinker",3],["engine",6],["camera",3],["set",3],["set",3],["set",3],["settings",3]]],null,null,null,[[],["string",3]],[[],["option",4]],[[]],null,[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["set",3],["attributelinker",4],["gradientbuilder",3],["shaderlinker",3],["enginebuilder",4],["treesettings",3],["camerabuilder",3],["surfacelinker",3],["set",3],["set",3],["settings",3]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["engine",6],["input",3]],[["output",3],["error",4],["result",4]]],[[["engine",6],["input",3]],[["output",3],["error",4],["result",4]]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[],["usize",15]],[[]],[[]],[[],["f64",15]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[],["u64",15]],[[],["f64",15]],[[["usize",15],["f64",15],["u64",15]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[],["option",4]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[],["gradient",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["f64",15]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[]],[[["option",4],["gradient",6],["pos3",6],["f64",15],["i32",15],["option",4]]],[[]],[[]],[[],["gradient",6]],[[],["option",4]],[[],["i32",15]],[[],["pos3",6]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["set",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["tracer",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["f64",15],["ray",3]]],[[],["ray",3]],[[],["ray",3]],[[]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["f64",15]],[[],["f64",15]],null,null,null,null,null,null,null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["f64",15]],["usize",15]],[[],["f64",15]],[[],["u64",15]],[[]],[[]],[[],["binner",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["binner",3]],["bool",15]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["binner",3]],["bool",15]],[[["range",3],["u64",15]]],[[],["range",3]],[[]],[[],["string",3]],[[],["option",4]],[[]],[[["f64",15]],[["option",4],["usize",15]]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["usize",15]]],[[],["usize",15]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["str",15]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[["usize",15],["str",15]]],[[]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[],["range",3]],[[]],[[["f64",15]],["bool",15]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["range",3]],["bool",15]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[["path",3]],[["error",4],["result",4]]],[[],["f64",15]],[[],["f64",15]],[[["range",3]],["bool",15]],[[["f64",15]]],[[]],[[],["option",4]],[[]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["f64",15]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["usize",15],["str",15]]],[[["usize",15],["str",15]]],[[["str",15]]],[[["usize",15],["str",15]]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["array3",6]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["array2",6]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[["array4",6]]],[[],["string",3]],[[],["option",4]],[[]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["gradient",3],["usize",15]],["string",3]],[[["usize",15]],["usize",15]],null,null,[[["pathbuf",3],["option",4]],[["error",4],["result",4]]],[[],[["varerror",4],["pathbuf",3],["result",4]]],[[],[["result",4],["string",3],["error",4]]]],"p":[[6,"Pos3"],[3,"Rate"],[3,"RateLinker"],[3,"Reaction"],[3,"ReactionLinker"],[3,"Reactor"],[3,"ReactorLinker"],[3,"Average"],[3,"Histogram"],[3,"Table"],[4,"Error"],[8,"File"],[8,"Load"],[4,"Redirect"],[8,"Save"],[3,"Camera"],[3,"CameraBuilder"],[4,"Emitter"],[4,"EmitterLoader"],[3,"Grid"],[3,"GridBuilder"],[3,"Surface"],[3,"SurfaceLinker"],[3,"SurfaceLinkerLoader"],[4,"Tree"],[13,"Branch"],[13,"Leaf"],[3,"TreeSettings"],[8,"Collide"],[8,"Emit"],[8,"Trace"],[8,"Transformable"],[3,"Hit"],[3,"Orient"],[3,"Ray"],[4,"Scan"],[4,"Side"],[3,"Cube"],[3,"Mesh"],[3,"MeshLoader"],[3,"SmoothTriangle"],[3,"Triangle"],[4,"AspectRatio"],[3,"GradientBuilder"],[3,"Image"],[4,"Formula"],[13,"Constant"],[13,"Line"],[13,"LinearSpline"],[13,"QuadraticSpline"],[13,"Bifurcation"],[13,"ConstantSpline"],[4,"FormulaBuilder"],[4,"Probability"],[13,"Linear"],[13,"LinearSpline"],[13,"Point"],[13,"ConstantSpline"],[13,"Points"],[13,"Uniform"],[13,"Gaussian"],[4,"ProbabilityBuilder"],[3,"Trans3Builder"],[3,"ArrayLinker"],[8,"Build"],[8,"Link"],[4,"Greek"],[4,"Rgb"],[4,"Cartesian"],[4,"Polar"],[4,"Spherical"],[3,"Name"],[3,"Register"],[3,"Set"],[3,"Crossing"],[3,"Light"],[3,"LightLinker"],[3,"LightLinkerBuilder"],[3,"LightLinkerBuilderLoader"],[3,"Local"],[3,"Material"],[3,"MaterialBuilder"],[3,"Photon"],[4,"Operation"],[13,"Fill"],[4,"OperationBuilder"],[13,"Fill"],[4,"OperationBuilderLoader"],[13,"Fill"],[3,"Parameters"],[4,"Attribute"],[4,"AttributeLinker"],[4,"Caster"],[4,"Event"],[3,"Input"],[3,"Output"],[3,"Parameters"],[3,"ParametersBuilder"],[3,"ParametersBuilderLoader"],[3,"Settings"],[4,"SuperSample"],[3,"Input"],[3,"Output"],[3,"Parameters"],[3,"ParametersBuilder"],[3,"ParametersBuilderLoader"],[3,"Settings"],[3,"Grad"],[3,"Reflect"],[3,"Input"],[3,"Parameters"],[3,"ParametersLoader"],[3,"Settings"],[4,"Attribute"],[4,"AttributeLinker"],[4,"AttributeLinkerLinker"],[4,"AttributeLinkerLinkerLinker"],[4,"Engine"],[4,"EngineBuilder"],[4,"EngineBuilderLoader"],[4,"Event"],[3,"Frame"],[3,"FrameBuilder"],[3,"Input"],[3,"Output"],[3,"Parameters"],[3,"ParametersBuilder"],[3,"ParametersBuilderLoader"],[3,"Settings"],[3,"Input"],[3,"Parameters"],[3,"ParametersBuilder"],[3,"ParametersBuilderLoader"],[3,"Settings"],[3,"Grad"],[3,"Reflect"],[4,"Attribute"],[4,"AttributeLinker"],[4,"EngineBuilder"],[3,"Input"],[3,"Output"],[3,"Parameters"],[3,"ParametersBuilder"],[3,"ParametersBuilderLoader"],[3,"Settings"],[3,"Shader"],[3,"ShaderLinker"],[3,"Tracer"],[3,"Binner"],[3,"ProgressBar"],[3,"Range"],[3,"SilentProgressBar"],[8,"Valid"],[8,"Analyze"],[3,"DataCube"],[3,"DataSquare"],[3,"DataTesseract"]]},\
"arctk_attr":{"doc":"Support library of attribute macros.","t":[23,23,23,23],"n":["file","input","output","save"],"q":["arctk_attr","","",""],"d":["Create the attribute macro file.","Create the attribute macro input.","Create the attribute macro output.","Create the attribute macro save."],"i":[0,0,0,0],"f":[null,null,null,null],"p":[]},\
"arctk_proc":{"doc":"Support library of procedural macros.","t":[24,24,24,24],"n":["File","Input","Output","Save"],"q":["arctk_proc","","",""],"d":["Create the procedural macro File.","Create the procedural macro Input.","Create the procedural macro Output.","Create the procedural macro Save."],"i":[0,0,0,0],"f":[null,null,null,null],"p":[]},\
"atty":{"doc":"atty is a simple utility that answers one question","t":[13,13,13,4,11,11,11,11,11,11,5,5,11,11,11],"n":["Stderr","Stdin","Stdout","Stream","borrow","borrow_mut","clone","fmt","from","into","is","isnt","try_from","try_into","type_id"],"q":["atty","","","","","","","","","","","","","",""],"d":["","","","possible stream sources","","","","","","","returns true if this is a tty","returns true if this is <em>not</em> a tty","","",""],"i":[1,1,1,0,1,1,1,1,1,1,0,0,1,1,1],"f":[null,null,null,null,[[]],[[]],[[],["stream",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[["stream",4]],["bool",15]],[[["stream",4]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"Stream"]]},\
"babbage":{"doc":"Datacube manipulation engine binary. Produce some data …","t":[17,5,5,5],"n":["BACKUP_TERM_WIDTH","initialisation","main","run"],"q":["babbage","","",""],"d":["Backup print width if the terminal width can not be …","Initialise the input arguments.","Main program function.","Run the operations and save their results."],"i":[0,0,0,0],"f":[null,[[["usize",15]]],[[]],[[["parameters",3],["usize",15],["path",3]],[["error",4],["result",4]]]],"p":[]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":[14],"n":["bitflags"],"q":["bitflags"],"d":["The macro used to generate the flag structure."],"i":[0],"f":[null],"p":[]},\
"bytemuck":{"doc":"This crate gives small utilities for casting between …","t":[13,8,16,18,18,18,18,13,8,4,13,13,8,8,11,11,5,5,5,5,5,5,5,11,11,11,11,11,5,5,11,11,11,11,11,11,14,5,5,5,5,5,5,5,11,5,5,11,11,11,11,11,11,11,11],"n":["AlignmentMismatch","Contiguous","Int","MAX_VALUE","MAX_VALUE","MIN_VALUE","MIN_VALUE","OutputSliceWouldHaveSlop","Pod","PodCastError","SizeMismatch","TargetAlignmentGreaterAndInputNotAligned","TransparentWrapper","Zeroable","borrow","borrow_mut","bytes_of","bytes_of_mut","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","clone","eq","fmt","fmt","from","from_bytes","from_bytes_mut","from_integer","from_integer","hash","into","into_integer","into_integer","offset_of","pod_align_to","pod_align_to_mut","try_cast","try_cast_mut","try_cast_ref","try_cast_slice","try_cast_slice_mut","try_from","try_from_bytes","try_from_bytes_mut","try_into","type_id","wrap_mut","wrap_mut","wrap_ref","wrap_ref","zeroed","zeroed"],"q":["bytemuck","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["For this type of cast the alignments must be exactly the …","A trait indicating that:","The primitive integer type with an identical …","The upper <em>inclusive</em> bound for valid instances of this …","The upper <em>inclusive</em> bound for valid instances of this …","The lower <em>inclusive</em> bound for valid instances of this …","The lower <em>inclusive</em> bound for valid instances of this …","If the element size changes then the output slice changes …","Marker trait for “plain old data”.","The things that can go wrong when casting between [<code>Pod</code>] …","When casting a slice you can’t convert between ZST …","You tried to cast a slice to an element type with a …","A trait which indicates that a type is a <code>repr(transparent)</code>…","Trait for types that can be safely created with <code>zeroed</code>.","","","Re-interprets <code>&T</code> as <code>&[u8]</code>.","Re-interprets <code>&mut T</code> as <code>&mut [u8]</code>.","Cast <code>T</code> into <code>U</code>","Cast <code>&mut T</code> into <code>&mut U</code>.","Cast <code>&T</code> into <code>&U</code>.","Cast <code>&[A]</code> into <code>&[B]</code>.","Cast <code>&mut [T]</code> into <code>&mut [U]</code>.","","","","","","Re-interprets <code>&[u8]</code> as <code>&T</code>.","Re-interprets <code>&mut [u8]</code> as <code>&mut T</code>.","If <code>value</code> is within the range for valid instances of this …","If <code>value</code> is within the range for valid instances of this …","","","Perform the conversion from <code>C</code> into the underlying …","Perform the conversion from <code>C</code> into the underlying …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","As <code>align_to</code>, but safe because of the [<code>Pod</code>] bound.","As <code>align_to_mut</code>, but safe because of the [<code>Pod</code>] bound.","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&mut T</code> into <code>&mut U</code>.","Try to convert a <code>&T</code> into <code>&U</code>.","Try to convert <code>&[A]</code> into <code>&[B]</code> (possibly with a change in …","Try to convert <code>&mut [A]</code> into <code>&mut [B]</code> (possibly with a …","","Re-interprets <code>&[u8]</code> as <code>&T</code>.","Re-interprets <code>&mut [u8]</code> as <code>&mut T</code>.","","","Convert a mut reference to a wrapped type into a mut …","Convert a mut reference to a wrapped type into a mut …","Convert a reference to a wrapped type into a reference to …","Convert a reference to a wrapped type into a reference to …","Calls <code>zeroed</code>.","Calls <code>zeroed</code>."],"i":[1,0,2,2,2,2,2,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,2,2,1,1,2,2,0,0,0,0,0,0,0,0,1,0,0,1,1,3,3,3,3,4,4],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["pod",8]],["pod",8]],[[]],[[]],[[]],[[]],[[],["podcasterror",4]],[[["podcasterror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[["pod",8]],[["pod",8],["podcasterror",4],["result",4]]],[[],[["result",4],["podcasterror",4]]],[[],[["result",4],["podcasterror",4]]],[[],[["result",4],["podcasterror",4]]],[[],[["result",4],["podcasterror",4]]],[[],["result",4]],[[],[["podcasterror",4],["result",4]]],[[],[["podcasterror",4],["result",4]]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[4,"PodCastError"],[8,"Contiguous"],[8,"TransparentWrapper"],[8,"Zeroable"]]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":[6,4,8,6,4,6,6,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11],"n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","ReadBytesExt","WriteBytesExt","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32","read_f32","read_f32_into","read_f32_into","read_f32_into","read_f32_into_unchecked","read_f32_into_unchecked","read_f32_into_unchecked","read_f64","read_f64","read_f64","read_f64_into","read_f64_into","read_f64_into","read_f64_into_unchecked","read_f64_into_unchecked","read_f64_into_unchecked","read_i128","read_i128","read_i128","read_i128_into","read_i128_into","read_i128_into","read_i16","read_i16","read_i16","read_i16_into","read_i16_into","read_i16_into","read_i24","read_i24","read_i24","read_i32","read_i32","read_i32","read_i32_into","read_i32_into","read_i32_into","read_i48","read_i48","read_i48","read_i64","read_i64","read_i64","read_i64_into","read_i64_into","read_i64_into","read_i8","read_i8","read_i8_into","read_i8_into","read_int","read_int","read_int","read_int128","read_int128","read_int128","read_u128","read_u128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u24","read_u24","read_u32","read_u32","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u48","read_u48","read_u64","read_u64","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_u64_into","read_u64_into","read_u8","read_u8","read_uint","read_uint","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","read_uint128","read_uint128","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32","write_f32","write_f32_into","write_f64","write_f64","write_f64","write_f64_into","write_i128","write_i128","write_i128","write_i128_into","write_i16","write_i16","write_i16","write_i16_into","write_i24","write_i24","write_i24","write_i32","write_i32","write_i32","write_i32_into","write_i48","write_i48","write_i48","write_i64","write_i64","write_i64","write_i64_into","write_i8","write_i8","write_i8_into","write_int","write_int","write_int","write_int128","write_int128","write_int128","write_u128","write_u128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u24","write_u24","write_u32","write_u32","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u48","write_u48","write_u64","write_u64","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_u8","write_u8","write_uint","write_uint","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128","write_uint128","write_uint128"],"q":["byteorderd":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","Extends <code>Read</code> with methods for reading numbers. (For …","Extends <code>Write</code> with methods for writing numbers. (For …","","","","","","","","","","","","","","","","","","","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","","","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a sequence of IEEE754 single-precision (4 bytes) …","Reads a sequence of IEEE754 single-precision (4 bytes) …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a sequence of IEEE754 double-precision (8 bytes) …","Reads a sequence of IEEE754 double-precision (8 bytes) …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from the underlying reader.","Reads a signed 128 bit integer from the underlying reader.","Reads a signed 128 bit integer from <code>buf</code>.","Reads a sequence of signed 128 bit integers from the …","Reads a sequence of signed 128 bit integers from the …","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from <code>buf</code>.","Reads a sequence of signed 16 bit integers from the …","Reads a sequence of signed 16 bit integers from the …","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from <code>buf</code>.","Reads a sequence of signed 32 bit integers from the …","Reads a sequence of signed 32 bit integers from the …","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from <code>buf</code>.","Reads a sequence of signed 64 bit integers from the …","Reads a sequence of signed 64 bit integers from the …","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 8 bit integer from the underlying reader.","Reads a signed 8 bit integer from the underlying reader.","Reads a sequence of signed 8 bit integers from the …","Reads a sequence of signed 8 bit integers from the …","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","Reads an unsigned 128 bit integer from the underlying …","Reads an unsigned 128 bit integer from the underlying …","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 128 bit integers from the …","Reads a sequence of unsigned 128 bit integers from the …","","","Reads an unsigned 16 bit integer from <code>buf</code>.","Reads an unsigned 16 bit integer from the underlying …","Reads an unsigned 16 bit integer from the underlying …","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 16 bit integers from the …","Reads a sequence of unsigned 16 bit integers from the …","","","Reads an unsigned 24 bit integer from the underlying …","Reads an unsigned 24 bit integer from the underlying …","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","Reads an unsigned 32 bit integer from the underlying …","Reads an unsigned 32 bit integer from the underlying …","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 32 bit integers from the …","Reads a sequence of unsigned 32 bit integers from the …","","","Reads an unsigned 48 bit integer from the underlying …","Reads an unsigned 48 bit integer from the underlying …","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","Reads an unsigned 64 bit integer from the underlying …","Reads an unsigned 64 bit integer from the underlying …","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 64 bit integers from the …","Reads a sequence of unsigned 64 bit integers from the …","","","Reads an unsigned 8 bit integer from the underlying …","Reads an unsigned 8 bit integer from the underlying …","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating …","Writes a IEEE754 single-precision (4 bytes) floating …","Writes a IEEE754 single-precision (4 bytes) floating …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating …","Writes a IEEE754 double-precision (8 bytes) floating …","Writes a IEEE754 double-precision (8 bytes) floating …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer to the underlying writer.","Writes a signed 128 bit integer to the underlying writer.","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer to the underlying writer.","Writes a signed 24 bit integer to the underlying writer.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer to the underlying writer.","Writes a signed 48 bit integer to the underlying writer.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 8 bit integer to the underlying writer.","Writes a signed 8 bit integer to the underlying writer.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 128 bit integer to the underlying …","Writes an unsigned 128 bit integer to the underlying …","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 16 bit integer to the underlying …","Writes an unsigned 16 bit integer to the underlying …","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer to the underlying …","Writes an unsigned 24 bit integer to the underlying …","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 32 bit integer to the underlying …","Writes an unsigned 32 bit integer to the underlying …","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer to the underlying …","Writes an unsigned 48 bit integer to the underlying …","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 64 bit integer to the underlying …","Writes an unsigned 64 bit integer to the underlying …","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","",""],"i":[0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,1,2,3,1,2,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,1,2,1,2,1,2,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,4,4,4,4,3,4,4,3,3,4,4,1,2,3,4,4,1,2,3,4,4,1,2,3,4,4,1,2,4,4,3,3,4,4,1,2,3,4,4,1,2,4,4,3,3,4,4,1,2,3,4,4,1,2,4,4,3,4,4,1,2,3,4,4,1,2,1,2,1,2,1,2,1,2,5,5,3,3,5,5,3,3,5,5,3,3,5,5,3,3,5,5,3,5,5,3,3,5,5,3,5,5,3,3,5,5,3,5,5,3,5,5,3,3,5,5,1,2,3,1,2,3,5,5,1,2,3,1,2,5,5,3,3,5,5,1,2,3,1,2,5,5,3,3,5,5,1,2,3,1,2,5,5,3,5,5,1,2,3,5,5,1,2],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["bigendian",4]],[[],["littleendian",4]],[[]],[[]],[[["bigendian",4]],["ordering",4]],[[["littleendian",4]],["ordering",4]],[[],["bigendian",4]],[[],["littleendian",4]],[[["bigendian",4]],["bool",15]],[[["littleendian",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bigendian",4]],[["ordering",4],["option",4]]],[[["littleendian",4]],[["ordering",4],["option",4]]],[[],[["result",6],["f32",15]]],[[],[["result",6],["f32",15]]],[[],["f32",15]],[[],["result",6]],[[],["result",6]],[[]],[[],["result",6]],[[],["result",6]],[[]],[[],[["result",6],["f64",15]]],[[],[["result",6],["f64",15]]],[[],["f64",15]],[[],["result",6]],[[],["result",6]],[[]],[[],["result",6]],[[],["result",6]],[[]],[[],[["result",6],["i128",15]]],[[],[["result",6],["i128",15]]],[[],["i128",15]],[[],["result",6]],[[],["result",6]],[[]],[[],[["result",6],["i16",15]]],[[],[["result",6],["i16",15]]],[[],["i16",15]],[[],["result",6]],[[],["result",6]],[[]],[[],[["i32",15],["result",6]]],[[],[["i32",15],["result",6]]],[[],["i32",15]],[[],[["i32",15],["result",6]]],[[],[["i32",15],["result",6]]],[[],["i32",15]],[[],["result",6]],[[],["result",6]],[[]],[[],[["i64",15],["result",6]]],[[],[["i64",15],["result",6]]],[[],["i64",15]],[[],[["i64",15],["result",6]]],[[],[["i64",15],["result",6]]],[[],["i64",15]],[[],["result",6]],[[],["result",6]],[[]],[[],[["result",6],["i8",15]]],[[],[["result",6],["i8",15]]],[[],["result",6]],[[],["result",6]],[[["usize",15]],[["i64",15],["result",6]]],[[["usize",15]],[["i64",15],["result",6]]],[[["usize",15]],["i64",15]],[[["usize",15]],[["result",6],["i128",15]]],[[["usize",15]],[["result",6],["i128",15]]],[[["usize",15]],["i128",15]],[[],["u128",15]],[[],[["u128",15],["result",6]]],[[],[["u128",15],["result",6]]],[[],["u128",15]],[[],["u128",15]],[[]],[[],["result",6]],[[],["result",6]],[[]],[[]],[[],["u16",15]],[[],[["result",6],["u16",15]]],[[],[["result",6],["u16",15]]],[[],["u16",15]],[[],["u16",15]],[[]],[[],["result",6]],[[],["result",6]],[[]],[[]],[[],[["u32",15],["result",6]]],[[],[["u32",15],["result",6]]],[[],["u32",15]],[[],["u32",15]],[[],[["u32",15],["result",6]]],[[],[["u32",15],["result",6]]],[[],["u32",15]],[[],["u32",15]],[[]],[[],["result",6]],[[],["result",6]],[[]],[[]],[[],[["result",6],["u64",15]]],[[],[["result",6],["u64",15]]],[[],["u64",15]],[[],["u64",15]],[[],[["result",6],["u64",15]]],[[],[["result",6],["u64",15]]],[[],["u64",15]],[[],["u64",15]],[[]],[[],["result",6]],[[],["result",6]],[[]],[[]],[[],[["result",6],["u8",15]]],[[],[["result",6],["u8",15]]],[[["usize",15]],["u64",15]],[[["usize",15]],[["result",6],["u64",15]]],[[["usize",15]],[["result",6],["u64",15]]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u128",15]],[[["usize",15]],[["u128",15],["result",6]]],[[["usize",15]],[["u128",15],["result",6]]],[[["usize",15]],["u128",15]],[[["usize",15]],["u128",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["f32",15]],["result",6]],[[["f32",15]],["result",6]],[[["f32",15]]],[[]],[[["f64",15]],["result",6]],[[["f64",15]],["result",6]],[[["f64",15]]],[[]],[[["i128",15]],["result",6]],[[["i128",15]],["result",6]],[[["i128",15]]],[[]],[[["i16",15]],["result",6]],[[["i16",15]],["result",6]],[[["i16",15]]],[[]],[[["i32",15]],["result",6]],[[["i32",15]],["result",6]],[[["i32",15]]],[[["i32",15]],["result",6]],[[["i32",15]],["result",6]],[[["i32",15]]],[[]],[[["i64",15]],["result",6]],[[["i64",15]],["result",6]],[[["i64",15]]],[[["i64",15]],["result",6]],[[["i64",15]],["result",6]],[[["i64",15]]],[[]],[[["i8",15]],["result",6]],[[["i8",15]],["result",6]],[[]],[[["i64",15],["usize",15]],["result",6]],[[["i64",15],["usize",15]],["result",6]],[[["i64",15],["usize",15]]],[[["usize",15],["i128",15]],["result",6]],[[["usize",15],["i128",15]],["result",6]],[[["usize",15],["i128",15]]],[[["u128",15]]],[[["u128",15]],["result",6]],[[["u128",15]],["result",6]],[[["u128",15]]],[[["u128",15]]],[[]],[[]],[[]],[[["u16",15]]],[[["u16",15]],["result",6]],[[["u16",15]],["result",6]],[[["u16",15]]],[[["u16",15]]],[[]],[[]],[[]],[[["u32",15]],["result",6]],[[["u32",15]],["result",6]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]],["result",6]],[[["u32",15]],["result",6]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[["u64",15]],["result",6]],[[["u64",15]],["result",6]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]],["result",6]],[[["u64",15]],["result",6]],[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[]],[[["u8",15]],["result",6]],[[["u8",15]],["result",6]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]],["result",6]],[[["usize",15],["u64",15]],["result",6]],[[["usize",15],["u64",15]]],[[["usize",15],["u64",15]]],[[["u128",15],["usize",15]]],[[["u128",15],["usize",15]],["result",6]],[[["u128",15],["usize",15]],["result",6]],[[["u128",15],["usize",15]]],[[["u128",15],["usize",15]]]],"p":[[4,"BigEndian"],[4,"LittleEndian"],[8,"ByteOrder"],[8,"ReadBytesExt"],[8,"WriteBytesExt"]]},\
"cartographer":{"doc":"Datacube manipulation engine binary. Produce some data …","t":[17,5,5,5],"n":["BACKUP_TERM_WIDTH","initialisation","load_parameters","main"],"q":["cartographer","","",""],"d":["Backup print width if the terminal width can not be …","Initialise the input arguments.","Load the required files and form the input parameters.","Main program function."],"i":[0,0,0,0],"f":[null,[[["usize",15]]],[[["path",3],["usize",15]],["parameters",3]],[[]]],"p":[]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[null],"p":[]},\
"colored":{"doc":"Coloring terminal so simple, you already know how to do …","t":[13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,8,13,13,13,13,13,13,13,13,13,3,4,13,13,13,13,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,0,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,5,11],"n":["Black","Blink","Blue","Bold","BrightBlack","BrightBlue","BrightCyan","BrightGreen","BrightMagenta","BrightRed","BrightWhite","BrightYellow","Clear","Color","ColoredString","Colorize","Cyan","Dimmed","Green","Hidden","Italic","Magenta","Red","Reversed","Strikethrough","Style","Styles","TrueColor","Underline","White","Yellow","bgcolor","black","blink","blink","blue","bold","bold","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bright_black","bright_blue","bright_cyan","bright_green","bright_magenta","bright_purple","bright_red","bright_white","bright_yellow","clear","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","color","color","contains","control","cyan","default","deref","dimmed","dimmed","eq","eq","eq","eq","fgcolor","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_str","green","hidden","hidden","into","into","into","into","is_plain","italic","italic","magenta","ne","ne","ne","normal","normal","on_black","on_blue","on_bright_black","on_bright_blue","on_bright_cyan","on_bright_green","on_bright_magenta","on_bright_purple","on_bright_red","on_bright_white","on_bright_yellow","on_color","on_color","on_cyan","on_green","on_magenta","on_purple","on_red","on_truecolor","on_white","on_yellow","purple","red","reverse","reverse","reversed","reversed","strikethrough","strikethrough","style","to_bg_str","to_fg_str","to_owned","to_owned","to_owned","to_owned","to_string","truecolor","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","underline","underline","white","yellow","b","g","r","SHOULD_COLORIZE","ShouldColorize","borrow","borrow","borrow_mut","borrow_mut","default","deref","from","from","from_env","initialize","into","into","set_override","set_override","should_colorize","try_from","try_from","try_into","try_into","type_id","type_id","unset_override","unset_override"],"q":["colored","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","colored::Color","","","colored::control","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","The 8 standard colors.","A string that may have color and/or style applied to it.","The trait that enables something to be given color.","","","","","","","","","","A combinatorial style such as bold, italics, dimmed, etc.","","","","","","Get the current background color applied.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if the current style has one of <code>Styles</code> switched on.","A couple of functions to enable and disable coloring.","","","","","","","","","","Get the current background color applied.","","","","","","","","","","","","","","","","","","","","","Checks if the colored string has no color or styling.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Historical name of <code>Colorize::reversed</code>. May be removed in …","","This should be preferred to <code>Colorize::reverse</code>.","","","","Get the current [<code>Style</code>] which can be check if it contains …","","","","","","","","","","","","","","","","","","","","","","","","","","","","The persistent [<code>ShouldColorize</code>].","A flag to to if coloring should occur.","","","","","","","","","Reads environment variables and checks if output is a tty …","","","","Use this to force colored to ignore the environment and …","Use this to force colored to ignore the environment and …","Returns if the current coloring is expected.","","","","","","","Remove the manual override and let the environment decide …","Remove the manual override and let the environment decide …"],"i":[1,2,1,2,1,1,1,1,1,1,1,1,2,0,0,0,1,2,1,2,2,1,1,2,2,0,0,1,2,1,1,3,4,4,3,4,4,3,1,5,2,3,1,5,2,3,4,4,4,4,4,4,4,4,4,4,3,1,5,2,3,1,5,2,3,4,3,5,0,4,3,3,4,3,1,5,2,3,3,1,5,2,3,3,1,1,1,5,2,3,3,1,4,4,3,1,5,2,3,3,4,3,4,1,5,3,4,3,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,4,4,4,3,4,3,4,3,3,1,1,1,5,2,3,3,4,1,5,2,3,1,5,2,3,1,5,2,3,4,3,4,4,6,6,6,0,0,7,8,7,8,7,8,7,8,7,8,7,8,0,7,7,7,8,7,8,7,8,0,7],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["color",4],["option",4]]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["color",4]],[[],["style",3]],[[],["styles",4]],[[],["coloredstring",3]],[[]],[[]],[[]],[[]],[[["color",4],["into",8]],["coloredstring",3]],[[["color",4],["into",8]],["coloredstring",3]],[[["styles",4]],["bool",15]],null,[[],["coloredstring",3]],[[]],[[],["str",15]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[["color",4]],["bool",15]],[[["style",3]],["bool",15]],[[["styles",4]],["bool",15]],[[["coloredstring",3]],["bool",15]],[[],[["color",4],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["string",3]]],[[]],[[["str",15]]],[[]],[[]],[[["str",15]]],[[]],[[["str",15]],["result",4]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[["color",4]],["bool",15]],[[["style",3]],["bool",15]],[[["coloredstring",3]],["bool",15]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[["color",4],["into",8]],["coloredstring",3]],[[["color",4],["into",8]],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[["u8",15]],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["style",3]],[[],[["cow",4],["str",15]]],[[],[["cow",4],["str",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[["u8",15]],["coloredstring",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["shouldcolorize",3]],[[],["shouldcolorize",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bool",15]]],[[["bool",15]]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]]],"p":[[4,"Color"],[4,"Styles"],[3,"ColoredString"],[8,"Colorize"],[3,"Style"],[13,"TrueColor"],[3,"ShouldColorize"],[3,"SHOULD_COLORIZE"]]},\
"console":{"doc":"console is a library for Rust that provides access to …","t":[12,12,4,3,13,13,13,13,4,13,13,13,13,13,13,13,13,4,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,3,3,13,3,4,3,4,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11],"n":["0","1","Alignment","AnsiCodeIterator","ArrowDown","ArrowLeft","ArrowRight","ArrowUp","Attribute","BackTab","Backspace","Black","Blink","Blue","Bold","Center","Char","Color","Color256","Cyan","Del","Dim","Dummy","Emoji","End","Enter","Escape","File","Green","Hidden","Home","Insert","Italic","Key","Left","Magenta","PageDown","PageUp","Red","Reverse","Right","Stderr","Stdout","Style","StyledObject","Tab","Term","TermFamily","TermFeatures","TermTarget","Underlined","UnixTerm","Unknown","UnknownEscSeq","White","WindowsConsole","Yellow","apply_to","as_raw_fd","attr","attr","bg","bg","black","black","blink","blink","blue","blue","bold","bold","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bright","bright","buffered_stderr","buffered_stdout","clear_chars","clear_last_lines","clear_line","clear_screen","clear_to_end_of_screen","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","color256","color256","colors_enabled","colors_enabled_stderr","colors_supported","current_slice","cyan","cyan","default","dim","dim","eq","eq","eq","eq","eq","eq","eq","family","features","fg","fg","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_stderr","for_stderr","for_stdout","for_stdout","force_styling","force_styling","from","from","from","from","from","from","from","from","from","from","from","from","from_dotted_str","green","green","hidden","hidden","hide_cursor","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_attended","is_msys_tty","is_term","italic","italic","magenta","magenta","measure_text_width","move_cursor_down","move_cursor_left","move_cursor_right","move_cursor_to","move_cursor_up","ne","ne","ne","new","new","new","next","on_black","on_black","on_blue","on_blue","on_bright","on_bright","on_color256","on_color256","on_cyan","on_cyan","on_green","on_green","on_magenta","on_magenta","on_red","on_red","on_white","on_white","on_yellow","on_yellow","pad_str","partial_cmp","read","read_char","read_key","read_line","read_line_initial_text","read_secure_line","red","red","rest_slice","reverse","reverse","set_colors_enabled","set_colors_enabled_stderr","set_title","show_cursor","size","size_checked","stderr","stdout","strip_ansi_codes","style","style","target","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","truncate_str","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","underlined","underlined","user_attended","user_attended_stderr","wants_emoji","white","white","write","write_line","yellow","yellow"],"q":["consoled":["","","Defines the alignment for padding operations.","An iterator over ansi codes in a string.","","","","","A terminal style attribute.","","","","","","","","","A terminal color.","","","","","A dummy terminal (for instance on wasm)","“Intelligent” emoji formatter.","","","","Redirected to a file or file like thing.","","","","","","Key mapping","","","","","","","","","","A stored style that can be applied.","A formatting wrapper that can be styled for a terminal.","","Abstraction around a terminal.","The family of the terminal.","Gives access to the terminal features.","Where the term is writing.","","A standard unix terminal.","","Unrecognized sequence containing Esc and a list of chars","","A cmd.exe like windows console.","","Apply the style to something that can be displayed.","","Adds a attr.","Adds a attr.","Sets a background color.","Sets a background color.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a new buffered terminal to stderr","Return a new buffered terminal","Clears the last char in the the current line.","Clear the last <code>n</code> lines.","Clears the current line.","Clears the entire screen.","Clears the entire screen.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if colors should be enabled for stdout.","Returns <code>true</code> if colors should be enabled for stderr.","Checks if colors are supported by this terminal.","Returns the string slice up to the current match.","","","","","","","","","","","","","Returns the family of the terminal.","Checks for common terminal features.","Sets a foreground color.","Sets a foreground color.","","Flushes internal buffers.","","","","","","","","","","","","","","","","","","","","Specifies that style is applying to something being …","Specifies that style is applying to something being …","Specifies that style is applying to something being …","Specifies that style is applying to something being …","Forces styling on or off.","Forces styling on or off.","","","","","","","","","","","","","Creates a style from a dotted string.","","","","","Hides cursor","","","","","","","","","","","","","","Checks if this is a real user attended terminal (<code>isatty</code>)","Checks if this terminal is an msys terminal.","Checks if the terminal is indeed a terminal.","","","","","Measure the width of a string in terminal characters.","Moves the cursor down <code>n</code> lines","Moves the cursor left <code>n</code> lines","Moves the cursor down <code>n</code> lines","Moves the cursor to <code>x</code> and <code>y</code>","Moves the cursor up <code>n</code> lines","","","","Creates a new ansi code iterator.","Returns an empty default style.","","","","","","","","","","","","","","","","","","","","","","","Pads a string to fill a certain number of characters.","","","Read a single character from the terminal","Read a single key form the terminal.","Read one line of input.","Read one line of input with initial text.","Read securely a line of input.","","","Returns the string slice from the current match to the …","","","Forces colorization on or off for stdout.","Forces colorization on or off for stderr.","Set the terminal title","Makes cursor visible again","Returns the terminal size in rows and columns or gets …","Returns the terminal size in rows and columns.","Return a new unbuffered terminal to stderr","Return a new unbuffered terminal","Helper function to strip ansi codes.","Wraps an object for formatting for styling.","Returns the style for the term","Returns the targert","","","","","","","","","","","","","","Truncates a string to a certain number of characters.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A fast way to check if the application has a user …","A fast way to check if the application has a user …","Checks if this terminal wants emojis.","","","","Writes a string to the terminal and adds a newline.","",""],"i":[1,1,0,0,2,2,2,2,0,2,2,3,4,3,4,5,2,0,3,3,2,4,6,0,2,2,2,6,3,4,2,2,4,0,5,3,2,2,3,4,5,7,7,0,0,2,0,0,0,0,4,6,2,2,3,6,3,8,9,8,10,8,10,8,10,8,10,8,10,8,10,11,2,7,6,12,9,3,4,5,8,10,1,11,2,7,6,12,9,3,4,5,8,10,1,8,10,9,9,9,9,9,9,9,2,7,6,12,9,3,4,5,8,10,1,2,7,6,12,9,3,4,5,8,10,1,4,8,10,0,0,12,11,8,10,8,8,10,2,7,6,3,4,5,8,12,9,8,10,9,9,2,7,6,12,9,3,4,5,8,10,10,10,10,10,10,10,10,10,1,8,10,8,10,8,10,11,2,7,6,12,9,3,4,5,8,10,1,8,8,10,8,10,9,11,2,7,6,12,9,3,4,5,8,10,1,11,12,12,9,8,10,8,10,0,9,9,9,9,9,2,3,8,11,8,1,11,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,0,4,9,9,9,9,9,9,8,10,11,8,10,0,0,9,9,9,9,9,9,0,0,9,9,2,7,6,12,9,3,4,5,8,10,1,10,1,0,11,2,7,6,12,9,3,4,5,8,10,1,11,2,7,6,12,9,3,4,5,8,10,1,11,2,7,6,12,9,3,4,5,8,10,1,8,10,0,0,12,8,10,9,9,8,10],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["styledobject",3]],[[],["rawfd",6]],[[["attribute",4]],["style",3]],[[["attribute",4]],["styledobject",3]],[[["color",4]],["style",3]],[[["color",4]],["styledobject",3]],[[],["style",3]],[[],["styledobject",3]],[[],["style",3]],[[],["styledobject",3]],[[],["style",3]],[[],["styledobject",3]],[[],["style",3]],[[],["styledobject",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["style",3]],[[],["styledobject",3]],[[],["term",3]],[[],["term",3]],[[["usize",15]],["result",6]],[[["usize",15]],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["key",4]],[[],["termtarget",4]],[[],["termfamily",4]],[[],["termfeatures",3]],[[],["term",3]],[[],["color",4]],[[],["attribute",4]],[[],["alignment",4]],[[],["style",3]],[[],["styledobject",3]],[[],["emoji",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["attribute",4]],["ordering",4]],[[["u8",15]],["style",3]],[[["u8",15]],["styledobject",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["str",15]],[[],["style",3]],[[],["styledobject",3]],[[],["style",3]],[[],["style",3]],[[],["styledobject",3]],[[["key",4]],["bool",15]],[[["termtarget",4]],["bool",15]],[[["termfamily",4]],["bool",15]],[[["color",4]],["bool",15]],[[["attribute",4]],["bool",15]],[[["alignment",4]],["bool",15]],[[["style",3]],["bool",15]],[[],["termfamily",4]],[[],["termfeatures",3]],[[["color",4]],["style",3]],[[["color",4]],["styledobject",3]],[[],["result",6]],[[],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["style",3]],[[],["styledobject",3]],[[],["style",3]],[[],["styledobject",3]],[[["bool",15]],["style",3]],[[["bool",15]],["styledobject",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["style",3]],[[],["style",3]],[[],["styledobject",3]],[[],["style",3]],[[],["styledobject",3]],[[],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["style",3]],[[],["styledobject",3]],[[],["style",3]],[[],["styledobject",3]],[[["str",15]],["usize",15]],[[["usize",15]],["result",6]],[[["usize",15]],["result",6]],[[["usize",15]],["result",6]],[[["usize",15]],["result",6]],[[["usize",15]],["result",6]],[[["key",4]],["bool",15]],[[["color",4]],["bool",15]],[[["style",3]],["bool",15]],[[["str",15]],["ansicodeiterator",3]],[[],["style",3]],[[["str",15],["str",15]],["emoji",3]],[[],["option",4]],[[],["style",3]],[[],["styledobject",3]],[[],["style",3]],[[],["styledobject",3]],[[],["style",3]],[[],["styledobject",3]],[[["u8",15]],["style",3]],[[["u8",15]],["styledobject",3]],[[],["style",3]],[[],["styledobject",3]],[[],["style",3]],[[],["styledobject",3]],[[],["style",3]],[[],["styledobject",3]],[[],["style",3]],[[],["styledobject",3]],[[],["style",3]],[[],["styledobject",3]],[[],["style",3]],[[],["styledobject",3]],[[["alignment",4],["option",4],["str",15],["str",15],["usize",15]],[["str",15],["cow",4]]],[[["attribute",4]],[["ordering",4],["option",4]]],[[],[["result",6],["usize",15]]],[[],[["char",15],["result",6]]],[[],[["key",4],["result",6]]],[[],[["result",6],["string",3]]],[[["str",15]],[["result",6],["string",3]]],[[],[["result",6],["string",3]]],[[],["style",3]],[[],["styledobject",3]],[[],["str",15]],[[],["style",3]],[[],["styledobject",3]],[[["bool",15]]],[[["bool",15]]],[[["display",8]]],[[],["result",6]],[[]],[[],["option",4]],[[],["term",3]],[[],["term",3]],[[["str",15]],[["cow",4],["str",15]]],[[],["styledobject",3]],[[],["style",3]],[[],["termtarget",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[["str",15],["usize",15],["str",15]],[["str",15],["cow",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["style",3]],[[],["styledobject",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["style",3]],[[],["styledobject",3]],[[],[["result",6],["usize",15]]],[[["str",15]],["result",6]],[[],["style",3]],[[],["styledobject",3]]],"p":[[3,"Emoji"],[4,"Key"],[4,"Color"],[4,"Attribute"],[4,"Alignment"],[4,"TermFamily"],[4,"TermTarget"],[3,"Style"],[3,"Term"],[3,"StyledObject"],[3,"AnsiCodeIterator"],[3,"TermFeatures"]]},\
"crc32fast":{"doc":"Example","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Hasher","borrow","borrow_mut","clone","clone_into","combine","default","finalize","finish","fmt","from","into","new","new_with_initial","reset","to_owned","try_from","try_into","type_id","update","write"],"q":["crc32fast","","","","","","","","","","","","","","","","","","","",""],"d":["Represents an in-progress CRC32 computation.","","","","","Combine the hash state with the hash state for the …","","Finalize the hash state and return the computed CRC32 …","","","","","Create a new <code>Hasher</code>.","Create a new <code>Hasher</code> with an initial CRC32 state.","Reset the hash state.","","","","","Process the given byte slice and update the hash state.",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[],["hasher",3]],[[]],[[]],[[]],[[],["u32",15]],[[],["u64",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["u32",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]]],"p":[[3,"Hasher"]]},\
"crossbeam_channel":{"doc":"Multi-producer multi-consumer channels for message …","t":[12,13,13,13,13,13,13,3,3,3,3,3,4,3,3,3,3,4,3,13,13,3,3,4,3,4,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5],"n":["0","Disconnected","Disconnected","Disconnected","Disconnected","Empty","Full","IntoIter","Iter","ReadyTimeoutError","Receiver","RecvError","RecvTimeoutError","Select","SelectTimeoutError","SelectedOperation","SendError","SendTimeoutError","Sender","Timeout","Timeout","TryIter","TryReadyError","TryRecvError","TrySelectError","TrySendError","after","at","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded","capacity","capacity","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_iter","into_iter","into_iter","into_iter","is_disconnected","is_disconnected","is_disconnected","is_disconnected","is_empty","is_empty","is_empty","is_full","is_full","is_full","is_timeout","is_timeout","iter","len","len","ne","ne","ne","never","new","next","next","next","ready","ready_deadline","ready_timeout","recv","recv","recv","recv_deadline","recv_timeout","remove","same_channel","same_channel","select","select","select_deadline","select_timeout","send","send","send","send_deadline","send_timeout","tick","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_iter","try_ready","try_recv","try_select","try_send","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbounded"],"q":["crossbeam_channeld":["","The message could not be sent because the channel is …","The message could not be sent because the channel is …","The message could not be received because the channel is …","The message could not be received because the channel is …","A message could not be received because the channel is …","The message could not be sent because the channel is full.","A blocking iterator over messages in a channel.","A blocking iterator over messages in a channel.","An error returned from the <code>ready_timeout</code> method.","The receiving side of a channel.","An error returned from the <code>recv</code> method.","An error returned from the <code>recv_timeout</code> method.","Selects from a set of channel operations.","An error returned from the <code>select_timeout</code> method.","A selected operation that needs to be completed.","An error returned from the <code>send</code> method.","An error returned from the <code>send_timeout</code> method.","The sending side of a channel.","The message could not be sent because the channel is full …","A message could not be received because the channel is …","A non-blocking iterator over messages in a channel.","An error returned from the <code>try_ready</code> method.","An error returned from the <code>try_recv</code> method.","An error returned from the <code>try_select</code> method.","An error returned from the <code>try_send</code> method.","Creates a receiver that delivers a message after a …","Creates a receiver that delivers a message at a certain …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a channel of bounded capacity.","If the channel is bounded, returns its capacity.","If the channel is bounded, returns its capacity.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the index of the selected operation.","","","","","","","","","","","","","","","","","","Unwraps the message.","Unwraps the message.","Unwraps the message.","","","","","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the channel is empty.","Returns <code>true</code> if the channel is empty.","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the channel is full.","Returns <code>true</code> if the channel is full.","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the send operation timed out.","Returns <code>true</code> if the receive operation timed out.","A blocking iterator over messages in the channel.","Returns the number of messages in the channel.","Returns the number of messages in the channel.","","","","Creates a receiver that never delivers messages.","Creates an empty list of channel operations for selection.","","","","Blocks until one of the operations becomes ready.","Blocks until a given deadline, or until one of the …","Blocks for a limited time until one of the operations …","Blocks the current thread until a message is received or …","Adds a receive operation.","Completes the receive operation.","Waits for a message to be received from the channel, but …","Waits for a message to be received from the channel, but …","Removes a previously added operation.","Returns <code>true</code> if senders belong to the same channel.","Returns <code>true</code> if receivers belong to the same channel.","Blocks until one of the operations becomes ready and …","Selects from a set of channel operations.","Blocks until a given deadline, or until one of the …","Blocks for a limited time until one of the operations …","Blocks the current thread until a message is sent or the …","Adds a send operation.","Completes the send operation.","Waits for a message to be sent into the channel, but only …","Waits for a message to be sent into the channel, but only …","Creates a receiver that delivers messages periodically.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A non-blocking iterator over messages in the channel.","Attempts to find a ready operation without blocking.","Attempts to receive a message from the channel without …","Attempts to select one of the operations without blocking.","Attempts to send a message into the channel without …","","","","","","","","","","","","","","","","","","Creates a channel of unbounded capacity."],"i":[1,2,3,4,5,4,2,0,0,0,0,0,0,0,0,0,0,0,0,3,5,0,0,0,0,0,0,0,6,7,8,9,10,11,12,1,2,3,13,4,5,14,15,16,17,6,7,8,9,10,11,12,1,2,3,13,4,5,14,15,16,17,0,6,7,6,7,11,1,2,3,13,4,5,14,15,16,17,6,7,11,1,2,3,13,4,5,14,15,16,17,11,6,7,12,1,2,3,13,4,5,14,15,16,17,6,7,8,9,10,11,12,1,1,2,2,3,3,13,13,4,4,5,5,14,14,15,15,16,17,6,7,8,9,10,11,12,1,2,2,3,3,13,4,4,5,5,14,15,16,17,12,6,7,8,9,10,11,12,1,2,3,13,4,5,14,15,16,17,1,2,3,7,8,9,10,2,3,4,5,6,7,4,6,7,2,3,5,7,6,7,1,2,3,0,11,8,9,10,11,11,11,7,11,12,7,7,11,6,7,11,0,11,11,6,11,12,6,6,0,6,7,11,1,2,3,13,4,5,14,15,16,17,1,2,3,13,4,5,14,15,6,7,8,9,10,11,12,1,2,3,13,4,5,14,15,16,17,6,7,8,9,10,11,12,1,2,3,13,4,5,14,15,16,17,7,11,7,11,6,6,7,8,9,10,11,12,1,2,3,13,4,5,14,15,16,17,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["duration",3]],[["receiver",3],["instant",3]]],[[["instant",3]],[["receiver",3],["instant",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[]],[[]],[[],["select",3]],[[],["senderror",3]],[[],["trysenderror",4]],[[],["sendtimeouterror",4]],[[],["recverror",3]],[[],["tryrecverror",4]],[[],["recvtimeouterror",4]],[[],["tryselecterror",3]],[[],["selecttimeouterror",3]],[[],["tryreadyerror",3]],[[],["readytimeouterror",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["select",3]],[[]],[[]],[[]],[[["senderror",3]],["bool",15]],[[["trysenderror",4]],["bool",15]],[[["sendtimeouterror",4]],["bool",15]],[[["recverror",3]],["bool",15]],[[["tryrecverror",4]],["bool",15]],[[["recvtimeouterror",4]],["bool",15]],[[["tryselecterror",3]],["bool",15]],[[["selecttimeouterror",3]],["bool",15]],[[["tryreadyerror",3]],["bool",15]],[[["readytimeouterror",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["senderror",3]],["trysenderror",4]],[[]],[[["senderror",3]],["sendtimeouterror",4]],[[]],[[]],[[]],[[["recverror",3]],["tryrecverror",4]],[[]],[[["recverror",3]],["recvtimeouterror",4]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["usize",15]],[[],["usize",15]],[[["senderror",3]],["bool",15]],[[["trysenderror",4]],["bool",15]],[[["sendtimeouterror",4]],["bool",15]],[[],["receiver",3]],[[],["select",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[["instant",3]],[["readytimeouterror",3],["usize",15],["result",4]]],[[["duration",3]],[["readytimeouterror",3],["usize",15],["result",4]]],[[],[["result",4],["recverror",3]]],[[["receiver",3]],["usize",15]],[[["receiver",3]],[["result",4],["recverror",3]]],[[["instant",3]],[["recvtimeouterror",4],["result",4]]],[[["duration",3]],[["recvtimeouterror",4],["result",4]]],[[["usize",15]]],[[["sender",3]],["bool",15]],[[["receiver",3]],["bool",15]],[[],["selectedoperation",3]],null,[[["instant",3]],[["selectedoperation",3],["selecttimeouterror",3],["result",4]]],[[["duration",3]],[["selectedoperation",3],["selecttimeouterror",3],["result",4]]],[[],[["result",4],["senderror",3]]],[[["sender",3]],["usize",15]],[[["sender",3]],[["result",4],["senderror",3]]],[[["instant",3]],[["result",4],["sendtimeouterror",4]]],[[["duration",3]],[["result",4],["sendtimeouterror",4]]],[[["duration",3]],[["receiver",3],["instant",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["tryiter",3]],[[],[["usize",15],["tryreadyerror",3],["result",4]]],[[],[["result",4],["tryrecverror",4]]],[[],[["result",4],["selectedoperation",3],["tryselecterror",3]]],[[],[["result",4],["trysenderror",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]]],"p":[[3,"SendError"],[4,"TrySendError"],[4,"SendTimeoutError"],[4,"TryRecvError"],[4,"RecvTimeoutError"],[3,"Sender"],[3,"Receiver"],[3,"Iter"],[3,"TryIter"],[3,"IntoIter"],[3,"Select"],[3,"SelectedOperation"],[3,"RecvError"],[3,"TrySelectError"],[3,"SelectTimeoutError"],[3,"TryReadyError"],[3,"ReadyTimeoutError"]]},\
"crossbeam_deque":{"doc":"Concurrent work-stealing deques.","t":[13,3,13,4,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Empty","Injector","Retry","Steal","Stealer","Success","Worker","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_iter","init","init","init","init","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_retry","is_success","len","len","ne","new","new_fifo","new_lifo","or_else","pop","push","push","steal","steal","steal_batch","steal_batch","steal_batch_and_pop","steal_batch_and_pop","stealer","success","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["crossbeam_deque","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The queue was empty at the time of stealing.","An injector queue.","The steal operation needs to be retried.","Possible outcomes of a steal operation.","A stealer handle of a worker queue.","At least one task was successfully stolen.","A worker queue.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consumes items until a <code>Success</code> is found and returns it.","","","","","","","","","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue was empty at the time of …","Returns <code>true</code> if the steal operation needs to be retried.","Returns <code>true</code> if at least one task was stolen.","Returns the number of tasks in the deque.","Returns the number of tasks in the queue.","","Creates a new injector queue.","Creates a FIFO worker queue.","Creates a LIFO worker queue.","If no task was stolen, attempts another steal operation.","Pops a task from the queue.","Pushes a task into the queue.","Pushes a task into the queue.","Steals a task from the queue.","Steals a task from the queue.","Steals a batch of tasks and pushes them into another …","Steals a batch of tasks and pushes them into a worker.","Steals a batch of tasks, pushes them into another worker, …","Steals a batch of tasks, pushes them into a worker, and …","Creates a stealer for this queue.","Returns the result of the operation, if successful.","","","","","","","","","","","","","",""],"i":[1,0,1,0,0,1,0,2,3,4,1,2,3,4,1,3,1,3,1,4,2,3,4,1,2,3,4,1,2,3,4,4,1,1,2,3,4,1,2,3,4,1,1,2,3,4,1,2,3,4,1,2,3,4,1,1,1,2,4,1,4,2,2,1,2,2,4,3,4,3,4,3,4,2,1,3,1,2,3,4,1,2,3,4,1,2,3,4,1],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["stealer",3]],[[],["steal",4]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["steal",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["steal",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[["steal",4]],["bool",15]],[[],["injector",3]],[[],["worker",3]],[[],["worker",3]],[[],["steal",4]],[[],["option",4]],[[]],[[]],[[],["steal",4]],[[],["steal",4]],[[["worker",3]],["steal",4]],[[["worker",3]],["steal",4]],[[["worker",3]],["steal",4]],[[["worker",3]],["steal",4]],[[],["stealer",3]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Steal"],[3,"Worker"],[3,"Stealer"],[3,"Injector"]]},\
"crossbeam_epoch":{"doc":"Epoch-based memory reclamation.","t":[18,18,3,3,6,8,3,3,16,3,3,8,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,5,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,5,11,11,11,11,11,11,12,11,11,11,5,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11],"n":["ALIGN","ALIGN","Atomic","Collector","CompareAndSetError","CompareAndSetOrdering","CompareExchangeError","Guard","Init","LocalHandle","Owned","Pointable","Pointer","Shared","as_mut","as_raw","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","collector","collector","compare_and_set","compare_and_set_weak","compare_exchange","compare_exchange_weak","current","default","default","default","default_collector","defer","defer_destroy","defer_unchecked","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","failure","fetch_and","fetch_or","fetch_xor","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw","from_usize","from_usize","from_usize","init","init","init","into","into","into","into","into","into","into","into_box","into_owned","into_owned","into_shared","into_usize","into_usize","into_usize","is_null","is_pinned","is_pinned","load","load_consume","new","new","new","new","null","null","partial_cmp","pin","pin","register","repin","repin_after","store","success","swap","tag","tag","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unprotected","with_tag","with_tag"],"q":["crossbeam_epochd":["The alignment of pointer.","The alignment of pointer.","An atomic pointer that can be safely shared between …","An epoch-based garbage collector.","The error returned on failed compare-and-set operation.","Memory orderings for compare-and-set operations.","The error returned on failed compare-and-swap operation.","A guard that keeps the current thread pinned.","The type for initializers.","A handle to a garbage collector.","An owned heap-allocated object.","Types that are pointed to by a single word.","A trait for either <code>Owned</code> or <code>Shared</code> pointers.","A pointer to an object protected by the epoch GC.","","Converts the pointer to a raw pointer (without the tag).","","Converts the pointer to a reference.","","","","","","","","","","","","","","","","","Returns a copy of the atomic value.","","","Creates another reference to the same garbage collector.","","","","","","Returns the <code>Collector</code> associated with this handle.","Returns the <code>Collector</code> associated with this guard.","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","The value in the atomic pointer at the time of the failed …","","","","Returns the default global collector.","Stores a function so that it can be executed at some …","Stores a destructor for an object so that it can be …","Stores a function so that it can be executed at some …","Dereferences the given pointer.","","Dereferences the pointer.","Mutably dereferences the given pointer.","","Dereferences the pointer.","Drops the object pointed to by the given pointer.","","","","","Checks if both handles point to the same collector.","The ordering of the operation when it fails.","Bitwise “and” with the current tag.","Bitwise “or” with the current tag.","Bitwise “xor” with the current tag.","Clears up the thread-local cache of deferred functions by …","","","","","","","","","","","","Returns a new atomic pointer pointing to <code>owned</code>.","","Returns a new atomic pointer pointing to <code>raw</code>.","Returns a new atomic pointer pointing to <code>ptr</code>.","","","","Returns a new owned pointer pointing to <code>b</code>.","","","","Returns a new pointer pointing to <code>raw</code>.","","","","Returns a new owned pointer pointing to <code>raw</code>.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","","Initializes a with the given initializer.","Allocates <code>value</code> on the heap and returns a new atomic …","Allocates <code>value</code> on the heap and returns a new owned …","","","","","","","","Converts the owned pointer into a <code>Box</code>.","Takes ownership of the pointee.","Takes ownership of the pointee.","Converts the owned pointer into a [<code>Shared</code>].","Returns the machine representation of the pointer.","","","Returns <code>true</code> if the pointer is null.","Returns <code>true</code> if the current thread is pinned.","Returns <code>true</code> if the handle is pinned.","Loads a <code>Shared</code> from the atomic pointer.","Loads a <code>Shared</code> from the atomic pointer using a “consume…","Allocates <code>value</code> on the heap and returns a new atomic …","Allocates <code>value</code> on the heap and returns a new owned …","Creates a new collector.","The new value, which the operation failed to store.","Returns a new null atomic pointer.","Returns a new null pointer.","","Pins the current thread.","Pins the handle.","Registers a new handle for the collector.","Unpins and then immediately re-pins the thread.","Temporarily unpins the thread, executes the given …","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer.","The ordering of the operation when it succeeds.","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer, …","Returns the tag stored within the pointer.","Returns the tag stored within the pointer.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to a dummy guard that allows …","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …"],"i":[1,1,0,0,0,0,0,0,1,0,0,0,0,0,2,3,2,3,4,5,2,2,3,6,7,8,4,5,2,2,3,6,7,8,5,2,3,6,5,2,3,6,3,7,8,5,5,5,5,4,5,3,6,0,8,8,8,1,2,3,1,2,3,1,2,7,8,3,6,9,5,5,5,8,4,5,5,2,3,3,6,7,8,4,5,5,5,5,5,5,5,2,2,2,2,3,3,6,7,8,2,10,2,3,1,5,2,4,5,2,3,6,7,8,2,5,3,2,10,2,3,3,0,7,5,5,5,2,6,4,5,3,3,0,7,6,8,8,5,9,5,2,3,5,2,3,6,4,5,2,3,6,7,8,4,5,2,3,6,7,8,4,5,2,3,6,7,8,0,2,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[],["collector",3]],[[],[["option",4],["collector",3]]],[[["guard",3],["shared",3]],[["compareandseterror",6],["result",4],["shared",3]]],[[["guard",3],["shared",3]],[["compareandseterror",6],["result",4],["shared",3]]],[[["guard",3],["ordering",4],["shared",3]],[["result",4],["compareexchangeerror",3],["shared",3]]],[[["guard",3],["ordering",4],["shared",3]],[["result",4],["compareexchangeerror",3],["shared",3]]],null,[[]],[[]],[[]],[[],["collector",3]],[[]],[[["shared",3]]],[[]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[],["bool",15]],[[["collector",3]],["bool",15]],[[],["ordering",4]],[[["usize",15],["ordering",4],["guard",3]],["shared",3]],[[["usize",15],["ordering",4],["guard",3]],["shared",3]],[[["usize",15],["ordering",4],["guard",3]],["shared",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["owned",3]]],[[]],[[]],[[["shared",3]]],[[]],[[["box",3]]],[[]],[[["box",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["owned",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[],["atomic",3]],[[],["owned",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["box",3]],[[],["owned",3]],[[],["owned",3]],[[["guard",3]],["shared",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["ordering",4],["guard",3]],["shared",3]],[[["guard",3]],["shared",3]],[[],["atomic",3]],[[],["owned",3]],[[]],null,[[],["atomic",3]],[[],["shared",3]],[[],[["ordering",4],["option",4]]],[[],["guard",3]],[[],["guard",3]],[[],["localhandle",3]],[[]],[[]],[[["pointer",8],["ordering",4]]],[[],["ordering",4]],[[["pointer",8],["ordering",4],["guard",3]],["shared",3]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["guard",3]],[[["usize",15]],["owned",3]],[[["usize",15]],["shared",3]]],"p":[[8,"Pointable"],[3,"Owned"],[3,"Shared"],[3,"CompareExchangeError"],[3,"Atomic"],[3,"Collector"],[3,"LocalHandle"],[3,"Guard"],[8,"CompareAndSetOrdering"],[8,"Pointer"]]},\
"crossbeam_utils":{"doc":"Miscellaneous tools for concurrent programming.","t":[3,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,3,8,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Backoff","CachePadded","atomic","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","from","from","from","from","hash","into","into","into_inner","is_completed","ne","new","new","reset","snooze","spin","sync","thread","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","AtomicCell","AtomicConsume","Val","as_ptr","borrow","borrow_mut","compare_and_swap","compare_exchange","default","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fmt","from","from","from","into","into_inner","is_lock_free","load","load_consume","new","store","swap","take","try_from","try_into","type_id","Parker","ShardedLock","ShardedLockReadGuard","ShardedLockWriteGuard","Unparker","WaitGroup","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","default","deref","deref","deref_mut","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_raw","from_raw","get_mut","into","into","into","into","into","into","into_inner","into_raw","into_raw","is_poisoned","new","new","new","park","park_deadline","park_timeout","read","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_read","try_write","type_id","type_id","type_id","type_id","type_id","type_id","unpark","unparker","wait","write","Scope","ScopedJoinHandle","ScopedThreadBuilder","as_pthread_t","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","fmt","fmt","fmt","from","from","from","into","into","into","into_pthread_t","join","name","scope","spawn","spawn","stack_size","thread","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["crossbeam_utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam_utils::atomic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam_utils::sync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam_utils::thread","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Performs exponential backoff in spin loops.","Pads and aligns a value to the length of a cache line.","Atomic types.","","","","","","","","","","","","","","","","","","","","","Returns the inner value.","Returns <code>true</code> if exponential backoff has completed and …","","Creates a new <code>Backoff</code>.","Pads and aligns a value to the length of a cache line.","Resets the <code>Backoff</code>.","Backs off in a blocking loop.","Backs off in a lock-free loop.","Thread synchronization primitives.","Threads that can borrow variables from the stack.","","","","","","","","A thread-safe mutable memory location.","Trait which allows reading from primitive atomic types …","Type returned by <code>load_consume</code>.","Returns a raw pointer to the underlying data in this …","","","If the current value equals <code>current</code>, stores <code>new</code> into the …","If the current value equals <code>current</code>, stores <code>new</code> into the …","","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Applies bitwise “and” to the current value and …","Applies bitwise “and” to the current value and …","Applies bitwise “and” to the current value and …","Applies bitwise “and” to the current value and …","Applies bitwise “and” to the current value and …","Applies bitwise “and” to the current value and …","Applies bitwise “and” to the current value and …","Applies logical “and” to the current value and …","Applies bitwise “and” to the current value and …","Applies bitwise “and” to the current value and …","Applies bitwise “and” to the current value and …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies logical “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Applies bitwise “xor” to the current value and …","Applies bitwise “xor” to the current value and …","Applies bitwise “xor” to the current value and …","Applies bitwise “xor” to the current value and …","Applies bitwise “xor” to the current value and …","Applies bitwise “xor” to the current value and …","Applies bitwise “xor” to the current value and …","Applies logical “xor” to the current value and …","Applies bitwise “xor” to the current value and …","Applies bitwise “xor” to the current value and …","Applies bitwise “xor” to the current value and …","","","","","","Consumes the atomic and returns the contained value.","Returns <code>true</code> if operations on values of this type are …","Loads a value from the atomic cell.","Loads a value from the atomic using a “consume” …","Creates a new atomic cell initialized with <code>val</code>.","Stores <code>val</code> into the atomic cell.","Stores <code>val</code> into the atomic cell and returns the previous …","Takes the value of the atomic cell, leaving …","","","","A thread parking primitive.","A sharded reader-writer lock.","A guard used to release the shared read access of a […","A guard used to release the exclusive write access of a […","Unparks a thread parked by the associated [<code>Parker</code>].","Enables threads to synchronize the beginning or end of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a raw pointer into a <code>Parker</code>.","Converts a raw pointer into an <code>Unparker</code>.","Returns a mutable reference to the underlying data.","","","","","","","Consumes this lock, returning the underlying data.","Converts a <code>Parker</code> into a raw pointer.","Converts an <code>Unparker</code> into a raw pointer.","Returns <code>true</code> if the lock is poisoned.","Creates a new <code>Parker</code>.","Creates a new sharded reader-writer lock.","Creates a new wait group and returns the single reference …","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Locks with shared read access, blocking the current …","","","","","","","","","","","","","","","","","Attempts to acquire this lock with shared read access.","Attempts to acquire this lock with exclusive write access.","","","","","","","Atomically makes the token available if it is not already.","Returns a reference to an associated [<code>Unparker</code>].","Drops this reference and waits until all other references …","Locks with exclusive write access, blocking the current …","A scope for spawning threads.","A handle that can be used to join its scoped thread.","Configures the properties of a new thread.","","","","","","","","Creates a builder that can configure a thread before …","","","","","","","","","","","Waits for the thread to finish and returns its result.","Sets the name for the new thread.","Creates a new scope for spawning threads.","Spawns a scoped thread.","Spawns a scoped thread with this configuration.","Sets the size of the stack for the new thread.","Returns a handle to the underlying thread.","","","","","","","","",""],"i":[0,0,0,1,2,1,2,2,2,1,2,2,2,2,1,2,1,2,2,2,2,1,2,2,1,2,1,2,1,1,1,0,0,2,1,2,1,2,1,2,0,0,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,0,0,0,0,0,0,5,6,7,8,9,10,5,6,7,8,9,10,6,10,6,10,5,7,10,8,9,9,9,10,5,6,7,8,8,9,9,10,5,6,7,7,7,8,9,10,5,6,7,5,6,7,8,9,10,7,5,6,7,5,7,10,5,5,5,7,6,10,8,9,5,6,7,8,9,10,5,6,7,8,9,10,7,7,5,6,7,8,9,10,6,5,10,7,0,0,0,11,12,11,13,12,11,13,12,12,11,13,12,11,13,12,11,13,11,11,13,0,12,13,13,11,12,11,13,12,11,13,12,11,13],"f":[null,null,null,[[]],[[]],[[]],[[]],[[],["cachepadded",3]],[[]],[[],["backoff",3]],[[],["cachepadded",3]],[[]],[[]],[[["cachepadded",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["cachepadded",3]],["bool",15]],[[]],[[],["cachepadded",3]],[[]],[[]],[[]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["atomiccell",3]],[[["i32",15]],["i32",15]],[[["usize",15]],["usize",15]],[[["isize",15]],["isize",15]],[[["i64",15]],["i64",15]],[[["u8",15]],["u8",15]],[[["i8",15]],["i8",15]],[[["u16",15]],["u16",15]],[[["u64",15]],["u64",15]],[[["i16",15]],["i16",15]],[[["u32",15]],["u32",15]],[[["u64",15]],["u64",15]],[[["isize",15]],["isize",15]],[[["i32",15]],["i32",15]],[[["usize",15]],["usize",15]],[[["u8",15]],["u8",15]],[[["i8",15]],["i8",15]],[[["u32",15]],["u32",15]],[[["bool",15]],["bool",15]],[[["i64",15]],["i64",15]],[[["u16",15]],["u16",15]],[[["i16",15]],["i16",15]],[[["i32",15]],["i32",15]],[[["usize",15]],["usize",15]],[[["bool",15]],["bool",15]],[[["u16",15]],["u16",15]],[[["u8",15]],["u8",15]],[[["i64",15]],["i64",15]],[[["i16",15]],["i16",15]],[[["u64",15]],["u64",15]],[[["i8",15]],["i8",15]],[[["isize",15]],["isize",15]],[[["u32",15]],["u32",15]],[[["i16",15]],["i16",15]],[[["isize",15]],["isize",15]],[[["i32",15]],["i32",15]],[[["u64",15]],["u64",15]],[[["u8",15]],["u8",15]],[[["usize",15]],["usize",15]],[[["i8",15]],["i8",15]],[[["u32",15]],["u32",15]],[[["i64",15]],["i64",15]],[[["u16",15]],["u16",15]],[[["i32",15]],["i32",15]],[[["u8",15]],["u8",15]],[[["i8",15]],["i8",15]],[[["u16",15]],["u16",15]],[[["isize",15]],["isize",15]],[[["i16",15]],["i16",15]],[[["u64",15]],["u64",15]],[[["bool",15]],["bool",15]],[[["i64",15]],["i64",15]],[[["usize",15]],["usize",15]],[[["u32",15]],["u32",15]],[[["formatter",3]],["result",6]],[[],["atomiccell",3]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[],["atomiccell",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["unparker",3]],[[],["waitgroup",3]],[[]],[[]],[[]],[[],["shardedlock",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["parker",3]],[[],["unparker",3]],[[],["lockresult",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["lockresult",6]],[[["parker",3]]],[[["unparker",3]]],[[],["bool",15]],[[],["parker",3]],[[],["shardedlock",3]],[[]],[[]],[[["instant",3]]],[[["duration",3]]],[[],[["lockresult",6],["shardedlockreadguard",3]]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["trylockresult",6],["shardedlockreadguard",3]]],[[],[["trylockresult",6],["shardedlockwriteguard",3]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["unparker",3]],[[]],[[],[["lockresult",6],["shardedlockwriteguard",3]]],null,null,null,[[],["rawpthread",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["scopedthreadbuilder",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rawpthread",6]],[[],["result",6]],[[["string",3]],["scopedthreadbuilder",3]],[[],["result",6]],[[],["scopedjoinhandle",3]],[[],[["result",6],["scopedjoinhandle",3]]],[[["usize",15]],["scopedthreadbuilder",3]],[[],["thread",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Backoff"],[3,"CachePadded"],[8,"AtomicConsume"],[3,"AtomicCell"],[3,"Parker"],[3,"Unparker"],[3,"ShardedLock"],[3,"ShardedLockReadGuard"],[3,"ShardedLockWriteGuard"],[3,"WaitGroup"],[3,"ScopedJoinHandle"],[3,"Scope"],[3,"ScopedThreadBuilder"]]},\
"deflate":{"doc":"An implementation an encoder using DEFLATE compression …","t":[13,4,3,13,13,13,13,4,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Best","Compression","CompressionOptions","Default","Fast","Greedy","Lazy","MatchingType","Normal","SpecialOptions","_ForceFixed","_ForceStored","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","default","default","deflate_bytes","deflate_bytes_conf","deflate_bytes_zlib","deflate_bytes_zlib_conf","eq","eq","eq","eq","fast","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","hash","hash","hash","high","huffman_only","into","into","into","into","lazy_if_less_than","matching_type","max_hash_checks","ne","partial_cmp","partial_cmp","rle","special","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","DeflateEncoder","ZlibEncoder","borrow","borrow","borrow_mut","borrow_mut","checksum","drop","drop","finish","finish","flush","flush","from","from","into","into","new","new","reset","reset","try_from","try_from","try_into","try_into","type_id","type_id","write","write"],"q":["deflate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","deflate::write","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Higher compression level (<code>CompressionOptions::high()</code>).","An enum describing the level of compression to be used by …","A struct describing the options for a compressor or …","Default level (<code>CompressionOptions::default()</code>).","Fast minimal compression (<code>CompressionOptions::fast()</code>).","Use greedy matching: the matching algorithm simply uses a …","Use lazy matching: after finding a match, the next input …","An enum describing whether we use lazy or greedy matching.","Compress normally.","Enum allowing some special options (not implemented yet)!","Force fixed Huffman tables. (Unimplemented!).","Force stored (uncompressed) blocks only. (Unimplemented!).","","","","","","","","","","","","","","","","","","","","","Returns the options describing the default compression …","Compress the given slice of bytes with DEFLATE …","Compress the given slice of bytes with DEFLATE …","Compress the given slice of bytes with DEFLATE …","Compress the given slice of bytes with DEFLATE …","","","","","Returns  a fast set of compression settings","","","","","","","","","","","","","","","Returns compression settings roughly corresponding to the …","Returns a set of compression settings that makes the …","","","","","Only lazy match if we have a length less than this value.","Whether to use lazy or greedy matching.","The maximum number of checks to make in the hash table …","","","","Returns a set of compression settings that makes the …","Force fixed/stored blocks (Not implemented yet).","","","","","","","","","","","","","","","","","","Encoders implementing a <code>Write</code> interface.","A DEFLATE encoder/compressor.","A Zlib encoder/compressor.","","","","","Return the adler32 checksum of the currently consumed …","When the encoder is dropped, output the rest of the data.","When the encoder is dropped, output the rest of the data.","Encode all pending data to the contained writer, consume …","Encode all pending data to the contained writer, consume …","Flush the encoder.","Flush the encoder.","","","","","Creates a new encoder using the provided compression …","Create a new <code>ZlibEncoder</code> using the provided compression …","Resets the encoder (except the compression options), …","Resets the encoder (except the compression options), …","","","","","","","",""],"i":[1,0,0,1,1,2,2,0,3,0,3,3,1,3,4,2,1,3,4,2,1,3,4,2,1,3,4,2,1,2,1,3,4,0,0,0,0,1,3,4,2,4,1,3,4,2,2,1,3,4,4,2,1,3,4,2,4,4,1,3,4,2,4,4,4,4,1,2,4,4,1,3,4,2,2,1,3,4,2,1,3,4,2,1,3,4,2,0,0,0,5,6,5,6,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["compression",4]],[[],["specialoptions",4]],[[],["compressionoptions",3]],[[],["matchingtype",4]],[[]],[[]],[[]],[[]],[[["compression",4]],["ordering",4]],[[["matchingtype",4]],["ordering",4]],[[],["compression",4]],[[],["specialoptions",4]],[[],["compressionoptions",3]],[[],[["u8",15],["vec",3]]],[[["compressionoptions",3],["into",8]],[["u8",15],["vec",3]]],[[],[["u8",15],["vec",3]]],[[["compressionoptions",3],["into",8]],[["u8",15],["vec",3]]],[[["compression",4]],["bool",15]],[[["specialoptions",4]],["bool",15]],[[["compressionoptions",3]],["bool",15]],[[["matchingtype",4]],["bool",15]],[[],["compressionoptions",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["compression",4]],["compressionoptions",3]],[[]],[[]],[[]],[[]],[[]],[[],["compressionoptions",3]],[[],["compressionoptions",3]],[[]],[[]],[[]],[[]],null,null,null,[[["compressionoptions",3]],["bool",15]],[[["compression",4]],[["ordering",4],["option",4]]],[[["matchingtype",4]],[["ordering",4],["option",4]]],[[],["compressionoptions",3]],null,[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[],["u32",15]],[[]],[[]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[]],[[]],[[]],[[]],[[["compressionoptions",3],["into",8]],["deflateencoder",3]],[[["compressionoptions",3],["into",8]],["zlibencoder",3]],[[],["result",6]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["result",6],["usize",15]]],[[],[["result",6],["usize",15]]]],"p":[[4,"Compression"],[4,"MatchingType"],[4,"SpecialOptions"],[3,"CompressionOptions"],[3,"DeflateEncoder"],[3,"ZlibEncoder"]]},\
"diffuse":{"doc":"Diffusion simulation binary. Compute the time evolution …","t":[17,5,5,5],"n":["BACKUP_TERM_WIDTH","initialisation","load_parameters","main"],"q":["diffuse","","",""],"d":["Backup print width if the terminal width can not be …","Initialise the input arguments.","Load the required files and form the input parameters.","Main simulation function."],"i":[0,0,0,0],"f":[null,[[["usize",15]]],[[["path",3],["usize",15]],["parameters",3]],[[]]],"p":[]},\
"either":{"doc":"The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","t":[4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11],"n":["Either","Left","Right","all","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","borrow","borrow_mut","clone","cmp","collect","count","deref","deref_mut","either","either_with","eq","expect_left","expect_right","extend","factor_first","factor_second","flip","fmt","fmt","fold","from","from","hash","into","into","into_inner","into_iter","into_iter","is_left","is_right","last","left","left_and_then","left_or","left_or_default","left_or_else","map","map_left","map_right","ne","next","next_back","nth","partial_cmp","right","right_and_then","right_or","right_or_default","right_or_else","size_hint","try_from","try_into","try_left","try_right","type_id","unwrap_left","unwrap_right"],"q":["either","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","A value of type <code>L</code>.","A value of type <code>R</code>.","","Convert <code>&mut Either<L, R></code> to <code>Either<&mut L, &mut R></code>.","","","","Convert <code>&Either<L, R></code> to <code>Either<&L, &R></code>.","","","","","","","","","","","","Apply one of two functions depending on contents, …","Like <code>either</code>, but provide some context to whichever of the …","","Returns the left value","Returns the right value","","Factor out a homogeneous type from an either of pairs.","Factor out a homogeneous type from an either of pairs.","Convert <code>Either<L, R></code> to <code>Either<R, L></code>.","","","","","","","","","Extract the value of an either over two equivalent types.","Convert the inner value to an iterator.","","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","","Convert the left side of <code>Either<L, R></code> to an <code>Option<L></code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","Map <code>f</code> over the contained value and return the result in …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","","","","","","Convert the right side of <code>Either<L, R></code> to an <code>Option<R></code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","","","Macro for unwrapping the left side of an <code>Either</code>, which …","Dual to <code>try_left!</code>, see its documentation for more …","","Returns the left value","Returns the right value"],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1],"f":[null,null,null,[[],["bool",15]],[[],["either",4]],[[]],[[],["str",15]],[[]],[[],["either",4]],[[]],[[],["str",15]],[[]],[[]],[[]],[[],["either",4]],[[["either",4]],["ordering",4]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["either",4]],["bool",15]],[[["str",15]]],[[["str",15]]],[[]],[[]],[[]],[[],["either",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["result",4]]],[[]],[[],["result",4]],[[]],[[]],[[],["either",4]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["either",4]],[[]],[[]],[[]],[[],["either",4]],[[],["either",4]],[[],["either",4]],[[["either",4]],["bool",15]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["either",4]],[["ordering",4],["option",4]]],[[],["option",4]],[[],["either",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],null,null,[[],["typeid",3]],[[]],[[]]],"p":[[4,"Either"]]},\
"flask":{"doc":"Chemical network simulation binary. Compute the time …","t":[17,5,5,5,5],"n":["BACKUP_TERM_WIDTH","initialisation","load_parameters","main","save"],"q":["flask","","","",""],"d":["Backup print width if the terminal width can not be …","Initialise the input arguments.","Load the required files and form the input parameters.","Main simulation function.","Save the output data."],"i":[0,0,0,0,0],"f":[null,[[["usize",15]]],[[["path",3],["usize",15]],["parameters",3]],[[]],[[["input",3],["array2",6],["f64",15],["path",3]]]],"p":[]},\
"getrandom":{"doc":"Interface to the operating system’s random number …","t":[18,18,3,18,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11],"n":["CUSTOM_START","ERRNO_NOT_POSITIVE","Error","FAILED_RDRAND","INTERNAL_START","IOS_SEC_RANDOM","NODE_CRYPTO","NODE_RANDOM_FILL_SYNC","NO_RDRAND","UNSUPPORTED","VXWORKS_RAND_SECURE","WEB_CRYPTO","WEB_GET_RANDOM_VALUES","WINDOWS_RTL_GEN_RANDOM","borrow","borrow_mut","clone","clone_into","code","eq","fmt","fmt","from","from","getrandom","into","ne","raw_os_error","to_owned","to_string","try_from","try_into","type_id"],"q":["getrandom","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Codes at or above this point can be used by users to …","The platform-specific <code>errno</code> returned a non-positive value.","A small and <code>no_std</code> compatible error type","RDRAND instruction failed due to a hardware issue.","Codes below this point represent OS Errors (i.e. positive …","Call to iOS <code>SecRandomCopyBytes</code> failed.","NodeJS does not have support for the <code>crypto</code> module.","NodeJS does not have support for <code>crypto.randomFillSync</code>.","RDRAND instruction unsupported on this target.","This target/platform is not supported by <code>getrandom</code>.","On VxWorks, call to <code>randSecure</code> failed (random number …","The browser does not have support for <code>self.crypto</code>.","The browser does not have support for …","Call to Windows <code>RtlGenRandom</code> failed.","","","","","Extract the bare error code.","","","","","","Fill <code>dest</code> with random bytes from the system’s preferred …","","","Extract the raw OS error code (if this error came from …","","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["error",3]],[[]],[[],["nonzerou32",3]],[[["error",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["nonzerou32",3]]],[[]],[[],[["error",3],["result",4]]],[[]],[[["error",3]],["bool",15]],[[],[["option",4],["i32",15]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Error"]]},\
"hashbrown":{"doc":"This crate is a Rust port of Google’s high-performance …","t":[13,13,3,3,4,11,11,11,11,11,11,11,0,0,11,11,0,11,11,11,11,12,4,3,3,4,3,3,3,3,3,13,13,3,3,3,4,3,3,13,13,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AllocError","CapacityOverflow","HashMap","HashSet","TryReserveError","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash_map","hash_set","into","ne","raw","to_owned","try_from","try_into","type_id","layout","DefaultHashBuilder","Drain","DrainFilter","Entry","HashMap","IntoIter","Iter","IterMut","Keys","Occupied","Occupied","OccupiedEntry","RawEntryBuilder","RawEntryBuilderMut","RawEntryMut","RawOccupiedEntryMut","RawVacantEntryMut","Vacant","Vacant","VacantEntry","Values","ValuesMut","and_modify","and_modify","and_replace_entry_with","and_replace_entry_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","contains_key","default","drain","drain_filter","drop","entry","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hash","from_hash","from_iter","from_key","from_key","from_key_hashed_nocheck","from_key_hashed_nocheck","get","get","get","get_key_value","get_key_value","get_key_value_mut","get_key_value_mut","get_mut","get_mut","get_mut","hasher","index","insert","insert","insert","insert","insert","insert","insert","insert_hashed_nocheck","insert_key","insert_with_hasher","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_key","into_key_value","into_mut","into_mut","is_empty","iter","iter_mut","key","key","key","key","key_mut","keys","len","len","len","len","len","len","len","len","next","next","next","next","next","next","next","next","or_default","or_insert","or_insert","or_insert_with","or_insert_with","or_insert_with_key","raw_entry","raw_entry_mut","remove","remove","remove","remove_entry","remove_entry","remove_entry","replace_entry","replace_entry_with","replace_entry_with","replace_key","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity_and_hasher","with_hasher","Difference","Drain","DrainFilter","HashSet","Intersection","IntoIter","Iter","SymmetricDifference","Union","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","default","difference","drain","drain_filter","drop","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_iter","get","get_or_insert","get_or_insert_owned","get_or_insert_with","hasher","insert","intersection","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","len","len","len","len","next","next","next","next","next","next","next","next","remove","replace","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity_and_hasher","with_hasher","Bucket","RawDrain","RawIntoIter","RawIter","RawIterHash","RawTable","as_mut","as_ptr","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bucket","bucket_index","buckets","capacity","clear","clear_no_drop","clone","clone","clone","clone_from","clone_from_with_hasher","clone_into","clone_into","clone_into","copy_from_nonoverlapping","data_end","drain","drain_iter_from","drop","drop","drop","drop","erase","erase_entry","erase_no_drop","find","from","from","from","from","from","from","get","get_mut","insert","insert_entry","insert_no_grow","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter_from","iter","iter","iter","iter_hash","len","new","next","next","next","next","read","reflect_insert","reflect_remove","remove","remove_entry","replace_bucket_with","reserve","shrink_to","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","try_with_capacity","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","write"],"q":["hashbrown","","","","","","","","","","","","","","","","","","","","","hashbrown::TryReserveError","hashbrown::hash_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hashbrown::hash_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hashbrown::raw","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The memory allocator returned an error","Error due to the computed capacity exceeding the …","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","The error type for <code>try_reserve</code> methods.","","","","","","","","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","","","Experimental and unsafe <code>RawTable</code> API. This module is only …","","","","","The layout of the allocation request that failed.","Dummy default hasher for <code>HashMap</code>.","A draining iterator over the entries of a <code>HashMap</code>.","A draining iterator over entries of a <code>HashMap</code> which don’…","A view into a single entry in a map, which may either be …","A hash map implemented with quadratic probing and SIMD …","An owning iterator over the entries of a <code>HashMap</code>.","An iterator over the entries of a <code>HashMap</code>.","A mutable iterator over the entries of a <code>HashMap</code>.","An iterator over the keys of a <code>HashMap</code>.","An occupied entry.","An occupied entry.","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A builder for computing where in a [<code>HashMap</code>] a key-value …","A builder for computing where in a [<code>HashMap</code>] a key-value …","A view into a single entry in a map, which may either be …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into a vacant entry in a <code>HashMap</code>. It is part of …","A vacant entry.","A vacant entry.","A view into a vacant entry in a <code>HashMap</code>. It is part of …","An iterator over the values of a <code>HashMap</code>.","A mutable iterator over the values of a <code>HashMap</code>.","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the map can hold without …","Clears the map, removing all key-value pairs. Keeps the …","","","","","","","","","","Returns <code>true</code> if the map contains a value for the …","Creates an empty <code>HashMap<K, V, S></code>, with the <code>Default</code> value …","Clears the map, returning all key-value pairs as an …","Drains elements which are true under the given predicate, …","","Gets the given key’s corresponding entry in the map for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>RawEntryMut</code> from the given hash.","Access an entry by hash.","","Creates a <code>RawEntryMut</code> from the given key.","Access an entry by key.","Creates a <code>RawEntryMut</code> from the given key and its hash.","Access an entry by a key and its hash.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a reference to the key and value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a mutable reference to the key and value in the …","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Returns a reference to the map’s <code>BuildHasher</code>.","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Sets the value of the entry, and returns a …","Sets the value of the entry, and returns the entry’s …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry, and returns the entry’s …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns the entry’s …","Set the value of an entry with a custom hasher function.","","","","","","","","","","","","","","","","","","","Creates a consuming iterator, that is, one that moves …","","","","","","","","","Converts the entry into a mutable reference to the key in …","Take ownership of the key.","Converts the OccupiedEntry into a mutable reference to …","Converts the OccupiedEntry into a mutable reference to …","Converts the OccupiedEntry into a mutable reference to …","Returns <code>true</code> if the map contains no elements.","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","Gets a reference to the key in the entry.","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Gets a mutable reference to the key in the entry.","An iterator visiting all keys in arbitrary order. The …","Returns the number of elements in the map.","","","","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result …","Ensures a value is in the entry by inserting the result …","Ensures a value is in the entry by inserting, if empty, …","Creates a raw immutable entry builder for the HashMap.","Creates a raw entry builder for the HashMap.","Removes a key from the map, returning the value at the …","Takes the value out of the entry, and returns it.","Takes the value out of the entry, and returns it.","Removes a key from the map, returning the stored key and …","Take the ownership of the key and value from the map.","Take the ownership of the key and value from the map.","Replaces the entry, returning the old key and value. The …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Replaces the key in the hash map with the key used to …","Reserves capacity for at least <code>additional</code> more elements …","Retains only the elements specified by the predicate.","Shrinks the capacity of the map with a lower limit. It …","Shrinks the capacity of the map as much as possible. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","","","","","","","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary …","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> which will use the given hash …","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>HashSet</code>.","A draining iterator over entries of a <code>HashSet</code> which don’…","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>HashSet</code>.","An iterator over the items of a <code>HashSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>HashSet</code>…","","","","","","","","","","","","","","","","","","","Returns the number of elements the set can hold without …","Clears the set, removing all values.","","","","","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Creates an empty <code>HashSet<T, S></code> with the <code>Default</code> value for …","Visits the values representing the difference, i.e., the …","Clears the set, returning all elements in an iterator.","Drains elements which are true under the given predicate, …","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value in the set, if any, that …","Inserts the given <code>value</code> into the set if it is not …","Inserts an owned copy of the given <code>value</code> into the set if …","Inserts a value computed from <code>f</code> into the set if the given …","Returns a reference to the set’s <code>BuildHasher</code>.","Adds a value to the set.","Visits the values representing the intersection, i.e., …","","","","","","","","","","Creates a consuming iterator, that is, one that moves …","","","","","","","","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.…","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the set is a subset of another, i.e., …","Returns <code>true</code> if the set is a superset of another, i.e., …","An iterator visiting all elements in arbitrary order. The …","Returns the number of elements in the set.","","","","","","","","","","","","Removes a value from the set. Returns whether the value …","Adds a value to the set, replacing the existing value, if …","Reserves capacity for at least <code>additional</code> more elements …","Retains only the elements specified by the predicate.","Shrinks the capacity of the set with a lower limit. It …","Shrinks the capacity of the set as much as possible. It …","","","","","","","","","Visits the values representing the symmetric difference, …","Removes and returns the value in the set, if any, that is …","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","Visits the values representing the union, i.e., all the …","Creates an empty <code>HashSet</code> with the specified capacity, …","Creates a new empty hash set which will use the given …","A reference to a hash table bucket containing a <code>T</code>.","Iterator which consumes elements without freeing the …","Iterator which consumes a table and returns elements.","Iterator which returns a raw pointer to every full bucket …","Iterator over occupied buckets that could match a given …","A raw hash table with an unsafe API.","","","","","","","","","","","","","","","","Returns a pointer to an element in the table.","Returns the index of a bucket from a <code>Bucket</code>.","Returns the number of buckets in the table.","Returns the number of elements the map can hold without …","Removes all elements from the table without freeing the …","Marks all table buckets as empty without dropping their …","","","","","Variant of <code>clone_from</code> to use when a hasher is available.","","","","","Returns pointer to one past last element of data table.","Returns an iterator which removes all elements from the …","Returns an iterator which removes all elements from the …","","","","","Erases an element from the table, dropping it in place.","Finds and erases an element from the table, dropping it …","Erases an element from the table without dropping it.","Searches for an element in the table.","","","","","","","Gets a reference to an element in the table.","Gets a mutable reference to an element in the table.","Inserts a new element into the table, and returns its raw …","Inserts a new element into the table, and returns a …","Inserts a new element into the table, without growing the …","","","","","","","","","","","","Returns an iterator which consumes all elements from the …","Returns an iterator over every element in the table. It …","","","Returns an iterator over occupied buckets that could …","Returns the number of elements in the table.","Creates a new empty hash table without allocating any …","","","","","","Refresh the iterator so that it reflects an insertion …","Refresh the iterator so that it reflects a removal from …","Removes an element from the table, returning it.","Finds and removes an element from the table, returning it.","Temporary removes a bucket, applying the given function …","Ensures that at least <code>additional</code> items can be inserted …","Shrinks the table to fit <code>max(self.len(), min_size)</code> …","","","","","","","","","","","","","","","","","","","Tries to ensure that at least <code>additional</code> items can be …","Attempts to allocate a new hash table with at least …","","","","","","","Allocates a new hash table with at least enough capacity …",""],"i":[1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,1,2,0,0,0,0,0,0,0,0,0,3,4,0,0,0,0,0,0,3,4,0,0,0,3,4,3,4,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,6,6,6,7,10,11,6,6,7,10,11,6,6,6,6,13,6,6,6,6,6,7,8,9,10,11,12,14,15,3,16,17,18,4,19,20,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,15,18,6,15,18,15,18,6,16,19,6,16,6,16,6,16,19,6,6,6,3,16,17,4,19,20,17,16,17,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,6,7,8,9,10,11,12,13,14,16,20,16,16,19,6,6,6,16,4,19,20,16,6,6,7,8,9,10,11,12,14,7,8,9,10,11,12,13,14,4,3,4,3,4,4,6,6,6,16,19,6,16,19,19,16,19,19,6,6,6,6,7,8,9,10,11,12,13,14,6,7,10,11,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,6,5,6,7,8,9,10,11,12,13,14,15,3,16,17,18,4,19,20,6,6,6,6,0,0,0,0,0,0,0,0,0,21,22,23,24,25,26,27,28,29,21,22,23,24,25,26,27,28,29,21,21,21,22,26,27,28,29,21,21,22,26,27,28,29,21,21,21,21,21,25,21,21,21,21,22,23,24,26,27,28,29,21,22,23,24,25,26,27,28,29,21,21,21,21,21,21,21,21,21,22,23,24,25,26,27,28,29,21,22,23,24,25,26,27,28,29,21,21,21,21,21,21,22,23,24,22,23,24,25,26,27,28,29,21,21,21,21,21,21,22,23,24,25,26,27,28,29,21,21,21,22,26,27,28,29,21,22,23,24,25,26,27,28,29,21,22,23,24,25,26,27,28,29,21,21,22,23,24,25,26,27,28,29,21,21,21,0,0,0,0,0,0,30,30,30,30,31,32,33,34,35,30,31,32,33,34,35,31,31,31,31,31,31,30,31,32,31,31,30,31,32,30,31,31,31,30,31,33,34,31,31,31,31,30,31,32,33,34,35,31,31,31,31,31,30,31,32,33,34,35,31,32,33,34,35,31,31,33,34,31,31,31,32,33,34,35,30,32,32,31,31,31,31,31,32,33,34,30,31,32,30,31,32,33,34,35,30,31,32,33,34,35,31,31,30,31,32,33,34,35,31,30],"f":[null,null,null,null,null,[[]],[[]],[[],["tryreserveerror",4]],[[]],[[["tryreserveerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],null,null,[[]],[[["tryreserveerror",4]],["bool",15]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["drain",3]],[[],["drainfilter",3]],[[]],[[],["entry",4]],[[],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["rawentrymut",4]],[[["u64",15]],["option",4]],[[["intoiterator",8]]],[[],["rawentrymut",4]],[[],["option",4]],[[["u64",15]],["rawentrymut",4]],[[["u64",15]],["option",4]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["rawoccupiedentrymut",3]],[[]],[[]],[[],["occupiedentry",3]],[[]],[[]],[[["u64",15]]],[[]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[]],[[]],[[]],[[]],[[]],[[],["keys",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[["fnonce",8]]],[[["fnonce",8]]],[[],["rawentrybuilder",3]],[[],["rawentrybuildermut",3]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[],["rawentrymut",4]],[[],["entry",4]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],[["result",4],["tryreserveerror",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["values",3]],[[],["valuesmut",3]],[[["usize",15]]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["difference",3]],[[],["drain",3]],[[],["drainfilter",3]],[[]],[[],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["intersection",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["option",4]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["symmetricdifference",3]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],[["result",4],["tryreserveerror",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["union",3]],[[["usize",15]]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["bucket",3]],[[["bucket",3]],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["nonnull",3]],[[],["rawdrain",3]],[[["rawiter",3]],["rawdrain",3]],[[]],[[]],[[]],[[]],[[["bucket",3]]],[[["u64",15]],["bool",15]],[[["bucket",3]]],[[["u64",15]],[["bucket",3],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["bucket",3]],[[["u64",15]]],[[["u64",15]],["bucket",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rawintoiter",3]],[[]],[[]],[[]],[[]],[[["rawiter",3]],["rawintoiter",3]],[[],["rawiter",3]],[[],["rawiter",3]],[[],["rawiter",3]],[[["u64",15]],["rawiterhash",3]],[[],["usize",15]],[[]],[[],[["bucket",3],["option",4]]],[[],["option",4]],[[],["option",4]],[[],[["bucket",3],["option",4]]],[[]],[[["bucket",3]]],[[["bucket",3]]],[[["bucket",3]]],[[["u64",15]],["option",4]],[[["bucket",3]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],[["result",4],["tryreserveerror",4]]],[[["usize",15]],[["result",4],["tryreserveerror",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]]],[[]]],"p":[[4,"TryReserveError"],[13,"AllocError"],[4,"RawEntryMut"],[4,"Entry"],[4,"DefaultHashBuilder"],[3,"HashMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"DrainFilter"],[3,"ValuesMut"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"DrainFilter"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"Bucket"],[3,"RawTable"],[3,"RawIter"],[3,"RawIntoIter"],[3,"RawDrain"],[3,"RawIterHash"]]},\
"hdf5_sys":{"doc":"","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,13,13,13,17,13,17,13,13,13,17,13,3,4,4,5,5,5,5,5,5,5,5,5,5,5,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,12,6,6,6,6,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,17,17,17,17,17,17,3,3,12,12,12,11,11,11,11,11,11,11,11,12,12,12,11,11,12,12,12,12,12,12,12,12,12,11,11,11,12,12,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,11,11,12,11,11,11,11,11,11,12,12,12,4,4,4,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,17,17,17,17,17,17,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,6,6,4,4,6,4,4,4,4,6,6,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,17,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,13,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,13,13,7,6,4,3,4,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,12,11,11,11,11,11,11,12,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,17,17,17,17,17,17,17,17,17,13,13,13,13,17,13,13,13,13,13,13,13,13,13,13,13,13,13,17,13,13,13,17,17,17,17,17,17,17,17,13,13,17,4,4,6,4,3,3,3,3,3,3,4,4,3,4,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,17,17,17,17,17,17,17,17,17,17,17,17,13,13,13,13,13,13,13,13,7,7,7,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,5,5,3,4,3,5,6,5,5,5,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,17,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,12,12,12,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,12,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,17,17,17,17,17,17,17,13,13,13,13,5,3,6,4,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,17,13,13,13,13,13,13,6,6,6,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,6,11,11,11,11,11,11,17,17,17,17,13,13,13,13,13,17,3,6,6,6,6,3,3,3,19,6,6,6,6,6,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,11,12,6,6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,13,13,13,17,17,17,17,17,17,17,17,17,17,17,17,7,13,13,13,13,13,13,3,3,3,3,3,3,6,6,6,4,6,3,3,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,5,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,17,17,17,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,7,7,7,7,7,7,7,7,17,17,13,13,13,13,4,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,17,3,19,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,17,17,13,13,13,13,17,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,7,13,13,13,13,13,7,7,7,7,7,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,13,17,13,13,13,13,13,13,13,17,13,17,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,7,7,7,7,17,7,7,13,4,3,4,4,6,4,4,6,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,5,5,5,5,5,5,5,5,5,5,5,13,13,13,13,17,13,4,13,13,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,13,17,17,17,13,13,13,17,4,17,17,17,17,17,17,6,4,3,3,6,6,6,6,5,5,5,5,17,17,17,17,17,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["h5","h5a","h5ac","h5c","h5d","h5e","h5f","h5fd","h5g","h5i","h5l","h5mm","h5o","h5p","h5pl","h5r","h5s","h5t","h5vl","h5z","H5_INDEX_CRT_ORDER","H5_INDEX_N","H5_INDEX_NAME","H5_INDEX_UNKNOWN","H5_ITER_CONT","H5_ITER_DEC","H5_ITER_ERROR","H5_ITER_INC","H5_ITER_N","H5_ITER_NATIVE","H5_ITER_STOP","H5_ITER_UNKNOWN","H5_ih_info_t","H5_index_t","H5_iter_order_t","H5allocate_memory","H5check_version","H5close","H5dont_atexit","H5free_memory","H5garbage_collect","H5get_libversion","H5is_library_threadsafe","H5open","H5resize_memory","H5set_free_list_limits","HADDR_MAX","HADDR_UNDEF","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","eq","eq","fmt","fmt","fmt","from","from","from","haddr_t","hbool_t","heap_size","herr_t","hsize_t","hssize_t","htri_t","index_size","into","into","into","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","H5A_info_t","H5A_operator2_t","H5Aclose","H5Acreate2","H5Acreate_by_name","H5Adelete","H5Adelete_by_idx","H5Adelete_by_name","H5Aexists","H5Aexists_by_name","H5Aget_create_plist","H5Aget_info","H5Aget_info_by_idx","H5Aget_info_by_name","H5Aget_name","H5Aget_name_by_idx","H5Aget_space","H5Aget_storage_size","H5Aget_type","H5Aiterate2","H5Aiterate_by_name","H5Aopen","H5Aopen_by_idx","H5Aopen_by_name","H5Aread","H5Arename","H5Arename_by_name","H5Awrite","borrow","borrow_mut","clone","clone_into","corder","corder_valid","cset","data_size","default","from","into","to_owned","try_from","try_into","type_id","H5AC_METADATA_WRITE_STRATEGY__DISTRIBUTED","H5AC_METADATA_WRITE_STRATEGY__PROCESS_0_ONLY","H5AC__CACHE_IMAGE__ENTRY_AGEOUT__MAX","H5AC__CACHE_IMAGE__ENTRY_AGEOUT__NONE","H5AC__CURR_CACHE_CONFIG_VERSION","H5AC__MAX_TRACE_FILE_NAME_LEN","H5AC_cache_config_t","H5AC_cache_image_config_t","apply_empty_reserve","apply_max_decrement","apply_max_increment","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","close_trace_file","decr_mode","decrement","default","default","dirty_bytes_threshold","empty_reserve","entry_ageout","epoch_length","epochs_before_eviction","evictions_enabled","flash_incr_mode","flash_multiple","flash_threshold","fmt","from","from","generate_image","incr_mode","increment","initial_size","into","into","lower_hr_threshold","max_decrement","max_increment","max_size","metadata_write_strategy","min_clean_fraction","min_size","open_trace_file","rpt_fcn_enabled","save_resize_status","set_initial_size","to_owned","to_owned","trace_file_name","try_from","try_from","try_into","try_into","type_id","type_id","upper_hr_threshold","version","version","H5C_cache_decr_mode","H5C_cache_flash_incr_mode","H5C_cache_incr_mode","H5C_decr__age_out","H5C_decr__age_out_with_threshold","H5C_decr__off","H5C_decr__threshold","H5C_flash_incr__add_space","H5C_flash_incr__off","H5C_incr__off","H5C_incr__threshold","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","partial_cmp","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","H5D_ALLOC_TIME_DEFAULT","H5D_ALLOC_TIME_EARLY","H5D_ALLOC_TIME_ERROR","H5D_ALLOC_TIME_INCR","H5D_ALLOC_TIME_LATE","H5D_CHUNKED","H5D_CHUNK_BTREE","H5D_CHUNK_CACHE_NBYTES_DEFAULT","H5D_CHUNK_CACHE_NSLOTS_DEFAULT","H5D_CHUNK_CACHE_W0_DEFAULT","H5D_CHUNK_DONT_FILTER_PARTIAL_CHUNKS","H5D_CHUNK_IDX_BTREE","H5D_COMPACT","H5D_CONTIGUOUS","H5D_FILL_TIME_ALLOC","H5D_FILL_TIME_ERROR","H5D_FILL_TIME_IFSET","H5D_FILL_TIME_NEVER","H5D_FILL_VALUE_DEFAULT","H5D_FILL_VALUE_ERROR","H5D_FILL_VALUE_UNDEFINED","H5D_FILL_VALUE_USER_DEFINED","H5D_LAYOUT_ERROR","H5D_MPIO_CHUNK_COLLECTIVE","H5D_MPIO_CHUNK_INDEPENDENT","H5D_MPIO_CHUNK_MIXED","H5D_MPIO_COLLECTIVE","H5D_MPIO_CONTIGUOUS_COLLECTIVE","H5D_MPIO_DATATYPE_CONVERSION","H5D_MPIO_DATA_TRANSFORMS","H5D_MPIO_FILTERS","H5D_MPIO_LINK_CHUNK","H5D_MPIO_MPI_OPT_TYPES_ENV_VAR_DISABLED","H5D_MPIO_MULTI_CHUNK","H5D_MPIO_NOT_CONTIGUOUS_OR_CHUNKED_DATASET","H5D_MPIO_NOT_SIMPLE_OR_SCALAR_DATASPACES","H5D_MPIO_NO_CHUNK_OPTIMIZATION","H5D_MPIO_NO_COLLECTIVE","H5D_MPIO_SET_INDEPENDENT","H5D_NLAYOUTS","H5D_SPACE_STATUS_ALLOCATED","H5D_SPACE_STATUS_ERROR","H5D_SPACE_STATUS_NOT_ALLOCATED","H5D_SPACE_STATUS_PART_ALLOCATED","H5D_VDS_ERROR","H5D_VDS_FIRST_MISSING","H5D_VDS_LAST_AVAILABLE","H5D_VIRTUAL","H5D_alloc_time_t","H5D_append_cb_t","H5D_chunk_index_t","H5D_fill_time_t","H5D_fill_value_t","H5D_gather_func_t","H5D_layout_t","H5D_mpio_actual_chunk_opt_mode_t","H5D_mpio_actual_io_mode_t","H5D_mpio_no_collective_cause_t","H5D_operator_t","H5D_scatter_func_t","H5D_space_status_t","H5D_vds_view_t","H5Dclose","H5Dcreate2","H5Dcreate_anon","H5Ddebug","H5Dfill","H5Dflush","H5Dformat_convert","H5Dgather","H5Dget_access_plist","H5Dget_chunk_index_type","H5Dget_chunk_info","H5Dget_chunk_info_by_coord","H5Dget_create_plist","H5Dget_num_chunks","H5Dget_offset","H5Dget_space","H5Dget_space_status","H5Dget_storage_size","H5Dget_type","H5Diterate","H5Dopen2","H5Dread","H5Dread_chunk","H5Drefresh","H5Dscatter","H5Dset_extent","H5Dvlen_get_buf_size","H5Dvlen_reclaim","H5Dwrite","H5Dwrite_chunk","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","H5E_ALIGNMENT","H5E_ALREADYEXISTS","H5E_ALREADYINIT","H5E_ARGS","H5E_ATOM","H5E_ATTR","H5E_BADATOM","H5E_BADFILE","H5E_BADGROUP","H5E_BADITER","H5E_BADMESG","H5E_BADRANGE","H5E_BADSELECT","H5E_BADSIZE","H5E_BADTYPE","H5E_BADVALUE","H5E_BTREE","H5E_CACHE","H5E_CALLBACK","H5E_CANAPPLY","H5E_CANTALLOC","H5E_CANTATTACH","H5E_CANTCLIP","H5E_CANTCLOSEFILE","H5E_CANTCLOSEOBJ","H5E_CANTCOMPARE","H5E_CANTCOMPUTE","H5E_CANTCONVERT","H5E_CANTCOPY","H5E_CANTCOUNT","H5E_CANTCREATE","H5E_CANTDEC","H5E_CANTDECODE","H5E_CANTDELETE","H5E_CANTDIRTY","H5E_CANTENCODE","H5E_CANTEXPUNGE","H5E_CANTEXTEND","H5E_CANTFILTER","H5E_CANTFLUSH","H5E_CANTFREE","H5E_CANTGC","H5E_CANTGET","H5E_CANTGETSIZE","H5E_CANTINC","H5E_CANTINIT","H5E_CANTINS","H5E_CANTINSERT","H5E_CANTLIST","H5E_CANTLOAD","H5E_CANTLOCK","H5E_CANTMARKDIRTY","H5E_CANTMERGE","H5E_CANTMODIFY","H5E_CANTMOVE","H5E_CANTNEXT","H5E_CANTOPENFILE","H5E_CANTOPENOBJ","H5E_CANTOPERATE","H5E_CANTPACK","H5E_CANTPIN","H5E_CANTPROTECT","H5E_CANTRECV","H5E_CANTREDISTRIBUTE","H5E_CANTREGISTER","H5E_CANTRELEASE","H5E_CANTREMOVE","H5E_CANTRENAME","H5E_CANTRESET","H5E_CANTRESIZE","H5E_CANTRESTORE","H5E_CANTREVIVE","H5E_CANTSELECT","H5E_CANTSERIALIZE","H5E_CANTSET","H5E_CANTSHRINK","H5E_CANTSORT","H5E_CANTSPLIT","H5E_CANTSWAP","H5E_CANTUNLOCK","H5E_CANTUNPIN","H5E_CANTUNPROTECT","H5E_CANTUPDATE","H5E_CLOSEERROR","H5E_COMPLEN","H5E_DATASET","H5E_DATASPACE","H5E_DATATYPE","H5E_DEFAULT","H5E_DUPCLASS","H5E_EFL","H5E_ERROR","H5E_ERR_CLS","H5E_EXISTS","H5E_FCNTL","H5E_FILE","H5E_FILEEXISTS","H5E_FILEOPEN","H5E_FSPACE","H5E_FUNC","H5E_HEAP","H5E_INTERNAL","H5E_IO","H5E_LINK","H5E_LINKCOUNT","H5E_MAJOR","H5E_MINOR","H5E_MOUNT","H5E_MPI","H5E_MPIERRSTR","H5E_NLINKS","H5E_NOENCODER","H5E_NOFILTER","H5E_NOIDS","H5E_NONE_MAJOR","H5E_NONE_MINOR","H5E_NOSPACE","H5E_NOTCACHED","H5E_NOTFOUND","H5E_NOTHDF5","H5E_NOTREGISTERED","H5E_OBJOPEN","H5E_OHDR","H5E_OPENERROR","H5E_OVERFLOW","H5E_PATH","H5E_PLINE","H5E_PLIST","H5E_PLUGIN","H5E_PROTECT","H5E_READERROR","H5E_REFERENCE","H5E_RESOURCE","H5E_RS","H5E_SEEKERROR","H5E_SETDISALLOWED","H5E_SETLOCAL","H5E_SLIST","H5E_SOHM","H5E_STORAGE","H5E_SYM","H5E_SYSERRSTR","H5E_SYSTEM","H5E_TRAVERSE","H5E_TRUNCATED","H5E_TST","H5E_UNINITIALIZED","H5E_UNSUPPORTED","H5E_VERSION","H5E_VFL","H5E_WALK_DOWNWARD","H5E_WALK_UPWARD","H5E_WRITEERROR","H5E_auto2_t","H5E_direction_t","H5E_error2_t","H5E_type_t","H5E_walk2_t","H5Eauto_is_v2","H5Eclear2","H5Eclose_msg","H5Eclose_stack","H5Ecreate_msg","H5Ecreate_stack","H5Eget_auto2","H5Eget_class_name","H5Eget_current_stack","H5Eget_msg","H5Eget_num","H5Epop","H5Eprint2","H5Epush2","H5Eregister_class","H5Eset_auto2","H5Eset_current_stack","H5Eunregister_class","H5Ewalk2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cls_id","default","desc","eq","eq","file_name","fmt","fmt","fmt","from","from","from","func_name","into","into","into","line","maj_num","min_num","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","H5FD_MEM_BTREE","H5FD_MEM_DEFAULT","H5FD_MEM_DRAW","H5FD_MEM_GHEAP","H5FD_MEM_LHEAP","H5FD_MEM_NOLIST","H5FD_MEM_NTYPES","H5FD_MEM_OHDR","H5FD_MEM_SUPER","H5F_ACC_CREAT","H5F_ACC_DEBUG","H5F_ACC_DEFAULT","H5F_ACC_EXCL","H5F_ACC_RDONLY","H5F_ACC_RDWR","H5F_ACC_SWMR_READ","H5F_ACC_SWMR_WRITE","H5F_ACC_TRUNC","H5F_CLOSE_DEFAULT","H5F_CLOSE_SEMI","H5F_CLOSE_STRONG","H5F_CLOSE_WEAK","H5F_FAMILY_DEFAULT","H5F_FILE_SPACE_AGGR_VFD","H5F_FILE_SPACE_ALL","H5F_FILE_SPACE_ALL_PERSIST","H5F_FILE_SPACE_DEFAULT","H5F_FILE_SPACE_NTYPES","H5F_FILE_SPACE_VFD","H5F_FSPACE_STRATEGY_AGGR","H5F_FSPACE_STRATEGY_FSM_AGGR","H5F_FSPACE_STRATEGY_NONE","H5F_FSPACE_STRATEGY_NTYPES","H5F_FSPACE_STRATEGY_PAGE","H5F_LIBVER_EARLIEST","H5F_LIBVER_ERROR","H5F_LIBVER_LATEST","H5F_LIBVER_NBOUNDS","H5F_LIBVER_V110","H5F_LIBVER_V18","H5F_MPIO_DEBUG_KEY","H5F_OBJ_ALL","H5F_OBJ_ATTR","H5F_OBJ_DATASET","H5F_OBJ_DATATYPE","H5F_OBJ_FILE","H5F_OBJ_GROUP","H5F_OBJ_LOCAL","H5F_SCOPE_GLOBAL","H5F_SCOPE_LOCAL","H5F_UNLIMITED","H5F_close_degree_t","H5F_file_space_type_t","H5F_flush_cb_t","H5F_fspace_strategy_t","H5F_info2_t","H5F_info2_t__free","H5F_info2_t__sohm","H5F_info2_t__super","H5F_info_t","H5F_info_t__sohm","H5F_libver_t","H5F_mem_t","H5F_retry_info_t","H5F_scope_t","H5F_sect_info_t","H5Fclear_elink_file_cache","H5Fclose","H5Fcreate","H5Fdelete","H5Fflush","H5Fformat_convert","H5Fget_access_plist","H5Fget_create_plist","H5Fget_dset_no_attrs_hint","H5Fget_file_image","H5Fget_fileno","H5Fget_filesize","H5Fget_free_sections","H5Fget_freespace","H5Fget_info","H5Fget_info1","H5Fget_info2","H5Fget_intent","H5Fget_mdc_config","H5Fget_mdc_hit_rate","H5Fget_mdc_image_info","H5Fget_mdc_size","H5Fget_metadata_read_retry_info","H5Fget_name","H5Fget_obj_count","H5Fget_obj_ids","H5Fget_page_buffering_stats","H5Fget_vfd_handle","H5Fis_accessible","H5Fis_hdf5","H5Fmount","H5Fopen","H5Freopen","H5Freset_mdc_hit_rate_stats","H5Freset_page_buffering_stats","H5Fset_dset_no_attrs_hint","H5Fset_latest_format","H5Fset_mdc_config","H5Fstart_mdc_logging","H5Fstart_swmr_write","H5Fstop_mdc_logging","H5Funmount","addr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","free","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hdr_size","hdr_size","into","into","into","into","into","into","into","into","into","into","into","into","into","into","meta_size","msgs_info","msgs_info","nbins","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","retries","size","sohm","sohm","super_","super_ext_size","super_ext_size","super_size","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","tot_space","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","version","version","H5FD_FEAT_ACCUMULATE_METADATA","H5FD_FEAT_ACCUMULATE_METADATA_READ","H5FD_FEAT_ACCUMULATE_METADATA_WRITE","H5FD_FEAT_AGGREGATE_METADATA","H5FD_FEAT_AGGREGATE_SMALLDATA","H5FD_FEAT_ALLOW_FILE_IMAGE","H5FD_FEAT_CAN_USE_FILE_IMAGE_CALLBACKS","H5FD_FEAT_DATA_SIEVE","H5FD_FEAT_DEFAULT_VFD_COMPATIBLE","H5FD_FEAT_DIRTY_SBLK_LOAD","H5FD_FEAT_IGNORE_DRVRINFO","H5FD_FEAT_POSIX_COMPAT_HANDLE","H5FD_FILE_IMAGE_OP_FILE_CLOSE","H5FD_FILE_IMAGE_OP_FILE_OPEN","H5FD_FILE_IMAGE_OP_FILE_RESIZE","H5FD_FILE_IMAGE_OP_NO_OP","H5FD_FILE_IMAGE_OP_PROPERTY_LIST_CLOSE","H5FD_FILE_IMAGE_OP_PROPERTY_LIST_COPY","H5FD_FILE_IMAGE_OP_PROPERTY_LIST_GET","H5FD_FILE_IMAGE_OP_PROPERTY_LIST_SET","H5FD_FLMAP_DEFAULT","H5FD_FLMAP_DICHOTOMY","H5FD_FLMAP_SINGLE","H5FD_LOG_ALL","H5FD_LOG_ALLOC","H5FD_LOG_FILE_IO","H5FD_LOG_FILE_READ","H5FD_LOG_FILE_WRITE","H5FD_LOG_FLAVOR","H5FD_LOG_FREE","H5FD_LOG_LOC_IO","H5FD_LOG_LOC_READ","H5FD_LOG_LOC_SEEK","H5FD_LOG_LOC_WRITE","H5FD_LOG_META_IO","H5FD_LOG_NUM_IO","H5FD_LOG_NUM_READ","H5FD_LOG_NUM_SEEK","H5FD_LOG_NUM_TRUNCATE","H5FD_LOG_NUM_WRITE","H5FD_LOG_TIME_CLOSE","H5FD_LOG_TIME_IO","H5FD_LOG_TIME_OPEN","H5FD_LOG_TIME_READ","H5FD_LOG_TIME_SEEK","H5FD_LOG_TIME_STAT","H5FD_LOG_TIME_TRUNCATE","H5FD_LOG_TIME_WRITE","H5FD_LOG_TRUNCATE","H5FD_MEM_FHEAP_DBLOCK","H5FD_MEM_FHEAP_HDR","H5FD_MEM_FHEAP_HUGE_OBJ","H5FD_MEM_FHEAP_IBLOCK","H5FD_MEM_FSPACE_HDR","H5FD_MEM_FSPACE_SINFO","H5FD_MEM_SOHM_INDEX","H5FD_MEM_SOHM_TABLE","H5FD_VFD_DEFAULT","H5FD_class_t","H5FD_core_init","H5FD_family_init","H5FD_file_image_callbacks_t","H5FD_file_image_op_t","H5FD_free_t","H5FD_log_init","H5FD_mem_t","H5FD_multi_init","H5FD_sec2_init","H5FD_stdio_init","H5FD_t","H5FDalloc","H5FDclose","H5FDcmp","H5FDdriver_query","H5FDflush","H5FDfree","H5FDget_eoa","H5FDget_eof","H5FDget_vfd_handle","H5FDlock","H5FDopen","H5FDquery","H5FDread","H5FDregister","H5FDset_eoa","H5FDtruncate","H5FDunlock","H5FDunregister","H5FDwrite","H5_HAVE_VFL","addr","alignment","alloc","base_addr","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","close","cls","cmp","default","default","default","default","driver_id","dxpl_copy","dxpl_free","dxpl_size","eq","fapl_copy","fapl_free","fapl_get","fapl_size","fc_degree","feature_flags","fileno","fl_map","flush","fmt","fmt","fmt","fmt","fmt","free","from","from","from","from","from","get_eoa","get_eof","get_handle","get_type_map","image_free","image_malloc","image_memcpy","image_realloc","into","into","into","into","into","lock","maxaddr","maxaddr","name","next","open","partial_cmp","query","read","sb_decode","sb_encode","sb_size","set_eoa","size","threshold","to_owned","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","udata","udata_copy","udata_free","unlock","write","H5G_LINK_ERROR","H5G_LINK_HARD","H5G_LINK_SOFT","H5G_NLIBTYPES","H5G_NTYPES","H5G_NUSERTYPES","H5G_SAME_LOC","H5G_STORAGE_TYPE_COMPACT","H5G_STORAGE_TYPE_DENSE","H5G_STORAGE_TYPE_SYMBOL_TABLE","H5G_STORAGE_TYPE_UNKNOWN","H5G_USERTYPE","H5G_info_t","H5G_link_t","H5G_storage_type_t","H5Gclose","H5Gcreate2","H5Gcreate_anon","H5Gflush","H5Gget_create_plist","H5Gget_info","H5Gget_info_by_idx","H5Gget_info_by_name","H5Gopen2","H5Grefresh","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","fmt","fmt","from","from","into","into","max_corder","mounted","nlinks","partial_cmp","storage_type","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","H5I_ATTR","H5I_BADID","H5I_DATASET","H5I_DATASPACE","H5I_DATATYPE","H5I_ERROR_CLASS","H5I_ERROR_MSG","H5I_ERROR_STACK","H5I_FILE","H5I_GENPROP_CLS","H5I_GENPROP_LST","H5I_GROUP","H5I_INVALID_HID","H5I_MAP","H5I_NTYPES","H5I_SPACE_SEL_ITER","H5I_UNINIT","H5I_VFL","H5I_VOL","H5I_free_t","H5I_iterate_func_t","H5I_search_func_t","H5I_type_t","H5Iclear_type","H5Idec_ref","H5Idec_type_ref","H5Idestroy_type","H5Iget_file_id","H5Iget_name","H5Iget_ref","H5Iget_type","H5Iget_type_ref","H5Iinc_ref","H5Iinc_type_ref","H5Iis_valid","H5Iiterate","H5Inmembers","H5Iobject_verify","H5Iregister","H5Iregister_type","H5Iremove_verify","H5Isearch","H5Itype_exists","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hid_t","into","partial_cmp","to_owned","try_from","try_into","type_id","H5L_LINK_CLASS_T_VERS","H5L_MAX_LINK_NAME_LEN","H5L_SAME_LOC","H5L_TYPE_BUILTIN_MAX","H5L_TYPE_ERROR","H5L_TYPE_EXTERNAL","H5L_TYPE_HARD","H5L_TYPE_MAX","H5L_TYPE_SOFT","H5L_TYPE_UD_MIN","H5L_class_t","H5L_copy_func_t","H5L_create_func_t","H5L_delete_func_t","H5L_elink_traverse_t","H5L_info1_t","H5L_info1_t__u","H5L_info2_t","H5L_info2_t__u","H5L_iterate1_t","H5L_iterate2_t","H5L_move_func_t","H5L_query_func_t","H5L_traverse_func_t","H5L_type_t","H5Lcopy","H5Lcreate_external","H5Lcreate_hard","H5Lcreate_soft","H5Lcreate_ud","H5Ldelete","H5Ldelete_by_idx","H5Lexists","H5Lget_info1","H5Lget_info2","H5Lget_info_by_idx","H5Lget_info_by_idx2","H5Lget_name_by_idx","H5Lget_val","H5Lget_val_by_idx","H5Lis_registered","H5Literate1","H5Literate2","H5Literate_by_name1","H5Literate_by_name2","H5Lmove","H5Lregister","H5Lunpack_elink_val","H5Lunregister","H5Lvisit1","H5Lvisit2","H5Lvisit_by_name1","H5Lvisit_by_name2","address","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comment","copy_func","corder","corder","corder_valid","corder_valid","create_func","cset","cset","default","default","default","default","default","del_func","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","id","into","into","into","into","into","into","move_func","partial_cmp","query_func","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","trav_func","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","u","u","val_size","version","H5MM_allocate_t","H5MM_free_t","H5O_COPY_ALL","H5O_COPY_EXPAND_EXT_LINK_FLAG","H5O_COPY_EXPAND_REFERENCE_FLAG","H5O_COPY_EXPAND_SOFT_LINK_FLAG","H5O_COPY_MERGE_COMMITTED_DTYPE_FLAG","H5O_COPY_PRESERVE_NULL_FLAG","H5O_COPY_SHALLOW_HIERARCHY_FLAG","H5O_COPY_WITHOUT_ATTR_FLAG","H5O_HDR_ALL_FLAGS","H5O_HDR_ATTR_CRT_ORDER_INDEXED","H5O_HDR_ATTR_CRT_ORDER_TRACKED","H5O_HDR_ATTR_STORE_PHASE_CHANGE","H5O_HDR_CHUNK0_SIZE","H5O_HDR_STORE_TIMES","H5O_INFO_ALL","H5O_INFO_BASIC","H5O_INFO_NUM_ATTRS","H5O_INFO_TIME","H5O_MAX_TOKEN_SIZE","H5O_MCDT_SEARCH_CONT","H5O_MCDT_SEARCH_ERROR","H5O_MCDT_SEARCH_STOP","H5O_NATIVE_INFO_ALL","H5O_NATIVE_INFO_HDR","H5O_NATIVE_INFO_META_SIZE","H5O_SHMESG_ALL_FLAG","H5O_SHMESG_ATTR_FLAG","H5O_SHMESG_DTYPE_FLAG","H5O_SHMESG_FILL_FLAG","H5O_SHMESG_MAX_LIST_SIZE","H5O_SHMESG_MAX_NINDEXES","H5O_SHMESG_NONE_FLAG","H5O_SHMESG_PLINE_FLAG","H5O_SHMESG_SDSPACE_FLAG","H5O_TOKEN_UNDEF","H5O_TYPE_DATASET","H5O_TYPE_GROUP","H5O_TYPE_MAP","H5O_TYPE_NAMED_DATATYPE","H5O_TYPE_NTYPES","H5O_TYPE_UNKNOWN","H5O_hdr_info_t","H5O_hdr_info_t__mesg","H5O_hdr_info_t__space","H5O_info2_t","H5O_info_t","H5O_info_t__meta_size","H5O_iterate2_t","H5O_iterate_t","H5O_mcdt_search_cb_t","H5O_mcdt_search_ret_t","H5O_msg_crt_idx_t","H5O_native_info_meta_size_t","H5O_native_info_t","H5O_token_t","H5O_type_t","H5Oare_mdc_flushes_disabled","H5Oclose","H5Ocopy","H5Odecr_refcount","H5Odisable_mdc_flushes","H5Oenable_mdc_flushes","H5Oexists_by_name","H5Oflush","H5Oget_comment","H5Oget_comment_by_name","H5Oget_info","H5Oget_info1","H5Oget_info2","H5Oget_info3","H5Oget_info_by_idx","H5Oget_info_by_idx1","H5Oget_info_by_idx2","H5Oget_info_by_idx3","H5Oget_info_by_name","H5Oget_info_by_name1","H5Oget_info_by_name2","H5Oget_info_by_name3","H5Oget_native_info","H5Oget_native_info_by_idx","H5Oget_native_info_by_name","H5Oincr_refcount","H5Olink","H5Oopen","H5Oopen_by_addr","H5Oopen_by_idx","H5Oopen_by_token","H5Orefresh","H5Oset_comment","H5Oset_comment_by_name","H5Otoken_cmp","H5Otoken_from_str","H5Otoken_to_str","H5Ovisit","H5Ovisit1","H5Ovisit2","H5Ovisit3","H5Ovisit_by_name","H5Ovisit_by_name1","H5Ovisit_by_name2","H5Ovisit_by_name3","addr","atime","attr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","btime","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","ctime","default","default","default","default","default","eq","eq","fileno","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","free","from","from","from","from","from","from","from","from","from","from","from","hdr","into","into","into","into","into","into","into","into","into","into","into","mesg","mesg","meta","meta_size","mtime","nchunks","nmesgs","num_attrs","obj","partial_cmp","partial_cmp","present","rc","shared","space","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","H5Fget_mdc_logging_status","H5P_CLS_ATTRIBUTE_CREATE","H5P_CLS_DATASET_ACCESS","H5P_CLS_DATASET_CREATE","H5P_CLS_DATASET_XFER","H5P_CLS_DATATYPE_ACCESS","H5P_CLS_DATATYPE_CREATE","H5P_CLS_FILE_ACCESS","H5P_CLS_FILE_CREATE","H5P_CLS_FILE_MOUNT","H5P_CLS_GROUP_ACCESS","H5P_CLS_GROUP_CREATE","H5P_CLS_LINK_ACCESS","H5P_CLS_LINK_CREATE","H5P_CLS_OBJECT_COPY","H5P_CLS_OBJECT_CREATE","H5P_CLS_ROOT","H5P_CLS_STRING_CREATE","H5P_CRT_ORDER_INDEXED","H5P_CRT_ORDER_TRACKED","H5P_DEFAULT","H5P_LST_ATTRIBUTE_CREATE","H5P_LST_DATASET_ACCESS","H5P_LST_DATASET_CREATE","H5P_LST_DATASET_XFER","H5P_LST_DATATYPE_ACCESS","H5P_LST_DATATYPE_CREATE","H5P_LST_FILE_ACCESS","H5P_LST_FILE_CREATE","H5P_LST_FILE_MOUNT","H5P_LST_GROUP_ACCESS","H5P_LST_GROUP_CREATE","H5P_LST_LINK_ACCESS","H5P_LST_LINK_CREATE","H5P_LST_OBJECT_COPY","H5P_MAP_ACCESS","H5P_MAP_ACCESS_DEFAULT","H5P_MAP_CREATE","H5P_MAP_CREATE_DEFAULT","H5P_REFERENCE_ACCESS","H5P_REFERENCE_ACCESS_DEFAULT","H5P_VOL_INITIALIZE","H5P_VOL_INITIALIZE_DEFAULT","H5P_cls_close_func_t","H5P_cls_copy_func_t","H5P_cls_create_func_t","H5P_iterate_t","H5P_prp_cb1_t","H5P_prp_cb2_t","H5P_prp_close_func_t","H5P_prp_compare_func_t","H5P_prp_copy_func_t","H5P_prp_create_func_t","H5P_prp_delete_func_t","H5P_prp_get_func_t","H5P_prp_set_func_t","H5Padd_merge_committed_dtype_path","H5Pall_filters_avail","H5Pclose","H5Pclose_class","H5Pcopy","H5Pcopy_prop","H5Pcreate","H5Pcreate_class","H5Pdecode","H5Pencode1","H5Pencode2","H5Pequal","H5Pexist","H5Pfill_value_defined","H5Pfree_merge_committed_dtype_paths","H5Pget","H5Pget_alignment","H5Pget_alloc_time","H5Pget_append_flush","H5Pget_attr_creation_order","H5Pget_attr_phase_change","H5Pget_btree_ratios","H5Pget_buffer","H5Pget_cache","H5Pget_char_encoding","H5Pget_chunk","H5Pget_chunk_cache","H5Pget_chunk_opts","H5Pget_class","H5Pget_class_name","H5Pget_class_parent","H5Pget_copy_object","H5Pget_core_write_tracking","H5Pget_create_intermediate_group","H5Pget_data_transform","H5Pget_driver","H5Pget_driver_info","H5Pget_dset_no_attrs_hint","H5Pget_edc_check","H5Pget_efile_prefix","H5Pget_elink_acc_flags","H5Pget_elink_cb","H5Pget_elink_fapl","H5Pget_elink_file_cache_size","H5Pget_elink_prefix","H5Pget_est_link_info","H5Pget_evict_on_close","H5Pget_external","H5Pget_external_count","H5Pget_family_offset","H5Pget_fapl_core","H5Pget_fapl_family","H5Pget_fapl_multi","H5Pget_fclose_degree","H5Pget_file_image","H5Pget_file_image_callbacks","H5Pget_file_space","H5Pget_file_space_page_size","H5Pget_file_space_strategy","H5Pget_fill_time","H5Pget_fill_value","H5Pget_filter2","H5Pget_filter_by_id2","H5Pget_gc_references","H5Pget_hyper_vector_size","H5Pget_istore_k","H5Pget_layout","H5Pget_libver_bounds","H5Pget_link_creation_order","H5Pget_link_phase_change","H5Pget_local_heap_size_hint","H5Pget_mcdt_search_cb","H5Pget_mdc_config","H5Pget_mdc_image_config","H5Pget_mdc_log_options","H5Pget_meta_block_size","H5Pget_metadata_read_attempts","H5Pget_multi_type","H5Pget_nfilters","H5Pget_nlinks","H5Pget_nprops","H5Pget_obj_track_times","H5Pget_object_flush_cb","H5Pget_page_buffer_size","H5Pget_shared_mesg_index","H5Pget_shared_mesg_nindexes","H5Pget_shared_mesg_phase_change","H5Pget_sieve_buf_size","H5Pget_size","H5Pget_sizes","H5Pget_small_data_block_size","H5Pget_sym_k","H5Pget_type_conv_cb","H5Pget_userblock","H5Pget_version","H5Pget_virtual_count","H5Pget_virtual_dsetname","H5Pget_virtual_filename","H5Pget_virtual_prefix","H5Pget_virtual_printf_gap","H5Pget_virtual_srcspace","H5Pget_virtual_view","H5Pget_virtual_vspace","H5Pget_vlen_mem_manager","H5Pget_vol_id","H5Pget_vol_info","H5Pinsert2","H5Pisa_class","H5Piterate","H5Pmodify_filter","H5Pregister2","H5Premove","H5Premove_filter","H5Pset","H5Pset_alignment","H5Pset_alloc_time","H5Pset_append_flush","H5Pset_attr_creation_order","H5Pset_attr_phase_change","H5Pset_btree_ratios","H5Pset_buffer","H5Pset_cache","H5Pset_char_encoding","H5Pset_chunk","H5Pset_chunk_cache","H5Pset_chunk_opts","H5Pset_copy_object","H5Pset_core_write_tracking","H5Pset_create_intermediate_group","H5Pset_data_transform","H5Pset_deflate","H5Pset_driver","H5Pset_dset_no_attrs_hint","H5Pset_edc_check","H5Pset_efile_prefix","H5Pset_elink_acc_flags","H5Pset_elink_cb","H5Pset_elink_fapl","H5Pset_elink_file_cache_size","H5Pset_elink_prefix","H5Pset_est_link_info","H5Pset_evict_on_close","H5Pset_external","H5Pset_family_offset","H5Pset_fapl_core","H5Pset_fapl_family","H5Pset_fapl_log","H5Pset_fapl_multi","H5Pset_fapl_sec2","H5Pset_fapl_split","H5Pset_fapl_stdio","H5Pset_fclose_degree","H5Pset_file_image","H5Pset_file_image_callbacks","H5Pset_file_space","H5Pset_file_space_page_size","H5Pset_file_space_strategy","H5Pset_fill_time","H5Pset_fill_value","H5Pset_filter","H5Pset_filter_callback","H5Pset_fletcher32","H5Pset_gc_references","H5Pset_hyper_vector_size","H5Pset_istore_k","H5Pset_layout","H5Pset_libver_bounds","H5Pset_link_creation_order","H5Pset_link_phase_change","H5Pset_local_heap_size_hint","H5Pset_mcdt_search_cb","H5Pset_mdc_config","H5Pset_mdc_image_config","H5Pset_mdc_log_options","H5Pset_meta_block_size","H5Pset_metadata_read_attempts","H5Pset_multi_type","H5Pset_nbit","H5Pset_nlinks","H5Pset_obj_track_times","H5Pset_object_flush_cb","H5Pset_page_buffer_size","H5Pset_scaleoffset","H5Pset_shared_mesg_index","H5Pset_shared_mesg_nindexes","H5Pset_shared_mesg_phase_change","H5Pset_shuffle","H5Pset_sieve_buf_size","H5Pset_sizes","H5Pset_small_data_block_size","H5Pset_sym_k","H5Pset_szip","H5Pset_type_conv_cb","H5Pset_userblock","H5Pset_virtual","H5Pset_virtual_prefix","H5Pset_virtual_printf_gap","H5Pset_virtual_view","H5Pset_vlen_mem_manager","H5Pset_vol","H5Punregister","globals","H5P_MAP_ACCESS","H5P_MAP_ACCESS_DEFAULT","H5P_MAP_CREATE","H5P_MAP_CREATE_DEFAULT","H5P_REFERENCE_ACCESS","H5P_REFERENCE_ACCESS_DEFAULT","H5P_VOL_INITIALIZE","H5P_VOL_INITIALIZE_DEFAULT","H5PL_ALL_PLUGIN","H5PL_FILTER_PLUGIN","H5PL_TYPE_ERROR","H5PL_TYPE_FILTER","H5PL_TYPE_NONE","H5PL_VOL","H5PL_type_t","H5PLappend","H5PLget","H5PLget_loading_state","H5PLinsert","H5PLprepend","H5PLremove","H5PLreplace","H5PLset_loading_state","H5PLsize","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","partial_cmp","to_owned","try_from","try_into","type_id","H5R_ATTR","H5R_BADTYPE","H5R_DATASET_REGION1","H5R_DATASET_REGION2","H5R_MAXTYPE","H5R_OBJECT1","H5R_OBJECT2","H5R_REF_BUF_SIZE","H5R_ref_t","H5R_ref_t_u","H5R_type_t","H5Rcopy","H5Rcreate","H5Rcreate_attr","H5Rcreate_object","H5Rcreate_region","H5Rdereference1","H5Rdereference2","H5Rdestroy","H5Requal","H5Rget_attr_name","H5Rget_file_name","H5Rget_name","H5Rget_obj_name","H5Rget_obj_type2","H5Rget_obj_type3","H5Rget_region","H5Rget_type","H5Ropen_attr","H5Ropen_object","H5Ropen_region","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","eq","fmt","from","from","from","hdset_reg_ref_t","hobj_ref_t","into","into","into","partial_cmp","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","H5S_ALL","H5S_MAX_RANK","H5S_NO_CLASS","H5S_NULL","H5S_SCALAR","H5S_SELECT_AND","H5S_SELECT_APPEND","H5S_SELECT_INVALID","H5S_SELECT_NOOP","H5S_SELECT_NOTA","H5S_SELECT_NOTB","H5S_SELECT_OR","H5S_SELECT_PREPEND","H5S_SELECT_SET","H5S_SELECT_XOR","H5S_SEL_ALL","H5S_SEL_ERROR","H5S_SEL_HYPERSLABS","H5S_SEL_ITER_GET_SEQ_LIST_SORTED","H5S_SEL_ITER_SHARE_WITH_DATASPACE","H5S_SEL_N","H5S_SEL_NONE","H5S_SEL_POINTS","H5S_SIMPLE","H5S_UNLIMITED","H5S_class_t","H5S_sel_type","H5S_seloper_t","H5Sclose","H5Scombine_hyperslab","H5Scombine_select","H5Scopy","H5Screate","H5Screate_simple","H5Sdecode","H5Sencode1","H5Sencode2","H5Sextent_copy","H5Sextent_equal","H5Sget_regular_hyperslab","H5Sget_select_bounds","H5Sget_select_elem_npoints","H5Sget_select_elem_pointlist","H5Sget_select_hyper_blocklist","H5Sget_select_hyper_nblocks","H5Sget_select_npoints","H5Sget_select_type","H5Sget_simple_extent_dims","H5Sget_simple_extent_ndims","H5Sget_simple_extent_npoints","H5Sget_simple_extent_type","H5Sis_regular_hyperslab","H5Sis_simple","H5Smodify_select","H5Soffset_simple","H5Ssel_iter_close","H5Ssel_iter_create","H5Ssel_iter_get_seq_list","H5Sselect_adjust","H5Sselect_all","H5Sselect_copy","H5Sselect_elements","H5Sselect_hyperslab","H5Sselect_intersect_block","H5Sselect_none","H5Sselect_project_intersection","H5Sselect_shape_same","H5Sselect_valid","H5Sset_extent_none","H5Sset_extent_simple","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","partial_cmp","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","H5T_ARRAY","H5T_BITFIELD","H5T_BKG_NO","H5T_BKG_TEMP","H5T_BKG_YES","H5T_COMPOUND","H5T_CONV_ABORT","H5T_CONV_CONV","H5T_CONV_EXCEPT_NAN","H5T_CONV_EXCEPT_NINF","H5T_CONV_EXCEPT_PINF","H5T_CONV_EXCEPT_PRECISION","H5T_CONV_EXCEPT_RANGE_HI","H5T_CONV_EXCEPT_RANGE_LOW","H5T_CONV_EXCEPT_TRUNCATE","H5T_CONV_FREE","H5T_CONV_HANDLED","H5T_CONV_INIT","H5T_CONV_UNHANDLED","H5T_CSET_ASCII","H5T_CSET_ERROR","H5T_CSET_RESERVED_10","H5T_CSET_RESERVED_11","H5T_CSET_RESERVED_12","H5T_CSET_RESERVED_13","H5T_CSET_RESERVED_14","H5T_CSET_RESERVED_15","H5T_CSET_RESERVED_2","H5T_CSET_RESERVED_3","H5T_CSET_RESERVED_4","H5T_CSET_RESERVED_5","H5T_CSET_RESERVED_6","H5T_CSET_RESERVED_7","H5T_CSET_RESERVED_8","H5T_CSET_RESERVED_9","H5T_CSET_UTF8","H5T_C_S1","H5T_DIR_ASCEND","H5T_DIR_DEFAULT","H5T_DIR_DESCEND","H5T_ENUM","H5T_FLOAT","H5T_FORTRAN_S1","H5T_IEEE_F32BE","H5T_IEEE_F32LE","H5T_IEEE_F64BE","H5T_IEEE_F64LE","H5T_INTEGER","H5T_NATIVE_B16","H5T_NATIVE_B32","H5T_NATIVE_B64","H5T_NATIVE_B8","H5T_NATIVE_DOUBLE","H5T_NATIVE_FLOAT","H5T_NATIVE_HADDR","H5T_NATIVE_HBOOL","H5T_NATIVE_HERR","H5T_NATIVE_HSIZE","H5T_NATIVE_HSSIZE","H5T_NATIVE_INT","H5T_NATIVE_INT16","H5T_NATIVE_INT32","H5T_NATIVE_INT64","H5T_NATIVE_INT8","H5T_NATIVE_INT_FAST16","H5T_NATIVE_INT_FAST32","H5T_NATIVE_INT_FAST64","H5T_NATIVE_INT_FAST8","H5T_NATIVE_INT_LEAST16","H5T_NATIVE_INT_LEAST32","H5T_NATIVE_INT_LEAST64","H5T_NATIVE_INT_LEAST8","H5T_NATIVE_LDOUBLE","H5T_NATIVE_LLONG","H5T_NATIVE_LONG","H5T_NATIVE_OPAQUE","H5T_NATIVE_SCHAR","H5T_NATIVE_SHORT","H5T_NATIVE_UCHAR","H5T_NATIVE_UINT","H5T_NATIVE_UINT16","H5T_NATIVE_UINT32","H5T_NATIVE_UINT64","H5T_NATIVE_UINT8","H5T_NATIVE_UINT_FAST16","H5T_NATIVE_UINT_FAST32","H5T_NATIVE_UINT_FAST64","H5T_NATIVE_UINT_FAST8","H5T_NATIVE_UINT_LEAST16","H5T_NATIVE_UINT_LEAST32","H5T_NATIVE_UINT_LEAST64","H5T_NATIVE_UINT_LEAST8","H5T_NATIVE_ULLONG","H5T_NATIVE_ULONG","H5T_NATIVE_USHORT","H5T_NCLASSES","H5T_NCSET","H5T_NORM_ERROR","H5T_NORM_IMPLIED","H5T_NORM_MSBSET","H5T_NORM_NONE","H5T_NO_CLASS","H5T_NPAD","H5T_NSGN","H5T_NSTR","H5T_OPAQUE","H5T_OPAQUE_TAG_MAX","H5T_ORDER_BE","H5T_ORDER_ERROR","H5T_ORDER_LE","H5T_ORDER_MIXED","H5T_ORDER_NONE","H5T_ORDER_VAX","H5T_PAD_BACKGROUND","H5T_PAD_ERROR","H5T_PAD_ONE","H5T_PAD_ZERO","H5T_PERS_DONTCARE","H5T_PERS_HARD","H5T_PERS_SOFT","H5T_REFERENCE","H5T_SGN_2","H5T_SGN_ERROR","H5T_SGN_NONE","H5T_STD_B16BE","H5T_STD_B16LE","H5T_STD_B32BE","H5T_STD_B32LE","H5T_STD_B64BE","H5T_STD_B64LE","H5T_STD_B8BE","H5T_STD_B8LE","H5T_STD_I16BE","H5T_STD_I16LE","H5T_STD_I32BE","H5T_STD_I32LE","H5T_STD_I64BE","H5T_STD_I64LE","H5T_STD_I8BE","H5T_STD_I8LE","H5T_STD_REF","H5T_STD_REF_DSETREG","H5T_STD_REF_OBJ","H5T_STD_U16BE","H5T_STD_U16LE","H5T_STD_U32BE","H5T_STD_U32LE","H5T_STD_U64BE","H5T_STD_U64LE","H5T_STD_U8BE","H5T_STD_U8LE","H5T_STRING","H5T_STR_ERROR","H5T_STR_NULLPAD","H5T_STR_NULLTERM","H5T_STR_RESERVED_10","H5T_STR_RESERVED_11","H5T_STR_RESERVED_12","H5T_STR_RESERVED_13","H5T_STR_RESERVED_14","H5T_STR_RESERVED_15","H5T_STR_RESERVED_3","H5T_STR_RESERVED_4","H5T_STR_RESERVED_5","H5T_STR_RESERVED_6","H5T_STR_RESERVED_7","H5T_STR_RESERVED_8","H5T_STR_RESERVED_9","H5T_STR_SPACEPAD","H5T_TIME","H5T_UNIX_D32BE","H5T_UNIX_D32LE","H5T_UNIX_D64BE","H5T_UNIX_D64LE","H5T_VARIABLE","H5T_VAX_F32","H5T_VAX_F64","H5T_VLEN","H5T_bkg_t","H5T_cdata_t","H5T_class_t","H5T_cmd_t","H5T_conv_except_func_t","H5T_conv_except_t","H5T_conv_ret_t","H5T_conv_t","H5T_cset_t","H5T_direction_t","H5T_norm_t","H5T_order_t","H5T_pad_t","H5T_pers_t","H5T_sign_t","H5T_str_t","H5Tarray_create2","H5Tclose","H5Tcommit2","H5Tcommit_anon","H5Tcommitted","H5Tcompiler_conv","H5Tconvert","H5Tcopy","H5Tcreate","H5Tdecode","H5Tdetect_class","H5Tencode","H5Tenum_create","H5Tenum_insert","H5Tenum_nameof","H5Tenum_valueof","H5Tequal","H5Tfind","H5Tflush","H5Tget_array_dims2","H5Tget_array_ndims","H5Tget_class","H5Tget_create_plist","H5Tget_cset","H5Tget_ebias","H5Tget_fields","H5Tget_inpad","H5Tget_member_class","H5Tget_member_index","H5Tget_member_name","H5Tget_member_offset","H5Tget_member_type","H5Tget_member_value","H5Tget_native_type","H5Tget_nmembers","H5Tget_norm","H5Tget_offset","H5Tget_order","H5Tget_pad","H5Tget_precision","H5Tget_sign","H5Tget_size","H5Tget_strpad","H5Tget_super","H5Tget_tag","H5Tinsert","H5Tis_variable_str","H5Tlock","H5Topen2","H5Tpack","H5Treclaim","H5Trefresh","H5Tregister","H5Tset_cset","H5Tset_ebias","H5Tset_fields","H5Tset_inpad","H5Tset_norm","H5Tset_offset","H5Tset_order","H5Tset_pad","H5Tset_precision","H5Tset_sign","H5Tset_size","H5Tset_strpad","H5Tset_tag","H5Tunregister","H5Tvlen_create","_priv","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","command","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hvl_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","len","need_bkg","p","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","recalc","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","H5VL_class_t","H5VL_class_value_t","H5VLclose","H5VLget_connector_id","H5VLget_connector_id_by_name","H5VLget_connector_id_by_value","H5VLget_connector_name","H5VLis_connector_registered_by_name","H5VLis_connector_registered_by_value","H5VLregister_connector","H5VLregister_connector_by_name","H5VLregister_connector_by_value","H5VLunregister_connector","H5Z_CB_CONT","H5Z_CB_ERROR","H5Z_CB_FAIL","H5Z_CB_NO","H5Z_CLASS_T_VERS","H5Z_DISABLE_EDC","H5Z_EDC_t","H5Z_ENABLE_EDC","H5Z_ERROR_EDC","H5Z_FILTER_ALL","H5Z_FILTER_CONFIG_DECODE_ENABLED","H5Z_FILTER_CONFIG_ENCODE_ENABLED","H5Z_FILTER_DEFLATE","H5Z_FILTER_ERROR","H5Z_FILTER_FLETCHER32","H5Z_FILTER_MAX","H5Z_FILTER_NBIT","H5Z_FILTER_NONE","H5Z_FILTER_RESERVED","H5Z_FILTER_SCALEOFFSET","H5Z_FILTER_SHUFFLE","H5Z_FILTER_SZIP","H5Z_FLAG_DEFMASK","H5Z_FLAG_INVMASK","H5Z_FLAG_MANDATORY","H5Z_FLAG_OPTIONAL","H5Z_FLAG_REVERSE","H5Z_FLAG_SKIP_EDC","H5Z_MAX_NFILTERS","H5Z_NBIT_USER_NPARMS","H5Z_NO_EDC","H5Z_SCALEOFFSET_USER_NPARMS","H5Z_SHUFFLE_TOTAL_NPARMS","H5Z_SHUFFLE_USER_NPARMS","H5Z_SO_FLOAT_DSCALE","H5Z_SO_FLOAT_ESCALE","H5Z_SO_INT","H5Z_SO_INT_MINBITS_DEFAULT","H5Z_SO_scale_type_t","H5Z_SZIP_PARM_BPP","H5Z_SZIP_PARM_MASK","H5Z_SZIP_PARM_PPB","H5Z_SZIP_PARM_PPS","H5Z_SZIP_TOTAL_NPARMS","H5Z_SZIP_USER_NPARMS","H5Z_can_apply_func_t","H5Z_cb_return_t","H5Z_cb_t","H5Z_class2_t","H5Z_filter_func_t","H5Z_filter_t","H5Z_func_t","H5Z_set_local_func_t","H5Zfilter_avail","H5Zget_filter_info","H5Zregister","H5Zunregister","H5_SZIP_ALLOW_K13_OPTION_MASK","H5_SZIP_CHIP_OPTION_MASK","H5_SZIP_EC_OPTION_MASK","H5_SZIP_MAX_PIXELS_PER_BLOCK","H5_SZIP_NN_OPTION_MASK","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_apply","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","decoder_present","default","default","encoder_present","eq","eq","eq","filter","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","func","id","into","into","into","into","into","name","op_data","partial_cmp","partial_cmp","partial_cmp","set_local","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","version"],"q":["hdf5_sys","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5a","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5ac","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5c","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5dhdf5_sys::h5ehdf5_sys::h5fhdf5_sys::h5fdhdf5_sys::h5g","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5i","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5l","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5mm","","hdf5_sys::h5o","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5phdf5_sys::h5p::globals","","","","","","","","hdf5_sys::h5pl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5r","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5thdf5_sys::h5vl","","","","","","","","","","","","","hdf5_sys::h5z","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"di":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,2,0,2,2,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,3,2,1,3,2,1,3,2,1,3,3,2,1,2,1,3,2,1,3,0,0,3,0,0,0,0,3,2,1,3,2,1,2,1,3,2,1,3,2,1,3,2,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,5,5,5,5,6,5,6,5,6,5,6,5,5,5,5,6,5,5,6,5,5,5,5,5,5,6,5,6,6,5,5,5,5,6,5,5,5,5,5,5,5,5,5,6,5,5,6,5,5,6,5,6,5,6,5,5,6,0,0,0,7,7,7,7,8,8,9,9,9,8,7,9,8,7,9,8,7,9,8,7,9,8,7,9,8,7,9,8,7,9,8,7,9,8,7,9,8,7,9,8,7,9,8,7,9,8,7,10,10,10,10,10,11,0,0,0,0,0,0,11,11,12,12,12,12,13,13,13,13,11,14,14,14,15,14,15,15,15,16,15,16,15,15,16,14,15,11,17,17,17,17,18,18,18,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,17,12,13,16,14,15,11,18,10,17,12,13,16,14,15,11,18,10,17,12,13,16,14,15,11,18,10,17,12,13,16,14,15,11,18,10,12,13,11,18,10,17,12,13,16,14,15,11,18,10,17,12,13,16,14,15,11,18,10,17,12,13,16,14,15,11,18,10,17,12,13,16,14,15,11,18,10,17,12,13,16,14,15,11,18,10,17,12,13,16,14,15,11,18,10,17,12,13,16,14,15,11,18,10,17,12,13,16,14,15,11,18,10,17,12,13,16,14,15,11,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,21,20,19,21,20,19,21,20,19,21,20,21,21,21,19,20,21,19,21,20,19,21,20,21,19,21,20,21,21,21,19,20,19,21,20,19,21,20,19,21,20,19,21,20,22,22,22,22,22,22,22,22,22,0,0,0,0,0,0,0,0,0,23,23,23,23,0,24,24,24,24,24,24,25,25,25,25,25,26,26,0,26,26,26,0,0,0,0,0,0,0,0,27,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,27,23,29,30,22,26,31,28,32,33,34,35,24,25,27,23,29,30,22,26,31,28,32,33,34,35,24,25,27,23,29,30,22,26,31,28,32,33,34,35,24,25,27,23,29,30,22,26,31,28,32,33,34,35,24,25,23,29,30,26,31,28,32,33,34,35,25,27,23,22,26,24,25,27,23,29,30,22,26,31,28,32,33,34,35,24,25,32,27,23,29,30,22,26,31,28,32,33,34,35,24,25,30,35,27,23,29,30,22,26,31,28,32,33,34,35,24,25,34,30,35,31,27,23,22,26,24,25,31,28,29,32,32,29,33,33,27,23,29,30,22,26,31,28,32,33,34,35,24,25,34,27,23,29,30,22,26,31,28,32,33,34,35,24,25,27,23,29,30,22,26,31,28,32,33,34,35,24,25,27,23,29,30,22,26,31,28,32,33,34,35,24,25,33,34,35,0,0,0,0,0,0,0,0,0,0,0,0,36,36,36,36,36,36,36,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,38,39,38,39,37,38,36,40,39,37,38,36,40,39,37,38,36,40,39,37,38,36,40,39,38,39,39,37,38,40,38,39,39,39,36,39,39,39,39,39,38,38,39,39,39,37,38,36,40,39,39,37,38,36,40,39,39,39,39,40,40,40,40,39,37,38,36,40,39,39,38,39,37,39,36,39,39,39,39,39,39,37,38,39,37,38,36,40,39,39,37,38,36,40,39,37,38,36,40,39,37,38,36,40,40,40,40,39,39,0,0,0,0,0,0,0,41,41,41,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,42,41,42,41,42,41,42,42,41,41,42,41,42,41,42,42,42,42,41,42,41,42,41,42,41,42,41,42,43,43,43,43,43,43,43,43,43,43,43,43,0,43,43,43,43,43,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,43,43,43,43,43,43,0,43,43,43,43,43,43,0,0,0,0,44,44,44,44,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,44,46,45,47,48,49,44,46,45,47,48,49,44,46,45,47,48,49,44,46,45,47,48,49,49,49,46,47,46,47,49,46,47,46,45,47,48,49,49,44,44,46,45,47,49,44,46,45,47,48,49,49,44,46,45,47,48,49,49,44,49,44,46,45,47,48,49,49,44,46,45,47,48,49,44,46,45,47,48,49,46,47,44,46,45,47,48,49,46,47,45,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50,50,0,0,0,0,0,0,0,0,0,0,0,0,0,51,51,51,51,51,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,52,53,51,54,55,56,52,53,50,57,58,59,60,51,54,55,56,52,53,50,57,58,59,60,52,51,54,55,56,52,53,50,57,58,59,60,51,54,55,56,52,53,50,57,58,59,60,52,54,55,56,52,57,51,50,52,54,51,54,55,56,52,53,50,57,58,59,60,55,51,54,55,56,52,53,50,57,58,59,60,52,51,54,55,56,52,53,50,57,58,59,60,54,55,55,52,52,54,54,52,53,51,50,56,52,56,54,51,54,55,56,52,53,50,57,58,59,60,55,51,54,55,56,52,53,50,57,58,59,60,51,54,55,56,52,53,50,57,58,59,60,52,51,54,55,56,52,53,50,57,58,59,60,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,63,64,62,63,64,62,63,64,62,63,64,63,64,62,62,62,63,64,0,0,62,63,64,62,62,63,64,62,63,64,62,63,64,62,63,64,0,0,65,65,65,66,66,66,66,66,66,66,66,66,66,67,67,67,0,0,67,67,67,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,66,67,65,66,67,65,66,67,65,66,67,65,66,67,65,66,67,65,66,67,65,66,67,65,66,67,65,66,67,65,66,67,65,66,67,65,66,67,68,68,69,69,69,68,70,71,72,72,72,72,72,72,72,71,70,71,70,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,0,74,74,74,68,68,0,0,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,75,75,75,75,68,76,77,0,68,0,78,78,78,78,78,78,76,76,76,76,79,79,79,68,77,77,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,68,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,68,78,77,75,73,80,76,71,69,81,79,74,72,70,82,68,78,77,75,73,80,76,71,69,81,79,74,72,70,82,68,78,77,75,73,80,76,71,69,81,79,74,72,70,82,68,78,77,75,73,80,76,71,69,81,79,74,72,70,82,81,73,81,82,68,78,77,75,73,80,76,71,69,79,74,72,70,68,78,77,75,73,80,76,71,69,81,79,74,72,70,82,68,78,77,75,73,80,76,71,69,81,79,74,72,70,82,0,68,78,77,75,73,80,76,71,69,81,79,74,72,70,82,82,81,82,68,78,77,75,73,80,76,71,69,79,74,72,70,81,68,78,77,75,73,80,76,71,69,81,79,74,72,70,82,68,78,77,75,73,80,76,71,69,81,79,74,72,70,82,68,78,77,75,73,80,76,71,69,81,79,74,72,70,82,68,78,77,75,73,80,76,71,69,81,79,74,72,70,82,0,0,0,0,0,0,0,0,0,0,0,0,0,83,83,83,83,0,84,0,84,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,85,85,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,84,83,86,87,85,84,83,86,87,87,85,84,83,86,87,85,84,83,86,87,87,86,87,87,85,84,83,87,85,84,83,86,87,85,84,83,86,87,86,87,85,84,83,86,87,87,86,85,84,83,87,85,84,83,86,87,85,84,83,86,87,85,84,83,86,87,85,84,83,86,87,87],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["h5_iter_order_t",4]],[[],["h5_index_t",4]],[[],["h5_ih_info_t",3]],[[]],[[]],[[]],[[]],[[["h5_iter_order_t",4]],["bool",15]],[[["h5_index_t",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["h5_iter_order_t",4]],[["ordering",4],["option",4]]],[[["h5_index_t",4]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["h5a_info_t",3]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["h5ac_cache_config_t",3]],[[],["h5ac_cache_image_config_t",3]],[[]],[[]],null,null,null,[[]],[[]],null,null,null,null,null,null,null,null,null,[[["formatter",3]],["result",6]],[[]],[[]],null,null,null,null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["h5c_cache_incr_mode",4]],[[],["h5c_cache_flash_incr_mode",4]],[[],["h5c_cache_decr_mode",4]],[[]],[[]],[[]],[[["h5c_cache_incr_mode",4]],["bool",15]],[[["h5c_cache_flash_incr_mode",4]],["bool",15]],[[["h5c_cache_decr_mode",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["h5c_cache_incr_mode",4]],[["ordering",4],["option",4]]],[[["h5c_cache_flash_incr_mode",4]],[["ordering",4],["option",4]]],[[["h5c_cache_decr_mode",4]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["h5d_alloc_time_t",4]],[[],["h5d_space_status_t",4]],[[],["h5d_fill_time_t",4]],[[],["h5d_fill_value_t",4]],[[],["h5d_mpio_actual_chunk_opt_mode_t",4]],[[],["h5d_mpio_actual_io_mode_t",4]],[[],["h5d_mpio_no_collective_cause_t",4]],[[],["h5d_layout_t",4]],[[],["h5d_vds_view_t",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["h5d_alloc_time_t",4]],["bool",15]],[[["h5d_space_status_t",4]],["bool",15]],[[["h5d_fill_time_t",4]],["bool",15]],[[["h5d_fill_value_t",4]],["bool",15]],[[["h5d_mpio_actual_chunk_opt_mode_t",4]],["bool",15]],[[["h5d_mpio_actual_io_mode_t",4]],["bool",15]],[[["h5d_mpio_no_collective_cause_t",4]],["bool",15]],[[["h5d_layout_t",4]],["bool",15]],[[["h5d_vds_view_t",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["h5d_alloc_time_t",4]],[["ordering",4],["option",4]]],[[["h5d_space_status_t",4]],[["ordering",4],["option",4]]],[[["h5d_fill_time_t",4]],[["ordering",4],["option",4]]],[[["h5d_fill_value_t",4]],[["ordering",4],["option",4]]],[[["h5d_mpio_actual_chunk_opt_mode_t",4]],[["ordering",4],["option",4]]],[[["h5d_mpio_actual_io_mode_t",4]],[["ordering",4],["option",4]]],[[["h5d_mpio_no_collective_cause_t",4]],[["ordering",4],["option",4]]],[[["h5d_layout_t",4]],[["ordering",4],["option",4]]],[[["h5d_vds_view_t",4]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["h5e_type_t",4]],[[],["h5e_error2_t",3]],[[],["h5e_direction_t",4]],[[]],[[]],[[]],null,[[]],null,[[["h5e_type_t",4]],["bool",15]],[[["h5e_direction_t",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,[[]],[[]],[[]],null,null,null,[[["h5e_type_t",4]],[["ordering",4],["option",4]]],[[["h5e_direction_t",4]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["h5f_scope_t",4]],[[],["h5f_close_degree_t",4]],[[],["h5f_info_t",3]],[[],["h5f_info_t__sohm",3]],[[],["h5f_mem_t",4]],[[],["h5f_libver_t",4]],[[],["h5f_retry_info_t",3]],[[],["h5f_sect_info_t",3]],[[],["h5f_info2_t",3]],[[],["h5f_info2_t__super",3]],[[],["h5f_info2_t__free",3]],[[],["h5f_info2_t__sohm",3]],[[],["h5f_file_space_type_t",4]],[[],["h5f_fspace_strategy_t",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["h5f_scope_t",4]],["bool",15]],[[["h5f_close_degree_t",4]],["bool",15]],[[["h5f_mem_t",4]],["bool",15]],[[["h5f_libver_t",4]],["bool",15]],[[["h5f_file_space_type_t",4]],["bool",15]],[[["h5f_fspace_strategy_t",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[["h5f_scope_t",4]],[["ordering",4],["option",4]]],[[["h5f_close_degree_t",4]],[["ordering",4],["option",4]]],[[["h5f_mem_t",4]],[["ordering",4],["option",4]]],[[["h5f_libver_t",4]],[["ordering",4],["option",4]]],[[["h5f_file_space_type_t",4]],[["ordering",4],["option",4]]],[[["h5f_fspace_strategy_t",4]],[["ordering",4],["option",4]]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["h5fd_class_t",3]],[[],["h5fd_free_t",3]],[[],["h5fd_t",3]],[[],["h5fd_file_image_op_t",4]],[[],["h5fd_file_image_callbacks_t",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],null,null,null,null,[[["h5fd_file_image_op_t",4]],["bool",15]],null,null,null,null,null,null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[["h5fd_file_image_op_t",4]],[["ordering",4],["option",4]]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_uint",6]],["c_uint",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["h5g_storage_type_t",4]],[[],["h5g_info_t",3]],[[]],[[]],[[]],[[["h5g_storage_type_t",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,null,[[["h5g_storage_type_t",4]],[["ordering",4],["option",4]]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["h5i_type_t",4]],[[]],[[["h5i_type_t",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],null,[[]],[[["h5i_type_t",4]],[["ordering",4],["option",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["h5l_type_t",4]],[[],["h5l_info1_t",3]],[[],["h5l_info1_t__u",3]],[[],["h5l_info2_t",3]],[[],["h5l_info2_t__u",19]],[[],["h5l_class_t",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,[[["h5l_type_t",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[["h5l_type_t",4]],[["ordering",4],["option",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["h5o_type_t",4]],[[],["h5o_hdr_info_t",3]],[[],["h5o_hdr_info_t__space",3]],[[],["h5o_hdr_info_t__mesg",3]],[[],["h5o_info_t",3]],[[],["h5o_info_t__meta_size",3]],[[],["h5o_mcdt_search_ret_t",4]],[[],["h5o_token_t",3]],[[],["h5o_info2_t",3]],[[],["h5o_native_info_meta_size_t",3]],[[],["h5o_native_info_t",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[["h5o_type_t",4]],["bool",15]],[[["h5o_mcdt_search_ret_t",4]],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[["h5o_type_t",4]],[["ordering",4],["option",4]]],[[["h5o_mcdt_search_ret_t",4]],[["ordering",4],["option",4]]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["h5pl_type_t",4]],[[]],[[["h5pl_type_t",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["h5pl_type_t",4]],[["ordering",4],["option",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["h5r_type_t",4]],[[],["h5r_ref_t_u",19]],[[],["h5r_ref_t",3]],[[]],[[]],[[]],[[]],[[],["h5r_ref_t",3]],[[["h5r_type_t",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[["h5r_type_t",4]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["h5s_class_t",4]],[[],["h5s_seloper_t",4]],[[],["h5s_sel_type",4]],[[]],[[]],[[]],[[["h5s_class_t",4]],["bool",15]],[[["h5s_seloper_t",4]],["bool",15]],[[["h5s_sel_type",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["h5s_class_t",4]],[["ordering",4],["option",4]]],[[["h5s_seloper_t",4]],[["ordering",4],["option",4]]],[[["h5s_sel_type",4]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["h5t_class_t",4]],[[],["h5t_order_t",4]],[[],["h5t_sign_t",4]],[[],["h5t_norm_t",4]],[[],["h5t_cset_t",4]],[[],["h5t_str_t",4]],[[],["h5t_pad_t",4]],[[],["h5t_cmd_t",4]],[[],["h5t_bkg_t",4]],[[],["h5t_cdata_t",3]],[[],["h5t_pers_t",4]],[[],["h5t_direction_t",4]],[[],["h5t_conv_except_t",4]],[[],["h5t_conv_ret_t",4]],[[],["hvl_t",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[["h5t_class_t",4]],["bool",15]],[[["h5t_order_t",4]],["bool",15]],[[["h5t_sign_t",4]],["bool",15]],[[["h5t_norm_t",4]],["bool",15]],[[["h5t_cset_t",4]],["bool",15]],[[["h5t_str_t",4]],["bool",15]],[[["h5t_pad_t",4]],["bool",15]],[[["h5t_cmd_t",4]],["bool",15]],[[["h5t_bkg_t",4]],["bool",15]],[[["h5t_pers_t",4]],["bool",15]],[[["h5t_direction_t",4]],["bool",15]],[[["h5t_conv_except_t",4]],["bool",15]],[[["h5t_conv_ret_t",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["h5t_class_t",4]],[["ordering",4],["option",4]]],[[["h5t_order_t",4]],[["ordering",4],["option",4]]],[[["h5t_sign_t",4]],[["ordering",4],["option",4]]],[[["h5t_norm_t",4]],[["ordering",4],["option",4]]],[[["h5t_cset_t",4]],[["ordering",4],["option",4]]],[[["h5t_str_t",4]],[["ordering",4],["option",4]]],[[["h5t_pad_t",4]],[["ordering",4],["option",4]]],[[["h5t_cmd_t",4]],[["ordering",4],["option",4]]],[[["h5t_bkg_t",4]],[["ordering",4],["option",4]]],[[["h5t_pers_t",4]],[["ordering",4],["option",4]]],[[["h5t_direction_t",4]],[["ordering",4],["option",4]]],[[["h5t_conv_except_t",4]],[["ordering",4],["option",4]]],[[["h5t_conv_ret_t",4]],[["ordering",4],["option",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["h5z_so_scale_type_t",4]],[[],["h5z_edc_t",4]],[[],["h5z_cb_return_t",4]],[[],["h5z_cb_t",3]],[[],["h5z_class2_t",3]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],null,[[["h5z_so_scale_type_t",4]],["bool",15]],[[["h5z_edc_t",4]],["bool",15]],[[["h5z_cb_return_t",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],null,null,[[["h5z_so_scale_type_t",4]],[["ordering",4],["option",4]]],[[["h5z_edc_t",4]],[["ordering",4],["option",4]]],[[["h5z_cb_return_t",4]],[["ordering",4],["option",4]]],null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[4,"H5_index_t"],[4,"H5_iter_order_t"],[3,"H5_ih_info_t"],[3,"H5A_info_t"],[3,"H5AC_cache_config_t"],[3,"H5AC_cache_image_config_t"],[4,"H5C_cache_decr_mode"],[4,"H5C_cache_flash_incr_mode"],[4,"H5C_cache_incr_mode"],[4,"H5D_alloc_time_t"],[4,"H5D_layout_t"],[4,"H5D_fill_time_t"],[4,"H5D_fill_value_t"],[4,"H5D_mpio_actual_io_mode_t"],[4,"H5D_mpio_no_collective_cause_t"],[4,"H5D_mpio_actual_chunk_opt_mode_t"],[4,"H5D_space_status_t"],[4,"H5D_vds_view_t"],[4,"H5E_type_t"],[4,"H5E_direction_t"],[3,"H5E_error2_t"],[4,"H5F_mem_t"],[4,"H5F_close_degree_t"],[4,"H5F_file_space_type_t"],[4,"H5F_fspace_strategy_t"],[4,"H5F_libver_t"],[4,"H5F_scope_t"],[3,"H5F_sect_info_t"],[3,"H5F_info_t"],[3,"H5F_info_t__sohm"],[3,"H5F_retry_info_t"],[3,"H5F_info2_t"],[3,"H5F_info2_t__super"],[3,"H5F_info2_t__free"],[3,"H5F_info2_t__sohm"],[4,"H5FD_file_image_op_t"],[3,"H5FD_free_t"],[3,"H5FD_t"],[3,"H5FD_class_t"],[3,"H5FD_file_image_callbacks_t"],[4,"H5G_storage_type_t"],[3,"H5G_info_t"],[4,"H5I_type_t"],[4,"H5L_type_t"],[3,"H5L_info1_t__u"],[3,"H5L_info1_t"],[3,"H5L_info2_t"],[19,"H5L_info2_t__u"],[3,"H5L_class_t"],[4,"H5O_mcdt_search_ret_t"],[4,"H5O_type_t"],[3,"H5O_info_t"],[3,"H5O_info_t__meta_size"],[3,"H5O_hdr_info_t"],[3,"H5O_hdr_info_t__space"],[3,"H5O_hdr_info_t__mesg"],[3,"H5O_token_t"],[3,"H5O_info2_t"],[3,"H5O_native_info_meta_size_t"],[3,"H5O_native_info_t"],[4,"H5PL_type_t"],[4,"H5R_type_t"],[19,"H5R_ref_t_u"],[3,"H5R_ref_t"],[4,"H5S_class_t"],[4,"H5S_seloper_t"],[4,"H5S_sel_type"],[4,"H5T_class_t"],[4,"H5T_bkg_t"],[4,"H5T_conv_ret_t"],[4,"H5T_cmd_t"],[4,"H5T_conv_except_t"],[4,"H5T_cset_t"],[4,"H5T_direction_t"],[4,"H5T_norm_t"],[4,"H5T_pad_t"],[4,"H5T_sign_t"],[4,"H5T_order_t"],[4,"H5T_pers_t"],[4,"H5T_str_t"],[3,"H5T_cdata_t"],[3,"hvl_t"],[4,"H5Z_cb_return_t"],[4,"H5Z_EDC_t"],[4,"H5Z_SO_scale_type_t"],[3,"H5Z_cb_t"],[3,"H5Z_class2_t"]]},\
"hex":{"doc":"Encoding and decoding hex strings.","t":[16,8,4,13,13,13,8,11,11,11,11,5,5,5,10,10,5,5,11,11,11,11,10,11,11,11,11,11,11,11,12,12],"n":["Error","FromHex","FromHexError","InvalidHexCharacter","InvalidStringLength","OddLength","ToHex","borrow","borrow_mut","clone","clone_into","decode","decode_to_slice","encode","encode_hex","encode_hex_upper","encode_to_slice","encode_upper","eq","fmt","fmt","from","from_hex","into","ne","to_owned","to_string","try_from","try_into","type_id","c","index"],"q":["hex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hex::FromHexError",""],"d":["","Types that can be decoded from a hex string.","The error type for decoding a hex string into <code>Vec<u8></code> or …","An invalid character was found. Valid ones are: <code>0...9</code>, …","If the hex string is decoded into a fixed sized …","A hex string’s length needs to be even, as two digits …","Encoding values as hex string.","","","","","Decodes a hex string into raw bytes.","Decode a hex string into a mutable bytes slice.","Encodes <code>data</code> as hex string using lowercase characters.","Encode the hex strict representing <code>self</code> into the result. …","Encode the hex strict representing <code>self</code> into the result. …","Encodes some bytes into a mutable slice of bytes.","Encodes <code>data</code> as hex string using uppercase characters.","","","","","Creates an instance of type <code>Self</code> from the given hex …","","","","","","","","",""],"i":[1,0,0,2,2,2,0,2,2,2,2,0,0,0,3,3,0,0,2,2,2,2,1,2,2,2,2,2,2,2,4,4],"f":[null,null,null,null,null,null,null,[[]],[[]],[[],["fromhexerror",4]],[[]],[[["asref",8]],[["vec",3],["fromhexerror",4],["result",4]]],[[["asref",8]],[["result",4],["fromhexerror",4]]],[[["asref",8]],["string",3]],[[],[["fromiterator",8],["char",15]]],[[],[["fromiterator",8],["char",15]]],[[["asref",8]],[["result",4],["fromhexerror",4]]],[[["asref",8]],["string",3]],[[["fromhexerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["asref",8]],["result",4]],[[]],[[["fromhexerror",4]],["bool",15]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null],"p":[[8,"FromHex"],[4,"FromHexError"],[8,"ToHex"],[13,"InvalidHexCharacter"]]},\
"indexmap":{"doc":"<code>IndexMap</code> is a hash table where the iteration order of the …","t":[8,10,14,14,0,0,3,4,3,3,3,3,16,3,8,13,3,13,3,16,3,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Equivalent","equivalent","indexmap","indexset","map","set","Drain","Entry","IndexMap","IntoIter","Iter","IterMut","Key","Keys","MutableKeys","Occupied","OccupiedEntry","Vacant","VacantEntry","Value","Values","ValuesMut","__private_marker","__private_marker","and_modify","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","collect","collect","collect","collect","contains_key","count","count","count","count","count","count","count","default","drain","entry","eq","extend","extend","first","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get_full","get_full_mut","get_full_mut2","get_full_mut2","get_index","get_index_mut","get_index_of","get_key_value","get_mut","get_mut","hasher","index","index","index","index","index","index_mut","index_mut","insert","insert","insert","insert_full","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_mut","is_empty","iter","iter_mut","key","key","key","keys","last","last","last","last","last","last","last","last","last_mut","len","len","len","len","len","len","len","new","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","nth","nth","nth","or_default","or_insert","or_insert_with","or_insert_with_key","pop","remove","remove","remove_entry","remove_entry","reserve","retain","retain2","retain2","reverse","shift_remove","shift_remove","shift_remove_entry","shift_remove_entry","shift_remove_full","shift_remove_index","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort_by","sort_keys","sorted_by","split_off","swap_indices","swap_remove","swap_remove","swap_remove_entry","swap_remove_entry","swap_remove_full","swap_remove_index","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","with_capacity_and_hasher","with_hasher","Difference","Drain","IndexSet","Intersection","IntoIter","Iter","SymmetricDifference","Union","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","contains","count","count","count","default","difference","drain","eq","extend","extend","first","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","from","from","from","from","from","from","from","from","from_iter","get","get_full","get_index","get_index_of","hasher","index","insert","insert_full","intersection","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","last","last","last","last","len","len","len","new","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","pop","remove","replace","reserve","retain","reverse","shift_remove","shift_remove_full","shift_remove_index","shift_take","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort","sort_by","sorted_by","split_off","swap_indices","swap_remove","swap_remove_full","swap_remove_index","swap_take","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity","with_capacity_and_hasher","with_hasher"],"q":["indexmap","","","","","","indexmap::mapindexmap::setd":["Key equivalence trait.","Compare self to <code>key</code> and return <code>true</code> if they are equal.","Create an <code>IndexMap</code> from a list of key-value pairs","Create an <code>IndexSet</code> from a list of values","<code>IndexMap</code> is a hash table where the iteration order of the …","A hash set implemented using <code>IndexMap</code>","A draining iterator over the entries of a <code>IndexMap</code>.","Entry for an existing key-value pair or a vacant location …","A hash table where the iteration order of the key-value …","An owning iterator over the entries of a <code>IndexMap</code>.","An iterator over the entries of a <code>IndexMap</code>.","A mutable iterator over the entries of a <code>IndexMap</code>.","","An iterator over the keys of a <code>IndexMap</code>.","Opt-in mutable access to keys.","Existing slot with equivalent key.","A view into an occupied entry in a <code>IndexMap</code>. It is part …","Vacant slot (no equivalent key in the map).","A view into a vacant entry in a <code>IndexMap</code>. It is part of …","","An iterator over the values of a <code>IndexMap</code>.","A mutable iterator over the values of a <code>IndexMap</code>.","This method is not useful in itself – it is there to …","","Modifies the entry if it is occupied.","","","","","","","","","","","","","","","","","","","","","","","Computes in <strong>O(1)</strong> time.","Remove all key-value pairs in the map, while preserving …","","","","","","","","","","","","","","","","","Return <code>true</code> if an equivalent to <code>key</code> exists in the map.","","","","","","","","Return an empty <code>IndexMap</code>","Clears the <code>IndexMap</code> in the given index range, returning …","Get the given key’s corresponding entry in the map for …","","Extend the map with all key-value pairs in the iterable.","Extend the map with all key-value pairs in the iterable.","Get the first key-value pair","Get the first key-value pair, with mutable access to the …","","","","","","","","","","","","","","","","","","","","Create an <code>IndexMap</code> from the sequence of key-value pairs …","Gets a reference to the entry’s value in the map.","Return a reference to the value stored for <code>key</code>, if it is …","Return item index, key and value","","Return item index, mutable reference to key and value","","Get a key-value pair by index","Get a key-value pair by index","Return item index, if it exists in the map","Return references to the key-value pair stored for <code>key</code>, …","Gets a mutable reference to the entry’s value in the …","","Return a reference to the map’s <code>BuildHasher</code>.","Return the index of the key-value pair","Return the index where the key-value pair exists or will …","Return the index where the key-value pair will be …","Returns a reference to the value corresponding to the …","Returns a reference to the value at the supplied <code>index</code>.","Returns a mutable reference to the value corresponding to …","Returns a mutable reference to the value at the supplied …","Sets the value of the entry to <code>value</code>, and returns the …","Inserts the entry’s key and the given value into the …","Insert a key-value pair in the map.","Insert a key-value pair in the map, and get their index.","","","","","","","","","","","","","","","","","","","","Takes ownership of the key, leaving the entry vacant.","Converts into a mutable reference to the entry’s value …","Returns true if the map contains no elements.","Return an iterator over the key-value pairs of the map, …","Return an iterator over the key-value pairs of the map, …","Gets a reference to the entry’s key in the map.","Gets a reference to the entry’s key, either within the …","Gets a reference to the key that was used to find the …","Return an iterator over the keys of the map, in their …","Get the last key-value pair","","","","","","","","Get the last key-value pair, with mutable access to the …","Return the number of key-value pairs in the map.","","","","","","","Create a new map. (Does not allocate.)","","","","","","","","","","","","","","","","","","","","","","Inserts a default-constructed value in the entry if it is …","Inserts the given default value in the entry if it is …","Inserts the result of the <code>call</code> function in the entry if …","Inserts the result of the <code>call</code> function with a reference …","Remove the last key-value pair","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Reserve capacity for <code>additional</code> more key-value pairs.","Scan through each key-value pair in the map and keep …","Scan through each key-value pair in the map and keep …","","Reverses the order of the map’s key-value pairs in …","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the key-value pair by index","Shrink the capacity of the map as much as possible.","","","","","","","","Sort the map’s key-value pairs in place using the …","Sort the map’s key-value pairs by the default ordering …","Sort the key-value pairs of the map and return a by value …","Splits the collection into two at the given index.","Swaps the position of two key-value pairs in the map.","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the key-value pair by index","","","","","Shortens the map, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over the values of the map, in their …","Return an iterator over mutable references to the the …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with <code>hash_builder</code>","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>IndexSet</code>.","A hash set where the iteration order of the values is …","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>IndexSet</code>.","An iterator over the items of a <code>IndexSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of …","","","","","","","","","","","","","","","","","Computes in <strong>O(1)</strong> time.","Remove all elements in the set, while preserving its …","","","","","","","","","","","","","","","","","Return <code>true</code> if an equivalent to <code>value</code> exists in the set.","","","","Return an empty <code>IndexSet</code>","Return an iterator over the values that are in <code>self</code> but …","Clears the <code>IndexSet</code> in the given index range, returning …","","","","Get the first value","","","","","","","","","","","","","","","","","","","Return a reference to the value stored in the set, if it …","Return item index and value","Get a value by index","Return item index, if it exists in the set","Return a reference to the set’s <code>BuildHasher</code>.","Returns a reference to the value at the supplied <code>index</code>.","Insert the value into the set.","Insert the value into the set, and get its index.","Return an iterator over the values that are in both <code>self</code> …","","","","","","","","","","","","","","","","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.","Returns true if the set contains no elements.","Returns <code>true</code> if all elements of <code>self</code> are contained in …","Returns <code>true</code> if all elements of <code>other</code> are contained in …","Return an iterator over the values of the set, in their …","Get the last value","","","","Return the number of elements in the set.","","","Create a new set. (Does not allocate.)","","","","","","","","","","","","","","","","","","Remove the last value","Remove the value from the set, and return <code>true</code> if it was …","Adds a value to the set, replacing the existing value, if …","Reserve capacity for <code>additional</code> more values.","Scan through each value in the set and keep those where …","Reverses the order of the set’s values in place.","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set return it and the index it …","Remove the value by index","Removes and returns the value in the set, if any, that is …","Shrink the capacity of the set as much as possible.","","","","","","","","Sort the set’s values by their default ordering.","Sort the set’s values in place using the comparison …","Sort the values of the set and return a by value iterator …","Splits the collection into two at the given index.","Swaps the position of two values in the set.","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set return it and the index it …","Remove the value by index","Removes and returns the value in the set, if any, that is …","Return an iterator over the values that are in <code>self</code> or …","Removes and returns the value in the set, if any, that is …","","","","","","","Shortens the set, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over all values that are in <code>self</code> or …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with <code>hash_builder</code>"],"i":[0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,3,0,3,0,2,0,0,2,4,3,5,3,6,4,7,8,9,10,11,12,13,5,3,6,4,7,8,9,10,11,12,13,4,4,4,7,8,10,4,4,7,8,10,7,8,9,10,11,12,13,4,7,8,9,10,11,12,13,4,4,4,4,4,4,4,4,5,3,6,4,7,8,10,12,5,3,6,4,7,8,9,10,11,12,13,4,5,4,4,4,2,4,4,4,4,4,5,4,4,5,3,6,4,4,4,4,5,6,4,4,5,3,6,4,7,8,9,10,11,12,13,4,7,8,9,10,11,12,13,6,5,4,4,4,5,3,6,4,4,7,8,9,10,11,12,13,4,4,7,8,9,10,11,12,4,7,8,9,10,11,12,13,7,8,9,10,11,12,13,7,8,9,10,11,12,13,3,3,3,3,4,5,4,5,4,4,4,2,4,4,5,4,5,4,4,4,4,7,8,9,10,11,12,13,4,4,4,4,4,5,4,5,4,4,4,4,7,8,10,4,5,3,6,4,7,8,9,10,11,12,13,5,3,6,4,7,8,9,10,11,12,13,5,3,6,4,7,8,9,10,11,12,13,4,4,4,4,4,0,0,0,0,0,0,0,0,14,15,16,17,18,19,20,21,14,15,16,17,18,19,20,21,14,14,14,16,18,19,20,21,14,14,16,18,19,20,21,15,16,17,14,15,16,17,14,14,14,14,14,14,14,14,15,16,18,19,20,21,20,21,14,15,16,17,18,19,20,21,14,14,14,14,14,14,14,14,14,14,14,15,16,17,18,19,20,21,14,15,16,17,18,19,20,21,14,14,14,14,14,14,15,16,17,14,15,16,14,15,16,17,18,19,20,21,15,16,17,18,19,20,21,15,16,17,14,14,14,14,14,14,14,14,14,14,14,15,16,17,18,19,20,21,14,14,14,14,14,14,14,14,14,14,14,14,16,18,19,20,21,14,14,15,16,17,18,19,20,21,14,15,16,17,18,19,20,21,14,15,16,17,18,19,20,21,14,14,14,14],"f":[null,[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["privatemarker",3]],[[],["privatemarker",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["drain",3]],[[],["entry",4]],[[["indexmap",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["option",4]],[[],["option",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["usize",15],["option",4]]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[]],[[]],[[]],[[],["keys",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["values",3]],[[],["valuesmut",3]],[[["usize",15]]],[[["usize",15]]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["indexset",3]],["difference",3]],[[],["drain",3]],[[["indexset",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["option",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],[["usize",15],["option",4]]],[[]],[[["usize",15]]],[[],["bool",15]],[[]],[[["indexset",3]],["intersection",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["indexset",3]],["bool",15]],[[],["bool",15]],[[["indexset",3]],["bool",15]],[[["indexset",3]],["bool",15]],[[],["iter",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["option",4]],[[["usize",15]]],[[]],[[]],[[],["bool",15]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[["indexset",3]],["symmetricdifference",3]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["indexset",3]],["union",3]],[[["usize",15]]],[[["usize",15]]],[[]]],"p":[[8,"Equivalent"],[8,"MutableKeys"],[4,"Entry"],[3,"IndexMap"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"IndexSet"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"Difference"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"Union"]]},\
"indicatif":{"doc":"indicatif is a library for Rust that helps you build …","t":[12,12,12,12,12,3,3,3,3,3,3,3,3,3,3,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","0","0","0","0","BinaryBytes","DecimalBytes","FormattedDuration","HumanBytes","HumanDuration","MultiProgress","ProgressBar","ProgressBarIter","ProgressBarWrap","ProgressDrawTarget","ProgressIterator","ProgressStyle","WeakProgressBar","abandon","abandon_with_message","add","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default_bar","default_spinner","disable_steady_tick","downgrade","enable_steady_tick","finish","finish_and_clear","finish_at_current_pos","finish_with_message","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","get_final_tick_char","get_final_tick_str","get_tick_char","get_tick_str","hidden","hidden","inc","inc_length","insert","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_finished","is_hidden","is_hidden","join","join_and_clear","length","new","new","new_spinner","next","position","println","progress","progress","progress_chars","progress_count","progress_count","progress_with","read","reset","reset_elapsed","reset_eta","seek","set_draw_delta","set_draw_target","set_draw_target","set_length","set_message","set_move_cursor","set_position","set_prefix","set_style","stderr","stderr_nohz","stderr_with_hz","stdout","stdout_nohz","stdout_with_hz","template","tick","tick_chars","tick_strings","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_term","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upgrade","with_draw_target","with_draw_target","with_style","wrap_iter","wrap_read","wrap_write","write","write_all","write_vectored"],"q":["indicatifd":["","","","","","Formats bytes for human readability using ISO/IEC prefixes","Formats bytes for human readability using SI prefixes","Wraps an std duration for human basic formatting.","Formats bytes for human readability","Wraps an std duration for human readable formatting.","Manages multiple progress bars from different threads.","A progress bar or spinner.","Wraps an iterator to display its progress.","wraps an io-object, either a Reader or a Writer (or both).","Target for draw operations","Wraps an iterator to display its progress.","Controls the rendering style of progress bars.","A weak reference to a <code>ProgressBar</code>.","Finishes the progress bar and leaves the current message …","Finishes the progress bar and sets a message, and leaves …","Adds a progress bar.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the default progress bar style for bars.","Returns the default progress bar style for spinners.","Undoes <code>enable_steady_tick</code>.","Creates a new weak reference to this <code>ProgressBar</code>.","Spawns a background thread to tick the progress bar.","Finishes the progress bar and leaves the current message.","Finishes the progress bar and completely clears it.","Finishes the progress bar at current position and leaves …","Finishes the progress bar and sets a message.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the tick char for the finished state.","Returns the tick string for the finished state.","Returns the tick char for a given number.","Returns the tick string for a given number.","A hidden draw target.","Creates a completely hidden progress bar.","Advances the position of a progress bar by delta.","Increase the length of the progress bar.","Inserts a progress bar.","","","","","","","","","","","","","","","Returns true if the draw target is hidden.","A quick convenience check if the progress bar is hidden.","Waits for all progress bars to report that they are …","Works like <code>join</code> but clears the progress bar in the end.","","Creates a new multi progress object.","Creates a new progress bar with a given length.","Creates a new spinner.","","","Print a log line above the progress bar.","Wrap an iterator with default styling. Attempt to guess …","Wrap an iterator with default styling. Attempt to guess …","Sets the progress characters <code>(filled, current, to do)</code>. …","Wrap an iterator with an explicit element count.","Wrap an iterator with an explicit element count.","Wrap an iterator with a custom progress bar.","","","Resets elapsed time","Resets the ETA calculation.","","Limit redrawing of progress bar to every <code>n</code> steps. …","Sets a different draw target for the multiprogress bar.","Sets a different draw target for the progress bar.","Sets the length of the progress bar.","Sets the current message of the progress bar.","Set whether we should try to move the cursor when …","Sets the position of the progress bar.","Sets the current prefix of the progress bar.","Overrides the stored style.","Draw to a buffered stderr terminal at a max of 15 times a …","Draw to a buffered stderr terminal without max framerate.","Draw to a buffered stderr terminal at a max of …","Draw to a buffered stdout terminal at a max of 15 times a …","Draw to a buffered stdout terminal without max framerate.","Draw to a buffered stdout terminal at a max of …","Sets the template string for the progress bar.","Manually ticks the spinner or progress bar.","Sets the tick character sequence for spinners.","Sets the tick string sequence for spinners.","","","","","","","","","Draw to a terminal, optionally with a specific refresh …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to upgrade the Weak pointer to a <code>ProgressBar</code>, …","Creates a new multi progress object with the given draw …","Creates a new progress bar with a given length and draw …","A convenience builder-like function for a progress bar …","Wraps an iterator with the progress bar.","Wraps a Reader with the progress bar.","Wraps a Writer with the progress bar.","","",""],"i":[1,2,3,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,7,8,9,7,1,2,3,4,5,6,10,11,12,8,9,7,1,2,3,4,5,6,10,11,12,6,10,12,6,10,12,7,12,12,6,6,6,6,6,6,6,11,7,1,1,2,2,3,3,4,4,5,5,6,11,12,8,9,7,1,2,3,4,5,6,10,11,12,12,12,12,12,9,6,6,6,7,8,9,7,1,2,3,4,5,6,10,11,12,8,6,9,6,7,7,6,7,6,6,8,6,6,13,13,12,13,13,13,11,6,6,6,11,6,7,6,6,6,7,6,6,6,9,9,9,9,9,9,12,6,12,12,6,10,12,1,2,3,4,5,9,8,9,7,1,2,3,4,5,6,10,11,12,8,9,7,1,2,3,4,5,6,10,11,12,8,9,7,1,2,3,4,5,6,10,11,12,10,7,6,6,6,6,6,11,11,11],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["str",15]]],[[["progressbar",3]],["progressbar",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["progressbar",3]],[[],["weakprogressbar",3]],[[],["progressstyle",3]],[[]],[[]],[[]],[[],["multiprogress",3]],[[],["progressstyle",3]],[[],["progressstyle",3]],[[]],[[],["weakprogressbar",3]],[[["u64",15]]],[[]],[[]],[[]],[[["str",15]]],[[],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["char",15]],[[],["str",15]],[[["u64",15]],["char",15]],[[["u64",15]],["str",15]],[[],["progressdrawtarget",3]],[[],["progressbar",3]],[[["u64",15]]],[[["u64",15]]],[[["usize",15],["progressbar",3]],["progressbar",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["result",6]],[[],["result",6]],[[],["u64",15]],[[],["multiprogress",3]],[[["u64",15]],["progressbar",3]],[[],["progressbar",3]],[[],["option",4]],[[],["u64",15]],[[["into",8],["string",3]]],[[],["progressbariter",3]],[[],["progressbariter",3]],[[["str",15]],["progressstyle",3]],[[["u64",15]],["progressbariter",3]],[[["u64",15]],["progressbariter",3]],[[["progressbar",3]],["progressbariter",3]],[[],[["usize",15],["result",6]]],[[]],[[]],[[]],[[["seekfrom",4]],[["result",6],["u64",15]]],[[["u64",15]]],[[["progressdrawtarget",3]]],[[["progressdrawtarget",3]]],[[["u64",15]]],[[["str",15]]],[[["bool",15]]],[[["u64",15]]],[[["str",15]]],[[["progressstyle",3]]],[[],["progressdrawtarget",3]],[[],["progressdrawtarget",3]],[[["u64",15]],["progressdrawtarget",3]],[[],["progressdrawtarget",3]],[[],["progressdrawtarget",3]],[[["u64",15]],["progressdrawtarget",3]],[[["str",15]],["progressstyle",3]],[[]],[[["str",15]],["progressstyle",3]],[[],["progressstyle",3]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["term",3]],["progressdrawtarget",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["progressbar",3],["option",4]]],[[["progressdrawtarget",3]],["multiprogress",3]],[[["progressdrawtarget",3],["u64",15]],["progressbar",3]],[[["progressstyle",3]],["progressbar",3]],[[["iterator",8]],[["progressbariter",3],["iterator",8]]],[[["read",8]],[["progressbarwrap",3],["read",8]]],[[["write",8]],[["write",8],["progressbarwrap",3]]],[[],[["usize",15],["result",6]]],[[],["result",6]],[[],[["usize",15],["result",6]]]],"p":[[3,"FormattedDuration"],[3,"HumanDuration"],[3,"HumanBytes"],[3,"DecimalBytes"],[3,"BinaryBytes"],[3,"ProgressBar"],[3,"MultiProgress"],[3,"ProgressBarIter"],[3,"ProgressDrawTarget"],[3,"WeakProgressBar"],[3,"ProgressBarWrap"],[3,"ProgressStyle"],[8,"ProgressIterator"]]},\
"itertools":{"doc":"Extra iterator adaptors, functions and macros.","tn":["Both","Continue","Diff","Done","Either","EitherOrBoth","First","FirstMismatch","FoldWhile","Itertools","Last","Left","Left","Longer","Middle","MinMax","MinMaxResult","NoElements","OneElement","Only","PeekingNext","Position","Right","Right","Shorter","all","all","all_equal","any","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","assert_equal","batching","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","both","cartesian_product","chain","circular_tuple_windows","clone","clone","clone","clone","clone","cloned","cmp","coalesce","collect","collect_tuple","concat","concat","cons_tuples","count","dedup","dedup_by","dedup_by_with_count","dedup_with_count","deref","deref_mut","diff_with","dropping","dropping_back","either","either_with","enumerate","eq","eq","eq","eq","eq","equal","exactly_one","expect_left","expect_right","extend","factor_first","factor_second","filter_map_ok","filter_ok","find_position","flip","flip","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold1","fold_ok","fold_options","fold_results","fold_while","foreach","format","format_with","from","from","from","from","from","from","from","has_left","has_right","hash","hash","interleave","interleave","interleave_shortest","intersperse","intersperse_with","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_iter","into_iter","into_option","iproduct","is_both","is_done","is_left","is_left","is_right","is_right","iterate","izip","last","left","left","left_and_then","left_and_then","left_or","left_or_default","left_or_else","map","map_any","map_into","map_left","map_left","map_ok","map_results","map_right","map_right","max","merge","merge","merge_by","merge_join_by","merge_join_by","min","minmax","minmax_by","minmax_by_key","multizip","ne","ne","ne","ne","ne","next","next_back","next_tuple","nth","pad_using","partial_cmp","partition","partition_map","peeking_next","peeking_take_while","position_max","position_max_by","position_max_by_key","position_min","position_min_by","position_min_by_key","position_minmax","position_minmax_by","position_minmax_by_key","positions","process_results","product1","put_back","reduce","repeat_call","repeat_n","rev","right","right","right_and_then","right_and_then","right_or","right_or_default","right_or_else","set_from","size_hint","step","structs","sum1","take_while_ref","traits","tree_fold1","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tuple_combinations","tuple_windows","tuples","type_id","type_id","type_id","type_id","type_id","type_id","unfold","unwrap_left","unwrap_right","update","while_some","with_position","zip","zip_eq","zip_eq","zip_longest","Batching","CircularTupleWindows","Coalesce","ConsTuples","Dedup","DedupBy","DedupByWithCount","DedupWithCount","ExactlyOneError","FilterMapOk","FilterOk","Format","FormatWith","Interleave","InterleaveShortest","Intersperse","IntersperseWith","Iterate","MapInto","MapOk","MapResults","Merge","MergeBy","MergeJoinBy","PadUsing","PeekingTakeWhile","Positions","ProcessResults","Product","PutBack","RepeatCall","RepeatN","Step","TakeWhileRef","TupleBuffer","TupleCombinations","TupleWindows","Tuples","Unfold","Update","WhileSome","WithPosition","Zip","ZipEq","ZipLongest","all","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","collect","collect","collect","count","count","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_buffer","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_parts","last","last","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","peeking_next","put_back","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","state","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_value","HomogeneousTuple"],"q":["itertoolsitertools::structsitertools::traits"],"d":["Both values are present.","Continue folding with this value","A type returned by the <code>diff_with</code> function.","Fold is complete and will return this value","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","Value that either holds a single A or B, or both.","This is the first element.","The index of the first non-matching element along with …","An enum used for controlling the execution of …","An <code>Iterator</code> blanket implementation that provides extra …","This is the last element.","Only the left value of type <code>A</code> is present.","A value of type <code>L</code>.","The total number of elements that were in <code>I</code> along with …","This is neither the first nor the last element.","More than one element in the iterator, the first element …","<code>MinMaxResult</code> is an enum returned by <code>minmax</code>. See …","Empty iterator","Iterator with one element, so the minimum and maximum are …","This is the only element.","An iterator that allows peeking at an element before …","A value yielded by <code>WithPosition</code>. Indicates the position …","Only the right value of type <code>B</code> is present.","A value of type <code>R</code>.","The total number of elements that were in <code>J</code> along with …","Test whether the predicate holds for all elements in the …","","Check whether all elements compare equal.","Test whether the predicate holds for any elements in the …","Converts from <code>&mut EitherOrBoth<A, B></code> to …","Convert <code>&mut Either<L, R></code> to <code>Either<&mut L, &mut R></code>.","","","","Converts from <code>&EitherOrBoth<A, B></code> to <code>EitherOrBoth<&A, &B></code>.","","Convert <code>&Either<L, R></code> to <code>Either<&L, &R></code>.","","","Assert that two iterables produce equal sequences, with …","A “meta iterator adaptor”. Its closure receives a …","","","","","","","","","","","","","If Both, return <code>Some</code> tuple containing left and right.","Return an iterator adaptor that iterates over the …","Create an iterator that first iterates <code>i</code> and then <code>j</code>.","Return an iterator over all windows, wrapping back to the …","","","","","","Create an iterator that clones each element from &T to T","","Return an iterator adaptor that uses the passed-in …","","Collects all items from the iterator into a tuple of a …","Combine all an iterator’s elements into one element by …","Combine all an iterator’s elements into one element by …","Create an iterator that maps for example iterators of …","","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","","","Compares every element yielded by both <code>i</code> and <code>j</code> with the …","Consume the first <code>n</code> elements from the iterator eagerly, …","Consume the last <code>n</code> elements from the iterator eagerly, …","Apply one of two functions depending on contents, …","Like <code>either</code>, but provide some context to whichever of the …","Iterate <code>iterable</code> with a running index.","","","","","","Return <code>true</code> if both iterables produce equal sequences …","If the iterator yields exactly one element, that element …","Returns the left value","Returns the right value","","Factor out a homogeneous type from an either of pairs.","Factor out a homogeneous type from an either of pairs.","Return an iterator adaptor that filters and transforms …","Return an iterator adaptor that filters every <code>Result::Ok</code> …","Find the position and value of the first element …","Convert <code>EitherOrBoth<A, B></code> to <code>EitherOrBoth<B, A></code>.","Convert <code>Either<L, R></code> to <code>Either<R, L></code>.","","","","","","","Perform a fold operation over the iterable.","","Accumulator of the elements in the iterator.","Fold <code>Result</code> values from an iterator.","Fold <code>Option</code> values from an iterator.","See <code>.fold_ok()</code>.","An iterator method that applies a function, producing a …","Run the closure <code>f</code> eagerly on each element of the iterator.","Format all iterator elements, separated by <code>sep</code>.","Format all iterator elements, separated by <code>sep</code>.","","","","","","","","If <code>Left</code>, or <code>Both</code>, return true, otherwise, return false.","If <code>Right</code>, or <code>Both</code>, return true, otherwise, return false.","","","Create an iterator that interleaves elements in <code>i</code> and <code>j</code>.","Alternate elements from two iterators until both have run …","Alternate elements from two iterators until at least one …","An iterator adaptor to insert a particular value between …","An iterator adaptor to insert a particular value created …","","","","","","","","","Return the inner value.","Return the value in the continue or done.","Extract the value of an either over two equivalent types.","Convert the inner value to an iterator.","","<code>into_option</code> creates an <code>Option</code> of type <code>(T, T)</code>. The …","Create an iterator over the “cartesian product” of …","If Right, return true otherwise, return false. Equivalent …","Return true if <code>self</code> is <code>Done</code>, false if it is <code>Continue</code>.","If Left, return true otherwise, return false. Exclusive …","Return true if the value is the <code>Left</code> variant.","If Right, return true otherwise, return false. Exclusive …","Return true if the value is the <code>Right</code> variant.","Creates a new iterator that infinitely applies function …","Create an iterator running multiple iterators in lockstep.","","If <code>Left</code>, or <code>Both</code>, return <code>Some</code> with the left value, …","Convert the left side of <code>Either<L, R></code> to an <code>Option<L></code>.","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","Map <code>f</code> over the contained value and return the result in …","Apply the functions <code>f</code> and <code>g</code> on the value <code>a</code> and <code>b</code> …","Convert each item of the iterator using the <code>Into</code> trait.","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return an iterator adaptor that applies the provided …","See <code>.map_ok()</code>.","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return the maximum value of the iterable.","Create an iterator that merges elements in <code>i</code> and <code>j</code>.","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merge-joins items from …","Create an iterator that merges items from both this and …","Return the minimum value of the iterable.","Return the minimum and maximum elements in the iterator.","Return the minimum and maximum element of an iterator, as …","Return the minimum and maximum element of an iterator, as …","An iterator that generalizes <em>.zip()</em> and allows running …","","","","","","","","Advances the iterator and returns the next items grouped …","","Return an iterator adaptor that pads the sequence to a …","","Partition a sequence using predicate <code>pred</code> so that elements…","Collect all iterator elements into one of two partitions. …","Pass a reference to the next iterator element to the …","Return an iterator adaptor that borrows from this …","Return the position of the maximum element in the …","Return the position of the maximum element in the …","Return the position of the maximum element in the …","Return the position of the minimum element in the …","Return the position of the minimum element in the …","Return the position of the minimum element in the …","Return the positions of the minimum and maximum elements …","Return the postions of the minimum and maximum elements …","Return the postions of the minimum and maximum elements …","Return an iterator adaptor that yields the indices of all …","“Lift” a function of the values of an iterator so …","Iterate over the entire iterator and multiply all the …","Create an iterator where you can put back a single item","Return either value of left, right, or the product of <code>f</code> …","An iterator source that produces elements indefinitely by …","Create an iterator that produces <code>n</code> repetitions of <code>element</code>.","Iterate <code>iterable</code> in reverse.","If <code>Right</code>, or <code>Both</code>, return <code>Some</code> with the right value, …","Convert the right side of <code>Either<L, R></code> to an <code>Option<R></code>.","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","Assign to each reference in <code>self</code> from the <code>from</code> iterator, …","","Return an iterator adaptor that steps <code>n</code> elements in the …","The concrete iterator types.","Iterate over the entire iterator and add all the elements.","Return an iterator adaptor that borrows from a <code>Clone</code>-able …","Traits helpful for using certain <code>Itertools</code> methods in …","Accumulate the elements in the iterator in a tree-like …","","","","","","","","","","","","","Return an iterator adaptor that iterates over the …","Return an iterator over all contiguous windows producing …","Return an iterator that groups the items in tuples of a …","","","","","","","Creates a new unfold source with the specified closure as …","Returns the left value","Returns the right value","Return an iterator adaptor that applies a mutating …","Return an iterator adaptor that filters <code>Option<A></code> …","Return an iterator adaptor that wraps each element in a …","Iterate <code>i</code> and <code>j</code> in lock step.","Iterate <code>i</code> and <code>j</code> in lock step.","Create an iterator which iterates over both this and the …","Create an iterator which iterates over both this and the …","A “meta iterator adaptor”. Its closure receives a …","An iterator over all windows,wrapping back to the first …","An iterator adaptor that may join together adjacent …","An iterator that maps an iterator of tuples like …","An iterator adaptor that removes repeated duplicates.","An iterator adaptor that removes repeated duplicates, …","An iterator adaptor that removes repeated duplicates, …","An iterator adaptor that removes repeated duplicates, …","Iterator returned for the error case of …","An iterator adapter to filter and apply a transformation …","An iterator adapter to filter values within a nested …","Format all iterator elements lazily, separated by <code>sep</code>.","Format all iterator elements lazily, separated by <code>sep</code>.","An iterator adaptor that alternates elements from two …","An iterator adaptor that alternates elements from the two …","An iterator adaptor to insert a particular value between …","An iterator adaptor to insert a particular value created …","An iterator that infinitely applies function to value and …","An iterator adapter to apply <code>Into</code> conversion to each …","An iterator adapter to apply a transformation within a …","See <code>MapOk</code>.","An iterator adaptor that merges the two base iterators in …","An iterator adaptor that merges the two base iterators in …","An iterator adaptor that merge-joins items from the two …","An iterator adaptor that pads a sequence to a minimum …","An iterator adaptor that takes items while a closure …","An iterator adapter to get the positions of each element …","An iterator that produces only the <code>T</code> values as long as the…","An iterator adaptor that iterates over the cartesian …","An iterator adaptor that allows putting back a single …","See <code>repeat_call</code> for more information.","An iterator that produces <em>n</em> repetitions of an element.","An iterator adaptor that steps a number elements in the …","An iterator adaptor that borrows from a <code>Clone</code>-able …","An iterator over a incomplete tuple.","An iterator to iterate through all combinations in a <code>Clone</code>…","An iterator over all contiguous windows that produces …","An iterator that groups the items in tuples of a specific …","See <code>unfold</code> for more information.","An iterator adapter to apply a mutating function to each …","An iterator adaptor that filters <code>Option<A></code> iterator …","An iterator adaptor that wraps each element in an <code>Position</code>…","See <code>multizip</code> for more information.","An iterator which iterates two other iterators …","An iterator which iterates two other iterators …eturn a buffer with the produced items that was not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Split the <code>PutBack</code> into its parts.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Put back a single value to the front of the iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Internal state that will be passed to the closure on the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","put back value <code>value</code> (builder method)","Implemented for homogeneous tuples of size up to 4."],"i":[1,2,0,2,0,0,3,4,0,0,3,1,5,4,3,6,0,6,6,3,0,0,1,5,4,0,5,7,0,1,5,5,5,5,1,5,5,5,5,0,7,4,1,6,3,2,5,4,1,6,3,2,5,1,7,0,7,1,6,3,2,5,0,5,7,5,7,0,7,0,5,7,7,7,7,5,5,0,7,7,5,5,0,1,6,3,2,5,0,7,5,5,5,5,5,7,7,7,1,5,1,6,3,2,5,5,0,5,7,7,7,7,7,7,7,7,4,1,6,3,2,5,5,1,1,1,5,0,7,7,7,7,4,1,1,6,3,2,5,5,3,2,5,5,5,6,0,1,2,1,5,1,5,0,0,5,1,5,1,5,5,5,5,5,1,7,1,5,7,7,1,5,0,0,7,7,0,7,0,7,7,7,0,1,6,3,2,5,5,5,7,5,7,5,0,7,8,7,7,7,7,7,7,7,7,7,7,7,0,7,0,1,0,0,0,1,5,1,5,5,5,5,7,5,7,0,7,7,0,7,4,1,6,3,2,5,4,1,6,3,2,5,7,7,7,4,1,6,3,2,5,0,5,5,7,7,7,0,0,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,10,11,12,13,14,15,16,17,9,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,10,11,12,13,14,15,16,17,9,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,10,13,15,16,17,9,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,41,42,43,12,23,25,13,9,10,11,13,16,17,9,18,19,20,21,22,26,27,27,28,29,29,29,29,29,29,29,29,29,30,32,33,34,35,36,37,39,40,41,42,43,12,9,18,23,25,26,26,26,26,26,26,26,26,26,26,30,10,11,12,13,14,15,16,17,9,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,43,43,43,43,43,43,43,43,43,43,43,43,10,11,12,13,14,15,16,17,9,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,38,10,11,12,13,14,15,16,17,9,18,19,20,21,22,23,24,25,26,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,9,13,9,10,11,12,13,14,15,16,17,9,18,19,20,21,22,23,24,25,26,26,26,26,26,26,26,26,26,26,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,43,43,43,43,43,43,43,43,43,43,43,24,25,26,26,26,26,26,26,26,26,26,26,31,33,42,43,43,43,43,43,43,43,43,43,43,43,43,13,9,9,9,10,11,12,13,14,15,16,17,9,18,20,21,23,24,25,26,26,26,26,26,26,26,26,26,26,27,30,31,32,33,34,36,37,41,42,43,43,43,43,43,43,43,43,43,43,43,43,35,10,11,12,13,14,15,16,17,9,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,10,11,12,13,14,15,16,17,9,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,10,11,12,13,14,15,16,17,9,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,9,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["eitherorboth",4]],[[],["either",4]],[[]],[[]],[[],["str",15]],[[],["eitherorboth",4]],[[],["str",15]],[[],["either",4]],[[]],[[]],[[]],[[],["batching",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["product",3]],[[],["chain",3]],[[],["circulartuplewindows",3]],[[],["eitherorboth",4]],[[],["minmaxresult",4]],[[],["position",4]],[[],["foldwhile",4]],[[],["either",4]],[[],["cloned",3]],[[["either",4]],["ordering",4]],[[],["coalesce",6]],[[]],[[],["option",4]],[[]],[[]],[[],["constuples",3]],[[],["usize",15]],[[],["dedup",6]],[[],["dedupby",6]],[[],["dedupbywithcount",6]],[[],["dedupwithcount",6]],[[]],[[]],[[],[["diff",4],["option",4]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["enumerate",3]],[[["eitherorboth",4]],["bool",15]],[[["minmaxresult",4]],["bool",15]],[[["position",4]],["bool",15]],[[["foldwhile",4]],["bool",15]],[[["either",4]],["bool",15]],[[],["bool",15]],[[],[["result",4],["exactlyoneerror",3]]],[[["str",15]]],[[["str",15]]],[[]],[[]],[[]],[[],["filtermapok",3]],[[],["filterok",3]],[[],["option",4]],[[],["eitherorboth",4]],[[],["either",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[],["option",4]],[[],["result",4]],[[],["option",4]],[[],["result",4]],[[],["foldwhile",4]],[[]],[[["str",15]],["format",3]],[[["str",15]],["formatwith",3]],[[]],[[]],[[]],[[]],[[]],[[["result",4]],["either",4]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["interleave",3]],[[],["interleave",3]],[[],["interleaveshortest",3]],[[],["intersperse",6]],[[],["interspersewith",3]],[[]],[[],[["either",4],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["either",4]],[[]],[[],["option",4]],null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["iterate",3]],null,[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["eitherorboth",4]],[[],["either",4]],[[]],[[]],[[]],[[],["either",4]],[[],["eitherorboth",4]],[[],["mapinto",6]],[[],["eitherorboth",4]],[[],["either",4]],[[],["mapok",6]],[[],["mapok",6]],[[],["eitherorboth",4]],[[],["either",4]],[[],["option",4]],[[],["merge",6]],[[],["merge",6]],[[],["mergeby",3]],[[],["mergejoinby",3]],[[],["mergejoinby",3]],[[],["option",4]],[[],["minmaxresult",4]],[[],["minmaxresult",4]],[[],["minmaxresult",4]],[[],["zip",3]],[[["eitherorboth",4]],["bool",15]],[[["minmaxresult",4]],["bool",15]],[[["position",4]],["bool",15]],[[["foldwhile",4]],["bool",15]],[[["either",4]],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["padusing",3]],[[["either",4]],[["ordering",4],["option",4]]],[[],["usize",15]],[[]],[[],["option",4]],[[],["peekingtakewhile",3]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["minmaxresult",4]]],[[],[["usize",15],["minmaxresult",4]]],[[],[["usize",15],["minmaxresult",4]]],[[],["positions",3]],[[],["result",4]],[[],["option",4]],[[],["putback",3]],[[]],[[],["repeatcall",3]],[[["usize",15]],["repeatn",3]],[[],["rev",3]],[[],["option",4]],[[],["option",4]],[[],["eitherorboth",4]],[[],["either",4]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[["usize",15]],["step",3]],null,[[],["option",4]],[[],["takewhileref",3]],null,[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["tuplecombinations",3]],[[],["tuplewindows",3]],[[],["tuples",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["unfold",3]],[[]],[[]],[[],["update",3]],[[],["whilesome",3]],[[],["withposition",3]],[[],["zip",3]],[[],["zipeq",3]],[[],["zipeq",3]],[[],["ziplongest",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["interleave",3]],[[],["interleaveshortest",3]],[[],["putback",3]],[[],["product",3]],[[],["batching",3]],[[],["step",3]],[[],["whilesome",3]],[[],["tuplecombinations",3]],[[],["filterok",3]],[[],["positions",3]],[[],["update",3]],[[]],[[],["exactlyoneerror",3]],[[],["formatwith",3]],[[],["format",3]],[[],["interspersewith",3]],[[],["padusing",3]],[[],["repeatn",3]],[[],["repeatcall",3]],[[],["unfold",3]],[[],["iterate",3]],[[],["tuplebuffer",3]],[[],["tuples",3]],[[],["tuplewindows",3]],[[],["zipeq",3]],[[],["ziplongest",3]],[[],["zip",3]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["fmtresult",6]],[[["formatter",3]],["fmtresult",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["tuplebuffer",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null],"p":[[4,"EitherOrBoth"],[4,"FoldWhile"],[4,"Position"],[4,"Diff"],[4,"Either"],[4,"MinMaxResult"],[8,"Itertools"],[8,"PeekingNext"],[3,"PutBack"],[3,"MergeBy"],[3,"TakeWhileRef"],[3,"FilterMapOk"],[3,"MergeJoinBy"],[3,"PeekingTakeWhile"],[3,"WithPosition"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"FilterOk"],[3,"Positions"],[3,"Update"],[3,"ConsTuples"],[3,"ExactlyOneError"],[3,"FormatWith"],[3,"Format"],[3,"IntersperseWith"],[3,"PadUsing"],[3,"ProcessResults"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Unfold"],[3,"Iterate"],[3,"TupleBuffer"],[3,"Tuples"],[3,"TupleWindows"],[3,"CircularTupleWindows"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"]]},\
"itoa":{"doc":"github crates-io docs-rs","t":[3,8,11,11,11,11,5,11,11,11,11,11,11,11],"n":["Buffer","Integer","borrow","borrow_mut","clone","default","fmt","format","from","into","new","try_from","try_into","type_id"],"q":["itoa","","","","","","","","","","","","",""],"d":["A safe API for formatting integers to text.","An integer that can be formatted by <code>itoa::write</code> and …","","","","","Write integer to an <code>fmt::Write</code>.","Print an integer into this buffer and return a reference …","","","This is a cheap operation; you don’t need to worry …","","",""],"i":[0,0,1,1,1,1,0,1,1,1,1,1,1,1],"f":[null,null,[[]],[[]],[[]],[[],["buffer",3]],[[["write",8],["integer",8]],["result",6]],[[["integer",8]],["str",15]],[[]],[[]],[[],["buffer",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Buffer"]]},\
"json5":{"doc":"JSON5 is a superset of JSON with an expanded syntax …","t":[4,3,13,6,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,11,11,12,11,11,11,11,5,11,11,11,11,11,11,11,12,12],"n":["Error","Location","Message","Result","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","column","custom","custom","eq","eq","fmt","fmt","fmt","from","from","from","from","from_str","into","into","line","ne","ne","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","location","msg"],"q":["json5","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","json5::Error",""],"d":["A bare bones error type which currently just collapses …","One-based line and column at which the error was detected.","Just shove everything in a single variant for now.","Alias for a <code>Result</code> with error type <code>json5::Error</code>","","","","","","","","","The one-based column number of the error.","","","","","","","","","","","","Deserialize an instance of type <code>T</code> from a string of JSON5 …","","","The one-based line number of the error.","","","","","Attempts to serialize the input as a JSON5 string …","","","","","","","","The location of the error, if applicable.","The error message."],"i":[0,0,1,0,2,1,2,1,2,1,2,1,2,1,1,2,1,2,1,1,2,2,1,1,0,2,1,2,2,1,2,1,0,1,2,1,2,1,2,1,3,3],"f":[null,null,null,null,[[]],[[]],[[]],[[]],[[],["location",3]],[[],["error",4]],[[]],[[]],null,[[["display",8]]],[[["display",8]]],[[["location",3]],["bool",15]],[[["error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["span",3]]],[[["error",3],["rule",4]]],[[]],[[["str",15]],["result",6]],[[]],[[]],null,[[["location",3]],["bool",15]],[[["error",4]],["bool",15]],[[]],[[]],[[],[["result",6],["string",3]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null],"p":[[4,"Error"],[3,"Location"],[13,"Message"]]},\
"lazy_static":{"doc":"A macro for declaring lazily evaluated statics.","t":[8,5,14],"n":["LazyStatic","initialize","lazy_static"],"q":["lazy_static","",""],"d":["Support trait for enabling a few common operation on lazy …","Takes a shared reference to a lazy static and initializes …",""],"i":[0,0,0],"f":[null,[[]],null],"p":[]},\
"libc":{"doc":"libc - Raw FFI bindings to platforms’ system libraries","tn":["ABDAY_1","ABDAY_2","ABDAY_3","ABDAY_4","ABDAY_5","ABDAY_6","ABDAY_7","ABMON_1","ABMON_10","ABMON_11","ABMON_12","ABMON_2","ABMON_3","ABMON_4","ABMON_5","ABMON_6","ABMON_7","ABMON_8","ABMON_9","ACCOUNTING","AF_APPLETALK","AF_CCITT","AF_CHAOS","AF_CNT","AF_COIP","AF_DATAKIT","AF_DECnet","AF_DLI","AF_E164","AF_ECMA","AF_HYLINK","AF_IMPLINK","AF_INET","AF_INET6","AF_IPX","AF_ISDN","AF_ISO","AF_LAT","AF_LINK","AF_LOCAL","AF_NATM","AF_NETBIOS","AF_NS","AF_OSI","AF_PPP","AF_PUP","AF_ROUTE","AF_SIP","AF_SNA","AF_SYSTEM","AF_SYS_CONTROL","AF_UNIX","AF_UNSPEC","AIO_ALLDONE","AIO_CANCELED","AIO_LISTIO_MAX","AIO_NOTCANCELED","AI_ADDRCONFIG","AI_ALL","AI_CANONNAME","AI_DEFAULT","AI_MASK","AI_NUMERICHOST","AI_NUMERICSERV","AI_PASSIVE","AI_UNUSABLE","AI_V4MAPPED","AI_V4MAPPED_CFG","ALTWERASE","ALT_DIGITS","AM_STR","ARPOP_REPLY","ARPOP_REQUEST","ATF_COM","ATF_PERM","ATF_PUBL","ATF_USETRAILERS","AT_EACCESS","AT_FDCWD","AT_REMOVEDIR","AT_SYMLINK_FOLLOW","AT_SYMLINK_NOFOLLOW","B0","B110","B115200","B1200","B134","B14400","B150","B1800","B19200","B200","B230400","B2400","B28800","B300","B38400","B4800","B50","B57600","B600","B7200","B75","B76800","B9600","BIOCFLUSH","BIOCGBLEN","BIOCGDLT","BIOCGDLTLIST","BIOCGETIF","BIOCGHDRCMPLT","BIOCGRSIG","BIOCGRTIMEOUT","BIOCGSEESENT","BIOCGSTATS","BIOCIMMEDIATE","BIOCPROMISC","BIOCSBLEN","BIOCSDLT","BIOCSETF","BIOCSETFNR","BIOCSETIF","BIOCSHDRCMPLT","BIOCSRSIG","BIOCSRTIMEOUT","BIOCSSEESENT","BIOCVERSION","BOOT_TIME","BPF_ALIGNMENT","BRKINT","BS0","BS1","BSDLY","BUFSIZ","CIGNORE","CLD_CONTINUED","CLD_DUMPED","CLD_EXITED","CLD_KILLED","CLD_STOPPED","CLD_TRAPPED","CLOCAL","CLOCK_MONOTONIC","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_THREAD_CPUTIME_ID","CMSG_DATA","CMSG_FIRSTHDR","CMSG_LEN","CMSG_NXTHDR","CMSG_SPACE","CODESET","CONNECT_DATA_AUTHENTICATED","CONNECT_DATA_IDEMPOTENT","CONNECT_RESUME_ON_READ_WRITE","CPU_STATE_IDLE","CPU_STATE_MAX","CPU_STATE_NICE","CPU_STATE_SYSTEM","CPU_STATE_USER","CR0","CR1","CR2","CR3","CRDLY","CREAD","CRNCYSTR","CRTSCTS","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","CTLFLAG_ANYBODY","CTLFLAG_KERN","CTLFLAG_LOCKED","CTLFLAG_MASKED","CTLFLAG_NOAUTO","CTLFLAG_NOLOCK","CTLFLAG_OID2","CTLFLAG_RD","CTLFLAG_RW","CTLFLAG_SECURE","CTLFLAG_WR","CTLTYPE","CTLTYPE_INT","CTLTYPE_NODE","CTLTYPE_OPAQUE","CTLTYPE_QUAD","CTLTYPE_STRING","CTLTYPE_STRUCT","CTL_DEBUG","CTL_DEBUG_MAXID","CTL_DEBUG_NAME","CTL_DEBUG_VALUE","CTL_HW","CTL_KERN","CTL_MACHDEP","CTL_MAXID","CTL_NET","CTL_UNSPEC","CTL_USER","CTL_VFS","CTL_VM","DAY_1","DAY_2","DAY_3","DAY_4","DAY_5","DAY_6","DAY_7","DEAD_PROCESS","DIR","DLT_ARCNET","DLT_ATM_RFC1483","DLT_AX25","DLT_CHAOS","DLT_EN10MB","DLT_EN3MB","DLT_FDDI","DLT_IEEE802","DLT_LOOP","DLT_NULL","DLT_PPP","DLT_PRONET","DLT_RAW","DLT_SLIP","DT_BLK","DT_CHR","DT_DIR","DT_FIFO","DT_LNK","DT_REG","DT_SOCK","DT_UNKNOWN","D_FMT","D_MD_ORDER","D_T_FMT","Dl_info","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EAFNOSUPPORT","EAGAIN","EAI_AGAIN","EAI_BADFLAGS","EAI_FAIL","EAI_FAMILY","EAI_MEMORY","EAI_NODATA","EAI_NONAME","EAI_OVERFLOW","EAI_SERVICE","EAI_SOCKTYPE","EAI_SYSTEM","EALREADY","EAUTH","EBADARCH","EBADEXEC","EBADF","EBADMACHO","EBADMSG","EBADRPC","EBUSY","ECANCELED","ECHILD","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","ECONNABORTED","ECONNREFUSED","ECONNRESET","EDEADLK","EDESTADDRREQ","EDEVERR","EDOM","EDQUOT","EEXIST","EFAULT","EFBIG","EFTYPE","EHOSTDOWN","EHOSTUNREACH","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","ELAST","ELOOP","EMFILE","EMLINK","EMPTY","EMSGSIZE","EMULTIHOP","ENAMETOOLONG","ENEEDAUTH","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOATTR","ENOBUFS","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOLCK","ENOLINK","ENOMEM","ENOMSG","ENOPOLICY","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENXIO","EOF","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPROCLIM","EPROCUNAVAIL","EPROGMISMATCH","EPROGUNAVAIL","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","EPWROFF","EQFULL","ERA","ERANGE","ERA_D_FMT","ERA_D_T_FMT","ERA_T_FMT","EREMOTE","EROFS","ERPCMISMATCH","ESHLIBVERS","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESTALE","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","EUSERS","EVFILT_AIO","EVFILT_FS","EVFILT_MACHPORT","EVFILT_PROC","EVFILT_READ","EVFILT_SIGNAL","EVFILT_TIMER","EVFILT_USER","EVFILT_VM","EVFILT_VNODE","EVFILT_WRITE","EV_ADD","EV_CLEAR","EV_DELETE","EV_DISABLE","EV_DISPATCH","EV_ENABLE","EV_EOF","EV_ERROR","EV_FLAG0","EV_FLAG1","EV_ONESHOT","EV_OOBAND","EV_POLL","EV_RECEIPT","EV_SYSFLAGS","EWOULDBLOCK","EXDEV","EXIT_FAILURE","EXIT_SUCCESS","EXTA","EXTB","EXTPROC","FD_CLOEXEC","FD_CLR","FD_ISSET","FD_SET","FD_SETSIZE","FD_ZERO","FF0","FF1","FFDLY","FILE","FILENAME_MAX","FIOASYNC","FIOCLEX","FIODTYPE","FIOGETOWN","FIONBIO","FIONCLEX","FIONREAD","FIOSETOWN","FLUSHO","FOPEN_MAX","F_ALLOCATEALL","F_ALLOCATECONTIG","F_DUPFD","F_DUPFD_CLOEXEC","F_FREEZE_FS","F_FULLFSYNC","F_GETFD","F_GETFL","F_GETLK","F_GETOWN","F_GETPATH","F_GLOBAL_NOCACHE","F_LOCK","F_NOCACHE","F_NODIRECT","F_OK","F_PEOFPOSMODE","F_PREALLOCATE","F_RDADVISE","F_RDAHEAD","F_RDLCK","F_SETFD","F_SETFL","F_SETLK","F_SETLKW","F_SETOWN","F_TEST","F_THAW_FS","F_TLOCK","F_ULOCK","F_UNLCK","F_VOLPOSMODE","F_WRLCK","GETALL","GETNCNT","GETPID","GETVAL","GETZCNT","GLOB_ABORTED","GLOB_APPEND","GLOB_DOOFFS","GLOB_ERR","GLOB_MARK","GLOB_NOCHECK","GLOB_NOESCAPE","GLOB_NOMATCH","GLOB_NOSORT","GLOB_NOSPACE","GRPQUOTA","HUPCL","HW_AVAILCPU","HW_BUS_FREQ","HW_BYTEORDER","HW_CACHELINE","HW_CPU_FREQ","HW_DISKNAMES","HW_DISKSTATS","HW_EPOCH","HW_FLOATINGPT","HW_L1DCACHESIZE","HW_L1ICACHESIZE","HW_L2CACHESIZE","HW_L2SETTINGS","HW_L3CACHESIZE","HW_L3SETTINGS","HW_MACHINE","HW_MACHINE_ARCH","HW_MAXID","HW_MEMSIZE","HW_MODEL","HW_NCPU","HW_PAGESIZE","HW_PHYSMEM","HW_PRODUCT","HW_TARGET","HW_TB_FREQ","HW_USERMEM","HW_VECTORUNIT","ICANON","ICRNL","IEXTEN","IFF_ALLMULTI","IFF_ALTPHYS","IFF_BROADCAST","IFF_DEBUG","IFF_LINK0","IFF_LINK1","IFF_LINK2","IFF_LOOPBACK","IFF_MULTICAST","IFF_NOARP","IFF_NOTRAILERS","IFF_OACTIVE","IFF_POINTOPOINT","IFF_PROMISC","IFF_RUNNING","IFF_SIMPLEX","IFF_UP","IFNAMSIZ","IF_NAMESIZE","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INADDR_ANY","INADDR_BROADCAST","INADDR_LOOPBACK","INADDR_NONE","INIT_PROCESS","INLCR","INPCK","INT_MAX","INT_MIN","IOV_MAX","IPC_CREAT","IPC_EXCL","IPC_M","IPC_NOWAIT","IPC_PRIVATE","IPC_R","IPC_RMID","IPC_SET","IPC_STAT","IPC_W","IPPROTO_3PC","IPPROTO_ADFS","IPPROTO_AH","IPPROTO_AHIP","IPPROTO_APES","IPPROTO_ARGUS","IPPROTO_AX25","IPPROTO_BHA","IPPROTO_BLT","IPPROTO_BRSATMON","IPPROTO_CFTP","IPPROTO_CHAOS","IPPROTO_CMTP","IPPROTO_CPHB","IPPROTO_CPNX","IPPROTO_DDP","IPPROTO_DGP","IPPROTO_DIVERT","IPPROTO_DONE","IPPROTO_DSTOPTS","IPPROTO_EGP","IPPROTO_EMCON","IPPROTO_ENCAP","IPPROTO_EON","IPPROTO_ESP","IPPROTO_ETHERIP","IPPROTO_FRAGMENT","IPPROTO_GGP","IPPROTO_GMTP","IPPROTO_GRE","IPPROTO_HELLO","IPPROTO_HMP","IPPROTO_HOPOPTS","IPPROTO_ICMP","IPPROTO_ICMPV6","IPPROTO_IDP","IPPROTO_IDPR","IPPROTO_IDRP","IPPROTO_IGMP","IPPROTO_IGP","IPPROTO_IGRP","IPPROTO_IL","IPPROTO_INLSP","IPPROTO_INP","IPPROTO_IP","IPPROTO_IPCOMP","IPPROTO_IPCV","IPPROTO_IPEIP","IPPROTO_IPIP","IPPROTO_IPPC","IPPROTO_IPV6","IPPROTO_IRTP","IPPROTO_KRYPTOLAN","IPPROTO_LARP","IPPROTO_LEAF1","IPPROTO_LEAF2","IPPROTO_MAX","IPPROTO_MEAS","IPPROTO_MHRP","IPPROTO_MICP","IPPROTO_MTP","IPPROTO_MUX","IPPROTO_ND","IPPROTO_NHRP","IPPROTO_NONE","IPPROTO_NSP","IPPROTO_NVPII","IPPROTO_OSPFIGP","IPPROTO_PGM","IPPROTO_PIGP","IPPROTO_PIM","IPPROTO_PRM","IPPROTO_PUP","IPPROTO_PVP","IPPROTO_RAW","IPPROTO_RCCMON","IPPROTO_RDP","IPPROTO_ROUTING","IPPROTO_RSVP","IPPROTO_RVD","IPPROTO_SATEXPAK","IPPROTO_SATMON","IPPROTO_SCCSP","IPPROTO_SCTP","IPPROTO_SDRP","IPPROTO_SEP","IPPROTO_SRPC","IPPROTO_ST","IPPROTO_SVMTP","IPPROTO_SWIPE","IPPROTO_TCF","IPPROTO_TCP","IPPROTO_TP","IPPROTO_TPXX","IPPROTO_TRUNK1","IPPROTO_TRUNK2","IPPROTO_TTP","IPPROTO_UDP","IPPROTO_VINES","IPPROTO_VISA","IPPROTO_VMTP","IPPROTO_WBEXPAK","IPPROTO_WBMON","IPPROTO_WSN","IPPROTO_XNET","IPPROTO_XTP","IPTOS_ECN_CE","IPTOS_ECN_ECT0","IPTOS_ECN_ECT1","IPTOS_ECN_MASK","IPTOS_ECN_NOTECT","IPV6_CHECKSUM","IPV6_HOPLIMIT","IPV6_JOIN_GROUP","IPV6_LEAVE_GROUP","IPV6_MULTICAST_HOPS","IPV6_MULTICAST_IF","IPV6_MULTICAST_LOOP","IPV6_PKTINFO","IPV6_RECVPKTINFO","IPV6_RECVTCLASS","IPV6_TCLASS","IPV6_UNICAST_HOPS","IPV6_V6ONLY","IP_ADD_MEMBERSHIP","IP_DROP_MEMBERSHIP","IP_HDRINCL","IP_MULTICAST_IF","IP_MULTICAST_LOOP","IP_MULTICAST_TTL","IP_PKTINFO","IP_RECVDSTADDR","IP_RECVIF","IP_RECVTOS","IP_TOS","IP_TTL","ISIG","ISTRIP","ITIMER_PROF","ITIMER_REAL","ITIMER_VIRTUAL","IUTF8","IXANY","IXOFF","IXON","KERN_AFFINITY","KERN_AIOMAX","KERN_AIOPROCMAX","KERN_AIOTHREADS","KERN_ARGMAX","KERN_BOOTFILE","KERN_BOOTTIME","KERN_CHECKOPENEVT","KERN_CLASSIC","KERN_CLASSICHANDLER","KERN_CLOCKRATE","KERN_COREDUMP","KERN_COREFILE","KERN_DOMAINNAME","KERN_DUMMY","KERN_DUMPDEV","KERN_EXEC","KERN_FILE","KERN_HOSTID","KERN_HOSTNAME","KERN_IPC","KERN_JOB_CONTROL","KERN_KDBUFWAIT","KERN_KDCPUMAP","KERN_KDDFLAGS","KERN_KDEBUG","KERN_KDEFLAGS","KERN_KDENABLE","KERN_KDGETBUF","KERN_KDGETENTROPY","KERN_KDGETREG","KERN_KDPIDEX","KERN_KDPIDTR","KERN_KDREADCURTHRMAP","KERN_KDREADTR","KERN_KDREMOVE","KERN_KDSETBUF","KERN_KDSETREG","KERN_KDSETRTCDEC","KERN_KDSETUP","KERN_KDSET_TYPEFILTER","KERN_KDTHRMAP","KERN_KDWRITEMAP","KERN_KDWRITETR","KERN_LOGSIGEXIT","KERN_LOW_PRI_DELAY","KERN_LOW_PRI_WINDOW","KERN_MAXFILES","KERN_MAXFILESPERPROC","KERN_MAXID","KERN_MAXPARTITIONS","KERN_MAXPROC","KERN_MAXPROCPERUID","KERN_MAXVNODES","KERN_NETBOOT","KERN_NGROUPS","KERN_NISDOMAINNAME","KERN_NTP_PLL","KERN_NX_PROTECTION","KERN_OPENEVT_PROC","KERN_OSRELDATE","KERN_OSRELEASE","KERN_OSREV","KERN_OSTYPE","KERN_OSVERSION","KERN_POSIX","KERN_POSIX1","KERN_PROC","KERN_PROCARGS","KERN_PROCARGS2","KERN_PROCDELAYTERM","KERN_PROCNAME","KERN_PROC_ALL","KERN_PROC_LCID","KERN_PROC_PGRP","KERN_PROC_PID","KERN_PROC_RUID","KERN_PROC_SESSION","KERN_PROC_TTY","KERN_PROC_UID","KERN_PROF","KERN_PS_STRINGS","KERN_RAGEVNODE","KERN_RAGE_PROC","KERN_RAGE_THREAD","KERN_SAFEBOOT","KERN_SAVED_IDS","KERN_SECURELVL","KERN_SHREG_PRIVATIZABLE","KERN_SPECULATIVE_READS","KERN_SUGID_COREDUMP","KERN_SYMFILE","KERN_SYSV","KERN_TFP","KERN_TFP_POLICY","KERN_TFP_POLICY_DEFAULT","KERN_TFP_POLICY_DENY","KERN_THALTSTACK","KERN_THREADNAME","KERN_TRANSLATE","KERN_TTY","KERN_UNOPENEVT_PROC","KERN_UNRAGE_PROC","KERN_UNRAGE_THREAD","KERN_UPDATEINTERVAL","KERN_USRSTACK32","KERN_USRSTACK64","KERN_VERSION","KERN_VNODE","KIPC_MAXSOCKBUF","KIPC_MAX_DATALEN","KIPC_MAX_HDR","KIPC_MAX_LINKHDR","KIPC_MAX_PROTOHDR","KIPC_MBSTAT","KIPC_NMBCLUSTERS","KIPC_SOCKBUF_WASTE","KIPC_SOMAXCONN","KIPC_SOQLIMITCOMPAT","LC_ALL","LC_ALL_MASK","LC_COLLATE","LC_COLLATE_MASK","LC_CTYPE","LC_CTYPE_MASK","LC_MESSAGES","LC_MESSAGES_MASK","LC_MONETARY","LC_MONETARY_MASK","LC_NUMERIC","LC_NUMERIC_MASK","LC_SEGMENT","LC_SEGMENT_64","LC_TIME","LC_TIME_MASK","LIO_NOP","LIO_NOWAIT","LIO_READ","LIO_WAIT","LIO_WRITE","LOCAL_PEERCRED","LOCAL_PEEREPID","LOCAL_PEEREUUID","LOCAL_PEERPID","LOCAL_PEERUUID","LOCK_EX","LOCK_NB","LOCK_SH","LOCK_UN","LOGIN_PROCESS","LOG_ALERT","LOG_AUTH","LOG_AUTHPRIV","LOG_CONS","LOG_CRIT","LOG_CRON","LOG_DAEMON","LOG_DEBUG","LOG_EMERG","LOG_ERR","LOG_FACMASK","LOG_FTP","LOG_INFO","LOG_INSTALL","LOG_KERN","LOG_LAUNCHD","LOG_LOCAL0","LOG_LOCAL1","LOG_LOCAL2","LOG_LOCAL3","LOG_LOCAL4","LOG_LOCAL5","LOG_LOCAL6","LOG_LOCAL7","LOG_LPR","LOG_MAIL","LOG_NDELAY","LOG_NETINFO","LOG_NEWS","LOG_NFACILITIES","LOG_NOTICE","LOG_NOWAIT","LOG_ODELAY","LOG_PERROR","LOG_PID","LOG_PRIMASK","LOG_RAS","LOG_REMOTEAUTH","LOG_SYSLOG","LOG_USER","LOG_UUCP","LOG_WARNING","L_tmpnam","MADV_CAN_REUSE","MADV_DONTNEED","MADV_FREE","MADV_FREE_REUSABLE","MADV_FREE_REUSE","MADV_NORMAL","MADV_RANDOM","MADV_SEQUENTIAL","MADV_WILLNEED","MADV_ZERO_WIRED_PAGES","MAP_ANON","MAP_ANONYMOUS","MAP_COPY","MAP_FAILED","MAP_FILE","MAP_FIXED","MAP_HASSEMAPHORE","MAP_JIT","MAP_NOCACHE","MAP_NOEXTEND","MAP_NORESERVE","MAP_PRIVATE","MAP_RENAME","MAP_SHARED","MAXCOMLEN","MAXFREQ","MAXPHASE","MAXSEC","MAXTC","MAXTHREADNAMESIZE","MCL_CURRENT","MCL_FUTURE","MDMBUF","MH_MAGIC","MH_MAGIC_64","MINCORE_INCORE","MINCORE_MODIFIED","MINCORE_MODIFIED_OTHER","MINCORE_REFERENCED","MINCORE_REFERENCED_OTHER","MINSEC","MINSIGSTKSZ","MNT_ASYNC","MNT_AUTOMOUNTED","MNT_CPROTECT","MNT_DEFWRITE","MNT_DONTBROWSE","MNT_DOVOLFS","MNT_EXPORTED","MNT_FORCE","MNT_IGNORE_OWNERSHIP","MNT_JOURNALED","MNT_LOCAL","MNT_MULTILABEL","MNT_NOATIME","MNT_NOBLOCK","MNT_NODEV","MNT_NOEXEC","MNT_NOSUID","MNT_NOUSERXATTR","MNT_NOWAIT","MNT_QUARANTINE","MNT_QUOTA","MNT_RDONLY","MNT_RELOAD","MNT_ROOTFS","MNT_SNAPSHOT","MNT_SYNCHRONOUS","MNT_UNION","MNT_UPDATE","MNT_WAIT","MOD_CLKA","MOD_CLKB","MOD_ESTERROR","MOD_FREQUENCY","MOD_MAXERROR","MOD_MICRO","MOD_NANO","MOD_OFFSET","MOD_PPSMAX","MOD_STATUS","MOD_TAI","MOD_TIMECONST","MON_1","MON_10","MON_11","MON_12","MON_2","MON_3","MON_4","MON_5","MON_6","MON_7","MON_8","MON_9","MSG_CTRUNC","MSG_DONTROUTE","MSG_DONTWAIT","MSG_EOF","MSG_EOR","MSG_FLUSH","MSG_HAVEMORE","MSG_HOLD","MSG_OOB","MSG_PEEK","MSG_RCVMORE","MSG_SEND","MSG_TRUNC","MSG_WAITALL","MS_ASYNC","MS_DEACTIVATE","MS_INVALIDATE","MS_KILLPAGES","MS_SYNC","NANOSECOND","NCCS","NET_RT_DUMP","NET_RT_FLAGS","NET_RT_IFLIST","NET_RT_IFLIST2","NEW_TIME","NI_DGRAM","NI_MAXHOST","NI_MAXSERV","NI_NAMEREQD","NI_NOFQDN","NI_NUMERICHOST","NI_NUMERICSCOPE","NI_NUMERICSERV","NL0","NL1","NLDLY","NOEXPR","NOFLSH","NOKERNINFO","NOSTR","NOTE_ABSOLUTE","NOTE_ATTRIB","NOTE_BACKGROUND","NOTE_CHILD","NOTE_CRITICAL","NOTE_DELETE","NOTE_EXEC","NOTE_EXIT","NOTE_EXITSTATUS","NOTE_EXIT_CSERROR","NOTE_EXIT_DECRYPTFAIL","NOTE_EXIT_DETAIL","NOTE_EXIT_DETAIL_MASK","NOTE_EXIT_MEMORY","NOTE_EXTEND","NOTE_FFAND","NOTE_FFCOPY","NOTE_FFCTRLMASK","NOTE_FFLAGSMASK","NOTE_FFNOP","NOTE_FFOR","NOTE_FORK","NOTE_LEEWAY","NOTE_LINK","NOTE_LOWAT","NOTE_NONE","NOTE_NSECONDS","NOTE_PCTRLMASK","NOTE_PDATAMASK","NOTE_RENAME","NOTE_REVOKE","NOTE_SECONDS","NOTE_SIGNAL","NOTE_TRACK","NOTE_TRACKERR","NOTE_TRIGGER","NOTE_USECONDS","NOTE_VM_ERROR","NOTE_VM_PRESSURE","NOTE_VM_PRESSURE_SUDDEN_TERMINATE","NOTE_VM_PRESSURE_TERMINATE","NOTE_WRITE","NTP_API","OCRNL","OFDEL","OFILL","OLD_TIME","ONLCR","ONLRET","ONOCR","ONOEOT","OPOST","OXTABS","O_ACCMODE","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECTORY","O_DSYNC","O_EXCL","O_EXLOCK","O_FSYNC","O_NDELAY","O_NOCTTY","O_NOFOLLOW","O_NONBLOCK","O_RDONLY","O_RDWR","O_SHLOCK","O_SYMLINK","O_SYNC","O_TRUNC","O_WRONLY","PARENB","PARMRK","PARODD","PATH_MAX","PENDIN","PF_APPLETALK","PF_CCITT","PF_CHAOS","PF_CNT","PF_COIP","PF_DATAKIT","PF_DECnet","PF_DLI","PF_ECMA","PF_HYLINK","PF_IMPLINK","PF_INET","PF_INET6","PF_IPX","PF_ISDN","PF_ISO","PF_KEY","PF_LAT","PF_LINK","PF_LOCAL","PF_NATM","PF_NETBIOS","PF_NS","PF_OSI","PF_PIP","PF_PPP","PF_PUP","PF_ROUTE","PF_RTIP","PF_SIP","PF_SNA","PF_SYSTEM","PF_UNIX","PF_UNSPEC","PF_XTP","PIPE_BUF","PM_STR","POLLERR","POLLHUP","POLLIN","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDNORM","POLLWRBAND","POLLWRNORM","POSIX_MADV_DONTNEED","POSIX_MADV_NORMAL","POSIX_MADV_RANDOM","POSIX_MADV_SEQUENTIAL","POSIX_MADV_WILLNEED","POSIX_SPAWN_CLOEXEC_DEFAULT","POSIX_SPAWN_RESETIDS","POSIX_SPAWN_SETEXEC","POSIX_SPAWN_SETPGROUP","POSIX_SPAWN_SETSIGDEF","POSIX_SPAWN_SETSIGMASK","POSIX_SPAWN_START_SUSPENDED","PRIO_DARWIN_BG","PRIO_DARWIN_NONUI","PRIO_DARWIN_PROCESS","PRIO_DARWIN_THREAD","PRIO_MAX","PRIO_MIN","PRIO_PGRP","PRIO_PROCESS","PRIO_USER","PROCESSOR_BASIC_INFO","PROCESSOR_CPU_LOAD_INFO","PROCESSOR_PM_REGS_INFO","PROCESSOR_SET_BASIC_INFO","PROCESSOR_SET_LOAD_INFO","PROCESSOR_TEMPERATURE","PROC_PIDTASKALLINFO","PROC_PIDTASKINFO","PROC_PIDTHREADINFO","PROT_EXEC","PROT_NONE","PROT_READ","PROT_WRITE","PTHREAD_COND_INITIALIZER","PTHREAD_CREATE_DETACHED","PTHREAD_CREATE_JOINABLE","PTHREAD_MUTEX_DEFAULT","PTHREAD_MUTEX_ERRORCHECK","PTHREAD_MUTEX_INITIALIZER","PTHREAD_MUTEX_NORMAL","PTHREAD_MUTEX_RECURSIVE","PTHREAD_PROCESS_PRIVATE","PTHREAD_PROCESS_SHARED","PTHREAD_RWLOCK_INITIALIZER","PTHREAD_STACK_MIN","PT_ATTACH","PT_ATTACHEXC","PT_CONTINUE","PT_DENY_ATTACH","PT_DETACH","PT_FIRSTMACH","PT_FORCEQUOTA","PT_KILL","PT_READ_D","PT_READ_I","PT_READ_U","PT_SIGEXC","PT_STEP","PT_THUPDATE","PT_TRACE_ME","PT_WRITE_D","PT_WRITE_I","PT_WRITE_U","P_ALL","P_PGID","P_PID","QCMD","Q_GETQUOTA","Q_QUOTAOFF","Q_QUOTAON","Q_SETQUOTA","Q_SYNC","RADIXCHAR","RAND_MAX","REG_ASSERT","REG_ATOI","REG_BACKR","REG_BADBR","REG_BADPAT","REG_BADRPT","REG_BASIC","REG_DUMP","REG_EBRACE","REG_EBRACK","REG_ECOLLATE","REG_ECTYPE","REG_EESCAPE","REG_EMPTY","REG_EPAREN","REG_ERANGE","REG_ESPACE","REG_ESUBREG","REG_EXTENDED","REG_ICASE","REG_INVARG","REG_ITOA","REG_LARGE","REG_NEWLINE","REG_NOMATCH","REG_NOSPEC","REG_NOSUB","REG_NOTBOL","REG_NOTEOL","REG_PEND","REG_STARTEND","REG_TRACE","RENAME_EXCL","RENAME_SWAP","RLIMIT_AS","RLIMIT_CORE","RLIMIT_CPU","RLIMIT_DATA","RLIMIT_FSIZE","RLIMIT_MEMLOCK","RLIMIT_NOFILE","RLIMIT_NPROC","RLIMIT_RSS","RLIMIT_STACK","RLIM_INFINITY","RLIM_NLIMITS","RTAX_AUTHOR","RTAX_BRD","RTAX_DST","RTAX_GATEWAY","RTAX_GENMASK","RTAX_IFA","RTAX_IFP","RTAX_MAX","RTAX_NETMASK","RTA_AUTHOR","RTA_BRD","RTA_DST","RTA_GATEWAY","RTA_GENMASK","RTA_IFA","RTA_IFP","RTA_NETMASK","RTF_BLACKHOLE","RTF_BROADCAST","RTF_CLONING","RTF_CONDEMNED","RTF_DELCLONE","RTF_DONE","RTF_DYNAMIC","RTF_GATEWAY","RTF_HOST","RTF_IFREF","RTF_IFSCOPE","RTF_LLINFO","RTF_LOCAL","RTF_MODIFIED","RTF_MULTICAST","RTF_NOIFREF","RTF_PINNED","RTF_PRCLONING","RTF_PROTO1","RTF_PROTO2","RTF_PROTO3","RTF_PROXY","RTF_REJECT","RTF_ROUTER","RTF_STATIC","RTF_UP","RTF_WASCLONED","RTF_XRESOLVE","RTLD_DEFAULT","RTLD_FIRST","RTLD_GLOBAL","RTLD_LAZY","RTLD_LOCAL","RTLD_NEXT","RTLD_NODELETE","RTLD_NOLOAD","RTLD_NOW","RTLD_SELF","RTM_ADD","RTM_CHANGE","RTM_DELADDR","RTM_DELETE","RTM_DELMADDR","RTM_GET","RTM_GET2","RTM_IFINFO","RTM_IFINFO2","RTM_LOCK","RTM_LOSING","RTM_MISS","RTM_NEWADDR","RTM_NEWMADDR","RTM_NEWMADDR2","RTM_OLDADD","RTM_OLDDEL","RTM_REDIRECT","RTM_RESOLVE","RTM_VERSION","RTV_EXPIRE","RTV_HOPCOUNT","RTV_MTU","RTV_RPIPE","RTV_RTT","RTV_RTTVAR","RTV_SPIPE","RTV_SSTHRESH","RUN_LVL","RUSAGE_CHILDREN","RUSAGE_SELF","R_OK","SAE_ASSOCID_ALL","SAE_ASSOCID_ANY","SAE_CONNID_ALL","SAE_CONNID_ANY","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_SIGINFO","SCALE_PPM","SCM_CREDS","SCM_RIGHTS","SCM_TIMESTAMP","SEEK_CUR","SEEK_END","SEEK_SET","SEM_FAILED","SEM_UNDO","SETALL","SETVAL","SF_APPEND","SF_ARCHIVED","SF_IMMUTABLE","SF_SETTABLE","SHMLBA","SHM_R","SHM_RDONLY","SHM_RND","SHM_W","SHUTDOWN_TIME","SHUT_RD","SHUT_RDWR","SHUT_WR","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGEMT","SIGEV_NONE","SIGEV_SIGNAL","SIGEV_THREAD","SIGFPE","SIGHUP","SIGILL","SIGINFO","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGNATURE","SIGPIPE","SIGPROF","SIGQUIT","SIGSEGV","SIGSTKSZ","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_DFL","SIG_ERR","SIG_IGN","SIG_SETMASK","SIG_UNBLOCK","SIOCGIFADDR","SOCK_DGRAM","SOCK_MAXADDRLEN","SOCK_RAW","SOCK_RDM","SOCK_SEQPACKET","SOCK_STREAM","SOL_LOCAL","SOL_SOCKET","SOMAXCONN","SO_ACCEPTCONN","SO_BROADCAST","SO_DEBUG","SO_DONTROUTE","SO_DONTTRUNC","SO_ERROR","SO_KEEPALIVE","SO_LABEL","SO_LINGER","SO_LINGER_SEC","SO_NKE","SO_NOADDRERR","SO_NOSIGPIPE","SO_NOTIFYCONFLICT","SO_NP_EXTENSIONS","SO_NREAD","SO_NWRITE","SO_OOBINLINE","SO_PEERLABEL","SO_RANDOMPORT","SO_RCVBUF","SO_RCVLOWAT","SO_RCVTIMEO","SO_REUSEADDR","SO_REUSEPORT","SO_REUSESHAREUID","SO_SNDBUF","SO_SNDLOWAT","SO_SNDTIMEO","SO_TIMESTAMP","SO_TIMESTAMP_MONOTONIC","SO_TYPE","SO_USELOOPBACK","SO_WANTMORE","SO_WANTOOBFLAG","SS_DISABLE","SS_ONSTACK","STA_CLK","STA_CLOCKERR","STA_DEL","STA_FLL","STA_FREQHOLD","STA_INS","STA_MODE","STA_NANO","STA_PLL","STA_PPSERROR","STA_PPSFREQ","STA_PPSJITTER","STA_PPSSIGNAL","STA_PPSTIME","STA_PPSWANDER","STA_RONLY","STA_UNSYNC","STDERR_FILENO","STDIN_FILENO","STDOUT_FILENO","ST_NOSUID","ST_RDONLY","SUPERPAGE_NONE","SUPERPAGE_SIZE_2MB","SUPERPAGE_SIZE_ANY","SYSPROTO_CONTROL","SYSPROTO_EVENT","S_IEXEC","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IREAD","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWRITE","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","TAB0","TAB1","TAB2","TAB3","TABDLY","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCP_FASTOPEN","TCP_KEEPALIVE","TCP_KEEPCNT","TCP_KEEPINTVL","TCP_MAXSEG","TCP_NODELAY","TCP_NOOPT","TCP_NOPUSH","TCSADRAIN","TCSAFLUSH","TCSANOW","THOUSEP","TIME_DEL","TIME_ERROR","TIME_INS","TIME_OK","TIME_OOP","TIME_WAIT","TIOCCBRK","TIOCCDTR","TIOCCONS","TIOCDCDTIMESTAMP","TIOCDRAIN","TIOCDSIMICROCODE","TIOCEXCL","TIOCEXT","TIOCFLUSH","TIOCGDRAINWAIT","TIOCGETD","TIOCGPGRP","TIOCGWINSZ","TIOCIXOFF","TIOCIXON","TIOCMBIC","TIOCMBIS","TIOCMGDTRWAIT","TIOCMGET","TIOCMODG","TIOCMODS","TIOCMSDTRWAIT","TIOCMSET","TIOCM_CAR","TIOCM_CD","TIOCM_CTS","TIOCM_DSR","TIOCM_DTR","TIOCM_LE","TIOCM_RI","TIOCM_RNG","TIOCM_RTS","TIOCM_SR","TIOCM_ST","TIOCNOTTY","TIOCNXCL","TIOCOUTQ","TIOCPKT","TIOCPKT_DATA","TIOCPKT_DOSTOP","TIOCPKT_FLUSHREAD","TIOCPKT_FLUSHWRITE","TIOCPKT_IOCTL","TIOCPKT_NOSTOP","TIOCPKT_START","TIOCPKT_STOP","TIOCPTYGNAME","TIOCPTYGRANT","TIOCPTYUNLK","TIOCREMOTE","TIOCSBRK","TIOCSCONS","TIOCSCTTY","TIOCSDRAINWAIT","TIOCSDTR","TIOCSETD","TIOCSIG","TIOCSPGRP","TIOCSTART","TIOCSTAT","TIOCSTI","TIOCSTOP","TIOCSWINSZ","TIOCTIMESTAMP","TIOCUCNTL","TMP_MAX","TOSTOP","T_FMT","T_FMT_AMPM","UF_APPEND","UF_COMPRESSED","UF_HIDDEN","UF_IMMUTABLE","UF_NODUMP","UF_OPAQUE","UF_SETTABLE","UF_TRACKED","USER_BC_BASE_MAX","USER_BC_DIM_MAX","USER_BC_SCALE_MAX","USER_BC_STRING_MAX","USER_COLL_WEIGHTS_MAX","USER_CS_PATH","USER_EXPR_NEST_MAX","USER_LINE_MAX","USER_MAXID","USER_POSIX2_CHAR_TERM","USER_POSIX2_C_BIND","USER_POSIX2_C_DEV","USER_POSIX2_FORT_DEV","USER_POSIX2_FORT_RUN","USER_POSIX2_LOCALEDEF","USER_POSIX2_SW_DEV","USER_POSIX2_UPE","USER_POSIX2_VERSION","USER_PROCESS","USER_RE_DUP_MAX","USER_STREAM_MAX","USER_TZNAME_MAX","USRQUOTA","UTIME_NOW","UTIME_OMIT","UTUN_OPT_FLAGS","UTUN_OPT_IFNAME","VDISCARD","VDSUSP","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMIN","VM_FLAGS_ALIAS_MASK","VM_FLAGS_ANYWHERE","VM_FLAGS_FIXED","VM_FLAGS_NO_CACHE","VM_FLAGS_OVERWRITE","VM_FLAGS_PURGABLE","VM_FLAGS_RANDOM_ADDR","VM_FLAGS_RESILIENT_CODESIGN","VM_FLAGS_RESILIENT_MEDIA","VM_FLAGS_RETURN_4K_DATA_ADDR","VM_FLAGS_RETURN_DATA_ADDR","VM_FLAGS_SUPERPAGE_MASK","VM_FLAGS_SUPERPAGE_NONE","VM_FLAGS_SUPERPAGE_SHIFT","VM_FLAGS_SUPERPAGE_SIZE_2MB","VM_FLAGS_SUPERPAGE_SIZE_ANY","VM_FLAGS_USER_ALLOCATE","VM_FLAGS_USER_MAP","VM_FLAGS_USER_REMAP","VM_LOADAVG","VM_MACHFACTOR","VM_MAXID","VM_MEMORY_ACCELERATE","VM_MEMORY_ANALYSIS_TOOL","VM_MEMORY_APPKIT","VM_MEMORY_APPLICATION_SPECIFIC_1","VM_MEMORY_APPLICATION_SPECIFIC_16","VM_MEMORY_ASL","VM_MEMORY_ASSETSD","VM_MEMORY_ATS","VM_MEMORY_CARBON","VM_MEMORY_CGIMAGE","VM_MEMORY_COREDATA","VM_MEMORY_COREDATA_OBJECTIDS","VM_MEMORY_COREGRAPHICS","VM_MEMORY_COREGRAPHICS_BACKINGSTORES","VM_MEMORY_COREGRAPHICS_DATA","VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS","VM_MEMORY_COREGRAPHICS_MISC","VM_MEMORY_COREGRAPHICS_SHARED","VM_MEMORY_COREGRAPHICS_XALLOC","VM_MEMORY_COREIMAGE","VM_MEMORY_COREPROFILE","VM_MEMORY_CORESERVICES","VM_MEMORY_COREUI","VM_MEMORY_COREUIFILE","VM_MEMORY_CORPSEINFO","VM_MEMORY_DHMM","VM_MEMORY_DYLD","VM_MEMORY_DYLD_MALLOC","VM_MEMORY_DYLIB","VM_MEMORY_FOUNDATION","VM_MEMORY_GENEALOGY","VM_MEMORY_GLSL","VM_MEMORY_GUARD","VM_MEMORY_IMAGEIO","VM_MEMORY_IOKIT","VM_MEMORY_JAVA","VM_MEMORY_JAVASCRIPT_CORE","VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR","VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE","VM_MEMORY_LAYERKIT","VM_MEMORY_LIBDISPATCH","VM_MEMORY_MACH_MSG","VM_MEMORY_MALLOC","VM_MEMORY_MALLOC_HUGE","VM_MEMORY_MALLOC_LARGE","VM_MEMORY_MALLOC_LARGE_REUSABLE","VM_MEMORY_MALLOC_LARGE_REUSED","VM_MEMORY_MALLOC_NANO","VM_MEMORY_MALLOC_SMALL","VM_MEMORY_MALLOC_TINY","VM_MEMORY_OBJC_DISPATCHERS","VM_MEMORY_OPENCL","VM_MEMORY_OS_ALLOC_ONCE","VM_MEMORY_RAWCAMERA","VM_MEMORY_REALLOC","VM_MEMORY_SBRK","VM_MEMORY_SCENEKIT","VM_MEMORY_SHARED_PMAP","VM_MEMORY_SKYWALK","VM_MEMORY_SQLITE","VM_MEMORY_STACK","VM_MEMORY_SWIFT_METADATA","VM_MEMORY_SWIFT_RUNTIME","VM_MEMORY_TCMALLOC","VM_MEMORY_UNSHARED_PMAP","VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS","VM_METER","VM_SWAPUSAGE","VQUIT","VREPRINT","VSTART","VSTATUS","VSTOP","VSUSP","VT0","VT1","VTDLY","VTIME","VWERASE","WCONTINUED","WCOREDUMP","WEXITED","WEXITSTATUS","WIFCONTINUED","WIFEXITED","WIFSIGNALED","WIFSTOPPED","WNOHANG","WNOWAIT","WSTOPPED","WSTOPSIG","WTERMSIG","WUNTRACED","W_OK","XATTR_CREATE","XATTR_NODEFAULT","XATTR_NOFOLLOW","XATTR_NOSECURITY","XATTR_REPLACE","XATTR_SHOWCOMPRESSION","XUCRED_VERSION","X_OK","YESEXPR","YESSTR","_IOFBF","_IOLBF","_IONBF","_PC_CHOWN_RESTRICTED","_PC_LINK_MAX","_PC_MAX_CANON","_PC_MAX_INPUT","_PC_NAME_MAX","_PC_NO_TRUNC","_PC_PATH_MAX","_PC_PIPE_BUF","_PC_VDISABLE","_POSIX_VDISABLE","_PTHREAD_COND_SIG_init","_PTHREAD_MUTEX_SIG_init","_PTHREAD_RWLOCK_SIG_init","_RLIMIT_POSIX_FLAG","_SC_2_CHAR_TERM","_SC_2_C_BIND","_SC_2_C_DEV","_SC_2_FORT_DEV","_SC_2_FORT_RUN","_SC_2_LOCALEDEF","_SC_2_PBS","_SC_2_PBS_ACCOUNTING","_SC_2_PBS_CHECKPOINT","_SC_2_PBS_LOCATE","_SC_2_PBS_MESSAGE","_SC_2_PBS_TRACK","_SC_2_SW_DEV","_SC_2_UPE","_SC_2_VERSION","_SC_ADVISORY_INFO","_SC_AIO_LISTIO_MAX","_SC_AIO_MAX","_SC_AIO_PRIO_DELTA_MAX","_SC_ARG_MAX","_SC_ASYNCHRONOUS_IO","_SC_ATEXIT_MAX","_SC_BARRIERS","_SC_BC_BASE_MAX","_SC_BC_DIM_MAX","_SC_BC_SCALE_MAX","_SC_BC_STRING_MAX","_SC_CHILD_MAX","_SC_CLK_TCK","_SC_CLOCK_SELECTION","_SC_COLL_WEIGHTS_MAX","_SC_CPUTIME","_SC_DELAYTIMER_MAX","_SC_EXPR_NEST_MAX","_SC_FILE_LOCKING","_SC_FSYNC","_SC_GETGR_R_SIZE_MAX","_SC_GETPW_R_SIZE_MAX","_SC_HOST_NAME_MAX","_SC_IOV_MAX","_SC_IPV6","_SC_JOB_CONTROL","_SC_LINE_MAX","_SC_LOGIN_NAME_MAX","_SC_MAPPED_FILES","_SC_MEMLOCK","_SC_MEMLOCK_RANGE","_SC_MEMORY_PROTECTION","_SC_MESSAGE_PASSING","_SC_MONOTONIC_CLOCK","_SC_MQ_OPEN_MAX","_SC_MQ_PRIO_MAX","_SC_NGROUPS_MAX","_SC_NPROCESSORS_CONF","_SC_NPROCESSORS_ONLN","_SC_OPEN_MAX","_SC_PAGESIZE","_SC_PAGE_SIZE","_SC_PASS_MAX","_SC_PHYS_PAGES","_SC_PRIORITIZED_IO","_SC_PRIORITY_SCHEDULING","_SC_RAW_SOCKETS","_SC_READER_WRITER_LOCKS","_SC_REALTIME_SIGNALS","_SC_REGEXP","_SC_RE_DUP_MAX","_SC_RTSIG_MAX","_SC_SAVED_IDS","_SC_SEMAPHORES","_SC_SEM_NSEMS_MAX","_SC_SEM_VALUE_MAX","_SC_SHARED_MEMORY_OBJECTS","_SC_SHELL","_SC_SIGQUEUE_MAX","_SC_SPAWN","_SC_SPIN_LOCKS","_SC_SPORADIC_SERVER","_SC_SS_REPL_MAX","_SC_STREAM_MAX","_SC_SYMLOOP_MAX","_SC_SYNCHRONIZED_IO","_SC_THREADS","_SC_THREAD_ATTR_STACKADDR","_SC_THREAD_ATTR_STACKSIZE","_SC_THREAD_CPUTIME","_SC_THREAD_DESTRUCTOR_ITERATIONS","_SC_THREAD_KEYS_MAX","_SC_THREAD_PRIORITY_SCHEDULING","_SC_THREAD_PRIO_INHERIT","_SC_THREAD_PRIO_PROTECT","_SC_THREAD_PROCESS_SHARED","_SC_THREAD_SAFE_FUNCTIONS","_SC_THREAD_SPORADIC_SERVER","_SC_THREAD_STACK_MIN","_SC_THREAD_THREADS_MAX","_SC_TIMEOUTS","_SC_TIMERS","_SC_TIMER_MAX","_SC_TRACE","_SC_TRACE_EVENT_FILTER","_SC_TRACE_EVENT_NAME_MAX","_SC_TRACE_INHERIT","_SC_TRACE_LOG","_SC_TRACE_NAME_MAX","_SC_TRACE_SYS_MAX","_SC_TRACE_USER_EVENT_MAX","_SC_TTY_NAME_MAX","_SC_TYPED_MEMORY_OBJECTS","_SC_TZNAME_MAX","_SC_V6_ILP32_OFF32","_SC_V6_ILP32_OFFBIG","_SC_V6_LP64_OFF64","_SC_V6_LPBIG_OFFBIG","_SC_VERSION","_SC_XBS5_ILP32_OFF32","_SC_XBS5_ILP32_OFFBIG","_SC_XBS5_LP64_OFF64","_SC_XBS5_LPBIG_OFFBIG","_SC_XOPEN_CRYPT","_SC_XOPEN_ENH_I18N","_SC_XOPEN_LEGACY","_SC_XOPEN_REALTIME","_SC_XOPEN_REALTIME_THREADS","_SC_XOPEN_SHM","_SC_XOPEN_STREAMS","_SC_XOPEN_UNIX","_SC_XOPEN_VERSION","_SC_XOPEN_XCU_VERSION","_UTX_HOSTSIZE","_UTX_IDSIZE","_UTX_LINESIZE","_UTX_USERSIZE","_WSTATUS","_WSTOPPED","__PTHREAD_CONDATTR_SIZE__","__PTHREAD_COND_SIZE__","__PTHREAD_MUTEX_SIZE__","__PTHREAD_RWLOCKATTR_SIZE__","__PTHREAD_RWLOCK_SIZE__","__cpsr","__darwin_arm_exception_state64","__darwin_arm_neon_state64","__darwin_arm_thread_state64","__darwin_mcontext64","__error","__es","__esr","__exception","__far","__fp","__fpcr","__fpsr","__lr","__ns","__pad","__pc","__sp","__ss","__v","__x","_dyld_get_image_header","_dyld_get_image_name","_dyld_get_image_vmaddr_slide","_dyld_image_count","_exit","_key","_seq","abort","abs","accept","access","acct","actime","addrinfo","ai_addr","ai_addrlen","ai_canonname","ai_family","ai_flags","ai_next","ai_protocol","ai_socktype","aio_buf","aio_cancel","aio_error","aio_fildes","aio_fsync","aio_lio_opcode","aio_nbytes","aio_offset","aio_read","aio_reqprio","aio_return","aio_sigevent","aio_suspend","aio_write","aiocb","alarm","ar_hln","ar_hrd","ar_op","ar_pln","ar_pro","arphdr","array","atexit","atof","atoi","backtrace","bh_caplen","bh_datalen","bh_hdrlen","bh_tstamp","bind","blkcnt_t","blksize_t","boolean_t","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bpf_hdr","brk","bsearch","buf","c_cc","c_cflag","c_char","c_double","c_float","c_iflag","c_int","c_ispeed","c_lflag","c_long","c_longlong","c_oflag","c_ospeed","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","calcnt","calloc","cc_t","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","cgid","chdir","chflags","chmod","chown","chroot","clearerr","clock_getres","clock_gettime","clock_t","clockid_t","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","close","closedir","closelog","cmd","cmd","cmd","cmdsize","cmdsize","cmdsize","cmsg_len","cmsg_level","cmsg_type","cmsghdr","connect","connectx","constant","cpu_subtype","cpu_subtype_t","cpu_ticks","cpu_type","cpu_type_t","cpusubtype","cpusubtype","cputype","cputype","cr_groups","cr_ngroups","cr_uid","cr_version","creat","cuid","currency_symbol","d_ino","d_name","d_namlen","d_reclen","d_seekoff","d_type","data","data","decimal_point","default_policy","denom","dev_t","difftime","dirent","dirfd","disconnectx","dladdr","dlclose","dlerror","dli_fbase","dli_fname","dli_saddr","dli_sname","dlopen","dlsym","dqb_bhardlimit","dqb_bsoftlimit","dqb_btime","dqb_curbytes","dqb_curinodes","dqb_id","dqb_ihardlimit","dqb_isoftlimit","dqb_itime","dqb_spare","dqblk","dup","dup2","duplocale","e_tdev","e_tpgid","endgrent","endpwent","endservent","endutxent","errcnt","esterror","esterror","events","exchangedata","execl","execle","execlp","execv","execve","execvp","exit","ext","f_bavail","f_bavail","f_bfree","f_bfree","f_blocks","f_blocks","f_bsize","f_bsize","f_favail","f_ffree","f_ffree","f_files","f_files","f_flag","f_flags","f_frsize","f_fsid","f_fsid","f_fssubtype","f_fstypename","f_iosize","f_mntfromname","f_mntonname","f_namemax","f_owner","f_reserved","f_type","faccessat","fchdir","fchflags","fchmod","fchmodat","fchown","fchownat","fclose","fcntl","fd","fd_set","fdopen","fdopendir","feof","ferror","fflags","fflags","fflush","fgetc","fgetpos","fgets","fgetxattr","fileno","fileoff","fileoff","filesize","filesize","filetype","filetype","filter","filter","flags","flags","flags","flags","flags","flags","flistxattr","flock","flock","fmemopen","fmt","fopen","fork","forkpty","fpathconf","fpos_t","fprintf","fputc","fputs","frac_digits","fread","free","freeaddrinfo","freeifaddrs","freelocale","fremovexattr","freopen","freq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fsblkcnt_t","fscanf","fseek","fseeko","fsetpos","fsetxattr","fsfilcnt_t","fsid_t","fst_bytesalloc","fst_flags","fst_length","fst_offset","fst_posmode","fstat","fstatat","fstatfs","fstatvfs","fstore_t","fsync","ftell","ftello","ftok","ftruncate","futimens","futimes","fwrite","gai_strerror","getaddrinfo","getchar","getchar_unlocked","getcwd","getdomainname","getdtablesize","getegid","getenv","geteuid","getfsstat","getgid","getgrent","getgrgid","getgrgid_r","getgrnam","getgrnam_r","getgrouplist","getgroups","gethostname","getifaddrs","getitimer","getline","getloadavg","getlogin","getmntinfo","getnameinfo","getopt","getpeereid","getpeername","getpgid","getpgrp","getpid","getppid","getpriority","getprogname","getprotobyname","getprotobynumber","getpwent","getpwnam","getpwnam_r","getpwuid","getpwuid_r","getrlimit","getrusage","getservbyname","getservbyport","getservent","getsid","getsockname","getsockopt","gettimeofday","getuid","getutxent","getutxid","getutxline","getxattr","gid","gid_t","gl_offs","gl_pathc","gl_pathv","glob","glob_t","globfree","gmtime","gmtime_r","gr_gid","gr_mem","gr_name","gr_passwd","grantpt","group","grouping","h_addr_list","h_addrtype","h_aliases","h_length","h_name","hdr_cnt","headers","hostent","iconv","iconv_close","iconv_open","iconv_t","id_t","ident","ident","idtype_t","if_data","if_freenameindex","if_index","if_indextoname","if_msghdr","if_name","if_nameindex","if_nameindex","if_nametoindex","ifa_addr","ifa_data","ifa_dstaddr","ifa_flags","ifa_name","ifa_netmask","ifa_next","ifaddrs","ifi_addrlen","ifi_baudrate","ifi_collisions","ifi_hdrlen","ifi_hwassist","ifi_ibytes","ifi_ierrors","ifi_imcasts","ifi_ipackets","ifi_iqdrops","ifi_lastchange","ifi_metric","ifi_mtu","ifi_noproto","ifi_obytes","ifi_oerrors","ifi_omcasts","ifi_opackets","ifi_physical","ifi_recvquota","ifi_recvtiming","ifi_reserved1","ifi_reserved2","ifi_type","ifi_typelen","ifi_unused1","ifi_unused2","ifi_xmitquota","ifi_xmittiming","ifm_addrs","ifm_data","ifm_flags","ifm_index","ifm_msglen","ifm_type","ifm_version","imr_interface","imr_multiaddr","in6_addr","in6_pktinfo","in_addr","in_addr_t","in_pktinfo","in_port_t","initgroups","initprot","initprot","ino_t","int16_t","int32_t","int64_t","int8_t","int_curr_symbol","int_frac_digits","int_n_cs_precedes","int_n_sep_by_space","int_n_sign_posn","int_p_cs_precedes","int_p_sep_by_space","int_p_sign_posn","integer_t","intmax_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","intptr_t","ioctl","iov_base","iov_len","iovec","ip_mreq","ipc_perm","ipi6_addr","ipi6_ifindex","ipi_addr","ipi_ifindex","ipi_spec_dst","ipv6_mreq","ipv6mr_interface","ipv6mr_multiaddr","is_master","isalnum","isalpha","isatty","isblank","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","it_interval","it_value","itimerval","jitcnt","jitter","kevent","kevent","kevent64","kevent64_s","key_t","kill","killpg","kqueue","l_len","l_linger","l_onoff","l_pid","l_start","l_type","l_whence","labs","lchown","lconv","linger","link","linkat","lio_listio","listen","listxattr","load_average","load_command","locale_t","localeconv","localeconv_l","localtime","localtime_r","lockf","login_tty","lseek","lstat","lutimes","mach_absolute_time","mach_factor","mach_header","mach_header_64","mach_msg_type_number_t","mach_port_t","mach_timebase_info","mach_timebase_info","mach_timebase_info_data_t","machine","madvise","magic","magic","malloc","max_align_t","maxerror","maxerror","maxprot","maxprot","mcontext_t","memchr","memcmp","memcpy","memmove","memset","mincore","mkdir","mkdirat","mkdtemp","mkfifo","mknod","mkstemp","mkstemps","mktime","mlock","mlockall","mmap","mode","mode_t","modes","modtime","mon_decimal_point","mon_grouping","mon_thousands_sep","mount","mprotect","msg_control","msg_controllen","msg_flags","msg_iov","msg_iovlen","msg_name","msg_namelen","msghdr","msync","munlock","munlockall","munmap","n_cs_precedes","n_sep_by_space","n_sign_posn","nanosleep","natural_t","ncmds","ncmds","negative_sign","newlocale","nfds_t","nice","nl_item","nl_langinfo","nlink_t","nodename","nsects","nsects","ntp_adjtime","ntp_gettime","ntptimeval","numer","off_t","offset","open","open_memstream","open_wmemstream","openat","opendir","openlog","openpty","p_aliases","p_cs_precedes","p_name","p_proto","p_sep_by_space","p_sign_posn","passwd","pathconf","pause","pbi_comm","pbi_flags","pbi_gid","pbi_name","pbi_nfiles","pbi_nice","pbi_pgid","pbi_pid","pbi_pjobc","pbi_ppid","pbi_rgid","pbi_ruid","pbi_start_tvsec","pbi_start_tvusec","pbi_status","pbi_svgid","pbi_svuid","pbi_uid","pbi_xstatus","pbsd","pclose","perror","pid_t","pipe","poll","pollfd","popen","positive_sign","posix_madvise","posix_memalign","posix_openpt","posix_spawn","posix_spawn_file_actions_addclose","posix_spawn_file_actions_adddup2","posix_spawn_file_actions_addopen","posix_spawn_file_actions_destroy","posix_spawn_file_actions_init","posix_spawn_file_actions_t","posix_spawnattr_destroy","posix_spawnattr_getflags","posix_spawnattr_getpgroup","posix_spawnattr_getsigdefault","posix_spawnattr_getsigmask","posix_spawnattr_init","posix_spawnattr_setflags","posix_spawnattr_setpgroup","posix_spawnattr_setsigdefault","posix_spawnattr_setsigmask","posix_spawnattr_t","posix_spawnp","ppsfreq","pread","preadv","precision","printf","proc_bsdinfo","proc_taskallinfo","proc_taskinfo","proc_threadinfo","processor_basic_info","processor_basic_info_data_t","processor_basic_info_t","processor_count","processor_cpu_load_info","processor_cpu_load_info_data_t","processor_cpu_load_info_t","processor_flavor_t","processor_info_array_t","processor_info_t","processor_set_basic_info","processor_set_basic_info_data_t","processor_set_basic_info_t","processor_set_load_info","processor_set_load_info_data_t","processor_set_load_info_t","protoent","pselect","pseudo_AF_HDRCMPLT","pseudo_AF_KEY","pseudo_AF_PIP","pseudo_AF_RTIP","pseudo_AF_XTP","pth_cpu_usage","pth_curpri","pth_flags","pth_maxpriority","pth_name","pth_policy","pth_priority","pth_run_state","pth_sleep_time","pth_system_time","pth_user_time","pthread_atfork","pthread_attr_destroy","pthread_attr_init","pthread_attr_setdetachstate","pthread_attr_setstacksize","pthread_attr_t","pthread_cancel","pthread_cond_broadcast","pthread_cond_destroy","pthread_cond_init","pthread_cond_signal","pthread_cond_t","pthread_cond_timedwait","pthread_cond_wait","pthread_condattr_destroy","pthread_condattr_getpshared","pthread_condattr_init","pthread_condattr_setpshared","pthread_condattr_t","pthread_create","pthread_detach","pthread_exit","pthread_from_mach_thread_np","pthread_get_stackaddr_np","pthread_get_stacksize_np","pthread_getname_np","pthread_getspecific","pthread_join","pthread_key_create","pthread_key_delete","pthread_key_t","pthread_kill","pthread_mutex_destroy","pthread_mutex_init","pthread_mutex_lock","pthread_mutex_t","pthread_mutex_trylock","pthread_mutex_unlock","pthread_mutexattr_destroy","pthread_mutexattr_getpshared","pthread_mutexattr_init","pthread_mutexattr_setpshared","pthread_mutexattr_settype","pthread_mutexattr_t","pthread_rwlock_destroy","pthread_rwlock_init","pthread_rwlock_rdlock","pthread_rwlock_t","pthread_rwlock_tryrdlock","pthread_rwlock_trywrlock","pthread_rwlock_unlock","pthread_rwlock_wrlock","pthread_rwlockattr_destroy","pthread_rwlockattr_getpshared","pthread_rwlockattr_init","pthread_rwlockattr_setpshared","pthread_rwlockattr_t","pthread_self","pthread_setname_np","pthread_setspecific","pthread_sigmask","pthread_t","pti_cow_faults","pti_csw","pti_faults","pti_messages_received","pti_messages_sent","pti_numrunning","pti_pageins","pti_policy","pti_priority","pti_resident_size","pti_syscalls_mach","pti_syscalls_unix","pti_threadnum","pti_threads_system","pti_threads_user","pti_total_system","pti_total_user","pti_virtual_size","ptinfo","ptrace","ptrdiff_t","ptsname","putchar","putchar_unlocked","putenv","puts","pututxline","pw_change","pw_class","pw_dir","pw_expire","pw_gecos","pw_gid","pw_name","pw_passwd","pw_shell","pw_uid","pwrite","pwritev","qsort","querylocale","quotactl","ra_count","ra_offset","radvisory","raise","rand","read","readdir","readdir_r","readlink","readlinkat","readv","realloc","realpath","recv","recvfrom","recvmsg","regcomp","regerror","regex_t","regexec","regfree","regmatch_t","regoff_t","release","remove","removexattr","rename","renameat","renameatx_np","renamex_np","res_init","reserved","revents","rewind","rewinddir","rfu_1","rlim_cur","rlim_max","rlim_t","rlimit","rm_eo","rm_so","rmdir","ru_idrss","ru_inblock","ru_isrss","ru_ixrss","ru_majflt","ru_maxrss","ru_minflt","ru_msgrcv","ru_msgsnd","ru_nivcsw","ru_nsignals","ru_nswap","ru_nvcsw","ru_oublock","ru_stime","ru_utime","running","rusage","s6_addr","s_addr","s_aliases","s_name","s_port","s_proto","sa_data","sa_endpoints_t","sa_family","sa_family_t","sa_flags","sa_len","sa_mask","sa_sigaction","sae_associd_t","sae_connid_t","sae_dstaddr","sae_dstaddrlen","sae_srcaddr","sae_srcaddrlen","sae_srcif","sbrk","sc_family","sc_id","sc_len","sc_reserved","sc_unit","scanf","sched_yield","sdl_alen","sdl_data","sdl_family","sdl_index","sdl_len","sdl_nlen","sdl_slen","sdl_type","seekdir","segment_command","segment_command_64","segname","segname","select","sem_base","sem_close","sem_ctime","sem_flg","sem_nsems","sem_num","sem_op","sem_open","sem_otime","sem_pad1","sem_pad2","sem_pad3","sem_perm","sem_post","sem_t","sem_trywait","sem_unlink","sem_wait","sembuf","semctl","semget","semid_ds","semop","semun","send","sendfile","sendmsg","sendto","servent","setbuf","setdomainname","setegid","setenv","seteuid","setgid","setgrent","setgroups","sethostname","setitimer","setlocale","setlogmask","setpgid","setpriority","setprogname","setpwent","setrlimit","setservent","setsid","setsockopt","settimeofday","setuid","setutxent","setvbuf","setxattr","sf_hdtr","shift","shm_atime","shm_cpid","shm_ctime","shm_dtime","shm_internal","shm_lpid","shm_nattch","shm_open","shm_perm","shm_segsz","shm_unlink","shmat","shmatt_t","shmctl","shmdt","shmget","shmid_ds","shutdown","si_addr","si_addr","si_code","si_errno","si_pid","si_pid","si_signo","si_status","si_status","si_uid","si_uid","si_value","sigaction","sigaction","sigaddset","sigaltstack","sigdelset","sigemptyset","sigev_notify","sigev_notify_attributes","sigev_signo","sigev_value","sigevent","sigfillset","sighandler_t","siginfo_t","sigismember","signal","sigpending","sigprocmask","sigset_t","sigval","sigwait","sin6_addr","sin6_family","sin6_flowinfo","sin6_len","sin6_port","sin6_scope_id","sin_addr","sin_addr","sin_family","sin_family","sin_len","sin_len","sin_other","sin_port","sin_port","sin_srcaddr","sin_tos","sin_zero","sival_ptr","size_t","sizeofcmds","sizeofcmds","sleep","slot_num","snprintf","sockaddr","sockaddr_ctl","sockaddr_dl","sockaddr_in","sockaddr_in6","sockaddr_inarp","sockaddr_storage","sockaddr_un","socket","socketpair","socklen_t","speed_t","sprintf","srand","ss_family","ss_flags","ss_len","ss_size","ss_sp","ss_sysaddr","sscanf","ssize_t","st_atime","st_atime_nsec","st_birthtime","st_birthtime_nsec","st_blksize","st_blocks","st_ctime","st_ctime_nsec","st_dev","st_flags","st_gen","st_gid","st_ino","st_lspare","st_mode","st_mtime","st_mtime_nsec","st_nlink","st_qspare","st_rdev","st_size","st_uid","stabil","stack_t","stat","stat","statfs","statfs","status","statvfs","statvfs","stbcnt","strcasecmp","strcasestr","strcat","strchr","strcmp","strcoll","strcpy","strcspn","strdup","strerror","strerror_r","strlen","strncasecmp","strncat","strncmp","strncpy","strndup","strnlen","strpbrk","strrchr","strsignal","strspn","strstr","strtod","strtok","strtol","strtoul","strxfrm","sun_family","sun_len","sun_path","suseconds_t","symlink","symlinkat","sync","syscall","sysconf","sysctl","sysctlbyname","sysctlnametomib","syslog","sysname","system","tai","task_count","tcdrain","tcflag_t","tcflow","tcflush","tcgetattr","tcgetpgrp","tcgetsid","tcsendbreak","tcsetattr","tcsetpgrp","telldir","termios","thousands_sep","thread_count","time","time","time_state","time_t","timegm","times","timespec","timeval","timeval32","timex","timezone","tm","tm_gmtoff","tm_hour","tm_isdst","tm_mday","tm_min","tm_mon","tm_sec","tm_wday","tm_yday","tm_year","tm_zone","tmpfile","tmpnam","tms","tms_cstime","tms_cutime","tms_stime","tms_utime","tolerance","tolower","toupper","trailers","trl_cnt","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttyname","ttyname_r","tv_nsec","tv_sec","tv_sec","tv_sec","tv_usec","tv_usec","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uc_link","uc_mcontext","uc_mcsize","uc_onstack","uc_sigmask","uc_stack","ucontext_t","udata","udata","uid","uid_t","uint16_t","uint32_t","uint64_t","uint8_t","uintmax_t","uintptr_t","umask","uname","ungetc","unlink","unlinkat","unlockpt","unmount","unsetenv","useconds_t","uselocale","usleep","ut_host","ut_id","ut_line","ut_pid","ut_tv","ut_type","ut_user","utimbuf","utime","utimensat","utimes","utmpx","utmpxname","utsname","val","version","vm_prot_t","vm_size_t","vmaddr","vmaddr","vmsize","vmsize","wait","wait4","waitid","waitpid","wchar_t","wcslen","wcstombs","winsize","wmemchr","write","writev","ws_col","ws_row","ws_xpixel","ws_ypixel","xsu_avail","xsu_encrypted","xsu_pagesize","xsu_total","xsu_used","xsw_usage","xucred"],"q":["libcd":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","data includes security that replaces the TFO-cookie","data is idempotent","resume connect() on read/write","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Third Party Connect","Any distributed FS","IP6 Auth Header","any host internal protocol","any private encr. scheme","Argus","AX.25 Frames","BHA","Bulk Data Transfer","BackRoom SATNET Monitoring","CFTP","Chaos","Control Message Transport","Comp. Prot. HeartBeat","Comp. Prot. Net. Executive","Datagram Delivery","dissimilar gateway prot.","divert pseudo-protocol","last return value of *_input(), meaning “all job for …","IP6 destination option","exterior gateway protocol","EMCON","encapsulation header","ISO cnlp","IP6 Encap Sec. Payload","Ethernet IP encapsulation","IP6 fragmentation header","gateway2 (deprecated)","GMTP","General Routing Encap.","“hello” routing protocol","Host Monitoring","IP6 hop-by-hop options","","","xns idp","InterDomain Policy Routing","InterDomain Routing","group mgmt protocol","NSFNET-IGP","Cisco/GXS IGRP","IL transport protocol","Integ. Net Layer Security","Merit Internodal","","payload compression (IPComp)","Packet Core Utility","IP encapsulated in IP","for compatibility","Pluribus Packet Core","","Reliable Transaction","Kryptolan","Locus Address Resoloution","Leaf-1","Leaf-2","","DCN Measurement Subsystems","Mobile Host Routing","Mobile Int.ing control","Multicast Transport","Multiplexing","Sun net disk proto (temp.)","Next Hop Resolution","IP6 no next header","Network Services","network voice protocol","OSPFIGP","PGM","private interior gateway","Protocol Independent Mcast","Packet Radio Measurement","pup","Packet Video Protocol","raw IP packet","BBN RCC Monitoring","Reliable Data","IP6 routing header","resource reservation","Remote Virtual Disk","SATNET/Backroom EXPAK","Satnet Monitoring","Semaphore Comm. security","SCTP","Source Demand Routing","Sequential Exchange","Strite RPC protocol","Stream protocol II.","Secure VMTP","IP with encryption","TCF","","tp-4 w/ class negotiation","TP++ Transport","Trunk-1","Trunk-2","TTP","","Banyon VINES","VISA Protocol","VMTP","WIDEBAND EXPAK","WIDEBAND Monitoring","Wang Span Network","Cross Net Debuggersae_associd_t)(-1ULL))","","((sae_connid_tnable/Disable TCP Fastopen on this socketquivalent to C’s <code>void</code> type when used as a [pointerhe 64-bit libc on Solaris and illumos only has …i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2,3,3,3,1,4,4,1,2,1,1,1,2,4,1,0,0,0,0,0,5,5,0,0,0,0,0,6,0,7,7,7,7,7,7,7,7,8,0,0,8,0,8,8,8,0,8,0,8,0,0,0,0,9,9,9,9,9,0,10,0,0,0,0,11,11,11,11,0,0,0,0,12,13,14,15,6,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,8,47,7,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,5,83,9,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,10,104,105,11,106,107,108,2,3,1,4,109,110,12,13,14,15,6,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,8,47,7,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,5,83,9,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,10,104,105,11,106,107,108,2,3,1,4,109,110,0,0,0,10,64,64,0,0,0,64,0,64,64,0,0,64,64,0,0,0,0,0,0,0,0,86,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,12,13,14,15,6,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,8,47,7,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,5,83,9,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,10,104,105,11,106,107,108,2,3,1,4,109,0,0,0,75,76,77,75,76,77,38,38,38,0,0,0,86,101,0,100,101,0,73,74,73,74,72,72,72,72,0,5,67,93,93,93,93,93,93,61,88,67,102,48,0,0,0,0,0,0,0,0,59,59,59,59,0,0,62,62,62,62,62,62,62,62,62,62,0,0,0,0,69,69,0,0,0,0,86,86,87,23,0,0,0,0,0,0,0,0,61,58,92,58,92,58,92,58,92,58,58,92,58,92,58,92,58,58,92,92,92,92,92,92,58,92,92,92,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,61,88,0,0,0,0,0,0,75,76,75,76,73,74,61,88,61,73,74,75,76,88,0,0,0,0,110,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,86,12,13,14,15,6,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,8,47,7,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,5,83,9,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,10,104,105,11,106,107,108,2,3,1,4,109,110,0,0,0,0,0,0,0,0,56,56,56,56,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,47,47,47,0,0,0,0,0,15,15,15,15,0,0,67,21,21,21,21,21,66,66,0,0,0,0,0,0,61,88,0,0,0,40,0,0,40,0,0,0,34,34,34,34,34,34,34,0,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,63,63,63,63,63,63,63,46,46,0,0,0,0,0,0,0,75,76,0,0,0,0,0,67,67,67,67,67,67,67,67,0,0,12,13,14,15,6,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,8,47,7,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,5,83,9,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,10,104,105,11,106,107,108,2,3,1,4,109,110,0,0,22,22,0,0,0,82,82,81,81,81,0,20,20,101,0,0,0,0,0,0,0,0,0,0,0,0,0,27,27,0,86,86,0,0,0,0,0,0,0,0,65,25,25,65,65,65,65,0,0,0,0,0,0,0,0,0,103,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0,0,0,0,0,0,44,0,73,74,0,0,86,87,75,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,86,6,67,67,67,0,0,37,37,37,37,37,37,37,0,0,0,0,0,67,67,67,0,0,73,74,67,0,0,0,0,0,0,44,75,76,0,0,0,48,0,86,0,0,0,0,0,0,0,30,67,30,30,67,67,0,0,0,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,70,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,0,0,86,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,91,91,91,91,91,91,91,91,91,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,70,0,0,0,0,0,0,0,0,33,33,33,33,33,33,33,33,33,33,0,0,0,0,0,57,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,74,23,0,0,69,18,18,0,0,42,42,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,101,0,109,84,29,29,29,29,31,0,31,0,54,31,54,54,0,0,85,85,85,85,85,0,80,80,80,80,80,0,0,78,78,78,78,78,78,78,78,0,0,0,75,76,0,89,0,89,83,89,83,83,0,89,89,89,89,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,90,90,90,90,90,90,90,0,90,90,0,0,0,0,0,0,0,0,53,53,53,53,53,53,53,53,53,53,53,53,0,0,0,0,0,0,99,99,99,99,0,0,0,0,0,0,0,0,0,0,0,32,32,32,32,32,32,60,79,60,79,60,79,79,60,79,79,79,60,26,0,73,74,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,55,97,55,55,80,0,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,86,0,0,0,0,0,86,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,43,43,0,0,0,0,0,0,0,0,0,0,44,0,87,103,0,0,0,0,0,0,0,0,0,0,0,0,67,103,0,87,87,0,0,0,0,0,0,0,0,0,36,36,36,36,36,36,36,36,36,36,36,0,0,0,28,28,28,28,86,0,0,66,66,0,12,13,14,15,6,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,8,47,7,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,5,83,9,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,10,104,105,11,106,107,108,2,3,1,4,109,110,12,13,14,15,6,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,8,47,7,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,5,83,9,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,10,104,105,11,106,107,108,2,3,1,4,109,110,0,0,17,16,17,104,16,104,12,13,14,15,6,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,8,47,7,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,5,83,9,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,10,104,105,11,106,107,108,2,3,1,4,109,110,108,108,108,108,108,108,0,61,88,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,98,98,98,98,98,98,0,0,0,0,0,0,0,10,44,0,0,75,76,75,76,0,0,0,0,0,0,0,0,0,0,0,24,24,24,24,71,71,71,71,71,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["c_uint",6]],["c_uint",6]],[[]],[[["c_uint",6]],["c_uint",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_int",6]]],[[["c_int",6]],["bool",15]],[[["c_int",6]]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_int",6]],["c_int",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_int",6]],["bool",15]],null,[[["c_int",6]],["c_int",6]],[[["c_int",6]],["bool",15]],[[["c_int",6]],["bool",15]],[[["c_int",6]],["bool",15]],[[["c_int",6]],["bool",15]],null,null,null,[[["c_int",6]],["c_int",6]],[[["c_int",6]],["c_int",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_int",6]],["c_int",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["dir",4]],[[],["file",4]],[[],["fpos_t",4]],[[],["group",3]],[[],["utimbuf",3]],[[],["timeval",3]],[[],["timespec",3]],[[],["rlimit",3]],[[],["rusage",3]],[[],["ipv6_mreq",3]],[[],["hostent",3]],[[],["iovec",3]],[[],["pollfd",3]],[[],["winsize",3]],[[],["linger",3]],[[],["sigval",3]],[[],["itimerval",3]],[[],["tms",3]],[[],["servent",3]],[[],["protoent",3]],[[],["sockaddr",3]],[[],["sockaddr_in6",3]],[[],["passwd",3]],[[],["ifaddrs",3]],[[],["fd_set",3]],[[],["tm",3]],[[],["msghdr",3]],[[],["cmsghdr",3]],[[],["fsid_t",3]],[[],["if_nameindex",3]],[[],["regex_t",3]],[[],["regmatch_t",3]],[[],["sockaddr_un",3]],[[],["utsname",3]],[[],["timezone",4]],[[],["ip_mreq",3]],[[],["aiocb",3]],[[],["glob_t",3]],[[],["addrinfo",3]],[[],["mach_timebase_info",3]],[[],["stat",3]],[[],["pthread_mutexattr_t",3]],[[],["pthread_condattr_t",3]],[[],["pthread_rwlockattr_t",3]],[[],["siginfo_t",3]],[[],["sigaction",3]],[[],["stack_t",3]],[[],["fstore_t",3]],[[],["radvisory",3]],[[],["statvfs",3]],[[],["dl_info",3]],[[],["sockaddr_in",3]],[[],["kevent64_s",3]],[[],["dqblk",3]],[[],["if_msghdr",3]],[[],["termios",3]],[[],["flock",3]],[[],["sf_hdtr",3]],[[],["lconv",3]],[[],["proc_taskinfo",3]],[[],["proc_bsdinfo",3]],[[],["proc_taskallinfo",3]],[[],["xsw_usage",3]],[[],["xucred",3]],[[],["mach_header",3]],[[],["mach_header_64",3]],[[],["segment_command",3]],[[],["segment_command_64",3]],[[],["load_command",3]],[[],["sockaddr_dl",3]],[[],["sockaddr_inarp",3]],[[],["sockaddr_ctl",3]],[[],["in_pktinfo",3]],[[],["in6_pktinfo",3]],[[],["ipc_perm",3]],[[],["sembuf",3]],[[],["arphdr",3]],[[],["in_addr",3]],[[],["sa_endpoints_t",3]],[[],["timex",3]],[[],["ntptimeval",3]],[[],["kevent",3]],[[],["semid_ds",3]],[[],["shmid_ds",3]],[[],["proc_threadinfo",3]],[[],["statfs",3]],[[],["dirent",3]],[[],["pthread_rwlock_t",3]],[[],["pthread_mutex_t",3]],[[],["pthread_cond_t",3]],[[],["sockaddr_storage",3]],[[],["utmpx",3]],[[],["sigevent",3]],[[],["processor_cpu_load_info",3]],[[],["processor_basic_info",3]],[[],["processor_set_basic_info",3]],[[],["processor_set_load_info",3]],[[],["semun",19]],[[],["timeval32",3]],[[],["if_data",3]],[[],["bpf_hdr",3]],[[],["pthread_attr_t",3]],[[],["max_align_t",3]],[[],["ucontext_t",3]],[[],["__darwin_mcontext64",3]],[[],["__darwin_arm_exception_state64",3]],[[],["__darwin_arm_thread_state64",3]],[[],["__darwin_arm_neon_state64",3]],[[],["in6_addr",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["formatter",3]],[["error",3],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,[[],["pid_t",6]],null,null,[[],["c_int",6]],null,[[],["uid_t",6]],null,[[],["sigval",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[3,"__darwin_arm_thread_state64"],[3,"__darwin_mcontext64"],[3,"__darwin_arm_exception_state64"],[3,"__darwin_arm_neon_state64"],[3,"ipc_perm"],[3,"utimbuf"],[3,"addrinfo"],[3,"aiocb"],[3,"arphdr"],[19,"semun"],[3,"bpf_hdr"],[4,"DIR"],[4,"FILE"],[4,"fpos_t"],[3,"group"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"passwd"],[3,"ifaddrs"],[3,"fd_set"],[3,"tm"],[3,"msghdr"],[3,"cmsghdr"],[3,"fsid_t"],[3,"if_nameindex"],[3,"regex_t"],[3,"regmatch_t"],[3,"sockaddr_un"],[3,"utsname"],[4,"timezone"],[3,"ip_mreq"],[3,"glob_t"],[3,"mach_timebase_info"],[3,"stat"],[3,"pthread_mutexattr_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlockattr_t"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"kevent64_s"],[3,"dqblk"],[3,"if_msghdr"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"proc_taskinfo"],[3,"proc_bsdinfo"],[3,"proc_taskallinfo"],[3,"xsw_usage"],[3,"xucred"],[3,"mach_header"],[3,"mach_header_64"],[3,"segment_command"],[3,"segment_command_64"],[3,"load_command"],[3,"sockaddr_dl"],[3,"sockaddr_inarp"],[3,"sockaddr_ctl"],[3,"in_pktinfo"],[3,"in6_pktinfo"],[3,"sembuf"],[3,"in_addr"],[3,"sa_endpoints_t"],[3,"timex"],[3,"ntptimeval"],[3,"kevent"],[3,"semid_ds"],[3,"shmid_ds"],[3,"proc_threadinfo"],[3,"statfs"],[3,"dirent"],[3,"pthread_rwlock_t"],[3,"pthread_mutex_t"],[3,"pthread_cond_t"],[3,"sockaddr_storage"],[3,"utmpx"],[3,"sigevent"],[3,"processor_cpu_load_info"],[3,"processor_basic_info"],[3,"processor_set_basic_info"],[3,"processor_set_load_info"],[3,"timeval32"],[3,"if_data"],[3,"pthread_attr_t"],[3,"max_align_t"],[3,"ucontext_t"],[3,"in6_addr"],[4,"c_void"]]},\
"libz_sys":{"doc":"","t":[6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,12,5,5,6,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,5,5,5,12,5,5,5,5,5,5,5,5,5,5,5,5,12,12,12,12,6,11,11,11,11,6,4,3,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,11,11,11,11,12,12,12,12,12,12,12,6,12,12,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,5,6,6,6,12,6,3,6,12,12,5,5],"n":["Bytef","Z_ASCII","Z_BEST_COMPRESSION","Z_BEST_SPEED","Z_BINARY","Z_BLOCK","Z_BUF_ERROR","Z_DATA_ERROR","Z_DEFAULT_COMPRESSION","Z_DEFAULT_STRATEGY","Z_DEFLATED","Z_ERRNO","Z_FILTERED","Z_FINISH","Z_FIXED","Z_FULL_FLUSH","Z_HUFFMAN_ONLY","Z_MEM_ERROR","Z_NEED_DICT","Z_NO_COMPRESSION","Z_NO_FLUSH","Z_OK","Z_PARTIAL_FLUSH","Z_RLE","Z_STREAM_END","Z_STREAM_ERROR","Z_SYNC_FLUSH","Z_TEXT","Z_TREES","Z_UNKNOWN","Z_VERSION_ERROR","adler","adler32","adler32_combine","alloc_func","avail_in","avail_out","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","comm_max","comment","compress","compress2","compressBound","crc32","crc32_combine","data_type","deflate","deflateBound","deflateCopy","deflateEnd","deflateInit2_","deflateInit_","deflateParams","deflatePrime","deflateReset","deflateSetDictionary","deflateSetHeader","deflateTune","done","extra","extra_len","extra_max","free_func","from","from","from","from","gzFile","gzFile_s","gz_header","gz_headerp","gzclearerr","gzclose","gzdirect","gzdopen","gzeof","gzerror","gzflush","gzgetc","gzgets","gzopen","gzputc","gzputs","gzread","gzrewind","gzseek","gzsetparams","gztell","gzungetc","gzwrite","hcrc","in_func","inflate","inflateBack","inflateBackEnd","inflateBackInit_","inflateCopy","inflateEnd","inflateGetHeader","inflateInit2_","inflateInit_","inflateMark","inflatePrime","inflateReset","inflateReset2","inflateSetDictionary","inflateSync","internal_state","into","into","into","into","msg","name","name_max","next_in","next_out","opaque","os","out_func","reserved","state","text","time","to_owned","to_owned","total_in","total_out","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uInt","uLong","uLongf","uncompress","voidp","voidpc","voidpf","xflags","z_off_t","z_stream","z_streamp","zalloc","zfree","zlibCompileFlags","zlibVersion"],"q":["libz_sys","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,2,3,4,1,2,3,4,1,4,1,4,1,4,4,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,0,2,3,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,1,1,4,4,1,1,1,4,0,1,1,4,4,4,1,1,1,2,3,4,1,2,3,4,1,2,3,4,1,0,0,0,0,0,0,0,4,0,0,0,1,1,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["gz_header",3]],[[],["z_stream",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[3,"z_stream"],[4,"gzFile_s"],[4,"internal_state"],[3,"gz_header"]]},\
"maplit":{"doc":"Macros for container literals with specific type.","t":[14,14,14,14,14],"n":["btreemap","btreeset","convert_args","hashmap","hashset"],"q":["maplit","","","",""],"d":["Create a <strong>BTreeMap</strong> from a list of key-value pairs","Create a <strong>BTreeSet</strong> from a list of elements.","Macro that converts the keys or key-value pairs passed to …","Create a <strong>HashMap</strong> from a list of key-value pairs","Create a <strong>HashSet</strong> from a list of elements."],"i":[0,0,0,0,0],"f":[null,null,null,null,null],"p":[]},\
"matrixmultiply":{"doc":"General matrix multiplication for f32, f64 matrices. …","t":[5,5],"n":["dgemm","sgemm"],"q":["matrixmultiply",""],"d":["General matrix multiplication (f64)","General matrix multiplication (f32)"],"i":[0,0],"f":[[[["isize",15],["usize",15],["f64",15]]],[[["isize",15],["usize",15],["f32",15]]]],"p":[]},\
"mcrt":{"doc":"Monte-Carlo radiative transfer simulation binary. Compute …","t":[17,5,5,5,5,5],"n":["BACKUP_TERM_WIDTH","gen_base_output","gen_detector_registers","initialisation","load_parameters","main"],"q":["mcrt","","","","",""],"d":["Backup print width if the terminal width can not be …","Generate the base output instance.","Generate the detector registers.","Initialise the input arguments.","Load the required files and form the input parameters.","Main program function."],"i":[0,0,0,0,0,0],"f":[null,[[["set",3],["grid",3],["register",3],["engine",4]],["output",3]],[[["set",3],["engine",4]]],[[["usize",15]]],[[["path",3],["usize",15]],["parameters",3]],[[]]],"p":[]},\
"memchr":{"doc":"The <code>memchr</code> crate provides heavily optimized routines for …","t":[3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Memchr","Memchr2","Memchr3","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","into","into","into","into_iter","into_iter","into_iter","memchr","memchr2","memchr2_iter","memchr3","memchr3_iter","memchr_iter","memrchr","memrchr2","memrchr2_iter","memrchr3","memrchr3_iter","memrchr_iter","new","new","new","next","next","next","next_back","next_back","next_back","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["memchr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator for <code>memchr</code>.","An iterator for <code>memchr2</code>.","An iterator for <code>memchr3</code>.","","","","","","","","","","","","","","","","Search for the first occurrence of a byte in a slice.","Like <code>memchr</code>, but searches for either of two bytes instead …","An iterator over all occurrences of the needles in a …","Like <code>memchr</code>, but searches for any of three bytes instead …","An iterator over all occurrences of the needles in a …","An iterator over all occurrences of the needle in a …","Search for the last occurrence of a byte in a slice.","Like <code>memrchr</code>, but searches for either of two bytes …","An iterator over all occurrences of the needles in a …","Like <code>memrchr</code>, but searches for any of three bytes instead …","An iterator over all occurrences of the needles in a …","An iterator over all occurrences of the needle in a …","Creates a new iterator that yields all positions of …","Creates a new iterator that yields all positions of …","Create a new <code>Memchr3</code> that’s initialized to zero with a …","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3],"f":[null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]],[["option",4],["usize",15]]],[[["u8",15]],[["option",4],["usize",15]]],[[["u8",15]],["memchr2",3]],[[["u8",15]],[["option",4],["usize",15]]],[[["u8",15]],["memchr3",3]],[[["u8",15]],["memchr",3]],[[["u8",15]],[["option",4],["usize",15]]],[[["u8",15]],[["option",4],["usize",15]]],[[["u8",15]],[["rev",3],["memchr2",3]]],[[["u8",15]],[["option",4],["usize",15]]],[[["u8",15]],[["rev",3],["memchr3",3]]],[[["u8",15]],[["rev",3],["memchr",3]]],[[["u8",15]],["memchr",3]],[[["u8",15]],["memchr2",3]],[[["u8",15]],["memchr3",3]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]},\
"memoffset":{"doc":"A crate used for calculating offsets of struct members …","t":[14,14,14,14,14],"n":["offset_of","offset_of_tuple","raw_field","raw_field_tuple","span_of"],"q":["memoffset","","","",""],"d":["Calculates the offset of the specified field from the …","Calculates the offset of the specified field from the …","Computes a const raw pointer to the given field of the …","Computes a const raw pointer to the given field of the …","Produces a range instance representing the sub-slice …"],"i":[0,0,0,0,0],"f":[null,null,null,null,null],"p":[]},\
"miniz_oxide":{"doc":"A pure rust replacement for the miniz DEFLATE/zlib …","t":[13,13,13,4,13,13,13,4,4,6,4,13,13,13,13,13,13,13,13,13,3,13,13,13,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,13,13,13,11,11,11,11,5,5,0,11,11,11,11,11,0,11,11,11,11,13,3,4,3,13,13,13,13,13,13,13,13,13,13,13,13,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,5,13,13,13,13,13,13,13,4,11,11,11,11,0,5,5,11,11,11,11,11,11,0,11,11,11,11,3,17,11,11,11,5,11,11,0,11,11,11,11,11,11,17,17,17,17,3,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11],"n":["Block","Buf","Data","DataFormat","ErrNo","Finish","Full","MZError","MZFlush","MZResult","MZStatus","Mem","NeedDict","None","Ok","Param","Partial","Raw","Stream","StreamEnd","StreamResult","Sync","Version","Zlib","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_consumed","bytes_written","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deflate","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","inflate","into","into","into","into","into","ne","new","status","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","BestCompression","BestSpeed","CompressionLevel","DefaultCompression","DefaultLevel","NoCompression","UberCompression","borrow","borrow_mut","clone","clone_into","compress_to_vec","compress_to_vec_zlib","core","eq","fmt","from","hash","into","stream","to_owned","try_from","try_into","type_id","BadParam","CallbackFunc","CompressionStrategy","CompressorOxide","Default","Done","Filtered","Finish","Fixed","Full","HuffmanOnly","None","Okay","PutBufFailed","RLE","Sync","TDEFLFlush","TDEFLStatus","adler32","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","compress","compress_to_output","create_comp_flags_from_zip_params","data_format","default","deflate_flags","eq","eq","eq","flags","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","hash","into","into","into","into","into","new","new","prev_return_status","put_buf_func","reset","set_compression_level","set_compression_level_raw","set_format_and_level","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","TDEFL_COMPUTE_ADLER32","TDEFL_FILTER_MATCHES","TDEFL_FORCE_ALL_RAW_BLOCKS","TDEFL_FORCE_ALL_STATIC_BLOCKS","TDEFL_GREEDY_PARSING_FLAG","TDEFL_NONDETERMINISTIC_PARSING_FLAG","TDEFL_RLE_MATCHES","TDEFL_WRITE_ZLIB_HEADER","deflate","Adler32Mismatch","BadParam","Done","Failed","FailedCannotMakeProgress","HasMoreOutput","NeedsMoreInput","TINFLStatus","borrow","borrow_mut","clone","clone_into","core","decompress_to_vec","decompress_to_vec_zlib","eq","fmt","from","from_i32","hash","into","stream","to_owned","try_from","try_into","type_id","DecompressorOxide","TINFL_LZ_DICT_SIZE","adler32","borrow","borrow_mut","decompress","default","from","inflate_flags","init","into","new","try_from","try_into","type_id","TINFL_FLAG_COMPUTE_ADLER32","TINFL_FLAG_HAS_MORE_INPUT","TINFL_FLAG_PARSE_ZLIB_HEADER","TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","InflateState","borrow","borrow_mut","decompressor","default","from","inflate","into","last_status","new","new_boxed","new_boxed_with_window_bits","reset","try_from","try_into","type_id"],"q":["miniz_oxide","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","miniz_oxide::deflate","","","","","","","","","","","","","","","","","","","","","","","","miniz_oxide::deflate::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","miniz_oxide::deflate::core::deflate_flags","","","","","","","","miniz_oxide::deflate::stream","miniz_oxide::inflate","","","","","","","","","","","","","","","","","","","","","","","","","","miniz_oxide::inflate::core","","","","","","","","","","","","","","","miniz_oxide::inflate::core::inflate_flags","","","","miniz_oxide::inflate::stream","","","","","","","","","","","","","","",""],"d":["Not implemented.","","","How compressed data is wrapped.","","Attempt to flush the remaining data and end the stream.","Same as <code>Sync</code>, but resets the compression dictionary so …","A list of miniz failed status codes.","A list of flush types.","<code>Result</code> alias for all miniz status codes both successful …","A list of miniz successful status codes.","","","Don’t force any flushing. Used when more input data is …","","","Zlib partial flush. Currently treated as <code>Sync</code>.","Raw DEFLATE.","","","A structure containg the result of a call to the inflate …","Finish compressing the currently buffered data, and …","","Wrapped using the zlib format.","","","","","","","","","","","The number of bytes consumed from the input slice.","The number of bytes written to the output slice.","","","","","","","","","","","This module contains functionality for compression.","","","","","","","","","","","","","","","","","","","","","","","This module contains functionality for decompression.","","","","","","","Create an MZFlush value from an integer value.","The return status of the call.","","","","","","","","","","","","","","","","","","","","","Slow/high compression. Do a lot of checks to try to find …","Fast compression. Uses a special compression routine that …","How much processing the compressor should do to compress …","Use the default compression level.","Default compromise between speed and compression.","Don’t do any compression, only output uncompressed …","Even more checks, can be very slow.","","","","","Compress the input data to a vector, using the specified …","Compress the input data to a vector, using the specified …","Streaming compression functionality.","","","","","","Extra streaming compression functionality.","","","","","","Callback function and user used in <code>compress_to_output</code>.","Strategy setting for compression.","Main compression struct.","Don’t use any of the special strategies.","","Only use matches that are at least 5 bytes long.","Try to flush everything and end the stream.","Only use static/fixed blocks. (Blocks using the default …","Same as sync, but reset the dictionary so that the …","Don’t look for matches, only huffman encode the …","Compress as much as there is space for, and then return …","","","Only look for matches with a distance of 1, i.e do …","Try to flush the current data and output an empty raw …","A list of deflate flush types.","Return status codes.","Get the adler32 checksum of the currently encoded data.","","","","","","","","","","","","","","","","","Main compression function. Tries to compress as much as …","Main compression function. Callbacks output.","Create a set of compression flags using parameters used …","Returns whether the compressor is wrapping the data in a …","Initialize the compressor with a level of 4, zlib wrapper …","","","","","Get the raw compressor flags.","","","","","","","","","","","","","","","","","","Create a new <code>CompressorOxide</code> with the given flags.","","Get the return status of the previous <code>compress</code> call with …","","Reset the state of the compressor, keeping the same …","Set the compression level of the compressor.","Set the compression level of the compressor using an …","Update the compression settings of the compressor.","","","","","","","","","","","","","","","","","","","Should we compute the adler32 checksum.","Only use matches that are at least 6 bytes long.","Force the compressor to only output raw/uncompressed …","Force the compressor to only output static blocks. …","Should we use greedy parsing (as opposed to lazy parsing …","Used in miniz to skip zero-initializing hash and dict. We …","Only look for matches with a distance of 0.","Whether to use a zlib wrapper.","Try to compress from input to output with the given …","The decompression went fine, but the adler32 checksum did …","One or more of the input parameters were invalid.","Finished decomression without issues.","Failed to decompress due to invalid data.","More input data was expected, but the caller indicated …","There is still pending data that didn’t fit in the …","The decompressor needs more input data to continue …","Return status codes.","","","","","Streaming decompression functionality.","Decompress the deflate-encoded data in <code>input</code> to a vector.","Decompress the deflate-encoded data (with a zlib wrapper) …","","","","","","","Extra streaming decompression functionality.","","","","","Main decompression struct.","","Returns the adler32 checksum of the currently …","","","Main decompression function. Keeps decompressing data …","Create a new tinfl_decompressor with all fields set to 0.","","","Set the current state to <code>Start</code>.","","Create a new tinfl_decompressor with all fields set to 0.","","","","Should we calculate the adler32 checksum of the output …","There is more input that hasn’t been given to the …","Should we try to parse a zlib header?","The output buffer should not wrap around.","A struct that compbines a decompressor with extra data …","","","Access the innner decompressor.","","","Try to decompress from <code>input</code> to <code>output</code> with the given …","","Return the status of the last call to <code>inflate</code> with this …","Create a new state.","Create a new state on the heap.","Create a new state using miniz/zlib style window bits …","Reset the decompressor without re-allocating memory, …","","",""],"i":[1,2,2,0,2,1,1,0,0,0,0,2,3,1,3,2,1,4,2,3,0,1,2,4,1,3,2,4,5,1,3,2,4,5,5,5,1,3,2,4,5,1,3,2,4,5,0,1,3,2,4,5,1,3,2,4,5,6,6,1,3,2,4,5,1,3,2,4,5,0,1,3,2,4,5,5,1,5,1,3,2,4,5,1,3,2,4,5,1,3,2,4,5,1,3,2,4,5,7,7,0,7,7,7,7,7,7,7,7,0,0,0,7,7,7,7,7,0,7,7,7,7,8,0,0,0,9,8,9,10,9,10,9,10,8,8,9,10,0,0,11,11,12,9,10,8,11,12,9,10,8,9,10,8,9,10,8,0,0,0,11,11,0,9,10,8,11,9,10,8,11,12,9,10,10,8,9,10,8,11,12,9,10,8,11,10,11,12,11,11,11,11,9,10,8,11,12,9,10,8,11,12,9,10,8,11,12,9,10,8,0,0,0,0,0,0,0,0,0,13,13,13,13,13,13,13,0,13,13,13,13,0,0,0,13,13,13,13,13,13,0,13,13,13,13,0,0,14,14,14,0,14,14,0,14,14,14,14,14,14,0,0,0,0,0,15,15,15,15,15,0,15,15,15,15,15,15,15,15,15],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["mzflush",4]],[[],["mzstatus",4]],[[],["mzerror",4]],[[],["dataformat",4]],[[],["streamresult",3]],[[]],[[]],[[]],[[]],[[]],null,[[["mzflush",4]],["bool",15]],[[["mzstatus",4]],["bool",15]],[[["mzerror",4]],["bool",15]],[[["dataformat",4]],["bool",15]],[[["streamresult",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["streamresult",3]]],[[["streamresult",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[["streamresult",3]],["bool",15]],[[["i32",15]],[["mzerror",4],["result",4]]],null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[]],[[],["compressionlevel",4]],[[]],[[["u8",15]],[["u8",15],["vec",3]]],[[["u8",15]],[["u8",15],["vec",3]]],null,[[["compressionlevel",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["compressionstrategy",4]],[[],["tdeflflush",4]],[[],["tdeflstatus",4]],[[]],[[]],[[]],[[["compressoroxide",3],["tdeflflush",4]]],[[["compressoroxide",3],["tdeflflush",4]]],[[["i32",15]],["u32",15]],[[],["dataformat",4]],[[]],null,[[["compressionstrategy",4]],["bool",15]],[[["tdeflflush",4]],["bool",15]],[[["tdeflstatus",4]],["bool",15]],[[],["i32",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["mzflush",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["i32",15]],[["mzerror",4],["result",4]]],[[],["tdeflstatus",4]],null,[[]],[[["compressionlevel",4]]],[[["u8",15]]],[[["dataformat",4],["u8",15]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[["compressoroxide",3],["mzflush",4]],["streamresult",3]],null,null,null,null,null,null,null,null,[[]],[[]],[[],["tinflstatus",4]],[[]],null,[[],[["tinflstatus",4],["result",4],["vec",3]]],[[],[["tinflstatus",4],["result",4],["vec",3]]],[[["tinflstatus",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["i32",15]],[["option",4],["tinflstatus",4]]],[[]],[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[],[["option",4],["u32",15]]],[[]],[[]],[[["decompressoroxide",3],["cursor",3],["u32",15]]],[[]],[[]],null,[[]],[[]],[[],["decompressoroxide",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[],["decompressoroxide",3]],[[]],[[]],[[["inflatestate",3],["mzflush",4]],["streamresult",3]],[[]],[[],["tinflstatus",4]],[[["dataformat",4]],["inflatestate",3]],[[["dataformat",4]],[["box",3],["inflatestate",3]]],[[["i32",15]],[["box",3],["inflatestate",3]]],[[["dataformat",4]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"MZFlush"],[4,"MZError"],[4,"MZStatus"],[4,"DataFormat"],[3,"StreamResult"],[6,"MZResult"],[4,"CompressionLevel"],[4,"TDEFLStatus"],[4,"CompressionStrategy"],[4,"TDEFLFlush"],[3,"CompressorOxide"],[3,"CallbackFunc"],[4,"TINFLStatus"],[3,"DecompressorOxide"],[3,"InflateState"]]},\
"nalgebra":{"doc":"nalgebra","tn":["ClosedAdd","ClosedDiv","ClosedMul","ClosedSub","Complex","ComplexField","Element","Field","RealField","RealField","SimdBool","SimdBool","SimdComplexField","SimdPartialOrd","SimdRealField","SimdRealField","SimdValue","abs","abs","abs","abs_diff_eq","abs_diff_eq","abs_diff_eq","acos","acos","acosh","acosh","add","add","add","add","add_assign","add_assign","add_assign","add_assign","all","and","any","argument","argument","as_","asin","asin","asinh","asinh","atan","atan","atan2","atanh","atanh","base","bitmask","borrow","borrow_mut","cbrt","cbrt","ceil","ceil","center","clamp","clamp","clone","clone_into","conj","conjugate","conjugate","convert","convert_ref","convert_ref_unchecked","convert_unchecked","copysign","cos","cos","cosc","cosh","cosh","coshc","default","default","default","default_epsilon","default_epsilon","default_epsilon","default_max_relative","default_max_relative","default_max_relative","default_max_ulps","default_max_ulps","default_max_ulps","deserialize","distance","distance_squared","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","e","eq","eq","eq","eq","exp","exp","exp2","exp2","exp_m1","exp_m1","extract","extract","extract","extract","extract","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frac_1_pi","frac_2_pi","frac_2_sqrt_pi","frac_pi_2","frac_pi_3","frac_pi_4","frac_pi_6","frac_pi_8","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_real","from_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_str","from_str_radix","from_subset","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","geometry","hash","hypot","hypot","i","identity","identity","if_else","if_else2","if_else3","im","imaginary","imaginary","inf","inf_sup","into","inv","inv","inverse","inverse","inverse_mut","inverse_mut","inverse_transform_point","inverse_transform_point","inverse_transform_vector","inverse_transform_vector","is_convertible","is_finite","is_finite","is_finite","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_infinite","is_nan","is_normal","is_one","is_sign_negative","is_sign_positive","is_zero","is_zero","l1_norm","lanes","lanes","lanes","lanes","lanes","linalg","ln","ln","ln_10","ln_1p","ln_1p","ln_2","log","log","log10","log10","log10_e","log2","log2","log2_e","map_lanes","max","max","max_value","min","min","min_value","modulus","modulus","modulus_squared","modulus_squared","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","neg","neg","new","none","norm","norm","norm1","norm1","norm_sqr","norm_squared","norm_squared","one","one","one","one","one","one","or","partial_clamp","partial_cmp","partial_ge","partial_gt","partial_le","partial_lt","partial_max","partial_min","partial_sort2","pi","powc","powc","powf","powf","powi","powi","powi","powu","product","product","product","product","re","real","real","recip","recip","relative_eq","relative_eq","relative_eq","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","replace","replace","replace","replace","replace","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","round","round","scale","scale","scale","scale_mut","scale_mut","select","select","select","select","select","serialize","set_one","set_zero","signum","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan2","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_clamp","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_copysign","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cosc","simd_cosc","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_coshc","simd_coshc","simd_default_epsilon","simd_e","simd_eq","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_frac_1_pi","simd_frac_2_pi","simd_frac_2_sqrt_pi","simd_frac_pi_2","simd_frac_pi_3","simd_frac_pi_4","simd_frac_pi_6","simd_frac_pi_8","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_ge","simd_gt","simd_horizontal_max","simd_horizontal_min","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_le","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln_10","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_2","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10_e","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2_e","simd_lt","simd_max","simd_min","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_ne","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_pi","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_signum","simd_signum","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sinc","simd_sinc","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinhc","simd_sinhc","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_to_exp","simd_to_exp","simd_to_polar","simd_to_polar","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_two_pi","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","sin","sin","sin_cos","sin_cos","sinc","sinh","sinh","sinh_cosh","sinh_cosh","sinhc","splat","splat","splat","splat","splat","sqrt","sqrt","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","sup","tan","tan","tanh","tanh","to_exp","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_polar","to_string","to_subset","to_subset_unchecked","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","transform_point","transform_point","transform_vector","transform_vector","trunc","trunc","try_convert","try_convert_ref","try_from","try_into","try_sqrt","try_sqrt","two_pi","type_id","ulps_eq","ulps_eq","ulps_eq","unimplemented_or_uninitialized_generic","unscale","unscale","unscale","unscale_mut","unscale_mut","wrap","xor","zero","zero","zero","zip_map_lanes","0","0","ArrayStorage","DMatrix","DMatrixSlice","DMatrixSliceMut","DVector","DVectorSlice","DVectorSliceMut","EuclideanNorm","LpNorm","Matrix","Matrix1","Matrix1x2","Matrix1x3","Matrix1x4","Matrix1x5","Matrix1x6","Matrix1xX","Matrix2","Matrix2x1","Matrix2x3","Matrix2x4","Matrix2x5","Matrix2x6","Matrix2xX","Matrix3","Matrix3x1","Matrix3x2","Matrix3x4","Matrix3x5","Matrix3x6","Matrix3xX","Matrix4","Matrix4x1","Matrix4x2","Matrix4x3","Matrix4x5","Matrix4x6","Matrix4xX","Matrix5","Matrix5x1","Matrix5x2","Matrix5x3","Matrix5x4","Matrix5x6","Matrix5xX","Matrix6","Matrix6x1","Matrix6x2","Matrix6x3","Matrix6x4","Matrix6x5","Matrix6xX","MatrixCross","MatrixMN","MatrixN","MatrixSlice","MatrixSlice1","MatrixSlice1x2","MatrixSlice1x3","MatrixSlice1x4","MatrixSlice1x5","MatrixSlice1x6","MatrixSlice1xX","MatrixSlice2","MatrixSlice2x1","MatrixSlice2x3","MatrixSlice2x4","MatrixSlice2x5","MatrixSlice2x6","MatrixSlice2xX","MatrixSlice3","MatrixSlice3x1","MatrixSlice3x2","MatrixSlice3x4","MatrixSlice3x5","MatrixSlice3x6","MatrixSlice3xX","MatrixSlice4","MatrixSlice4x1","MatrixSlice4x2","MatrixSlice4x3","MatrixSlice4x5","MatrixSlice4x6","MatrixSlice4xX","MatrixSlice5","MatrixSlice5x1","MatrixSlice5x2","MatrixSlice5x3","MatrixSlice5x4","MatrixSlice5x6","MatrixSlice5xX","MatrixSlice6","MatrixSlice6x1","MatrixSlice6x2","MatrixSlice6x3","MatrixSlice6x4","MatrixSlice6x5","MatrixSlice6xX","MatrixSliceMut","MatrixSliceMut1","MatrixSliceMut1x2","MatrixSliceMut1x3","MatrixSliceMut1x4","MatrixSliceMut1x5","MatrixSliceMut1x6","MatrixSliceMut1xX","MatrixSliceMut2","MatrixSliceMut2x1","MatrixSliceMut2x3","MatrixSliceMut2x4","MatrixSliceMut2x5","MatrixSliceMut2x6","MatrixSliceMut2xX","MatrixSliceMut3","MatrixSliceMut3x1","MatrixSliceMut3x2","MatrixSliceMut3x4","MatrixSliceMut3x5","MatrixSliceMut3x6","MatrixSliceMut3xX","MatrixSliceMut4","MatrixSliceMut4x1","MatrixSliceMut4x2","MatrixSliceMut4x3","MatrixSliceMut4x5","MatrixSliceMut4x6","MatrixSliceMut4xX","MatrixSliceMut5","MatrixSliceMut5x1","MatrixSliceMut5x2","MatrixSliceMut5x3","MatrixSliceMut5x4","MatrixSliceMut5x6","MatrixSliceMut5xX","MatrixSliceMut6","MatrixSliceMut6x1","MatrixSliceMut6x2","MatrixSliceMut6x3","MatrixSliceMut6x4","MatrixSliceMut6x5","MatrixSliceMut6xX","MatrixSliceMutMN","MatrixSliceMutN","MatrixSliceMutXx1","MatrixSliceMutXx2","MatrixSliceMutXx3","MatrixSliceMutXx4","MatrixSliceMutXx5","MatrixSliceMutXx6","MatrixSliceXx1","MatrixSliceXx2","MatrixSliceXx3","MatrixSliceXx4","MatrixSliceXx5","MatrixSliceXx6","MatrixSum","MatrixVec","MatrixXx1","MatrixXx2","MatrixXx3","MatrixXx4","MatrixXx5","MatrixXx6","Norm","Norm","Normed","OMatrix","OVector","RowDVector","RowOVector","RowSVector","RowVector","RowVector1","RowVector2","RowVector3","RowVector4","RowVector5","RowVector6","SMatrix","SMatrixSlice","SMatrixSliceMut","SVector","SVectorSlice","SVectorSliceMut","Scalar","Size","SliceRange","SliceStorage","SliceStorageMut","SquareMatrix","UniformNorm","Unit","UnitVector1","UnitVector2","UnitVector3","UnitVector4","UnitVector5","UnitVector6","VecStorage","Vector","Vector1","Vector2","Vector3","Vector4","Vector5","Vector6","VectorN","VectorSlice","VectorSlice1","VectorSlice2","VectorSlice3","VectorSlice4","VectorSlice5","VectorSlice6","VectorSliceMut","VectorSliceMut1","VectorSliceMut2","VectorSliceMut3","VectorSliceMut4","VectorSliceMut5","VectorSliceMut6","VectorSum","a","a","a_axis","a_axis","abs","abs_diff_eq","abs_diff_eq","ad_mul","ad_mul_to","ad_solve_lower_triangular","ad_solve_lower_triangular_mut","ad_solve_lower_triangular_unchecked","ad_solve_lower_triangular_unchecked_mut","ad_solve_upper_triangular","ad_solve_upper_triangular_mut","ad_solve_upper_triangular_unchecked","ad_solve_upper_triangular_unchecked_mut","add","add","add_assign","add_assign","add_scalar","add_scalar_mut","add_to","adjoint","adjoint_mut","adjoint_to","allocator","amax","amin","angle","angle","angle","angle_to","angle_to","append_axisangle_linearized","append_nonuniform_scaling","append_nonuniform_scaling","append_nonuniform_scaling_mut","append_nonuniform_scaling_mut","append_scaling","append_scaling","append_scaling_mut","append_scaling_mut","append_translation","append_translation","append_translation_mut","append_translation_mut","apply","apply_into","apply_metric_distance","apply_norm","argmax","argmax","argmin","argmin","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_mut_slice","as_mut_slice","as_mut_slice","as_mut_slice","as_mut_unchecked","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice","as_vec","as_vec_mut","axcpy","axcpy","axis","axis_angle","axis_angle","axpy","axpy","b","b","b_axis","b_axis","begin","bidiagonalize","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","camax","camin","cap_magnitude","cast","cast","cast","cast","cdpy","cholesky","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_owned","clone_owned","clone_owned","clone_owned","clone_owned","clone_owned","clone_owned_sum","cmpy","col_piv_qr","column","column_iter","column_iter_mut","column_mean","column_mut","column_part","column_part_mut","column_sum","column_variance","columns","columns_generic","columns_generic_mut","columns_generic_with_step","columns_generic_with_step_mut","columns_mut","columns_range","columns_range_mut","columns_range_pair","columns_range_pair_mut","columns_with_step","columns_with_step_mut","complex","complex_eigenvalues","component_div","component_div_assign","component_div_mut","component_mul","component_mul_assign","component_mul_mut","compress_columns","compress_rows","compress_rows_tr","conjugate","conjugate","conjugate","conjugate","conjugate_mut","conjugate_mut","conjugate_mut","conjugate_mut","conjugate_transform_mut","conjugate_transpose","conjugate_transpose_to","constraint","convolve_full","convolve_same","convolve_valid","coordinates","copy_from","copy_from_slice","cos_angle","cross","cross_matrix","cross_matrix","data","default","default","default_allocator","default_epsilon","default_epsilon","default_max_relative","default_max_relative","default_max_ulps","default_max_ulps","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","determinant","diagonal","diagonal","dimension","div","div","div","div_assign","dot","dotc","dual_quaternion","eigenvalues","end","eq","eq","eq","eq","eq","euler_angles","exp","exp","extend","extend","extend","extend","extend","extend","extend","face_towards","face_towards","face_towards","fill","fill_column","fill_diagonal","fill_lower_triangle","fill_lower_triangle_with_upper_triangle","fill_row","fill_upper_triangle","fill_upper_triangle_with_lower_triangle","fill_with_identity","fixed_columns","fixed_columns_mut","fixed_columns_with_step","fixed_columns_with_step_mut","fixed_resize","fixed_rows","fixed_rows_mut","fixed_rows_with_step","fixed_rows_with_step_mut","fixed_slice","fixed_slice_mut","fixed_slice_with_steps","fixed_slice_with_steps_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold_with","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_basis_unchecked","from_basis_unchecked","from_column_slice","from_column_slice","from_column_slice","from_column_slice","from_column_slice","from_column_slice","from_column_slice","from_column_slice","from_column_slice_generic","from_column_slice_generic","from_columns","from_columns","from_complex","from_complex_and_get","from_cos_sin_unchecked","from_data","from_data_statically_unchecked","from_diagonal","from_diagonal","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element_generic","from_diagonal_element_generic","from_element","from_element","from_element","from_element","from_element","from_element","from_element","from_element","from_element_generic","from_element_generic","from_euler_angles","from_euler_angles","from_euler_angles","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn_generic","from_fn_generic","from_homogeneous","from_homogeneous","from_isometry","from_iterator","from_iterator","from_iterator","from_iterator","from_iterator","from_iterator","from_iterator","from_iterator","from_iterator_generic","from_iterator_generic","from_matrix","from_matrix","from_matrix_eps","from_matrix_eps","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal_generic","from_partial_diagonal_generic","from_parts","from_quaternion","from_raw_parts","from_raw_parts","from_ref_unchecked","from_rotation","from_rotation_matrix","from_rotation_matrix","from_row_slice","from_row_slice","from_row_slice","from_row_slice","from_row_slice","from_row_slice","from_row_slice","from_row_slice","from_row_slice_generic","from_row_slice_generic","from_rows","from_rows","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis_eps","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice_generic","from_slice_generic","from_slice_generic","from_slice_generic","from_slice_generic_unchecked","from_slice_generic_unchecked","from_slice_generic_unchecked","from_slice_generic_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides_generic","from_slice_with_strides_generic","from_slice_with_strides_generic","from_slice_with_strides_generic","from_slice_with_strides_generic_unchecked","from_slice_with_strides_generic_unchecked","from_slice_with_strides_generic_unchecked","from_slice_with_strides_generic_unchecked","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_uninitialized_data","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec_generic","from_vec_generic","full_piv_lu","ge","gemm","gemm_ad","gemm_tr","gemv","gemv","gemv_ad","gemv_ad","gemv_symm","gemv_symm","gemv_tr","gemv_tr","generic_slice","generic_slice_mut","generic_slice_with_steps","generic_slice_with_steps_mut","ger","ger_symm","gerc","get","get_mut","get_unchecked","get_unchecked_mut","gt","hash","hash","hash","hegemv","hegemv","hegerc","hermitian_part","hermitian_part","hessenberg","iamax","iamax","iamax_full","iamin","iamin","icamax","icamax","icamax_full","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity_generic","identity_generic","imax","imax","imin","imin","index","index","index","index_mut","index_mut","index_mut","indexing","inf","inf_sup","inlined_clone","inlined_clone","insert_column","insert_columns","insert_columns_generic_uninitialized","insert_fixed_columns","insert_fixed_rows","insert_row","insert_rows","insert_rows_generic_uninitialized","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_owned","into_owned","into_owned","into_owned","into_owned","into_owned","into_owned_sum","inverse","inverse","inverse","inverse_mut","inverse_mut","inverse_mut","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","is","is","is_contiguous","is_contiguous","is_contiguous","is_contiguous","is_contiguous","is_empty","is_empty","is_identity","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_invertible","is_invertible","is_orthogonal","is_special_orthogonal","is_special_orthogonal","is_square","isometry_to","iter","iter","iter_mut","ith","ith","ith_axis","ith_axis","kronecker","le","len","len","lerp","lerp","lerp","lerp","ln","look_at_lh","look_at_lh","look_at_lh","look_at_rh","look_at_rh","look_at_rh","lower_triangle","lp_norm","lt","lu","magnitude","magnitude_squared","map","map_diagonal","map_diagonal","map_with_location","max","mean","mean_of","metric_distance","metric_distance","metric_distance","metric_distance","metric_distance","min","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_to","ncols","ne","ne","neg","neg","neg_mut","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_and_get","new_eps","new_nonuniform_scaling","new_nonuniform_scaling","new_nonuniform_scaling_wrt_point","new_nonuniform_scaling_wrt_point","new_nonuniform_scaling_wrt_point","new_nonuniform_scaling_wrt_point","new_normalize","new_observer_frame","new_observer_frame","new_observer_frames","new_orthographic","new_orthographic","new_perspective","new_perspective","new_rotation","new_rotation","new_rotation","new_rotation","new_rotation_wrt_point","new_rotation_wrt_point","new_scaling","new_scaling","new_translation","new_translation","new_unchecked","new_unchecked","new_unchecked","new_uninitialized","new_uninitialized","new_uninitialized","new_uninitialized","new_uninitialized","new_uninitialized","new_uninitialized","new_uninitialized","new_uninitialized_generic","new_uninitialized_generic","new_with_strides_unchecked","new_with_strides_unchecked","nlerp","nlerp","norm","norm","norm","norm","norm","norm","norm_squared","norm_squared","normalize","normalize_mut","nrows","orthonormal_subspace_basis","orthonormal_subspace_basis","orthonormalize","orthonormalize","partial_cmp","perp","pow","pow_mut","powf","powf","prepend_nonuniform_scaling","prepend_nonuniform_scaling","prepend_nonuniform_scaling_mut","prepend_nonuniform_scaling_mut","prepend_scaling","prepend_scaling","prepend_scaling_mut","prepend_scaling_mut","prepend_translation","prepend_translation","prepend_translation_mut","prepend_translation_mut","pseudo_inverse","ptr","ptr","ptr","ptr","ptr","ptr_mut","ptr_mut","ptr_mut","ptr_mut","push","push","qr","quadform","quadform","quadform_tr","quadform_tr","quadform_tr_with_workspace","quadform_tr_with_workspace","quadform_with_workspace","quadform_with_workspace","quaternion","rank","relative_eq","relative_eq","relative_eq","remove_column","remove_columns","remove_columns_at","remove_columns_generic","remove_fixed_columns","remove_fixed_rows","remove_row","remove_rows","remove_rows_at","remove_rows_generic","renormalize","renormalize_fast","repeat","repeat","repeat","repeat","repeat","repeat","repeat","repeat","repeat_generic","repeat_generic","reshape_generic","reshape_generic","reshape_generic","reshape_generic","reshape_generic","reshape_generic","resize","resize","resize_generic","resize_horizontally","resize_horizontally_mut","resize_horizontally_mut","resize_mut","resize_mut","resize_vertically","resize_vertically_mut","resize_vertically_mut","rotation","rotation_between","rotation_between","rotation_between_axis","rotation_between_axis","rotation_to","rotation_to","row","row_iter","row_iter_mut","row_mean","row_mean_tr","row_mut","row_part","row_part_mut","row_sum","row_sum_tr","row_variance","row_variance_tr","rows","rows_generic","rows_generic_mut","rows_generic_with_step","rows_generic_with_step_mut","rows_mut","rows_range","rows_range_mut","rows_range_pair","rows_range_pair_mut","rows_with_step","rows_with_step_mut","scale","scale_mut","scale_mut","scaled_axis","scaled_axis","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between_axis","scaled_rotation_between_axis","schur","sclerp","select_columns","select_rows","serialize","serialize","serialize","serialize","set_column","set_diagonal","set_magnitude","set_partial_diagonal","set_row","shape","shape","shape","shape","shape","shape","simd_cap_magnitude","simd_clamp","simd_eq","simd_ge","simd_gt","simd_horizontal_max","simd_horizontal_min","simd_le","simd_lt","simd_max","simd_min","simd_ne","simd_try_normalize","simd_try_normalize_mut","sin_angle","singular_values","size","slerp","slerp","slerp","slerp","slerp","slice","slice_mut","slice_range","slice_range_mut","slice_with_steps","slice_with_steps_mut","solve_lower_triangular","solve_lower_triangular_mut","solve_lower_triangular_unchecked","solve_lower_triangular_unchecked_mut","solve_lower_triangular_with_diag_mut","solve_lower_triangular_with_diag_unchecked_mut","solve_upper_triangular","solve_upper_triangular_mut","solve_upper_triangular_unchecked","solve_upper_triangular_unchecked_mut","storage","strides","strides","strides","strides","strides","strides","sub","sub","sub_assign","sub_assign","sub_to","sum","sup","svd","swap","swap_columns","swap_rows","swap_unchecked","sygemv","sygemv","syger","symmetric_eigen","symmetric_eigenvalues","symmetric_part","symmetric_part","symmetric_tridiagonalize","to_euler_angles","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_isometry","to_owned","to_owned","to_owned","to_owned","to_owned","to_rotation_matrix","to_rotation_matrix","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","tr_copy_from","tr_dot","tr_mul","tr_mul_to","tr_solve_lower_triangular","tr_solve_lower_triangular_mut","tr_solve_lower_triangular_unchecked","tr_solve_lower_triangular_unchecked_mut","tr_solve_upper_triangular","tr_solve_upper_triangular_mut","tr_solve_upper_triangular_unchecked","tr_solve_upper_triangular_unchecked_mut","trace","trace","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","translation","transpose","transpose_mut","transpose_to","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_inverse","try_inverse_mut","try_new","try_new_and_get","try_normalize","try_normalize_mut","try_schur","try_sclerp","try_set_magnitude","try_slerp","try_slerp","try_svd","try_symmetric_eigen","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","udu","ulps_eq","ulps_eq","unscale","unscale_mut","unscale_mut","unwrap","upper_triangle","variance","vector_to_matrix_index","vget_unchecked","vget_unchecked","vget_unchecked_mut","vget_unchecked_mut","w","w","w_axis","w_axis","x","x","x_axis","x_axis","xx","xx","xxx","xxx","xxy","xxy","xxz","xxz","xy","xy","xyx","xyx","xyy","xyy","xyz","xyz","xz","xz","xzx","xzx","xzy","xzy","xzz","xzz","y","y","y_axis","y_axis","yx","yx","yxx","yxx","yxy","yxy","yxz","yxz","yy","yy","yyx","yyx","yyy","yyy","yyz","yyz","yz","yz","yzx","yzx","yzy","yzy","yzz","yzz","z","z","z_axis","z_axis","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros_generic","zeros_generic","zip_apply","zip_fold","zip_map","zip_zip_apply","zip_zip_map","zx","zx","zxx","zxx","zxy","zxy","zxz","zxz","zy","zy","zyx","zyx","zyy","zyy","zyz","zyz","zz","zz","zzx","zzx","zzy","zzy","zzz","zzz","Allocator","Buffer","Reallocator","SameShapeAllocator","SameShapeC","SameShapeR","SameShapeVectorAllocator","allocate_from_iterator","allocate_uninitialized","reallocate_copy","AreMultipliable","DimEq","Representative","Representative","Representative","Representative","SameDimension","SameNumberOfColumns","SameNumberOfRows","ShapeConstraint","borrow","borrow_mut","from","from_subset","into","is_in_subset","to_subset","to_subset_unchecked","try_from","try_into","type_id","IJKW","M2x2","M2x3","M2x4","M2x5","M2x6","M3x2","M3x3","M3x4","M3x5","M3x6","M4x2","M4x3","M4x4","M4x5","M4x6","M5x2","M5x3","M5x4","M5x5","M5x6","M6x2","M6x3","M6x4","M6x5","M6x6","X","XY","XYZ","XYZW","XYZWA","XYZWAB","a","a","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","i","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","j","k","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m15","m15","m15","m15","m15","m15","m15","m15","m15","m15","m16","m16","m16","m16","m16","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m25","m25","m25","m25","m25","m25","m25","m25","m25","m25","m26","m26","m26","m26","m26","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m34","m34","m34","m34","m34","m34","m34","m34","m34","m34","m34","m34","m35","m35","m35","m35","m35","m35","m35","m35","m36","m36","m36","m36","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m43","m43","m43","m43","m43","m43","m43","m43","m43","m43","m43","m43","m44","m44","m44","m44","m44","m44","m44","m44","m44","m45","m45","m45","m45","m45","m45","m46","m46","m46","m51","m51","m51","m51","m51","m51","m51","m51","m51","m51","m52","m52","m52","m52","m52","m52","m52","m52","m52","m52","m53","m53","m53","m53","m53","m53","m53","m53","m54","m54","m54","m54","m54","m54","m55","m55","m55","m55","m56","m56","m61","m61","m61","m61","m61","m62","m62","m62","m62","m62","m63","m63","m63","m63","m64","m64","m64","m65","m65","m66","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","w","w","w","w","x","x","x","x","x","x","y","y","y","y","y","z","z","z","z","DefaultAllocator","allocate_from_iterator","allocate_from_iterator","allocate_from_iterator","allocate_uninitialized","allocate_uninitialized","allocate_uninitialized","borrow","borrow_mut","from","from_subset","into","is_in_subset","reallocate_copy","reallocate_copy","reallocate_copy","reallocate_copy","reallocate_copy","reallocate_copy","reallocate_copy","to_subset","to_subset_unchecked","try_from","try_into","type_id","Const","Const","Dim","DimAdd","DimDiff","DimDiv","DimMax","DimMaximum","DimMin","DimMinimum","DimMul","DimName","DimNameAdd","DimNameDiff","DimNameDiv","DimNameMax","DimNameMaximum","DimNameMin","DimNameMinimum","DimNameMul","DimNameProd","DimNameQuot","DimNameSub","DimNameSum","DimProd","DimQuot","DimSub","DimSum","Dynamic","IsDynamic","IsNotStaticOne","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","ToConst","ToTypenum","Typenum","U0","U1","U10","U100","U101","U102","U103","U104","U105","U106","U107","U108","U109","U11","U110","U111","U112","U113","U114","U115","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U13","U14","U15","U16","U17","U18","U19","U2","U20","U21","U22","U23","U24","U25","U26","U27","U28","U29","U3","U30","U31","U32","U33","U34","U35","U36","U37","U38","U39","U4","U40","U41","U42","U43","U44","U45","U46","U47","U48","U49","U5","U50","U51","U52","U53","U54","U55","U56","U57","U58","U59","U6","U60","U61","U62","U63","U64","U65","U66","U67","U68","U69","U7","U70","U71","U72","U73","U74","U75","U76","U77","U78","U79","U8","U80","U81","U82","U83","U84","U85","U86","U87","U88","U89","U9","U90","U91","U92","U93","U94","U95","U96","U97","U98","U99","USIZE","add","add","add","add","add","add","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize","deserialize","dim","dim","div","div","div","div","div","div","eq","eq","fmt","fmt","from","from","from_subset","from_subset","from_usize","from_usize","from_usize","hash","into","into","is","is_in_subset","is_in_subset","max","max","max","max","max","max","min","min","min","min","min","min","mul","mul","mul","mul","mul","mul","name","name","ne","new","serialize","serialize","sub","sub","sub","sub","sub","sub","sub","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","try_to_usize","try_to_usize","try_to_usize","type_id","type_id","value","value","value","MatrixIndex","MatrixIndexMut","Output","OutputMut","ColumnIter","ColumnIterMut","MatrixIter","MatrixIterMut","RowIter","RowIterMut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","count","count","count","count","count","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","CStride","CStride","ContiguousStorage","ContiguousStorageMut","Output","Owned","RStride","RStride","ReshapableStorage","SameShapeStorage","Storage","StorageMut","as_mut_slice","as_slice","clone_owned","get_address_unchecked","get_address_unchecked_linear","get_address_unchecked_linear_mut","get_address_unchecked_mut","get_unchecked","get_unchecked_linear","get_unchecked_linear_mut","get_unchecked_mut","into_owned","is_contiguous","linear_index","ptr","ptr_mut","reshape_generic","shape","strides","swap_unchecked","swap_unchecked_linear","AbstractRotation","Affine2","Affine3","DualQuaternion","Isometry","Isometry2","Isometry3","IsometryMatrix2","IsometryMatrix3","Orthographic3","Perspective3","Point","Point1","Point2","Point3","Point4","Point5","Point6","Projective2","Projective3","Quaternion","Reflection","Representative","Rotation","Rotation2","Rotation3","Similarity","Similarity2","Similarity3","SimilarityMatrix2","SimilarityMatrix3","SubTCategoryOf","SuperTCategoryOf","TAffine","TCategory","TCategoryMul","TGeneral","TProjective","Transform","Transform2","Transform3","Translation","Translation1","Translation2","Translation3","Translation4","Translation5","Translation6","UnitComplex","UnitDualQuaternion","UnitQuaternion","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","acos","acosh","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","angle","angle","angle","angle","angle","angle","angle_to","angle_to","angle_to","angle_to","angle_to","angle_to","append_axisangle_linearized","append_rotation_mut","append_rotation_mut","append_rotation_wrt_center_mut","append_rotation_wrt_center_mut","append_rotation_wrt_point_mut","append_rotation_wrt_point_mut","append_scaling","append_scaling_mut","append_translation_mut","append_translation_mut","apply","as_matrix","as_matrix","as_mut","as_projective","as_projective","as_ref","as_vector","as_vector_mut","asin","asinh","aspect","atan","atanh","axis","axis","axis","axis","axis_angle","axis_angle","axis_angle","axis_angle","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","check_homogeneous_invariants","check_homogeneous_invariants","check_homogeneous_invariants","check_homogeneous_invariants","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_owned","clone_owned","complex","conjugate","conjugate","conjugate","conjugate","conjugate","conjugate_mut","conjugate_mut","conjugate_mut","conjugate_mut","conjugate_mut","coords","coords","cos","cos_angle","cosh","default","default","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dual","dual_quaternion","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","euler_angles","euler_angles","euler_angles","exp","exp","exp_eps","extract","extract","extract","extract","extract","extract","extract","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","face_towards","face_towards","face_towards","face_towards","face_towards","face_towards","face_towards","face_towards","face_towards","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fovy","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_basis_unchecked","from_basis_unchecked","from_basis_unchecked","from_basis_unchecked","from_basis_unchecked","from_basis_unchecked","from_complex","from_complex_and_get","from_coordinates","from_cos_sin_unchecked","from_euler_angles","from_euler_angles","from_euler_angles","from_fov","from_homogeneous","from_imag","from_isometry","from_isometry","from_matrix","from_matrix","from_matrix","from_matrix","from_matrix","from_matrix","from_matrix_eps","from_matrix_eps","from_matrix_eps","from_matrix_eps","from_matrix_eps","from_matrix_eps","from_matrix_unchecked","from_matrix_unchecked","from_matrix_unchecked","from_matrix_unchecked","from_parts","from_parts","from_parts","from_parts","from_polar_decomposition","from_quaternion","from_real","from_real","from_real_and_dual","from_rotation","from_rotation_matrix","from_rotation_matrix","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis_eps","from_scaling","from_slice","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_vector","from_vector","ge","get_unchecked","get_unchecked_mut","gt","half","has_normalizer","has_normalizer","has_normalizer","hash","hash","hash","hash","hash","hash","hash","hash","hash","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","imag","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","inf","inf_sup","inner","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_owned","inv_mul","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","is_empty","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_pure","is_zero","is_zero","isometry","isometry_to","iter","iter_mut","lanes","lanes","lanes","lanes","lanes","lanes","lanes","le","left","left_div","len","lerp","lerp","lerp","lerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","ln","ln","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","lt","magnitude","magnitude_squared","map","matrix","matrix","matrix_mut","matrix_mut","matrix_mut_unchecked","matrix_mut_unchecked","max_value","mean_of","min_value","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_containing_point","new_eps","new_observer_frame","new_observer_frame","new_observer_frame","new_observer_frame","new_observer_frames","new_observer_frames","new_observer_frames","new_observer_frames","new_observer_frames","new_uninitialized","nlerp","nlerp","norm","norm","norm","norm_squared","norm_squared","norm_squared","normalize","normalize","normalize_mut","normalize_mut","one","one","one","one","one","one","one","origin","outer","partial_cmp","polar_decomposition","powf","powf","powf","powf","powf","powf","powf","prepend_scaling","prepend_scaling_mut","project","project_point","project_point","project_vector","project_vector","pure","quaternion","real","reflect","reflect_rows","reflect_rows_with_sign","reflect_with_sign","reject","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","renormalize","renormalize","renormalize","renormalize","replace","replace","replace","replace","replace","replace","replace","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","right","right_div","rotation","rotation","rotation","rotation","rotation","rotation","rotation","rotation","rotation","rotation","rotation_between","rotation_between","rotation_between","rotation_between","rotation_between","rotation_between","rotation_between_axis","rotation_between_axis","rotation_to","rotation_to","rotation_to","rotation_to","rotation_to","rotation_to","rotation_wrt_point","rotation_wrt_point","scalar","scale_mut","scale_mut","scaled_axis","scaled_axis","scaled_axis","scaled_axis","scaled_axis","scaled_axis","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between_axis","scaled_rotation_between_axis","scaling","sclerp","select","select","select","select","select","select","select","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set_aspect","set_bottom","set_bottom_and_top","set_category","set_fovy","set_left","set_left_and_right","set_right","set_scaling","set_top","set_zfar","set_zfar","set_znear","set_znear","set_znear_and_zfar","set_znear_and_zfar","simd_clamp","simd_eq","simd_ge","simd_gt","simd_horizontal_max","simd_horizontal_min","simd_le","simd_lt","simd_max","simd_min","simd_ne","simd_try_inverse","sin","sin_angle","sinh","slerp","slerp","slerp","slerp","slerp","slerp","splat","splat","splat","splat","splat","splat","splat","sqrt","squared","stride","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sup","swap_unchecked","tan","tanh","to_euler_angles","to_euler_angles","to_euler_angles","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_isometry","to_matrix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_projective","to_projective","to_rotation_matrix","to_rotation_matrix","to_string","to_string","to_string","to_string","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","top","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","translation","translation","translation","translation","translation","translation","translation","translation","translation","translation","transpose","transpose_mut","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_inverse","try_inverse","try_inverse","try_inverse_mut","try_inverse_mut","try_inverse_mut","try_lerp_slerp","try_lerp_slerp","try_lerp_slerp","try_lerp_slerp","try_sclerp","try_slerp","try_slerp","try_slerp","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","unproject_point","unproject_point","unscale_mut","unscale_mut","unwrap","unwrap","unwrap","unwrap","vector","vector","vector_mut","xx","xxx","xxy","xxz","xy","xyx","xyy","xyz","xz","xzx","xzy","xzz","yx","yxx","yxy","yxz","yy","yyx","yyy","yyz","yz","yzx","yzy","yzz","zero","zero","zfar","zfar","znear","znear","zx","zxx","zxy","zxz","zy","zyx","zyy","zyz","zz","zzx","zzy","zzz","Bidiagonal","Cholesky","ColPivQR","FullPivLU","Hessenberg","LU","PermutationSequence","QR","SVD","Schur","SymmetricEigen","SymmetricTridiagonal","UDU","append_permutation","balancing","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","complex_eigenvalues","d","d","d_matrix","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","determinant","determinant","determinant","determinant","determinant","diagonal","diagonal","eigenvalues","eigenvalues","eigenvectors","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","givens","h","householder","identity","identity","identity_generic","insert_column","into","into","into","into","into","into","into","into","into","into","into","into","into","inv_permute_columns","inv_permute_rows","inverse","is_empty","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_invertible","is_invertible","is_invertible","is_invertible","is_upper_diagonal","l","l","l","l_dirty","l_unpack","len","new","new","new","new","new","new","new","new","new","new","new","new","new_unchecked","new_with_workspace","off_diagonal","off_diagonal","p","p","p","permute_columns","permute_rows","pseudo_inverse","q","q","q","q","q","q_tr_mul","q_tr_mul","r","r","rank","rank_one_update","recompose","recompose","recompose","remove_column","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","singular_values","solve","solve","solve","solve","solve","solve","solve_mut","solve_mut","solve_mut","solve_mut","solve_mut","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_inverse","try_inverse","try_inverse","try_inverse","try_inverse_to","try_invert_to","try_new","try_new","try_new","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u","u","u","u","u","unpack","unpack","unpack","unpack","unpack","unpack","unpack","unpack","unpack","unpack_dirty","unpack_h","unpack_r","unpack_r","unpack_tridiagonal","v_t","v_t","wilkinson_shift","balance_parlett_reinsch","unbalance","convolve_full","convolve_same","convolve_valid","determinant","exp","GivensRotation","borrow","borrow_mut","c","cancel_x","cancel_y","clone","clone_into","fmt","from","from_subset","identity","into","inverse","is_in_subset","new","new_unchecked","rotate","rotate_rows","s","to_owned","to_subset","to_subset_unchecked","try_from","try_into","try_new","type_id","try_inverse","try_inverse_mut","complex_eigenvalues","eigenvalues","ad_solve_lower_triangular","ad_solve_lower_triangular_mut","ad_solve_lower_triangular_unchecked","ad_solve_lower_triangular_unchecked_mut","ad_solve_upper_triangular","ad_solve_upper_triangular_mut","ad_solve_upper_triangular_unchecked","ad_solve_upper_triangular_unchecked_mut","solve_lower_triangular","solve_lower_triangular_mut","solve_lower_triangular_unchecked","solve_lower_triangular_unchecked_mut","solve_lower_triangular_with_diag_mut","solve_lower_triangular_with_diag_unchecked_mut","solve_upper_triangular","solve_upper_triangular_mut","solve_upper_triangular_unchecked","solve_upper_triangular_unchecked_mut","tr_solve_lower_triangular","tr_solve_lower_triangular_mut","tr_solve_lower_triangular_unchecked","tr_solve_lower_triangular_unchecked_mut","tr_solve_upper_triangular","tr_solve_upper_triangular_mut","tr_solve_upper_triangular_unchecked","tr_solve_upper_triangular_unchecked_mut","symmetric_eigenvalues"],"q":["nalgebranalgebra::basenalgebra::base::allocator","","","","","","","","","","nalgebra::base::constraint","","","","","","","","","","","","","","","","","","","","","nalgebra::base::coordinatesnalgebra::base::default_allocator","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base::dimensionnalgebra::base::indexing","","","","nalgebra::base::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base::storage","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::geometrynalgebra::linalgnalgebra::linalg::balancing","","nalgebra::linalg::convolution","","","nalgebra::linalg::determinant","nalgebra::linalg::exp","nalgebra::linalg::givens","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::linalg::inverse","","nalgebra::linalg::schur","","nalgebra::linalg::solve","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::linalg::symmetric_eigen"],"d":["Trait <strong>alias</strong> for <code>Add</code> and <code>AddAssign</code> with result of type <code>Self</code>…","Trait <strong>alias</strong> for <code>Div</code> and <code>DivAssign</code> with result of type <code>Self</code>…","Trait <strong>alias</strong> for <code>Mul</code> and <code>MulAssign</code> with result of type <code>Self</code>…","Trait <strong>alias</strong> for <code>Sub</code> and <code>SubAssign</code> with result of type <code>Self</code>…","A complex number in Cartesian form.","Trait shared by all complex fields and its subfields …","The type of the elements of each lane of this SIMD value.","Trait implemented by fields, i.e., complex numbers and …","Trait shared by all reals.","","Lane-wise generalization of <code>bool</code> for SIMD booleans.","Type of the result of comparing two SIMD values like <code>self</code>.","Lane-wise generalisation of <code>ComplexField</code> for SIMD …","Lane-wise generalization of the standard <code>PartialOrd</code> for …","Lanewise generalization of <code>RealField</code> for SIMD reals.","Type of the coefficients of a complex number.","Base trait for every SIMD types.","The absolute value of <code>a</code>.","The absolute value of this complex number: …","","","","","","Computes the principal value of the inverse cosine of <code>self</code>…","","Computes the principal value of inverse hyperbolic cosine …","","","","","","","","","Are all vector lanes true?","Lane-wise bitwise and of the vector elements.","Is any vector lane true?","The argument of this complex number.","","","","Computes the principal value of the inverse sine of <code>self</code>.","","Computes the principal value of inverse hyperbolic sine …","","Computes the principal value of the inverse tangent of …","","","Computes the principal value of inverse hyperbolic …","[Reexported at the root of this crate.] Data structures …","A bit mask representing the boolean state of each lanes …","","","","","","","The center of two points.","Returns a reference to the input value clamped to the …","","","","Returns the complex conjugate. i.e. <code>re - i im</code>","","","Converts an object from one type to an equivalent or more …","Converts an object from one type to an equivalent or more …","Use with care! Same as <code>try_convert</code> but without any …","Use with care! Same as <code>try_convert</code> but without any …","Copies the sign of <code>self</code> to <code>to</code>.","","Computes the cosine of <code>self</code>.","Cardinal cos","","Computes the hyperbolic cosine of <code>self</code>.","","","","","","","","","","","","","","","The distance between two points.","The squared distance between two points.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","","","","Extracts the i-th lane of <code>self</code>.","","","","","Extracts the i-th lane of <code>self</code> without bound-checking.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds a pure-real complex number from the given value.","","Builds a pure-real complex number from the given value.","","","","","","","","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","[Reexported at the root of this crate.] Data structures …","","Computes (self.conjugate() * self + other.conjugate() * …","","Returns imaginary unit","","","Merges the value of <code>if_value()</code> and <code>else_value()</code> depending …","Merges the value of <code>if_value()</code> and <code>else_if.1()</code> and …","Merges the value of <code>if_value()</code> and <code>else_if.1()</code> and …","Imaginary portion of the complex number","The imaginary part of this complex number.","","Returns the infimum of <code>a</code> and <code>b</code>.","Returns simultaneously the infimum and supremum of <code>a</code> and <code>b</code>…","","Returns <code>1/self</code>","","","","","","","","","","Indicates if <code>try_convert</code> will succeed without actually …","","","Checks if the given complex number is finite","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if the given complex number is infinite","Checks if the given complex number is NaN","Checks if the given complex number is normal","","Is the sign of this real number negative?","Is the sign of this real number positive?","","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance…","The number of lanes of this SIMD value.","","","","","[Reexported at the root of this crate.] Factorization of …","","Computes the principal value of natural logarithm of <code>self</code>.","","","","","","Returns the logarithm of <code>self</code> with respect to an …","","","","","","","Applies a function to each lane of <code>self</code>.","Same as <code>cmp::max</code>.","","","Same as <code>cmp::min</code>.","","","The modulus of this complex number.","","The squared modulus of this complex number.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new Complex","Are all vector lanes false?","","","The sum of the absolute value of this complex number’s …","","Returns the square of the norm (since <code>T</code> doesn’t …","","","Gets the multiplicative identity element.","","","","","","Lane-wise bitwise or of the vector elements.","Clamp <code>value</code> between <code>min</code> and <code>max</code>. Returns <code>None</code> if <code>value</code> is …","Compare <code>a</code> and <code>b</code> using a partial ordering relation.","Returns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a >= b</code>.","Returns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a > b</code>.","Returns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a <= b</code>.","Returns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a < b</code>.","Return the maximum of <code>a</code> and <code>b</code> if they are comparable.","Return the minimum of <code>a</code> and <code>b</code> if they are comparable.","Sorts two values in increasing order using a partial …","","","Raises <code>self</code> to a complex power.","","Raises <code>self</code> to a floating point power.","","Raises <code>self</code> to a signed integer power.","","Raises <code>self</code> to an unsigned integer power.","","","","","Real portion of the complex number","The real part of this complex number.","","","","","","","","","","","","","","","Replaces the i-th lane of <code>self</code> by <code>val</code>.","","","","","Replaces the i-th lane of <code>self</code> by <code>val</code> without …","","","","","","","Multiplies this complex number by <code>factor</code>.","","Multiplies <code>self</code> by the scalar <code>t</code>.","","","Merges <code>self</code> and <code>other</code> depending on the lanes of <code>cond</code>.","","","","","","","","The exponential part of this complex number: …","The absolute value of this complex number: …","","","","","","","","","","Computes the principal value of the inverse cosine of <code>self</code>…","Computes the principal value of the inverse cosine of <code>self</code>…","Computes the principal value of the inverse cosine of <code>self</code>…","","Computes the principal value of the inverse cosine of <code>self</code>…","Computes the principal value of the inverse cosine of <code>self</code>…","Computes the principal value of the inverse cosine of <code>self</code>…","Computes the principal value of the inverse cosine of <code>self</code>…","","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","","Computes the principal value of inverse hyperbolic cosine …","The argument of this complex number.","","","","","","","","","","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","","Computes the principal value of inverse hyperbolic sine …","Computes the principal value of inverse hyperbolic sine …","Computes the principal value of inverse hyperbolic sine …","Computes the principal value of inverse hyperbolic sine …","","Computes the principal value of inverse hyperbolic sine …","Computes the principal value of inverse hyperbolic sine …","Computes the principal value of inverse hyperbolic sine …","","Computes the principal value of the inverse tangent of …","Computes the principal value of the inverse tangent of …","Computes the principal value of the inverse tangent of …","","Computes the principal value of the inverse tangent of …","Computes the principal value of the inverse tangent of …","Computes the principal value of the inverse tangent of …","Computes the principal value of the inverse tangent of …","","","Computes the principal value of inverse hyperbolic …","Computes the principal value of inverse hyperbolic …","Computes the principal value of inverse hyperbolic …","Computes the principal value of inverse hyperbolic …","","Computes the principal value of inverse hyperbolic …","Computes the principal value of inverse hyperbolic …","Computes the principal value of inverse hyperbolic …","","","","","","","","","","","","","","","","","","","Clamps each lane of <code>self</code> between the corresponding lane …","","","","","","","","","","Copies the sign of <code>sign</code> to <code>self</code>.","","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","","Cardinal cos","","","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","","","","","","Lanewise <em>equal</em> <code>==</code> comparison.","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>greater or equal</em> <code>>=</code> comparison.","Lanewise <em>greater than</em> <code>></code> comparison.","The max value among all lanes of <code>self</code>.","The min value among all lanes of <code>self</code>.","Computes the product of all the lanes of <code>self</code>.","","","","","","","","","Computes the sum of all the lanes of <code>self</code>.","","","","","","","","","Computes (self.conjugate() * self + other.conjugate() * …","","","","","","","","","The imaginary part of this complex number.","","","","","","","","","Lanewise <em>less or equal</em> <code><=</code> comparison.","","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","","","","","","","","","","","","","","Returns the logarithm of <code>self</code> with respect to an …","Returns the logarithm of <code>self</code> with respect to an …","Returns the logarithm of <code>self</code> with respect to an …","Returns the logarithm of <code>self</code> with respect to an …","Returns the logarithm of <code>self</code> with respect to an …","","Returns the logarithm of <code>self</code> with respect to an …","Returns the logarithm of <code>self</code> with respect to an …","","","","","","","","","","","","","","","","","","","","","Lanewise <em>less than</em> <code><</code> comparison.","Lanewise max value.","Lanewise min value.","The modulus of this complex number.","","","","","","","","","The squared modulus of this complex number.","","","","","","","","","","","","","","","","","","Lanewise <em>not equal</em> <code>!=</code> comparison.","The sum of the absolute value of this complex number’s …","","","","","","","","","","","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","","","","","","","","","","","The real part of this complex number.","","","","","","","","","","","","","","","","","","","","","","","","","","","Multiplies this complex number by <code>factor</code>.","","","","","","","","","The exponential part of this complex number: …","","","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","","","","","","","","","","Cardinal sine","","","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","","","","","","","","","","","","","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","The exponential form of this complex number: (modulus, …","","The polar form of this complex number: (modulus, arg)","","","","","","","","","","","","Divides this complex number by <code>factor</code>.","","","","","","","","","","Computes the sine of <code>self</code>.","","","Cardinal sine","","Computes the hyperbolic sine of <code>self</code>.","","","","Initializes an SIMD value with each lanes set to <code>val</code>.","","","","","","Computes the principal value of the square root of <code>self</code>.","","","","","","","","","","Example","","Example","","","Returns the supremum of <code>a</code> and <code>b</code>.","","Computes the tangent of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","The exponential form of this complex number: (modulus, …","","","","","","","","","","The polar form of this complex number: (modulus, arg)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to convert an object to a more specific one.","Attempts to convert an object to a more specific one.","","","","","","","","","","When “no_unsound_assume_init” is enabled, expands to …","Divides this complex number by <code>factor</code>.","Divides <code>self</code> by the scalar <code>t</code>.","","","","Wraps <code>val</code> into the range <code>[min, max]</code> using modular …","Lane-wise bitwise xor of the vector elements.","Gets the additive identity element.","","","Applies a function to each lane of <code>self</code> paired with the …","","","A array-based statically sized matrix data storage.","A dynamically sized column-major matrix.","A column-major matrix slice dynamic numbers of rows and …","A column-major matrix slice dynamic numbers of rows and …","A dynamically sized column vector.","A column vector slice dynamic numbers of rows and columns.","A column vector slice dynamic numbers of rows and columns.","Euclidean norm.","Lp norm.","The most generic column-major matrix (and vector) type.","A stack-allocated, column-major, 1x1 square matrix.","A stack-allocated, column-major, 1x2 matrix.","A stack-allocated, column-major, 1x3 matrix.","A stack-allocated, column-major, 1x4 matrix.","A stack-allocated, column-major, 1x5 matrix.","A stack-allocated, column-major, 1x6 matrix.","A heap-allocated, row-major, matrix with 1 rows and a …","A stack-allocated, column-major, 2x2 square matrix.","A stack-allocated, column-major, 2x1 matrix.","A stack-allocated, column-major, 2x3 matrix.","A stack-allocated, column-major, 2x4 matrix.","A stack-allocated, column-major, 2x5 matrix.","A stack-allocated, column-major, 2x6 matrix.","A heap-allocated, row-major, matrix with 2 rows and a …","A stack-allocated, column-major, 3x3 square matrix.","A stack-allocated, column-major, 3x1 matrix.","A stack-allocated, column-major, 3x2 matrix.","A stack-allocated, column-major, 3x4 matrix.","A stack-allocated, column-major, 3x5 matrix.","A stack-allocated, column-major, 3x6 matrix.","A heap-allocated, row-major, matrix with 3 rows and a …","A stack-allocated, column-major, 4x4 square matrix.","A stack-allocated, column-major, 4x1 matrix.","A stack-allocated, column-major, 4x2 matrix.","A stack-allocated, column-major, 4x3 matrix.","A stack-allocated, column-major, 4x5 matrix.","A stack-allocated, column-major, 4x6 matrix.","A heap-allocated, row-major, matrix with 4 rows and a …","A stack-allocated, column-major, 5x5 square matrix.","A stack-allocated, column-major, 5x1 matrix.","A stack-allocated, column-major, 5x2 matrix.","A stack-allocated, column-major, 5x3 matrix.","A stack-allocated, column-major, 5x4 matrix.","A stack-allocated, column-major, 5x6 matrix.","A heap-allocated, row-major, matrix with 5 rows and a …","A stack-allocated, column-major, 6x6 square matrix.","A stack-allocated, column-major, 6x1 matrix.","A stack-allocated, column-major, 6x2 matrix.","A stack-allocated, column-major, 6x3 matrix.","A stack-allocated, column-major, 6x4 matrix.","A stack-allocated, column-major, 6x5 matrix.","A heap-allocated, row-major, matrix with 6 rows and a …","The type of the result of a matrix cross product.","An owned matrix column-major matrix with <code>R</code> rows and <code>C</code> …","An owned matrix column-major matrix with <code>D</code> columns.","A matrix slice.","A column-major 1x1 matrix slice.","A column-major 1x2 matrix slice.","A column-major 1x3 matrix slice.","A column-major 1x4 matrix slice.","A column-major 1x5 matrix slice.","A column-major 1x6 matrix slice.","A column-major matrix slice with 1 row and a number of …","A column-major 2x2 matrix slice.","A column-major 2x1 matrix slice.","A column-major 2x3 matrix slice.","A column-major 2x4 matrix slice.","A column-major 2x5 matrix slice.","A column-major 2x6 matrix slice.","A column-major matrix slice with 2 rows and a number of …","A column-major 3x3 matrix slice.","A column-major 3x1 matrix slice.","A column-major 3x2 matrix slice.","A column-major 3x4 matrix slice.","A column-major 3x5 matrix slice.","A column-major 3x6 matrix slice.","A column-major matrix slice with 3 rows and a number of …","A column-major 4x4 matrix slice.","A column-major 4x1 matrix slice.","A column-major 4x2 matrix slice.","A column-major 4x3 matrix slice.","A column-major 4x5 matrix slice.","A column-major 4x6 matrix slice.","A column-major matrix slice with 4 rows and a number of …","A column-major 5x5 matrix slice.","A column-major 5x1 matrix slice.","A column-major 5x2 matrix slice.","A column-major 5x3 matrix slice.","A column-major 5x4 matrix slice.","A column-major 5x6 matrix slice.","A column-major matrix slice with 5 rows and a number of …","A column-major 6x6 matrix slice.","A column-major 6x1 matrix slice.","A column-major 6x2 matrix slice.","A column-major 6x3 matrix slice.","A column-major 6x4 matrix slice.","A column-major 6x5 matrix slice.","A column-major matrix slice with 6 rows and a number of …","A mutable matrix slice.","A column-major 1x1 matrix slice.","A column-major 1x2 matrix slice.","A column-major 1x3 matrix slice.","A column-major 1x4 matrix slice.","A column-major 1x5 matrix slice.","A column-major 1x6 matrix slice.","A column-major matrix slice with 1 row and a number of …","A column-major 2x2 matrix slice.","A column-major 2x1 matrix slice.","A column-major 2x3 matrix slice.","A column-major 2x4 matrix slice.","A column-major 2x5 matrix slice.","A column-major 2x6 matrix slice.","A column-major matrix slice with 2 rows and a number of …","A column-major 3x3 matrix slice.","A column-major 3x1 matrix slice.","A column-major 3x2 matrix slice.","A column-major 3x4 matrix slice.","A column-major 3x5 matrix slice.","A column-major 3x6 matrix slice.","A column-major matrix slice with 3 rows and a number of …","A column-major 4x4 matrix slice.","A column-major 4x1 matrix slice.","A column-major 4x2 matrix slice.","A column-major 4x3 matrix slice.","A column-major 4x5 matrix slice.","A column-major 4x6 matrix slice.","A column-major matrix slice with 4 rows and a number of …","A column-major 5x5 matrix slice.","A column-major 5x1 matrix slice.","A column-major 5x2 matrix slice.","A column-major 5x3 matrix slice.","A column-major 5x4 matrix slice.","A column-major 5x6 matrix slice.","A column-major matrix slice with 5 rows and a number of …","A column-major 6x6 matrix slice.","A column-major 6x1 matrix slice.","A column-major 6x2 matrix slice.","A column-major 6x3 matrix slice.","A column-major 6x4 matrix slice.","A column-major 6x5 matrix slice.","A column-major matrix slice with 6 rows and a number of …","A column-major matrix slice with <code>R</code> rows and <code>C</code> columns.","A column-major matrix slice with <code>D</code> rows and columns.","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","The type of the result of a matrix sum.","Renamed to [VecStorage].","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A trait for abstract matrix norms.","The type of the norm.","Trait implemented by entities scan be be normalized and …","An owned matrix column-major matrix with <code>R</code> rows and <code>C</code> …","An owned D-dimensional column vector.","A dynamically sized row vector.","An owned D-dimensional row vector.","A statically sized D-dimensional row vector.","A matrix with one row and <code>D</code> columns .","A stack-allocated, 1-dimensional row vector.","A stack-allocated, 2-dimensional row vector.","A stack-allocated, 3-dimensional row vector.","A stack-allocated, 4-dimensional row vector.","A stack-allocated, 5-dimensional row vector.","A stack-allocated, 6-dimensional row vector.","A statically sized column-major matrix with <code>R</code> rows and <code>C</code> …","A column-major matrix slice with dimensions known at …","A column-major matrix slice with dimensions known at …","A statically sized D-dimensional column vector.","A column vector slice with dimensions known at …","A column vector slice with dimensions known at …","The basic scalar type for all structures of <code>nalgebra</code>.","Type of the range size. May be a type-level integer.","A range with a size that may be known at compile-time.","A matrix data storage for a matrix slice. Only contains …","A mutable matrix data storage for mutable matrix slice. …","A square matrix.","L-infinite norm aka. Chebytchev norm aka. uniform norm …","A wrapper that ensures the underlying algebraic entity …","A stack-allocated, 1-dimensional unit vector.","A stack-allocated, 2-dimensional unit vector.","A stack-allocated, 3-dimensional unit vector.","A stack-allocated, 4-dimensional unit vector.","A stack-allocated, 5-dimensional unit vector.","A stack-allocated, 6-dimensional unit vector.","A Vec-based matrix data storage. It may be …","A matrix with one column and <code>D</code> rows.","A stack-allocated, 1-dimensional column vector.","A stack-allocated, 2-dimensional column vector.","A stack-allocated, 3-dimensional column vector.","A stack-allocated, 4-dimensional column vector.","A stack-allocated, 5-dimensional column vector.","A stack-allocated, 6-dimensional column vector.","An owned matrix column-major matrix with <code>R</code> rows and <code>C</code> …","A column vector slice with dimensions known at …","A 1D column vector slice.","A 2D column vector slice.","A 3D column vector slice.","A 4D column vector slice.","A 5D column vector slice.","A 6D column vector slice.","A column vector slice with dimensions known at …","A 1D column vector slice.","A 2D column vector slice.","A 3D column vector slice.","A 4D column vector slice.","A 5D column vector slice.","A 6D column vector slice.","The type of the result of a matrix sum.","The column vector with a 1 as its fifth component, and …","The column vector with a 1 as its fifth component, and …","The unit column vector with a 1 as its fifth component, …","The unit column vector with a 1 as its fifth component, …","Computes the component-wise absolute value.","","","Equivalent to <code>self.adjoint() * rhs</code>.","Equivalent to <code>self.adjoint() * rhs</code> but stores the result …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","","","","","Adds a scalar to <code>self</code>.","Adds a scalar to <code>self</code> in-place.","Equivalent to <code>self + rhs</code> but stores the result into <code>out</code> …","The adjoint (aka. conjugate-transpose) of <code>self</code>.","Sets <code>self</code> to its adjoint (aka. conjugate-transpose).","Takes the adjoint (aka. conjugate-transpose) of <code>self</code> and …","Abstract definition of a matrix data storage allocator.","Returns the absolute value of the component with the …","Returns the absolute value of the component with the …","The smallest angle between two vectors.","The rotation angle in <code>]-pi; pi]</code> of this unit complex …","The rotation angle in [0; pi] of this unit quaternion.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","Appends to <code>self</code> a rotation given in the axis-angle form, …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to <code>self</code> followed by a …","Computes in-place the transformation equal to <code>self</code> …","Computes in-place the transformation equal to <code>self</code> …","Computes the transformation equal to <code>self</code> followed by an …","Computes the transformation equal to <code>self</code> followed by an …","Computes in-place the transformation equal to <code>self</code> …","Computes in-place the transformation equal to <code>self</code> …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to <code>self</code> followed by a …","Replaces each component of <code>self</code> by the result of a …","Returns <code>self</code> with each of its components replaced by the …","Uses the metric induced by the given <code>norm</code> to compute the …","Uses the given <code>norm</code> to compute the norm of <code>self</code>.","Computes the index and value of the vector component with …","Computes the index and value of the vector component with …","Computes the index and value of the vector component with …","Computes the index and value of the vector component with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a mutable pointer to the start of the matrix.","","Extracts a mutable slice containing the entire matrix …","","","","Returns a mutable reference to the underlying value. This …","Returns a pointer to the start of the matrix.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts a slice containing the entire matrix entries …","","","","","The underlying data storage.","The underlying mutable data storage.","Computes <code>self = a * x * c + b * self</code>.","Computes <code>self = a * x * c + b * self</code>.","The rotation axis of this unit quaternion or <code>None</code> if the …","The rotation axis and angle in ]0, pi] of this complex …","The rotation axis and angle in ]0, pi] of this unit …","Computes <code>self = a * x + b * self</code>.","Computes <code>self = a * x + b * self</code>.","The column vector with a 1 as its sixth component, and …","The column vector with a 1 as its sixth component, and …","The unit column vector with a 1 as its sixth component, …","The unit column vector with a 1 as its sixth component, …","The start index of the range.","Computes the bidiagonalization using householder …","","","","","","","","","","","","","","","","","","","Returns the the 1-norm of the complex component with the …","Returns the the 1-norm of the complex component with the …","Returns a new vector with the same magnitude as <code>self</code> …","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Computes componentwise …","Attempts to compute the Cholesky decomposition of this …","","","","","","","","","","","","Clones this matrix to one that owns its data.","","","","","Clones this matrix into one that owns its data. The …","Computes componentwise …","Computes the QR decomposition (with column pivoting) of …","Returns a slice containing the i-th column of this matrix.","Iterate through the columns of this matrix.","Mutably iterates through this matrix columns.","The mean of all the columns of this matrix.","Returns a slice containing the i-th column of this matrix.","Returns a slice containing the <code>n</code> first elements of the …","Returns a slice containing the <code>n</code> first elements of the …","The sum of all the columns of this matrix.","The variance of all the columns of this matrix.","Extracts from this matrix a set of consecutive columns.","Extracts from this matrix <code>ncols</code> columns. The number of …","Extracts from this matrix <code>ncols</code> columns. The number of …","Extracts from this matrix <code>ncols</code> columns skipping <code>step</code> …","Extracts from this matrix <code>ncols</code> columns skipping <code>step</code> …","Extracts from this matrix a set of consecutive columns.","Slice containing all the columns indexed by the range <code>rows</code>…","Slice containing all the columns indexed by the range <code>cols</code>…","Splits this NxM matrix into two parts delimited by two …","Splits this NxM matrix into two parts delimited by two …","Extracts from this matrix a set of consecutive columns …","Extracts from this matrix a set of consecutive columns …","The underlying complex number.","Computes the eigenvalues of this matrix.","Componentwise matrix or vector division.","Inplace componentwise matrix or vector division.","Inplace componentwise matrix or vector division.","Componentwise matrix or vector multiplication.","Inplace componentwise matrix or vector multiplication.","Inplace componentwise matrix or vector multiplication.","Returns a column vector resulting from the folding of <code>f</code> …","Returns a row vector where each element is the result of …","Returns a column vector where each element is the result …","The conjugate of <code>self</code>.","Compute the conjugate of this unit quaternion.","Compute the conjugate of this unit quaternion.","Compute the conjugate of this unit complex number.","The conjugate of the complex matrix <code>self</code> computed …","Compute the conjugate of this unit quaternion in-place.","Compute the conjugate of this unit quaternion in-place.","Compute in-place the conjugate of this unit complex …","Sets <code>self</code> to its adjoint.","The conjugate transposition of <code>self</code>.","Takes the conjugate and transposes <code>self</code> and store the …","Compatibility constraints between matrix shapes, e.g., …","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Structures to which matrices and vector can be …","Fills this matrix with the content of another one. Both …","Fills this matrix with the content of a slice. Both must …","The cosine of the rotation angle.","The 3D cross product between two vectors.","Computes the matrix <code>M</code> such that for all vector <code>v</code> we have …","Computes the matrix <code>M</code> such that for all vector <code>v</code> we have …","The data storage that contains all the matrix components. …","","","The default matrix data storage allocator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the matrix determinant.","The diagonal of this matrix.","The diagonal of this matrix.","Traits and tags for identifying the dimension of all …","","","","","The dot product between two vectors or matrices (seen as …","The conjugate-linear dot product between two vectors or …","The underlying dual quaternion.","Computes the eigenvalues of this matrix.","The index immediately after the last index inside of the …","","","Tests whether <code>self</code> and <code>rhs</code> are exactly equal.","","","Retrieves the euler angles corresponding to this unit …","Computes exponential of this matrix","Compute the exponential of a quaternion.","Extend the number of columns of the <code>Matrix</code> with elements …","Extend the number of rows of a <code>Vector</code> with elements from …","Extends the number of columns of a <code>Matrix</code> with <code>Vector</code>s …","Extends the number of columns of the <code>VecStorage</code> with …","Extends the number of columns of the <code>VecStorage</code> with …","Extends the number of columns of the <code>VecStorage</code> with …","Extends the number of rows of the <code>VecStorage</code> with elements…","Creates an isometry that corresponds to the local frame …","Creates an isometry that corresponds to the local frame …","Creates an unit quaternion that corresponds to the local …","Sets all the elements of this matrix to <code>val</code>.","Sets all the elements of the selected column to <code>val</code>.","Sets all the diagonal elements of this matrix to <code>val</code>.","Sets all the elements of the lower-triangular part of …","Copies the upper-triangle of this matrix to its …","Sets all the elements of the selected row to <code>val</code>.","Sets all the elements of the lower-triangular part of …","Copies the upper-triangle of this matrix to its …","Fills <code>self</code> with the identity matrix.","Extracts a compile-time number of consecutive columns …","Extracts a compile-time number of consecutive columns …","Extracts from this matrix a compile-time number of …","Extracts from this matrix a compile-time number of …","Resizes this matrix so that it contains <code>R2::value()</code> rows …","Extracts a compile-time number of consecutive rows from …","Extracts a compile-time number of consecutive rows from …","Extracts from this matrix a compile-time number of rows …","Extracts from this matrix a compile-time number of rows …","Slices this matrix starting at its component <code>(irow, icol)</code> …","Slices this matrix starting at its component <code>(irow, icol)</code> …","Slices this matrix starting at its component …","Slices this matrix starting at its component …","","","","","","","","","","","","","","","Folds a function <code>f</code> on each entry of <code>self</code>.","Similar to <code>self.iter().fold(init, f)</code> except that <code>init</code> is …","","","","","","","","","","","","","","","","","","","","Builds the unit complex number corresponding to the …","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a 3D homogeneous rotation matrix from an axis and …","Creates a new quaternion from a unit vector (the rotation …","Builds a rotation from a basis assumed to be orthonormal.","Builds an unit quaternion from a basis assumed to be …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Builds a new matrix from its columns.","Builds a new matrix from its columns.","Creates a new unit complex number from a complex number.","Creates a new unit complex number from a complex number.","Builds the unit complex number from the sinus and cosinus …","Creates a new matrix with the given data.","Creates a new matrix with the given data without …","Creates a square matrix with its diagonal set to <code>diag</code> and …","Creates a square matrix with its diagonal set to <code>diag</code> and …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a new matrix with its diagonal filled with copies …","Creates a new matrix with its diagonal filled with copies …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix with all its elements set to <code>elem</code>.","Creates a matrix with all its elements set to <code>elem</code>.","Creates a new rotation from Euler angles.","Creates a new rotation from Euler angles.","Creates a new unit quaternion from Euler angles.","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix filled with the results of a function …","Creates a matrix filled with the results of a function …","Constructs a vector from coordinates in projective space, …","Constructs a vector from coordinates in projective space, …","Return a unit dual quaternion representing the …","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector with all its elements filled …","Creates a matrix with all its elements filled by an …","Creates a matrix with all its elements filled by an …","Builds an unit quaternion by extracting the rotation part …","Builds an unit complex by extracting the rotation part of …","Builds an unit quaternion by extracting the rotation part …","Builds an unit complex by extracting the rotation part of …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Return a dual quaternion representing the translation and …","Creates a new unit quaternion from a quaternion.","Create a new matrix slice without bound checking and from …","Create a new matrix slice without bound checking and from …","Wraps the given reference, assuming it is already …","Creates a dual quaternion from a unit quaternion rotation.","Builds an unit quaternion from a rotation matrix.","Builds the unit complex number from the corresponding 2D …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Builds a new matrix from its rows.","Builds a new matrix from its rows.","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a 3D homogeneous rotation matrix from an axis and …","Creates a new unit quaternion rotation from a rotation …","Builds a unit complex rotation from an angle in radian …","Creates a new unit quaternion rotation from a rotation …","Creates a new mutable matrix slice from the given data …","Creates a new mutable matrix slice from the given data …","Creates a new mutable matrix slice from the given data …","Creates a new mutable matrix slice from the given data …","Creates a new matrix slice from the given data array.","Creates a new matrix slice from the given data array.","Creates a new matrix slice from the given data array.","Creates a new matrix slice from the given data array.","Creates a new matrix slice from the given data array.","Creates a new mutable matrix slice from the given data …","Creates a new matrix slice from the given data array.","Creates a new mutable matrix slice from the given data …","Creates a new mutable matrix slice from the given data …","Creates a new matrix slice from the given data array.","Creates a new matrix slice from the given data array.","Creates a new mutable matrix slice from the given data …","Creates a mutable matrix slice from an array and with …","Creates a matrix slice from an array and with dimensions …","Creates a matrix slice from an array and with dimensions …","Creates a mutable matrix slice from an array and with …","Creates, without bound-checking, a mutable matrix slice …","Creates, without bound-checking, a matrix slice from an …","Creates, without bound-checking, a matrix slice from an …","Creates, without bound-checking, a mutable matrix slice …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new matrix slice from …","Creates, without bound checking, a new matrix slice from …","Creates, without bound checking, a new matrix slice from …","Creates, without bound checking, a new matrix slice from …","Creates, without bound checking, a new matrix slice from …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new matrix slice from …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new matrix slice from …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new matrix slice from …","Creates a new matrix slice with the specified strides …","Creates a new matrix slice with the specified strides …","Creates a new matrix slice with the specified strides …","Creates a new matrix slice with the specified strides …","Creates a new matrix slice with the specified strides …","Creates a new matrix slice with the specified strides …","Creates a new matrix slice with the specified strides …","Creates a new matrix slice with the specified strides …","Creates a mutable matrix slice from an array and with …","Creates a matrix slice from an array and with dimensions …","Creates a mutable matrix slice from an array and with …","Creates a matrix slice from an array and with dimensions …","Creates, without bound-checking, a mutable matrix slice …","Creates, without bound-checking, a matrix slice from an …","Creates, without bound-checking, a matrix slice from an …","Creates, without bound-checking, a mutable matrix slice …","Creates a new mutable matrix slice with the specified …","Creates a new mutable matrix slice with the specified …","Creates a new mutable matrix slice with the specified …","Creates a new mutable matrix slice with the specified …","Creates a new mutable matrix slice with the specified …","Creates a new mutable matrix slice with the specified …","Creates a new mutable matrix slice with the specified …","Creates a new mutable matrix slice with the specified …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new matrix slice with …","Creates, without bound checking, a new matrix slice with …","Creates, without bound checking, a new matrix slice with …","Creates, without bound checking, a new matrix slice with …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new mutable matrix …","Creates, without bound checking, a new matrix slice with …","Creates, without bound checking, a new matrix slice with …","Creates, without bound checking, a new matrix slice with …","Creates, without bound checking, a new matrix slice with …","","","","","","","","","","Creates a new uninitialized matrix with the given …","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Computes the LU decomposition with full pivoting of <code>matrix</code>…","","Computes <code>self = alpha * a * b + beta * self</code>, where …","Computes <code>self = alpha * a.adjoint() * b + beta * self</code>, …","Computes <code>self = alpha * a.transpose() * b + beta * self</code>, …","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a …","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a …","Computes <code>self = alpha * a.adjoint() * x + beta * self</code>, …","Computes <code>self = alpha * a.adjoint() * x + beta * self</code>, …","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a <strong>…","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a <strong>…","Computes <code>self = alpha * a.transpose() * x + beta * self</code>, …","Computes <code>self = alpha * a.transpose() * x + beta * self</code>, …","Creates a slice that may or may not have a fixed size and …","Creates a slice that may or may not have a fixed size and …","Creates a slice that may or may not have a fixed size and …","Creates a slice that may or may not have a fixed size and …","Computes <code>self = alpha * x * y.transpose() + beta * self</code>.","Computes <code>self = alpha * x * y.transpose() + beta * self</code>, …","Computes <code>self = alpha * x * y.adjoint() + beta * self</code>.","Produces a view of the data at the given index, or <code>None</code> …","Produces a mutable view of the data at the given index, or…","Produces a view of the data at the given index, without …","Returns a mutable view of the data at the given index, …","","","","","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is …","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is …","Computes <code>self = alpha * x * y.adjoint() + beta * self</code>, …","The hermitian part of <code>self</code>, i.e., …","The hermitian part of <code>self</code>, i.e., …","Computes the Hessenberg decomposition of this matrix …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the matrix component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the matrix component with the …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","The rotation identity.","The unit complex number multiplicative identity.","The unit dual quaternion multiplicative identity, which …","Creates a new identity matrix.","Creates a new identity matrix.","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","","","Produces a view of the data at the given index, or panics …","Produces a mutable view of the data at the given index, or…","","","Indexing","Computes the infimum (aka. componentwise min) of two …","Computes the (infimum, supremum) of two matrices/vectors.","Performance hack: Clone doesn’t get inlined for Copy …","Performance hack: Clone doesn’t get inlined for Copy …","Inserts a column filled with <code>val</code> at the <code>i-th</code> position.","Inserts <code>n</code> columns filled with <code>val</code> starting at the <code>i-th</code> …","Inserts <code>ninsert.value()</code> columns starting at the <code>i-th</code> …","Inserts <code>D</code> columns filled with <code>val</code> starting at the <code>i-th</code> …","Inserts <code>D::dim()</code> rows filled with <code>val</code> starting at the <code>i-th</code>…","Inserts a row filled with <code>val</code> at the <code>i-th</code> position.","Inserts <code>n</code> rows filled with <code>val</code> starting at the <code>i-th</code> …","Inserts <code>ninsert.value()</code> rows at the <code>i-th</code> place of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Retrieves the underlying value.","","Moves this matrix into one that owns its data.","","","","","Moves this matrix into one that owns its data. The actual …","Inverts this dual quaternion if it is not zero.","Inverts this complex number if it is not zero.","Inverts this quaternion if it is not zero.","Inverts this dual quaternion in place if it is not zero.","Inverts this quaternion if it is not zero.","Inverts in-place this unit complex number.","Rotate and translate a point by the inverse of this unit …","Rotate the given point by the inverse of this unit …","Rotate a point by the inverse of this unit quaternion. …","Rotate a unit vector by the inverse of this unit …","Rotate the given vector by the inverse of this unit …","Rotate a vector by the inverse of this unit quaternion. …","Rotate a vector by the inverse of this unit quaternion, …","Rotate the given vector by the inverse of this unit …","Rotate a vector by the inverse of this unit quaternion. …","Tests if <code>Self</code> the same as the type <code>T</code>","Tests if <code>Self</code> the same as the type <code>T</code>","","","","","","Returns true if the matrix contains no elements.","Returns true if the underlying vector contains no …","Indicated if this is the identity matrix within a …","","","","","","","","","","Returns <code>true</code> if this matrix is invertible.","Returns <code>true</code> if this matrix is invertible.","Checks that <code>Mᵀ × M = Id</code>.","Checks that this matrix is orthogonal and has a …","Checks that this matrix is orthogonal and has a …","Indicates if this is a square matrix.","The unit dual quaternion needed to make <code>self</code> and <code>other</code> …","Matrix iterators.","Iterates through this matrix coordinates in column-major …","Mutably iterates through this matrix coordinates.","The column vector with <code>val</code> as its i-th component.","The column vector with <code>val</code> as its i-th component.","The column unit vector with <code>T::one()</code> as its i-th …","The column unit vector with <code>T::one()</code> as its i-th …","The kronecker product of two matrices (aka. tensor …","","The total number of elements of this matrix.","The number of elements on the underlying vector.","Returns <code>self * (1.0 - t) + rhs * t</code>, i.e., the linear …","Returns <code>self * (1.0 - t) + rhs * t</code>, i.e., the linear …","Linear interpolation between two unit quaternions.","Linear interpolation between two unit dual quaternions.","Compute the natural logarithm of a quaternion.","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix without …","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix without …","Extracts the lower triangular part of this matrix …","The Lp norm of this matrix.","","Computes the LU decomposition with partial (row) pivoting …","A synonym for the norm of this matrix.","A synonym for the squared norm of this matrix.","Returns a matrix containing the result of <code>f</code> applied to …","Apply the given function to this matrix’s diagonal and …","Apply the given function to this matrix’s diagonal and …","Returns a matrix containing the result of <code>f</code> applied to …","Returns the component with the largest value.","The mean of all the elements of this matrix.","Create the mean unit quaternion from a data structure …","Use the metric induced by this norm to compute the metric …","","","","Compute the distance between <code>self</code> and <code>rhs</code> using the …","Returns the component with the smallest value.","","","","","","","","","","","Equivalent to <code>self * rhs</code> but stores the result into <code>out</code> …","The number of columns of this matrix.","","","","","Negates <code>self</code> in-place.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Creates a new unit quaternion rotation from a rotation …","Builds the unit complex number corresponding to the …","Creates a new dynamic matrix data storage from the given …","Normalize the given vector and return it wrapped on a <code>Unit</code>…","Creates a new unit quaternion rotation from a rotation …","Creates a new homogeneous matrix that applies a distinct …","Creates a new homogeneous matrix that applies a distinct …","Creates a new homogeneous matrix that applies a scaling …","Creates a new homogeneous matrix that applies a scaling …","Creates a new homogeneous matrix that applies a scaling …","Creates a new homogeneous matrix that applies a scaling …","Normalize the given vector and return it wrapped on a <code>Unit</code>…","Deprecated: Use [Matrix4::face_towards] instead.","Deprecated: Use [Matrix4::face_towards] instead.","Deprecated: Use [UnitQuaternion::face_towards] instead.","Creates a new homogeneous matrix for an orthographic …","Creates a new homogeneous matrix for an orthographic …","Creates a new homogeneous matrix for a perspective …","Creates a new homogeneous matrix for a perspective …","Builds a 2 dimensional homogeneous rotation matrix from …","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a 2 dimensional homogeneous rotation matrix from …","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a 3D homogeneous rotation matrix from an axis and …","Creates a new homogeneous matrix that applies the same …","Creates a new homogeneous matrix that applies the same …","Creates a new homogeneous matrix that applies a pure …","Creates a new homogeneous matrix that applies a pure …","Create a new matrix slice without bound checking.","Create a new matrix slice without bound checking.","Wraps the given value, assuming it is already normalized.","Creates a new uninitialized matrix or vector.","Creates a new uninitialized matrix or vector.","Creates a new uninitialized matrix or vector.","Creates a new uninitialized matrix or vector.","Creates a new uninitialized matrix or vector.","Creates a new uninitialized matrix or vector.","Creates a new uninitialized matrix or vector.","Creates a new uninitialized matrix or vector.","Creates a new uninitialized matrix. If the matrix has a …","Creates a new uninitialized matrix. If the matrix has a …","Create a new matrix slice without bound checking.","Create a new matrix slice without bound checking.","Normalized linear interpolation between two unit …","Normalized linear interpolation between two unit …","Apply this norm to the given matrix.","Computes the norm.","","","","The L2 norm of this matrix.","Computes the squared norm.","The squared L2 norm of this vector.","Returns a normalized version of this matrix.","Normalizes this matrix in-place and returns its norm.","The number of rows of this matrix.","Applies the given closure to each element of the …","Applies the given closure to each element of the …","Orthonormalizes the given family of vectors. The largest …","Orthonormalizes the given family of vectors. The largest …","","The perpendicular product between two 2D column vectors, …","Attempts to raise this matrix to an integral power <code>e</code>. If …","Attempts to raise this matrix to an integral power <code>e</code> …","Raise this unit complex number to a given floating power.","Raise the quaternion to a given floating power.","Computes the transformation equal to a non-uniform …","Computes the transformation equal to a non-uniform …","Computes in-place the transformation equal to a …","Computes in-place the transformation equal to a …","Computes the transformation equal to an uniform scaling …","Computes the transformation equal to an uniform scaling …","Computes in-place the transformation equal to an uniform …","Computes in-place the transformation equal to an uniform …","Computes the transformation equal to a translation …","Computes the transformation equal to a translation …","Computes the transformation equal to a translation …","Computes the transformation equal to a translation …","Computes the pseudo-inverse of this matrix.","","","","","","","","","","Constructs a new vector of higher dimension by appending …","Constructs a new vector of higher dimension by appending …","Computes the QR decomposition of this matrix.","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","The underlying quaternion.","Computes the rank of this matrix.","Tests whether <code>self</code> and <code>rhs</code> are equal up to a given …","","","Removes the <code>i</code>-th column from this matrix.","Removes <code>n</code> consecutive columns from this matrix, starting …","Removes all columns in <code>indices</code>   ","Removes <code>nremove.value()</code> columns from this matrix, …","Removes <code>D::dim()</code> consecutive columns from this matrix, …","Removes <code>D::dim()</code> consecutive rows from this matrix, …","Removes the <code>i</code>-th row from this matrix.","Removes <code>n</code> consecutive rows from this matrix, starting …","Removes all rows in <code>indices</code>   ","Removes <code>nremove.value()</code> rows from this matrix, starting …","Normalizes this vector again. This is useful when …","Normalizes this vector again using a first-order Taylor …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix with all its elements set to <code>elem</code>.","Creates a matrix with all its elements set to <code>elem</code>.","","Reshapes <code>self</code> such that it has dimensions …","","","","","Resizes this matrix so that it contains <code>new_nrows</code> rows …","Resizes the underlying mutable data storage and unwraps …","Resizes <code>self</code> such that it has dimensions …","Resizes this matrix horizontally, i.e., so that it …","Changes the number of column of this matrix in-place.","Changes the number of column of this matrix in-place.","Resizes this matrix in-place.","Resizes this matrix in-place.","Resizes this matrix vertically, i.e., so that it contains …","Changes the number of rows of this matrix in-place.","Changes the number of rows of this matrix in-place.","Return the rotation part of this unit dual quaternion.","The unit complex needed to make <code>a</code> and <code>b</code> be collinear and …","The unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …","The unit complex needed to make <code>a</code> and <code>b</code> be collinear and …","The unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …","The unit complex number needed to make <code>self</code> and <code>other</code> …","The unit quaternion needed to make <code>self</code> and <code>other</code> …","Returns a slice containing the i-th row of this matrix.","Iterate through the rows of this matrix.","Mutably iterates through this matrix rows.","The mean of all the rows of this matrix.","The mean of all the rows of this matrix. The result is …","Returns a slice containing the i-th row of this matrix.","Returns a slice containing the <code>n</code> first elements of the …","Returns a slice containing the <code>n</code> first elements of the …","The sum of all the rows of this matrix.","The sum of all the rows of this matrix. The result is …","The variance of all the rows of this matrix.","The variance of all the rows of this matrix. The result …","Extracts from this matrix a set of consecutive rows.","Extracts from this matrix <code>nrows</code> rows regularly skipping …","Extracts from this matrix <code>nrows</code> rows regularly skipping …","Extracts from this matrix <code>nrows</code> rows regularly skipping …","Extracts from this matrix <code>nrows</code> rows regularly skipping …","Extracts from this matrix a set of consecutive rows.","Slice containing all the rows indexed by the range <code>rows</code>.","Slice containing all the rows indexed by the range <code>rows</code>.","Splits this NxM matrix into two parts delimited by two …","Splits this NxM matrix into two parts delimited by two …","Extracts from this matrix a set of consecutive rows …","Extracts from this matrix a set of consecutive rows …","Multiplies each component of the complex matrix <code>self</code> by …","Multiply <code>self</code> by n.","Multiplies each component of the complex matrix <code>self</code> by …","The rotation axis of this unit quaternion multiplied by …","The rotation angle returned as a 1-dimensional vector.","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","Computes the Schur decomposition of a square matrix.","Screw linear interpolation between two unit quaternions. …","Creates a new matrix by extracting the given set of …","Creates a new matrix by extracting the given set of rows …","","","","","Fills the selected column of this matrix with the content …","Fills the diagonal of this matrix with the content of the …","Sets the magnitude of this vector.","Fills the diagonal of this matrix with the content of the …","Fills the selected row of this matrix with the content of …","","The shape of this matrix returned as the tuple (number of …","","","","","Returns a new vector with the same magnitude as <code>self</code> …","","","","","","","","","","","","Attempts to normalize <code>self</code>.","Normalizes this matrix in-place and return its norm.","The sine of the rotation angle.","Computes the singular values of this matrix.","The number of elements of the range, i.e., …","Computes the spherical linear interpolation between two …","Computes the spherical linear interpolation between two …","Computes the spherical linear interpolation between two …","Spherical linear interpolation between two unit …","Spherical linear interpolation between two rotations …","Slices this matrix starting at its component <code>(irow, icol)</code> …","Slices this matrix starting at its component <code>(irow, icol)</code> …","Slices a sub-matrix containing the rows indexed by the …","Slices a mutable sub-matrix containing the rows indexed …","Slices this matrix starting at its component …","Slices this matrix starting at its component …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Abstract definition of a matrix data storage.","","The strides (row stride, column stride) of this matrix.","","","","","","","","","Equivalent to <code>self + rhs</code> but stores the result into <code>out</code> …","The sum of all the elements of this matrix.","Computes the supremum (aka. componentwise max) of two …","Computes the Singular Value Decomposition using implicit …","Swaps two entries.","Swaps two columns in-place.","Swaps two rows in-place.","Swaps two entries without bound-checking.","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a <strong>…","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a <strong>…","Computes <code>self = alpha * x * y.transpose() + beta * self</code>, …","Computes the eigendecomposition of this symmetric matrix.","Computes the eigenvalues of this symmetric matrix.","The symmetric part of <code>self</code>, i.e., …","The symmetric part of <code>self</code>, i.e., …","Computes the tridiagonalization of this symmetric matrix.","Converts this unit quaternion into its equivalent Euler …","Computes the coordinates in projective space of this …","Yields the homogeneous matrix for this matrix, i.e., …","Computes the coordinates in projective space of this …","Converts this unit complex number into its equivalent …","Converts this unit dual quaternion interpreted as an …","Converts this unit quaternion into its equivalent …","Builds an isometry from this unit dual quaternion.","","","","","","Builds the rotation matrix corresponding to this unit …","Builds a rotation matrix from this unit quaternion.","","","","","","","","","","","","","","","","","","","","","Fills this matrix with the content of the transpose …","The dot product between the transpose of <code>self</code> and <code>rhs</code>.","Equivalent to <code>self.transpose() * rhs</code>.","Equivalent to <code>self.transpose() * rhs</code> but stores the …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes a trace of a square matrix, i.e., the sum of its …","Computes a trace of a square matrix, i.e., the sum of its …","Transforms the given point, assuming the matrix <code>self</code> uses …","Transforms the given point, assuming the matrix <code>self</code> uses …","Transforms the given point, assuming the matrix <code>self</code> uses …","Transforms the given point, assuming the matrix <code>self</code> uses …","Rotate a point by this unit quaternion.","Rotate the given point by this unit complex number.","Rotate and translate a point by this unit dual quaternion …","Transforms the given vector, assuming the matrix <code>self</code> …","Transforms the given vector, assuming the matrix <code>self</code> …","Rotate the given vector by this unit complex number.","Rotate a vector by this unit quaternion.","Rotate a vector by this unit dual quaternion, ignoring …","Return the translation part of this unit dual quaternion.","Transposes <code>self</code>.","Transposes the square matrix <code>self</code> in-place.","Transposes <code>self</code> and store the result into <code>out</code>.","","","","","","","","","","","","","","","","","","","Attempts to invert this matrix.","Attempts to invert this matrix in-place. Returns <code>false</code> …","Attempts to normalize the given vector and return it …","Normalize the given vector and return it wrapped on a <code>Unit</code>…","Returns a normalized version of this matrix unless its …","Normalizes this matrix in-place or does nothing if its …","Attempts to compute the Schur decomposition of a square …","Computes the screw-linear interpolation between two unit …","Sets the magnitude of this vector unless it is smaller …","Computes the spherical linear interpolation between two …","Computes the spherical linear interpolation between two …","Attempts to compute the Singular Value Decomposition of …","Computes the eigendecomposition of the given symmetric …","","","","","","","","","","Attempts to compute the UDU decomposition of this matrix.","","","Divides each component of the complex matrix <code>self</code> by the …","Divides <code>self</code> by n.","Divides each component of the complex matrix <code>self</code> by the …","Retrieves the underlying value. Deprecated: use […","Extracts the upper triangular part of this matrix …","The variance of all the elements of this matrix.","Computes the row and column coordinates of the i-th …","Gets a reference to the i-th element of this column …","Gets a reference to the i-th element of this column …","Gets a mutable reference to the i-th element of this …","Gets a mutable reference to the i-th element of this …","The column vector with a 1 as its fourth component, and …","The column vector with a 1 as its fourth component, and …","The unit column vector with a 1 as its fourth component, …","The unit column vector with a 1 as its fourth component, …","The column vector with a 1 as its first component, and …","The column vector with a 1 as its first component, and …","The unit column vector with a 1 as its first component, …","The unit column vector with a 1 as its first component, …","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","The column vector with a 1 as its second component, and …","The column vector with a 1 as its second component, and …","The unit column vector with a 1 as its second component, …","The unit column vector with a 1 as its second component, …","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","The column vector with a 1 as its third component, and …","The column vector with a 1 as its third component, and …","The unit column vector with a 1 as its third component, …","The unit column vector with a 1 as its third component, …","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix with all its elements set to 0.","Creates a matrix with all its elements set to 0.","Replaces each component of <code>self</code> by the result of a …","Folds a function <code>f</code> on each pairs of entries from <code>self</code> and …","Returns a matrix containing the result of <code>f</code> applied to …","Replaces each component of <code>self</code> by the result of a …","Returns a matrix containing the result of <code>f</code> applied to …","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","A matrix allocator of a memory buffer that may contain …","The type of buffer this allocator can instanciate.","A matrix reallocator. Changes the size of the memory …","Restricts the given number of rows and columns to be …","The number of columns of the result of a componentwise …","The number of rows of the result of a componentwise …","Restricts the given number of rows to be equal.","Allocates a buffer initialized with the content of the …","Allocates a buffer with the given number of rows and …","Reallocates a buffer of shape <code>(RTo, CTo)</code>, possibly …","Constraints <code>C1</code> and <code>R2</code> to be equivalent.","Constraints <code>D1</code> and <code>D2</code> to be equivalent.","This is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …","This is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …","This is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …","This is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …","Constraints D1 and D2 to be equivalent, where they both …","Constraints <code>D1</code> and <code>D2</code> to be equivalent. They are both …","Constraints <code>D1</code> and <code>D2</code> to be equivalent. They are both …","A type used in <code>where</code> clauses for enforcing constraints.","","","","","","","","","","","","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …","Data structure used to provide access to matrix and …n allocator based on <code>GenericArray</code> and <code>VecStorage</code> for …","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait implemented by any type that can be used as a …","","","","","","","","","Trait implemented exclusively by type-level integers.","","","","","","","","","","","","","","","","","Dim of dynamically-sized algebraic entities.","Trait implemented by <code>Dynamic</code>.","Trait implemented by <code>Dynamic</code> and type-level integers …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The value of this dimension.","","","","","","","","","","","","","","","","Builds an instance of <code>Self</code> from a run-time value. Panics …","","","","","","","","","","","","","","","","","","","","","","","","","","","The name of this dimension, i.e., the singleton <code>Self</code>.","","","A dynamic size equal to <code>value</code>.","","","","","","","","","","","","","","","","","","","","Gets the compile-time value of <code>Self</code>. Returns <code>None</code> if it …","","","","","Gets the run-time value of <code>self</code>. For type-level integers, …","","","A helper trait used for indexing operations.","A helper trait used for indexing operations.","The output type returned by methods.","The output type returned by methods.","An iterator through the columns of a matrix.","An iterator through the mutable columns of a matrix.","An iterator through a dense matrix with arbitrary strides …","An iterator through a dense matrix with arbitrary strides …","An iterator through the rows of a matrix.","An iterator through the mutable rows of a matrix.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new iterator for the given matrix storage.","Creates a new iterator for the given matrix storage.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The column-stride of the owned data storage for a buffer …","The static stride of this storage’s columns.","A matrix storage that is stored contiguously in memory.","A mutable matrix storage that is stored contiguously in …","The reshaped storage type.","The owned data storage that can be allocated from <code>S</code>.","The row-stride of the owned data storage for a buffer of …","The static stride of this storage’s rows.","A matrix storage that can be reshaped in-place.","The data storage for the sum of two matrices with …","The trait shared by all matrix data storage.","Trait implemented by matrix data storage that can provide …","Retrieves the mutable data buffer as a contiguous slice.","Retrieves the data buffer as a contiguous slice.","Clones this data storage to one that does not contain any …","Gets the address of the i-th matrix component without …","Gets the address of the i-th matrix component without …","Gets the mutable address of the i-th matrix component …","Gets the mutable address of the i-th matrix component …","Retrieves a reference to the i-th element without …","Retrieves a reference to the i-th element without …","Retrieves a mutable reference to the i-th element without …","Retrieves a mutable reference to the element at …","Builds a matrix data storage that does not contain any …","Indicates whether this data buffer stores its elements …","Compute the index corresponding to the irow-th row and …","The matrix data pointer.","The matrix mutable data pointer.","Reshapes the storage into the output storage type.","The dimension of the matrix at run-time. Arr length of …","The spacing between consecutive row elements and …","Swaps two elements without bound-checking.","Swaps two elements using their linear index without …","Trait implemented by rotations that can be used inside of …","A 2D affine transformation. Stored as a homogeneous 3x3 …","A 3D affine transformation. Stored as a homogeneous 4x4 …","A dual quaternion.","A direct isometry, i.e., a rotation followed by a …","A 2-dimensional direct isometry using a unit complex …","A 3-dimensional direct isometry using a unit quaternion …","A 2-dimensional direct isometry using a rotation matrix …","A 3-dimensional direct isometry using a rotation matrix …","A 3D orthographic projection stored as a homogeneous 4x4 …","A 3D perspective projection stored as a homogeneous 4x4 …","A point in an euclidean space.","A statically sized 1-dimensional column point.","A statically sized 2-dimensional column point.","A statically sized 3-dimensional column point.","A statically sized 4-dimensional column point.","A statically sized 5-dimensional column point.","A statically sized 6-dimensional column point.","An invertible 2D general transformation. Stored as a …","An invertible 3D general transformation. Stored as a …","A quaternion. See the type alias …","A reflection wrt. a plane.","The transform category that results from the …","A rotation matrix.","A 2-dimensional rotation matrix.","A 3-dimensional rotation matrix.","A similarity, i.e., an uniform scaling, followed by a …","A 2-dimensional similarity.","A 3-dimensional similarity.","A 2-dimensional similarity using a rotation matrix for …","A 3-dimensional similarity using a rotation matrix for …","Indicates that <code>Self</code> is a more specific <code>Transform</code> category …","Indicates that <code>Self</code> is a more general <code>Transform</code> category …","Tag representing an affine <code>Transform</code>. Its bottom-row is …","Trait implemented by phantom types identifying the …","Traits that gives the <code>Transform</code> category that is …","Tag representing the most general (not necessarily …","Tag representing the most general inversible <code>Transform</code> …","A transformation matrix in homogeneous coordinates.","A 2D general transformation that may not be invertible. …","A 3D general transformation that may not be inversible. …","A translation.","A 1-dimensional translation.","A 2-dimensional translation.","A 3-dimensional translation.","A 4-dimensional translation.","A 5-dimensional translation.","A 6-dimensional translation.","A 2D rotation represented as a complex number with …","A unit quaternions. May be used to represent a rotation …","A unit quaternions. May be used to represent a rotation.","","","","","","","","","Calculates the quaternionic arccosinus.","Calculates the hyperbolic quaternionic arccosinus.","","","","","","","","","","","","","The rotation angle.","The rotation angle in [0; pi].","The rotation angle in [0; pi] of this unit quaternion.","The rotation angle in <code>]-pi; pi]</code> of this unit complex …","The rotation angle.","The rotation angle in [0; pi].","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","Appends to <code>self</code> a rotation given in the axis-angle form, …","Appends to <code>self</code> the given rotation in-place.","Appends to <code>self</code> the given rotation in-place.","Appends in-place to <code>self</code> a rotation centered at the point …","Appends in-place to <code>self</code> a rotation centered at the point …","Appends in-place to <code>self</code> a rotation centered at the point …","Appends in-place to <code>self</code> a rotation centered at the point …","The similarity transformation that applies a scaling …","Sets <code>self</code> to the similarity transformation that applies a …","Appends to <code>self</code> the given translation in-place.","Appends to <code>self</code> the given translation in-place.","Replaces each component of <code>self</code> by the result of a …","A reference to the underlying homogeneous transformation …","A reference to the underlying homogeneous transformation …","","A reference to this transformation seen as a <code>Projective3</code>.","A reference to this transformation seen as a <code>Projective3</code>.","","Reinterprets this quaternion as a 4D vector.","Transforms this quaternion into its 4D vector form …","Calculates the quaternionic arcsinus.","Calculates the hyperbolic quaternionic arcsinus.","Gets the <code>width / height</code> aspect ratio of the view frustum.","Calculates the quaternionic arctangent.","Calculates the hyperbolic quaternionic arctangent.","The rotation axis. Returns <code>None</code> if the rotation angle is …","The rotation axis of this unit quaternion or <code>None</code> if the …","The reflexion axis.","The rotation axis. Returns <code>None</code> if the rotation angle is …","The rotation axis and angle in ]0, pi] of this unit …","The rotation axis and angle in ]0, pi] of this unit …","The rotation axis and angle in ]0, pi] of this complex …","The rotation axis and angle in ]0, pi] of this unit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bottom offset of the view cuboid.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Checks that the given matrix is a valid homogeneous …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clones this unit quaternion into one that owns its data.","Clones this transform into one that owns its data.","The underlying complex number.","Compute the conjugate of this unit quaternion.","Compute the conjugate of this unit quaternion.","Compute the conjugate of this unit complex number.","The conjugate of this quaternion.","The conjugate of this dual quaternion, containing the …","Compute the conjugate of this unit quaternion in-place.","Compute the conjugate of this unit quaternion in-place.","Compute in-place the conjugate of this unit complex …","Replaces this quaternion by its conjugate.","Replaces this quaternion by its conjugate.","The coordinates of this point, i.e., the shift from the …","This quaternion as a 4D vector of coordinates in the …","Calculates the quaternionic cosinus.","The cosine of the rotation angle.","Calculates the hyperbolic quaternionic cosinus.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The dot product of two quaternions.","The dual component of the quaternion","The underlying dual quaternion.","","","","","","","","","","","","","","Euler angles corresponding to this rotation from a …","Retrieves the euler angles corresponding to this unit …","Euler angles corresponding to this rotation from a …","Compute the exponential of a quaternion.","Compute the exponential of a quaternion.","Compute the exponential of a quaternion. Returns the …","","","","","","","","","","","","","","","Creates a rotation that corresponds to the local frame of …","Creates an unit quaternion that corresponds to the local …","Creates an isometry that corresponds to the local frame …","Creates an isometry that corresponds to the local frame …","Creates a rotation that corresponds to the local frame of …","Creates an isometry that corresponds to the local frame …","Creates an isometry that corresponds to the local frame …","Creates an similarity that corresponds to a scaling …","Creates an similarity that corresponds to a scaling …","","","","","","","","","","","","","","","","","","","","Gets the y field of view of the view frustum.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds the unit complex number corresponding to the …","Builds a 3D rotation matrix from an axis and a rotation …","Creates a new quaternion from a unit vector (the rotation …","Builds a 3D rotation matrix from an axis and a rotation …","Builds a rotation from a basis assumed to be orthonormal.","Builds a rotation from a basis assumed to be orthonormal.","Builds an unit quaternion from a basis assumed to be …","Builds a rotation from a basis assumed to be orthonormal.","Builds a rotation from a basis assumed to be orthonormal.","Builds a rotation from a basis assumed to be orthonormal.","Creates a new unit complex number from a complex number.","Creates a new unit complex number from a complex number.","Creates a new point with the given coordinates.","Builds the unit complex number from the sinus and cosinus …","Creates a new rotation from Euler angles.","Creates a new unit quaternion from Euler angles.","Creates a new rotation from Euler angles.","Creates a new orthographic projection matrix from an …","Creates a new point from its homogeneous vector …","Constructs a pure quaternion.","Return a unit dual quaternion representing the …","Creates a new similarity from its rotational and …","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Builds an unit quaternion by extracting the rotation part …","Builds an unit complex by extracting the rotation part of …","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Builds an unit quaternion by extracting the rotation part …","Builds an unit complex by extracting the rotation part of …","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Wraps the given matrix to interpret it as a 3D …","Wraps the given matrix to interpret it as a 3D …","Creates a new rotation from the given square matrix.","Creates a new transformation from the given homogeneous …","Return a dual quaternion representing the translation and …","Creates a new quaternion from its scalar and vector …","Creates a new isometry from its rotational and …","Creates a new similarity from its rotational and …","Creates a new quaternion from its polar decomposition.","Creates a new unit quaternion from a quaternion.","Constructs a real quaternion.","Creates a dual quaternion from only its real part, with …","Creates a dual quaternion from its rotation and …","Creates a dual quaternion from a unit quaternion rotation.","Builds an unit quaternion from a rotation matrix.","Builds the unit complex number from the corresponding 2D …","Builds a 2 dimensional rotation matrix from an angle in …","Builds a 3D rotation matrix from an axis scaled by the …","Creates a new unit quaternion rotation from a rotation …","Builds a unit complex rotation from an angle in radian …","Builds a 3D rotation matrix from an axis scaled by the …","Builds a 2 dimensional rotation matrix from an angle in …","Creates a new unit quaternion rotation from a rotation …","Creates a new similarity that applies only a scaling …","Creates a new point from a slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a quaternion from a 4D vector. The quaternion …","Creates a new translation from the given vector.","","Gets a reference to i-th element of this point without …","Gets a mutable reference to i-th element of this point …","","Divides quaternion into two.","Indicates whether a <code>Transform</code> with the category <code>Self</code> has …","Indicates whether a <code>Transform</code> with the category <code>Self</code> has …","","","","","","","","","","","The rotation identity.","The rotation identity.","The unit dual quaternion multiplicative identity, which …","The unit complex number multiplicative identity.","Creates a new square identity rotation of the given …","","The quaternion multiplicative identity.","The dual quaternion multiplicative identity.","Creates a new identity translation.","Creates a new identity isometry.","Creates a new identity similarity.","Creates a new identity transform.","The imaginary part of this quaternion.","","","","","","","","","","Computes the infimum (aka. componentwise min) of two …","Computes the (infimum, supremum) of two points.","Calculates the inner product (also known as the dot …","","","","","","","","","","","","","","","Retrieves the underlying homogeneous matrix.","Retrieves the underlying homogeneous matrix.","Unwraps the underlying matrix.","Retrieves the underlying matrix.","Moves this unit quaternion into one that owns its data.","Computes <code>self.inverse() * rhs</code> in a more efficient way.","The rotation inverse.","Inverts this quaternion if it is not zero.","Inverts this dual quaternion if it is not zero.","Inverts this complex number if it is not zero.","Retrieves the inverse of the underlying homogeneous …","Retrieves the inverse of the underlying homogeneous …","Inverts <code>self</code>.","","Inverts <code>self</code>.","Inverts <code>self</code>.","Inverts <code>self</code>.","Inverts this transformation. Use <code>.try_inverse</code> if this …","Change <code>self</code> to its inverse.","Inverts this quaternion if it is not zero.","Inverts this dual quaternion in place if it is not zero.","Inverts in-place this unit complex number.","","Inverts <code>self</code> in-place.","Inverts <code>self</code> in-place.","Inverts <code>self</code> in-place.","Inverts <code>self</code> in-place.","Inverts this transformation in-place. Use <code>.try_inverse_mut</code>…","Apply the inverse rotation to the given point.","Rotate a point by the inverse of this unit quaternion. …","Rotate and translate a point by the inverse of this unit …","Rotate the given point by the inverse of this unit …","Rotate the given point by the inverse of this rotation. …","","Translate the given point by the inverse of this …","Transform the given point by the inverse of this …","Transform the given point by the inverse of this …","Transform the given point by the inverse of this …","Apply the inverse rotation to the given unit vector.","Apply the inverse rotation to the given unit vector.","Rotate a vector by the inverse of this unit quaternion. …","Rotate a unit vector by the inverse of this unit …","Rotate the given vector by the inverse of this unit …","Rotate the given vector by the inverse of this rotation. …","","Transform the given unit vector by the inverse of this …","Apply the inverse rotation to the given vector.","Rotate a vector by the inverse of this unit quaternion. …","Rotate a vector by the inverse of this unit quaternion, …","Rotate the given vector by the inverse of this unit …","Rotate the given vector by the inverse of this rotation. …","","Transform the given vector by the inverse of this …","Transform the given vector by the inverse of this …","Transform the given vector by the inverse of this …","Returns true if the point contains no elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if the quaternion is pure.","","","The part of this similarity that does not include the …","The unit dual quaternion needed to make <code>self</code> and <code>other</code> …","Iterates through this point coordinates.","Mutably iterates through this point coordinates.","","","","","","","","","The left offset of the view cuboid.","Left quaternionic division.","The dimension of this point.","Linear interpolation between two unit quaternions.","Linear interpolation between two unit dual quaternions.","Linear interpolation between two quaternion.","Linear interpolation between two dual quaternions.","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Compute the natural logarithm of a quaternion.","Compute the natural logarithm of a quaternion.","Builds a left-handed look-at view matrix without …","Builds a left-handed look-at view matrix without …","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix without …","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix including a …","Builds a left-handed look-at view matrix including a …","Builds a right-handed look-at view matrix without …","Builds a right-handed look-at view matrix without …","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix without …","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix including …","Builds a right-handed look-at view matrix including …","","A synonym for the norm of this quaternion.","A synonym for the squared norm of this quaternion.","Returns a point containing the result of <code>f</code> applied to …","A reference to the underlying matrix representation of …","A reference to the underlying matrix.","A mutable reference to the underlying matrix …","A mutable reference to underlying matrix. Use …","A mutable reference to the underlying matrix …","A mutable reference to the underlying matrix.","","Create the mean unit quaternion from a data structure …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Builds a 2 dimensional rotation matrix from an angle in …","Builds a 3 dimensional rotation matrix from an axis and …","Creates a new unit quaternion rotation from a rotation …","Builds the unit complex number corresponding to the …","Creates a new 2D isometry from a translation and a …","Creates a new isometry from a translation and a rotation …","Creates a new 2D isometry from a translation and a …","Creates a new isometry from a translation and a rotation …","Creates a new reflection wrt the plane orthogonal to the …","Creates a new orthographic projection matrix.","Creates a new perspective matrix from the aspect ratio, y …","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Builds a 3 dimensional rotation matrix from an axis and …","Builds a 2 dimensional rotation matrix from an angle in …","Creates a new quaternion from its individual components. …","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this translation from its components.","Creates a new isometry from a translation and a rotation …","Creates a new 2D isometry from a translation and a …","Creates a new 2D isometry from a translation and a …","Creates a new isometry from a translation and a rotation …","Creates a new similarity from a translation, rotation …","Creates a new similarity from a translation, a rotation, …","Creates a new similarity from a translation, rotation …","Creates a new similarity from a translation and a …","Creates a new reflection wrt. the plane orthogonal to the …","Creates a new unit quaternion rotation from a rotation …","Deprecated: Use [Isometry::face_towards] instead.","Deprecated: Use [Isometry::face_towards] instead.","Deprecated: Use [Isometry::face_towards] instead.","Deprecated: Use [Isometry::face_towards] instead.","Deprecated: Use [Rotation3::face_towards] instead.","Deprecated: Use [UnitQuaternion::face_towards] instead.","Deprecated: Use [Rotation3::face_towards] instead.","Deprecated: Use [SimilarityMatrix3::face_towards] instead.","Deprecated: Use [SimilarityMatrix3::face_towards] instead.","Creates a new point with uninitialized coordinates.","Normalized linear interpolation between two unit …","Normalized linear interpolation between two unit …","The norm of this quaternion.","","","","The squared norm of this quaternion.","","Normalizes this quaternion.","Normalizes this quaternion.","Normalizes this quaternion.","Normalizes this quaternion.","","","","","Creates a new identity isometry.","Creates a new identity similarity.","Creates a new identity transform.","Creates a new point with all coordinates equal to zero.","Calculates the outer product (also known as the wedge …","","The polar decomposition of this quaternion.","Raise the quaternion to a given floating power, i.e., …","Raise the quaternion to a given floating power, i.e., …","Raise the quaternion to a given floating power.","Raise this unit complex number to a given floating power.","Raise the quaternion to a given floating power, i.e., …","Raise the quaternion to a given floating power, i.e., …","Raise the quaternion to a given floating power.","The similarity transformation that applies a scaling …","Sets <code>self</code> to the similarity transformation that applies a …","Calculates the projection of <code>self</code> onto <code>other</code> (also known …","Projects a point. Faster than matrix multiplication.","Projects a point. Faster than matrix multiplication.","Projects a vector. Faster than matrix multiplication.","Projects a vector. Faster than matrix multiplication.","Convert quaternion to pure quaternion.","The underlying quaternion.","The real component of the quaternion","Applies the reflection to the columns of <code>rhs</code>.","Applies the reflection to the rows of <code>lhs</code>.","Applies the reflection to the rows of <code>lhs</code>.","Applies the reflection to the columns of <code>rhs</code>.","Calculates the rejection of <code>self</code> from <code>other</code> (also known …","","","","","","","","","Ensure this rotation is an orthonormal rotation matrix. …","Ensure this rotation is an orthonormal rotation matrix. …","Ensure this rotation is an orthonormal rotation matrix. …","Ensure this rotation is an orthonormal rotation matrix. …","","","","","","","","","","","","","","","The right offset of the view cuboid.","Right quaternionic division.","Return the rotation part of this unit dual quaternion.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","The pure rotational part of this isometry.","The rotation matrix required to align <code>a</code> and <code>b</code> but with …","The rotation matrix required to align <code>a</code> and <code>b</code> but with …","The unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …","The unit complex needed to make <code>a</code> and <code>b</code> be collinear and …","The rotation matrix required to align <code>a</code> and <code>b</code> but with …","The rotation matrix required to align <code>a</code> and <code>b</code> but with …","The unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …","The unit complex needed to make <code>a</code> and <code>b</code> be collinear and …","The rotation matrix needed to make <code>self</code> and <code>other</code> …","The rotation matrix needed to make <code>self</code> and <code>other</code> …","The unit quaternion needed to make <code>self</code> and <code>other</code> …","The unit complex number needed to make <code>self</code> and <code>other</code> …","The rotation matrix needed to make <code>self</code> and <code>other</code> …","The rotation matrix needed to make <code>self</code> and <code>other</code> …","The isometry that applies the rotation <code>r</code> with its axis …","The similarity that applies the scaling factor <code>scaling</code>, …","The scalar part <code>w</code> of this quaternion.","","","The rotation angle returned as a 1-dimensional vector.","The rotation axis multiplied by the rotation angle.","The rotation axis of this unit quaternion multiplied by …","The rotation angle returned as a 1-dimensional vector.","The rotation axis multiplied by the rotation angle.","The rotation angle returned as a 1-dimensional vector.","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The scaling factor of this similarity transformation.","Screw linear interpolation between two unit quaternions. …","","","","","","","","","","","","","","","","","","Updates this perspective matrix with a new <code>width / height</code> …","Sets the bottom offset of the view cuboid.","Sets the view cuboid offsets along the <code>y</code> axis.","Sets the category of this transform.","Updates this perspective with a new y field of view of …","Sets the left offset of the view cuboid.","Sets the view cuboid offsets along the <code>x</code> axis.","Sets the right offset of the view cuboid.","The scaling factor of this similarity transformation.","Sets the top offset of the view cuboid.","Sets the far plane offset of the view cuboid.","Updates this perspective matrix with a new far plane …","Sets the near plane offset of the view cuboid.","Updates this perspective matrix with a new near plane …","Sets the near and far plane offsets of the view cuboid.","Updates this perspective matrix with new near and far …","","","","","","","","","","","","Attempt to inverse this quaternion.","Calculates the quaternionic sinus.","The sine of the rotation angle.","Calculates the hyperbolic quaternionic sinus.","Spherical linear interpolation between two rotation …","Spherical linear interpolation between two rotation …","Spherical linear interpolation between two unit …","Spherical linear interpolation between two rotations …","Spherical linear interpolation between two rotation …","Spherical linear interpolation between two rotation …","","","","","","","","Calculates square root.","Calculates square of a quaternion.","The stride of this point. This is the number of buffer …","","","","","","","","","","","","","","","Computes the supremum (aka. componentwise max) of two …","Swaps two entries without bound-checking.","Calculates the quaternionic tangent.","Calculates the hyperbolic quaternionic tangent.","Creates Euler angles from a rotation.","Converts this unit quaternion into its equivalent Euler …","Creates Euler angles from a rotation.","Converts this unit quaternion into its equivalent …","Converts this unit dual quaternion interpreted as an …","Converts this unit complex number into its equivalent …","Computes the corresponding homogeneous matrix.","Computes the corresponding homogeneous matrix.","Converts this point into a vector in homogeneous …","Converts this rotation into its equivalent homogeneous …","Converts this translation into its equivalent homogeneous …","Converts this isometry into its equivalent homogeneous …","Converts this similarity into its equivalent homogeneous …","Converts this transform into its equivalent homogeneous …","Builds an isometry from this unit dual quaternion.","Converts this isometry into its equivalent homogeneous …","","","","","","","","","","","","","","This transformation seen as a <code>Projective3</code>.","This transformation seen as a <code>Projective3</code>.","Builds a rotation matrix from this unit quaternion.","Builds the rotation matrix corresponding to this unit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The top offset of the view cuboid.","Apply the rotation to the given point.","Rotate a point by this unit quaternion.","Rotate and translate a point by this unit dual quaternion …","Rotate the given point by this unit complex number.","Rotate the given point.","","Translate the given point.","Transform the given point by this isometry.","Transform the given point by this similarity.","Transform the given point by this transformation.","Apply the rotation to the given vector.","Rotate a vector by this unit quaternion.","Rotate a vector by this unit dual quaternion, ignoring …","Rotate the given vector by this unit complex number.","","Rotate the given vector.","Transform the given vector by this isometry, ignoring the …","Transform the given vector by this similarity, ignoring …","Transform the given vector by this transformation, …","Return the translation part of this unit dual quaternion.","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","The pure translational part of this isometry.","Transposes <code>self</code>.","Transposes <code>self</code> in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inverts this quaternion if it is not zero.","Inverts this dual quaternion if it is not zero.","Attempts to invert this transformation. You may use …","Inverts this quaternion in-place if it is not zero.","Inverts this dual quaternion in-place if it is not zero.","Attempts to invert this transformation in-place. You may …","Attempts to interpolate between two isometries using a …","Attempts to interpolate between two isometries using a …","Attempts to interpolate between two isometries using a …","Attempts to interpolate between two isometries using a …","Computes the screw-linear interpolation between two unit …","Computes the spherical linear interpolation between two …","Computes the spherical linear interpolation between two …","Computes the spherical linear interpolation between two …","","","","","","","","","","","","","","","","","","","","","","","Un-projects a point. Faster than multiplication by the …","Un-projects a point. Faster than multiplication by the …","","","Retrieves the underlying homogeneous matrix. Deprecated: …","Retrieves the underlying homogeneous matrix. Deprecated: …","Unwraps the underlying matrix. Deprecated: Use […","Retrieves the underlying matrix. Deprecated: Use […","The vector part <code>(i, j, k)</code> of this quaternion.","The translation coordinates, i.e., how much is added to a …","The mutable vector part <code>(i, j, k)</code> of this quaternion.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","","","The far plane offset of the view cuboid.","Gets the far plane offset of the view frustum.","The near plane offset of the view cuboid.","Gets the near plane offset of the view frustum.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","The bidiagonalization of a general matrix.","The Cholesky decomposition of a …","The QR decomposition (with column pivoting) of a general …","LU decomposition with full row and column pivoting.","Hessenberg decomposition of a general matrix.","LU decomposition with partial (row) pivoting.","A sequence of row or column permutations.","The QR decomposition of a general matrix.","Singular Value Decomposition of a general matrix.","Schur decomposition of a square matrix.","Eigendecomposition of a symmetric matrix.","Tridiagonalization of a symmetric matrix.","UDU factorization.","Adds the interchange of the row (or column) <code>i</code> with the …","Functions for balancing a matrix.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the complex eigenvalues of the decomposed matrix.","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","The diagonal matrix resulting from the factorization","Returns the diagonal elements as a matrix","","","","","","","","","","","","","","Computes the determinant of the decomposed matrix.","Computes the determinant of the decomposed matrix.","Computes the determinant of the decomposed matrix.","Computes the determinant of the decomposed matrix.","The determinant of the matrix corresponding to this …","The diagonal part of this decomposed matrix.","The diagonal components of this decomposition.","Computes the real eigenvalues of the decomposed matrix.","The unsorted eigenvalues of the decomposed matrix.","The eigenvectors of the decomposed matrix.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construction of givens rotations.","Retrieves the upper trapezoidal submatrix <code>H</code> of this …","Construction of householder elementary reflections.","Creates a new statically-allocated sequence of <code>D</code> identity …","Creates a new dynamically-allocated sequence of <code>n</code> …","Creates a new sequence of D identity permutations.","Updates the decomposition such that we get the …","","","","","","","","","","","","","","Applies this sequence of permutations in reverse to the …","Applies this sequence of permutations in reverse to the …","Computes the inverse of the decomposed matrix.","Returns true if the permutation sequence contains no …","","","","","","","","","","","","","","Indicates if the decomposed matrix is invertible.","Indicates if the decomposed matrix is invertible.","Indicates if the decomposed matrix is invertible.","Indicates if the decomposed matrix is invertible.","Indicates whether this decomposition contains an …","Retrieves the lower-triangular factor of the Cholesky …","The lower triangular matrix of this decomposition.","The lower triangular matrix of this decomposition.","Retrieves the lower-triangular factor of the Cholesky …","The lower triangular matrix of this decomposition.","The number of non-identity permutations applied by this …","Computes the Bidiagonal decomposition using householder …","Attempts to compute the Cholesky decomposition of <code>matrix</code>.","Computes the ColPivQR decomposition using householder …","Computes the LU decomposition with full pivoting of <code>matrix</code>…","Computes the Hessenberg decomposition using householder …","Computes the LU decomposition with partial (row) pivoting …","Computes the QR decomposition using householder …","Computes the Schur decomposition of a square matrix.","Computes the Singular Value Decomposition of <code>matrix</code> using …","Computes the eigendecomposition of the given symmetric …","Computes the tridiagonalization of the symmetric matrix <code>m</code>.","Computes the UDU^T factorization.","Computes the Cholesky decomposition of <code>matrix</code> without …","Computes the Hessenberg decomposition using householder …","The off-diagonal part of this decomposed matrix.","The off-diagonal components of this decomposition.","Retrieves the column permutation of this decomposition.","The row permutations of this decomposition.","The row permutations of this decomposition.","Applies this sequence of permutations to the columns of …","Applies this sequence of permutations to the rows of <code>rhs</code>.","Computes the pseudo-inverse of the decomposed matrix.","Computes the orthogonal matrix <code>Q</code> of this decomposition.","The column permutations of this decomposition.","Computes the orthogonal matrix <code>Q</code> of this decomposition.","Computes the orthogonal matrix <code>Q</code> of this decomposition.","Computes the orthogonal matrix <code>Q</code> of this decomposition.","Multiplies the provided matrix by the transpose of the <code>Q</code> …","Multiplies the provided matrix by the transpose of the <code>Q</code> …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Computes the rank of the decomposed matrix, i.e., the …","Given the Cholesky decomposition of a matrix <code>M</code>, a scalar …","Rebuild the original matrix.","Rebuild the original matrix.","Recomputes the original symmetric matrix.","Updates the decomposition such that we get the …","","","","","","","","","","","","","","The singular values of this SVD.","Returns the solution of the system <code>self * x = b</code> where <code>self</code>…","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the system <code>self * x = b</code> where <code>self</code> is the …","Solves the system <code>self * x = b</code> where <code>self</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the inverse of the decomposed matrix.","Computes the inverse of the decomposed matrix.","Computes the inverse of the decomposed matrix.","Computes the inverse of the decomposed matrix.","Computes the inverse of the decomposed matrix and outputs …","Performs a LU decomposition to overwrite <code>out</code> with the …","Attempts to compute the Schur decomposition of a square …","Attempts to compute the Singular Value Decomposition of …","Computes the eigendecomposition of the given symmetric …","","","","","","","","","","","","","","Computes the orthogonal matrix <code>U</code> of this <code>U * D * V</code> …","The upper triangular matrix of this decomposition.","The upper triangular matrix of this decomposition.","The left-singular vectors <code>U</code> of this SVD.","The upper triangular matrix resulting from the …","Unpacks this decomposition into its three matrix factors …","Retrieves the lower-triangular factor of the Cholesky …","Unpacks this decomposition into its two matrix factors.","The two matrices of this decomposition and the row and …","Retrieves <code>(q, h)</code> with <code>q</code> the orthogonal matrix of this …","The row permutations and two triangular matrices of this …","Unpacks this decomposition into its two matrix factors.","Retrieves the unitary matrix <code>Q</code> and the …","Retrieve the orthogonal transformation, diagonal, and off …","Retrieves the lower-triangular factor of the Cholesky …","Retrieves the upper trapezoidal submatrix <code>H</code> of this …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Retrieve the diagonal, and off diagonal elements of this …","Computes the orthogonal matrix <code>V_t</code> of this <code>U * D * V_t</code> …","The right-singular vectors <code>V^t</code> of this SVD.","Computes the wilkinson shift, i.e., the 2x2 symmetric …","Applies in-place a modified Parlett and Reinsch matrix …","Computes in-place <code>D * m * D.inverse()</code>, where <code>D</code> is the …","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Computes the matrix determinant.","Computes exponential of this matrix","A Givens rotation.","","","The cos part of this roration.","Computes the rotation <code>R</code> required such that the <code>x</code> …","Computes the rotation <code>R</code> required such that the <code>y</code> …","","","","","","The Givents rotation that does nothing.","","The inverse of this givens rotation.","","Initializes a Givens rotation from its non-normalized …","Initializes a Givens rotation from its components.","Performs the multiplication <code>rhs = self * rhs</code> in-place.","Performs the multiplication <code>lhs = lhs * self</code> in-place.","The sin part of this roration.","","","","","","Initializes a Givens rotation form its non-normalized …","","Attempts to invert this matrix.","Attempts to invert this matrix in-place. Returns <code>false</code> …","Computes the eigenvalues of this matrix.","Computes the eigenvalues of this matrix.","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the eigenvalues of this symmetric matrix."],"i":[0,0,0,0,0,0,1,0,0,2,0,1,0,0,0,3,0,0,2,4,5,6,7,2,4,2,4,4,4,4,4,4,4,4,4,8,8,8,2,4,4,2,4,2,4,2,4,9,2,4,0,8,4,4,2,4,2,4,0,0,9,4,4,4,2,4,0,0,0,0,9,2,4,2,2,4,2,5,6,4,5,6,7,5,6,7,5,6,7,4,0,0,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,10,10,11,11,4,4,4,4,12,12,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,4,4,4,4,9,5,6,7,4,2,4,2,4,2,4,1,13,5,7,4,1,13,5,7,4,2,4,5,6,7,4,4,4,4,4,4,4,4,9,9,9,9,9,9,9,9,2,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,15,15,15,15,16,16,16,16,16,17,18,19,20,21,21,21,22,23,24,25,26,27,28,29,30,5,5,5,5,5,6,7,7,7,7,7,11,4,4,4,4,4,4,4,4,4,4,4,4,2,4,3,4,4,4,4,4,4,4,4,4,4,4,13,29,30,30,5,5,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,10,11,4,4,4,4,4,4,4,0,4,2,4,4,5,7,8,8,8,4,2,4,0,0,4,4,4,5,7,5,7,5,7,5,7,0,2,4,4,13,29,30,30,5,5,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,10,11,4,4,4,4,4,4,9,9,13,4,4,1,13,5,7,4,0,2,4,9,2,4,9,2,4,2,4,9,2,4,9,1,0,9,13,0,9,13,2,4,2,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,10,10,11,11,4,4,4,4,2,4,4,4,4,12,12,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,4,4,4,4,4,6,4,4,8,13,4,2,4,4,13,4,0,13,5,6,7,4,8,0,0,0,0,0,0,0,0,0,9,2,4,2,4,2,4,4,4,13,13,4,4,4,2,4,2,4,5,6,7,4,4,4,4,4,4,4,4,1,13,5,7,4,1,13,5,7,4,2,4,2,4,4,13,4,1,13,5,7,4,4,4,4,2,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,31,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,32,3,4,4,4,4,4,4,4,4,31,3,4,4,4,4,4,4,4,4,3,4,3,4,4,4,4,4,4,4,4,3,4,31,31,32,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,31,31,31,31,31,31,31,31,3,4,4,4,4,4,4,4,4,32,32,32,32,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,32,3,4,4,4,4,4,4,4,4,31,3,4,4,4,4,4,4,4,4,31,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,31,3,4,4,4,4,4,4,4,4,31,32,32,32,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,32,3,4,4,4,4,4,4,4,4,31,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,3,4,3,4,4,4,4,4,4,4,4,31,3,4,4,4,4,4,4,4,4,2,4,2,4,2,2,4,2,4,2,1,13,5,7,4,2,4,4,4,4,4,4,4,4,4,13,13,13,13,4,4,0,2,4,2,4,2,4,4,4,4,4,4,4,4,4,2,4,4,4,13,29,30,30,5,5,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,10,11,4,4,4,4,4,4,4,5,7,5,7,2,4,0,0,4,4,2,4,9,4,5,6,7,0,2,4,4,13,4,0,8,0,13,4,1,33,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,37,18,37,37,37,38,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,37,37,37,38,38,38,38,38,39,37,39,37,39,37,39,37,39,37,39,37,37,37,37,37,40,37,40,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,34,37,41,42,42,38,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,34,37,43,41,42,42,42,42,40,37,38,38,38,40,37,18,37,18,37,36,37,44,33,45,34,37,43,41,38,42,44,33,45,34,37,43,41,38,42,37,37,37,37,38,38,38,37,37,34,37,43,38,42,34,37,43,38,42,34,37,43,41,42,42,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,37,37,37,37,37,37,37,37,37,37,37,38,38,38,37,38,38,38,37,37,37,0,37,37,37,0,37,37,38,37,40,37,37,34,37,0,37,38,37,38,37,38,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,34,37,38,42,37,39,37,0,37,37,37,37,37,37,38,37,36,34,37,37,38,42,38,37,38,37,37,37,42,42,42,42,16,37,38,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,34,37,37,37,37,37,37,37,37,37,43,41,38,42,37,37,44,33,45,34,37,37,37,37,37,37,37,43,41,38,38,38,38,38,42,38,16,37,38,38,38,13,13,13,13,37,37,37,37,13,37,13,37,38,38,38,37,37,13,37,13,13,13,13,37,37,37,37,13,37,13,13,13,13,37,37,37,37,13,37,16,37,38,13,13,13,13,37,37,37,37,13,37,40,37,38,13,13,13,13,37,37,37,37,13,37,38,38,38,38,13,13,13,13,37,37,37,37,13,37,38,38,43,41,38,38,38,38,13,13,13,13,37,37,37,37,13,37,13,37,16,37,38,38,38,46,46,46,46,21,21,21,21,37,37,37,37,37,37,37,37,46,21,37,37,46,21,37,37,46,46,46,46,21,21,21,21,37,37,37,37,37,37,37,37,21,21,21,21,37,37,37,37,46,21,37,37,46,21,37,37,46,46,46,46,37,37,37,37,46,46,46,46,21,21,21,21,37,37,37,37,37,37,37,37,44,33,45,34,37,43,41,38,42,37,13,13,13,13,37,37,37,37,13,37,37,37,37,37,37,40,37,40,37,40,37,40,37,37,37,37,37,37,37,37,37,37,37,37,37,34,37,38,40,37,37,39,37,37,40,37,37,40,37,40,37,37,13,13,13,13,37,37,37,37,38,38,38,13,37,40,37,40,37,37,37,37,37,37,37,0,37,37,47,47,37,37,37,37,37,37,37,37,44,33,45,34,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,43,41,38,42,42,38,34,37,43,41,42,42,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,47,47,34,43,41,42,42,37,42,37,44,33,45,34,37,43,41,38,42,39,37,37,39,37,37,38,0,37,37,18,37,18,37,37,37,37,42,40,37,38,38,38,16,37,38,16,37,38,37,37,37,37,37,37,37,39,37,37,37,37,38,48,44,33,45,37,37,37,37,37,37,37,37,37,37,37,37,37,37,34,42,37,38,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,38,42,38,38,13,37,15,16,37,37,38,16,37,38,16,37,16,37,15,16,37,37,16,37,13,37,13,37,43,41,38,13,13,13,13,37,37,37,37,13,37,43,41,38,38,48,35,44,33,45,37,35,37,37,37,37,18,37,18,37,37,37,37,37,38,38,39,37,39,37,39,37,39,37,39,37,39,37,37,34,43,41,42,42,34,41,42,42,40,37,37,39,37,39,37,39,37,39,37,38,37,37,37,38,37,37,37,37,37,37,37,37,37,37,38,38,13,13,13,13,37,37,37,37,13,37,34,37,42,42,42,42,37,42,37,37,13,37,13,37,37,13,37,38,38,38,38,38,38,38,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,35,37,38,38,38,38,38,38,37,38,37,37,34,37,38,42,37,37,37,37,37,34,37,43,41,42,42,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,37,36,40,37,38,38,38,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,34,37,43,41,42,42,37,37,37,37,37,37,37,37,37,37,37,37,40,37,37,37,37,39,37,37,38,40,37,37,38,38,38,38,34,37,43,38,42,38,38,37,38,44,33,45,34,37,43,41,38,42,44,33,45,34,37,43,41,38,42,37,37,37,37,37,37,37,37,37,37,37,37,39,37,39,39,37,37,38,38,38,39,37,38,38,38,38,37,37,37,44,33,45,34,37,43,41,38,42,44,33,45,34,37,43,41,38,42,37,37,38,38,37,37,37,38,37,38,38,37,37,44,33,45,34,37,43,41,38,42,37,37,38,37,35,37,38,37,37,37,40,37,40,37,18,37,18,37,18,37,18,37,40,37,40,37,40,37,40,37,40,37,40,37,40,37,40,37,40,37,40,37,40,37,40,37,18,37,18,37,40,37,40,37,40,37,40,37,40,37,40,37,40,37,40,37,40,37,40,37,40,37,40,37,18,37,18,37,13,13,13,13,37,37,37,37,13,37,37,37,37,37,37,40,37,40,37,40,37,40,37,40,37,40,37,40,37,40,37,40,37,40,37,40,37,40,37,0,49,0,0,0,0,0,49,49,50,0,0,51,52,53,54,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,57,57,58,59,60,61,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,58,59,60,61,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,58,59,60,61,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,58,59,60,61,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,58,59,60,61,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,58,59,60,61,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,58,59,60,61,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,58,59,60,61,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,58,59,60,61,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,58,59,60,61,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,62,58,59,60,61,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,58,59,60,61,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,62,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,64,65,66,67,69,70,71,72,74,75,76,77,79,80,81,82,84,85,86,87,65,66,67,70,71,72,75,76,77,80,81,82,85,86,87,66,67,71,72,76,77,81,82,86,87,67,72,77,82,87,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,64,65,66,67,69,70,71,72,74,75,76,77,79,80,81,82,84,85,86,87,65,66,67,70,71,72,75,76,77,80,81,82,85,86,87,66,67,71,72,76,77,81,82,86,87,67,72,77,82,87,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,69,70,71,72,74,75,76,77,79,80,81,82,84,85,86,87,70,71,72,75,76,77,80,81,82,85,86,87,71,72,76,77,81,82,86,87,72,77,82,87,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,74,75,76,77,79,80,81,82,84,85,86,87,75,76,77,80,81,82,85,86,87,76,77,81,82,86,87,77,82,87,78,79,80,81,82,83,84,85,86,87,78,79,80,81,82,83,84,85,86,87,79,80,81,82,84,85,86,87,80,81,82,85,86,87,81,82,86,87,82,87,83,84,85,86,87,83,84,85,86,87,84,85,86,87,85,86,87,86,87,87,58,59,60,61,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,58,59,60,61,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,58,59,60,61,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,58,59,60,61,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,58,59,60,61,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,58,59,60,61,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,58,59,60,61,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,58,59,60,61,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,61,56,57,62,58,59,60,61,56,57,59,60,61,56,57,60,61,56,57,0,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,91,92,93,94,95,96,97,98,99,100,101,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,90,91,104,104,105,105,105,104,105,104,105,104,105,104,105,104,105,103,105,96,97,104,105,105,105,104,105,104,105,104,105,104,105,106,104,105,105,104,105,106,104,105,100,101,104,105,105,105,98,99,104,105,105,105,92,93,104,105,105,105,103,105,104,104,104,105,94,95,104,104,105,105,105,104,105,104,105,104,105,104,105,104,105,106,104,105,104,105,106,104,105,0,0,107,108,0,0,0,0,0,0,109,110,111,112,113,114,109,110,111,112,113,114,113,114,113,114,109,110,111,112,113,114,109,110,111,112,113,114,109,110,111,112,113,114,109,110,111,112,113,114,109,110,111,112,113,114,109,110,111,112,113,114,109,110,111,112,113,114,111,112,109,110,111,112,113,114,111,112,109,110,111,112,113,114,113,114,109,110,111,112,113,114,109,110,111,112,113,114,109,110,111,112,113,114,109,110,111,112,113,114,109,110,111,112,113,114,0,115,0,0,116,0,0,115,0,0,0,0,117,115,115,115,115,117,117,115,115,117,117,115,115,115,115,117,116,115,115,117,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,120,121,122,123,124,125,126,121,121,119,119,121,121,122,122,119,119,121,121,122,122,29,30,5,7,120,120,29,30,5,7,120,120,5,124,125,124,125,124,125,125,125,124,125,119,127,128,122,127,128,122,121,121,121,121,128,121,121,30,5,129,120,30,5,7,120,129,127,128,119,120,121,122,123,124,125,130,131,132,126,129,127,128,119,120,121,122,123,124,125,130,131,132,126,127,5,6,7,133,11,134,135,119,120,121,122,123,124,124,124,124,125,125,125,125,136,130,131,132,127,128,119,120,121,122,123,124,125,130,131,132,126,127,128,119,120,121,122,123,124,125,130,131,132,126,121,126,7,5,6,7,121,122,5,6,7,121,122,119,121,121,7,121,121,122,119,120,121,122,123,124,125,126,119,120,121,122,123,124,125,126,119,120,121,122,123,124,125,126,119,119,119,119,119,119,121,123,123,123,123,123,123,119,119,119,119,119,119,121,123,123,123,123,123,123,127,128,119,120,121,122,123,124,125,126,119,120,120,120,120,120,120,120,120,120,120,120,120,121,122,122,122,123,123,123,123,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,119,120,120,120,120,121,122,122,122,123,123,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,121,122,6,127,128,119,120,121,122,123,124,125,130,131,132,126,30,5,120,5,121,121,119,120,121,123,124,125,126,119,120,121,123,124,125,126,30,5,11,135,120,124,124,125,125,127,128,119,119,120,120,121,121,122,123,123,124,124,125,125,130,131,132,126,128,129,127,128,119,119,119,119,119,119,120,120,120,120,120,121,121,121,121,121,121,121,122,123,123,123,123,123,123,124,124,124,124,124,124,125,125,125,125,125,130,131,132,126,7,30,5,120,29,30,5,7,120,120,7,7,119,7,30,5,120,127,119,121,6,125,29,30,5,7,120,120,29,30,5,7,120,120,127,128,120,126,6,121,124,125,121,5,121,122,122,6,5,7,29,30,5,7,120,120,5,125,119,129,127,128,119,120,121,122,123,124,125,130,131,132,126,119,119,120,120,120,120,120,121,122,123,123,123,123,123,124,124,124,124,125,125,125,126,126,121,123,119,119,119,119,121,136,136,132,119,120,121,123,124,125,130,131,132,137,5,6,7,120,120,121,122,123,124,125,126,121,119,120,121,122,126,119,121,122,126,119,119,121,129,127,128,119,120,121,122,123,124,125,130,131,132,126,127,128,120,126,121,124,137,5,6,7,127,128,120,120,123,124,125,126,137,5,6,7,120,120,123,124,125,126,137,5,6,7,120,120,123,124,125,126,137,137,5,6,7,120,120,124,137,5,6,7,120,120,124,125,126,119,129,127,128,119,119,119,120,120,120,120,120,120,121,121,122,122,123,123,123,123,123,123,124,124,124,124,124,125,125,125,125,130,131,132,126,126,126,121,121,122,125,6,119,119,119,120,121,123,124,125,126,119,127,121,119,5,6,121,122,133,11,134,135,124,124,124,124,5,121,30,5,11,135,120,124,124,125,125,30,5,11,135,120,124,124,125,125,119,121,121,119,120,126,120,126,120,126,119,5,119,119,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,121,121,121,122,122,122,122,122,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,119,120,120,120,120,121,121,121,122,122,122,122,122,123,123,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,122,119,121,122,23,24,25,26,27,28,29,30,5,7,133,11,134,135,129,127,128,119,119,119,119,119,119,120,120,121,123,123,123,123,123,123,124,124,124,124,125,125,125,125,129,5,11,135,124,124,30,5,120,125,125,119,5,6,121,121,122,121,121,122,121,122,121,122,120,121,122,123,124,125,126,119,121,119,121,29,30,5,7,120,120,121,125,125,121,127,128,127,128,121,5,122,129,129,129,129,121,119,120,121,122,123,124,125,126,29,30,120,120,119,120,121,123,124,125,126,119,120,121,123,124,125,126,127,121,6,133,11,134,135,124,124,124,124,124,29,30,5,7,120,120,5,7,29,30,5,7,120,120,124,125,121,121,122,29,30,5,7,120,120,29,30,5,7,120,120,5,7,125,6,119,120,121,123,124,125,126,127,128,119,120,121,122,123,124,125,126,128,127,127,126,128,127,127,127,125,127,127,128,127,128,127,128,119,119,119,119,119,119,119,119,119,119,119,121,121,7,121,29,30,5,7,120,120,119,120,121,123,124,125,126,121,121,119,119,119,119,119,121,121,122,122,119,119,121,121,122,122,119,119,121,121,30,5,120,5,6,7,127,128,119,120,123,124,125,126,6,124,127,128,119,120,121,122,123,124,125,130,131,132,126,127,128,5,7,119,120,121,123,124,125,129,127,128,119,120,121,122,123,124,125,130,131,132,126,129,127,128,119,120,121,122,123,124,125,130,131,132,126,119,119,120,120,120,120,120,121,122,123,123,123,123,123,124,124,124,124,125,125,125,126,126,127,137,5,6,7,120,120,123,124,125,126,137,5,6,7,120,120,124,125,126,6,133,11,134,135,124,124,124,124,124,120,120,129,127,128,119,120,121,122,123,124,125,130,131,132,126,129,127,128,119,120,121,122,123,124,125,130,131,132,126,121,122,126,121,122,126,11,135,124,124,6,30,5,120,129,127,128,119,120,121,122,123,124,125,130,131,132,126,119,120,121,122,123,124,125,126,127,128,121,122,127,128,120,126,121,123,121,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,121,122,127,128,127,128,119,119,119,119,119,119,119,119,119,119,119,119,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,139,140,141,142,143,144,138,145,146,147,148,149,150,139,140,141,142,143,144,138,145,146,147,148,149,150,139,140,141,142,143,144,138,145,146,147,148,149,150,139,140,141,142,143,144,138,145,146,147,148,149,150,146,139,150,150,139,140,141,142,143,144,138,145,146,147,148,149,150,140,141,142,144,138,139,149,146,148,148,139,140,141,142,143,144,138,145,146,147,148,149,150,139,140,141,142,143,144,138,145,146,147,148,149,150,139,140,141,142,143,144,138,145,146,147,148,149,150,0,143,0,138,138,138,140,139,140,141,142,143,144,138,145,146,147,148,149,150,138,138,140,138,139,140,141,142,143,144,138,145,146,147,148,149,150,141,142,144,145,139,140,142,144,140,144,138,139,140,141,142,143,144,145,146,147,148,149,150,140,143,139,149,141,142,144,138,138,147,141,142,143,145,149,141,145,141,145,147,140,147,148,149,140,139,140,141,142,143,144,138,145,146,147,148,149,150,147,140,141,142,144,145,147,140,141,142,144,145,139,140,141,142,143,144,138,145,146,147,148,149,150,139,140,141,142,143,144,138,145,146,147,148,149,150,139,140,141,142,143,144,138,145,146,147,148,149,150,139,140,141,142,143,144,138,145,146,147,148,149,150,139,140,141,142,143,144,138,145,146,147,148,149,150,141,142,144,145,144,0,146,147,148,139,140,141,142,143,144,138,145,146,147,148,149,150,139,142,144,147,150,139,140,141,142,143,144,145,146,149,140,143,141,145,149,139,147,0,0,0,40,40,40,39,13,0,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["signed",8]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[["complex",3]]],[[]],[[]],[[["complex",3]]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],null,[[],["u64",15]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[["point",3],["point",3]],[["point",3],["simdcomplexfield",8]]],[[["partialord",8]],["partialord",8]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[],["supersetof",8]],[[],["supersetof",8]],[[]],[[["supersetof",8]]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],[["complex",3],["result",4]]],[[["point",3],["point",3]]],[[["point",3],["point",3]]],[[["similarity",3]]],[[["similarity",3],["unitquaternion",6]]],[[["isometry",3]]],[[["unitquaternion",6],["isometry",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitdualquaternion",6]]],[[["transform",3]]],[[["unitdualquaternion",6]]],[[["transform",3]]],[[["translation3",6]]],[[["translation3",6]]],[[["isometry3",6]]],[[["isometry3",6]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["rotation",3]]],[[]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["complex",3]]],[[]],[[["complex",3]]],[[]],[[["rotation",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["isometry3",6]]],[[["translation3",6]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["translation3",6]]],[[["isometry3",6]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["rotation",3]]],[[["complex",3]]],[[]],[[["complex",3]]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["complex",3]],["bool",15]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["complex",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["transform",3]]],[[]],[[]],[[["similarity",3]]],[[["isometry",3]]],[[["translation",3]]],[[]],[[]],[[]],[[]],[[["rotation2",6]]],[[["unitcomplex",6]]],[[["rotation2",6]]],[[["rotation3",6]]],[[["unitquaternion",6]]],[[["unitcomplex",6]],["matrix3",6]],[[["orthographic3",3]]],[[["rotation3",6]]],[[["perspective3",3]]],[[["unitdualquaternion",6]]],[[["unitquaternion",6]]],[[["vec",3]]],[[["point",3]]],[[]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[["matrixslicemut",6]]],[[["matrix",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["unitcomplex",6]]],[[["unitquaternion",6]]],[[["rotation3",6]]],[[]],[[]],[[]],[[]],[[["isometry3",6]]],[[]],[[["rotation2",6]]],[[]],[[]],[[]],[[["unitdualquaternion",6]]],[[],["complex",3]],[[],["complex",3]],[[]],[[],[["complex",3],["option",4]]],[[["f32",15]],[["complex",3],["option",4]]],[[["f64",15]],[["complex",3],["option",4]]],[[["i128",15]],[["complex",3],["option",4]]],[[["i16",15]],[["complex",3],["option",4]]],[[["i32",15]],[["complex",3],["option",4]]],[[["i64",15]],[["complex",3],["option",4]]],[[["i8",15]],[["complex",3],["option",4]]],[[["isize",15]],[["complex",3],["option",4]]],[[]],[[],["complex",3]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[["str",15]],[["result",4],["complex",3]]],[[["u32",15],["str",15]],[["result",4],["complex",3]]],[[]],[[["omatrix",6]]],[[["unitcomplex",6]]],[[["unitdualquaternion",6]]],[[["unitquaternion",6]]],[[["matrix4",6]]],[[["unitquaternion",6]]],[[["rotation3",6]]],[[["isometry",3]]],[[["unitdualquaternion",6]]],[[["similarity",3]]],[[["transform",3]]],[[["unitdualquaternion",6]]],[[["matrix4",6]]],[[["isometry3",6]]],[[["similarity3",6]]],[[["transform",3]]],[[["transform",3]]],[[["similarity",3]]],[[["matrix3",6]]],[[["unitcomplex",6]]],[[["isometry",3]]],[[["rotation2",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["complex",3]],["complex",3]],[[["u128",15]],[["complex",3],["option",4]]],[[["u16",15]],[["complex",3],["option",4]]],[[["u32",15]],[["complex",3],["option",4]]],[[["u64",15]],[["complex",3],["option",4]]],[[["u8",15]],[["complex",3],["option",4]]],[[["usize",15]],[["complex",3],["option",4]]],null,[[]],[[]],[[["complex",3]]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[["omatrix",6]],[["omatrix",6],["dim",8]]],[[["omatrix",6]]],[[]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["svector",6]],["svector",6]],[[["svector",6]],["svector",6]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["omatrix",6]],["bool",15]],[[["unitcomplex",6]],["bool",15]],[[["unitdualquaternion",6]],["bool",15]],[[["unitquaternion",6]],["bool",15]],[[["unitquaternion",6]],["bool",15]],[[["rotation3",6]],["bool",15]],[[["isometry",3]],["bool",15]],[[["transform",3]],["bool",15]],[[["unitdualquaternion",6]],["bool",15]],[[["matrix4",6]],["bool",15]],[[["similarity",3]],["bool",15]],[[["similarity3",6]],["bool",15]],[[["transform",3]],["bool",15]],[[["unitdualquaternion",6]],["bool",15]],[[["matrix4",6]],["bool",15]],[[["isometry3",6]],["bool",15]],[[["isometry",3]],["bool",15]],[[["rotation2",6]],["bool",15]],[[["similarity",3]],["bool",15]],[[["transform",3]],["bool",15]],[[["unitcomplex",6]],["bool",15]],[[["matrix3",6]],["bool",15]],[[["unitdualquaternion",6]],["bool",15]],[[["unitdualquaternion",6]],["bool",15]],[[],["bool",15]],[[["complex",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[["ord",8]],["ord",8]],[[]],[[]],[[["ord",8]],["ord",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[["unitquaternion",6]]],[[["isometry",3],["unitquaternion",6]]],[[["transform",3]]],[[["rotation",3]]],[[["transform",3]]],[[["vector",6]]],[[["vector",6],["u3",6]]],[[["point3",6]]],[[["point3",6]]],[[["unit",3]]],[[["similarity",3]]],[[["unit",3],["vector",6]]],[[["rotation",3]]],[[["unitdualquaternion",6]]],[[["unitquaternion",6],["similarity",3]]],[[["isometry",3]]],[[["unitdualquaternion",6]]],[[["translation",3]]],[[["unitquaternion",6]]],[[["translation",3]]],[[["dualquaternion",3]]],[[["isometry3",6]]],[[["unitquaternion",6]]],[[["unit",3],["vector",6]]],[[["unit",3]]],[[["unitquaternion",6]]],[[["point3",6]]],[[["point3",6]]],[[["dualquaternion",3]]],[[["vector",6],["u3",6]]],[[["vector",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["isometry3",6]]],[[["translation3",6]]],[[["translation3",6]]],[[["similarity",3]]],[[["const",3],["vector",6]]],[[["point2",6]]],[[["point2",6]]],[[["translation",3]]],[[["vector",6]]],[[["unit",3],["vector",6]]],[[["unit",3]]],[[["isometry",3],["unitcomplex",6]]],[[["isometry",3]]],[[["similarity",3],["unitcomplex",6]]],[[["rotation",3]]],[[["translation",3]]],[[]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["complex",3]]],[[]],[[]],[[["complex",3]]],[[]],[[["complex",3]],["complex",3]],[[["complex",3]],["complex",3]],[[["complex",3]]],[[["complex",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["unitdualquaternion",6]]],[[["translation3",6]]],[[["translation3",6]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["isometry3",6]]],[[["isometry3",6]]],[[["unitdualquaternion",6]]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitcomplex",6]]],[[]],[[["complex",3]]],[[]],[[["complex",3]]],[[["complex",3]],["bool",15]],[[]],[[]],[[],["complex",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["one",8]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[],["bool",15]],[[],["option",4]],[[],[["option",4],["ordering",4]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[["complex",3]],["complex",3]],[[]],[[],["complex",3]],[[["i32",15]]],[[["i32",15]],["complex",3]],[[["i32",15]],["complex",3]],[[["u32",15]],["complex",3]],[[["iterator",8]],["omatrix",6]],[[["iterator",8]],["omatrix",6]],[[],["complex",3]],[[],["complex",3]],null,[[]],[[]],[[]],[[],["complex",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["complex",3]]],[[]],[[["complex",3]]],[[]],[[]],[[["complex",3]]],[[["complex",3]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complex",3]],["complex",3]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["autosimd",3],["complex",3]]],[[["autosimd",3],["complex",3]]],[[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]]],[[["autosimd",3],["complex",3]]],[[["autosimd",3],["complex",3]]],[[]],[[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[["autosimd",3]],[["autosimd",3],["complex",3]]],[[["autosimd",3]],[["autosimd",3],["complex",3]]],[[["autosimd",3]],[["autosimd",3],["complex",3]]],[[["autosimd",3]],[["autosimd",3],["complex",3]]],[[["autosimd",3]],[["autosimd",3],["complex",3]]],[[]],[[["autosimd",3]],[["autosimd",3],["complex",3]]],[[["autosimd",3]],[["autosimd",3],["complex",3]]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complex",3],["autosimd",3]],[["autosimd",3],["complex",3]]],[[["autosimd",3],["complex",3]],[["autosimd",3],["complex",3]]],[[["autosimd",3],["complex",3]],[["autosimd",3],["complex",3]]],[[]],[[["autosimd",3],["complex",3]],[["autosimd",3],["complex",3]]],[[["autosimd",3],["complex",3]],[["autosimd",3],["complex",3]]],[[["complex",3],["autosimd",3]],[["autosimd",3],["complex",3]]],[[["autosimd",3],["complex",3]],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complex",3],["autosimd",3]],[["autosimd",3],["complex",3]]],[[["autosimd",3],["complex",3]],[["autosimd",3],["complex",3]]],[[["complex",3],["autosimd",3]],[["autosimd",3],["complex",3]]],[[["autosimd",3],["complex",3]],[["autosimd",3],["complex",3]]],[[]],[[["autosimd",3],["complex",3]],[["autosimd",3],["complex",3]]],[[["autosimd",3],["complex",3]],[["autosimd",3],["complex",3]]],[[["autosimd",3],["complex",3]],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[["i32",15]]],[[["i32",15]],[["autosimd",3],["complex",3]]],[[["i32",15]],[["autosimd",3],["complex",3]]],[[["i32",15]],[["autosimd",3],["complex",3]]],[[["i32",15]],[["autosimd",3],["complex",3]]],[[["i32",15]]],[[["i32",15]],[["autosimd",3],["complex",3]]],[[["i32",15]],[["autosimd",3],["complex",3]]],[[["i32",15]],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[]],[[["complex",3]]],[[["complex",3]]],[[]],[[["iterator",8]],["omatrix",6]],[[["iterator",8]],[["omatrix",6],["dynamic",3]]],[[["iterator",8]],["omatrix",6]],[[["iterator",8]],[["omatrix",6],["dynamic",3]]],[[],["complex",3]],[[],["complex",3]],[[["omatrix",6]],[["omatrix",6],["dim",8]]],[[]],[[],["complex",3]],[[]],[[],["complex",3]],[[]],[[],[["option",4],["f32",15]]],[[],[["option",4],["f64",15]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["i32",15],["option",4]]],[[],[["option",4],["i64",15]]],[[],[["option",4],["i8",15]]],[[],[["option",4],["isize",15]]],[[]],[[]],[[],["string",3]],[[],["option",4]],[[]],[[],["omatrix",6]],[[],["unitcomplex",6]],[[],["unitdualquaternion",6]],[[],["unitquaternion",6]],[[],["unitquaternion",6]],[[],["rotation3",6]],[[],["similarity",3]],[[],["isometry",3]],[[],["transform",3]],[[],["matrix4",6]],[[],["unitdualquaternion",6]],[[],["similarity3",6]],[[],["transform",3]],[[],["isometry3",6]],[[],["unitdualquaternion",6]],[[],["matrix4",6]],[[],["matrix3",6]],[[],["similarity",3]],[[],["transform",3]],[[],["unitcomplex",6]],[[],["isometry",3]],[[],["rotation2",6]],[[],["unitdualquaternion",6]],[[],["unitdualquaternion",6]],[[],["complex",3]],[[],[["u128",15],["option",4]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["u64",15],["option",4]]],[[],[["option",4],["u8",15]]],[[],[["option",4],["usize",15]]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["svector",6]],["svector",6]],[[["svector",6]],["svector",6]],[[]],[[],["complex",3]],[[["supersetof",8]],["option",4]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["option",4]],[[],[["option",4],["complex",3]]],[[]],[[],["typeid",3]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],null,[[]],[[],["complex",3]],[[],["complex",3]],[[]],[[]],[[]],[[],["bool",15]],[[],["zero",8]],[[]],[[],["complex",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["unit",3]],[[],["unit",3]],[[],["omatrix",6]],[[],["bool",15]],[[],["bool",15]],[[["matrix",3]],[["omatrix",6],["dim",8]]],[[["matrix",3],["matrix",3]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["omatrix",6],["dim",8]]],[[["matrix",3]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["omatrix",6],["dim",8]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[],["omatrix",6]],[[]],[[["matrix",3],["matrix",3]]],[[],["omatrix",6]],[[]],[[["matrix",3]]],null,[[]],[[]],[[["matrix",3]]],[[]],[[]],[[]],[[]],[[["vector3",6]]],[[["vector",6]],["omatrix",6]],[[["vector",6]],["omatrix",6]],[[["vector",6]]],[[["vector",6]]],[[],["omatrix",6]],[[],["omatrix",6]],[[]],[[]],[[["vector",6]],["omatrix",6]],[[["vector",6]],["omatrix",6]],[[["vector",6]]],[[["vector",6]]],[[["fnmut",8]]],[[["fnmut",8]]],[[["matrixvec",3]],[[],["vec",3]],[[["vector",6]]],[[["vector",6]]],[[],[["unit",3],["option",4]]],[[],["option",4]],[[],["option",4]],[[["vector",6]]],[[["vector",6]]],[[]],[[]],[[],["unit",3]],[[],["unit",3]],[[],["usize",15]],[[],["bidiagonal",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["omatrix",6]],[[],[["scalar",8],["omatrix",6]]],[[],[["scalar",8],["unitquaternion",6]]],[[],[["scalar",8],["unitcomplex",6]]],[[],[["scalar",8],["unitdualquaternion",6]]],[[["matrix",3],["matrix",3]]],[[],[["option",4],["cholesky",3]]],[[],["arraystorage",3]],[[],["matrix",3]],[[]],[[],["unit",3]],[[],["vecstorage",3]],[[]],[[]],[[]],[[]],[[]],[[],[["const",3],["const",3],["owned",6]]],[[],["omatrix",6]],[[],["owned",6]],[[],["owned",6]],[[],[["owned",6],["dynamic",3]]],[[],[["dynamic",3],["owned",6]]],[[],["matrixsum",6]],[[["matrix",3],["matrix",3]]],[[],["colpivqr",3]],[[["usize",15]],[["matrixslice",6],["u1",6]]],[[],["columniter",3]],[[],["columnitermut",3]],[[],["ovector",6]],[[["usize",15]],[["u1",6],["matrixslicemut",6]]],[[["usize",15]],[["u1",6],["matrixslice",6],["dynamic",3]]],[[["usize",15]],[["u1",6],["matrixslicemut",6],["dynamic",3]]],[[],["ovector",6]],[[],["ovector",6]],[[["usize",15]],[["matrixslice",6],["dynamic",3]]],[[["usize",15],["dim",8]],[["dim",8],["matrixslice",6]]],[[["usize",15],["dim",8]],[["matrixslicemut",6],["dim",8]]],[[["usize",15],["dim",8]],[["matrixslice",6],["dim",8],["dynamic",3]]],[[["usize",15],["dim",8]],[["matrixslicemut",6],["dim",8],["dynamic",3]]],[[["usize",15]],[["matrixslicemut",6],["dynamic",3]]],[[["slicerange",8]],["matrixslice",6]],[[["slicerange",8]],["matrixslicemut",6]],[[["slicerange",8]]],[[["slicerange",8]]],[[["usize",15]],[["matrixslice",6],["dynamic",3]]],[[["usize",15]],[["matrixslicemut",6],["dynamic",3]]],[[],["complex",3]],[[],[["numcomplex",3],["ovector",6]]],[[["matrix",3]],["matrixsum",6]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]],["matrixsum",6]],[[["matrix",3]]],[[["matrix",3]]],[[["ovector",6]],["ovector",6]],[[],["rowovector",6]],[[],["ovector",6]],[[],["omatrix",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["omatrix",6]],[[["matrix",3]]],null,[[["vector",6]],[["ovector",6],["dimdiff",6]]],[[["vector",6]],["ovector",6]],[[["vector",6]],[["ovector",6],["dimdiff",6]]],null,[[["matrix",3]]],[[]],[[]],[[["matrix",3]],["matrixcross",6]],[[],[["omatrix",6],["u3",6]]],[[],[["omatrix",6],["u3",6]]],null,[[]],[[]],null,[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["ovector",6]],[[],["ovector",6]],null,[[["rotation",3]]],[[["rotation",3]]],[[]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[],["dualquaternion",3]],[[],[["option",4],["ovector",6]]],[[],["usize",15]],[[["arraystorage",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[],["bool",15]],[[["vecstorage",3]],["bool",15]],[[]],[[]],[[],["quaternion",3]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["vector",6],["vector",6]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]],[["const",3],["matrixslice",6]]],[[["usize",15]],[["const",3],["matrixslicemut",6]]],[[["usize",15]],[["dynamic",3],["matrixslice",6],["const",3]]],[[["usize",15]],[["matrixslicemut",6],["dynamic",3],["const",3]]],[[],[["const",3],["const",3],["omatrix",6]]],[[["usize",15]],[["matrixslice",6],["const",3]]],[[["usize",15]],[["matrixslicemut",6],["const",3]]],[[["usize",15]],[["matrixslice",6],["const",3],["dynamic",3]]],[[["usize",15]],[["matrixslicemut",6],["const",3],["dynamic",3]]],[[["usize",15]],[["const",3],["const",3],["matrixslice",6]]],[[["usize",15]],[["const",3],["const",3],["matrixslicemut",6]]],[[],[["matrixslice",6],["const",3],["const",3],["dynamic",3]]],[[],[["matrixslicemut",6],["const",3],["const",3],["dynamic",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["matrixslice",6],["dynamic",3]]],[[["matrixslice",6],["dynamic",3]]],[[["const",3],["matrixslicemut",6],["const",3]]],[[["matrixslice",6],["const",3],["const",3]]],[[]],[[["matrixslicemut",6],["dynamic",3]]],[[["matrixslicemut",6],["dynamic",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["unit",3]]],[[["unit",3]]],[[["unit",3]]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[],["matrix",3]],[[["vector",6]]],[[["vector",6]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["vector",6],["dimsum",6]],[["option",4],["ovector",6]]],[[["vector",6],["dimsum",6]],[["option",4],["ovector",6]]],[[["isometry3",6]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["matrix3",6]]],[[["matrix2",6]]],[[["usize",15],["matrix3",6]]],[[["matrix2",6],["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[["translation3",6],["unitquaternion",6]]],[[["quaternion",3]]],[[]],[[]],[[]],[[["unitquaternion",6]]],[[["rotation3",6]]],[[["rotation2",6]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["vector3",6]]],[[["vector3",6]]],[[["vector",6],["u3",6]]],[[["storage",8],["vector",6],["u1",6]]],[[["vector",6],["u3",6]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["maybeuninit",19]],["maybeuninit",19]],[[["vec",3]]],[[["vec",3],["usize",15]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3],["usize",15]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[],["fullpivlu",3]],[[],["bool",15]],[[["matrix",3],["matrix",3]]],[[["matrix",3],["matrix",3]]],[[["matrix",3],["matrix",3]]],[[["matrix",3],["vector",6]]],[[["matrix",3],["vector",6]]],[[["matrix",3],["vector",6]]],[[["matrix",3],["vector",6]]],[[["squarematrix",6],["vector",6]]],[[["squarematrix",6],["vector",6]]],[[["matrix",3],["vector",6]]],[[["matrix",3],["vector",6]]],[[],["matrixslice",6]],[[],["matrixslicemut",6]],[[],[["matrixslice",6],["dynamic",3]]],[[],[["matrixslicemut",6],["dynamic",3]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[["squarematrix",6],["vector",6]]],[[["squarematrix",6],["vector",6]]],[[["vector",6],["vector",6]]],[[],["omatrix",6]],[[],["omatrix",6]],[[],["hessenberg",3]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["usize",15]]],null,[[],["omatrix",6]],[[]],[[]],[[]],[[["usize",15]],[["omatrix",6],["dimsum",6]]],[[["usize",15]],[["omatrix",6],["dynamic",3]]],[[["usize",15]],[["omatrix",6],["dimsum",6]]],[[["usize",15]],[["omatrix",6],["dimsum",6]]],[[["usize",15]],[["omatrix",6],["dimsum",6]]],[[["usize",15]],[["omatrix",6],["dimsum",6]]],[[["usize",15]],[["omatrix",6],["dynamic",3]]],[[["usize",15]],[["dimsum",6],["omatrix",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[]],[[],[["const",3],["owned",6],["const",3]]],[[],["omatrix",6]],[[],["owned",6]],[[],["owned",6]],[[],[["owned",6],["dynamic",3]]],[[],[["dynamic",3],["owned",6]]],[[],["matrixsum",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["point3",6]],["point3",6]],[[["point2",6]],["point2",6]],[[["point3",6]],["point3",6]],[[["unit",3]],[["unit",3],["vector3",6]]],[[["unit",3]],[["unit",3],["vector2",6]]],[[["unit",3]],[["unit",3],["vector3",6]]],[[["vector3",6]],["vector3",6]],[[["vector2",6]],["vector2",6]],[[["vector3",6]],["vector3",6]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],null,[[],["matrixiter",3]],[[],["matrixitermut",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["unit",3]],[[["usize",15]],["unit",3]],[[["matrix",3]],[["omatrix",6],["dimprod",6],["dimprod",6]]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[["vector",6]],["ovector",6]],[[["vector",6]],["ovector",6]],[[],["quaternion",3]],[[],["dualquaternion",3]],[[],["quaternion",3]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["vector",6],["vector",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["vector",6],["vector",6]]],[[],["omatrix",6]],[[["i32",15]]],[[],["bool",15]],[[],["lu",3]],[[]],[[]],[[["fnmut",8]],[["scalar",8],["omatrix",6]]],[[],[["ovector",6],["scalar",8]]],[[],[["ovector",6],["scalar",8]]],[[["fnmut",8]],[["scalar",8],["omatrix",6]]],[[]],[[]],[[]],[[["matrix",3],["matrix",3]]],[[["matrix",3],["matrix",3]]],[[["matrix",3],["matrix",3]]],[[["matrix",3],["matrix",3]]],[[["matrix",3]]],[[]],[[["point",3]]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[["rotation",3]]],[[["point",3]]],[[["rotation",3]]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3],["matrix",3]]],[[],["usize",15]],[[["arraystorage",3]],["bool",15]],[[["vecstorage",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vector",6],["u3",6]]],[[]],[[["vec",3]]],[[]],[[["vector",6],["u3",6]]],[[["vector",6]]],[[["vector",6]]],[[["vector2",6],["point2",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["vector2",6],["point2",6]]],[[]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["vector",6],["vector",6]]],[[]],[[]],[[]],[[]],[[]],[[["vector3",6]]],[[["vector3",6]]],[[]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[]],[[]],[[["vector",6]]],[[["vector",6]]],[[],["slicestorage",3]],[[],["slicestoragemut",3]],[[]],[[["usize",15]],["maybeuninit",19]],[[["usize",15]],["maybeuninit",19]],[[["usize",15]],["maybeuninit",19]],[[],["maybeuninit",19]],[[],["maybeuninit",19]],[[["usize",15]],["maybeuninit",19]],[[["usize",15]],["maybeuninit",19]],[[["usize",15]],["maybeuninit",19]],[[],["maybeuninit",19]],[[],["maybeuninit",19]],[[],["slicestorage",3]],[[],["slicestoragemut",3]],[[]],[[]],[[["matrix",3]]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[]],[[]],[[]],[[],["omatrix",6]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],[["option",4],["ordering",4]]],[[["matrix",3]]],[[["primint",8],["divassign",8]],[["omatrix",6],["option",4]]],[[["primint",8],["divassign",8]],["result",4]],[[]],[[]],[[["vector",6]],["omatrix",6]],[[["vector",6]],["omatrix",6]],[[["vector",6]]],[[["vector",6]]],[[],["omatrix",6]],[[],["omatrix",6]],[[]],[[]],[[["vector",6]],["omatrix",6]],[[["vector",6]],["omatrix",6]],[[["vector",6]]],[[["vector",6]]],[[],[["str",15],["omatrix",6],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["ovector",6],["dimsum",6]]],[[],[["ovector",6],["dimsum",6]]],[[],["qr",3]],[[["squarematrix",6],["matrix",3]]],[[["squarematrix",6],["matrix",3]]],[[["matrix",3],["squarematrix",6]]],[[["matrix",3],["squarematrix",6]]],[[["squarematrix",6],["matrix",3],["vector",6]]],[[["squarematrix",6],["matrix",3],["vector",6]]],[[["squarematrix",6],["matrix",3],["vector",6]]],[[["squarematrix",6],["matrix",3],["vector",6]]],[[],["quaternion",3]],[[],["usize",15]],[[["matrix",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],[["omatrix",6],["dimdiff",6]]],[[["usize",15]],[["omatrix",6],["dynamic",3]]],[[],[["omatrix",6],["dynamic",3]]],[[["usize",15]],[["dimdiff",6],["omatrix",6]]],[[["usize",15]],[["omatrix",6],["dimdiff",6]]],[[["usize",15]],[["dimdiff",6],["omatrix",6]]],[[["usize",15]],[["omatrix",6],["dimdiff",6]]],[[["usize",15]],[["omatrix",6],["dynamic",3]]],[[],[["omatrix",6],["dynamic",3]]],[[["usize",15]],[["dimdiff",6],["omatrix",6]]],[[]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["const",3],["const",3]]],[[],["matrix",3]],[[["dynamic",3]]],[[["dynamic",3]]],[[["dynamic",3]]],[[["dynamic",3]]],[[["usize",15]],[["dynamic",3],["omatrix",6]]],[[["usize",15]],["vec",3]],[[["dim",8]],[["omatrix",6],["dim",8]]],[[["usize",15]],[["omatrix",6],["dynamic",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["omatrix",6],["dynamic",3]]],[[["usize",15]]],[[["usize",15]]],[[],["unitquaternion",6]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]],["option",4]],[[["unit",3],["unit",3]]],[[["unit",3],["unit",3]],["option",4]],[[]],[[]],[[["usize",15]],[["matrixslice",6],["u1",6]]],[[],["rowiter",3]],[[],["rowitermut",3]],[[],["rowovector",6]],[[],["ovector",6]],[[["usize",15]],[["u1",6],["matrixslicemut",6]]],[[["usize",15]],[["dynamic",3],["matrixslice",6],["u1",6]]],[[["usize",15]],[["dynamic",3],["matrixslicemut",6],["u1",6]]],[[],["rowovector",6]],[[],["ovector",6]],[[],["rowovector",6]],[[],["ovector",6]],[[["usize",15]],[["matrixslice",6],["dynamic",3]]],[[["usize",15],["dim",8]],[["matrixslice",6],["dim",8]]],[[["usize",15],["dim",8]],[["dim",8],["matrixslicemut",6]]],[[["usize",15]],[["matrixslice",6],["dynamic",3]]],[[["usize",15]],[["matrixslicemut",6],["dynamic",3]]],[[["usize",15]],[["matrixslicemut",6],["dynamic",3]]],[[["slicerange",8]],["matrixslice",6]],[[["slicerange",8]],["matrixslicemut",6]],[[["slicerange",8]]],[[["slicerange",8]]],[[["usize",15]],[["matrixslice",6],["dynamic",3]]],[[["usize",15]],[["matrixslicemut",6],["dynamic",3]]],[[],["omatrix",6]],[[]],[[]],[[],["vector3",6]],[[],["vector1",6]],[[["vector",6],["vector",6]],["option",4]],[[["vector",6],["vector",6]]],[[["unit",3],["unit",3]],["option",4]],[[["unit",3],["unit",3]]],[[],["schur",3]],[[]],[[],[["omatrix",6],["dynamic",3]]],[[],[["omatrix",6],["dynamic",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15],["vector",6]]],[[["vector",6]]],[[]],[[]],[[["usize",15],["rowvector",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["omatrix",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["omatrix",6],["simdoption",3]]],[[],["simdoption",3]],[[]],[[],[["ovector",6],["dimminimum",6]]],[[]],[[["vector",6]],["ovector",6]],[[["vector",6]],["ovector",6]],[[["unit",3]],[["unit",3],["ovector",6]]],[[]],[[]],[[],[["matrixslice",6],["dynamic",3]]],[[],[["dynamic",3],["matrixslicemut",6]]],[[],["matrixslice",6]],[[],["matrixslicemut",6]],[[],[["matrixslice",6],["dynamic",3]]],[[],[["matrixslicemut",6],["dynamic",3]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["omatrix",6],["dim",8]]],[[["matrix",3]]],[[["matrix",3]],["bool",15]],[[["matrix",3]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["omatrix",6],["dim",8]]],[[["matrix",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3],["matrix",3]]],[[]],[[],["omatrix",6]],[[["bool",15]],["svd",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["squarematrix",6],["vector",6]]],[[["squarematrix",6],["vector",6]]],[[["vector",6],["vector",6]]],[[],["symmetriceigen",3]],[[],["ovector",6]],[[],["omatrix",6]],[[],["omatrix",6]],[[],["symmetrictridiagonal",3]],[[]],[[],[["ovector",6],["dimsum",6]]],[[],[["dimsum",6],["omatrix",6]]],[[],[["ovector",6],["dimsum",6]]],[[],["matrix3",6]],[[],["matrix4",6]],[[],["matrix4",6]],[[],["isometry3",6]],[[]],[[]],[[]],[[]],[[]],[[],["rotation2",6]],[[],["rotation",3]],[[],["string",3]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]],[["omatrix",6],["dim",8]]],[[["matrix",3],["matrix",3]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["omatrix",6],["dim",8]]],[[["matrix",3]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["omatrix",6],["dim",8]]],[[["matrix",3]]],[[]],[[]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point3",6]],["point3",6]],[[["point2",6]],["point2",6]],[[["point3",6]],["point3",6]],[[["ovector",6]],[["ovector",6],["dimnamediff",6]]],[[["ovector",6]],[["ovector",6],["dimnamediff",6]]],[[["vector2",6]],["vector2",6]],[[["vector3",6]],["vector3",6]],[[["vector3",6]],["vector3",6]],[[],["translation3",6]],[[],["omatrix",6]],[[]],[[["matrix",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["omatrix",6],["option",4]]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],[["omatrix",6],["option",4]]],[[],["option",4]],[[["usize",15]],[["option",4],["schur",3]]],[[],["option",4]],[[]],[[["unit",3]],[["unit",3],["option",4]]],[[],["option",4]],[[["bool",15],["usize",15]],[["svd",3],["option",4]]],[[["usize",15]],[["symmetriceigen",3],["option",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["option",4],["udu",3]]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[],["omatrix",6]],[[]],[[]],[[]],[[],["omatrix",6]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["unit",3]],[[],["unit",3]],[[]],[[]],[[],["unit",3]],[[],["unit",3]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[]],[[]],[[],["unit",3]],[[],["unit",3]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[]],[[]],[[],["unit",3]],[[],["unit",3]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]],["omatrix",6]],[[["matrix",3],["matrix",3]]],[[["matrix",3],["matrix",3]],["omatrix",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],null,null,null,null,null,null,null,[[["intoiterator",8]]],[[],["maybeuninit",19]],[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["x",3]],[[],["xy",3]],[[],["xyz",3]],[[],["xyzw",3]],[[],["xyzwa",3]],[[],["xyzwab",3]],[[],["ijkw",3]],[[],["m2x2",3]],[[],["m2x3",3]],[[],["m2x4",3]],[[],["m2x5",3]],[[],["m2x6",3]],[[],["m3x2",3]],[[],["m3x3",3]],[[],["m3x4",3]],[[],["m3x5",3]],[[],["m3x6",3]],[[],["m4x2",3]],[[],["m4x3",3]],[[],["m4x4",3]],[[],["m4x5",3]],[[],["m4x6",3]],[[],["m5x2",3]],[[],["m5x3",3]],[[],["m5x4",3]],[[],["m5x5",3]],[[],["m5x6",3]],[[],["m6x2",3]],[[],["m6x3",3]],[[],["m6x4",3]],[[],["m6x5",3]],[[],["m6x6",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["x",3]],["bool",15]],[[["xy",3]],["bool",15]],[[["xyz",3]],["bool",15]],[[["xyzw",3]],["bool",15]],[[["xyzwa",3]],["bool",15]],[[["xyzwab",3]],["bool",15]],[[["ijkw",3]],["bool",15]],[[["m2x2",3]],["bool",15]],[[["m2x3",3]],["bool",15]],[[["m2x4",3]],["bool",15]],[[["m2x5",3]],["bool",15]],[[["m2x6",3]],["bool",15]],[[["m3x2",3]],["bool",15]],[[["m3x3",3]],["bool",15]],[[["m3x4",3]],["bool",15]],[[["m3x5",3]],["bool",15]],[[["m3x6",3]],["bool",15]],[[["m4x2",3]],["bool",15]],[[["m4x3",3]],["bool",15]],[[["m4x4",3]],["bool",15]],[[["m4x5",3]],["bool",15]],[[["m4x6",3]],["bool",15]],[[["m5x2",3]],["bool",15]],[[["m5x3",3]],["bool",15]],[[["m5x4",3]],["bool",15]],[[["m5x5",3]],["bool",15]],[[["m5x6",3]],["bool",15]],[[["m6x2",3]],["bool",15]],[[["m6x3",3]],["bool",15]],[[["m6x4",3]],["bool",15]],[[["m6x5",3]],["bool",15]],[[["m6x6",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["x",3]],["bool",15]],[[["xy",3]],["bool",15]],[[["xyz",3]],["bool",15]],[[["xyzw",3]],["bool",15]],[[["xyzwa",3]],["bool",15]],[[["xyzwab",3]],["bool",15]],[[["ijkw",3]],["bool",15]],[[["m2x2",3]],["bool",15]],[[["m2x3",3]],["bool",15]],[[["m2x4",3]],["bool",15]],[[["m2x5",3]],["bool",15]],[[["m2x6",3]],["bool",15]],[[["m3x2",3]],["bool",15]],[[["m3x3",3]],["bool",15]],[[["m3x4",3]],["bool",15]],[[["m3x5",3]],["bool",15]],[[["m3x6",3]],["bool",15]],[[["m4x2",3]],["bool",15]],[[["m4x3",3]],["bool",15]],[[["m4x4",3]],["bool",15]],[[["m4x5",3]],["bool",15]],[[["m4x6",3]],["bool",15]],[[["m5x2",3]],["bool",15]],[[["m5x3",3]],["bool",15]],[[["m5x4",3]],["bool",15]],[[["m5x5",3]],["bool",15]],[[["m5x6",3]],["bool",15]],[[["m6x2",3]],["bool",15]],[[["m6x3",3]],["bool",15]],[[["m6x4",3]],["bool",15]],[[["m6x5",3]],["bool",15]],[[["m6x6",3]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["intoiterator",8],["dynamic",3]]],[[["intoiterator",8],["dynamic",3]]],[[["const",3],["const",3],["intoiterator",8]]],[[["dynamic",3]],["maybeuninit",19]],[[["dynamic",3]],["maybeuninit",19]],[[["const",3],["const",3]],["maybeuninit",19]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["arraystorage",3],["dynamic",3]],[["vecstorage",3],["dynamic",3]]],[[["arraystorage",3],["dynamic",3]],[["vecstorage",3],["dynamic",3]]],[[["const",3],["const",3]],["arraystorage",3]],[[["vecstorage",3],["dynamic",3]],[["vecstorage",3],["dynamic",3]]],[[["vecstorage",3],["dynamic",3]],[["vecstorage",3],["dynamic",3]]],[[["vecstorage",3],["dynamic",3]],[["vecstorage",3],["dynamic",3]]],[[["vecstorage",3],["dynamic",3]],[["vecstorage",3],["dynamic",3]]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["dynamic",3]],[[["usize",15]]],[[["const",3]]],[[["dynamic",3]],["dynamic",3]],[[["const",3]]],[[]],[[]],[[]],[[]],[[],["dynamic",3]],[[],["const",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["dynamic",3]],[[["dynamic",3]],["dynamic",3]],[[["const",3]]],[[["const",3]]],[[["dynamic",3]],["bool",15]],[[["const",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["dynamic",3]],[[["dynamic",3]],["dynamic",3]],[[["const",3]]],[[["const",3]]],[[]],[[]],[[],["dynamic",3]],[[["const",3]]],[[["dynamic",3]],["dynamic",3]],[[["const",3]]],[[]],[[]],[[],["dynamic",3]],[[["const",3]]],[[["const",3]]],[[["dynamic",3]],["dynamic",3]],[[]],[[]],[[["dynamic",3]],["bool",15]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["dynamic",3]],[[["usize",15]]],[[["dynamic",3]],["dynamic",3]],[[["const",3]]],[[["const",3]]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],["typeid",3]],[[],["typeid",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rowiter",3]],[[],["columniter",3]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["matrixiter",3]],[[],["matrixitermut",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["owned",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["owned",6]],[[],["bool",15]],[[["usize",15]],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["vector",6]]],[[["vector",6]]],[[["quaternion",3]]],[[["quaternion",3]]],[[["dualquaternion",3]]],[[["dualquaternion",3]]],[[["vector",6]]],[[["vector",6]]],[[["quaternion",3]]],[[["quaternion",3]]],[[["dualquaternion",3]]],[[["dualquaternion",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vector3",6]]],[[]],[[]],[[]],[[]],[[["point",3]]],[[["point",3]]],[[]],[[]],[[["translation",3]]],[[["translation",3]]],[[["fnmut",8]]],[[],["matrix4",6]],[[],["matrix4",6]],[[]],[[],["projective3",6]],[[],["projective3",6]],[[]],[[],["vector4",6]],[[],["vector4",6]],[[]],[[]],[[]],[[]],[[]],[[],[["unit",3],["option",4]]],[[],[["unit",3],["option",4]]],[[],["vector",6]],[[],[["unit",3],["option",4]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["scalar",8],["unitquaternion",6]]],[[],[["scalar",8],["unitdualquaternion",6]]],[[],[["scalar",8],["unitcomplex",6]]],[[],[["scalar",8],["isometry2",6]]],[[],[["scalar",8],["isometry3",6]]],[[],[["isometrymatrix2",6],["scalar",8]]],[[],[["isometrymatrix3",6],["scalar",8]]],[[],[["scalar",8],["point",3]]],[[],[["scalar",8],["rotation",3]]],[[],[["scalar",8],["quaternion",3]]],[[],[["scalar",8],["dualquaternion",3]]],[[],[["translation",3],["scalar",8]]],[[],[["isometrymatrix3",6],["scalar",8]]],[[],[["scalar",8],["isometry3",6]]],[[],[["isometrymatrix2",6],["scalar",8]]],[[],[["scalar",8],["isometry2",6]]],[[],[["scalar",8],["similarity",3],["rotation3",6]]],[[],[["scalar",8],["similarity",3],["rotation2",6]]],[[],[["scalar",8],["similarity",3],["unitquaternion",6]]],[[],[["similarity",3],["scalar",8],["unitcomplex",6]]],[[["omatrix",6]],["bool",15]],[[["omatrix",6]],["bool",15]],[[["omatrix",6]],["bool",15]],[[["omatrix",6]],["bool",15]],[[]],[[]],[[],["point",3]],[[]],[[],["quaternion",3]],[[],["dualquaternion",3]],[[]],[[]],[[]],[[],["tgeneral",4]],[[],["tprojective",4]],[[],["taffine",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["transform",3]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[["transform",3]]],[[["rotation",3],["similarity",3]]],[[["unitcomplex",6]]],[[["unitquaternion",6]]],[[["rotation",3],["isometry",3]]],[[["transform",3]]],[[["isometry",3]]],[[["similarity",3]]],[[["unitquaternion",6]]],[[["rotation",3]]],[[["unitcomplex",6]]],[[["rotation",3]]],[[]],[[["unitdualquaternion",6]]],[[]],[[["unitdualquaternion",6]]],[[["translation",3]]],[[["transform",3]]],[[["transform",3]]],[[["translation",3]]],[[["unitcomplex",6]]],[[["similarity",3]]],[[["isometry",3]]],[[["isometry",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["unitcomplex",6]]],[[["unitquaternion",6]]],[[["similarity",3]]],[[["rotation",3]]],[[["unitcomplex",6]]],[[["isometry",3]]],[[["unitcomplex",6]]],[[["isometry",3]]],[[["similarity",3]]],[[["similarity",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["rotation",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["transform",3]]],[[["transform",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["translation",3]]],[[["translation",3]]],[[]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitcomplex",6]]],[[]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[]],[[["translation",3]]],[[["translation",3]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["isometry",3]]],[[["isometry",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["similarity",3]]],[[["similarity",3]]],[[["unitquaternion",6]]],[[["isometry",3]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["rotation",3]]],[[["isometry",3]]],[[["unitquaternion",6]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["transform",3]]],[[["transform",3]]],[[["translation",3]]],[[["translation",3]]],[[["rotation",3]]],[[]],null,[[],["dualquaternion",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["dualquaternion",3]],["bool",15]],[[["translation",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["tgeneral",4]],["bool",15]],[[["tprojective",4]],["bool",15]],[[["taffine",4]],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[],["quaternion",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["vector",6],["vector",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ovector",6],["const",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vector4",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ovector",6],["const",3]]],[[]],[[]],[[["translation",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["unit",3]]],[[["unit",3]]],[[["unit",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complex",3]]],[[["complex",3]]],[[["svector",6]]],[[]],[[]],[[]],[[]],[[]],[[["ovector",6],["dimnamesum",6]],["option",4]],[[["vector3",6]]],[[["isometry3",6]]],[[["isometry",3]]],[[["matrix2",6]]],[[["matrix3",6]]],[[["matrix3",6]]],[[["matrix2",6]]],[[["matrix3",6]]],[[["matrix2",6]]],[[["matrix2",6],["usize",15]]],[[["usize",15],["matrix3",6]]],[[["usize",15],["matrix3",6]]],[[["matrix2",6],["usize",15]]],[[["matrix2",6],["usize",15]]],[[["usize",15],["matrix3",6]]],[[["matrix4",6]]],[[["matrix4",6]]],[[["smatrix",6]]],[[["dimnamesum",6],["omatrix",6],["dimnamesum",6]]],[[["translation3",6],["unitquaternion",6]]],[[["vector",6],["u3",6]]],[[["translation",3]]],[[["translation",3]]],[[["unit",3],["vector",6]]],[[["quaternion",3]]],[[]],[[["quaternion",3]]],[[["quaternion",3]]],[[["unitquaternion",6]]],[[["rotation3",6]]],[[["rotation2",6]]],[[["storage",8],["vector",6],["u1",6]]],[[["vector",6],["u3",6],["storage",8]]],[[["vector",6],["u3",6]]],[[["storage",8],["vector",6],["u1",6]]],[[["vector",6],["u3",6],["storage",8]]],[[["storage",8],["vector",6],["u1",6]]],[[["vector",6],["u3",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ovector",6]]],[[["point",3]]],[[["rotation",3]]],[[["omatrix",6]]],[[["transform",3]]],[[["similarity",3]]],[[["isometry",3]]],[[["quaternion",3]]],[[["dualquaternion",3]]],[[["translation",3]]],[[["omatrix",6]]],[[["transform",3]]],[[["similarity",3]]],[[["isometry",3]]],[[["similarity",3]]],[[["omatrix",6]]],[[["isometry",3]]],[[["transform",3]]],[[["omatrix",6]]],[[["transform",3]]],[[["similarity",3]]],[[["omatrix",6]]],[[["transform",3]]],[[["vector4",6]]],[[["svector",6]],["translation",3]],[[],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rotation",3]],[[]],[[]],[[]],[[],["translation",3]],[[]],[[]],[[]],[[],["vector3",6]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["point",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["matrix4",6]],[[],["matrix4",6]],[[],["smatrix",6]],[[],[["omatrix",6],["dimnamesum",6],["dimnamesum",6]]],[[]],[[["isometry",3]]],[[]],[[]],[[]],[[]],[[],["matrix4",6]],[[],["matrix4",6]],[[]],[[]],[[],["translation",3]],[[]],[[]],[[],["transform",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["point",3]],["point",3]],[[["point3",6]],["point3",6]],[[["point3",6]],["point3",6]],[[["point2",6]],["point2",6]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["unit",3]],[["svector",6],["unit",3]]],[[["unit",3]],[["svector",6],["unit",3]]],[[["unit",3]],[["unit",3],["vector3",6]]],[[["unit",3]],[["unit",3],["vector3",6]]],[[["unit",3]],[["unit",3],["vector2",6]]],[[["unit",3]],[["svector",6],["unit",3]]],[[["unit",3]],[["unit",3],["svector",6]]],[[["unit",3]],[["unit",3],["svector",6]]],[[["ovector",6]],[["ovector",6],["const",3]]],[[["vector3",6]],["vector3",6]],[[["vector3",6]],["vector3",6]],[[["vector2",6]],["vector2",6]],[[["svector",6]],["svector",6]],[[["svector",6]],["svector",6]],[[["svector",6]],["svector",6]],[[["svector",6]],["svector",6]],[[["svector",6]],["svector",6]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["ovector",6]],["bool",15]],[[["point",3]],["bool",15]],[[],["bool",15]],[[["similarity",3]],["bool",15]],[[],["bool",15]],[[["isometry",3]],["bool",15]],[[["rotation",3]],["bool",15]],[[["omatrix",6]],["bool",15]],[[["transform",3]],["bool",15]],[[],["bool",15]],[[["quaternion",3]],["bool",15]],[[["dualquaternion",3]],["bool",15]],[[],["bool",15]],[[["transform",3]],["bool",15]],[[["omatrix",6]],["bool",15]],[[],["bool",15]],[[["isometry",3]],["bool",15]],[[["translation",3]],["bool",15]],[[["similarity",3]],["bool",15]],[[],["bool",15]],[[["similarity",3]],["bool",15]],[[["isometry",3]],["bool",15]],[[["omatrix",6]],["bool",15]],[[["transform",3]],["bool",15]],[[],["bool",15]],[[["similarity",3]],["bool",15]],[[["transform",3]],["bool",15]],[[["omatrix",6]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["omatrix",6]],["bool",15]],[[["transform",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[]],[[],[["const",3],["matrixiter",3],["const",3]]],[[],[["const",3],["matrixitermut",3],["const",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[]],[[],["option",4]],[[],["usize",15]],[[],["quaternion",3]],[[],["dualquaternion",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["quaternion",3]],[[]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["vector",6],["vector",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["vector",6],["vector",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[],["bool",15]],[[]],[[]],[[["fnmut",8]],[["scalar",8],["point",3]]],[[],["smatrix",6]],[[],["omatrix",6]],[[],["smatrix",6]],[[],["omatrix",6]],[[],["smatrix",6]],[[],["omatrix",6]],[[]],[[]],[[]],[[]],[[["rotation",3]]],[[["similarity",3],["rotation",3]]],[[["rotation",3]]],[[["matrix",3]]],[[["similarity",3]]],[[["unitcomplex",6]]],[[["matrix",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["isometry",3],["rotation",3]]],[[["unitcomplex",6]]],[[["transform",3]]],[[["unit",3]]],[[["isometry",3]]],[[["transform",3]]],[[["point",3]]],[[["translation",3]]],[[["unit",3],["vector",6]]],[[["translation",3]]],[[["point",3]]],[[["quaternion",3]]],[[["quaternion",3]]],[[]],[[]],[[["unitdualquaternion",6]]],[[["dualquaternion",3]]],[[["dualquaternion",3]]],[[["unitdualquaternion",6]]],[[["transform",3]]],[[["unitcomplex",6]]],[[["unitquaternion",6]]],[[["rotation",3]]],[[["similarity",3]]],[[["similarity",3]]],[[["rotation",3]]],[[["isometry",3]]],[[["isometry",3]]],[[["transform",3]]],[[["unitquaternion",6]]],[[["unitcomplex",6]]],[[["point",3]]],[[["point",3]]],[[["translation",3]]],[[["translation",3]]],[[["isometry",3]]],[[["unitcomplex",6]]],[[["svector",6]]],[[["svector",6]]],[[["svector",6],["unit",3]]],[[["unit",3]]],[[["transform",3]]],[[["translation",3]]],[[["translation",3]]],[[["point",3]]],[[["point",3]]],[[["transform",3]]],[[["similarity",3]]],[[["similarity",3]]],[[["rotation",3]]],[[["isometry",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["unitcomplex",6]]],[[["point",3]]],[[["rotation",3]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["similarity",3]]],[[["similarity",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["isometry",3]]],[[["isometry",3]]],[[["point",3]]],[[["transform",3]]],[[["svector",6]]],[[["svector",6]]],[[["translation",3]]],[[["translation",3]]],[[["rotation",3]]],[[["transform",3]]],[[["unitquaternion",6]]],[[["similarity",3]]],[[["rotation",3]]],[[["transform",3]]],[[["rotation",3]]],[[["transform",3]]],[[["unitquaternion",6]]],[[["point",3]]],[[["isometry",3]]],[[["translation",3]]],[[["translation",3]]],[[["isometry",3]]],[[["point",3]]],[[["svector",6]]],[[["svector",6]]],[[["similarity",3]]],[[]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitcomplex",6]]],[[]],[[["quaternion",3]]],[[["quaternion",3]]],[[]],[[["dualquaternion",3]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["dualquaternion",3]]],[[["translation",3]]],[[["translation",3]]],[[["isometry",3]]],[[["unitcomplex",6]]],[[["unitquaternion",6]]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["isometry",3]]],[[["unitquaternion",6]]],[[["translation",3]]],[[["translation",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["isometry",3]]],[[["translation",3]]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["isometry",3]]],[[["similarity",3]]],[[["similarity",3]]],[[["translation",3]]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["transform",3]]],[[["transform",3]]],[[["isometry",3]]],[[["translation",3]]],[[["isometry",3]]],[[["similarity",3]]],[[["similarity",3]]],[[["translation",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["dualquaternion",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vector",6],["u3",6],["storage",8]]],[[["vector",6],["u3",6]]],[[]],[[["vector2",6]]],[[["vector3",6]]],[[["vector2",6]]],[[["vector3",6]]],[[["unit",3],["vector",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vector",6],["u3",6],["storage",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vector3",6]]],[[["vector2",6]]],[[["vector2",6]]],[[["vector3",6]]],[[["vector3",6]]],[[["vector2",6]]],[[["vector3",6]]],[[["vector2",6]]],[[["unit",3],["point",3],["vector",6]]],[[["vector",6],["u3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[["point3",6]],["point3",6]],[[["point3",6]],["point3",6]],[[["vector",6]],["vector3",6]],[[["vector",6]],["vector3",6]],[[]],[[],["quaternion",3]],null,[[["matrix",3]]],[[["vector",6],["matrix",3]]],[[["vector",6],["matrix",3]]],[[["matrix",3]]],[[],["option",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["option",4]],[[],["unitquaternion",6]],[[]],[[["vector3",6]]],[[]],[[["vector3",6]]],[[["vector3",6]]],[[["vector3",6]]],[[]],[[]],null,[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]],["option",4]],[[["vector",6],["vector",6]],["option",4]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]],["option",4]],[[["vector",6],["vector",6]]],[[["unit",3],["unit",3]],["option",4]],[[["unit",3],["unit",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["point",3]]],[[["point",3]]],[[]],[[]],[[]],[[],["svector",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector1",6]],[[],["vector3",6]],[[],["svector",6]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]],["option",4]],[[["vector",6],["vector",6]],["option",4]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]],["option",4]],[[["unit",3],["unit",3]],["option",4]],[[["unit",3],["unit",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[],[["supertcategoryof",8],["transform",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["simdoption",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["point",3]]],[[["point",3]]],[[["vector",6]]],[[["vector",6]]],[[["quaternion",3]]],[[["quaternion",3]]],[[["dualquaternion",3]]],[[["dualquaternion",3]]],[[["vector",6]]],[[["vector",6]]],[[["quaternion",3]]],[[["quaternion",3]]],[[["dualquaternion",3]]],[[["dualquaternion",3]]],[[],["point",3]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["matrix4",6]],[[],["matrix4",6]],[[],["matrix3",6]],[[],["matrix4",6]],[[],["matrix4",6]],[[],[["dimnamesum",6],["ovector",6]]],[[],[["dimnamesum",6],["dimnamesum",6],["omatrix",6]]],[[],[["dimnamesum",6],["dimnamesum",6],["omatrix",6]]],[[],[["dimnamesum",6],["dimnamesum",6],["omatrix",6]]],[[],[["dimnamesum",6],["omatrix",6],["dimnamesum",6]]],[[],[["omatrix",6],["dimnamesum",6],["dimnamesum",6]]],[[],["isometry3",6]],[[],[["omatrix",6],["dimnamesum",6],["dimnamesum",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["projective3",6]],[[],["projective3",6]],[[],["rotation",3]],[[],["rotation2",6]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["ovector",6],["dimnamesum",6]]],[[],["point",3]],[[],[["dimnamesum",6],["dimnamesum",6],["omatrix",6]]],[[],["isometry",3]],[[],["similarity",3]],[[],["rotation",3]],[[],["transform",3]],[[],["quaternion",3]],[[],["dualquaternion",3]],[[],["similarity",3]],[[],["transform",3]],[[],["translation",3]],[[],["isometry",3]],[[],[["omatrix",6],["dimnamesum",6],["dimnamesum",6]]],[[],["isometry",3]],[[],[["dimnamesum",6],["dimnamesum",6],["omatrix",6]]],[[],["transform",3]],[[],["similarity",3]],[[],[["dimnamesum",6],["dimnamesum",6],["omatrix",6]]],[[],["transform",3]],[[],["similarity",3]],[[],[["dimnamesum",6],["omatrix",6],["dimnamesum",6]]],[[],["transform",3]],[[]],[[["point",3]],["point",3]],[[["point3",6]],["point3",6]],[[["point3",6]],["point3",6]],[[["point2",6]],["point2",6]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["svector",6]],["svector",6]],[[["vector3",6]],["vector3",6]],[[["vector3",6]],["vector3",6]],[[["vector2",6]],["vector2",6]],[[["svector",6]],["svector",6]],[[["svector",6]],["svector",6]],[[["svector",6]],["svector",6]],[[["svector",6]],["svector",6]],[[["svector",6]],["svector",6]],[[],["translation3",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["option",4]],[[],["option",4]],[[],[["option",4],["transform",3]]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["point3",6]],["point3",6]],[[["point3",6]],["point3",6]],[[]],[[]],[[],["matrix4",6]],[[],["matrix4",6]],[[],["smatrix",6]],[[],[["dimnamesum",6],["dimnamesum",6],["omatrix",6]]],[[],[["matrixslice",6],["cstride",6],["u3",6],["u1",6],["rstride",6]]],null,[[],[["cstride",6],["u3",6],["u1",6],["matrixslicemut",6],["rstride",6]]],[[],["point2",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point2",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point2",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point2",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point2",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point2",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["point2",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point2",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point2",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bidiagonal",3]],[[],["cholesky",3]],[[],["colpivqr",3]],[[],["fullpivlu",3]],[[],["hessenberg",3]],[[],["lu",3]],[[],["permutationsequence",3]],[[],["qr",3]],[[],["schur",3]],[[],["svd",3]],[[],["symmetriceigen",3]],[[],["symmetrictridiagonal",3]],[[],["udu",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["numcomplex",3],["ovector",6]]],[[],[["omatrix",6],["dimminimum",6]]],null,[[],["omatrix",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[],[["one",8],["closedneg",8]]],[[],[["ovector",6],["dimminimum",6]]],[[],["ovector",6]],[[],[["option",4],["ovector",6]]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["omatrix",6]],null,[[]],[[["usize",15]]],[[]],[[["vector",6],["usize",15]],[["cholesky",3],["dimsum",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[],["omatrix",6]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["omatrix",6]],[[],[["omatrix",6],["dimminimum",6]]],[[],[["omatrix",6],["dimminimum",6]]],[[],["omatrix",6]],[[],[["omatrix",6],["dimminimum",6]]],[[],["usize",15]],[[["omatrix",6]]],[[["omatrix",6]],["option",4]],[[["omatrix",6]]],[[["omatrix",6]]],[[["omatrix",6]]],[[["omatrix",6]]],[[["omatrix",6]]],[[["omatrix",6]]],[[["omatrix",6],["bool",15]]],[[["omatrix",6]]],[[["omatrix",6]]],[[["omatrix",6]],["option",4]],[[["omatrix",6]]],[[["ovector",6],["omatrix",6]]],[[],[["ovector",6],["dimdiff",6]]],[[],[["ovector",6],["dimdiff",6]]],[[],["permutationsequence",3]],[[],["permutationsequence",3]],[[],["permutationsequence",3]],[[["matrix",3]]],[[["matrix",3]]],[[],[["str",15],["omatrix",6],["result",4]]],[[],[["omatrix",6],["dimminimum",6]]],[[],["permutationsequence",3]],[[],["omatrix",6]],[[],[["omatrix",6],["dimminimum",6]]],[[],["omatrix",6]],[[["matrix",3]]],[[["matrix",3]]],[[],[["dimminimum",6],["omatrix",6]]],[[],[["dimminimum",6],["omatrix",6]]],[[],["usize",15]],[[["vector",6]]],[[],[["result",4],["omatrix",6],["str",15]]],[[],["omatrix",6]],[[],["omatrix",6]],[[["usize",15]],[["cholesky",3],["dimdiff",6]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["matrix",3]],[["omatrix",6],["dim",8]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],[["result",4],["str",15],["omatrix",6]]],[[["matrix",3]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["omatrix",6],["option",4]]],[[],[["omatrix",6],["option",4]]],[[],[["omatrix",6],["option",4]]],[[],[["omatrix",6],["option",4]]],[[["matrix",3]],["bool",15]],[[["complexfield",8],["matrix",3],["dim",8],["omatrix",6]],["bool",15]],[[["usize",15],["omatrix",6]],["option",4]],[[["omatrix",6],["bool",15],["usize",15]],["option",4]],[[["usize",15],["omatrix",6]],["option",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["omatrix",6],["dimminimum",6]]],[[],[["dimminimum",6],["omatrix",6]]],[[],[["dimminimum",6],["omatrix",6]]],null,null,[[]],[[],["omatrix",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["omatrix",6]],[[],["omatrix",6]],[[],[["dimminimum",6],["omatrix",6]]],[[],[["dimminimum",6],["omatrix",6]]],[[]],[[],[["dimminimum",6],["omatrix",6]]],null,[[["complexfield",8]],["complexfield",8]],[[["omatrix",6]],[["realfield",8],["ovector",6],["dim",8]]],[[["ovector",6],["omatrix",6]]],[[["vector",6]],[["ovector",6],["dimdiff",6]]],[[["vector",6]],["ovector",6]],[[["vector",6]],[["ovector",6],["dimdiff",6]]],[[]],[[]],null,[[]],[[]],[[]],[[["vector",6]],["option",4]],[[["vector",6]],["option",4]],[[],["givensrotation",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["option",4]],[[],["typeid",3]],[[],[["omatrix",6],["option",4]]],[[],["bool",15]],[[],[["numcomplex",3],["ovector",6]]],[[],[["option",4],["ovector",6]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["omatrix",6],["dim",8]]],[[["matrix",3]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["omatrix",6],["dim",8]]],[[["matrix",3]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["omatrix",6],["dim",8]]],[[["matrix",3]]],[[["matrix",3]],["bool",15]],[[["matrix",3]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["omatrix",6],["dim",8]]],[[["matrix",3]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["omatrix",6],["dim",8]]],[[["matrix",3]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["omatrix",6],["dim",8]]],[[["matrix",3]]],[[],["ovector",6]]],"p":[[8,"SimdValue"],[8,"ComplexField"],[8,"SimdComplexField"],[3,"Complex"],[6,"UnitQuaternion"],[6,"UnitDualQuaternion"],[6,"UnitComplex"],[8,"SimdBool"],[8,"RealField"],[6,"Translation3"],[6,"Isometry3"],[6,"SMatrix"],[6,"OMatrix"],[6,"Matrix2"],[6,"Matrix3"],[6,"Matrix4"],[6,"DVector"],[6,"OVector"],[6,"DVectorSlice"],[6,"DVectorSliceMut"],[6,"MatrixSlice"],[6,"MatrixSliceMut"],[6,"Point1"],[6,"Point2"],[6,"Point3"],[6,"Point4"],[6,"Point5"],[6,"Point6"],[6,"Rotation2"],[6,"Rotation3"],[8,"SimdRealField"],[8,"SimdPartialOrd"],[3,"LpNorm"],[3,"ArrayStorage"],[8,"Normed"],[8,"SliceRange"],[3,"Matrix"],[3,"Unit"],[6,"SquareMatrix"],[6,"Vector"],[3,"SliceStorageMut"],[3,"VecStorage"],[3,"SliceStorage"],[3,"EuclideanNorm"],[3,"UniformNorm"],[6,"MatrixSliceMutMN"],[8,"Scalar"],[8,"Norm"],[8,"Allocator"],[8,"Reallocator"],[8,"DimEq"],[8,"SameDimension"],[8,"SameNumberOfRows"],[8,"SameNumberOfColumns"],[3,"ShapeConstraint"],[3,"XYZWA"],[3,"XYZWAB"],[3,"X"],[3,"XY"],[3,"XYZ"],[3,"XYZW"],[3,"IJKW"],[3,"M2x2"],[3,"M2x3"],[3,"M2x4"],[3,"M2x5"],[3,"M2x6"],[3,"M3x2"],[3,"M3x3"],[3,"M3x4"],[3,"M3x5"],[3,"M3x6"],[3,"M4x2"],[3,"M4x3"],[3,"M4x4"],[3,"M4x5"],[3,"M4x6"],[3,"M5x2"],[3,"M5x3"],[3,"M5x4"],[3,"M5x5"],[3,"M5x6"],[3,"M6x2"],[3,"M6x3"],[3,"M6x4"],[3,"M6x5"],[3,"M6x6"],[3,"DefaultAllocator"],[8,"ToConst"],[8,"DimAdd"],[8,"DimNameAdd"],[8,"DimMul"],[8,"DimNameMul"],[8,"DimSub"],[8,"DimNameSub"],[8,"DimDiv"],[8,"DimNameDiv"],[8,"DimMin"],[8,"DimNameMin"],[8,"DimMax"],[8,"DimNameMax"],[8,"ToTypenum"],[8,"DimName"],[3,"Dynamic"],[3,"Const"],[8,"Dim"],[8,"MatrixIndex"],[8,"MatrixIndexMut"],[3,"RowIterMut"],[3,"ColumnIterMut"],[3,"MatrixIter"],[3,"MatrixIterMut"],[3,"RowIter"],[3,"ColumnIter"],[8,"Storage"],[8,"ReshapableStorage"],[8,"StorageMut"],[8,"TCategoryMul"],[3,"Point"],[3,"Rotation"],[3,"Quaternion"],[3,"DualQuaternion"],[3,"Translation"],[3,"Isometry"],[3,"Similarity"],[3,"Transform"],[3,"Orthographic3"],[3,"Perspective3"],[3,"Reflection"],[4,"TGeneral"],[4,"TProjective"],[4,"TAffine"],[6,"Isometry2"],[6,"IsometryMatrix2"],[6,"IsometryMatrix3"],[8,"TCategory"],[8,"AbstractRotation"],[3,"PermutationSequence"],[3,"Bidiagonal"],[3,"Cholesky"],[3,"ColPivQR"],[3,"FullPivLU"],[3,"Hessenberg"],[3,"LU"],[3,"QR"],[3,"Schur"],[3,"SVD"],[3,"SymmetricEigen"],[3,"SymmetricTridiagonal"],[3,"UDU"],[3,"GivensRotation"]]},\
"ndarray":{"doc":"The <code>ndarray</code> crate provides an <em>n</em>-dimensional container for …","t":[12,6,6,6,6,6,6,6,6,6,6,6,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,8,3,3,13,6,4,8,8,8,8,3,5,16,16,16,16,8,8,8,13,16,16,4,8,4,13,13,13,8,8,8,16,16,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,3,6,16,8,3,16,8,18,18,8,8,8,3,13,16,13,16,16,16,16,16,16,13,13,3,3,16,13,6,6,8,8,8,8,3,8,8,3,8,3,3,13,8,3,4,16,3,16,13,13,3,3,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,14,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,5,5,5,5,5,11,11,12,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,14,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,10,11,11,12,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,0,11,11,10,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,14,5,14,12,11,11,12,11,11,12,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,10,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11],"n":["0","ArcArray","ArcArray1","ArcArray2","Array","Array0","Array1","Array2","Array3","Array4","Array5","Array6","ArrayBase","ArrayD","ArrayView","ArrayView0","ArrayView1","ArrayView2","ArrayView3","ArrayView4","ArrayView5","ArrayView6","ArrayViewD","ArrayViewMut","ArrayViewMut0","ArrayViewMut1","ArrayViewMut2","ArrayViewMut3","ArrayViewMut4","ArrayViewMut5","ArrayViewMut6","ArrayViewMutD","AsArray","AssignElem","Axis","AxisDescription","Continue","CowArray","CowRepr","Data","DataMut","DataOwned","DataShared","Dim","Dim","Dim","Dim","Dim","Dim","DimAdd","DimMax","Dimension","Done","Elem","Elem","ErrorKind","FixedInitializer","FoldWhile","IncompatibleLayout","IncompatibleShape","Index","IndexLonger","IntoDimension","IntoNdProducer","Item","Item","Ix","Ix0","Ix0","Ix1","Ix1","Ix2","Ix2","Ix3","Ix3","Ix4","Ix4","Ix5","Ix5","Ix6","Ix6","IxDyn","IxDyn","IxDynImpl","Ixs","Larger","LinalgScalar","MathCell","MaybeUninit","MultiSliceArg","NDIM","NDIM","NdFloat","NdIndex","NdProducer","NewAxis","NewAxis","OutDim","OutOfBounds","Output","Output","Output","Output","Output","Output","Overflow","Owned","OwnedArcRepr","OwnedRepr","Pattern","RangeLimited","RawArrayView","RawArrayViewMut","RawData","RawDataClone","RawDataMut","RawDataSubst","RawViewRepr","RemoveAxis","ScalarOperand","Shape","ShapeBuilder","ShapeError","Slice","Slice","SliceArg","SliceInfo","SliceInfoElem","Smaller","StrideShape","Strides","Unsupported","View","ViewRepr","Zip","__private__","__private__","__private__","__private__","__private__","_data_slice","_data_slice","_data_slice","_data_slice","_data_slice","_data_slice","_data_slice","_fastest_varying_stride_order","_fastest_varying_stride_order","_fastest_varying_stride_order","_fastest_varying_stride_order","accumulate_axis_inplace","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","all","all","all","all","all","all","and","and","and","and","and","and_broadcast","and_broadcast","and_broadcast","and_broadcast","and_broadcast","apply","apply","apply","apply","apply","apply","apply_assign_into","apply_assign_into","apply_assign_into","apply_assign_into","apply_assign_into","apply_collect","apply_collect","apply_collect","apply_collect","apply_collect","arr0","arr1","arr2","arr3","array","as_array_view","as_array_view","as_array_view_mut","as_array_view_mut","as_init_slice","as_mut_ptr","as_ptr","as_ref","as_slice","as_slice_memory_order","as_slice_memory_order_mut","as_slice_mut","as_standard_layout","assign","assign_elem","assign_to","assume_init","aview0","aview1","aview2","aview_mut1","aview_mut2","axes","axis","axis","axis_chunks_iter","axis_chunks_iter_mut","axis_iter","axis_iter_mut","azip","bitand","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast","cast","cast","cast","cast","cell_view","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from","clone_from","clone_from_with_ptr","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_with_ptr","clone_with_ptr","clone_with_ptr","clone_with_ptr","clone_with_ptr","clone_with_ptr","cmp","cmp","collapse_axis","column","column_mut","columns","columns_mut","concatenate","concatenate","contiguous_stride","contiguous_stride","contiguous_stride","contiguous_stride","data_subst","data_subst","data_subst","data_subst","data_subst","data_subst","data_subst","default","default","default","default","default","default_strides","default_strides","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_into_view","deref_into_view","deref_into_view","deref_into_view","deref_into_view_mut","deref_into_view_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","diag","diag_mut","dim","div","div","div","div_assign","div_assign","dot","dot","dot","dot","dot","dot","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equal","equal","exact_chunks","exact_chunks_mut","eye","f","f","fill","first","first_index","first_index","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold_axis","fold_while","fold_while","fold_while","fold_while","fold_while","fold_while","for_each","for_each","for_each","for_each","for_each","for_each","for_each","fortran_strides","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_diag","from_dimension","from_dimension","from_elem","from_iter","from_iter","from_kind","from_shape","from_shape","from_shape","from_shape","from_shape_fn","from_shape_ptr","from_shape_ptr","from_shape_ptr","from_shape_ptr","from_shape_ptr","from_shape_ptr","from_shape_ptr","from_shape_ptr","from_shape_simple_fn","from_shape_vec","from_shape_vec_unchecked","from_vec","ge","gencolumns","gencolumns_mut","genrows","genrows_mut","geomspace","get","get","get","get_mut","gt","hash","hash","hash","hash","hash","hash","in_ndim","in_ndim","in_ndim","in_ndim","in_ndim","in_ndim","in_ndim","in_ndim","in_ndim","in_ndim","index","index","index","index","index","index","index","index","index","index","index","index","index","index_axis","index_axis_inplace","index_axis_move","index_axis_mut","index_checked","index_checked","index_checked","index_checked","index_checked","index_checked","index_checked","index_checked","index_checked","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_unchecked","index_unchecked","index_unchecked","index_unchecked","index_unchecked","index_unchecked","index_unchecked","index_unchecked","index_unchecked","indexed","indexed_iter","indexed_iter_mut","indices","indices_of","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","insert_axis","insert_axis","insert_axis","insert_axis","insert_axis","insert_axis","insert_axis","insert_axis","insert_axis","insert_axis_inplace","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_cell_view","into_cell_view","into_diag","into_dimension","into_dimension","into_dimension","into_dimensionality","into_dyn","into_dyn","into_dyn","into_dyn","into_inner","into_inner","into_iter","into_iter","into_owned","into_owned","into_owned","into_owned","into_owned","into_owned","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_pattern","into_pattern","into_pattern","into_pattern","into_pattern","into_pattern","into_pattern","into_pattern","into_pattern","into_producer","into_raw_vec","into_raw_vec","into_scalar","into_scalar","into_scalar","into_scalar","into_scalar","into_scalar","into_shape","into_shape","into_shape","into_shared","into_shared","into_shared","into_slice","into_slice","invert_axis","is_done","is_empty","is_index","is_new_axis","is_owned","is_owned","is_owned","is_slice","is_square","is_standard_layout","is_view","is_view","is_view","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","iter","iter","iter_mut","kind","lanes","lanes_mut","last_elem","le","len","len","len","len","len_of","linalg","linspace","logspace","lt","map","map_assign_into","map_assign_into","map_assign_into","map_assign_into","map_assign_into","map_axis","map_axis_mut","map_collect","map_collect","map_collect","map_collect","map_collect","map_inplace","map_mut","mapv","mapv_inplace","mapv_into","max_stride_axis","max_stride_axis","maybe_uninit","mean","mean_axis","merge_axes","min_stride_axis","min_stride_axis","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","multi_slice_move","multi_slice_move","multi_slice_move","multi_slice_mut","ncols","ndim","ndim","ndim","ndim","ndim","ndim","ndim","ndim","ndim","ndim","ne","ne","ne","ne","ne","neg","new","new","new","new","new","next_for","next_for","next_for","next_for","not","nrows","ones","out_ndim","out_ndim","out_ndim","out_ndim","out_ndim","out_ndim","out_ndim","out_ndim","out_ndim","out_ndim","outer_iter","outer_iter_mut","par_apply","par_apply","par_apply","par_apply","par_apply","par_apply","par_apply_assign_into","par_apply_assign_into","par_apply_assign_into","par_apply_assign_into","par_apply_assign_into","par_apply_collect","par_apply_collect","par_apply_collect","par_apply_collect","par_apply_collect","par_azip","par_for_each","par_for_each","par_for_each","par_for_each","par_for_each","par_for_each","par_iter","par_iter_mut","par_map_assign_into","par_map_assign_into","par_map_assign_into","par_map_assign_into","par_map_assign_into","par_map_collect","par_map_collect","par_map_collect","par_map_collect","par_map_collect","par_map_inplace","par_mapv_inplace","parallel","partial_cmp","partial_cmp","permuted_axes","prelude","product","range","raw_dim","raw_dim","raw_view","raw_view_mut","rcarr1","rcarr2","rcarr3","reborrow","reborrow","reborrow","reborrow","rem","rem","rem","rem_assign","rem_assign","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","reshape","reversed_axes","row","row_mut","rows","rows_mut","s","scalar_sum","scaled_add","select","serialize","serialize","serialize","set_f","set_f","set_last_elem","shape","shl","shl","shl","shl_assign","shl_assign","shr","shr","shr","shr_assign","shr_assign","size","size","size","size","size","size","size","size_checked","size_checked","size_checked","size_checked","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice_axis","slice_axis_inplace","slice_axis_mut","slice_collapse","slice_each_axis","slice_each_axis_inplace","slice_each_axis_mut","slice_move","slice_mut","slice_mut","slice_mut","slice_mut","slice_mut","slice_mut","slice_mut","slice_mut","slice_mut","split","split","split","split","split","split","split_at","split_at","split_at","split_at","split_at","split_at","split_at","split_at","stack","stack","stack_new_axis","stack_new_axis","start","std","std_axis","step","step_by","stride","stride","stride_of","stride_offset","stride_offset","stride_offset","stride_offset_checked","stride_offset_checked","stride_offset_checked","strides","strides","strides","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum_axis","swap","swap","swap_axes","t","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_shared","to_shared","to_slice","to_slice","to_string","to_string","to_string","to_vec","try_ensure_unique","try_ensure_unique","try_ensure_unique","try_ensure_unique","try_ensure_unique","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_is_unique","try_is_unique","try_is_unique","try_is_unique","try_is_unique","try_remove_axis","try_remove_axis","try_remove_axis","try_remove_axis","try_remove_axis","try_remove_axis","try_remove_axis","try_remove_axis","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uget","uget","uget","uget_mut","uninit","uninitialized","uswap","var","var_axis","view","view_mut","visit","windows","zero","zero","zero","zero","zero","zero","zero","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zip_mut_with","end","start","step","Axes","AxisChunksIter","AxisChunksIterMut","AxisIter","AxisIterMut","ExactChunks","ExactChunksIter","ExactChunksIterMut","ExactChunksMut","IndexedIter","IndexedIterMut","Indices","IndicesIter","Iter","IterMut","Lanes","LanesIter","LanesIterMut","LanesMut","Windows","all","all","any","any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","contiguous_stride","contiguous_stride","contiguous_stride","count","count","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","find","find","find_map","find_map","fmt","fmt","fmt","fold","fold","fold","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","last","last","len","len","len","len","len","len","len","len","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth_back","nth_back","position","position","rfold","rfold","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","split_at","split_at","split_at","split_at","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Dot","Output","dot","general_mat_mul","general_mat_vec_mul","Parallel","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drive","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","fmt","from","init","into","into_par_iter","len","len","len","len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","prelude","to_owned","try_from","try_into","type_id","with_producer","with_producer","with_producer","with_producer"],"q":["ndarrayndarray::SliceInfoElem","","","ndarray::iterndarray::linalg","","","","","ndarray::parallel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","An array where the data has shared ownership and is copy …","one-dimensional shared ownership array","two-dimensional shared ownership array","An array that owns its data uniquely.","zero-dimensional array","one-dimensional array","two-dimensional array","three-dimensional array","four-dimensional array","five-dimensional array","six-dimensional array","An <em>n</em>-dimensional array.","dynamic-dimensional array","A read-only array view.","zero-dimensional array view","one-dimensional array view","two-dimensional array view","three-dimensional array view","four-dimensional array view","five-dimensional array view","six-dimensional array view","dynamic-dimensional array view","A read-write array view.","zero-dimensional read-write array view","one-dimensional read-write array view","two-dimensional read-write array view","three-dimensional read-write array view","four-dimensional read-write array view","five-dimensional read-write array view","six-dimensional read-write array view","dynamic-dimensional read-write array view","Argument conversion into an array view","A producer element that can be assigned to once","An axis index.","Description of the axis, its length and its stride.","Continue folding with this value","An array with copy-on-write behavior.","CowArray’s representation.","Array representation trait.","Array representation trait.","Array representation trait.","Array representation trait.","Dimension description.","Create a new dimension value.","","Dimension type of the producer","Dimension type","","Adds the two dimensions at compile time.","","Array shape and index trait.","Fold is complete and will return this value","The array element type.","","Error code for an error related to array shape or layout.","Fixed-size array used for array initialization","Value controlling the execution of <code>.fold_while</code> on <code>Zip</code>.","incompatible memory layout","incompatible shape","A single index.","Extra indexing methods for array views","Argument conversion a dimension.","Argument conversion into a producer.","The element produced per iteration.","The element produced per iteration.","Array index type","Create a zero-dimensional index","zero-dimensionial","Create a one-dimensional index","one-dimensional","Create a two-dimensional index","two-dimensional","Create a three-dimensional index","three-dimensional","Create a four-dimensional index","four-dimensional","Create a five-dimensional index","five-dimensional","Create a six-dimensional index","six-dimensional","Create a dynamic-dimensional index","dynamic-dimensional","Dynamic dimension or index type.","Array index type (signed)","Next larger dimension","Elements that support linear algebra operations.","A transparent wrapper of <code>Cell<T></code> which is identical in …","Corresponding owned data with MaybeUninit elements","Slicing information describing multiple mutable, disjoint …","For fixed-size dimension representations (e.g. <code>Ix2</code>), this …","For fixed-size dimension representations (e.g. <code>Ix2</code>), this …","Floating-point element types <code>f32</code> and <code>f64</code>.","Tuple or fixed size arrays that can be used to index an …","A producer of an n-dimensional set of elements; for …","Token to represent a new axis in a slice description.","A new axis of length 1.","Dimensionality of the output array.","out of bounds indexing","The resulting array storage of the same kind but …","The type of the slices created by <code>.multi_slice_move()</code>.","","The resulting dimension type after broadcasting.","The sum of the two dimensions.","The type of the reference to the element that is …","overflow when computing offset, length, etc.","Owned data.","ArcArray’s representation.","Array’s representation.","Pattern matching friendly form of the dimension value.","the shape does not fit inside type limits","A read-only array view without a lifetime.","A mutable array view without a lifetime.","Array representation trait.","Array representation trait.","Array representation trait.","Array representation trait.","Array pointer’s representation.","Array shape with a next smaller dimension.","Elements that can be used as direct operands in …","A contiguous array shape of n dimensions.","A trait for <code>Shape</code> and <code>D where D: Dimension</code> that allows …","An error related to array shape or layout.","A slice (range with step size).","A range with step size. <code>end</code> is an exclusive index. …","A type that can slice an array of dimension <code>D</code>.","Represents all of the necessary information to perform a …","A slice (range with step), an index, or a new axis token.","Next smaller dimension (if applicable)","An array shape of n dimensions in c-order, f-order or …","","aliasing array elements","Borrowed data.","Array view’s representation.","Lock step function application across several arrays or …","This trait is private to implement; this method exists to …","This trait is private to implement; this method exists to …","This trait is private to implement; this method exists to …","This trait is private to implement; this method exists to …","This trait is private to implement; this method exists to …","","","","","","","","","","","","Iterates over pairs of consecutive elements along the …","","","","","","","","","","","Tests if every element of the iterator matches a …","Tests if every element of the iterator matches a …","Tests if every element of the iterator matches a …","Tests if every element of the iterator matches a …","Tests if every element of the iterator matches a …","Tests if every element of the iterator matches a …","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Create a zero-dimensional array with the element <code>x</code>.","Create a one-dimensional array with elements from <code>xs</code>.","Create a two-dimensional array with elements from <code>xs</code>.","Create a three-dimensional array with elements from <code>xs</code>.","Create an <strong><code>Array</code></strong> with one, two or three dimensions.","Borrow as a read-only array view.","Borrow as a read-only array view.","Borrow as a read-write array view.","Borrow as a read-write array view.","","Return a mutable pointer to the first element in the …","Return a pointer to the first element in the array.","","Return the array’s data as a slice, if it is contiguous …","Return the array’s data as a slice if it is contiguous, …","Return the array’s data as a slice if it is contiguous, …","Return the array’s data as a slice, if it is contiguous …","Return a standard-layout array containing the data, …","Perform an elementwise assigment to <code>self</code> from <code>rhs</code>.","Assign the value <code>input</code> to the element that self …","Perform an elementwise assigment of values cloned from …","<strong>Promise</strong> that the array’s elements are all fully …","Create a zero-dimensional array view borrowing <code>x</code>.","Create a one-dimensional array view with elements …","Create a two-dimensional array view with elements …","Create a one-dimensional read-write array view with …","Create a two-dimensional read-write array view with …","Return an iterator over the length and stride of each …","Return axis","","Return an iterator that traverses over <code>axis</code> by chunks of …","Return an iterator that traverses over <code>axis</code> by chunks of …","Return an iterator that traverses over <code>axis</code> and yields …","Return an iterator that traverses over <code>axis</code> and yields …","Array zip macro: lock step function application across …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Act like a larger size and/or shape array by <em>broadcasting</em> …","Cast the raw pointer of the raw array view to a different …","Cast the raw pointer of the raw array view to a different …","Cast the raw pointer of the raw array view to a different …","Cast the raw pointer of the raw array view to a different …","Return a shared view of the array with elements as if …","","","","","","","","","","","","","","","","","","","","","<code>Array</code> implements <code>.clone_from()</code> to reuse an array’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Selects <code>index</code> along the axis, collapsing the axis into …","Return an array view of column <code>index</code>.","Return a mutable array view of column <code>index</code>.","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over the <em>…","Concatenate arrays along the given axis.","Concatenate arrays along the given axis.","","","","","Unsafely translate the data representation from one …","","","","","","","","Create an array with default values, shape <code>shape</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts to a read-only view of the array.","Converts to a read-only view of the array.","Converts to a read-only view of the array.","Converts to a read-only view of the array.","Converts to a mutable view of the array.","Converts to a mutable view of the array.","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a view of the diagonal elements of the array.","Return a read-write view over the diagonal elements of …","Return the shape of the array in its “pattern” form, …","","","","","","Perform matrix multiplication of rectangular arrays <code>self</code> …","Perform the matrix multiplication of the row vector <code>self</code> …","Compute the dot product of one-dimensional arrays.","","","Perform dot product or matrix multiplication of arrays …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an exact chunks producer (and iterable).","Return an exact chunks producer (and iterable).","Create an identity matrix of size <code>n</code> (square 2D array).","","","Perform an elementwise assigment to <code>self</code> from element <code>x</code>.","Returns a reference to the first element of the array, or …","","","Returns a mutable reference to the first element of the …","","","","","","","","","","","","","","","","","","","","","","","","","","Traverse the array elements and apply a fold, returning …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to all elements of the input arrays,…","Apply a fold function to all elements of the input arrays,…","Apply a fold function to all elements of the input arrays,…","Apply a fold function to all elements of the input arrays,…","Apply a fold function to all elements of the input arrays,…","Fold along an axis.","Apply a fold function to the input arrays while the return…","Apply a fold function to the input arrays while the return…","Apply a fold function to the input arrays while the return…","Apply a fold function to the input arrays while the return…","Apply a fold function to the input arrays while the return…","Apply a fold function to the input arrays while the return…","Call <code>f</code> for each element in the array.","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","","Converts the <code>Vec</code> of arrays to an owned 2-D array.","Converts the <code>Vec</code> of arrays to an owned 3-D array.","Create a one-dimensional array from a vector (no copying …","","","","Create a one-dimensional read-only array view of the data …","Create a read-only array view of the array.","Create a one-dimensional read-write array view of the …","Create a read-write array view of the array.","","","","","","","Create a <code>Shape</code> from <code>dimension</code>, using the default memory …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new <code>Zip</code> from the input array or other producer <code>p</code>.","","","","","","","","","","","","Create a 2D matrix from its diagonal","","","Create an array with copies of <code>elem</code>, shape <code>shape</code>.","Create a one-dimensional array from an iterator or …","Create a one-dimensional array from an iterable.","Create a new <code>ShapeError</code>","Create a read-only array view borrowing its data from a …","Create a read-write array view borrowing its data from a …","Create a read-only array view borrowing its data from a …","Create a read-write array view borrowing its data from a …","Create an array with values created by the function <code>f</code>.","Create an <code>RawArrayView<A, D></code> from shape information and a …","Create an <code>RawArrayViewMut<A, D></code> from shape information …","Create an <code>ArrayViewMut<A, D></code> from shape information and a …","Create an <code>ArrayView<A, D></code> from shape information and a …","Create an <code>ArrayView<A, D></code> from shape information and a …","Create an <code>ArrayViewMut<A, D></code> from shape information and a …","Create an <code>RawArrayView<A, D></code> from shape information and a …","Create an <code>RawArrayViewMut<A, D></code> from shape information …","Create an array with values created by the function <code>f</code>.","Create an array with the given shape from a vector. (No …","Creates an array from a vector and interpret it according …","Create a one-dimensional array from a vector (no copying …","","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over the <em>…","","","Create a one-dimensional array with <code>n</code> geometrically …","Get a reference of a element through the view.","Return a reference to the element at <code>index</code>, or return <code>None</code>…","Convert a mutable array view to a mutable reference of a …","Return a mutable reference to the element at <code>index</code>, or …","","","","","","","","Returns the number of axes in the input array.","","","","","","","","","Returns the number of dimensions of the input array for …","Get a reference of a element through the view.","","Convert a mutable array view to a mutable reference of a …","Return the index of the axis.","","","","","","","","","","Returns a view restricted to <code>index</code> along the axis, with …","Collapses the array to <code>index</code> along the axis and removes …","Collapses the array to <code>index</code> along the axis and removes …","Returns a mutable view restricted to <code>index</code> along the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new <code>Zip</code> with an index producer and the producer <code>p</code>…","Return an iterator of indexes and references to the …","Return an iterator of indexes and mutable references to …","Create an iterable of the array shape <code>shape</code>.","Return an iterable of the indices of the passed-in array.","","","","","","","","","","","","","","","","","","","","","","","Insert new array axis at <code>axis</code> and return the result.","","","","","","","","Insert new array axis of length 1 at <code>axis</code>, modifying the …","","","","","","","","","","","","","","","","","","","","","","Return a shared view of the array with elements as if …","Return a shared view of the array with elements as if …","Return the diagonal as a one-dimensional array.","","","","Convert an array or array view to another with the same …","","Convert the dimensional into a dynamic dimensional …","Convert the dimensional into a dynamic dimensional …","Convert any array or array view to a dynamic dimensional …","Return the inner value","Return the inner value","","","Turn the array into a uniquely owned array, cloning the …","","","","","","","","","","","","","","Convert the dimension into a pattern matching friendly …","","","","","","","","","Convert the value into an <code>NdProducer</code>.","Return a vector of the elements in the array, in the way …","Return a vector of the elements in the array, in the way …","Consume the view and return a reference to the single …","Returns the single element in the array without cloning …","Consume the mutable view and return a mutable reference …","Returns the single element in the array without cloning …","Consume the view and return a reference to the single …","Consume the mutable view and return a mutable reference …","","Transform the array into <code>shape</code>; any shape with the same …","","Turn the array into a shared ownership (copy on write) …","","","Return the array’s data as a slice, if it is contiguous …","Return the array’s data as a slice, if it is contiguous …","Reverse the stride of <code>axis</code>.","Return true if it is <code>Done</code>, false if <code>Continue</code>","Return whether the array has any elements","Returns <code>true</code> if <code>self</code> is an <code>Index</code> value.","Returns <code>true</code> if <code>self</code> is a <code>NewAxis</code> value.","Returns <code>true</code> iff the array is the owned variant.","Returns <code>true</code> iff the array is the owned variant.","Returns <code>true</code> iff the data is the <code>Owned</code> variant.","Returns <code>true</code> if <code>self</code> is a <code>Slice</code> value.","Return true if the array is square, false otherwise.","Return <code>true</code> if the array data is laid out in contiguous …","Returns <code>true</code> iff the array is the view (borrowed) variant.","Returns <code>true</code> iff the array is the view (borrowed) variant.","Returns <code>true</code> iff the data is the <code>View</code> variant.","","","","","","","","Producers, iterables and iterators.","Return an iterator of references to the elements of the …","Return an iterator of mutable references to the elements …","Return the <code>ErrorKind</code> of this error.","Return a producer and iterable that traverses over all 1D …","Return a producer and iterable that traverses over all 1D …","","","","Return the total number of elements in the array.","Return length","","Return the length of <code>axis</code>.","Linear algebra.","Create a one-dimensional array with <code>n</code> evenly spaced …","Create a one-dimensional array with <code>n</code> logarithmically …","","Call <code>f</code> by reference on each element and create a new array…","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Reduce the values along an axis into just one value, …","Reduce the values along an axis into just one value, …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Modify the array in place by calling <code>f</code> by mutable …","Call <code>f</code> on a mutable reference of each element and create …","Call <code>f</code> by <strong>v</strong>alue on each element and create a new array …","Modify the array in place by calling <code>f</code> by <strong>v</strong>alue on each …","Call <code>f</code> by <strong>v</strong>alue on each element, update the array with …","Return the axis with the greatest stride (by absolute …","","Create an array with uninitalized elements, shape <code>shape</code>.","Returns the arithmetic mean x̅ of all elements in the …","Return mean along <code>axis</code>.","If possible, merge in the axis <code>take</code> to <code>into</code>.","","","","","","","","","","","","","Split the view into multiple disjoint slices.","Split the view into multiple disjoint slices.","Split the view into multiple disjoint slices.","Return multiple disjoint, sliced, mutable views of the …","Return the number of columns (length of <code>Axis(1)</code>) in the …","Returns the number of dimensions (number of axes).","","Return the number of dimensions (axes) in the array","","","","","","","","","","","","","Perform an elementwise negation of <code>self</code> and return the …","","Create a new cell with the given value","Create a new <code>Slice</code> with the given extents.","Returns a new <code>SliceInfo</code> instance.","","","","","","Perform an elementwise unary not of <code>self</code> and return the …","Return the number of rows (length of <code>Axis(0)</code>) in the …","Create an array with ones, shape <code>shape</code>.","Returns the number of axes in the output array.","","","","","","","Returns the number of dimensions after calling <code>.slice()</code> …","","","Return an iterator that traverses over the outermost …","Return an iterator that traverses over the outermost …","The <code>par_apply</code> method for <code>Zip</code>.","The <code>par_apply</code> method for <code>Zip</code>.","The <code>par_apply</code> method for <code>Zip</code>.","The <code>par_apply</code> method for <code>Zip</code>.","The <code>par_apply</code> method for <code>Zip</code>.","The <code>par_apply</code> method for <code>Zip</code>.","Apply and assign the results into the producer <code>into</code>, …","Apply and assign the results into the producer <code>into</code>, …","Apply and assign the results into the producer <code>into</code>, …","Apply and assign the results into the producer <code>into</code>, …","Apply and assign the results into the producer <code>into</code>, …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Parallelized array zip macro: lock step function …","The <code>par_for_each</code> method for <code>Zip</code>.","The <code>par_for_each</code> method for <code>Zip</code>.","The <code>par_for_each</code> method for <code>Zip</code>.","The <code>par_for_each</code> method for <code>Zip</code>.","The <code>par_for_each</code> method for <code>Zip</code>.","The <code>par_for_each</code> method for <code>Zip</code>.","","","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Parallel version of <code>map_inplace</code>.","Parallel version of <code>mapv_inplace</code>.","Parallelization features for ndarray.","","","Permute the axes.","ndarray prelude.","Return the product of all elements in the array.","Create a one-dimensional array with elements from <code>start</code> …","Return the shape of the producer.","Return the shape of the array as it’s stored in the …","Return a raw view of the array.","Return a raw mutable view of the array.","Create a one-dimensional array with elements from <code>xs</code>.","Create a two-dimensional array with elements from <code>xs</code>.","Create a three-dimensional array with elements from <code>xs</code>.","Convert the view into an <code>ArrayViewMut<\'b, A, D></code> where <code>\'b</code> …","Convert the view into an <code>ArrayView<\'b, A, D></code> where <code>\'b</code> is …","Convert the view into an <code>ArrayView<\'b, A, D></code> where <code>\'b</code> is …","Convert the view into an <code>ArrayViewMut<\'b, A, D></code> where <code>\'b</code> …","","","","","","","Remove array axis <code>axis</code> and return the result.","","","","","","","","<em>Note: Reshape is for <code>ArcArray</code> only. Use <code>.into_shape()</code> for …","Transpose the array by reversing axes.","Return an array view of row <code>index</code>.","Return a mutable array view of row <code>index</code>.","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over the <em>…","Slice argument constructor.","Return the sum of all elements in the array.","Perform the operation <code>self += alpha * rhs</code> efficiently, …","Along <code>axis</code>, select arbitrary subviews corresponding to …","","","","","","","Return the shape of the array as a slice.","","","","","","","","","","","Compute the size of the dimension (number of elements)","Compute the size of the dimension (number of elements)","Return the size of the shape in number of elements","Return a the number of element tuples in the Zip","","","","Compute the size while checking for overflow.","Compute the size while checking for overflow.","","","","Return a sliced view of the array.","","","","","","","","Return a view of the array, sliced along the specified …","Slice the array in place along the specified axis.","Return a mutable view of the array, sliced along the …","Slice the array in place without changing the number of …","Return a view of a slice of the array, with a closure …","Slice the array in place, with a closure specifying the …","Return a mutable view of a slice of the array, with a …","Slice the array, possibly changing the number of …","","Return a sliced read-write view of the array.","","","","","","","","Split the <code>Zip</code> evenly in two.","Split the <code>Zip</code> evenly in two.","Split the <code>Zip</code> evenly in two.","Split the <code>Zip</code> evenly in two.","Split the <code>Zip</code> evenly in two.","Split the <code>Zip</code> evenly in two.","Split the array view along <code>axis</code> and return one array …","Split the array view along <code>axis</code> and return one mutable …","Split the array view along <code>axis</code> and return one view …","Split the array view along <code>axis</code> and return one array …","Split the array view along <code>axis</code> and return one view …","Split the array view along <code>axis</code> and return one mutable …","Split the array view along <code>axis</code> and return one array …","Split the array view along <code>axis</code> and return one array …","Stack arrays along the new axis.","Stack arrays along the new axis.","Stack arrays along the new axis.","Stack arrays along the new axis.","","Return standard deviation of elements in the array.","Return standard deviation along <code>axis</code>.","","Create a new <code>Slice</code> with the given step size (multiplied …","Return stride","","Return the stride of <code>axis</code>.","Self is an index, return the stride offset","Self is an index, return the stride offset","Self is an index, return the stride offset","Return stride offset for this dimension and index.","Return stride offset for this dimension and index.","Return stride offset for this dimension and index.","","Return the strides of the array as a slice.","","","","","","","","","","","","Return the sum of all elements in the array.","Return sum along <code>axis</code>.","Swap elements at indices <code>index1</code> and <code>index2</code>.","Swap value with another cell","Swap axes <code>ax</code> and <code>bx</code>.","Return a transposed view of the array.","Return an uniquely owned copy of the array.","","","","","","","","","","","","","","","","","","","","","Return a shared ownership (copy on write) array, cloning …","","Return the array’s data as a slice, if it is contiguous …","Return the array’s data as a slice, if it is contiguous …","","","","Return an vector with the elements of the one-dimensional …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a reference of a element through the view without …","Perform <em>unchecked</em> array indexing.","Convert a mutable array view to a mutable reference of a …","Perform <em>unchecked</em> array indexing.","Create an array with uninitalized elements, shape <code>shape</code>.","Create an array with uninitalized elements, shape <code>shape</code>.","Swap elements <em>unchecked</em> at indices <code>index1</code> and <code>index2</code>.","Return variance of elements in the array.","Return variance along <code>axis</code>.","Return a read-only view of the array","Return a read-write view of the array","Visit each element in the array by calling <code>f</code> by reference …","Return a window producer and iterable.","","","","","","","","Creates a dimension of all zeros with the specified ndim.","","Create a new dimension value with <code>n</code> axes, all zeros","Create an array with zeros, shape <code>shape</code>.","","","","","Create a new dimension value with <code>n</code> axes, all zeros","","","","Traverse two arrays in unspecified order, in lock step, …","","","","An iterator over the length and stride of each axis of an …","An iterator that traverses over the specified axis and …","An iterator that traverses over the specified axis and …","An iterator that traverses over an axis and and yields …","An iterator that traverses over an axis and and yields …","Exact chunks producer and iterable.","Exact chunks iterator.","Exact chunks iterator.","Exact chunks producer and iterable.","An iterator over the indexes and elements of an array.","An iterator over the indexes and elements of an array …","Indices producer and iterable.","An iterator over the indexes of an array shape.","An iterator over the elements of an array.","An iterator over the elements of an array (mutable).","See <code>.lanes()</code> for more information.","An iterator that traverses over all axes but one, and …","An iterator that traverses over all dimensions but the …","See <code>.lanes_mut()</code> for more information.","Window producer and iterableplits the iterator at <code>index</code>, yielding two disjoint …","Splits the iterator at index, yielding two disjoint …","Splits the iterator at index, yielding two disjoint …","Splits the iterator at <code>index</code>, yielding two disjoint …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Matrix Multiplication","The result of the operation.","","General matrix-matrix multiplication.","General matrix-vector multiplication.","Parallel iterator wrapper.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Into- traits for creating parallelized iterators and/or …","","","","","","","",""],"i":[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,3,4,5,6,0,0,0,2,7,8,0,0,0,9,9,10,0,0,0,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,12,0,11,11,0,0,0,0,10,13,9,14,15,4,16,17,18,9,19,0,0,11,9,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,11,0,3,9,19,0,0,7,13,15,5,11,19,20,21,22,22,23,23,24,24,24,24,25,25,25,25,24,24,25,25,24,24,24,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,0,0,0,0,11,11,11,11,8,25,25,27,25,25,25,25,25,25,28,25,25,0,0,0,0,0,25,29,29,25,25,25,25,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,19,20,30,9,31,32,33,34,35,10,27,26,2,29,1,24,36,21,22,23,25,19,20,30,9,31,32,33,34,35,10,27,26,2,29,1,24,36,21,22,23,25,25,25,37,38,25,25,20,30,9,31,32,33,34,35,10,27,26,2,29,1,24,36,21,22,23,25,20,20,25,20,30,9,31,32,33,34,35,10,27,26,2,29,1,24,36,21,22,23,19,20,21,22,22,23,31,1,25,25,25,25,25,0,0,39,40,37,38,14,20,21,22,22,23,23,25,25,31,24,36,24,24,25,19,20,30,9,31,31,32,33,34,35,10,27,27,26,2,29,1,24,36,36,21,22,23,25,25,37,38,25,38,25,19,20,30,9,31,31,32,33,34,35,10,27,26,2,29,1,24,36,36,21,22,23,41,25,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,19,20,20,30,9,31,32,33,34,35,10,27,26,2,29,1,24,36,21,22,23,34,25,25,30,9,31,34,10,1,24,24,36,24,24,25,25,25,3,32,25,25,24,24,25,25,25,25,25,25,25,20,30,30,9,31,32,33,34,35,10,10,27,26,2,29,1,24,36,21,25,26,26,26,26,26,26,25,26,26,26,26,26,26,25,26,26,26,26,26,26,24,42,43,25,25,44,44,39,39,40,40,19,20,30,9,31,32,32,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,27,27,26,26,2,29,1,24,36,36,36,21,22,23,25,41,24,25,25,25,30,25,25,39,40,25,25,25,25,25,39,40,37,38,25,25,25,25,31,25,25,25,25,25,18,25,40,25,31,25,34,10,1,24,36,13,27,27,27,27,27,27,27,27,27,18,25,40,1,24,24,24,24,24,24,24,24,36,25,25,25,25,45,45,24,24,24,24,24,24,24,25,24,24,24,24,24,24,24,24,36,45,45,24,24,24,24,24,24,24,26,25,25,0,0,25,19,20,30,9,31,32,33,34,35,10,27,26,2,29,1,24,36,21,22,23,41,25,24,24,24,24,24,24,24,25,25,19,20,30,9,31,32,33,34,35,10,27,26,2,29,1,24,36,21,22,23,25,40,25,6,45,36,25,41,11,11,25,31,2,39,40,25,19,20,21,23,23,39,40,26,26,26,26,26,26,11,41,24,24,24,24,24,24,24,4,25,46,25,25,25,46,39,40,3,25,32,25,20,21,25,40,25,2,25,10,10,25,44,19,10,25,25,25,44,19,24,24,24,24,24,24,24,0,25,25,30,25,25,24,31,8,25,29,29,25,0,25,25,31,25,26,26,26,26,26,25,25,26,26,26,26,26,25,25,25,25,25,25,24,25,25,25,25,24,24,25,25,25,24,24,25,25,24,24,24,15,25,40,25,25,11,41,25,24,24,24,24,24,24,24,34,10,1,24,36,25,20,31,34,27,21,24,24,24,24,25,25,25,13,27,27,27,27,27,27,27,27,27,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,26,26,26,26,26,26,25,25,26,26,26,26,26,26,26,26,26,26,25,25,0,31,1,25,0,25,25,5,25,25,25,0,0,0,25,25,39,40,25,25,25,25,25,47,25,24,24,24,24,24,24,24,25,25,25,25,25,25,0,25,25,25,41,25,24,3,32,24,25,25,25,25,25,25,25,25,25,25,25,11,11,32,26,24,24,24,11,11,24,24,41,25,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,41,25,24,24,24,24,24,24,24,26,26,26,26,26,26,25,25,25,25,39,40,37,38,0,0,0,0,34,25,25,34,34,29,29,25,24,24,24,24,24,24,3,25,32,25,25,25,24,24,25,25,24,24,24,25,25,25,31,25,25,25,25,20,30,9,31,32,33,34,35,10,27,26,2,29,1,24,36,21,22,23,25,21,25,39,25,30,10,25,19,20,21,22,23,25,19,20,30,9,31,32,33,34,35,10,27,27,27,27,27,27,27,27,27,27,27,27,26,2,29,1,24,36,21,22,23,25,19,20,30,9,31,32,33,34,35,10,27,26,2,29,1,24,36,21,22,23,19,20,21,22,23,41,24,24,24,24,24,24,24,25,19,20,30,9,31,32,33,34,35,10,27,26,2,29,1,24,36,21,22,23,18,25,40,25,25,25,25,25,25,25,25,25,25,24,24,24,24,24,24,24,11,41,41,25,24,24,24,24,24,24,24,24,25,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,50,49,50,51,52,53,54,55,56,57,49,50,58,59,60,61,62,63,64,65,66,67,68,51,52,53,54,55,56,57,49,50,58,59,60,61,62,63,64,65,66,67,68,51,52,55,57,49,59,62,64,65,66,67,68,51,52,55,57,49,59,62,64,65,66,67,68,49,50,61,65,67,49,50,51,52,53,54,55,56,57,49,50,58,59,60,61,62,63,64,65,66,67,68,51,52,53,54,55,56,57,49,50,58,59,60,61,62,63,64,65,66,67,68,51,52,53,54,55,56,57,49,50,58,59,60,61,62,63,64,65,66,67,68,49,50,49,50,65,67,68,49,50,64,68,51,52,53,54,55,56,57,49,50,58,59,60,61,62,63,64,65,66,67,68,51,52,53,54,55,56,57,49,50,58,59,60,61,62,63,64,65,66,67,68,51,52,53,54,55,56,57,49,50,58,59,60,61,62,63,64,65,66,67,68,51,52,53,54,55,56,57,49,50,58,59,60,61,62,63,64,65,66,67,68,61,62,63,67,49,50,49,50,58,59,60,61,66,67,52,54,49,50,58,59,60,61,62,63,64,66,67,68,49,50,61,62,63,67,68,49,50,49,50,49,50,49,50,52,54,49,50,58,59,60,61,62,63,64,66,67,68,61,62,63,67,51,52,55,57,49,59,62,64,65,66,67,68,51,52,53,54,55,56,57,49,50,58,59,60,61,62,63,64,65,66,67,68,51,52,53,54,55,56,57,49,50,58,59,60,61,62,63,64,65,66,67,68,51,52,53,54,55,56,57,49,50,58,59,60,61,62,63,64,65,66,67,68,0,69,69,0,0,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0,70,70,70,70,70,70,70,70],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["ix0",6]],null,[[["ix",6]],["ix1",6]],null,[[["ix",6]],["ix2",6]],null,[[["ix",6]],["ix3",6]],null,[[["ix",6]],["ix4",6]],null,[[["ix",6]],["ix5",6]],null,[[["ix",6]],["ix6",6]],null,[[],["ixdyn",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["privatemarker",3]],[[],["privatemarker",3]],[[],["privatemarker",3]],[[],["privatemarker",3]],[[],["privatemarker",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[["axis",3]]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[]],[[["ix",6]]],[[["arraybase",3]]],[[]],[[]],[[]],[[["ix",6]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[],["zip",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["array",6]],[[],["array",6]],[[],["array",6]],[[],["array",6]],[[],["array",6]],[[],["array0",6]],[[],[["array1",6],["clone",8]]],[[],[["clone",8],["array2",6]]],[[],[["clone",8],["array3",6]]],null,[[],[["ix",6],["arrayview1",6]]],[[],[["ix",6],["arrayview1",6]]],[[],[["arrayviewmut1",6],["ix",6]]],[[],[["arrayviewmut1",6],["ix",6]]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["cowarray",6]],[[["arraybase",3]]],[[]],[[]],[[],["arraybase",3]],[[],["arrayview0",6]],[[],["arrayview1",6]],[[],["arrayview2",6]],[[],["arrayviewmut1",6]],[[],["arrayviewmut2",6]],[[],["axes",3]],[[],["axis",3]],null,[[["usize",15],["axis",3]],["axischunksiter",3]],[[["usize",15],["axis",3]],["axischunksitermut",3]],[[["axis",3]],["axisiter",3]],[[["axis",3]],["axisitermut",3]],null,[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["arrayview",6],["option",4]]],[[],["rawarrayview",6]],[[],["rawarrayviewmut",6]],[[],["rawarrayview",6]],[[],["rawarrayviewmut",6]],[[],[["arrayview",6],["mathcell",3]]],[[],["arraybase",3]],[[]],[[],["shapeerror",3]],[[],["errorkind",4]],[[]],[[],["shape",3]],[[],["strideshape",3]],[[],["slice",3]],[[],["newaxis",3]],[[]],[[]],[[],["zip",3]],[[],["foldwhile",4]],[[]],[[],["axis",3]],[[],["dim",3]],[[],["ixdynimpl",3]],[[]],[[],["rawviewrepr",3]],[[],["viewrepr",3]],[[]],[[]],[[["nonnull",3]],["nonnull",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3]]],[[],["ordering",4]],[[["axis",3]],["ordering",4]],[[["usize",15],["axis",3]]],[[["ix",6]],["arrayview1",6]],[[["ix",6]],["arrayviewmut1",6]],[[],["lanes",3]],[[],["lanesmut",3]],[[["axis",3]],[["result",4],["shapeerror",3],["array",6]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mathcell",3]],[[],["dim",3]],[[],["ixdynimpl",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["arrayview",6]],[[],["arrayview",6]],[[],["arrayview",6]],[[],["arrayview",6]],[[],["arrayviewmut",6]],[[],["arrayviewmut",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],[["arraybase",3],["result",4]]],[[],["result",4]],[[],["arrayview1",6]],[[],["arrayviewmut1",6]],[[]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[]],[[]],[[["arraybase",3]],[["ix1",6],["array",6]]],[[["arraybase",3]]],[[["arraybase",3]],["array2",6]],[[["arraybase",3]],[["ix1",6],["array",6]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[["arraybase",3]],["bool",15]],[[["arraybase",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["slice",3]],["bool",15]],[[["sliceinfoelem",4]],["bool",15]],[[["axis",3]],["bool",15]],[[],["bool",15]],[[["dim",3]],["bool",15]],[[["ixdynimpl",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["exactchunks",3]],[[],["exactchunksmut",3]],[[["ix",6]]],[[],["shape",3]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["axis",3]],["array",6]],[[],["foldwhile",4]],[[],["foldwhile",4]],[[],["foldwhile",4]],[[],["foldwhile",4]],[[],["foldwhile",4]],[[],["foldwhile",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[]],[[["array",6]],["cowarray",6]],[[["arrayview",6]],["cowarray",6]],[[]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["shape",3]],[[]],[[]],[[["usize",15],["rangeinclusive",3]],["slice",3]],[[["isize",15],["rangeto",3]],["slice",3]],[[["rangefull",3]],["slice",3]],[[["isize",15],["rangetoinclusive",3]],["slice",3]],[[["usize",15],["range",3]],["slice",3]],[[]],[[["rangefrom",3],["usize",15]],["slice",3]],[[["usize",15],["rangeto",3]],["slice",3]],[[["usize",15],["rangetoinclusive",3]],["slice",3]],[[["isize",15],["range",3]],["slice",3]],[[["i32",15],["range",3]],["slice",3]],[[["rangefrom",3],["isize",15]],["slice",3]],[[["i32",15],["rangeinclusive",3]],["slice",3]],[[["isize",15],["rangeinclusive",3]],["slice",3]],[[["i32",15],["rangefrom",3]],["slice",3]],[[["rangeto",3],["i32",15]],["slice",3]],[[["rangetoinclusive",3],["i32",15]],["slice",3]],[[]],[[["rangefrom",3],["usize",15]],["sliceinfoelem",4]],[[]],[[["usize",15]],["sliceinfoelem",4]],[[["isize",15],["rangeto",3]],["sliceinfoelem",4]],[[["i32",15],["rangeinclusive",3]],["sliceinfoelem",4]],[[["rangefrom",3],["isize",15]],["sliceinfoelem",4]],[[["i32",15],["range",3]],["sliceinfoelem",4]],[[["isize",15],["rangeinclusive",3]],["sliceinfoelem",4]],[[["isize",15],["range",3]],["sliceinfoelem",4]],[[["i32",15]],["sliceinfoelem",4]],[[["newaxis",3]],["sliceinfoelem",4]],[[["isize",15]],["sliceinfoelem",4]],[[["usize",15],["rangetoinclusive",3]],["sliceinfoelem",4]],[[["i32",15],["rangefrom",3]],["sliceinfoelem",4]],[[["rangeto",3],["i32",15]],["sliceinfoelem",4]],[[["rangetoinclusive",3],["i32",15]],["sliceinfoelem",4]],[[["slice",3]],["sliceinfoelem",4]],[[["usize",15],["range",3]],["sliceinfoelem",4]],[[["usize",15],["rangeinclusive",3]],["sliceinfoelem",4]],[[["rangefull",3]],["sliceinfoelem",4]],[[["isize",15],["rangetoinclusive",3]],["sliceinfoelem",4]],[[["usize",15],["rangeto",3]],["sliceinfoelem",4]],[[]],[[["sliceinfo",3]],["sliceinfo",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ix",6],["vec",3]]],[[]],[[]],[[]],[[]],[[]],[[["arraybase",3]]],[[],["option",4]],[[],["option",4]],[[]],[[["intoiterator",8]]],[[],[["arraybase",3],["ix1",6]]],[[["errorkind",4]]],[[],[["shapeerror",3],["result",4]]],[[],[["shapeerror",3],["result",4]]],[[],[["shapeerror",3],["result",4]]],[[],[["shapeerror",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]],[["shapeerror",3],["result",4]]],[[["vec",3]]],[[["vec",3]]],[[],["bool",15]],[[],["lanes",3]],[[],["lanesmut",3]],[[],["lanes",3]],[[],["lanesmut",3]],[[["usize",15]],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15],["axis",3]],["arrayview",6]],[[["usize",15],["axis",3]]],[[["usize",15],["axis",3]],["arraybase",3]],[[["usize",15],["axis",3]],["arrayviewmut",6]],[[["ix1",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[["ixdyn",6]],[["isize",15],["option",4]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["ixdyn",6]],["isize",15]],[[["ix1",6]],["isize",15]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],["isize",15]],[[]],[[],["indexediter",3]],[[],["indexeditermut",3]],[[],["indices",3]],[[["arraybase",3]],["indices",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["axis",3]]],[[["axis",3]],["arraybase",3]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["arrayview",6],["mathcell",3]]],[[],[["arrayview",6],["mathcell",3]]],[[],[["arraybase",3],["ix1",6]]],[[]],[[],["ix1",6]],[[]],[[],[["shapeerror",3],["result",4],["arraybase",3]]],[[],["ixdyn",6]],[[],["ixdyn",6]],[[],["ixdyn",6]],[[],[["arraybase",3],["ixdyn",6]]],[[]],[[]],[[]],[[]],[[],["array",6]],[[["arraybase",3],["cowrepr",4]],[["arraybase",3],["ownedrepr",3]]],[[["arraybase",3]],[["arraybase",3],["ownedrepr",3]]],[[["arraybase",3]],[["arraybase",3],["ownedrepr",3]]],[[["arraybase",3]],[["arraybase",3],["ownedrepr",3]]],[[["arraybase",3]],[["arraybase",3],["ownedrepr",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[],["vec",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["shape",3]],[[],[["result",4],["shapeerror",3],["arraybase",3]]],[[],["shape",3]],[[],["arcarray",6]],[[],["ownedarcrepr",3]],[[],["ownedarcrepr",3]],[[],["option",4]],[[],["option",4]],[[["axis",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["iter",3]],[[],["itermut",3]],[[],["errorkind",4]],[[["axis",3]],["lanes",3]],[[["axis",3]],["lanesmut",3]],[[],["usize",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["ix",6]],null,[[["axis",3]],["usize",15]],null,[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[],["array",6]],[[]],[[]],[[]],[[]],[[]],[[["axis",3]],["array",6]],[[["axis",3]],["array",6]],[[],["array",6]],[[],["array",6]],[[],["array",6]],[[],["array",6]],[[],["array",6]],[[]],[[],["array",6]],[[],["array",6]],[[]],[[]],[[],["axis",3]],[[],["axis",3]],[[]],[[],["option",4]],[[["axis",3]],[["array",6],["option",4]]],[[["axis",3]],["bool",15]],[[],["axis",3]],[[],["axis",3]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[["ix",6]]],[[]],[[["arraybase",3]]],[[]],[[["ix",6]]],[[]],[[]],[[["arrayviewmut",6]]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["slice",3]],["bool",15]],[[["sliceinfoelem",4]],["bool",15]],[[["axis",3]],["bool",15]],[[["dim",3]],["bool",15]],[[["ixdynimpl",3]],["bool",15]],[[]],[[["vec",3]]],[[]],[[["isize",15],["option",4]],["slice",3]],[[],[["sliceinfo",3],["result",4],["shapeerror",3]]],[[["vec",3]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[],["usize",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["axisiter",3]],[[],["axisitermut",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["array",6]],[[],["array",6]],[[],["array",6]],[[],["array",6]],[[],["array",6]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["array",6]],[[],["array",6]],[[],["array",6]],[[],["array",6]],[[],["array",6]],[[]],[[]],null,[[],[["option",4],["ordering",4]]],[[["axis",3]],[["ordering",4],["option",4]]],[[],["arraybase",3]],null,[[]],[[]],[[]],[[]],[[],["rawarrayview",6]],[[],["rawarrayviewmut",6]],[[],[["arcarray1",6],["clone",8]]],[[],[["arcarray2",6],["clone",8]]],[[],[["ix3",6],["clone",8],["arcarray",6]]],[[],["arrayviewmut",6]],[[],["arrayview",6]],[[],["arrayview",6]],[[],["arrayviewmut",6]],[[],["arraybase",3]],[[["arraybase",3]]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[["axis",3]]],[[["axis",3]],["arraybase",3]],[[["axis",3]]],[[["axis",3]],["ix1",6]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]],["ix0",6]],[[["axis",3]]],[[],["arraybase",3]],[[],["arraybase",3]],[[["ix",6]],["arrayview1",6]],[[["ix",6]],["arrayviewmut1",6]],[[],["lanes",3]],[[],["lanesmut",3]],null,[[]],[[["arraybase",3]]],[[["axis",3]],["array",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["bool",15]],["shape",3]],[[["bool",15]]],[[["usize",15]]],[[]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[]],[[["arraybase",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[]],[[],["arrayview",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["slice",3],["axis",3]],["arrayview",6]],[[["slice",3],["axis",3]]],[[["slice",3],["axis",3]],["arrayviewmut",6]],[[]],[[],["arrayview",6]],[[]],[[],["arrayviewmut",6]],[[],["arraybase",3]],[[]],[[],["arrayviewmut",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ix",6],["axis",3]]],[[["ix",6],["axis",3]]],[[["ix",6],["axis",3]]],[[["ix",6],["axis",3]]],[[["ix",6],["axis",3]]],[[["ix",6],["axis",3]]],[[["ix",6],["axis",3]]],[[["ix",6],["axis",3]]],[[["axis",3]],[["shapeerror",3],["array",6],["result",4]]],null,[[["axis",3]],[["shapeerror",3],["array",6],["result",4]]],null,null,[[]],[[["axis",3]],["array",6]],null,[[["isize",15]]],[[],["ixs",6]],null,[[["axis",3]],["isize",15]],[[],["isize",15]],[[],["isize",15]],[[],["isize",15]],[[],[["isize",15],["option",4]]],[[],[["isize",15],["option",4]]],[[],[["isize",15],["option",4]]],[[],["strideshape",3]],[[]],[[],["strideshape",3]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[["ix",6]]],[[]],[[["arraybase",3]]],[[]],[[]],[[]],[[["ix",6]]],[[]],[[["axis",3]],["array",6]],[[]],[[]],[[["usize",15]]],[[],["arrayview",6]],[[],["array",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["arcarray",6]],[[["arraybase",3]],[["ownedarcrepr",3],["arraybase",3]]],[[],["option",4]],[[],["option",4]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["vec",3]],[[["arraybase",3]]],[[["arraybase",3]]],[[["arraybase",3]]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["sliceinfo",3],["shapeerror",3]]],[[],["result",4]],[[],[["shapeerror",3],["result",4],["sliceinfo",3]]],[[],[["result",4],["shapeerror",3],["sliceinfo",3]]],[[],[["shapeerror",3],["result",4],["sliceinfo",3]]],[[],[["result",4],["shapeerror",3],["sliceinfo",3]]],[[],[["sliceinfo",3],["shapeerror",3],["result",4]]],[[],[["sliceinfo",3],["shapeerror",3],["result",4]]],[[],[["result",4],["shapeerror",3],["sliceinfo",3]]],[[],[["sliceinfo",3],["shapeerror",3],["result",4]]],[[["vec",3],["sliceinfoelem",4]],[["result",4],["shapeerror",3],["sliceinfo",3]]],[[],[["shapeerror",3],["result",4],["sliceinfo",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["option",4],["bool",15]]],[[],[["option",4],["bool",15]]],[[],[["option",4],["bool",15]]],[[],[["option",4],["bool",15]]],[[],[["option",4],["bool",15]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["arraybase",3]],[[]],[[]],[[]],[[["axis",3]],["array",6]],[[],["arrayview",6]],[[],["arrayviewmut",6]],[[]],[[],["windows",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["ixdyn",6]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["ixdyn",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["arraybase",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["indicesiter",3]],[[],["indices",3]],[[],["indexediter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["isize",15]],[[]],[[],["isize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[["arraybase",3],["arraybase",3],["arraybase",3]]],[[["arraybase",3],["arraybase",3],["arraybase",3]]],null,[[]],[[]],[[],["parallel",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]]],"p":[[3,"Axis"],[4,"FoldWhile"],[8,"ShapeBuilder"],[8,"IntoNdProducer"],[8,"NdProducer"],[8,"IntoDimension"],[8,"RawData"],[8,"FixedInitializer"],[4,"ErrorKind"],[4,"SliceInfoElem"],[8,"Dimension"],[8,"DataOwned"],[8,"SliceArg"],[8,"RawDataSubst"],[8,"MultiSliceArg"],[8,"DimMax"],[8,"DimAdd"],[8,"IndexLonger"],[4,"CowRepr"],[3,"OwnedRepr"],[3,"OwnedArcRepr"],[3,"RawViewRepr"],[3,"ViewRepr"],[3,"Dim"],[3,"ArrayBase"],[3,"Zip"],[3,"SliceInfo"],[8,"AssignElem"],[3,"AxisDescription"],[3,"ShapeError"],[3,"MathCell"],[3,"Shape"],[3,"StrideShape"],[3,"Slice"],[3,"NewAxis"],[3,"IxDynImpl"],[6,"RawArrayView"],[6,"RawArrayViewMut"],[6,"ArrayView"],[6,"ArrayViewMut"],[6,"IxDyn"],[6,"Array2"],[6,"Array3"],[6,"CowArray"],[6,"Ix"],[6,"Array"],[8,"RemoveAxis"],[13,"Slice"],[3,"Iter"],[3,"IterMut"],[3,"ExactChunks"],[3,"ExactChunksIter"],[3,"ExactChunksMut"],[3,"ExactChunksIterMut"],[3,"Lanes"],[3,"LanesMut"],[3,"Windows"],[3,"IndexedIterMut"],[3,"LanesIter"],[3,"LanesIterMut"],[3,"AxisIterMut"],[3,"AxisChunksIter"],[3,"AxisChunksIterMut"],[3,"IndicesIter"],[3,"Indices"],[3,"IndexedIter"],[3,"AxisIter"],[3,"Axes"],[8,"Dot"],[3,"Parallel"]]},\
"ndarray_parallel":{"doc":"Parallelization features for ndarray.","t":[16,16,16,16,16,16,8,8,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,14,10,10,0,11,11,11,11,11,11,16,16,16,16,16,16,16,8,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10],"n":["Item","Item","Item","Iter","Iter","Iter","NdarrayIntoParallelIterator","NdarrayIntoParallelRefIterator","NdarrayIntoParallelRefMutIterator","Parallel","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","fmt","from","init","into","into_par_iter","into_par_iter","len","len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","par_azip","par_iter","par_iter_mut","prelude","to_owned","try_from","try_into","type_id","with_producer","with_producer","Item","Item","Item","Item","Iter","Iter","Iter","NdarrayIntoParallelIterator","NdarrayIntoParallelRefIterator","NdarrayIntoParallelRefMutIterator","ParApply1","ParApply2","ParApply3","ParApply4","ParApply5","ParApply6","ParMap","into_par_iter","par_apply","par_apply","par_apply","par_apply","par_apply","par_apply","par_iter","par_iter_mut","par_map_inplace","par_mapv_inplace"],"q":["ndarray_parallel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_parallel::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","Parallel iterator wrapper.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel version of the <code>azip!</code> macro.","","","Into- traits for creating parallelized iterators.","","","","","","","","","","","","","","","","","The <code>par_apply</code> method for <code>Zip</code>.","The <code>par_apply</code> method for <code>Zip</code>.","The <code>par_apply</code> method for <code>Zip</code>.","The <code>par_apply</code> method for <code>Zip</code>.","The <code>par_apply</code> method for <code>Zip</code>.","The <code>par_apply</code> method for <code>Zip</code>.","Parallel versions of <code>map_inplace</code> and <code>mapv_inplace</code>.","","","","","","","","","","",""],"i":[1,2,3,1,2,3,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,4,4,4,4,4,4,4,4,4,4,4,4,4,0,2,3,0,4,4,4,4,4,4,5,1,2,3,1,2,3,0,0,0,0,0,0,0,0,0,0,1,6,7,8,9,10,11,2,3,5,5],"f":[null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["parallel",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],null,[[]],[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[8,"NdarrayIntoParallelIterator"],[8,"NdarrayIntoParallelRefIterator"],[8,"NdarrayIntoParallelRefMutIterator"],[3,"Parallel"],[8,"ParMap"],[8,"ParApply1"],[8,"ParApply2"],[8,"ParApply3"],[8,"ParApply4"],[8,"ParApply5"],[8,"ParApply6"]]},\
"ndarray_stats":{"doc":"The <code>ndarray-stats</code> crate exposes statistical routines for …","t":[8,8,8,8,8,8,16,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,10,10,10,10,10,10,10,10,10,0,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,3,13,13,13,13,4,4,4,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,16,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,3,3,3,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CorrelationExt","DeviationExt","EntropyExt","HistogramExt","MaybeNan","MaybeNanExt","NotNan","Quantile1dExt","QuantileExt","Sort1dExt","SummaryStatisticsExt","__private__","__private__","__private__","__private__","__private__","__private__","__private__","__private__","__private__","argmax","argmax_skipnan","argmin","argmin_skipnan","central_moment","central_moments","count_eq","count_neq","cov","cross_entropy","entropy","errors","fold_axis_skipnan","fold_skipnan","from_not_nan","from_not_nan_opt","from_not_nan_ref_opt","geometric_mean","get_from_sorted_mut","get_many_from_sorted_mut","harmonic_mean","histogram","histogram","indexed_fold_skipnan","interpolate","is_nan","kl_divergence","kurtosis","l1_dist","l2_dist","linf_dist","map_axis_skipnan_mut","max","max_skipnan","mean","mean_abs_err","mean_sq_err","min","min_skipnan","partition_mut","peak_signal_to_noise_ratio","pearson_correlation","quantile_axis_mut","quantile_axis_skipnan_mut","quantile_mut","quantiles_axis_mut","quantiles_mut","remove_nan_mut","root_mean_sq_err","skewness","sq_l2_dist","try_as_not_nan","visit_skipnan","weighted_mean","weighted_mean_axis","weighted_std","weighted_std_axis","weighted_sum","weighted_sum_axis","weighted_var","weighted_var_axis","EmptyInput","EmptyInput","EmptyInput","EmptyInput","InvalidQuantile","MinMaxError","MultiInputError","QuantileError","ShapeMismatch","ShapeMismatch","UndefinedOrder","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","first_shape","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","is_empty_input","is_shape_mismatch","ne","ne","ne","second_shape","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","Bins","Edges","Grid","GridBuilder","Histogram","HistogramExt","__private__","add_observation","as_array_view","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone_into","clone_into","clone_into","counts","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","errors","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_array","grid","histogram","index","index","index","index_of","index_of","indices_of","init","init","init","init","init","into","into","into","into","into","is_empty","is_empty","iter","len","len","ndim","ndim","ne","ne","ne","new","new","projections","range_of","shape","strategies","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","BinNotFound","BinsBuildError","EmptyInput","Strategy","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","description","description","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","init","init","into","into","is_empty_input","is_strategy","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Auto","BinsBuildingStrategy","Elem","FreedmanDiaconis","Rice","Sqrt","Sturges","bin_width","bin_width","bin_width","bin_width","bin_width","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","build","build","build","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_array","from_array","from_array","from_array","from_array","from_array","init","init","init","init","init","into","into","into","into","into","n_bins","n_bins","n_bins","n_bins","n_bins","n_bins","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","Higher","Interpolate","Linear","Lower","Midpoint","Nearest","__private__","__private__","__private__","__private__","__private__","__private__","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","from","from","from","from","from","init","init","init","init","init","interpolate","interpolate","interpolate","interpolate","interpolate","into","into","into","into","into","needs_higher","needs_higher","needs_higher","needs_higher","needs_higher","needs_lower","needs_lower","needs_lower","needs_lower","needs_lower","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip"],"q":["ndarray_stats","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_stats::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_stats::histogram","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_stats::histogram::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_stats::histogram::strategies","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_stats::interpolate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Extension trait for <code>ArrayBase</code> providing functions to …","An extension trait for <code>ArrayBase</code> providing functions to …","Extension trait for <code>ArrayBase</code> providing methods to …","Extension trait for <code>ArrayBase</code> providing methods to …","A number type that can have not-a-number values.","Extension trait for <code>ArrayBase</code> providing NaN-related …","A type that is guaranteed not to be a NaN value.","Quantile methods for 1-D arrays.","Quantile methods for <code>ArrayBase</code>.","Methods for sorting and partitioning 1-D arrays.","Extension trait for <code>ArrayBase</code> providing methods to …","This method makes this trait impossible to implement …","This method makes this trait impossible to implement …","This method makes this trait impossible to implement …","This method makes this trait impossible to implement …","This method makes this trait impossible to implement …","This method makes this trait impossible to implement …","This method makes this trait impossible to implement …","This method makes this trait impossible to implement …","This method makes this trait impossible to implement …","Finds the index of the maximum value of the array.","Finds the index of the maximum value of the array …","Finds the index of the minimum value of the array.","Finds the index of the minimum value of the array …","Returns the <em>p</em>-th central moment of all elements in the …","Returns the first <em>p</em> central moments of all elements in …","Counts the number of indices at which the elements of the …","Counts the number of indices at which the elements of the …","Return the covariance matrix <code>C</code> for a 2-dimensional array …","Computes the cross entropy <em>H(p,q)</em> between two arrays, …","Computes the entropy <em>S</em> of the array values, defined as","Custom errors returned from our methods and functions.","Fold non-NaN values along an axis.","Traverse the non-NaN array elements and apply a fold, …","Converts the value.","Converts the value.","Converts the value.","Returns the <code>geometric mean</code> <code>GM(X)</code> of all elements in the …","Return the element that would occupy the <code>i</code>-th position if …","A bulk version of <code>get_from_sorted_mut</code>, optimized to …","Returns the <code>harmonic mean</code> <code>HM(X)</code> of all elements in the …","Histogram functionalities.","Returns the histogram for a 2-dimensional array of points …","Traverse the non-NaN elements and their indices and apply …","Interpolation strategies.","Returns <code>true</code> if the value is a NaN value.","Computes the Kullback-Leibler divergence <em>Dₖₗ(p,q)</em> …","Returns the kurtosis <code>Kurt[X]</code> of all elements in the array:","Computes the L1 distance between <code>self</code> and <code>other</code>.","Computes the L2 distance between <code>self</code> and <code>other</code>.","Computes the L∞ distance between <code>self</code> and <code>other</code>.","Reduce the values along an axis into just one value, …","Finds the elementwise maximum of the array.","Finds the elementwise maximum of the array, skipping NaN …","Returns the <code>arithmetic mean</code> x̅ of all elements in the …","Computes the mean absolute error between <code>self</code> and <code>other</code>.","Computes the mean squared error between <code>self</code> and <code>other</code>.","Finds the elementwise minimum of the array.","Finds the elementwise minimum of the array, skipping NaN …","Partitions the array in increasing order based on the …","Computes the peak signal-to-noise ratio between <code>self</code> and …","Return the Pearson correlation coefficients for a …","Return the qth quantile of the data along the specified …","Return the <code>q</code>th quantile of the data along the specified …","Return the qth quantile of the data.","A bulk version of <code>quantile_axis_mut</code>, optimized to …","A bulk version of <code>quantile_mut</code>, optimized to retrieve …","Returns a view with the NaN values removed.","Computes the unnormalized root-mean-square error between …","Returns the Pearson’s moment coefficient of skewness …","Computes the squared L2 distance between <code>self</code> and <code>other</code>.","Tries to convert the value to <code>NotNan</code>.","Visit each non-NaN element in the array by calling <code>f</code> on …","Returns the [<code>arithmetic weighted mean</code>] x̅ of all …","Returns the [<code>arithmetic weighted mean</code>] x̅ along <code>axis</code>. …","Return weighted standard deviation of all elements in the …","Return weighted standard deviation along <code>axis</code>.","Returns the weighted sum of all elements in the array, …","Returns the weighted sum along <code>axis</code>, that is, the dot …","Return weighted variance of all elements in the array.","Return weighted variance along <code>axis</code>.","An error that indicates that the input array was empty.","The input was empty.","One or more of the arrays were empty.","The input was empty.","The <code>q</code> was not between <code>0.</code> and <code>1.</code> (inclusive).","An error computing a minimum/maximum value.","An error for methods that take multiple non-empty array …","An error computing a quantile.","An error used by methods and functions that take two …","The arrays did not have the same shape.","The ordering between a tested pair of values was …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns whether <code>self</code> is the <code>EmptyInput</code> variant.","Returns whether <code>self</code> is the <code>ShapeMismatch</code> variant.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A sorted collection of non-overlapping 1-dimensional …","A sorted collection of type <code>A</code> elements used to represent …","An orthogonal partition of a rectangular region in an <em>n</em>…","A builder used to create <code>Grid</code> instances for <code>histogram</code> …","Histogram data structure.","Extension trait for <code>ArrayBase</code> providing methods to …","This method makes this trait impossible to implement …","Adds a single observation to the histogram.","Returns an immutable 1-dimensional array view of edges.","","","","","","","","","","","Returns a <code>Grid</code> instance, with building parameters infered …","","","","","","","Borrows a view on the histogram counts matrix.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts an <code>Array1<A></code> into an <code>Edges<A></code>, consuming the …","","Converts a <code>Vec<A></code> into an <code>Edges<A></code>, consuming the edges. …","","","Converts a <code>Vec<Bins<A>></code> into a <code>Grid<A></code>, consuming the …","Returns a <code>GridBuilder</code> for building a <code>Grid</code> with a given …","Borrows an immutable reference to the histogram grid.","Returns the histogram for a 2-dimensional array of points …","Returns a reference to the <code>i</code>-th edge in <code>self</code>.","Returns a range as the bin at the given <code>index</code> position.","Given an <code>n</code>-dimensional index, <code>i = (i_0, ..., i_{n-1})</code>, …","Returns the index of the bin in <code>self</code> that contains the …","Returns an <code>n-dimensional</code> index, of bins along each axis …","Returns indices of two consecutive <code>edges</code> in <code>self</code>, if the …","","","","","","","","","","","Returns <code>true</code> if <code>self</code> contains no edges.","Returns <code>true</code> if the number of bins is zero, i.e. if the …","Returns an iterator over the <code>edges</code> in <code>self</code>.","Returns the number of edges in <code>self</code>.","Returns the number of bins in <code>self</code>.","Returns the number of dimensions of the space the …","Returns the number of dimensions of the region …","","","","Returns a new instance of Histogram given a <code>Grid</code>.","Returns a <code>Bins</code> instance where each bin corresponds to two …","Returns the grid projections on each coordinate axis as a …","Returns a range as the bin which contains the given <code>value</code>…","Returns the numbers of bins along each coordinate axis.","Strategies used by <code>GridBuilder</code> to infer optimal …","","","","","","","","","","","","","","","","","","","","","","","","Error to denote that no bin has been found for a certain …","Error computing the set of histogram bins.","The input array was empty.","The strategy for computing appropriate bins failed.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns whether <code>self</code> is the <code>EmptyInput</code> variant.","Returns whether <code>self</code> is the <code>Strategy</code> variant.","","","","","","","","","","","","","Maximum of the <code>Sturges</code> and <code>FreedmanDiaconis</code> strategies. …","A trait implemented by all strategies to build <code>Bins</code> with …","","Robust (resilient to outliers) strategy that takes into …","A strategy that does not take variability into account, …","Square root (of data size) strategy, used by Excel and …","R’s default strategy, only accounts for data size. Only …","The bin width (or bin length) according to the fitted …","The bin width (or bin length) according to the fitted …","The bin width (or bin length) according to the fitted …","The bin width (or bin length) according to the fitted …","The bin width (or bin length) according to the fitted …","","","","","","","","","","","Returns a <code>Bins</code> instance, according to parameters inferred …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a strategy that has learnt the required parameter …","Returns <code>Err(BinsBuildError::Strategy)</code> if the array is …","Returns <code>Err(BinsBuildError::Strategy)</code> if the array is …","Returns <code>Err(BinsBuildError::Strategy)</code> if the array is …","Returns <code>Err(BinsBuildError::Strategy)</code> if <code>IQR==0</code>. Returns …","Returns <code>Err(BinsBuildError::Strategy)</code> if <code>IQR==0</code>. Returns …","","","","","","","","","","","Returns the optimal number of bins, according to …","","","","","","","","","","","","","","","","","","","","","","","","","","Select the higher value.","Used to provide an interpolation strategy to …","Linearly interpolate between the two values (…","Select the lower value.","Select the midpoint of the two values (…","Select the nearest value.","This method makes this trait impossible to implement …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,0,0,0,2,3,4,5,6,7,8,9,10,7,7,7,7,10,10,3,3,2,4,4,0,6,6,1,1,1,10,9,9,10,0,5,6,0,1,4,10,3,3,3,6,7,7,10,3,3,7,7,9,3,2,7,7,8,7,8,1,3,10,3,1,6,10,10,10,10,10,10,10,10,0,11,12,13,13,0,0,0,0,12,11,14,11,15,12,13,14,11,15,12,13,14,11,15,12,13,14,11,15,12,13,14,11,15,12,13,14,11,15,12,13,14,11,15,12,13,14,11,15,12,13,14,11,13,15,14,14,11,11,15,15,12,12,13,13,14,11,11,15,12,12,12,13,13,14,11,15,12,13,14,11,15,12,13,12,12,15,12,13,15,14,11,15,12,13,14,11,15,12,13,14,11,15,12,13,14,11,15,12,13,14,11,15,12,13,14,11,15,12,13,0,0,0,0,0,0,5,16,17,18,16,17,19,20,18,16,17,19,20,18,17,19,20,17,19,20,16,18,16,17,19,20,18,16,17,19,20,18,16,17,19,20,17,19,20,17,19,20,0,17,19,20,18,16,17,17,17,19,20,20,18,16,5,17,19,20,19,20,17,18,16,17,19,20,18,16,17,19,20,17,19,17,17,19,16,20,17,19,20,16,19,20,19,20,0,17,19,20,18,16,17,19,20,18,16,17,19,20,18,16,17,19,20,18,16,17,19,20,0,0,21,21,22,21,22,21,22,21,22,21,22,21,22,21,22,21,22,21,22,22,21,21,22,21,21,21,22,21,22,21,21,21,22,21,22,21,22,21,22,21,22,21,22,21,0,0,23,0,0,0,0,24,25,26,27,28,24,25,26,27,28,24,25,26,27,28,23,24,25,26,27,28,24,25,26,27,28,24,25,26,27,28,24,25,26,27,28,24,25,26,27,28,24,25,26,27,28,23,24,25,26,27,28,24,25,26,27,28,24,25,26,27,28,23,24,25,26,27,28,24,25,26,27,28,24,25,26,27,28,24,25,26,27,28,24,25,26,27,28,0,0,0,0,0,0,29,30,31,32,33,34,30,31,32,33,34,30,31,32,33,34,30,31,32,33,34,30,31,32,33,34,30,31,32,33,34,30,31,32,33,34,30,31,32,33,34,30,31,32,33,34,30,31,32,33,34,30,31,32,33,34,30,31,32,33,34,30,31,32,33,34,30,31,32,33,34,30,31,32,33,34,30,31,32,33,34],"f":[null,null,null,null,null,null,null,null,null,null,null,[[["privatemarker",3]]],[[["privatemarker",3]]],[[["privatemarker",3]]],[[["privatemarker",3]]],[[["privatemarker",3]]],[[["privatemarker",3]]],[[["privatemarker",3]]],[[["privatemarker",3]]],[[["privatemarker",3]]],[[],[["minmaxerror",4],["result",4]]],[[],[["result",4],["emptyinput",3]]],[[],[["minmaxerror",4],["result",4]]],[[],[["result",4],["emptyinput",3]]],[[["u16",15]],[["emptyinput",3],["result",4]]],[[["u16",15]],[["result",4],["vec",3],["emptyinput",3]]],[[["arraybase",3]],[["usize",15],["multiinputerror",4],["result",4]]],[[["arraybase",3]],[["usize",15],["multiinputerror",4],["result",4]]],[[],[["emptyinput",3],["result",4],["array2",6]]],[[["arraybase",3]],[["result",4],["multiinputerror",4]]],[[],[["emptyinput",3],["result",4]]],null,[[["axis",3]],["array",6]],[[]],[[]],[[["option",4]]],[[["option",4]]],[[],[["emptyinput",3],["result",4]]],[[["usize",15]]],[[["arraybase",3]],[["indexmap",3],["usize",15]]],[[],[["emptyinput",3],["result",4]]],null,[[["grid",3]],["histogram",3]],[[]],null,[[],["bool",15]],[[["arraybase",3]],[["result",4],["multiinputerror",4]]],[[],[["emptyinput",3],["result",4]]],[[["arraybase",3]],[["result",4],["multiinputerror",4]]],[[["arraybase",3]],[["f64",15],["result",4],["multiinputerror",4]]],[[["arraybase",3]],[["result",4],["multiinputerror",4]]],[[["axis",3]],["array",6]],[[],[["minmaxerror",4],["result",4]]],[[]],[[],[["emptyinput",3],["result",4]]],[[["arraybase",3]],[["f64",15],["result",4],["multiinputerror",4]]],[[["arraybase",3]],[["f64",15],["result",4],["multiinputerror",4]]],[[],[["minmaxerror",4],["result",4]]],[[]],[[["usize",15]],["usize",15]],[[["arraybase",3]],[["f64",15],["result",4],["multiinputerror",4]]],[[],[["emptyinput",3],["result",4],["array2",6]]],[[["n64",6],["axis",3]],[["result",4],["quantileerror",4],["array",6]]],[[["n64",6],["axis",3]],[["result",4],["quantileerror",4],["array",6]]],[[["n64",6]],[["quantileerror",4],["result",4]]],[[["arraybase",3],["axis",3]],[["array",6],["quantileerror",4],["result",4]]],[[["arraybase",3]],[["array1",6],["quantileerror",4],["result",4]]],[[["arrayviewmut1",6]],["arrayviewmut1",6]],[[["arraybase",3]],[["f64",15],["result",4],["multiinputerror",4]]],[[],[["emptyinput",3],["result",4]]],[[["arraybase",3]],[["result",4],["multiinputerror",4]]],[[],["option",4]],[[]],[[],[["result",4],["multiinputerror",4]]],[[["arraybase",3],["axis",3]],[["result",4],["array",6],["multiinputerror",4]]],[[],[["result",4],["multiinputerror",4]]],[[["arraybase",3],["axis",3]],[["result",4],["array",6],["multiinputerror",4]]],[[],[["result",4],["multiinputerror",4]]],[[["arraybase",3],["axis",3]],[["result",4],["array",6],["multiinputerror",4]]],[[],[["result",4],["multiinputerror",4]]],[[["arraybase",3],["axis",3]],[["result",4],["array",6],["multiinputerror",4]]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["emptyinput",3]],[[],["minmaxerror",4]],[[],["shapemismatch",3]],[[],["multiinputerror",4]],[[],["quantileerror",4]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["emptyinput",3]],["bool",15]],[[["minmaxerror",4]],["bool",15]],[[["shapemismatch",3]],["bool",15]],[[["multiinputerror",4]],["bool",15]],[[["quantileerror",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["emptyinput",3]],["minmaxerror",4]],[[]],[[]],[[["emptyinput",3]]],[[["shapemismatch",3]]],[[]],[[["emptyinput",3]],["quantileerror",4]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["shapemismatch",3]],["bool",15]],[[["multiinputerror",4]],["bool",15]],[[["quantileerror",4]],["bool",15]],null,[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[["privatemarker",3]]],[[["arraybase",3]],[["binnotfound",3],["result",4]]],[[],["arrayview1",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["grid",3]],[[],["edges",3]],[[],["bins",3]],[[],["grid",3]],[[]],[[]],[[]],[[],[["arrayviewd",6],["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["edges",3]],["bool",15]],[[["bins",3]],["bool",15]],[[["grid",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["array1",6]]],[[]],[[["vec",3]]],[[]],[[]],[[["vec",3],["bins",3]]],[[["arraybase",3]],[["result",4],["binsbuilderror",4]]],[[],["grid",3]],[[["grid",3]],["histogram",3]],[[["usize",15]]],[[["usize",15]],["range",3]],[[],[["vec",3],["range",3]]],[[],[["option",4],["usize",15]]],[[["arraybase",3]],[["option",4],["vec",3]]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["edges",3]],["bool",15]],[[["bins",3]],["bool",15]],[[["grid",3]],["bool",15]],[[["grid",3]]],[[["edges",3]]],[[]],[[],[["range",3],["option",4]]],[[],[["vec",3],["usize",15]]],null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[],["binnotfound",3]],[[],["binsbuilderror",4]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["str",15]],[[],["str",15]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["emptyinput",3]]],[[["minmaxerror",4]],["binsbuilderror",4]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bins",3]],[[],["bins",3]],[[],["bins",3]],[[],["bins",3]],[[],["bins",3]],[[],["bins",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["arraybase",3]],[["result",4],["binsbuilderror",4]]],[[["arraybase",3]],[["result",4],["binsbuilderror",4]]],[[["arraybase",3]],[["result",4],["binsbuilderror",4]]],[[["arraybase",3]],[["result",4],["binsbuilderror",4]]],[[["arraybase",3]],[["result",4],["binsbuilderror",4]]],[[["arraybase",3]],[["result",4],["binsbuilderror",4]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[["privatemarker",3]]],[[["privatemarker",3]]],[[["privatemarker",3]]],[[["privatemarker",3]]],[[["privatemarker",3]]],[[["privatemarker",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["option",4],["n64",6],["usize",15]]],[[["option",4],["n64",6],["usize",15]]],[[["option",4],["n64",6],["usize",15]]],[[["option",4],["n64",6],["usize",15]]],[[["option",4],["n64",6],["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[["n64",6],["usize",15]],["bool",15]],[[["n64",6],["usize",15]],["bool",15]],[[["n64",6],["usize",15]],["bool",15]],[[["n64",6],["usize",15]],["bool",15]],[[["n64",6],["usize",15]],["bool",15]],[[["n64",6],["usize",15]],["bool",15]],[[["n64",6],["usize",15]],["bool",15]],[[["n64",6],["usize",15]],["bool",15]],[[["n64",6],["usize",15]],["bool",15]],[[["n64",6],["usize",15]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]]],"p":[[8,"MaybeNan"],[8,"CorrelationExt"],[8,"DeviationExt"],[8,"EntropyExt"],[8,"HistogramExt"],[8,"MaybeNanExt"],[8,"QuantileExt"],[8,"Quantile1dExt"],[8,"Sort1dExt"],[8,"SummaryStatisticsExt"],[4,"MinMaxError"],[4,"MultiInputError"],[4,"QuantileError"],[3,"EmptyInput"],[3,"ShapeMismatch"],[3,"Histogram"],[3,"Edges"],[3,"GridBuilder"],[3,"Bins"],[3,"Grid"],[4,"BinsBuildError"],[3,"BinNotFound"],[8,"BinsBuildingStrategy"],[3,"Sqrt"],[3,"Rice"],[3,"Sturges"],[3,"FreedmanDiaconis"],[3,"Auto"],[8,"Interpolate"],[3,"Higher"],[3,"Lower"],[3,"Nearest"],[3,"Midpoint"],[3,"Linear"]]},\
"netcdf":{"doc":"Rust bindings for Unidata’s libnetcdf","t":[5,5,0,5,5,0,0,0,0,5,5,0,0,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,4,13,13,13,13,13,6,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,3,18,3,18,18,3,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,13,13,3,3,3,13,13,3,13,13,13,13,3,13,13,13,13,13,13,4,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,18,13,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,10,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11],"n":["append","append_with","attribute","create","create_with","dimension","error","file","group","open","open_with","types","variable","AttrValue","Attribute","Double","Doubles","Float","Floats","Int","Ints","Longlong","Longlongs","Schar","Schars","Short","Shorts","Str","Uchar","Uchars","Uint","Uints","Ulonglong","Ulonglongs","Ushort","Ushorts","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","name","ne","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","Dimension","Identifier","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fmt","fmt","from","from","identifier","into","into","is_unlimited","len","name","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","AlreadyExists","Ambiguous","BufferLen","Conversion","Error","IndexLen","IndexMismatch","Netcdf","NotFound","Overflow","Result","SliceLen","SliceMismatch","Str","Stride","TypeMismatch","TypeUnknown","Utf8Conversion","WrongDataset","ZeroSlice","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","from","into","is_ambigous","source","to_string","try_from","try_into","type_id","CLASSIC","DISKLESS","File","INMEMORY","MutableFile","NETCDF4","NOCLOBBER","Options","SHARE","WRITE","_64BIT_DATA","_64BIT_OFFSET","add_attribute","add_compound_type","add_dimension","add_enum_type","add_group","add_opaque_type","add_string_variable","add_unlimited_dimension","add_variable","add_variable_from_identifiers","add_variable_with_type","add_vlen_type","all","attribute","attributes","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","contains","default","deref","dimension","dimensions","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","group","group_mut","groups","groups_mut","hash","insert","intersects","into","into","into","is_all","is_empty","ne","not","partial_cmp","path","remove","root","root_mut","set","sub","sub_assign","to_owned","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","types","variable","variable_mut","variables","variables_mut","Group","GroupMut","add_attribute","add_compound_type","add_dimension","add_enum_type","add_group","add_opaque_type","add_string_variable","add_unlimited_dimension","add_variable","add_variable_from_identifiers","add_variable_with_type","add_vlen_type","attribute","attributes","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","dimension","dimensions","fmt","fmt","from","from","group","group_mut","groups","groups_mut","into","into","name","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","types","variable","variable_mut","variables","variables_mut","Basic","BasicType","Byte","Char","Compound","CompoundBuilder","CompoundField","CompoundType","Double","Enum","EnumType","Float","Int","Int64","Opaque","OpaqueType","Short","String","Ubyte","Uint","Uint64","Ushort","VariableType","Vlen","VlenType","add","add_array","add_array_type","add_type","as_basic","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","dimensions","eq","fields","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","is_char","is_f32","is_f32","is_f64","is_f64","is_i16","is_i16","is_i32","is_i32","is_i64","is_i64","is_i8","is_i8","is_string","is_u16","is_u16","is_u32","is_u32","is_u64","is_u64","is_u8","is_u8","members","name","name","name","name","name","name","name","name_from_value","offset","size","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","typ","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Big","Endianness","Little","NCTYPE","Native","Numeric","Variable","VariableMut","add_attribute","attribute","attributes","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chunking","clone","clone","clone_into","clone_into","compression","deref","dimensions","endian","endian_value","eq","fill_value","fmt","fmt","fmt","from","from","from","get_values_strided","into","into","into","len","name","put_raw_values","put_string","put_value","put_value_at","put_values","put_values_at","put_values_strided","put_values_strided","put_vlen","raw_values","set_fill_value","set_nofill","single_value_from_variable","string_value","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","values","values_strided_to","values_to","variable_to_ptr","vartype","vlen"],"q":["netcdf","","","","","","","","","","","","","netcdf::attribute","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","netcdf::dimension","","","","","","","","","","","","","","","","","","","","","","","","","","","","netcdf::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","netcdf::file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","netcdf::group","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","netcdf::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","netcdf::variable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Open a <code>netCDF</code> file in append mode","Open a <code>netCDF</code> file in append mode with the given options","Add and read attributes from netcdf groups and variables","Open a netcdf file in create mode","Open a <code>netCDF</code> file in create mode with the given options","Interact with netcdf dimensions","Errors that can appear when interacting with netcdf files.…","Open, create, and append netcdf files","All netcdf items belong in the root group, which can be …","Open a <code>netCDF</code> file in read mode","Open a <code>netCDF</code> file in read mode with the given options","Contains functions and enums describing variable types","Variables in the netcdf file","Holds the attribute value which can be inserted and …","Extra properties of a variable or a group can be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the name of the attribute","","","","","","","","","","Get the value of the attribute","Represents a netcdf dimension","Unique identifier for a dimensions in a file. Used when …","","","","","","","","","","","","","Grabs the unique identifier for this dimension, which can …","","","Checks whether the dimension is growable","Get current length of this dimension","Gets the name of the dimension","","","","","","","","","Variable/dimension already exists","Slice lengths are ambiguous","Supplied the wrong length of the buffer","Conversion error","Various error types that can occur in this crate","Length of the request indices is inconsistent","Some index is greater than expected","Errors from the wrapped netcdf library","Could not find variable/attribute/etc","Overflows possible lengths","Result type used in this crate","Length of the slice indices is inconsistent","Requested a mismatched total slice","Misc errors","Zero stride or matched with length != 1","Supplied the wrong type of parameter","Does not know the type (probably library error…)","Name is not valid utf-8","Identifier belongs to another dataset","Requested a zero slice","","","","","","","","","","","","Was the error due to ambiguity of the indices or lengths?","","","","","","Use a subset compatible with older software","Reads file into memory","Read only accessible file","Read from memory","Mutable access to file","Use the <code>hdf5</code> storage format","Overwrite existing file","Options for opening, creating, and appending files","Limits internal caching","Open with write permissions (use <code>append</code> for a mutable …","Use 64 bit dimensions and sizes (<code>CDF-5</code> format)","Use 64 bit file offsets","Add an attribute to the root group","Build a compound type","Adds a dimension with the given name and size. A size of …","Add an enum datatype","Add an empty group to the dataset","Add an opaque datatype, with <code>size</code> bytes","Adds a variable with a basic type of string","Adds a dimension with unbounded size","Create a Variable into the dataset, with no data written …","Adds a variable from a set of unique identifiers, …","Create a variable with the specified type","Add a variable length datatype","Returns the set containing all flags.","Get a single attribute","Get all attributes in the root group","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","","Get a single dimension","Iterator over all dimensions in the root group","Returns an empty set of flags","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","Get a group","Mutable access to subgroup","Iterator over all subgroups in the root group","Iterator over all groups (mutable access)","","Inserts the specified flags in-place.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Returns the complement of this set of flags.","","path used to open/create the file","Removes the specified flags in-place.","Main entrypoint for interacting with the netcdf file.","Mutable access to the root group","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","Toggles the specified flags in-place.","","","","","","","","","","Return all types in the root group","Get a variable from the group","Get a mutable variable from the group","Iterate over all variables in a group","Iterate over all variables in the root group, with …","Main component of the netcdf format. Holds all variables, …","Mutable access to a group","Add an attribute to the group","Build a compound type","Adds a dimension with the given name and size. A size of …","Add an enum datatype","Add an empty group to the dataset","Add an opaque datatype, with <code>size</code> bytes","Adds a variable with a basic type of string","Adds a dimension with unbounded size","Create a Variable into the dataset, with no data written …","Adds a variable from a set of unique identifiers, …","Create a variable with the specified type","Add a variable length datatype","Get a single attribute","Get all attributes in the group","","","","","","","","Get a single dimension","Iterator over all dimensions","","","","","Get a group","Mutable access to subgroup","Iterator over all subgroups in this group","Iterator over all groups (mutable access)","","","Name of the current group","","","","","","","","Return all types in this group","Get a variable from the group","Get a mutable variable from the group","Iterate over all variables in a group","Iterate over all variables in a group, with mutable access","A basic numeric type","Basic numeric types","Signed 1 byte integer","ISO/ASCII character","Compound type","A builder for a compound type","Subfield of a compound","A type consisting of other types","Double precision floating point number","Enum type","Multiple string values stored as integer type","Single precision floating point number","Signed 4 byte integer","Signed 8 byte integer","Some bytes","A set of bytes which with unspecified endianess","Signed 2 byte integer","A string type","Unsigned 1 byte integer","Unsigned 4 byte integer","Unsigned 8 byte integer","Unsigned 2 byte integer","Description of the variable","Variable length array","Type of variable length","Add a basic numeric type","Add an array of a basic type","Add a type as an array","Add a type to the compound","Get the basic type, if this type is a simple numeric type","","","","","","","","","","","","","","","","","Finalize the compound type","","","","","","","","","","","","","Get dimensionality of this compound field","","Get the fields of the compound","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get all members of the enum","Name of the compound field","<code>rusty</code> name of the type","Get the name of this opaque type","Name of the type","Name of the type","Get the name of this type","Get the name of the type. The basic numeric types will …","Get the name from the enum value","Offset in bytes of this field in the compound type","Number of bytes this type occupies","","","","","","","","","","","","","","","","","","","","","","","type of the field","Internal type","Get the base type of the enum","","","","","","","","","Big endian","Enum for variables endianness","Lille endian","Constant corresponding to a netcdf type","Native endianness, depends on machine architecture …","This trait allow an implicit cast when fetching a netCDF …","This struct defines a <code>netCDF</code> variable.","Mutable access to a variable.","Adds an attribute to the variable","Get an attribute of this variable","Iterator over all the attributes of this variable","","","","","","","Set chunking for variable. Must be set before inserting …","","","","","Sets compression on the variable. Must be set before …","","Dimensions for a variable","Set endianness of the variable. Must be set before …","Get endianness of the variable.","","Get the fill value of a variable","","","","","","","get a SLICE of values into the variable, with the source …","","","","Get current length of the variable","Get name of variable","Get values of any type as bytes","Internally converts to a <code>CString</code>, avoid using this …","Put a single value at <code>indices</code>","Put a single value into a netCDF variable","Put a slice of values at <code>indices</code>","put a SLICE of values into a netCDF variable at the given …","put a SLICE of values into the variable, with the …","Put a slice of values at <code>indices</code>, with destination strided","Get a vlen element","Get values of any type as bytes, with no further …","Set a Fill Value","Set the fill value to no value. Use this when wanting to …","Returns a single indexed value of the variable as Self","Reads a string variable. This involves two copies per …","","","","","","","","","","","","Fetches one specific value at specific indices indices …","Fetches variable","Fetches variable into slice buffer must be able to hold …","Fetches variable into slice buffer must be able to hold …","Get multiple values at once, without checking the …","Get the type of this variable","Get a vlen element"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,0,0,3,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,3,3,3,4,3,4,3,4,3,4,5,5,5,5,0,5,5,5,5,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,0,6,0,6,6,0,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,6,8,8,6,6,6,6,6,6,6,6,8,7,6,8,7,6,6,6,6,6,7,8,8,6,6,6,6,6,6,6,6,8,7,6,8,7,6,6,6,6,8,7,8,7,6,6,6,6,8,7,6,6,6,6,6,8,6,8,7,6,6,6,6,6,6,8,7,6,8,7,6,8,7,8,8,7,8,7,0,0,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,9,10,9,10,10,9,10,10,10,9,10,9,10,9,10,9,10,9,10,10,10,9,10,9,10,9,10,10,9,10,9,11,0,12,12,11,0,0,0,12,11,0,12,12,12,11,0,12,11,12,12,12,12,0,11,0,13,13,13,13,11,14,13,12,15,16,17,18,11,14,13,12,15,16,17,18,11,13,12,15,16,17,18,11,12,15,16,17,18,11,14,12,18,12,15,16,17,18,11,14,13,12,15,16,17,18,11,11,11,11,11,11,14,13,12,15,16,17,18,11,12,12,11,12,11,12,11,12,11,12,11,12,11,11,12,11,12,11,12,11,12,11,17,14,12,15,16,17,18,11,17,14,15,12,15,16,17,18,11,14,13,12,15,16,17,18,11,14,13,12,15,16,17,18,11,14,16,17,14,13,12,15,16,17,18,11,19,0,19,20,19,0,0,0,21,22,22,22,21,19,22,21,19,21,22,19,22,19,21,21,22,21,22,19,22,22,21,19,22,21,19,20,22,21,19,22,22,21,21,21,20,21,20,20,21,21,22,21,21,20,22,22,19,22,21,19,22,21,19,22,21,19,22,22,22,22,20,22,22],"f":[[[],[["result",6],["mutablefile",3]]],[[["options",3]],[["result",6],["mutablefile",3]]],null,[[],[["result",6],["mutablefile",3]]],[[["options",3]],[["result",6],["mutablefile",3]]],null,null,null,null,[[],[["file",3],["result",6]]],[[["options",3]],[["file",3],["result",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["attribute",3]],[[],["attrvalue",4]],[[]],[[]],[[["attrvalue",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["i64",15],["vec",3]]],[[["u8",15],["vec",3]]],[[["f64",15],["vec",3]]],[[["str",15]]],[[["string",3]]],[[["f32",15]]],[[["vec",3],["f32",15]]],[[]],[[["u8",15]]],[[["f64",15]]],[[["i8",15]]],[[["i64",15]]],[[["vec",3],["i8",15]]],[[["vec",3],["u64",15]]],[[["u64",15]]],[[["vec",3],["i32",15]]],[[["i32",15]]],[[["u16",15]]],[[["vec",3],["u16",15]]],[[["i16",15]]],[[["i16",15],["vec",3]]],[[["u32",15]]],[[["vec",3],["u32",15]]],[[]],[[]],[[],["str",15]],[[["attrvalue",4]],["bool",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["result",6],["attrvalue",4]]],null,null,[[]],[[]],[[]],[[]],[[],["dimension",3]],[[],["identifier",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["identifier",3]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["str",15]]],[[]],[[["nc_type",6]]],[[["tryfrominterror",3]]],[[["fromutf8error",3]]],[[["string",3]]],[[]],[[],["bool",15]],[[],[["error",8],["option",4]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15]],[["attribute",3],["result",6]]],[[["str",15]],[["compoundbuilder",3],["result",6]]],[[["usize",15],["str",15]],[["result",6],["dimension",3]]],[[["str",15]],[["enumtype",3],["result",6]]],[[["str",15]],[["result",6],["groupmut",3]]],[[["usize",15],["str",15]],[["opaquetype",3],["result",6]]],[[["str",15]],[["result",6],["variablemut",3]]],[[["str",15]],[["dimension",3],["result",6]]],[[["str",15]],[["result",6],["variablemut",3]]],[[["str",15]],[["result",6],["variablemut",3]]],[[["variabletype",4],["str",15]],[["result",6],["variablemut",3]]],[[["str",15]],[["result",6],["vlentype",3]]],[[],["options",3]],[[["str",15]],[["option",4],["attribute",3]]],[[]],[[["options",3]],["options",3]],[[["options",3]]],[[["options",3]],["options",3]],[[["options",3]]],[[],["nc_type",6]],[[["options",3]],["options",3]],[[["options",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["options",3]],[[]],[[["options",3]],["ordering",4]],[[["options",3]],["bool",15]],[[],["options",3]],[[]],[[["str",15]],[["dimension",3],["option",4]]],[[]],[[],["options",3]],[[["options",3]],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["nc_type",6]],[["options",3],["option",4]]],[[["nc_type",6]],["options",3]],[[["nc_type",6]],["options",3]],[[["intoiterator",8]],["options",3]],[[["str",15]],[["option",4],["result",6]]],[[["str",15]],[["option",4],["result",6]]],[[],["result",6]],[[],["result",6]],[[]],[[["options",3]]],[[["options",3]],["bool",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["options",3]],["bool",15]],[[],["options",3]],[[["options",3]],[["ordering",4],["option",4]]],[[],[["result",6],["pathbuf",3]]],[[["options",3]]],[[],[["option",4],["group",3]]],[[],[["option",4],["groupmut",3]]],[[["bool",15],["options",3]]],[[["options",3]],["options",3]],[[["options",3]]],[[]],[[["options",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",6]],[[["str",15]],[["option",4],["variable",3]]],[[["str",15]],[["option",4],["variablemut",3]]],[[]],[[]],null,null,[[["str",15]],[["attribute",3],["result",6]]],[[["str",15]],[["compoundbuilder",3],["result",6]]],[[["usize",15],["str",15]],[["dimension",3],["result",6]]],[[["str",15]],[["enumtype",3],["result",6]]],[[["str",15]],[["result",6],["groupmut",3]]],[[["usize",15],["str",15]],[["opaquetype",3],["result",6]]],[[["str",15]],[["variablemut",3],["result",6]]],[[["str",15]],[["dimension",3],["result",6]]],[[["str",15]],[["variablemut",3],["result",6]]],[[["str",15]],[["variablemut",3],["result",6]]],[[["variabletype",4],["str",15]],[["result",6],["variablemut",3]]],[[["str",15]],[["result",6],["vlentype",3]]],[[["str",15]],[["attribute",3],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[],["group",3]],[[]],[[]],[[["str",15]],[["dimension",3],["option",4]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["str",15]],[["option",4],["group",3]]],[[["str",15]],[["option",4],["groupmut",3]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["str",15]],[["variable",3],["option",4]]],[[["str",15]],[["option",4],["variablemut",3]]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[["str",15],["variabletype",4]],["result",6]],[[["str",15],["variabletype",4]],["result",6]],[[],[["option",4],["basictype",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["compoundtype",3],["result",6]]],[[],["basictype",4]],[[],["opaquetype",3]],[[],["vlentype",3]],[[],["enumtype",3]],[[],["compoundtype",3]],[[],["variabletype",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["vec",3]]],[[["basictype",4]],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vlentype",3]]],[[["enumtype",3]]],[[["basictype",4]]],[[["opaquetype",3]]],[[["compoundtype",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["result",6]],[[],["string",3]],[[],["str",15]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["i64",15]],[["string",3],["option",4]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["variabletype",4]],[[],["basictype",4]],[[],["basictype",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[["str",15]],[["attribute",3],["result",6]]],[[["str",15]],[["attribute",3],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],[[],["variable",3]],[[],["endianness",4]],[[]],[[]],[[["nc_type",6]],["result",6]],[[]],[[]],[[["endianness",4]],["result",6]],[[],[["endianness",4],["result",6]]],[[["endianness",4]],["bool",15]],[[],[["result",6],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["variable",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["string",3]],[[],["result",6]],[[["str",15],["option",4]],["result",6]],[[["numeric",8],["option",4]],["result",6]],[[["variablemut",3]],["result",6]],[[["option",4]],["result",6]],[[["variablemut",3]],["result",6]],[[["variablemut",3]],["result",6]],[[["option",4]],[["result",6],["usize",15]]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["variable",3]],["result",6]],[[["option",4]],[["result",6],["string",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["option",4]],[["numeric",8],["result",6]]],[[["option",4]],[["arrayd",6],["result",6]]],[[["option",4]],[["result",6],["usize",15]]],[[["option",4]],["result",6]],[[["variable",3]],["result",6]],[[],["variabletype",4]],[[],[["result",6],["vec",3]]]],"p":[[4,"AttrValue"],[3,"Attribute"],[3,"Dimension"],[3,"Identifier"],[4,"Error"],[3,"Options"],[3,"MutableFile"],[3,"File"],[3,"GroupMut"],[3,"Group"],[4,"VariableType"],[4,"BasicType"],[3,"CompoundBuilder"],[3,"CompoundField"],[3,"OpaqueType"],[3,"VlenType"],[3,"EnumType"],[3,"CompoundType"],[4,"Endianness"],[8,"Numeric"],[3,"VariableMut"],[3,"Variable"]]},\
"netcdf_sys":{"doc":"","t":[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,11,11,11,11,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,5,6,5,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,11,11,11],"n":["DIM_WITHOUT_VARIABLE","FILL_LONG","MAX_NC_ATTRS","MAX_NC_DIMS","MAX_NC_NAME","MAX_NC_VARS","MAX_VAR_DIMS","NC2_ERR","NC4_FIRST_ERROR","NC4_LAST_ERROR","NC_64BIT_DATA","NC_64BIT_OFFSET","NC_BYTE","NC_CDF5","NC_CHAR","NC_CHUNKED","NC_CLASSIC_MODEL","NC_CLOBBER","NC_COMPOUND","NC_CONTIGUOUS","NC_DISKLESS","NC_DOUBLE","NC_EACCESS","NC_EATTEXISTS","NC_EATTMETA","NC_EAUTH","NC_EAXISTYPE","NC_EBADCHUNK","NC_EBADCLASS","NC_EBADDIM","NC_EBADFIELD","NC_EBADGRPID","NC_EBADID","NC_EBADNAME","NC_EBADTYPE","NC_EBADTYPID","NC_ECANTCREATE","NC_ECANTEXTEND","NC_ECANTREAD","NC_ECANTREMOVE","NC_ECANTWRITE","NC_ECHAR","NC_ECONSTRAINT","NC_ECURL","NC_EDAP","NC_EDAPCONSTRAINT","NC_EDAPSVC","NC_EDAPURL","NC_EDAS","NC_EDATADDS","NC_EDDS","NC_EDIMMETA","NC_EDIMSCALE","NC_EDIMSIZE","NC_EDISKLESS","NC_EEDGE","NC_EEXIST","NC_EFILEMETA","NC_EGLOBAL","NC_EHDFERR","NC_EINDEFINE","NC_EINVAL","NC_EINVALCOORDS","NC_EIO","NC_ELATEDEF","NC_ELATEFILL","NC_EMAPTYPE","NC_EMAXATTS","NC_EMAXDIMS","NC_EMAXNAME","NC_EMAXVARS","NC_EMPI","NC_ENAMEINUSE","NC_ENDIAN_BIG","NC_ENDIAN_LITTLE","NC_ENDIAN_NATIVE","NC_ENFILE","NC_ENOCOMPOUND","NC_ENODATA","NC_ENOGRP","NC_ENOMEM","NC_ENOPAR","NC_ENORECVARS","NC_ENOTATT","NC_ENOTBUILT","NC_ENOTFOUND","NC_ENOTINDEFINE","NC_ENOTNC","NC_ENOTNC3","NC_ENOTNC4","NC_ENOTVAR","NC_ENTOOL","NC_ENUM","NC_EPARINIT","NC_EPERM","NC_ERANGE","NC_ESTORAGE","NC_ESTRICTNC3","NC_ESTRIDE","NC_ESTS","NC_ETRANSLATION","NC_ETRUNC","NC_ETYPDEFINED","NC_EUNLIMIT","NC_EUNLIMPOS","NC_EURL","NC_EVARMETA","NC_EVARSIZE","NC_EXDR","NC_FATAL","NC_FILL","NC_FILL_INT","NC_FILL_UBYTE","NC_FILL_UINT","NC_FILL_USHORT","NC_FIRSTUSERTYPEID","NC_FLETCHER32","NC_FLOAT","NC_FORMAT_64BIT","NC_FORMAT_CLASSIC","NC_FORMAT_DAP2","NC_FORMAT_DAP4","NC_FORMAT_NC3","NC_FORMAT_NC_HDF4","NC_FORMAT_NC_HDF5","NC_FORMAT_NETCDF4","NC_FORMAT_NETCDF4_CLASSIC","NC_FORMAT_PNETCDF","NC_FORMAT_UNDEFINED","NC_GLOBAL","NC_HAVE_NEW_CHUNKING_API","NC_INMEMORY","NC_INT","NC_INT64","NC_LOCK","NC_LONG","NC_MAX_ATOMIC_TYPE","NC_MAX_ATTRS","NC_MAX_BYTE","NC_MAX_CHAR","NC_MAX_DEFLATE_LEVEL","NC_MAX_DIMS","NC_MAX_HDF4_NAME","NC_MAX_INT","NC_MAX_INT64","NC_MAX_NAME","NC_MAX_SHORT","NC_MAX_UBYTE","NC_MAX_UINT","NC_MAX_UINT64","NC_MAX_USHORT","NC_MAX_VARS","NC_MAX_VAR_DIMS","NC_MIN_BYTE","NC_MIN_DEFLATE_LEVEL","NC_MIN_INT","NC_MIN_INT64","NC_MIN_SHORT","NC_MMAP","NC_MPIIO","NC_MPIPOSIX","NC_NAT","NC_NETCDF4","NC_NOCHECKSUM","NC_NOCLOBBER","NC_NOERR","NC_NOFILL","NC_NOSHUFFLE","NC_NOWRITE","NC_OPAQUE","NC_PNETCDF","NC_SHARE","NC_SHORT","NC_SHUFFLE","NC_SIZEHINT_DEFAULT","NC_STRING","NC_SYSERR","NC_UBYTE","NC_UINT","NC_UINT64","NC_UNLIMITED","NC_USHORT","NC_VERBOSE","NC_VLEN","NC_WRITE","X_INT64_MAX","X_INT64_MIN","X_UINT64_MAX","_FillValue","borrow","borrow_mut","from","into","len","nc__create","nc__create_mp","nc__enddef","nc__open","nc__open_mp","nc_abort","nc_advise","nc_close","nc_copy_att","nc_copy_var","nc_create","nc_def_compound","nc_def_dim","nc_def_enum","nc_def_grp","nc_def_opaque","nc_def_var","nc_def_var_chunking","nc_def_var_deflate","nc_def_var_endian","nc_def_var_fill","nc_def_var_fletcher32","nc_def_vlen","nc_del_att","nc_delete","nc_delete_mp","nc_enddef","nc_free_string","nc_free_vlen","nc_free_vlens","nc_get_att","nc_get_att_double","nc_get_att_float","nc_get_att_int","nc_get_att_long","nc_get_att_longlong","nc_get_att_schar","nc_get_att_short","nc_get_att_string","nc_get_att_text","nc_get_att_ubyte","nc_get_att_uchar","nc_get_att_uint","nc_get_att_ulonglong","nc_get_att_ushort","nc_get_chunk_cache","nc_get_var","nc_get_var1","nc_get_var1_double","nc_get_var1_float","nc_get_var1_int","nc_get_var1_long","nc_get_var1_longlong","nc_get_var1_schar","nc_get_var1_short","nc_get_var1_string","nc_get_var1_text","nc_get_var1_ubyte","nc_get_var1_uchar","nc_get_var1_uint","nc_get_var1_ulonglong","nc_get_var1_ushort","nc_get_var_chunk_cache","nc_get_var_double","nc_get_var_float","nc_get_var_int","nc_get_var_long","nc_get_var_longlong","nc_get_var_schar","nc_get_var_short","nc_get_var_string","nc_get_var_text","nc_get_var_ubyte","nc_get_var_uchar","nc_get_var_uint","nc_get_var_ulonglong","nc_get_var_ushort","nc_get_vara","nc_get_vara_double","nc_get_vara_float","nc_get_vara_int","nc_get_vara_long","nc_get_vara_longlong","nc_get_vara_schar","nc_get_vara_short","nc_get_vara_string","nc_get_vara_text","nc_get_vara_ubyte","nc_get_vara_uchar","nc_get_vara_uint","nc_get_vara_ulonglong","nc_get_vara_ushort","nc_get_varm","nc_get_varm_double","nc_get_varm_float","nc_get_varm_int","nc_get_varm_long","nc_get_varm_longlong","nc_get_varm_schar","nc_get_varm_short","nc_get_varm_string","nc_get_varm_text","nc_get_varm_ubyte","nc_get_varm_uchar","nc_get_varm_uint","nc_get_varm_ulonglong","nc_get_varm_ushort","nc_get_vars","nc_get_vars_double","nc_get_vars_float","nc_get_vars_int","nc_get_vars_long","nc_get_vars_longlong","nc_get_vars_schar","nc_get_vars_short","nc_get_vars_string","nc_get_vars_text","nc_get_vars_ubyte","nc_get_vars_uchar","nc_get_vars_uint","nc_get_vars_ulonglong","nc_get_vars_ushort","nc_get_vlen_element","nc_inq","nc_inq_att","nc_inq_attid","nc_inq_attlen","nc_inq_attname","nc_inq_atttype","nc_inq_base_pe","nc_inq_compound","nc_inq_compound_field","nc_inq_compound_fielddim_sizes","nc_inq_compound_fieldindex","nc_inq_compound_fieldname","nc_inq_compound_fieldndims","nc_inq_compound_fieldoffset","nc_inq_compound_fieldtype","nc_inq_compound_name","nc_inq_compound_nfields","nc_inq_compound_size","nc_inq_dim","nc_inq_dimid","nc_inq_dimids","nc_inq_dimlen","nc_inq_dimname","nc_inq_enum","nc_inq_enum_ident","nc_inq_enum_member","nc_inq_format","nc_inq_format_extended","nc_inq_grp_full_ncid","nc_inq_grp_ncid","nc_inq_grp_parent","nc_inq_grpname","nc_inq_grpname_full","nc_inq_grpname_len","nc_inq_grps","nc_inq_libvers","nc_inq_natts","nc_inq_ncid","nc_inq_ndims","nc_inq_nvars","nc_inq_opaque","nc_inq_path","nc_inq_type","nc_inq_type_equal","nc_inq_typeid","nc_inq_typeids","nc_inq_unlimdim","nc_inq_unlimdims","nc_inq_user_type","nc_inq_var","nc_inq_var_chunking","nc_inq_var_deflate","nc_inq_var_endian","nc_inq_var_fill","nc_inq_var_fletcher32","nc_inq_var_szip","nc_inq_vardimid","nc_inq_varid","nc_inq_varids","nc_inq_varname","nc_inq_varnatts","nc_inq_varndims","nc_inq_vartype","nc_inq_vlen","nc_insert_array_compound","nc_insert_compound","nc_insert_enum","nc_open","nc_put_att","nc_put_att_double","nc_put_att_float","nc_put_att_int","nc_put_att_long","nc_put_att_longlong","nc_put_att_schar","nc_put_att_short","nc_put_att_string","nc_put_att_text","nc_put_att_ubyte","nc_put_att_uchar","nc_put_att_uint","nc_put_att_ulonglong","nc_put_att_ushort","nc_put_var","nc_put_var1","nc_put_var1_double","nc_put_var1_float","nc_put_var1_int","nc_put_var1_long","nc_put_var1_longlong","nc_put_var1_schar","nc_put_var1_short","nc_put_var1_string","nc_put_var1_text","nc_put_var1_ubyte","nc_put_var1_uchar","nc_put_var1_uint","nc_put_var1_ulonglong","nc_put_var1_ushort","nc_put_var_double","nc_put_var_float","nc_put_var_int","nc_put_var_long","nc_put_var_longlong","nc_put_var_schar","nc_put_var_short","nc_put_var_string","nc_put_var_text","nc_put_var_ubyte","nc_put_var_uchar","nc_put_var_uint","nc_put_var_ulonglong","nc_put_var_ushort","nc_put_vara","nc_put_vara_double","nc_put_vara_float","nc_put_vara_int","nc_put_vara_long","nc_put_vara_longlong","nc_put_vara_schar","nc_put_vara_short","nc_put_vara_string","nc_put_vara_text","nc_put_vara_ubyte","nc_put_vara_uchar","nc_put_vara_uint","nc_put_vara_ulonglong","nc_put_vara_ushort","nc_put_varm","nc_put_varm_double","nc_put_varm_float","nc_put_varm_int","nc_put_varm_long","nc_put_varm_longlong","nc_put_varm_schar","nc_put_varm_short","nc_put_varm_string","nc_put_varm_text","nc_put_varm_ubyte","nc_put_varm_uchar","nc_put_varm_uint","nc_put_varm_ulonglong","nc_put_varm_ushort","nc_put_vars","nc_put_vars_double","nc_put_vars_float","nc_put_vars_int","nc_put_vars_long","nc_put_vars_longlong","nc_put_vars_schar","nc_put_vars_short","nc_put_vars_string","nc_put_vars_text","nc_put_vars_ubyte","nc_put_vars_uchar","nc_put_vars_uint","nc_put_vars_ulonglong","nc_put_vars_ushort","nc_put_vlen_element","nc_redef","nc_rename_att","nc_rename_dim","nc_rename_grp","nc_rename_var","nc_set_base_pe","nc_set_chunk_cache","nc_set_default_format","nc_set_fill","nc_set_var_chunk_cache","nc_show_metadata","nc_strerror","nc_sync","nc_type","nc_vlen_t","ncabort","ncattcopy","ncattdel","ncattget","ncattinq","ncattname","ncattput","ncattrename","ncclose","nccreate","ncdimdef","ncdimid","ncdiminq","ncdimrename","ncendef","ncerr","ncinquire","nclong","ncopen","ncopts","ncrecget","ncrecinq","ncrecput","ncredef","ncsetfill","ncsync","nctypelen","ncvardef","ncvarget","ncvarget1","ncvargetg","ncvargets","ncvarid","ncvarinq","ncvarput","ncvarput1","ncvarputg","ncvarputs","ncvarrename","p","try_from","try_into","type_id"],"q":["netcdf_sysdi":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"nc_vlen_t"]]},\
"noisy_float":{"doc":"This crate contains floating point types that panic if …","t":[11,11,11,11,11,11,11,11,11,11,8,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,11,11,11,11,5,5,5,5,11,11,11,11],"n":["E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","FloatChecker","LN_10","LN_2","LOG10_E","LOG2_E","NoisyFloat","PI","SQRT_2","abs","abs","abs","abs_sub","abs_sub","abs_sub","acos","acos","acosh","acosh","add","add","add","add","add_assign","add_assign","add_assign","add_assign","as_ref","asin","asin","asinh","asinh","assert","atan","atan","atan2","atan2","atanh","atanh","borrow","borrow_mut","borrowed","borrowed_mut","cbrt","cbrt","ceil","ceil","check","checkers","classify","clone","clone_into","cmp","const_raw","const_raw","const_raw","const_raw","cos","cos","cosh","cosh","default","div","div","div","div","div_assign","div_assign","div_assign","div_assign","epsilon","epsilon","eq","eq","exp","exp","exp2","exp2","exp_m1","exp_m1","floor","floor","fmt","fmt","fmt","fmt","fract","fract","from","from","from","from_f32","from_f32","from_f64","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","ge","ge","gt","gt","hash","hash","hypot","hypot","infinity","integer_decode","into","is_finite","is_infinite","is_nan","is_negative","is_normal","is_positive","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_zero","le","le","ln","ln","ln_1p","ln_1p","log","log","log10","log10","log2","log2","lt","lt","max","max","max","max_value","max_value","max_value","min","min","min","min_positive_value","min_positive_value","min_value","min_value","min_value","mul","mul","mul","mul","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","nan","neg","neg_infinity","neg_zero","new","one","partial_cmp","partial_cmp","powf","powf","powi","powi","prelude","product","product","raw","recip","recip","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","round","signum","signum","signum","sin","sin","sin_cos","sin_cos","sinh","sinh","sqrt","sqrt","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","tan","tan","tanh","tanh","to_degrees","to_degrees","to_f32","to_f64","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_radians","to_radians","to_string","to_u16","to_u32","to_u64","to_u8","to_usize","trunc","trunc","try_borrowed","try_borrowed_mut","try_from","try_from","try_from","try_into","try_new","type_id","types","unchecked_new","unchecked_new","unchecked_new","unchecked_new","zero","FiniteChecker","NumChecker","assert","assert","borrow","borrow","borrow_mut","borrow_mut","check","check","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","N32","N64","R32","R64","const_raw","const_raw","const_raw","const_raw","n32","n64","r32","r64","unchecked_new","unchecked_new","unchecked_new","unchecked_new"],"q":["noisy_floatnoisy_float::checkers","","","","","","","","","","","","","","","","","","","","noisy_float::types","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","Trait for checking whether a floating point number is <em>…","","","","","A floating point number with a restricted set of legal …","","","","","","","","","","","","","","","","","","","","","","","","","","A function that may panic if the floating point number is <em>…","","","","","","","","","Converts the value in-place to a reference to a <code>NoisyFloat</code>…","Converts the value in-place to a mutable reference to a …","","","","","Returns <code>true</code> if (and only if) the given floating point …","Standard implementations of <code>FloatChecker</code>.","","","","","A const function that returns the underlying float value.","A const function that returns the underlying float value.","A const function that returns the underlying float value.","A const function that returns the underlying float value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a <code>NoisyFloat</code> with the given <code>f32</code> value.","","","Constructs a <code>NoisyFloat</code> with the given <code>f64</code> value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compares and returns the maximum of two values.","","","","Compares and returns the minimum of two values.","","","","","","","","","","","","","","","","","","","","","","Constructs a <code>NoisyFloat</code> with the given value.","","","","","","","","Prelude for the <code>noisy_float</code> crate.","","","Returns the underlying float value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to convert the value in-place to a reference to a …","Tries to convert the value in-place to a mutable …","","","","","Tries to construct a <code>NoisyFloat</code> with the given value.","","Standard definitions of <code>NoisyFloat</code>.","A const constructor that does not check whether <code>value</code> is …","A const constructor that does not check whether <code>value</code> is …","A const constructor that does not check whether <code>value</code> is …","A const constructor that does not check whether <code>value</code> is …","","A <code>FloatChecker</code> that considers all values valid except NaN …","A <code>FloatChecker</code> that considers all values valid except NaN.","","","","","","","","","","","","","","","","","","","A floating point number behaving like <code>f32</code> that does not …","A floating point number behaving like <code>f64</code> that does not …","A floating point number behaving like <code>f32</code> that does not …","A floating point number behaving like <code>f64</code> that does not …","A const function that returns the underlying float value.","A const function that returns the underlying float value.","A const function that returns the underlying float value.","A const function that returns the underlying float value.","Shorthand for <code>N32::new(value)</code>.","Shorthand for <code>N64::new(value)</code>.","Shorthand for <code>R32::new(value)</code>.","Shorthand for <code>R64::new(value)</code>.","A const constructor that does not check whether <code>value</code> is …","A const constructor that does not check whether <code>value</code> is …","A const constructor that does not check whether <code>value</code> is …","A const constructor that does not check whether <code>value</code> is …"],"i":[1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,5,6,7,8,0,0,0,0,5,6,7,8],"f":[[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,[[],["fpcategory",4]],[[]],[[]],[[],["ordering",4]],[[],["f32",15]],[[],["f64",15]],[[],["f64",15]],[[],["f32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[["noisyfloat",3],["finitechecker",3]]],[[["toprimitive",8]],["option",4]],[[]],[[["f32",15]]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[["u32",15],["str",15]],["result",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["ordering",4]]],[[],[["option",4],["ordering",4]]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["f32",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["option",4],["i64",15]]],[[],[["option",4],["i8",15]]],[[],[["isize",15],["option",4]]],[[]],[[]],[[]],[[],["string",3]],[[],[["u16",15],["option",4]]],[[],[["u32",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["u8",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[["f32",15]],["result",4]],[[],["result",4]],[[["f64",15]],["result",4]],[[],["result",4]],[[],["option",4]],[[],["typeid",3]],null,[[["f64",15]]],[[["f32",15]]],[[["f64",15]]],[[["f32",15]]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[],["f32",15]],[[],["f64",15]],[[],["f32",15]],[[],["f64",15]],[[["f32",15]],["n32",6]],[[["f64",15]],["n64",6]],[[["f32",15]],["r32",6]],[[["f64",15]],["r64",6]],[[["f32",15]]],[[["f64",15]]],[[["f32",15]]],[[["f64",15]]]],"p":[[3,"NoisyFloat"],[8,"FloatChecker"],[3,"NumChecker"],[3,"FiniteChecker"],[6,"N32"],[6,"N64"],[6,"R32"],[6,"R64"]]},\
"num_complex":{"doc":"Complex numbers.","t":[3,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Complex","Complex32","Complex64","ParseComplexError","add","add","add","add","add_assign","add_assign","add_assign","add_assign","as_","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","conj","default","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_str","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hash","i","im","into","into","inv","inv","is_finite","is_infinite","is_nan","is_normal","is_one","is_zero","l1_norm","mul","mul","mul","mul","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","ne","neg","new","norm_sqr","one","powi","powu","product","product","re","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","scale","set_one","set_zero","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_string","to_string","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","try_from","try_from","try_into","try_into","type_id","type_id","unscale","zero"],"q":["num_complex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A complex number in Cartesian form.","","","","","","","","","","","","","","","","","","","Returns the complex conjugate. i.e. <code>re - i im</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","Returns imaginary unit","Imaginary portion of the complex number","","","","Returns <code>1/self</code>","Checks if the given complex number is finite","Checks if the given complex number is infinite","Checks if the given complex number is NaN","Checks if the given complex number is normal","","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance…","","","","","","","","","","","","","","","Create a new Complex","Returns the square of the norm (since <code>T</code> doesn’t …","","Raises <code>self</code> to a signed integer power.","Raises <code>self</code> to an unsigned integer power.","","","Real portion of the complex number","","","","","","","","","Multiplies <code>self</code> by the scalar <code>t</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Divides <code>self</code> by the scalar <code>t</code>.",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,2,1,2,1,1],"f":[null,null,null,null,[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[]],[[]],[[],["complex",3]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complex",3]],["bool",15]],[[["parsecomplexerror",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["toprimitive",8]],["option",4]],[[]],[[]],[[]],[[]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[["complex",3]]],[[["complex",3]],["complex",3]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[["complex",3]],["bool",15]],[[["parsecomplexerror",3]],["bool",15]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[["u32",15]]],[[]],[[]],null,[[]],[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["f32",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["option",4],["i64",15]]],[[],[["option",4],["i8",15]]],[[],[["isize",15],["option",4]]],[[]],[[],["string",3]],[[],["string",3]],[[],[["u128",15],["option",4]]],[[],[["u16",15],["option",4]]],[[],[["u32",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["u8",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]]],"p":[[3,"Complex"],[3,"ParseComplexError"]]},\
"num_cpus":{"doc":"A crate with utilities to determine the number of CPUs …","t":[5,5],"n":["get","get_physical"],"q":["num_cpus",""],"d":["Returns the number of available CPUs of the current …","Returns the number of physical cores of the current …"],"i":[0,0],"f":[[[],["usize",15]],[[],["usize",15]]],"p":[]},\
"num_integer":{"doc":"Integer trait and functions.","t":[8,3,8,3,8,5,10,5,10,5,11,11,11,11,5,11,11,11,11,5,11,5,10,5,11,5,10,10,11,11,11,11,11,11,5,10,12,5,11,11,11,11,10,10,10,5,10,5,10,5,11,11,11,11,5,10,11,5,11,11,11,11,11,11,11,11,11,12,12],"n":["Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","clone","clone_into","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","ne","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","sqrt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y"],"q":["num_integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>…","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer …","Returns the truncated principal cube root of an integer …","Returns the truncated principal cube root of an integer …","","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","","","Calculates the Greatest Common Divisor (GCD) of the …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","","","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer –…","Returns the truncated principal <code>n</code>th root of an integer –…","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,1,0,2,3,2,3,0,4,4,3,3,0,5,0,5,0,5,0,5,5,3,5,5,3,2,3,0,5,3,0,5,2,3,2,5,5,5,0,5,0,5,0,3,2,2,5,0,4,5,0,4,4,3,2,3,2,3,2,3,3,3],"f":[null,null,null,null,null,[[["average",8]],["average",8]],[[]],[[["average",8]],["average",8]],[[]],[[["clone",8],["integer",8]],[["clone",8],["integer",8]]],[[]],[[]],[[]],[[]],[[["roots",8]],["roots",8]],[[]],[[]],[[],["extendedgcd",3]],[[]],[[["integer",8]],["integer",8]],[[]],[[["integer",8]],["integer",8]],[[]],[[["integer",8]]],[[]],[[["integer",8]]],[[]],[[],["bool",15]],[[["extendedgcd",3]],["bool",15]],[[],["extendedgcd",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["integer",8]],["integer",8]],[[]],null,[[["integer",8]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["integer",8]],["integer",8]],[[]],[[["integer",8]],["integer",8]],[[]],[[],[["clone",8],["integer",8]]],[[["extendedgcd",3]],["bool",15]],[[],["iterbinomial",3]],[[],["option",4]],[[]],[[["u32",15],["roots",8]],["roots",8]],[[["u32",15]]],[[]],[[["roots",8]],["roots",8]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null],"p":[[8,"Average"],[3,"IterBinomial"],[3,"ExtendedGcd"],[8,"Roots"],[8,"Integer"]]},\
"num_rational":{"doc":"Rational numbers","tn":["ParseRatioError","Ratio","Rational","Rational32","Rational64","abs","abs_sub","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approximate_float","borrow","borrow","borrow_mut","borrow_mut","ceil","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","denom","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_integer","from_str","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","hash","into","into","into","inv","is_integer","is_negative","is_one","is_positive","is_zero","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","ne","neg","new","new_raw","numer","one","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","recip","reduced","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","set_one","set_zero","signum","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_integer","to_owned","to_owned","to_string","to_string","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero"],"q":["num_rationald":["","Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","","","","","","","","","","","","","","","","Rounds towards plus infinity.","","","","","","","","","","Gets an immutable reference to the denominator.","","","","","","","","","","","Rounds towards minus infinity.","","","","","","","","","","","Returns the fractional part of a number, with division …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Parses <code>numer/denom</code> or just <code>numer</code>.","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the rational number is an integer …","","","","","","","","","","","","","","","Creates a new <code>Ratio</code>.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","","","","","","","","","","","","","","","","","","","","","Raises the <code>Ratio</code> to the power of an exponent.","","","","","","","","","Returns the reciprocal.","Returns a reduced copy of self.","","","","","","","","","Rounds to the nearest integer. Rounds half-way cases away …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts to an integer, rounding towards zero.","","","","","","","","","","","","","","","","","","","","","","","","","Rounds towards zero.","","","","","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1],"f":[null,null,null,null,null,[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[]],[[["floatcore",8],["numcast",8]],[["ratio",3],["option",4]]],[[]],[[]],[[]],[[]],[[],["ratio",3]],[[["ratio",3]],[["ratio",3],["option",4]]],[[["ratio",3]],[["ratio",3],["option",4]]],[[["ratio",3]],[["ratio",3],["option",4]]],[[["ratio",3]],[["ratio",3],["option",4]]],[[],["ratio",3]],[[],["parseratioerror",3]],[[]],[[]],[[],["ordering",4]],[[]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[]],[[["ratio",3]]],[[["ratio",3]]],[[]],[[],["bool",15]],[[["parseratioerror",3]],["bool",15]],[[],["ratio",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i128",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[],["ratio",3]],[[["str",15]],[["ratio",3],["parseratioerror",3],["result",4]]],[[["u32",15],["str",15]],[["ratio",3],["parseratioerror",3],["result",4]]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u128",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[]],[[]],[[]],[[]],[[],["ratio",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[]],[[]],[[["ratio",3]]],[[["ratio",3]]],[[["parseratioerror",3]],["bool",15]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[],["ratio",3]],[[],[["option",4],["ordering",4]]],[[["u32",15]],["ratio",3]],[[["u8",15]],["ratio",3]],[[["i128",15]],["ratio",3]],[[["i128",15]],["ratio",3]],[[["i64",15]],["ratio",3]],[[["i64",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["i16",15]],["ratio",3]],[[["i16",15]],["ratio",3]],[[["i8",15]],["ratio",3]],[[["i8",15]],["ratio",3]],[[["usize",15]],["ratio",3]],[[["usize",15]],["ratio",3]],[[["u128",15]],["ratio",3]],[[["u128",15]],["ratio",3]],[[["u64",15]],["ratio",3]],[[["u64",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["u32",15]],["ratio",3]],[[["isize",15]],["ratio",3]],[[["u16",15]],["ratio",3]],[[["u16",15]],["ratio",3]],[[["isize",15]],["ratio",3]],[[["u8",15]],["ratio",3]],[[]],[[]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[],["ratio",3]],[[]],[[]],[[],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[]],[[]],[[["ratio",3]]],[[["ratio",3]]],[[]],[[]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["i64",15]]],[[],[["option",4],["i64",15]]],[[],[["option",4],["i64",15]]],[[],[["option",4],["i64",15]]],[[],[["option",4],["i64",15]]],[[],[["option",4],["i64",15]]],[[],[["option",4],["i64",15]]],[[],[["option",4],["i64",15]]],[[],[["option",4],["i64",15]]],[[],[["option",4],["i64",15]]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],["ratio",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["ratio",3]]],"p":[[3,"Ratio"],[3,"ParseRatioError"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":[13,4,16,13,8,8,8,8,8,8,3,8,11,11,11,11,0,0,5,5,5,0,11,11,11,11,11,10,0,0,11,11,12,0,0,0,0,11,11,11,11,11,11,11,8,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,11,10,11,10,10,10,11,10,11,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,11,10,10,10,10,11,10,11,10,10,10,10,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,10,11,10,11,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,5,10,5,10,10,10,5,10],"n":["Empty","FloatErrorKind","FromStrRadixErr","Invalid","Num","NumAssign","NumAssignOps","NumAssignRef","NumOps","NumRef","ParseFloatError","RefNum","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","ops","pow","real","sign","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Bounded","max_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_zeros","pow","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_zeros","unsigned_shl","unsigned_shr","checked","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["num_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::bounds","","","num_traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::identities","","","","","","","","","","num_traits::int","","","","","","","","","","","","","","","","","num_traits::ops","","","","","","num_traits::ops::checked","","","","","","","","","","","","","","","","num_traits::ops::inv","","","num_traits::ops::mul_add","","","","","num_traits::ops::overflowing","","","","","","num_traits::ops::saturating","","","","","","","","","num_traits::ops::wrapping","","","","","","","","","","","","num_traits::pow","","","","","num_traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::sign","","","","","","","","",""],"d":["","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…","The trait for <code>Num</code> types which also implement assignment …","The trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","The trait for types implementing basic numeric operations","The trait for <code>Num</code> types which also implement numeric …","","The trait for references which implement numeric …","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","","","Convert from a string and radix (typically <code>2..=36</code>).","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","returns the largest finite number this type can represent","returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If …","Returns the floating point category of the number. If …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns the largest integer less than or equal to a …","Returns the largest integer less than or equal to a …","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have…","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns the largest integer less than or equal to a …","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[1,0,2,1,0,0,0,0,0,0,0,0,1,3,1,3,0,0,0,0,0,0,1,3,3,1,3,2,0,0,1,3,3,0,0,0,0,3,1,3,1,3,1,3,0,4,4,0,0,0,0,5,0,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,0,0,0,9,9,9,9,9,9,9,9,9,10,11,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,11,10,10,10,10,10,11,10,11,10,11,10,11,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,11,10,10,11,11,10,11,10,10,11,10,11,10,11,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,11,10,10,11,0,0,12,13,0,12,12,13,0,13,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,16,17,18,19,20,21,22,0,23,23,0,0,24,24,25,0,0,0,26,27,28,0,0,0,0,29,30,31,29,32,0,0,0,0,0,0,33,34,35,36,37,38,39,0,0,0,39,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,0,41,0,41,41,41,0,41],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,[[["partialord",8]],["partialord",8]],[[["partialord",8]],["partialord",8]],[[["partialord",8]],["partialord",8]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u32",15],["str",15]],["result",4]],null,null,[[]],[[]],null,null,null,null,null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],null,null,null,null,[[]],[[["numcast",8]],[["numcast",8],["option",4]]],[[["toprimitive",8]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["f32",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["option",4],["i64",15]]],[[],[["option",4],["i8",15]]],[[],[["isize",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["u16",15],["option",4]]],[[],[["u32",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["u8",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fpcategory",4]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["bool",15]],[[],["bool",15]],[[],["one",8]],[[]],[[]],[[]],[[],["zero",8]],[[]],null,[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[],["option",4]],null,null,[[]],null,null,null,[[]],[[]],null,null,null,[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],null,null,[[["clone",8],["checkedmul",8],["usize",15],["one",8]],[["clone",8],["option",4],["checkedmul",8],["one",8]]],[[["clone",8],["mul",8],["usize",15],["one",8]],[["clone",8],["mul",8],["one",8]]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["signed",8]],["signed",8]],[[]],[[["signed",8]],["signed",8]],[[]],[[],["bool",15]],[[],["bool",15]],[[["signed",8]],["signed",8]],[[]]],"p":[[4,"FloatErrorKind"],[8,"Num"],[3,"ParseFloatError"],[8,"Bounded"],[8,"AsPrimitive"],[8,"NumCast"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"FloatConst"],[8,"Float"],[8,"FloatCore"],[8,"One"],[8,"Zero"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Real"],[8,"Signed"]]},\
"number_prefix":{"doc":"This is a library for formatting numbers with numeric …","t":[8,13,13,13,13,13,13,13,13,18,18,4,13,13,4,8,13,13,13,13,13,13,13,13,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11],"n":["Amounts","Exa","Exbi","Gibi","Giga","Kibi","Kilo","Mega","Mibi","NUM_1000","NUM_1024","NumberPrefix","Pebi","Peta","Prefix","PrefixNames","Prefixed","Standalone","Tebi","Tera","Yobi","Yotta","Zebi","Zetta","binary","borrow","borrow","borrow_mut","borrow_mut","caps","caps","clone","clone","clone_into","clone_into","decimal","eq","eq","fmt","fmt","fmt","from","from","into","into","is_negative","lower","lower","ne","symbol","symbol","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upper","upper"],"q":["number_prefix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Traits for floating-point values for both the possible …","","","","","","","","","The constant representing 1000, for decimal prefixes.","The constant representing 1024, for binary prefixes.","The result of trying to apply a prefix to a …","","","A numeric prefix, either binary or decimal.","Formatting methods for prefix, for when you want to …","A <strong>prefixed</strong> value <em>is</em> large enough for prefixes. This holds …","A <strong>standalone</strong> value is returned when the number is too …","","","","","","","Formats the given floating-point number using <strong>binary</strong> …","","","","","Returns the name with the first letter capitalised, such …","","","","","","Formats the given floating-point number using <strong>decimal</strong> …","","","","","","","","","","Whether this number is negative. This is used internally.","Returns the name in lowercase, such as “giga”.","","","Returns the short-hand symbol, such as “T” (for …","","","","","","","","","","","Returns the name in uppercase, such as “KILO”.",""],"i":[0,1,1,1,1,1,1,1,1,2,2,0,1,1,0,0,3,3,1,1,1,1,1,1,3,1,3,1,3,4,1,1,3,1,3,3,1,3,1,1,3,1,3,1,3,2,4,1,3,4,1,1,3,1,1,3,1,3,1,3,4,1],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[],["str",15]],[[],["prefix",4]],[[],["numberprefix",4]],[[]],[[]],[[]],[[["prefix",4]],["bool",15]],[[["numberprefix",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["str",15]],[[],["str",15]],[[["numberprefix",4]],["bool",15]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["str",15]],[[],["str",15]]],"p":[[4,"Prefix"],[8,"Amounts"],[4,"NumberPrefix"],[8,"PrefixNames"]]},\
"once_cell":{"doc":"Overview","t":[0,0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["race","sync","unsync","OnceBool","OnceBox","OnceNonZeroUsize","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","default","drop","fmt","fmt","fmt","from","from","from","get","get","get","get_or_init","get_or_init","get_or_init","get_or_try_init","get_or_try_init","get_or_try_init","into","into","into","new","new","new","set","set","set","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","from","from","from","from","get","get_mut","get_or_init","get_or_try_init","get_unchecked","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","from","from","from","from","get","get_mut","get_or_init","get_or_try_init","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["once_cell","","","once_cell::race","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","once_cell::sync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","once_cell::unsync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["“First one wins” flavor of <code>OnceCell</code>.","","","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","","","","","","","","","","","","","","","","","Gets the underlying value.","Gets the underlying value.","Gets a reference to the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","","","","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","","","","","","","","","","A value which is initialized on the first access.","A thread-safe cell which can be written to only once.","","","","","","","","Creates a new lazy value using <code>Default</code> as the …","","","","","","Forces the evaluation of this lazy value and returns a …","","","","","Gets the reference to the underlying value.","Gets the mutable reference to the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Get the reference to the underlying value, without …","","","Consumes the <code>OnceCell</code>, returning the wrapped value. …","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to …","","","","","","","","A value which is initialized on the first access.","A cell which can be written to only once. It is not …","","","","","","","","Creates a new lazy value using <code>Default</code> as the …","","","","","","Forces the evaluation of this lazy value and returns a …","","","","","Gets a reference to the underlying value.","Gets a mutable reference to the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","","","Consumes the <code>OnceCell</code>, returning the wrapped value.","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to …","","","","","","",""],"i":[0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,4,5,4,5,4,4,4,5,5,5,4,4,5,5,4,4,4,5,4,4,4,4,4,4,5,4,5,4,5,4,4,4,4,5,4,5,4,5,0,0,6,7,6,7,6,6,6,7,7,7,6,6,7,7,6,6,6,7,6,6,6,6,6,7,6,7,6,7,6,6,6,6,7,6,7,6,7],"f":[null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["oncenonzerousize",3]],[[],["oncebool",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["option",4],["nonzerousize",3]]],[[],[["option",4],["bool",15]]],[[],["option",4]],[[],["nonzerousize",3]],[[],["bool",15]],[[]],[[],[["result",4],["nonzerousize",3]]],[[],[["bool",15],["result",4]]],[[],["result",4]],[[]],[[]],[[]],[[],["oncenonzerousize",3]],[[],["oncebool",3]],[[],["oncebox",3]],[[["nonzerousize",3]],["result",4]],[[["bool",15]],["result",4]],[[["box",3]],[["box",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[],["oncecell",3]],[[]],[[],["oncecell",3]],[[],["lazy",3]],[[]],[[]],[[["oncecell",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["lazy",3]]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["option",4]],[[["lazy",3]],["result",4]],[[],["oncecell",3]],[[],["lazy",3]],[[],["result",4]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[],["oncecell",3]],[[]],[[]],[[],["lazy",3]],[[]],[[]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["lazy",3]]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[],["result",4]],[[]],[[]],[[],["option",4]],[[["lazy",3]],["result",4]],[[],["oncecell",3]],[[],["lazy",3]],[[],["result",4]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"OnceNonZeroUsize"],[3,"OnceBool"],[3,"OnceBox"],[3,"OnceCell"],[3,"Lazy"],[3,"OnceCell"],[3,"Lazy"]]},\
"palette":{"doc":"A library that makes linear color calculations and …","t":[3,8,16,8,8,8,8,8,8,3,6,3,6,8,16,3,6,8,18,3,3,6,3,6,8,6,8,3,3,8,16,16,16,16,8,3,6,3,6,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,10,11,11,11,11,10,10,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,0,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,11,11,11,12,0,12,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,11,11,11,12,12,10,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,12,12,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,13,8,8,16,13,13,4,3,13,13,13,13,13,13,13,4,3,3,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,13,3,4,8,13,13,11,10,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,12,12,11,11,11,11,11,11,8,10,0,10,0,0,0,3,3,3,8,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,8,8,8,10,10,11,11,10,11,11,10,10,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,3,8,6,6,6,16,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,6,6,6,6,8,16,3,8,8,6,16,6,6,16,16,11,11,11,11,11,11,11,11,11,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,12,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Alpha","Blend","Color","Component","ComponentWise","ConvertFrom","ConvertInto","FromColor","GetHue","Hsl","Hsla","Hsv","Hsva","Hue","Hue","Hwb","Hwba","IntoColor","LIMITED","Lab","LabHue","Laba","Lch","Lcha","Limited","Mat3","Mix","OutOfBounds","RgbHue","Saturate","Scalar","Scalar","Scalar","Scalar","Shade","Xyz","Xyza","Yxy","Yxya","a","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_ne","abs_diff_ne","abs_diff_ne","abs_diff_ne","abs_diff_ne","abs_diff_ne","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_from_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","alpha","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","b","blackness","blend","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chroma","chromatic_adaptation","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clamp_self","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color","color","component_wise","component_wise","component_wise","component_wise","component_wise","component_wise_self","component_wise_self","component_wise_self","component_wise_self","component_wise_self","convert","convert_from","convert_into","convert_unclamped_from","convert_unclamped_from","convert_unclamped_into","darken","default","default","default","default","default","default","default","default","default","default","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","deref","deref_mut","desaturate","description","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","encoding","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","float","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_components","from_degrees","from_degrees","from_encoding","from_encoding","from_format","from_format","from_hsl","from_hsl","from_hsl","from_hsl","from_hsv","from_hsv","from_hsv","from_hsv","from_hsv","from_hwb","from_hwb","from_hwb","from_hwb","from_lab","from_lab","from_lab","from_lab","from_lab","from_lch","from_lch","from_lch","from_lch","from_linear","from_linear","from_luma","from_luma","from_luma","from_luma","from_premultiplied","from_premultiplied","from_radians","from_radians","from_rgb","from_rgb","from_rgb","from_rgb","from_rgb","from_xyz","from_xyz","from_xyz","from_xyz","from_xyz","from_xyz","from_xyz","from_xyz","from_yxy","from_yxy","from_yxy","from_yxy","get_hue","get_hue","get_hue","get_hue","get_hue","get_hue","get_hue","gradient","hue","hue","hue","hue","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_encoding","into_encoding","into_format","into_format","into_hsl","into_hsl","into_hsl","into_hsl","into_hsl","into_hsl","into_hsl","into_hsl","into_hsl","into_hsv","into_hsv","into_hsv","into_hsv","into_hsv","into_hsv","into_hsv","into_hsv","into_hsv","into_hwb","into_hwb","into_lab","into_lab","into_lab","into_lab","into_lab","into_lab","into_lab","into_lab","into_lab","into_lch","into_lch","into_lch","into_lch","into_lch","into_lch","into_lch","into_lch","into_lch","into_linear","into_linear","into_luma","into_luma","into_luma","into_luma","into_luma","into_luma","into_luma","into_luma","into_luma","into_premultiplied","into_premultiplied","into_rgb","into_rgb","into_rgb","into_rgb","into_rgb","into_rgb","into_rgb","into_rgb","into_rgb","into_xyz","into_xyz","into_xyz","into_xyz","into_xyz","into_xyz","into_xyz","into_xyz","into_yxy","into_yxy","into_yxy","into_yxy","into_yxy","into_yxy","into_yxy","into_yxy","into_yxy","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","l","l","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lightness","luma","luma","max_intensity","mix","mix","mix","mix","mix","mix","mix","mix","mix","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","named","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_ne","relative_ne","relative_ne","relative_ne","relative_ne","relative_ne","rgb","saturate","saturate","saturate","saturate","saturate","saturation","saturation","shift_hue","shift_hue","shift_hue","shift_hue","shift_hue","shift_hue","space","space","space","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","to_degrees","to_degrees","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_positive_degrees","to_positive_degrees","to_positive_radians","to_positive_radians","to_radians","to_radians","to_raw_degrees","to_raw_degrees","to_raw_radians","to_raw_radians","to_string","try_convert_from","try_convert_into","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_ne","ulps_ne","ulps_ne","ulps_ne","ulps_ne","ulps_ne","value","white_point","white_point","white_point","white_point","white_point","whiteness","with_hue","with_hue","with_hue","with_hue","with_hue","with_hue","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","with_wp","x","x","y","y","z","Add","Blend","BlendFunction","Color","DestinationAlpha","DestinationColor","Equation","Equations","Max","Min","One","OneMinusDestinationAlpha","OneMinusDestinationColor","OneMinusSourceAlpha","OneMinusSourceColor","Parameter","Parameters","PreAlpha","ReverseSubtract","SourceAlpha","SourceColor","Subtract","Zero","abs_diff_eq","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","add","add","add_assign","add_assign","alpha","alpha_equation","alpha_parameters","apply_to","apply_to","as_mut","as_ref","atop","atop","atop","blend","blend","blend","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","burn","burn","burn","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","color","color_equation","color_parameters","component_wise","component_wise_self","darken","darken","darken","default","default_epsilon","default_max_relative","default_max_ulps","deref","deref_mut","destination","difference","difference","difference","div","div","div_assign","div_assign","dodge","dodge","dodge","eq","eq","eq","eq","eq","exclusion","exclusion","exclusion","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_equations","from_parameters","from_premultiplied","from_premultiplied","hard_light","hard_light","hard_light","inside","inside","inside","into","into","into","into","into","into_premultiplied","into_premultiplied","lighten","lighten","lighten","mix","mul","mul","mul_assign","mul_assign","multiply","multiply","multiply","ne","ne","ne","outside","outside","outside","over","over","over","overlay","overlay","overlay","plus","plus","plus","relative_eq","screen","screen","screen","soft_light","soft_light","soft_light","source","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","ulps_eq","xor","xor","xor","AdaptFrom","AdaptInto","Bradford","ConeResponseMatrices","Method","TransformMatrix","VonKries","XyzScaling","adapt_from","adapt_from_using","adapt_into","adapt_into_using","adapt_into_using","adapt_into_using","borrow","borrow","borrow_mut","borrow_mut","from","from","generate_transform_matrix","get_cone_response","get_cone_response","into","into","inv_ma","ma","try_from","try_from","try_into","try_into","type_id","type_id","TransferFn","from_linear","gamma","into_linear","linear","pixel","srgb","F2p2","Gamma","GammaFn","Number","VALUE","adapt_into_using","adapt_into_using","adapt_into_using","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","from_linear","into","into","into","into_linear","ne","ne","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Linear","LinearFn","adapt_into_using","adapt_into_using","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","from_linear","into","into","into_linear","ne","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","CHANNELS","CHANNELS","CHANNELS","Pixel","RawPixel","RawPixelSized","as_mut_ptr","as_ptr","as_raw","as_raw_mut","channels","from_raw","from_raw_mut","from_raw_parts","from_raw_parts_mut","from_raw_slice","from_raw_slice_mut","into_raw","into_raw_slice","into_raw_slice_mut","Srgb","adapt_into_using","blue","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_linear","green","into","into_linear","red","to_owned","try_from","try_into","type_id","Float","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","classify","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","infinity","integer_decode","is_finite","is_infinite","is_nan","is_normal","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","nan","neg_infinity","neg_zero","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Gradient","Range","Slice","Take","abs_diff_eq","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default_epsilon","default_max_relative","default_max_ulps","domain","domain","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get","get","into","into","into","into","into_iter","ne","new","next","relative_eq","size_hint","slice","slice","take","take","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","ulps_eq","with_domain","GammaLuma","GammaLumaa","LinLuma","LinLumaa","Luma","LumaStandard","Lumaa","SrgbLuma","SrgbLumaa","TransferFn","WhitePoint","abs_diff_eq","adapt_from_using","adapt_into_using","add","add","add_assign","add_assign","as_mut","as_ref","borrow","borrow_mut","clamp","clamp_self","clone","clone_into","component_wise","component_wise_self","default","default_epsilon","default_max_relative","default_max_ulps","div","div","div_assign","div_assign","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_components","from_encoding","from_format","from_linear","from_luma","from_premultiplied","from_xyz","from_yxy","into","into","into_components","into_encoding","into_format","into_linear","into_luma","into_premultiplied","into_xyz","into_yxy","is_valid","lighten","luma","mix","mul","mul","mul_assign","mul_assign","ne","new","relative_eq","standard","sub","sub","sub_assign","sub_assign","to_owned","try_from","try_into","type_id","ulps_eq","ALICEBLUE","ANTIQUEWHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHEDALMOND","BLUE","BLUEVIOLET","BROWN","BURLYWOOD","CADETBLUE","CHARTREUSE","CHOCOLATE","CORAL","CORNFLOWERBLUE","CORNSILK","CRIMSON","CYAN","DARKBLUE","DARKCYAN","DARKGOLDENROD","DARKGRAY","DARKGREEN","DARKGREY","DARKKHAKI","DARKMAGENTA","DARKOLIVEGREEN","DARKORANGE","DARKORCHID","DARKRED","DARKSALMON","DARKSEAGREEN","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGREY","DARKTURQUOISE","DARKVIOLET","DEEPPINK","DEEPSKYBLUE","DIMGRAY","DIMGREY","DODGERBLUE","FIREBRICK","FLORALWHITE","FORESTGREEN","FUCHSIA","GAINSBORO","GHOSTWHITE","GOLD","GOLDENROD","GRAY","GREEN","GREENYELLOW","GREY","HONEYDEW","HOTPINK","INDIANRED","INDIGO","IVORY","KHAKI","LAVENDER","LAVENDERBLUSH","LAWNGREEN","LEMONCHIFFON","LIGHTBLUE","LIGHTCORAL","LIGHTCYAN","LIGHTGOLDENRODYELLOW","LIGHTGRAY","LIGHTGREEN","LIGHTGREY","LIGHTPINK","LIGHTSALMON","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSLATEGRAY","LIGHTSLATEGREY","LIGHTSTEELBLUE","LIGHTYELLOW","LIME","LIMEGREEN","LINEN","MAGENTA","MAROON","MEDIUMAQUAMARINE","MEDIUMBLUE","MEDIUMORCHID","MEDIUMPURPLE","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MIDNIGHTBLUE","MINTCREAM","MISTYROSE","MOCCASIN","NAVAJOWHITE","NAVY","OLDLACE","OLIVE","OLIVEDRAB","ORANGE","ORANGERED","ORCHID","PALEGOLDENROD","PALEGREEN","PALETURQUOISE","PALEVIOLETRED","PAPAYAWHIP","PEACHPUFF","PERU","PINK","PLUM","POWDERBLUE","PURPLE","REBECCAPURPLE","RED","ROSYBROWN","ROYALBLUE","SADDLEBROWN","SALMON","SANDYBROWN","SEAGREEN","SEASHELL","SIENNA","SILVER","SKYBLUE","SLATEBLUE","SLATEGRAY","SLATEGREY","SNOW","SPRINGGREEN","STEELBLUE","TAN","TEAL","THISTLE","TOMATO","TURQUOISE","VIOLET","WHEAT","WHITE","WHITESMOKE","YELLOW","YELLOWGREEN","from_str","GammaSrgb","GammaSrgba","LinSrgb","LinSrgba","Primaries","Primaries","Rgb","RgbSpace","RgbStandard","Rgba","Space","Srgb","Srgba","TransferFn","WhitePoint","abs_diff_eq","adapt_from_using","adapt_into_using","add","add","add_assign","add_assign","as_mut","as_ref","blue","blue","borrow","borrow_mut","clamp","clamp_self","clone","clone_into","component_wise","component_wise_self","default","default_epsilon","default_max_relative","default_max_ulps","div","div","div_assign","div_assign","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_components","from_encoding","from_format","from_hsl","from_hsv","from_linear","from_luma","from_premultiplied","from_rgb","from_xyz","get_hue","green","green","into","into","into_components","into_encoding","into_format","into_hsl","into_hsv","into_hwb","into_lab","into_lch","into_linear","into_luma","into_premultiplied","into_rgb","into_xyz","into_yxy","is_valid","lighten","mix","mul","mul","mul_assign","mul_assign","ne","new","red","red","relative_eq","standard","sub","sub","sub_assign","sub_assign","to_owned","try_from","try_into","type_id","ulps_eq","A","B","C","D50","D50Degree10","D55","D55Degree10","D65","D65Degree10","D75","D75Degree10","E","F11","F2","F7","WhitePoint","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","adapt_into_using","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["palettepalette::blend","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::chromatic_adaptation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::encoding","","","","","","","palette::encoding::gamma","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::encoding::linear","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::encoding::pixel","","","","","","","","","","","","","","","","","","","","palette::encoding::srgb","","","","","","","","","","","","","","","","","","","palette::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::gradient","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::luma","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::named","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::rgb","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::white_pointd":["An alpha component wrapper for colors.","A trait for colors that can be blended together.","The core color type. Typically <code>Self</code> for color types …","Common trait for color components.","Perform a unary or binary operation on each component of …","A trait for converting one color from another.","A trait for converting a color into another.","FromColor provides conversion from the colors.","A trait for colors where a hue may be calculated.","Linear HSL color space.","Linear HSL with an alpha component. See the <code>Hsla</code> …","Linear HSV color space.","Linear HSV with an alpha component. See the <code>Hsva</code> …","A trait for colors where the hue can be manipulated …","The kind of hue unit this color space uses.","Linear HWB color space.","Linear HWB with an alpha component. See the <code>Hwba</code> …","IntoColor provides conversion to the colors.","True if the max intensity is also the highest possible …","The CIE L*a*b* (CIELAB) color space.","A hue type for the CIE L*a*b* family of color spaces.","CIE L*a*b* (CIELAB) with an alpha component. See the <code>Laba</code> …","CIE L*C*h°, a polar version of CIE L*a*b*.","CIE L*C*h° with an alpha component. See the <code>Lcha</code> …","A trait for clamping and checking if colors are within …","A 9 element array representing a 3x3 matrix","A trait for linear color interpolation.","The error type for a color conversion that converted a …","A hue type for the RGB family of color spaces.","A trait for colors where the saturation (or chroma) can …","The type of the mixing factor.","The type of the lighten/darken amount.","The type of the (de)saturation factor.","The scalar type for color components.","The <code>Shade</code> trait allows a color to be lightened or …","The CIE 1931 XYZ color space.","CIE 1931 XYZ with an alpha component. See the <code>Xyza</code> …","The CIE 1931 Yxy (xyY)  color space.","CIE 1931 Yxy (xyY) with an alpha component. See the <code>Yxya</code> …","a* goes from red at -128 to green at 127.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The transparency component. 0.0 is fully transparent and …","","","","","","","","","","","","","","","","","b* goes from yellow at -128 to blue at 127.","The blackness of the color. It specifies the amount black …","Color blending and blending equations.","","","","","","","","","","","","","","","","","","","","","","","C* is the colorfulness of the color. It’s similar to …","Convert colors from one reference white point to another","Return a new color where the components has been clamped …","","","","","","","","","Clamp the color’s components to the nearest valid …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume this error and return the wrapped color","The color.","Perform a binary operation on this and an other color.","","","","","Perform a unary operation on this color.","","","","","Convert into another color component type, including …","Convert from T with values clamped to the color defined …","Convert into T with values clamped to the color defined …","Convert from T. The resulting color might be invalid in …","Convert from T. The resulting color might be invalid in …","Convert into T. The resulting color might be invalid in …","Darken the color by <code>amount</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decrease the saturation by <code>factor</code>.","","","","","","","","","","","","","","","","","","Various encoding traits, types and standards.","","","","","","","","","","","","","Floating point traitonvert from a <code>(hue, whiteness, blackness, alpha)</code> tuple.","Convert from a <code>(luma, alpha)</code> tuple.","Convert from a <code>(L\\\\*, C\\\\*, h°, alpha)</code> tuple.","Convert from a <code>(hue, saturation, value, alpha)</code> tuple.","Convert from a <code>(X, Y, Z, alpha)</code> tuple.","Convert from a <code>(hue, saturation, lightness, alpha)</code> tuple.","Convert from a <code>(red, green, blue, alpha)</code> tuple.","Convert from a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.","Convert from a <code>(L\\\\*, a\\\\*, b\\\\*, alpha)</code> tuple.","Convert from a <code>(L\\\\*, a\\\\*, b\\\\*)</code> tuple.","Convert from a <code>(X, Y, Z)</code> tuple.","Convert from a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.","Convert from a <code>(L\\\\*, C\\\\*, h°)</code> tuple.","Convert from a <code>(hue, whiteness, blackness)</code> tuple.","Convert from a <code>(hue, saturation, value)</code> tuple.","Convert from a <code>(hue, saturation, lightness)</code> tuple.","Create a new hue from degrees.","Create a new hue from degrees.","Convert luminance from a different encoding with …","Convert RGB from a different encoding with transparency.","Convert from another component type.","Convert from another component type.","Convert from HSL color space","Convert from HSL color space","","","Convert from HSV color space","Convert from HSV color space","","","","Convert from HWB color space","Convert from HWB color space","","","Convert from L*a*b* color space","Convert from L*a*b* color space","","","","Convert from L*C*h° color space","Convert from L*C*h° color space","","","Convert linear luminance to nonlinear luminance with …","Convert linear RGB to nonlinear RGB with transparency.","Convert from Luma","Convert from Luma","","","Convert the color from premultiplied alpha.","","Create a new hue from radians, instead of degrees.","Create a new hue from radians, instead of degrees.","Convert from RGB color space","Convert from RGB color space","","","","Convert from XYZ color space","","","","","","","","Convert from Yxy color space","Convert from Yxy color space","","","Calculate a hue if possible.","","","","","","","Types for interpolation between multiple colors.","The hue of the color, in degrees. Decides if it’s red, …","The hue of the color, in degrees. Decides if it’s red, …","The hue of the color, in degrees. Decides if it’s red, …","The hue of the color, in degrees. Decides if it’s red, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert to a <code>(X, Y, Z, alpha)</code> tuple.","Convert to a <code>(L\\\\*, a\\\\*, b\\\\*, alpha)</code> tuple.","Convert to a <code>(L\\\\*, C\\\\*, h°, alpha)</code> tuple.","Convert to a <code>(hue, whiteness, blackness, alpha)</code> tuple.","Convert to a <code>(hue, saturation, value, alpha)</code> tuple.","Convert to a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.","Convert to a <code>(luma, alpha)</code> tuple.","Convert to a <code>(red, green, blue, alpha)</code> tuple.","Convert to a <code>(hue, saturation, lightness, alpha)</code> tuple.","Convert to a <code>(L\\\\*, a\\\\*, b\\\\*)</code> tuple.","Convert to a <code>(X, Y, Z)</code> tuple.","Convert to a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.","Convert to a <code>(L\\\\*, C\\\\*, h°)</code> tuple.","Convert to a <code>(hue, whiteness, blackness)</code> tuple.","Convert to a <code>(hue, saturation, value)</code> tuple.","Convert to a <code>(hue, saturation, lightness)</code> tuple.","Convert the color to a different encoding with …","Convert the color to a different encoding with …","Convert into another component type.","Convert into another component type.","Convert into HSL color space","Convert into HSL color space","","","","","","","","Convert into HSV color space","Convert into HSV color space","","","","","","","","Convert into HWB color space","Convert into HWB color space","Convert into L*a*b* color space","Convert into L*a*b* color space","","","","","","","","Convert into L*C*h° color space","Convert into L*C*h° color space","","","","","","","","Convert the color to linear luminance with transparency.","Convert the color to linear RGB with transparency.","Convert into Luma","Convert into Luma","","","","","","","","Convert the color to premultiplied alpha.","","Convert into RGB color space.","Convert into RGB color space.","","","","","","","","Convert into XYZ space","","","","","","","","Convert into Yxy color space","Convert into Yxy color space","","","","","","","","Check if the color’s components are within the expected …","","","","","","","","","L* is the lightness of the color. 0.0 gives absolute …","L* is the lightness of the color. 0.0 gives absolute …","Lighten the color by <code>amount</code>.","","","","","","","","","Decides how light the color will look. 0.0 will be black, …","Luminance types.","luma (Y) was a measure of the brightness or luminance of …","The highest displayable value this component type can …","Mix the color with an other color, by <code>factor</code>.","","","","","","","","","","","","","","","","","","","","","","","","","A collection of named color constants. Can be toggled …","","","","","","","","","Create a luminance color with transparency.","CIE Yxy and transparency with white point D65.","CIE L*C*h° and transparency with white point D65.","CIE Yxy and transparency with white point D65.","HWB and transparency for linear sRGB.","HSV and transparency for linear sRGB.","CIE L*a*b* and transparency and white point D65.","HSL and transparency for linear sRGB.","Nonlinear RGB.","CIE L*a*b* with white point D65.","CIE XYZ with whtie point D65.","CIE Yxy with white point D65.","CIE L*C*h° with white point D65.","HWB for linear sRGB.","HSV for linear sRGB.","HSL for linear sRGB.","","","","","","","","","","","","","","","","","RGB types, spaces and standards.","Increase the saturation by <code>factor</code>.","","","","","The colorfulness of the color. 0.0 gives gray scale …","The colorfulness of the color. 0.0 gives gray scale …","Return a new copy of <code>self</code>, but with the hue shifted by …","","","","","","The white point and RGB primaries this color is adapted …","The white point and RGB primaries this color is adapted …","The white point and RGB primaries this color is adapted …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the hue as degrees, in the range <code>(-180, 180]</code>.","Get the hue as degrees, in the range <code>(-180, 180]</code>.","","","","","","","","","","","Convert the hue to positive degrees, in the range <code>[0, 360)</code>…","Convert the hue to positive degrees, in the range <code>[0, 360)</code>…","Convert the hue to positive radians, in the range <code>[0, 2π)</code>…","Convert the hue to positive radians, in the range <code>[0, 2π)</code>…","Convert the hue to radians, in the range <code>(-π, π]</code>.","Convert the hue to radians, in the range <code>(-π, π]</code>.","Get the internal representation, without normalizing it.","Get the internal representation, without normalizing it.","Get the internal representation as radians, without …","Get the internal representation as radians, without …","","Convert from T, returning ok if the color is inside of …","Convert into T, returning ok if the color is inside of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decides how bright the color will look. 0.0 will be …","Defines the tristimulus values of the CIE Illuminants.","The white point associated with the color’s illuminant …","The white point associated with the color’s illuminant …","The white point associated with the color’s illuminant …","The white point associated with the color’s illuminant …","The whiteness of the color. It specifies the amount white …","Return a new copy of <code>self</code>, but with a specific hue.","","","","","","Linear HWB and transparency.","CIE L*C*h° and transparency.","Linear HSL and transparency.","Linear HSV and transparency.","CIE Yxy and transparency.","CIE XYZ and transparency.","CIE L*a*b* and transparency.","CIE L*a*b*.","CIE XYZ.","CIE Yxy.","CIE L*C*h°.","Linear HWB.","Linear HSV.","Linear HSL.","X is the scale of what can be seen as a response curve …","x chromacity co-ordinate derived from XYZ color space as …","Y is the luminance of the color, where 0.0 is black and …","y chromacity co-ordinate derived from XYZ color space as …","Z is the scale of what can be seen as the blue …","Add the source and destination, according to …","A trait for colors that can be blended together.","A trait for custom blend functions.","The core color type. Typically <code>Self</code> for color types …","The destination alpha.","The destination color, or alpha.","A blending equation.","A pair of blending equations and corresponding parameters.","Create a color where each component is the largest of …","Create a color where each component is the smallest of …","A simple 1.","One minus the destination alpha.","One minus the destination color, or alpha.","One minus the source alpha.","One minus the source color, or alpha.","A blending parameter.","A pair of source and destination parameters.","Premultiplied alpha wrapper.","Subtract the source from the destination, according to …","The source alpha.","The source color, or alpha.","Subtract the destination from the source, according to …","A simple 0.","","","","","","","","","","","The transparency component. 0.0 is fully transparent and …","The equation for the alpha component.","The parameters for the alpha component.","Apply this blend function to a pair of colors.","","","","Place <code>self</code> over only the visible parts of <code>other</code>.","Place <code>self</code> over only the visible parts of <code>other</code>.","Place <code>self</code> over only the visible parts of <code>other</code>.","Blend self, as the source color, with <code>destination</code>, using …","Blend self, as the source color, with <code>destination</code>, using …","Blend self, as the source color, with <code>destination</code>, using …","","","","","","","","","","","Darken <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is …","Darken <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is …","Darken <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is …","","","","","","","","","","","The premultiplied color components (…","The equation for the color components.","The parameters for the color components.","","","Return the darkest parts of <code>self</code> and <code>other</code>.","Return the darkest parts of <code>self</code> and <code>other</code>.","Return the darkest parts of <code>self</code> and <code>other</code>.","","","","","","","The destination parameter.","Return the absolute difference between <code>self</code> and <code>other</code>. It…","Return the absolute difference between <code>self</code> and <code>other</code>. It…","Return the absolute difference between <code>self</code> and <code>other</code>. It…","","","","","Lighten <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is…","Lighten <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is…","Lighten <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is…","","","","","","Similar to <code>difference</code>, but appears to result in a lower …","Similar to <code>difference</code>, but appears to result in a lower …","Similar to <code>difference</code>, but appears to result in a lower …","","","","","","","","","","","","Create a pair of blending equations, where all the …","Create a pair of additive blending equations with the …","Convert the color from premultiplied alpha.","","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them …","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them …","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them …","Results in the parts of <code>self</code> that overlaps the visible …","Results in the parts of <code>self</code> that overlaps the visible …","Results in the parts of <code>self</code> that overlaps the visible …","","","","","","Convert the color to premultiplied alpha.","","Return the lightest parts of <code>self</code> and <code>other</code>.","Return the lightest parts of <code>self</code> and <code>other</code>.","Return the lightest parts of <code>self</code> and <code>other</code>.","","","","","","Multiply <code>self</code> with <code>other</code>. This uses the alpha component …","Multiply <code>self</code> with <code>other</code>. This uses the alpha component …","Multiply <code>self</code> with <code>other</code>. This uses the alpha component …","","","","Results in the parts of <code>self</code> that lies outside the …","Results in the parts of <code>self</code> that lies outside the …","Results in the parts of <code>self</code> that lies outside the …","Place <code>self</code> over <code>other</code>. This is the good old common alpha …","Place <code>self</code> over <code>other</code>. This is the good old common alpha …","Place <code>self</code> over <code>other</code>. This is the good old common alpha …","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them …","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them …","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them …","Add <code>self</code> and <code>other</code>. This uses the alpha component to …","Add <code>self</code> and <code>other</code>. This uses the alpha component to …","Add <code>self</code> and <code>other</code>. This uses the alpha component to …","","Make a color which is at least as light as <code>self</code> or <code>other</code>.","Make a color which is at least as light as <code>self</code> or <code>other</code>.","Make a color which is at least as light as <code>self</code> or <code>other</code>.","Lighten <code>other</code> if <code>self</code> is light, or darken <code>other</code> as if it…","Lighten <code>other</code> if <code>self</code> is light, or darken <code>other</code> as if it…","Lighten <code>other</code> if <code>self</code> is light, or darken <code>other</code> as if it…","The source parameter.","","","","","","","","","","","","","","","","","","","","","","","","","","Results in either <code>self</code> or <code>other</code>, where they do not …","Results in either <code>self</code> or <code>other</code>, where they do not …","Results in either <code>self</code> or <code>other</code>, where they do not …","Trait to convert color from one reference white point to …","Trait to convert color with one reference white point …","Bradford chromatic adaptation method","Holds the matrix coeffecients for the chromatic …","Chromatic adaptation methods implemented in the library","Generates a conversion matrix to convert the Xyz …","VonKries chromatic adaptation method","XyzScaling chromatic adaptation method","Convert the source color to the destination color using …","Convert the source color to the destination color using …","Convert the source color to the destination color using …","Convert the source color to the destination color using …","","","","","","","","","Generates a 3x3 transformation matrix to convert color …","Get the cone response functions for the chromatic …","","","","3x3 matrix for the inverse of the cone response domains","3x3 matrix for the cone response domains","","","","","","","A transfer function to and from linear space.","Convert the color component <code>x</code> from linear space.","Gamma encoding.","Convert the color component <code>x</code> into linear space.","Linear encoding","Pixel encodings and pixel format conversion.","The sRGB standard.","Represents <code>2.2f32</code>.","Gamma encoding.","The transfer function for gamma encoded colors.","A type level float constant.","The represented number.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A generic standard with linear components.","Linear color component encoding.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The guaranteed number of channels in the sequence.","The guaranteed number of channels in the sequence.","The number of color channels.","Represents colors that can be serialized and deserialized …","A contiguous sequence of pixel channels.","A contiguous sequence of pixel channels with a known …","Convert to a mutable pointer.","Convert to a pointer.","Cast as a reference to raw color components.","Cast as a mutable reference to raw color components.","The length of the sequence.","Cast from a reference to raw color components.","Cast from a mutable reference to raw color components.","Convert from a pointer and a length.","Convert from a mutable pointer and a length.","Cast a slice of raw color components to a slice of colors.","Cast a mutable slice of raw color components to a mutable …","Convert from raw color components.","Cast a slice of colors to a slice of raw color components.","Cast a mutable slice of colors to a mutable slice of raw …","The sRGB color space.","","","","","","","","","","","","","","","","","","","Generic trait for floating point numbers","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns the largest integer less than or equal to a …","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns the <code>NaN</code> value.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","A linear interpolation between colors.","A domain range for gradient slices.","A slice of a Gradient that limits its domain.","An iterator over interpolated colors.","","","","","","","","","","","","","","","","","","","","","","","","","Get the limits of this gradient’s domain.","Get the limits of this gradient slice’s domain.","","","","","","","","","","","","","Get a color from the gradient. The color of the closest …","Get a color from the gradient slice. The color of the …","","","","","","","Create a gradient of evenly spaced colors with the domain …","","","","Slice this gradient to limit its domain.","Slice this gradient slice to further limit its domain. …","Take <code>n</code> evenly spaced colors from the gradient, as an …","Take <code>n</code> evenly spaced colors from the gradient slice, as …","","","","","","","","","","","","","","","","","","Create a gradient of colors with custom spacing and …","Gamma 2.2 encoded luminance.","Gamma 2.2 encoded luminance with an alpha component.","Linear luminance.","Linear luminance with an alpha component.","Luminance.","A white point and a transfer function.","Luminance with an alpha component. See the <code>Lumaa</code> …","sRGB encoded luminance.","sRGB encoded luminance with an alpha component.","The transfer function for the luminance component.","The white point of the color space.","","","","","","","","Convert to a raw pixel format.","Convert to a raw pixel format.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from a <code>(luma,)</code> tuple.","Convert luminance from a different encoding.","Convert from another component type.","Convert linear luminance to nonlinear luminance.","","","","","","","Convert to a <code>(luma,)</code> tuple.","Convert the color to a different encoding.","Convert into another component type.","Convert the color to linear luminance.","","","","","","","The lightness of the color. 0.0 is black and 1.0 is white.","","","","","","","Create a luminance color.","","The kind of RGB standard. sRGB is the default.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a SVG/CSS3 color by name. Can be toggled with the …","Gamma 2.2 encoded sRGB.","Gamma 2.2 encoded sRGB with an alpha component.","Linear sRGB.","Linear sRGB with an alpha component.","Represents the red, green and blue primaries of an RGB …","The primaries of the RGB color space.","Generic RGB.","A set of primaries and a white point.","An RGB space and a transfer function.","Generic RGB with an alpha component. See the <code>Rgba</code> …","The RGB color space.","Nonlinear sRGB.","Nonlinear sRGB with an alpha component.","The transfer function for the color components.","The white point of the RGB color space.","","","","","","","","Convert to a raw pixel format.","Convert to a raw pixel format.","Primary blue.","The amount of blue light, where 0.0 is no blue light and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from a <code>(red, green, blue)</code> tuple.","Convert RGB from a different encoding.","Convert from another component type.","","","Convert linear RGB to nonlinear RGB.","","","","","","Primary green.","The amount of green light, where 0.0 is no green light …","","","Convert to a <code>(red, green, blue)</code> tuple.","Convert the color to a different encoding.","Convert into another component type.","","","","","","Convert the color to linear RGB.","","","","","","","","","","","","","","Create an RGB color.","Primary red.","The amount of red light, where 0.0 is no red light and …","","The kind of RGB standard. sRGB is the default.","","","","","","","","","","CIE standard illuminant A","CIE standard illuminant B","CIE standard illuminant C","CIE D series standard illuminant - D50","CIE D series standard illuminant - D50","CIE D series standard illuminant - D55","CIE D series standard illuminant - D55","CIE D series standard illuminant - D65","CIE D series standard illuminant - D65","CIE D series standard illuminant - D75","CIE D series standard illuminant - D75","CIE standard illuminant E","CIE fluorescent illuminant series - F11","CIE fluorescent illuminant series - F2","CIE fluorescent illuminant series - F7","WhitePoint defines the Xyz color co-ordinates for a given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the Xyz chromacity co-ordinates for the white point.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4,5,6,7,0,0,0,0,0,8,9,8,10,11,12,13,14,15,16,17,8,10,11,12,13,14,8,10,11,14,15,16,17,9,8,10,11,12,13,18,14,15,16,17,9,9,8,8,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,9,9,8,8,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,9,9,8,10,11,14,15,16,17,9,8,10,11,14,15,16,17,8,15,0,9,8,10,11,12,13,18,14,15,16,17,9,8,10,11,12,13,18,14,15,16,17,14,0,19,9,8,10,11,14,15,16,17,19,9,8,10,11,14,15,16,17,9,8,10,11,12,13,14,15,16,17,9,8,10,11,12,13,14,15,16,17,18,9,7,9,8,10,11,7,9,8,10,11,3,20,21,20,20,21,5,9,8,10,11,12,13,14,15,16,17,9,8,10,11,12,13,14,15,16,17,9,8,10,11,12,13,14,15,16,17,9,8,10,11,12,13,14,15,16,17,9,9,6,18,9,9,8,8,10,10,11,11,9,9,8,8,10,10,11,11,0,9,8,10,11,12,12,13,13,14,15,16,17,0,9,9,9,8,10,11,12,13,18,18,14,15,16,17,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,13,13,18,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,9,9,9,9,9,9,9,9,9,8,10,11,14,15,16,17,12,13,9,9,9,9,22,22,16,17,22,22,15,16,17,22,22,15,16,22,22,8,10,14,22,22,8,14,9,9,22,22,10,11,1,9,12,13,22,22,10,16,17,22,8,10,11,14,15,16,17,22,22,10,11,2,9,8,14,15,16,17,0,14,15,16,17,9,9,9,9,9,9,9,9,9,9,8,8,10,10,11,11,12,12,12,12,13,13,13,13,18,14,14,15,15,16,16,17,17,9,9,9,9,9,9,9,9,9,8,10,11,14,15,16,17,9,9,9,9,23,23,8,10,11,14,15,16,17,23,23,8,10,11,14,15,16,17,23,23,23,23,8,10,11,14,15,16,17,23,23,8,10,11,14,15,16,17,9,9,23,23,8,10,11,14,15,16,17,1,9,23,23,8,10,11,14,15,16,17,23,8,10,11,14,15,16,17,23,23,8,10,11,14,15,16,17,19,9,8,10,11,14,15,16,17,8,14,5,9,8,10,11,14,15,16,17,17,0,11,3,4,9,8,10,11,14,15,16,17,9,9,8,8,10,10,11,11,9,9,8,8,10,10,11,11,0,9,8,10,11,14,15,16,17,9,9,9,9,9,9,9,9,9,8,10,11,14,15,16,17,9,8,10,11,12,13,14,15,16,17,8,10,11,12,13,14,0,6,9,14,16,17,16,17,24,9,14,15,16,17,15,16,17,9,9,8,8,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,9,9,8,8,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,12,13,9,8,10,11,12,13,14,15,16,17,12,13,12,13,12,13,12,13,12,13,18,20,21,9,8,10,11,12,13,18,14,15,16,17,9,8,10,11,12,13,18,14,15,16,17,9,8,10,11,12,13,18,14,15,16,17,9,8,10,11,12,13,14,15,16,17,8,10,11,12,13,14,16,0,8,10,11,14,15,24,9,14,15,16,17,9,9,9,9,9,9,9,8,10,11,14,15,16,17,10,11,10,11,10,25,0,0,1,26,26,0,0,25,25,26,26,26,26,26,0,0,0,25,26,26,25,26,27,28,25,29,26,27,27,27,27,27,27,28,28,30,28,27,27,1,1,1,1,1,1,28,25,29,26,27,28,25,29,26,27,1,1,1,28,25,29,26,27,28,25,29,26,27,27,28,28,27,27,1,1,1,27,27,27,27,27,27,29,1,1,1,27,27,27,27,1,1,1,28,25,29,26,27,1,1,1,28,25,29,26,27,28,25,29,26,27,27,28,28,1,27,1,1,1,1,1,1,28,25,29,26,27,1,27,1,1,1,27,27,27,27,27,1,1,1,28,29,27,1,1,1,1,1,1,1,1,1,1,1,1,27,1,1,1,1,1,1,29,27,27,27,27,28,25,29,26,27,28,25,29,26,27,28,25,29,26,27,28,25,29,26,27,27,1,1,1,0,0,31,0,0,0,31,31,32,32,33,33,31,34,31,34,31,34,31,34,35,35,31,31,34,34,34,31,34,31,34,31,34,0,36,0,36,0,0,0,0,0,0,0,37,38,39,40,38,39,40,38,39,40,38,39,40,38,39,40,38,39,40,38,39,40,38,39,40,39,38,39,40,39,38,39,38,39,40,38,39,40,38,39,40,38,39,40,0,0,41,42,41,42,41,42,41,42,41,42,41,42,41,42,41,42,42,41,42,42,41,41,42,41,42,41,42,41,42,43,43,44,0,0,0,45,45,44,44,45,44,44,45,45,44,44,44,44,44,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,0,0,0,48,49,50,51,48,49,50,51,48,49,50,51,48,49,50,51,48,49,50,51,48,48,48,48,49,51,48,49,51,48,49,50,51,48,48,48,48,48,49,51,49,50,51,48,50,48,49,50,48,50,49,51,49,51,49,50,51,48,49,50,51,48,49,50,51,48,49,50,51,48,48,49,0,0,0,0,0,0,0,0,0,52,52,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0,0,0,55,0,0,55,54,56,56,56,56,56,56,56,56,56,57,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,57,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,57,56,56,56,56,56,56,56,56,56,56,56,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["alpha",3]]],[[]],[[["lab",3]]],[[]],[[]],[[["xyz",3]]],[[["yxy",3]]],[[]],[[["labhue",3]],["labhue",3]],[[],["labhue",3]],[[],["rgbhue",3]],[[["rgbhue",3]],["rgbhue",3]],[[["lch",3]]],[[]],[[]],[[["hwb",3]]],[[["hsv",3]]],[[]],[[["hsl",3]]],[[]],[[]],[[["alpha",3]]],[[]],[[["lab",3]]],[[]],[[["xyz",3]]],[[]],[[["yxy",3]]],[[["labhue",3]]],[[]],[[]],[[["rgbhue",3]]],[[]],[[["lch",3]]],[[]],[[["hwb",3]]],[[]],[[["hsv",3]]],[[["hsl",3]]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[],["alpha",3]],[[],["lab",3]],[[],["xyz",3]],[[],["yxy",3]],[[],["lch",3]],[[],["hwb",3]],[[],["hsv",3]],[[],["hsl",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["alpha",3]],[[],["lab",3]],[[],["xyz",3]],[[],["yxy",3]],[[],["labhue",3]],[[],["rgbhue",3]],[[],["lch",3]],[[],["hwb",3]],[[],["hsv",3]],[[],["hsl",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["fnmut",8]]],[[["alpha",3],["fnmut",8]],["alpha",3]],[[["lab",3],["fnmut",8]],["lab",3]],[[["xyz",3],["fnmut",8]],["xyz",3]],[[["yxy",3],["fnmut",8]],["yxy",3]],[[["fnmut",8]]],[[["fnmut",8]],["alpha",3]],[[["fnmut",8]],["lab",3]],[[["fnmut",8]],["xyz",3]],[[["fnmut",8]],["yxy",3]],[[],["component",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["alpha",3]],[[],["lab",3]],[[],["xyz",3]],[[],["yxy",3]],[[],["labhue",3]],[[],["rgbhue",3]],[[],["lch",3]],[[],["hwb",3]],[[],["hsv",3]],[[],["hsl",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[],["str",15]],[[["alpha",3]]],[[]],[[]],[[["lab",3]]],[[]],[[["xyz",3]]],[[]],[[["yxy",3]]],[[["alpha",3]]],[[]],[[["lab",3]]],[[]],[[]],[[["xyz",3]]],[[["yxy",3]]],[[]],null,[[["alpha",3]],["bool",15]],[[["lab",3]],["bool",15]],[[["xyz",3]],["bool",15]],[[["yxy",3]],["bool",15]],[[["labhue",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["rgbhue",3]],["bool",15]],[[["lch",3]],["bool",15]],[[["hwb",3]],["bool",15]],[[["hsv",3]],["bool",15]],[[["hsl",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["hwb",3]]],[[["lab",3]]],[[["prealpha",3]],["alpha",3]],[[],["alpha",3]],[[["rgb",3]]],[[["alpha",3],["rgb",3]]],[[["luma",3]]],[[["alpha",3],["luma",3]]],[[["hsv",3]]],[[["hsv",3],["alpha",3]]],[[["hwb",3]]],[[["alpha",3],["hwb",3]]],[[["lab",3]]],[[["alpha",3],["lab",3]]],[[["lch",3]]],[[["alpha",3],["lch",3]]],[[["xyz",3]]],[[["xyz",3],["alpha",3]]],[[["yxy",3]]],[[["yxy",3],["alpha",3]]],[[]],[[["rgb",3]]],[[["alpha",3],["rgb",3]]],[[["luma",3]]],[[["alpha",3],["luma",3]]],[[["hsl",3]]],[[["alpha",3],["hsl",3]]],[[["hwb",3]]],[[["alpha",3],["hwb",3]]],[[["lab",3]]],[[["alpha",3],["lab",3]]],[[["lch",3]]],[[["alpha",3],["lch",3]]],[[["xyz",3]]],[[["xyz",3],["alpha",3]]],[[["yxy",3]]],[[["yxy",3],["alpha",3]]],[[]],[[]],[[["rgb",3]]],[[]],[[["alpha",3],["rgb",3]]],[[["alpha",3],["xyz",3]]],[[["luma",3]]],[[["xyz",3]]],[[["alpha",3],["luma",3]]],[[["lch",3],["alpha",3]]],[[["hsl",3]]],[[["lch",3]]],[[["alpha",3],["hsl",3]]],[[["hsv",3]]],[[["alpha",3],["lab",3]]],[[["hsv",3],["alpha",3]]],[[["lab",3]]],[[["hwb",3],["alpha",3]]],[[["lab",3]]],[[["hwb",3]]],[[["alpha",3],["lab",3]]],[[["alpha",3],["hsv",3]]],[[["lch",3]]],[[["hsv",3]]],[[["alpha",3],["lch",3]]],[[["xyz",3]]],[[["alpha",3],["hsl",3]]],[[["xyz",3],["alpha",3]]],[[["hsl",3]]],[[["yxy",3]]],[[["alpha",3],["luma",3]]],[[["yxy",3],["alpha",3]]],[[["luma",3]]],[[["alpha",3],["rgb",3]]],[[["rgb",3]]],[[]],[[]],[[["rgb",3]]],[[["alpha",3],["yxy",3]]],[[["alpha",3],["rgb",3]]],[[["yxy",3]]],[[["luma",3]]],[[["lch",3],["alpha",3]]],[[["alpha",3],["luma",3]]],[[["lch",3]]],[[["hsl",3]]],[[["alpha",3],["lab",3]]],[[["alpha",3],["hsl",3]]],[[]],[[["hsv",3]]],[[["hwb",3],["alpha",3]]],[[["alpha",3],["hsv",3]]],[[["hwb",3]]],[[["alpha",3],["hsv",3]]],[[["hwb",3],["alpha",3]]],[[["hsv",3]]],[[["lch",3]]],[[["alpha",3],["hsl",3]]],[[["lch",3],["alpha",3]]],[[["xyz",3]]],[[["hsl",3]]],[[["alpha",3],["xyz",3]]],[[["alpha",3],["luma",3]]],[[["yxy",3]]],[[["luma",3]]],[[["alpha",3],["yxy",3]]],[[["alpha",3],["rgb",3]]],[[["rgb",3]]],[[]],[[]],[[["alpha",3],["yxy",3]]],[[["rgb",3]]],[[["yxy",3]]],[[["alpha",3],["rgb",3]]],[[["xyz",3],["alpha",3]]],[[["luma",3]]],[[["xyz",3]]],[[["alpha",3],["luma",3]]],[[["alpha",3],["lch",3]]],[[["hsl",3]]],[[["lch",3]]],[[["alpha",3],["hsl",3]]],[[["alpha",3],["lab",3]]],[[["hsv",3]]],[[["lab",3]]],[[["alpha",3],["hsv",3]]],[[["hwb",3],["alpha",3]]],[[["hwb",3]]],[[["hwb",3]]],[[["hwb",3],["alpha",3]]],[[["lab",3]]],[[["alpha",3],["hsv",3]]],[[["alpha",3],["lab",3]]],[[["hsv",3]]],[[["xyz",3]]],[[["alpha",3],["hsl",3]]],[[["alpha",3],["xyz",3]]],[[["hsl",3]]],[[["yxy",3]]],[[["alpha",3],["luma",3]]],[[["alpha",3],["yxy",3]]],[[["luma",3]]],[[]],[[["alpha",3],["yxy",3]]],[[]],[[["rgb",3]]],[[["alpha",3],["rgb",3]]],[[["hsl",3]]],[[["alpha",3],["hsl",3]]],[[["hsv",3]]],[[["alpha",3],["hsv",3]]],[[["hwb",3]]],[[["hwb",3],["alpha",3]]],[[["lab",3]]],[[["alpha",3],["lab",3]]],[[["lch",3]]],[[["alpha",3],["lch",3]]],[[["xyz",3]]],[[["xyz",3],["alpha",3]]],[[["yxy",3]]],[[["lch",3]]],[[]],[[["rgb",3]]],[[["luma",3]]],[[["xyz",3]]],[[["alpha",3],["yxy",3]]],[[["alpha",3],["hsv",3]]],[[["yxy",3]]],[[["hsv",3]]],[[["alpha",3],["xyz",3]]],[[["alpha",3],["luma",3]]],[[["lch",3],["alpha",3]]],[[["alpha",3],["hsl",3]]],[[["alpha",3],["lab",3]]],[[["alpha",3],["rgb",3]]],[[["hwb",3],["alpha",3]]],[[["hsl",3]]],[[["hwb",3]]],[[]],[[["lab",3]]],[[["alpha",3],["hsl",3]]],[[]],[[["hsv",3]]],[[["alpha",3],["hsv",3]]],[[["hwb",3]]],[[["hwb",3],["alpha",3]]],[[["alpha",3],["lab",3]]],[[["lch",3]]],[[["lch",3],["alpha",3]]],[[["alpha",3],["xyz",3]]],[[["alpha",3],["yxy",3]]],[[["rgb",3]]],[[["yxy",3]]],[[]],[[["luma",3]]],[[["alpha",3],["rgb",3]]],[[["alpha",3],["luma",3]]],[[["hsl",3]]],[[["hsl",3]]],[[["hsv",3]]],[[]],[[["luma",3]]],[[["xyz",3]]],[[["alpha",3],["yxy",3]]],[[["alpha",3],["xyz",3]]],[[]],[[["lch",3],["alpha",3]]],[[["lch",3]]],[[["alpha",3],["lab",3]]],[[["lab",3]]],[[["hwb",3],["alpha",3]]],[[["hwb",3]]],[[["alpha",3],["hsv",3]]],[[["alpha",3],["hsl",3]]],[[["rgb",3]]],[[["alpha",3],["luma",3]]],[[["alpha",3],["rgb",3]]],[[]],[[],["labhue",3]],[[]],[[],["rgbhue",3]],[[]],[[]],[[]],[[["alpha",3],["hsv",3]]],[[["alpha",3],["yxy",3]]],[[["xyz",3]]],[[]],[[["lch",3],["alpha",3]]],[[["alpha",3],["lab",3]]],[[]],[[["hwb",3],["alpha",3]]],[[["rgb",3]]],[[["hwb",3]]],[[["alpha",3],["rgb",3]]],[[["lab",3]]],[[["luma",3]]],[[["hsv",3]]],[[["alpha",3],["luma",3]]],[[["yxy",3]]],[[["hsl",3]]],[[["alpha",3],["hsl",3]]],[[["alpha",3],["xyz",3]]],[[["yxy",3]]],[[["yxy",3],["alpha",3]]],[[]],[[["hsl",3]]],[[["alpha",3],["hsl",3]]],[[["alpha",3],["luma",3]]],[[["hsv",3],["alpha",3]]],[[["luma",3]]],[[["alpha",3],["hwb",3]]],[[["lab",3]]],[[["alpha",3],["lab",3]]],[[["lch",3]]],[[["alpha",3],["rgb",3]]],[[["xyz",3]]],[[["hsv",3]]],[[["alpha",3],["lch",3]]],[[["xyz",3],["alpha",3]]],[[]],[[["rgb",3]]],[[["alpha",3],["hwb",3]]],[[["lch",3]]],[[["xyz",3]]],[[["alpha",3],["lab",3]]],[[["hsl",3]]],[[["hwb",3]]],[[]],[[]],[[["rgb",3]]],[[["yxy",3],["alpha",3]]],[[["lab",3]]],[[["yxy",3]]],[[["xyz",3],["alpha",3]]],[[["hsv",3],["alpha",3]]],[[["alpha",3],["lch",3]]],[[["alpha",3],["hsl",3]]],[[["luma",3]]],[[["alpha",3],["rgb",3]]],[[["alpha",3],["luma",3]]],[[["yxy",3],["alpha",3]]],[[["alpha",3],["lab",3]]],[[["alpha",3],["hwb",3]]],[[["rgb",3]]],[[["hwb",3]]],[[]],[[]],[[["lch",3]]],[[["hsv",3]]],[[["alpha",3],["lch",3]]],[[["xyz",3],["alpha",3]]],[[["yxy",3]]],[[["xyz",3]]],[[["hsv",3],["alpha",3]]],[[["alpha",3],["hsl",3]]],[[["alpha",3],["luma",3]]],[[["luma",3]]],[[["alpha",3],["rgb",3]]],[[["lab",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["labhue",3]],[[],["rgbhue",3]],[[["alpha",3],["luma",3]],[["alpha",3],["luma",3]]],[[["rgb",3],["alpha",3]]],[[["alpha",3],["rgb",3],["component",8]]],[[["alpha",3],["luma",3],["component",8]]],[[["rgbspace",8],["hsl",3]]],[[["rgbspace",8],["hsl",3]]],[[["hsl",3],["rgbspace",8]]],[[["hsl",3],["rgbspace",8]]],[[["rgbspace",8],["hsv",3]]],[[["rgbspace",8],["hsv",3]]],[[["rgbspace",8],["hsv",3]]],[[["rgbspace",8],["hsv",3]]],[[["rgbspace",8],["hsv",3]]],[[["rgbspace",8],["hwb",3]]],[[["rgbspace",8],["hwb",3]]],[[["rgbspace",8],["hwb",3]]],[[["rgbspace",8],["hwb",3]]],[[["lab",3]]],[[["lab",3]]],[[["lab",3]]],[[["lab",3]]],[[["lab",3]]],[[["lch",3]]],[[["lch",3]]],[[["lch",3]]],[[["lch",3]]],[[["alpha",3],["luma",3]],[["alpha",3],["luma",3]]],[[["alpha",3],["rgb",3]]],[[["linear",3],["luma",3]]],[[["linear",3],["luma",3]]],[[["luma",3],["linear",3]]],[[["luma",3],["linear",3]]],[[["prealpha",3]]],[[["prealpha",3]],["alpha",3]],[[],["labhue",3]],[[],["rgbhue",3]],[[["rgb",3],["linear",3]]],[[["rgb",3],["linear",3]]],[[["linear",3],["rgb",3]]],[[["linear",3],["rgb",3]]],[[["linear",3],["rgb",3]]],[[["xyz",3]]],[[["xyz",3]]],[[["xyz",3]]],[[["xyz",3]]],[[["xyz",3]]],[[["xyz",3]]],[[["xyz",3]]],[[["xyz",3]]],[[["yxy",3]]],[[["yxy",3]]],[[["yxy",3]]],[[["yxy",3]]],[[],["option",4]],[[],["option",4]],[[],[["option",4],["labhue",3]]],[[],[["option",4],["labhue",3]]],[[],[["option",4],["rgbhue",3]]],[[],[["option",4],["rgbhue",3]]],[[],[["option",4],["rgbhue",3]]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["f32",15]],[[]],[[],["f32",15]],[[],["f64",15]],[[],["f32",15]],[[],["f32",15]],[[]],[[],["f64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["alpha",3],["luma",3]]],[[],[["rgb",3],["alpha",3]]],[[],[["alpha",3],["rgb",3],["component",8]]],[[],[["alpha",3],["component",8],["luma",3]]],[[],[["rgbspace",8],["hsl",3]]],[[],[["rgbspace",8],["hsl",3]]],[[],[["rgbspace",8],["hsl",3]]],[[],[["rgbspace",8],["hsl",3]]],[[],[["rgbspace",8],["hsl",3]]],[[],[["rgbspace",8],["hsl",3]]],[[],[["rgbspace",8],["hsl",3]]],[[],[["rgbspace",8],["hsl",3]]],[[],[["rgbspace",8],["hsl",3]]],[[],[["rgbspace",8],["hsv",3]]],[[],[["rgbspace",8],["hsv",3]]],[[],[["rgbspace",8],["hsv",3]]],[[],[["rgbspace",8],["hsv",3]]],[[],[["rgbspace",8],["hsv",3]]],[[],[["rgbspace",8],["hsv",3]]],[[],[["rgbspace",8],["hsv",3]]],[[],[["rgbspace",8],["hsv",3]]],[[],[["rgbspace",8],["hsv",3]]],[[],[["rgbspace",8],["hwb",3]]],[[],[["rgbspace",8],["hwb",3]]],[[],["lab",3]],[[],["lab",3]],[[],["lab",3]],[[],["lab",3]],[[],["lab",3]],[[],["lab",3]],[[],["lab",3]],[[],["lab",3]],[[],["lab",3]],[[],["lch",3]],[[],["lch",3]],[[],["lch",3]],[[],["lch",3]],[[],["lch",3]],[[],["lch",3]],[[],["lch",3]],[[],["lch",3]],[[],["lch",3]],[[],[["alpha",3],["luma",3]]],[[],[["alpha",3],["rgb",3]]],[[],[["linear",3],["luma",3]]],[[],[["linear",3],["luma",3]]],[[],[["linear",3],["luma",3]]],[[],[["linear",3],["luma",3]]],[[],[["linear",3],["luma",3]]],[[],[["linear",3],["luma",3]]],[[],[["linear",3],["luma",3]]],[[],[["linear",3],["luma",3]]],[[],[["linear",3],["luma",3]]],[[],["prealpha",3]],[[],["prealpha",3]],[[],[["linear",3],["rgb",3]]],[[],[["linear",3],["rgb",3]]],[[],[["linear",3],["rgb",3]]],[[],[["linear",3],["rgb",3]]],[[],[["linear",3],["rgb",3]]],[[],[["linear",3],["rgb",3]]],[[],[["rgb",3],["linear",3]]],[[],[["rgb",3],["linear",3]]],[[],[["rgb",3],["linear",3]]],[[],["xyz",3]],[[],["xyz",3]],[[],["xyz",3]],[[],["xyz",3]],[[],["xyz",3]],[[],["xyz",3]],[[],["xyz",3]],[[],["xyz",3]],[[],["yxy",3]],[[],["yxy",3]],[[],["yxy",3]],[[],["yxy",3]],[[],["yxy",3]],[[],["yxy",3]],[[],["yxy",3]],[[],["yxy",3]],[[],["yxy",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,[[]],[[],["alpha",3]],[[],["lab",3]],[[],["xyz",3]],[[],["yxy",3]],[[],["lch",3]],[[],["hwb",3]],[[],["hsv",3]],[[],["hsl",3]],null,null,null,[[]],[[]],[[["alpha",3]],["alpha",3]],[[["lab",3]],["lab",3]],[[["xyz",3]],["xyz",3]],[[["yxy",3]],["yxy",3]],[[["lch",3]],["lch",3]],[[["hwb",3]],["hwb",3]],[[["hsv",3]],["hsv",3]],[[["hsl",3]],["hsl",3]],[[["alpha",3]]],[[]],[[]],[[["lab",3]]],[[]],[[["xyz",3]]],[[["yxy",3]]],[[]],[[["alpha",3]]],[[]],[[["lab",3]]],[[]],[[]],[[["xyz",3]]],[[]],[[["yxy",3]]],null,[[["alpha",3]],["bool",15]],[[["lab",3]],["bool",15]],[[["xyz",3]],["bool",15]],[[["yxy",3]],["bool",15]],[[["lch",3]],["bool",15]],[[["hwb",3]],["bool",15]],[[["hsv",3]],["bool",15]],[[["hsl",3]],["bool",15]],[[]],[[]],[[["into",8],["labhue",3]]],[[]],[[["into",8],["rgbhue",3]]],[[["into",8],["rgbhue",3]]],[[]],[[["into",8],["rgbhue",3]]],[[]],[[],[["lab",3],["d65",3]]],[[],[["d65",3],["xyz",3]]],[[],[["d65",3],["yxy",3]]],[[["into",8],["labhue",3]],[["lch",3],["d65",3]]],[[["into",8],["rgbhue",3]],[["hwb",3],["srgb",3]]],[[["into",8],["rgbhue",3]],[["hsv",3],["srgb",3]]],[[["into",8],["rgbhue",3]],[["hsl",3],["srgb",3]]],[[["alpha",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[]],[[],["alpha",3]],[[],["lch",3]],[[],["hsv",3]],[[],["hsl",3]],null,null,[[["into",8]]],[[["into",8]],["alpha",3]],[[["into",8]],["lch",3]],[[["into",8]],["hwb",3]],[[["into",8]],["hsv",3]],[[["into",8]],["hsl",3]],null,null,null,[[]],[[["alpha",3]]],[[["lab",3]]],[[]],[[]],[[["xyz",3]]],[[["yxy",3]]],[[]],[[["labhue",3]],["labhue",3]],[[],["labhue",3]],[[["rgbhue",3]],["rgbhue",3]],[[],["rgbhue",3]],[[["lch",3]]],[[]],[[["hwb",3]]],[[]],[[["hsv",3]]],[[]],[[["hsl",3]]],[[]],[[]],[[["alpha",3]]],[[["lab",3]]],[[]],[[]],[[["xyz",3]]],[[["yxy",3]]],[[]],[[["labhue",3]]],[[]],[[]],[[["rgbhue",3]]],[[["lch",3]]],[[]],[[]],[[["hwb",3]]],[[]],[[["hsv",3]]],[[]],[[["hsl",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],[["outofbounds",3],["result",4]]],[[],[["result",4],["outofbounds",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["alpha",3],["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],null,null,null,null,null,null,null,[[["into",8]]],[[["into",8]],["alpha",3]],[[["into",8]],["lch",3]],[[["into",8]],["hwb",3]],[[["into",8]],["hsv",3]],[[["into",8]],["hsl",3]],[[["into",8],["rgbhue",3]]],[[["into",8],["labhue",3]]],[[["into",8],["rgbhue",3]]],[[["into",8],["rgbhue",3]]],[[]],[[]],[[]],[[],["lab",3]],[[],["xyz",3]],[[],["yxy",3]],[[["into",8],["labhue",3]],["lch",3]],[[["into",8],["rgbhue",3]],["hwb",3]],[[["into",8],["rgbhue",3]],["hsv",3]],[[["into",8],["rgbhue",3]],["hsl",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["prealpha",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["prealpha",3]]],[[]],[[["prealpha",3]]],null,null,null,[[["prealpha",3]],["prealpha",3]],[[["prealpha",3]],["prealpha",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["equations",3]],[[],["equation",4]],[[],["parameters",3]],[[],["parameter",4]],[[],["prealpha",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["prealpha",3],["fnmut",8]],["prealpha",3]],[[["fnmut",8]],["prealpha",3]],[[]],[[]],[[]],[[],["prealpha",3]],[[]],[[]],[[],["u32",15]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[["prealpha",3]]],[[["prealpha",3]]],[[]],[[]],[[]],[[]],[[["equations",3]],["bool",15]],[[["equation",4]],["bool",15]],[[["parameters",3]],["bool",15]],[[["parameter",4]],["bool",15]],[[["prealpha",3]],["bool",15]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["alpha",3]],["prealpha",3]],[[["equation",4]],["equations",3]],[[["parameter",4]],["equations",3]],[[["prealpha",3]]],[[["prealpha",3]],["prealpha",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["prealpha",3]],[[],["prealpha",3]],[[]],[[]],[[]],[[["prealpha",3]],["prealpha",3]],[[]],[[["prealpha",3]]],[[]],[[["prealpha",3]]],[[]],[[]],[[]],[[["equations",3]],["bool",15]],[[["parameters",3]],["bool",15]],[[["prealpha",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["prealpha",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["prealpha",3]]],[[]],[[["prealpha",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["prealpha",3],["u32",15]],["bool",15]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[]],[[["transformmatrix",8]]],[[]],[[["transformmatrix",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mat3",6]],[[],["coneresponsematrices",3]],[[],["coneresponsematrices",3]],[[]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[["float",8]],["float",8]],null,[[["float",8]],["float",8]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["gamma",3]],[[],["gammafn",3]],[[],["f2p2",3]],[[]],[[]],[[]],[[["gamma",3]],["bool",15]],[[["gammafn",3]],["bool",15]],[[["f2p2",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["float",8]],["float",8]],[[]],[[]],[[]],[[["float",8]],["float",8]],[[["gamma",3]],["bool",15]],[[["gammafn",3]],["bool",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["linear",3]],[[],["linearfn",3]],[[]],[[]],[[["linear",3]],["bool",15]],[[["linearfn",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["float",8]],["float",8]],[[]],[[]],[[["float",8]],["float",8]],[[["linear",3]],["bool",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["rawpixelsized",8]],[[]],[[]],null,[[]],[[],[["component",8],["yxy",3],["float",8],["whitepoint",8]]],[[]],[[]],[[],["srgb",3]],[[]],[[["srgb",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["float",8]],["float",8]],[[],[["component",8],["yxy",3],["float",8],["whitepoint",8]]],[[]],[[["float",8]],["float",8]],[[],[["component",8],["yxy",3],["float",8],["whitepoint",8]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["gradient",3]],[[],["take",3]],[[],["slice",3]],[[],["range",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[]],[[]],[[["range",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["rangefull",3]],["range",3]],[[["rangeto",3]],["range",3]],[[["rangefrom",3]],["range",3]],[[["range",3]],["range",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["range",3]],["bool",15]],[[["intoiterator",8]],["gradient",3]],[[],["option",4]],[[["range",3]],["bool",15]],[[]],[[["into",8],["range",3]],["slice",3]],[[["into",8],["range",3]],["slice",3]],[[["usize",15]],["take",3]],[[["usize",15]],["take",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["range",3],["u32",15]],["bool",15]],[[["vec",3]],["gradient",3]],null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[]],[[]],[[]],[[["luma",3]]],[[]],[[["luma",3]]],[[]],[[]],[[]],[[]],[[],["luma",3]],[[]],[[],["luma",3]],[[]],[[["luma",3],["fnmut",8]],["luma",3]],[[["fnmut",8]],["luma",3]],[[],["luma",3]],[[]],[[]],[[],["u32",15]],[[]],[[["luma",3]]],[[]],[[["luma",3]]],[[["luma",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["alpha",3],["hsv",3]]],[[["hsv",3]]],[[["alpha",3],["hsl",3]]],[[["hsl",3]]],[[["alpha",3],["luma",3]]],[[["alpha",3],["lch",3]]],[[["hwb",3]]],[[["xyz",3],["alpha",3]]],[[["alpha",3],["yxy",3]]],[[["xyz",3]]],[[["yxy",3]]],[[["hwb",3],["alpha",3]]],[[["alpha",3],["rgb",3]]],[[["lab",3]]],[[["rgb",3]]],[[["alpha",3],["lab",3]]],[[["lch",3]]],[[]],[[["luma",3],["lumastandard",8]],["luma",3]],[[["luma",3],["component",8]]],[[["luma",3],["linear",3]],["luma",3]],[[["luma",3],["linear",3]]],[[["prealpha",3],["luma",3]]],[[["xyz",3]]],[[["yxy",3]]],[[]],[[]],[[]],[[],[["luma",3],["lumastandard",8]]],[[],[["component",8],["luma",3]]],[[],[["luma",3],["linear",3]]],[[],[["linear",3],["luma",3]]],[[],[["prealpha",3],["luma",3]]],[[],["xyz",3]],[[],["yxy",3]],[[],["bool",15]],[[],["luma",3]],null,[[["luma",3]],["luma",3]],[[]],[[["luma",3]]],[[]],[[["luma",3]]],[[["luma",3]],["bool",15]],[[],["luma",3]],[[],["bool",15]],null,[[]],[[["luma",3]]],[[["luma",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["u32",15]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15]],[["option",4],["srgb",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[]],[[]],[[]],[[["rgb",3]]],[[["rgb",3]]],[[]],[[]],[[]],[[],[["component",8],["yxy",3],["float",8],["whitepoint",8]]],null,[[]],[[]],[[],["rgb",3]],[[]],[[],["rgb",3]],[[]],[[["fnmut",8],["rgb",3]],["rgb",3]],[[["fnmut",8]],["rgb",3]],[[],["rgb",3]],[[]],[[]],[[],["u32",15]],[[["rgb",3]]],[[]],[[]],[[["rgb",3]]],[[["rgb",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["hsl",3]]],[[["lab",3]]],[[]],[[["hsv",3]]],[[]],[[["alpha",3],["hsl",3]]],[[["alpha",3],["hsv",3]]],[[["hwb",3]]],[[["hwb",3],["alpha",3]]],[[["yxy",3]]],[[["luma",3]]],[[["alpha",3],["yxy",3]]],[[["alpha",3],["rgb",3]]],[[["alpha",3],["luma",3]]],[[["xyz",3],["alpha",3]]],[[["alpha",3],["lch",3]]],[[["alpha",3],["lab",3]]],[[["xyz",3]]],[[["lch",3]]],[[]],[[["rgb",3],["rgbstandard",8]],["rgb",3]],[[["rgb",3],["component",8]]],[[["hsl",3],["rgbspace",8]]],[[["rgbspace",8],["hsv",3]]],[[["linear",3],["rgb",3]],["rgb",3]],[[["linear",3],["luma",3]]],[[["prealpha",3],["rgb",3]]],[[["linear",3],["rgb",3]]],[[["xyz",3]]],[[],[["option",4],["rgbhue",3]]],[[],[["component",8],["yxy",3],["float",8],["whitepoint",8]]],null,[[]],[[]],[[]],[[],[["rgb",3],["rgbstandard",8]]],[[],[["rgb",3],["component",8]]],[[],[["rgbspace",8],["hsl",3]]],[[],[["rgbspace",8],["hsv",3]]],[[],[["rgbspace",8],["hwb",3]]],[[],["lab",3]],[[],["lch",3]],[[],[["linear",3],["rgb",3]]],[[],[["linear",3],["luma",3]]],[[],[["prealpha",3],["rgb",3]]],[[],[["rgb",3],["linear",3]]],[[],["xyz",3]],[[],["yxy",3]],[[],["bool",15]],[[],["rgb",3]],[[["rgb",3]],["rgb",3]],[[["rgb",3]]],[[]],[[]],[[["rgb",3]]],[[["rgb",3]],["bool",15]],[[],["rgb",3]],[[],[["component",8],["yxy",3],["float",8],["whitepoint",8]]],null,[[],["bool",15]],null,[[]],[[["rgb",3]]],[[]],[[["rgb",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["u32",15]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["a",3]],[[],["b",3]],[[],["c",3]],[[],["d50",3]],[[],["d55",3]],[[],["d65",3]],[[],["d75",3]],[[],["e",3]],[[],["f2",3]],[[],["f7",3]],[[],["f11",3]],[[],["d50degree10",3]],[[],["d55degree10",3]],[[],["d65degree10",3]],[[],["d75degree10",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["a",3]],["bool",15]],[[["b",3]],["bool",15]],[[["c",3]],["bool",15]],[[["d50",3]],["bool",15]],[[["d55",3]],["bool",15]],[[["d65",3]],["bool",15]],[[["d75",3]],["bool",15]],[[["e",3]],["bool",15]],[[["f2",3]],["bool",15]],[[["f7",3]],["bool",15]],[[["f11",3]],["bool",15]],[[["d50degree10",3]],["bool",15]],[[["d55degree10",3]],["bool",15]],[[["d65degree10",3]],["bool",15]],[[["d75degree10",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["xyz",3],["component",8],["float",8],["whitepoint",8]]],[[],[["xyz",3],["component",8],["float",8],["whitepoint",8]]],[[],[["xyz",3],["component",8],["float",8],["whitepoint",8]]],[[],[["xyz",3],["component",8],["float",8],["whitepoint",8]]],[[],[["xyz",3],["component",8],["float",8],["whitepoint",8]]],[[],[["xyz",3],["component",8],["float",8],["whitepoint",8]]],[[],[["xyz",3],["component",8],["float",8],["whitepoint",8]]],[[],[["xyz",3],["component",8],["float",8],["whitepoint",8]]],[[],[["xyz",3],["component",8],["float",8],["whitepoint",8]]],[[],[["xyz",3],["component",8],["float",8],["whitepoint",8]]],[[],[["xyz",3],["component",8],["float",8],["whitepoint",8]]],[[],[["xyz",3],["component",8],["float",8],["whitepoint",8]]],[[],[["xyz",3],["component",8],["float",8],["whitepoint",8]]],[[],[["xyz",3],["component",8],["float",8],["whitepoint",8]]],[[],[["xyz",3],["component",8],["float",8],["whitepoint",8]]],[[],[["xyz",3],["component",8],["float",8],["whitepoint",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[8,"Blend"],[8,"GetHue"],[8,"Component"],[8,"Mix"],[8,"Shade"],[8,"Saturate"],[8,"ComponentWise"],[3,"Lab"],[3,"Alpha"],[3,"Xyz"],[3,"Yxy"],[3,"LabHue"],[3,"RgbHue"],[3,"Lch"],[3,"Hwb"],[3,"Hsv"],[3,"Hsl"],[3,"OutOfBounds"],[8,"Limited"],[8,"ConvertFrom"],[8,"ConvertInto"],[8,"FromColor"],[8,"IntoColor"],[8,"Hue"],[4,"Equation"],[4,"Parameter"],[3,"PreAlpha"],[3,"Equations"],[3,"Parameters"],[8,"BlendFunction"],[4,"Method"],[8,"AdaptFrom"],[8,"AdaptInto"],[3,"ConeResponseMatrices"],[8,"TransformMatrix"],[8,"TransferFn"],[8,"Number"],[3,"Gamma"],[3,"GammaFn"],[3,"F2p2"],[3,"Linear"],[3,"LinearFn"],[8,"RawPixelSized"],[8,"Pixel"],[8,"RawPixel"],[3,"Srgb"],[8,"Float"],[3,"Range"],[3,"Gradient"],[3,"Take"],[3,"Slice"],[8,"LumaStandard"],[3,"Luma"],[8,"RgbSpace"],[8,"RgbStandard"],[3,"Rgb"],[8,"Primaries"],[3,"A"],[3,"B"],[3,"C"],[3,"D50"],[3,"D55"],[3,"D65"],[3,"D75"],[3,"E"],[3,"F2"],[3,"F7"],[3,"F11"],[3,"D50Degree10"],[3,"D55Degree10"],[3,"D65Degree10"],[3,"D75Degree10"],[8,"WhitePoint"]]},\
"palette_derive":{"doc":"Derives traits from the palette crate.","t":[24,24,24],"n":["FromColor","IntoColor","Pixel"],"q":["palette_derive","",""],"d":["","",""],"i":[0,0,0],"f":[null,null,null],"p":[]},\
"paste":{"doc":"github crates-io docs-rs","t":[14],"n":["paste"],"q":["paste"],"d":[""],"i":[0],"f":[null],"p":[]},\
"pest":{"doc":"pest. The Elegant Parser","t":[13,4,13,13,13,3,4,4,13,13,13,6,8,3,3,13,8,3,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,14,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,13,3,4,4,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Atomic","Atomicity","BottomToTop","CompoundAtomic","End","Lines","Lookahead","MatchDir","Negative","NonAtomic","None","ParseResult","Parser","ParserState","Position","Positive","RuleType","Span","Start","Token","TopToBottom","as_str","atomic","atomicity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","end","end_of_input","end_pos","eq","eq","eq","eq","eq","eq","error","fails_with","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_start","hash","hash","hash","into","into","into","into","into","into","into","into","into_iter","iterators","line_col","line_of","lines","lookahead","match_char_by","match_insensitive","match_range","match_string","ne","new","new","new","next","optional","parse","parses_to","partial_cmp","pos","position","prec_climber","repeat","restore_on_err","rule","sequence","skip","skip_until","span","split","stack_drop","stack_match_peek","stack_match_peek_slice","stack_match_pop","stack_peek","stack_pop","stack_push","start","start_of_input","start_pos","state","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","pos","pos","rule","rule","CustomError","Error","ErrorVariant","InputLocation","LineColLocation","ParsingError","Pos","Pos","Span","Span","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","description","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","hash","hash","into","into","into","into","line_col","location","ne","ne","ne","ne","new_from_pos","new_from_span","renamed_rules","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","variant","with_path","message","negatives","positives","FlatPairs","Pair","Pairs","Tokens","as_rule","as_span","as_str","as_str","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","concat","eq","eq","flatten","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","into","into","into","into","into_inner","into_iter","into_iter","into_iter","into_span","next","next","next","next_back","next_back","next_back","peek","single","to_owned","to_owned","to_owned","to_owned","to_string","to_string","tokens","tokens","tokens","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Assoc","Left","Operator","PrecClimber","Right","bitor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","climb","clone","clone_into","eq","fmt","fmt","fmt","from","from","from","into","into","into","new","new","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["pest","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pest::Token","","","","pest::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pest::error::ErrorVariant","","","pest::iterators","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pest::prec_climber","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","The current atomicity of a <code>ParserState</code>.","","","The ending <code>Position</code> of a matched <code>Rule</code>","Line iterator for Spans, created by <code>Span::lines()</code>.","The current lookahead status of a <code>ParserState</code>.","Match direction for the stack. Used in <code>PEEK[a..b]</code>/…","","","","Type alias to simplify specifying the return value of …","A trait with a single method that parses strings.","The complete state of a <code>Parser</code>.","A cursor position in a <code>&str</code> which provides useful methods …","","A trait which parser rules must implement.","A span over a <code>&str</code>. It is created from either two <code>Position</code>…","The starting <code>Position</code> of a matched <code>Rule</code>","A token generated by a <code>Parser</code>.","","Captures a slice from the <code>&str</code> defined by the <code>Span</code>.","Transformation which stops <code>Token</code>s from being generated …","Returns the current atomicity of the <code>ParserState</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>Span</code>’s end byte position as a <code>usize</code>.","Attempts to match the end of the input. Returns <code>Ok</code> with …","Returns the <code>Span</code>’s end <code>Position</code>.","","","","","","","Types for different kinds of parsing failures.","Testing tool that compares produced errors.","","","","","","","","","","","","","","","","Creates a <code>Position</code> at the start of a <code>&str</code>.","","","","","","","","","","","","","Types and iterators for parser output.","Returns the line and column number of this <code>Position</code>.","Returns the entire line of the input that contains this …","Iterates over all lines (partially) covered by this span.","Starts a lookahead transformation provided by <code>f</code> from the …","Attempts to match a single character based on a filter …","Attempts to case-insensitively match the given string. …","Attempts to match a single character from the given …","Attempts to match the given string. Returns <code>Ok</code> with the …","","Allocates a fresh <code>ParserState</code> object to the heap and …","Attempts to create a new <code>Position</code> at the given position. …","Attempts to create a new span. Will return <code>None</code> if …","","Optionally applies the transformation provided by <code>f</code> from …","Parses a <code>&str</code> starting from <code>rule</code>.","Testing tool that compares produced tokens.","","Returns the byte position of this <code>Position</code> as a <code>usize</code>.","Returns a reference to the current <code>Position</code> of the …","Constructs useful in infix operator parsing with the …","Repeatedly applies the transformation provided by <code>f</code> from …","Restores the original state of the <code>ParserState</code> when <code>f</code> …","Wrapper needed to generate tokens. This will associate …","Starts a sequence of transformations provided by <code>f</code> from …","Attempts to skip <code>n</code> characters forward. Returns <code>Ok</code> with …","Attempts to skip forward until one of the given strings …","Creates a <code>Span</code> from two <code>Position</code>s.","Splits the <code>Span</code> into a pair of <code>Position</code>s.","Drops the top of the stack. Returns <code>Ok(Box<ParserState>)</code> …","Matches the full state of the stack.","Matches part of the state of the stack.","Matches the full state of the stack. This method will …","Peeks the top of the stack and attempts to match the …","Pops the top of the stack and attempts to match the …","Evaluates the result of closure <code>f</code> and pushes the span of …","Returns the <code>Span</code>’s start byte position as a <code>usize</code>.","Attempts to match the start of the input. Returns <code>Ok</code> with …","Returns the <code>Span</code>’s start <code>Position</code>.","Creates a <code>ParserState</code> from a <code>&str</code>, supplying it to a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Custom error with a message","Parse-related error type.","Different kinds of parsing errors.","Where an <code>Error</code> has occurred.","Line/column where an <code>Error</code> has occurred.","Generated parsing error with expected and unexpected <code>Rule</code>s","<code>Error</code> was created by <code>Error::new_from_pos</code>","Line/column pair if <code>Error</code> was created by …","<code>Error</code> was created by <code>Error::new_from_span</code>","Line/column pairs if <code>Error</code> was created by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Line/column within the input string","Location within the input string","","","","","Creates <code>Error</code> from <code>ErrorVariant</code> and <code>Position</code>.","Creates <code>Error</code> from <code>ErrorVariant</code> and <code>Span</code>.","Renames all <code>Rule</code>s if this is a <code>ParsingError</code>. It does …","","","","","","","","","","","","","","","","","","Variant of the error","Returns <code>Error</code> variant with <code>path</code> which is shown when …","Short explanation","Negative attempts","Positive attempts","An iterator over <code>Pair</code>s. It is created by <code>Pairs::flatten</code>.","A matching pair of <code>Token</code>s and everything between them.","An iterator over <code>Pair</code>s. It is created by <code>pest::state</code> and …","An iterator over <code>Token</code>s. It is created by <code>Pair::tokens</code> …","Returns the <code>Rule</code> of the <code>Pair</code>.","Returns the <code>Span</code> defined by the <code>Pair</code>, <strong>without</strong> consuming …","Captures a slice from the <code>&str</code> defined by the token <code>Pair</code>.","Captures a slice from the <code>&str</code> defined by the starting …","","","","","","","","","","","","","","","","","Captures inner token <code>Pair</code>s and concatenates resulting <code>&str</code>…","","","Flattens the <code>Pairs</code>.","","","","","","","","","","","","","","","","","Returns the inner <code>Pairs</code> between the <code>Pair</code>, consuming it.","","","","Returns the <code>Span</code> defined by the <code>Pair</code>, consuming it.","","","","","","","Peek at the first inner <code>Pair</code> without changing the …","Create a new <code>Pairs</code> iterator containing just the single …","","","","","","","Returns the <code>Tokens</code> for these pairs.","Returns the <code>Tokens</code> for the <code>Pair</code>.","Returns the <code>Tokens</code> for the <code>Pairs</code>.","","","","","","","","","","","","","Associativity of an <code>Operator</code>.","Left <code>Operator</code> associativity","Infix operator used in <code>PrecClimber</code>.","List of operators and precedences, which can perform …","Right <code>Operator</code> associativity","","","","","","","","Performs the precedence climbing algorithm on the <code>pairs</code> …","","","","","","","","","","","","","Creates a new <code>Operator</code> from a <code>Rule</code> and <code>Assoc</code>.","Creates a new <code>PrecClimber</code> from the <code>Operator</code>s contained in …","","","","","","","","","",""],"i":[1,0,2,1,3,0,0,0,4,1,4,0,0,0,0,4,0,0,3,0,2,5,6,6,7,4,1,2,6,8,5,3,7,4,1,2,6,8,5,3,4,1,2,8,5,3,4,1,2,8,5,3,8,5,6,5,4,1,2,8,5,3,0,0,4,1,2,6,8,5,3,7,4,1,2,6,8,5,3,8,8,5,3,7,4,1,2,6,8,5,3,7,0,8,8,5,6,6,6,6,6,3,6,8,5,7,6,9,0,8,8,6,0,6,6,6,6,6,6,8,5,6,6,6,6,6,6,6,5,6,5,0,4,1,2,8,5,3,7,4,1,2,6,8,5,3,7,4,1,2,6,8,5,3,7,4,1,2,6,8,5,3,10,11,10,11,12,0,0,0,0,12,13,14,13,14,15,12,13,14,15,12,13,14,15,12,13,14,15,12,13,14,15,15,12,13,14,15,15,12,13,14,15,12,13,14,15,12,13,14,15,12,13,14,15,15,15,12,13,14,15,15,15,15,12,13,14,15,15,12,13,14,15,12,13,14,15,12,13,14,15,15,16,17,17,0,0,0,0,18,18,18,19,20,18,19,21,20,18,19,21,20,18,19,21,20,18,19,21,19,18,19,19,20,18,18,19,19,21,20,18,19,21,18,19,20,18,19,21,18,20,19,21,18,20,19,21,20,19,21,19,19,20,18,19,21,18,19,20,18,19,20,18,19,21,20,18,19,21,20,18,19,21,0,22,0,0,22,23,22,23,24,22,23,24,24,22,22,22,22,23,24,22,23,24,22,23,24,23,24,22,22,23,24,22,23,24,22,23,24],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],[[["box",3],["atomicity",4]],[["box",3],["parseresult",6]]],[[],["atomicity",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["lookahead",4]],[[],["atomicity",4]],[[],["matchdir",4]],[[],["position",3]],[[],["span",3]],[[],["token",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["position",3]],["ordering",4]],[[],["usize",15]],[[["box",3]],[["box",3],["parseresult",6]]],[[],["position",3]],[[["lookahead",4]],["bool",15]],[[["atomicity",4]],["bool",15]],[[["matchdir",4]],["bool",15]],[[["position",3]],["bool",15]],[[["span",3]],["bool",15]],[[["token",4]],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["position",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[],["str",15]],[[],["lines",3]],[[["box",3],["bool",15]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3],["str",15]],[["box",3],["parseresult",6]]],[[["range",3],["box",3],["char",15]],[["box",3],["parseresult",6]]],[[["box",3],["str",15]],[["box",3],["parseresult",6]]],[[["token",4]],["bool",15]],[[["str",15]],["box",3]],[[["usize",15],["str",15]],[["option",4],["position",3]]],[[["usize",15],["str",15]],[["span",3],["option",4]]],[[],[["option",4],["str",15]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["str",15]],[["result",4],["error",3],["pairs",3]]],null,[[["position",3]],[["option",4],["ordering",4]]],[[],["usize",15]],[[],["position",3]],null,[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3],["usize",15]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["position",3]],["span",3]],[[]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["matchdir",4],["option",4],["box",3],["i32",15]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[],["usize",15]],[[["box",3]],[["box",3],["parseresult",6]]],[[],["position",3]],[[["str",15]],[["pairs",3],["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["error",3]],[[],["errorvariant",4]],[[],["inputlocation",4]],[[],["linecollocation",4]],[[]],[[]],[[]],[[]],[[],["str",15]],[[["error",3]],["bool",15]],[[["errorvariant",4]],["bool",15]],[[["inputlocation",4]],["bool",15]],[[["linecollocation",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["error",3]],["bool",15]],[[["errorvariant",4]],["bool",15]],[[["inputlocation",4]],["bool",15]],[[["linecollocation",4]],["bool",15]],[[["errorvariant",4],["position",3]],["error",3]],[[["errorvariant",4],["span",3]],["error",3]],[[],["error",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["str",15]],["error",3]],null,null,null,null,null,null,null,[[]],[[],["span",3]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["flatpairs",3]],[[],["pair",3]],[[],["pairs",3]],[[],["tokens",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[["pair",3]],["bool",15]],[[["pairs",3]],["bool",15]],[[],["flatpairs",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["pairs",3]],[[]],[[]],[[]],[[],["span",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],[["option",4],["pair",3]]],[[["pair",3]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["tokens",3]],[[],["tokens",3]],[[],["tokens",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["assoc",4]],[[]],[[["assoc",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["assoc",4]],["operator",3]],[[["vec",3],["operator",3]],["precclimber",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Atomicity"],[4,"MatchDir"],[4,"Token"],[4,"Lookahead"],[3,"Span"],[3,"ParserState"],[3,"Lines"],[3,"Position"],[8,"Parser"],[13,"Start"],[13,"End"],[4,"ErrorVariant"],[4,"InputLocation"],[4,"LineColLocation"],[3,"Error"],[13,"CustomError"],[13,"ParsingError"],[3,"Pair"],[3,"Pairs"],[3,"FlatPairs"],[3,"Tokens"],[4,"Assoc"],[3,"Operator"],[3,"PrecClimber"]]},\
"pest_derive":{"doc":"pest. The Elegant Parser","t":[24],"n":["Parser"],"q":["pest_derive"],"d":[""],"i":[0],"f":[null],"p":[]},\
"pest_generator":{"doc":"","t":[5],"n":["derive_parser"],"q":["pest_generator"],"d":[""],"i":[0],"f":[[[["bool",15],["tokenstream",3]],["tokenstream",3]]],"p":[]},\
"pest_meta":{"doc":"","t":[0,0,0,5,0,13,13,13,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,13,13,13,13,13,4,3,3,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,5,11,11,11,11,11,11,11,11,12,11,11,11,13,13,13,13,13,13,13,4,3,3,13,3,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,13,13,11,11,11,11,11,11,11,11,13,13,13,11,13,13,13,5,11,11,11,11,13,12,13,11,11,11,11,11,11,11,11,11,11,13,13,11,13,13,13,13,13,13,13,11,11,11,11,11,13,12,11,11,11,13,13,12,13,13,13,13,13,13,13,5,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,13,5,5,5,5,5,5],"n":["ast","optimizer","parser","unwrap_or_report","validator","Atomic","Choice","CompoundAtomic","Expr","ExprTopDownIterator","Ident","Insens","NegPred","NonAtomic","Normal","Opt","PeekSlice","PosPred","Push","Range","Rep","RepExact","RepMax","RepMin","RepMinMax","RepOnce","Rule","RuleType","Seq","Silent","Skip","Str","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","expr","fmt","fmt","fmt","from","from","from","from","into","into","into","into","into_iter","iter_top_down","map_bottom_up","map_top_down","name","ne","ne","new","next","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","Choice","Ident","Insens","NegPred","Opt","OptimizedExpr","OptimizedExprTopDownIterator","OptimizedRule","PeekSlice","PosPred","Push","Range","Rep","RestoreOnErr","Seq","Skip","Str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","expr","fmt","fmt","from","from","from","into","into","into","into_iter","iter_top_down","map_bottom_up","map_top_down","name","ne","ne","new","next","optimize","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","ty","type_id","type_id","type_id","COMMENT","Choice","EOI","Ident","Insens","NegPred","Opt","ParserExpr","ParserNode","ParserRule","PeekSlice","PestParser","PosPred","Push","Range","Rep","RepExact","RepMax","RepMin","RepMinMax","RepOnce","Rule","Seq","Str","WHITESPACE","_push","alpha","alpha_num","assignment_operator","atomic_modifier","block_comment","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","character","choice_operator","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","closing_brace","closing_brack","closing_paren","cmp","code","comma","compound_atomic_modifier","consume_rules","eq","eq","eq","eq","escape","expr","expression","filter_map_top_down","fmt","fmt","fmt","fmt","from","from","from","from","from","grammar_rule","grammar_rules","hash","hex_digit","identifier","infix_operator","inner_chr","inner_str","insensitive_string","integer","into","into","into","into","into","modifier","name","ne","ne","ne","negative_predicate_operator","newline","node","node","non_atomic_modifier","number","opening_brace","opening_brack","opening_paren","optional_operator","parse","parse","partial_cmp","peek_slice","positive_predicate_operator","postfix_operator","prefix_operator","quote","range","range_operator","repeat_exact","repeat_max","repeat_min","repeat_min_max","repeat_once_operator","repeat_operator","sequence_operator","silent_modifier","single_quote","span","span","string","term","terminal","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","unicode","validate_already_defined","validate_ast","validate_pairs","validate_pest_keywords","validate_rust_keywords","validate_undefined"],"q":["pest_meta","","","","","pest_meta::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pest_meta::optimizer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pest_meta::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pest_meta::validator","","","","",""],"d":["","","","","","","Matches either of two expressions, e.g. <code>e1 | e2</code>","","","","Matches the rule with the given name, e.g. <code>a</code>","Matches an exact string, case insensitively (ASCII only), …","Negative lookahead; matches if expression doesn’t …","","","Optionally matches an expression, e.g. <code>e?</code>","Matches a custom part of the stack, e.g. <code>PEEK[..]</code>","Positive lookahead; matches expression without making …","Matches an expression and pushes it to the stack, e.g. …","Matches one character in the range, e.g. <code>\'a\'..\'z\'</code>","Matches an expression zero or more times, e.g. <code>e*</code>","Matches an expression an exact number of times, e.g. <code>e{n}</code>","Matches an expression at most a number of times, e.g. …","Matches an expression at least a number of times, e.g. …","Matches an expression a number of times within a range, …","Matches an expression one or more times, e.g. <code>e+</code>","","","Matches a sequence of two expressions, e.g. <code>e1 ~ e2</code>","","Continues to match expressions until one of the strings …","Matches an exact string, e.g. <code>\\\"a\\\"</codei":[0,0,0,0,0,1,2,1,0,0,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,0,0,2,1,2,2,3,4,1,2,3,4,1,2,4,1,2,4,1,2,4,1,2,4,4,1,2,3,4,1,2,3,4,1,2,3,2,2,2,4,4,2,3,3,4,1,2,3,4,1,2,3,4,1,2,4,3,4,1,2,5,5,5,5,5,0,0,0,5,5,5,5,5,5,5,5,5,6,7,5,6,7,5,7,5,7,5,7,5,7,7,5,6,7,5,6,7,5,6,5,5,5,7,7,5,6,6,0,7,5,6,7,5,6,7,5,7,6,7,5,8,9,8,9,9,9,9,0,0,0,9,0,9,9,9,9,9,9,9,9,9,0,9,9,8,8,8,8,8,8,8,10,8,11,12,9,10,8,11,12,9,8,8,8,11,12,9,8,11,12,9,8,8,8,8,8,8,8,0,8,11,12,9,8,12,8,12,8,11,12,9,10,8,11,12,9,8,8,8,8,8,8,8,8,8,8,10,8,11,12,9,8,11,11,12,9,8,8,11,8,8,8,8,8,8,8,0,10,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,11,12,8,8,8,8,11,12,9,10,8,11,12,9,10,8,11,12,9,11,10,8,11,12,9,8,0,0,0,0,0,0],"f":[null,null,null,[[["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rule",3]],[[],["ruletype",4]],[[],["expr",4]],[[]],[[]],[[]],[[["rule",3]],["bool",15]],[[["ruletype",4]],["bool",15]],[[["expr",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["exprtopdowniterator",3]],[[],["expr",4]],[[],["expr",4]],null,[[["rule",3]],["bool",15]],[[["expr",4]],["bool",15]],[[["expr",4]]],[[],["option",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["optimizedrule",3]],[[],["optimizedexpr",4]],[[]],[[]],[[["optimizedrule",3]],["bool",15]],[[["optimizedexpr",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["optimizedexprtopdowniterator",3]],[[],["optimizedexpr",4]],[[],["optimizedexpr",4]],null,[[["optimizedrule",3]],["bool",15]],[[["optimizedexpr",4]],["bool",15]],[[["optimizedexpr",4]]],[[],["option",4]],[[["vec",3],["rule",3]],[["optimizedrule",3],["vec",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["rule",4]],[[],["parserrule",3]],[[],["parsernode",3]],[[],["parserexpr",4]],[[]],[[]],[[]],[[]],null,null,null,[[["rule",4]],["ordering",4]],null,null,null,[[["pairs",3],["rule",4]],[["result",4],["vec",3],["vec",3]]],[[["rule",4]],["bool",15]],[[["parserrule",3]],["bool",15]],[[["parsernode",3]],["bool",15]],[[["parserexpr",4]],["bool",15]],null,null,null,[[],["vec",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,[[["parserrule",3]],["bool",15]],[[["parsernode",3]],["bool",15]],[[["parserexpr",4]],["bool",15]],null,null,null,null,null,null,null,null,null,null,[[["rule",4],["str",15]],[["result",4],["pairs",3],["error",3]]],[[["str",15],["rule",4]],[["pairs",3],["error",3],["result",4]]],[[["rule",4]],[["ordering",4],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["vec",3]],[["error",3],["vec",3]]],[[["vec",3]],[["error",3],["vec",3]]],[[["rule",4],["pairs",3]],[["result",4],["vec",3],["vec",3]]],[[["hashset",3],["vec",3]],[["error",3],["vec",3]]],[[["hashset",3],["vec",3]],[["error",3],["vec",3]]],[[["hashset",3],["vec",3]],[["error",3],["vec",3]]]],"p":[[4,"RuleType"],[4,"Expr"],[3,"ExprTopDownIterator"],[3,"Rule"],[4,"OptimizedExpr"],[3,"OptimizedExprTopDownIterator"],[3,"OptimizedRule"],[4,"Rule"],[4,"ParserExpr"],[3,"PestParser"],[3,"ParserRule"],[3,"ParserNode"]]},\
"phf":{"doc":"Compile-time generated maps and sets.","t":[3,8,3,11,11,11,11,11,11,11,11,11,11,11,0,10,11,0,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Map","PhfHash","Set","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","index","into","into","map","phf_hash","phf_hash_slice","set","try_from","try_from","try_into","try_into","type_id","type_id","Entries","Keys","Map","Values","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","contains_key","entries","from","from","from","get","get_entry","get_key","into","into","into","into_iter","into_iter","into_iter","is_empty","keys","len","next","next","next","next_back","next_back","next_back","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","values","Iter","Set","borrow","borrow_mut","contains","from","get_key","into","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","len","next","next_back","size_hint","try_from","try_into","type_id"],"q":["phf","","","","","","","","","","","","","","","","","","","","","","","","phf::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","phf::set","","","","","","","","","","","","","","","","","","","",""],"d":["An immutable map constructed at compile time.","A trait implemented by types which can be used in PHF …","An immutable set constructed at compile time.","","","","","","","","","","","","An immutable map constructed at compile time.","Feeds the value into the state given, updating the hasher …","Feeds a slice of this type into the state provided.","An immutable set constructed at compile time.","","","","","","","An iterator over the key/value pairs in a <code>Map</code>.","An iterator over the keys in a <code>Map</code>.","An immutable map constructed at compile time.","An iterator over the values in a <code>Map</code>.","","","","","","","Determines if <code>key</code> is in the <code>Map</code>.","Returns an iterator over the key/value pairs in the map.","","","","Returns a reference to the value that <code>key</code> maps to.","Like <code>get</code>, but returns both the key and the value.","Returns a reference to the map’s internal static …","","","","","","","Returns true if the <code>Map</code> is empty.","Returns an iterator over the keys in the map.","Returns the number of entries in the <code>Map</code>.","","","","","","","","","","","","","","","","","","","Returns an iterator over the values in the map.","An iterator over the values in a <code>Set</code>.","An immutable set constructed at compile time.","","","Returns true if <code>value</code> is in the <code>Set</code>.","","Returns a reference to the set’s internal static …","","","Returns true if <code>other</code> shares no elements with <code>self</code>.","Returns true if the <code>Set</code> contains no elements.","Returns true if <code>other</code> contains all values in <code>self</code>.","Returns true if <code>self</code> contains all values in <code>other</code>.","Returns an iterator over the values in the set.","Returns the number of elements in the <code>Set</code>.","","","","","",""],"i":[0,0,0,1,2,1,2,1,2,1,2,1,1,2,0,3,3,0,1,2,1,2,1,2,0,0,0,0,4,5,6,4,5,6,1,1,4,5,6,1,1,1,4,5,6,4,5,6,1,1,1,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,1,0,0,7,7,2,7,2,7,7,2,2,2,2,2,2,7,7,7,7,7,7],"f":[null,null,null,[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["entries",3]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["keys",3]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["values",3]],null,null,[[]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[]],[[["set",3]],["bool",15]],[[],["bool",15]],[[["set",3]],["bool",15]],[[["set",3]],["bool",15]],[[],["iter",3]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Map"],[3,"Set"],[8,"PhfHash"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"Iter"]]},\
"phf_shared":{"doc":"","t":[8,6,3,8,11,11,5,12,12,10,11,12,5,5,11,10,11,11,11,11],"n":["FmtConst","HashKey","Hashes","PhfHash","borrow","borrow_mut","displace","f1","f2","fmt_const","from","g","get_index","hash","into","phf_hash","phf_hash_slice","try_from","try_into","type_id"],"q":["phf_shared","","","","","","","","","","","","","","","","","","",""],"d":["Trait for printing types with <code>const</code> constructors, used by …","A central typedef for hash keys","","A trait implemented by types which can be used in PHF …","","","","","","Print a <code>const</code> expression representing this value.","","","Return an index into <code>phf_generator::HashState::map</code>.","<code>key</code> is from <code>phf_generator::HashState</code>.","","Feeds the value into the state given, updating the hasher …","Feeds a slice of this type into the state provided.","","",""],"i":[0,0,0,0,1,1,0,1,1,2,1,1,0,0,1,3,3,1,1,1],"f":[null,null,null,null,[[]],[[]],[[["u32",15]],["u32",15]],null,null,[[["formatter",3]],["result",6]],[[]],null,[[["usize",15],["hashes",3]],["u32",15]],[[["hashkey",6]],["hashes",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Hashes"],[8,"FmtConst"],[8,"PhfHash"]]},\
"physical_constants":{"doc":"Provides access to the CODATA recommended values for …","tn":["ALPHA_PARTICLE_ELECTRON_MASS_RATIO","ALPHA_PARTICLE_MASS","ALPHA_PARTICLE_MASS_ENERGY_EQUIVALENT","ALPHA_PARTICLE_MASS_ENERGY_EQUIVALENT_IN_MEV","ALPHA_PARTICLE_MASS_IN_U","ALPHA_PARTICLE_MOLAR_MASS","ALPHA_PARTICLE_PROTON_MASS_RATIO","ANGSTROM_STAR","ATOMIC_MASS_CONSTANT","ATOMIC_MASS_CONSTANT_ENERGY_EQUIVALENT","ATOMIC_MASS_CONSTANT_ENERGY_EQUIVALENT_IN_MEV","ATOMIC_MASS_UNIT_ELECTRON_VOLT_RELATIONSHIP","ATOMIC_MASS_UNIT_HARTREE_RELATIONSHIP","ATOMIC_MASS_UNIT_HERTZ_RELATIONSHIP","ATOMIC_MASS_UNIT_INVERSE_METER_RELATIONSHIP","ATOMIC_MASS_UNIT_JOULE_RELATIONSHIP","ATOMIC_MASS_UNIT_KELVIN_RELATIONSHIP","ATOMIC_MASS_UNIT_KILOGRAM_RELATIONSHIP","ATOMIC_UNIT_OF_1ST_HYPERPOLARIZABILITY","ATOMIC_UNIT_OF_2ND_HYPERPOLARIZABILITY","ATOMIC_UNIT_OF_ACTION","ATOMIC_UNIT_OF_CHARGE","ATOMIC_UNIT_OF_CHARGE_DENSITY","ATOMIC_UNIT_OF_CURRENT","ATOMIC_UNIT_OF_ELECTRIC_DIPOLE_MOM","ATOMIC_UNIT_OF_ELECTRIC_FIELD","ATOMIC_UNIT_OF_ELECTRIC_FIELD_GRADIENT","ATOMIC_UNIT_OF_ELECTRIC_POLARIZABILITY","ATOMIC_UNIT_OF_ELECTRIC_POTENTIAL","ATOMIC_UNIT_OF_ELECTRIC_QUADRUPOLE_MOM","ATOMIC_UNIT_OF_ENERGY","ATOMIC_UNIT_OF_FORCE","ATOMIC_UNIT_OF_LENGTH","ATOMIC_UNIT_OF_MAGNETIZABILITY","ATOMIC_UNIT_OF_MAG_DIPOLE_MOM","ATOMIC_UNIT_OF_MAG_FLUX_DENSITY","ATOMIC_UNIT_OF_MASS","ATOMIC_UNIT_OF_MOMENTUM","ATOMIC_UNIT_OF_PERMITTIVITY","ATOMIC_UNIT_OF_TIME","ATOMIC_UNIT_OF_VELOCITY","AVOGADRO_CONSTANT","BOHR_MAGNETON","BOHR_MAGNETON_IN_EV_PER_T","BOHR_MAGNETON_IN_HZ_PER_T","BOHR_MAGNETON_IN_INVERSE_METERS_PER_TESLA","BOHR_MAGNETON_IN_K_PER_T","BOHR_RADIUS","BOLTZMANN_CONSTANT","BOLTZMANN_CONSTANT_IN_EV_PER_K","BOLTZMANN_CONSTANT_IN_HZ_PER_K","BOLTZMANN_CONSTANT_IN_INVERSE_METERS_PER_KELVIN","CHARACTERISTIC_IMPEDANCE_OF_VACUUM","CLASSICAL_ELECTRON_RADIUS","COMPTON_WAVELENGTH","COMPTON_WAVELENGTH_OVER_2_PI","CONDUCTANCE_QUANTUM","CONVENTIONAL_VALUE_OF_JOSEPHSON_CONSTANT","CONVENTIONAL_VALUE_OF_VON_KLITZING_CONSTANT","CU_X_UNIT","DEUTERON_ELECTRON_MAG_MOM_RATIO","DEUTERON_ELECTRON_MASS_RATIO","DEUTERON_G_FACTOR","DEUTERON_MAG_MOM","DEUTERON_MAG_MOM_TO_BOHR_MAGNETON_RATIO","DEUTERON_MAG_MOM_TO_NUCLEAR_MAGNETON_RATIO","DEUTERON_MASS","DEUTERON_MASS_ENERGY_EQUIVALENT","DEUTERON_MASS_ENERGY_EQUIVALENT_IN_MEV","DEUTERON_MASS_IN_U","DEUTERON_MOLAR_MASS","DEUTERON_NEUTRON_MAG_MOM_RATIO","DEUTERON_PROTON_MAG_MOM_RATIO","DEUTERON_PROTON_MASS_RATIO","DEUTERON_RMS_CHARGE_RADIUS","ELECTRIC_CONSTANT","ELECTRON_CHARGE_TO_MASS_QUOTIENT","ELECTRON_DEUTERON_MAG_MOM_RATIO","ELECTRON_DEUTERON_MASS_RATIO","ELECTRON_GYROMAG_RATIO","ELECTRON_GYROMAG_RATIO_OVER_2_PI","ELECTRON_G_FACTOR","ELECTRON_HELION_MASS_RATIO","ELECTRON_MAG_MOM","ELECTRON_MAG_MOM_ANOMALY","ELECTRON_MAG_MOM_TO_BOHR_MAGNETON_RATIO","ELECTRON_MAG_MOM_TO_NUCLEAR_MAGNETON_RATIO","ELECTRON_MASS","ELECTRON_MASS_ENERGY_EQUIVALENT","ELECTRON_MASS_ENERGY_EQUIVALENT_IN_MEV","ELECTRON_MASS_IN_U","ELECTRON_MOLAR_MASS","ELECTRON_MUON_MAG_MOM_RATIO","ELECTRON_MUON_MASS_RATIO","ELECTRON_NEUTRON_MAG_MOM_RATIO","ELECTRON_NEUTRON_MASS_RATIO","ELECTRON_PROTON_MAG_MOM_RATIO","ELECTRON_PROTON_MASS_RATIO","ELECTRON_TAU_MASS_RATIO","ELECTRON_TO_ALPHA_PARTICLE_MASS_RATIO","ELECTRON_TO_SHIELDED_HELION_MAG_MOM_RATIO","ELECTRON_TO_SHIELDED_PROTON_MAG_MOM_RATIO","ELECTRON_TRITON_MASS_RATIO","ELECTRON_VOLT","ELECTRON_VOLT_ATOMIC_MASS_UNIT_RELATIONSHIP","ELECTRON_VOLT_HARTREE_RELATIONSHIP","ELECTRON_VOLT_HERTZ_RELATIONSHIP","ELECTRON_VOLT_INVERSE_METER_RELATIONSHIP","ELECTRON_VOLT_JOULE_RELATIONSHIP","ELECTRON_VOLT_KELVIN_RELATIONSHIP","ELECTRON_VOLT_KILOGRAM_RELATIONSHIP","ELEMENTARY_CHARGE","ELEMENTARY_CHARGE_OVER_H","FARADAY_CONSTANT","FARADAY_CONSTANT_FOR_CONVENTIONAL_ELECTRIC_CURRENT","FERMI_COUPLING_CONSTANT","FINE_STRUCTURE_CONSTANT","FIRST_RADIATION_CONSTANT","FIRST_RADIATION_CONSTANT_FOR_SPECTRAL_RADIANCE","HARTREE_ATOMIC_MASS_UNIT_RELATIONSHIP","HARTREE_ELECTRON_VOLT_RELATIONSHIP","HARTREE_ENERGY","HARTREE_ENERGY_IN_EV","HARTREE_HERTZ_RELATIONSHIP","HARTREE_INVERSE_METER_RELATIONSHIP","HARTREE_JOULE_RELATIONSHIP","HARTREE_KELVIN_RELATIONSHIP","HARTREE_KILOGRAM_RELATIONSHIP","HELION_ELECTRON_MASS_RATIO","HELION_G_FACTOR","HELION_MAG_MOM","HELION_MAG_MOM_TO_BOHR_MAGNETON_RATIO","HELION_MAG_MOM_TO_NUCLEAR_MAGNETON_RATIO","HELION_MASS","HELION_MASS_ENERGY_EQUIVALENT","HELION_MASS_ENERGY_EQUIVALENT_IN_MEV","HELION_MASS_IN_U","HELION_MOLAR_MASS","HELION_PROTON_MASS_RATIO","HERTZ_ATOMIC_MASS_UNIT_RELATIONSHIP","HERTZ_ELECTRON_VOLT_RELATIONSHIP","HERTZ_HARTREE_RELATIONSHIP","HERTZ_INVERSE_METER_RELATIONSHIP","HERTZ_JOULE_RELATIONSHIP","HERTZ_KELVIN_RELATIONSHIP","HERTZ_KILOGRAM_RELATIONSHIP","INVERSE_FINE_STRUCTURE_CONSTANT","INVERSE_METER_ATOMIC_MASS_UNIT_RELATIONSHIP","INVERSE_METER_ELECTRON_VOLT_RELATIONSHIP","INVERSE_METER_HARTREE_RELATIONSHIP","INVERSE_METER_HERTZ_RELATIONSHIP","INVERSE_METER_JOULE_RELATIONSHIP","INVERSE_METER_KELVIN_RELATIONSHIP","INVERSE_METER_KILOGRAM_RELATIONSHIP","INVERSE_OF_CONDUCTANCE_QUANTUM","JOSEPHSON_CONSTANT","JOULE_ATOMIC_MASS_UNIT_RELATIONSHIP","JOULE_ELECTRON_VOLT_RELATIONSHIP","JOULE_HARTREE_RELATIONSHIP","JOULE_HERTZ_RELATIONSHIP","JOULE_INVERSE_METER_RELATIONSHIP","JOULE_KELVIN_RELATIONSHIP","JOULE_KILOGRAM_RELATIONSHIP","KELVIN_ATOMIC_MASS_UNIT_RELATIONSHIP","KELVIN_ELECTRON_VOLT_RELATIONSHIP","KELVIN_HARTREE_RELATIONSHIP","KELVIN_HERTZ_RELATIONSHIP","KELVIN_INVERSE_METER_RELATIONSHIP","KELVIN_JOULE_RELATIONSHIP","KELVIN_KILOGRAM_RELATIONSHIP","KILOGRAM_ATOMIC_MASS_UNIT_RELATIONSHIP","KILOGRAM_ELECTRON_VOLT_RELATIONSHIP","KILOGRAM_HARTREE_RELATIONSHIP","KILOGRAM_HERTZ_RELATIONSHIP","KILOGRAM_INVERSE_METER_RELATIONSHIP","KILOGRAM_JOULE_RELATIONSHIP","KILOGRAM_KELVIN_RELATIONSHIP","LATTICE_PARAMETER_OF_SILICON","LATTICE_SPACING_220_OF_SILICON","LOSCHMIDT_CONSTANT_27315_K_100_KPA","LOSCHMIDT_CONSTANT_27315_K_101325_KPA","MAG_CONSTANT","MAG_FLUX_QUANTUM","MOLAR_GAS_CONSTANT","MOLAR_MASS_CONSTANT","MOLAR_MASS_OF_CARBON_12","MOLAR_PLANCK_CONSTANT","MOLAR_PLANCK_CONSTANT_TIMES_C","MOLAR_VOLUME_OF_IDEAL_GAS_27315_K_100_KPA","MOLAR_VOLUME_OF_IDEAL_GAS_27315_K_101325_KPA","MOLAR_VOLUME_OF_SILICON","MO_X_UNIT","MUON_COMPTON_WAVELENGTH","MUON_COMPTON_WAVELENGTH_OVER_2_PI","MUON_ELECTRON_MASS_RATIO","MUON_G_FACTOR","MUON_MAG_MOM","MUON_MAG_MOM_ANOMALY","MUON_MAG_MOM_TO_BOHR_MAGNETON_RATIO","MUON_MAG_MOM_TO_NUCLEAR_MAGNETON_RATIO","MUON_MASS","MUON_MASS_ENERGY_EQUIVALENT","MUON_MASS_ENERGY_EQUIVALENT_IN_MEV","MUON_MASS_IN_U","MUON_MOLAR_MASS","MUON_NEUTRON_MASS_RATIO","MUON_PROTON_MAG_MOM_RATIO","MUON_PROTON_MASS_RATIO","MUON_TAU_MASS_RATIO","NATURAL_UNIT_OF_ACTION","NATURAL_UNIT_OF_ACTION_IN_EV_S","NATURAL_UNIT_OF_ENERGY","NATURAL_UNIT_OF_ENERGY_IN_MEV","NATURAL_UNIT_OF_LENGTH","NATURAL_UNIT_OF_MASS","NATURAL_UNIT_OF_MOMENTUM","NATURAL_UNIT_OF_MOMENTUM_IN_MEV_PER_C","NATURAL_UNIT_OF_TIME","NATURAL_UNIT_OF_VELOCITY","NEUTRON_COMPTON_WAVELENGTH","NEUTRON_COMPTON_WAVELENGTH_OVER_2_PI","NEUTRON_ELECTRON_MAG_MOM_RATIO","NEUTRON_ELECTRON_MASS_RATIO","NEUTRON_GYROMAG_RATIO","NEUTRON_GYROMAG_RATIO_OVER_2_PI","NEUTRON_G_FACTOR","NEUTRON_MAG_MOM","NEUTRON_MAG_MOM_TO_BOHR_MAGNETON_RATIO","NEUTRON_MAG_MOM_TO_NUCLEAR_MAGNETON_RATIO","NEUTRON_MASS","NEUTRON_MASS_ENERGY_EQUIVALENT","NEUTRON_MASS_ENERGY_EQUIVALENT_IN_MEV","NEUTRON_MASS_IN_U","NEUTRON_MOLAR_MASS","NEUTRON_MUON_MASS_RATIO","NEUTRON_PROTON_MAG_MOM_RATIO","NEUTRON_PROTON_MASS_DIFFERENCE","NEUTRON_PROTON_MASS_DIFFERENCE_ENERGY_EQUIVALENT","NEUTRON_PROTON_MASS_DIFFERENCE_ENERGY_EQUIVALENT_IN_MEV","NEUTRON_PROTON_MASS_DIFFERENCE_IN_U","NEUTRON_PROTON_MASS_RATIO","NEUTRON_TAU_MASS_RATIO","NEUTRON_TO_SHIELDED_PROTON_MAG_MOM_RATIO","NEWTONIAN_CONSTANT_OF_GRAVITATION","NEWTONIAN_CONSTANT_OF_GRAVITATION_OVER_H_BAR_C","NUCLEAR_MAGNETON","NUCLEAR_MAGNETON_IN_EV_PER_T","NUCLEAR_MAGNETON_IN_INVERSE_METERS_PER_TESLA","NUCLEAR_MAGNETON_IN_K_PER_T","NUCLEAR_MAGNETON_IN_MHZ_PER_T","PLANCK_CONSTANT","PLANCK_CONSTANT_IN_EV_S","PLANCK_CONSTANT_OVER_2_PI","PLANCK_CONSTANT_OVER_2_PI_IN_EV_S","PLANCK_CONSTANT_OVER_2_PI_TIMES_C_IN_MEV_FM","PLANCK_LENGTH","PLANCK_MASS","PLANCK_MASS_ENERGY_EQUIVALENT_IN_GEV","PLANCK_TEMPERATURE","PLANCK_TIME","PROTON_CHARGE_TO_MASS_QUOTIENT","PROTON_COMPTON_WAVELENGTH","PROTON_COMPTON_WAVELENGTH_OVER_2_PI","PROTON_ELECTRON_MASS_RATIO","PROTON_GYROMAG_RATIO","PROTON_GYROMAG_RATIO_OVER_2_PI","PROTON_G_FACTOR","PROTON_MAG_MOM","PROTON_MAG_MOM_TO_BOHR_MAGNETON_RATIO","PROTON_MAG_MOM_TO_NUCLEAR_MAGNETON_RATIO","PROTON_MAG_SHIELDING_CORRECTION","PROTON_MASS","PROTON_MASS_ENERGY_EQUIVALENT","PROTON_MASS_ENERGY_EQUIVALENT_IN_MEV","PROTON_MASS_IN_U","PROTON_MOLAR_MASS","PROTON_MUON_MASS_RATIO","PROTON_NEUTRON_MAG_MOM_RATIO","PROTON_NEUTRON_MASS_RATIO","PROTON_RMS_CHARGE_RADIUS","PROTON_TAU_MASS_RATIO","QUANTUM_OF_CIRCULATION","QUANTUM_OF_CIRCULATION_TIMES_2","RYDBERG_CONSTANT","RYDBERG_CONSTANT_TIMES_C_IN_HZ","RYDBERG_CONSTANT_TIMES_HC_IN_EV","RYDBERG_CONSTANT_TIMES_HC_IN_J","SACKUR_TETRODE_CONSTANT_1_K_100_KPA","SACKUR_TETRODE_CONSTANT_1_K_101325_KPA","SECOND_RADIATION_CONSTANT","SHIELDED_HELION_GYROMAG_RATIO","SHIELDED_HELION_GYROMAG_RATIO_OVER_2_PI","SHIELDED_HELION_MAG_MOM","SHIELDED_HELION_MAG_MOM_TO_BOHR_MAGNETON_RATIO","SHIELDED_HELION_MAG_MOM_TO_NUCLEAR_MAGNETON_RATIO","SHIELDED_HELION_TO_PROTON_MAG_MOM_RATIO","SHIELDED_HELION_TO_SHIELDED_PROTON_MAG_MOM_RATIO","SHIELDED_PROTON_GYROMAG_RATIO","SHIELDED_PROTON_GYROMAG_RATIO_OVER_2_PI","SHIELDED_PROTON_MAG_MOM","SHIELDED_PROTON_MAG_MOM_TO_BOHR_MAGNETON_RATIO","SHIELDED_PROTON_MAG_MOM_TO_NUCLEAR_MAGNETON_RATIO","SPEED_OF_LIGHT_IN_VACUUM","STANDARD_ACCELERATION_OF_GRAVITY","STANDARD_ATMOSPHERE","STANDARD_STATE_PRESSURE","STEFAN_BOLTZMANN_CONSTANT","TAU_COMPTON_WAVELENGTH","TAU_COMPTON_WAVELENGTH_OVER_2_PI","TAU_ELECTRON_MASS_RATIO","TAU_MASS","TAU_MASS_ENERGY_EQUIVALENT","TAU_MASS_ENERGY_EQUIVALENT_IN_MEV","TAU_MASS_IN_U","TAU_MOLAR_MASS","TAU_MUON_MASS_RATIO","TAU_NEUTRON_MASS_RATIO","TAU_PROTON_MASS_RATIO","THOMSON_CROSS_SECTION","TRITON_ELECTRON_MASS_RATIO","TRITON_G_FACTOR","TRITON_MAG_MOM","TRITON_MAG_MOM_TO_BOHR_MAGNETON_RATIO","TRITON_MAG_MOM_TO_NUCLEAR_MAGNETON_RATIO","TRITON_MASS","TRITON_MASS_ENERGY_EQUIVALENT","TRITON_MASS_ENERGY_EQUIVALENT_IN_MEV","TRITON_MASS_IN_U","TRITON_MOLAR_MASS","TRITON_PROTON_MASS_RATIO","UNIFIED_ATOMIC_MASS_UNIT","VON_KLITZING_CONSTANT","WEAK_MIXING_ANGLE","WIEN_FREQUENCY_DISPLACEMENT_LAW_CONSTANT","WIEN_WAVELENGTH_DISPLACEMENT_LAW_CONSTANT"],"q":["physical_constantsd":["alpha particle-electron mass ratio (dimensionless)","alpha particle mass (unit: kg)","alpha particle mass energy equivalent (unit: J)","alpha particle mass energy equivalent in MeV (unit: MeV)","alpha particle mass in u (unit: u)","alpha particle molar mass (unit: kg mol^-1)","alpha particle-proton mass ratio (dimensionless)","Angstrom star (unit: m)","atomic mass constant (unit: kg)","atomic mass constant energy equivalent (unit: J)","atomic mass constant energy equivalent in MeV (unit: MeV)","atomic mass unit-electron volt relationship (unit: eV)","atomic mass unit-hartree relationship (unit: E_h)","atomic mass unit-hertz relationship (unit: Hz)","atomic mass unit-inverse meter relationship (unit: m^-1)","atomic mass unit-joule relationship (unit: J)","atomic mass unit-kelvin relationship (unit: K)","atomic mass unit-kilogram relationship (unit: kg)","atomic unit of 1st hyperpolarizability (unit: C^3 m^3 …","atomic unit of 2nd hyperpolarizability (unit: C^4 m^4 …","atomic unit of action (unit: J s)","atomic unit of charge (unit: C)","atomic unit of charge density (unit: C m^-3)","atomic unit of current (unit: A)","atomic unit of electric dipole mom. (unit: C m)","atomic unit of electric field (unit: V m^-1)","atomic unit of electric field gradient (unit: V m^-2)","atomic unit of electric polarizability (unit: C^2 m^2 …","atomic unit of electric potential (unit: V)","atomic unit of electric quadrupole mom. (unit: C m^2)","atomic unit of energy (unit: J)","atomic unit of force (unit: N)","atomic unit of length (unit: m)","atomic unit of magnetizability (unit: J T^-2)","atomic unit of mag. dipole mom. (unit: J T^-1)","atomic unit of mag. flux density (unit: T)","atomic unit of mass (unit: kg)","atomic unit of mom.um (unit: kg m s^-1)","atomic unit of permittivity (unit: F m^-1)","atomic unit of time (unit: s)","atomic unit of velocity (unit: m s^-1)","Avogadro constant (unit: mol^-1)","Bohr magneton (unit: J T^-1)","Bohr magneton in eV/T (unit: eV T^-1)","Bohr magneton in Hz/T (unit: Hz T^-1)","Bohr magneton in inverse meters per tesla (unit: m^-1 …","Bohr magneton in K/T (unit: K T^-1)","Bohr radius (unit: m)","Boltzmann constant (unit: J K^-1)","Boltzmann constant in eV/K (unit: eV K^-1)","Boltzmann constant in Hz/K (unit: Hz K^-1)","Boltzmann constant in inverse meters per kelvin (unit: …","characteristic impedance of vacuum (unit: ohm)","classical electron radius (unit: m)","Compton wavelength (unit: m)","Compton wavelength over 2 pi (unit: m)","conductance quantum (unit: S)","conventional value of Josephson constant (unit: Hz V^-1)","conventional value of von Klitzing constant (unit: ohm)","Cu x unit (unit: m)","deuteron-electron mag. mom. ratio (dimensionless)","deuteron-electron mass ratio (dimensionless)","deuteron g factor (dimensionless)","deuteron mag. mom. (unit: J T^-1)","deuteron mag. mom. to Bohr magneton ratio (dimensionless)","deuteron mag. mom. to nuclear magneton ratio …","deuteron mass (unit: kg)","deuteron mass energy equivalent (unit: J)","deuteron mass energy equivalent in MeV (unit: MeV)","deuteron mass in u (unit: u)","deuteron molar mass (unit: kg mol^-1)","deuteron-neutron mag. mom. ratio (dimensionless)","deuteron-proton mag. mom. ratio (dimensionless)","deuteron-proton mass ratio (dimensionless)","deuteron rms charge radius (unit: m)","electric constant (unit: F m^-1)","electron charge to mass quotient (unit: C kg^-1)","electron-deuteron mag. mom. ratio (dimensionless)","electron-deuteron mass ratio (dimensionless)","electron gyromag. ratio (unit: s^-1 T^-1)","electron gyromag. ratio over 2 pi (unit: MHz T^-1)","electron g factor (dimensionless)","electron-helion mass ratio (dimensionless)","electron mag. mom. (unit: J T^-1)","electron mag. mom. anomaly (dimensionless)","electron mag. mom. to Bohr magneton ratio (dimensionless)","electron mag. mom. to nuclear magneton ratio …","electron mass (unit: kg)","electron mass energy equivalent (unit: J)","electron mass energy equivalent in MeV (unit: MeV)","electron mass in u (unit: u)","electron molar mass (unit: kg mol^-1)","electron-muon mag. mom. ratio (dimensionless)","electron-muon mass ratio (dimensionless)","electron-neutron mag. mom. ratio (dimensionless)","electron-neutron mass ratio (dimensionless)","electron-proton mag. mom. ratio (dimensionless)","electron-proton mass ratio (dimensionless)","electron-tau mass ratio (dimensionless)","electron to alpha particle mass ratio (dimensionless)","electron to shielded helion mag. mom. ratio …","electron to shielded proton mag. mom. ratio …","electron-triton mass ratio (dimensionless)","electron volt (unit: J)","electron volt-atomic mass unit relationship (unit: u)","electron volt-hartree relationship (unit: E_h)","electron volt-hertz relationship (unit: Hz)","electron volt-inverse meter relationship (unit: m^-1)","electron volt-joule relationship (unit: J)","electron volt-kelvin relationship (unit: K)","electron volt-kilogram relationship (unit: kg)","elementary charge (unit: C)","elementary charge over h (unit: A J^-1)","Faraday constant (unit: C mol^-1)","Faraday constant for conventional electric current (unit: …","Fermi coupling constant (unit: GeV^-2)","fine-structure constant (dimensionless)","first radiation constant (unit: W m^2)","first radiation constant for spectral radiance (unit: W …","hartree-atomic mass unit relationship (unit: u)","hartree-electron volt relationship (unit: eV)","Hartree energy (unit: J)","Hartree energy in eV (unit: eV)","hartree-hertz relationship (unit: Hz)","hartree-inverse meter relationship (unit: m^-1)","hartree-joule relationship (unit: J)","hartree-kelvin relationship (unit: K)","hartree-kilogram relationship (unit: kg)","helion-electron mass ratio (dimensionless)","helion g factor (dimensionless)","helion mag. mom. (unit: J T^-1)","helion mag. mom. to Bohr magneton ratio (dimensionless)","helion mag. mom. to nuclear magneton ratio (dimensionless)","helion mass (unit: kg)","helion mass energy equivalent (unit: J)","helion mass energy equivalent in MeV (unit: MeV)","helion mass in u (unit: u)","helion molar mass (unit: kg mol^-1)","helion-proton mass ratio (dimensionless)","hertz-atomic mass unit relationship (unit: u)","hertz-electron volt relationship (unit: eV)","hertz-hartree relationship (unit: E_h)","hertz-inverse meter relationship (unit: m^-1)","hertz-joule relationship (unit: J)","hertz-kelvin relationship (unit: K)","hertz-kilogram relationship (unit: kg)","inverse fine-structure constant (dimensionless)","inverse meter-atomic mass unit relationship (unit: u)","inverse meter-electron volt relationship (unit: eV)","inverse meter-hartree relationship (unit: E_h)","inverse meter-hertz relationship (unit: Hz)","inverse meter-joule relationship (unit: J)","inverse meter-kelvin relationship (unit: K)","inverse meter-kilogram relationship (unit: kg)","inverse of conductance quantum (unit: ohm)","Josephson constant (unit: Hz V^-1)","joule-atomic mass unit relationship (unit: u)","joule-electron volt relationship (unit: eV)","joule-hartree relationship (unit: E_h)","joule-hertz relationship (unit: Hz)","joule-inverse meter relationship (unit: m^-1)","joule-kelvin relationship (unit: K)","joule-kilogram relationship (unit: kg)","kelvin-atomic mass unit relationship (unit: u)","kelvin-electron volt relationship (unit: eV)","kelvin-hartree relationship (unit: E_h)","kelvin-hertz relationship (unit: Hz)","kelvin-inverse meter relationship (unit: m^-1)","kelvin-joule relationship (unit: J)","kelvin-kilogram relationship (unit: kg)","kilogram-atomic mass unit relationship (unit: u)","kilogram-electron volt relationship (unit: eV)","kilogram-hartree relationship (unit: E_h)","kilogram-hertz relationship (unit: Hz)","kilogram-inverse meter relationship (unit: m^-1)","kilogram-joule relationship (unit: J)","kilogram-kelvin relationship (unit: K)","lattice parameter of silicon (unit: m)","{220} lattice spacing of silicon (unit: m)","Loschmidt constant (273.15 K, 100 kPa) (unit: m^-3)","Loschmidt constant (273.15 K, 101.325 kPa) (unit: m^-3)","mag. constant (unit: N A^-2)","mag. flux quantum (unit: Wb)","molar gas constant (unit: J mol^-1 K^-1)","molar mass constant (unit: kg mol^-1)","molar mass of carbon-12 (unit: kg mol^-1)","molar Planck constant (unit: J s mol^-1)","molar Planck constant times c (unit: J m mol^-1)","molar volume of ideal gas (273.15 K, 100 kPa) (unit: m^3 …","molar volume of ideal gas (273.15 K, 101.325 kPa) (unit: …","molar volume of silicon (unit: m^3 mol^-1)","Mo x unit (unit: m)","muon Compton wavelength (unit: m)","muon Compton wavelength over 2 pi (unit: m)","muon-electron mass ratio (dimensionless)","muon g factor (dimensionless)","muon mag. mom. (unit: J T^-1)","muon mag. mom. anomaly (dimensionless)","muon mag. mom. to Bohr magneton ratio (dimensionless)","muon mag. mom. to nuclear magneton ratio (dimensionless)","muon mass (unit: kg)","muon mass energy equivalent (unit: J)","muon mass energy equivalent in MeV (unit: MeV)","muon mass in u (unit: u)","muon molar mass (unit: kg mol^-1)","muon-neutron mass ratio (dimensionless)","muon-proton mag. mom. ratio (dimensionless)","muon-proton mass ratio (dimensionless)","muon-tau mass ratio (dimensionless)","natural unit of action (unit: J s)","natural unit of action in eV s (unit: eV s)","natural unit of energy (unit: J)","natural unit of energy in MeV (unit: MeV)","natural unit of length (unit: m)","natural unit of mass (unit: kg)","natural unit of mom.um (unit: kg m s^-1)","natural unit of mom.um in MeV/c (unit: MeV/c)","natural unit of time (unit: s)","natural unit of velocity (unit: m s^-1)","neutron Compton wavelength (unit: m)","neutron Compton wavelength over 2 pi (unit: m)","neutron-electron mag. mom. ratio (dimensionless)","neutron-electron mass ratio (dimensionless)","neutron gyromag. ratio (unit: s^-1 T^-1)","neutron gyromag. ratio over 2 pi (unit: MHz T^-1)","neutron g factor (dimensionless)","neutron mag. mom. (unit: J T^-1)","neutron mag. mom. to Bohr magneton ratio (dimensionless)","neutron mag. mom. to nuclear magneton ratio …","neutron mass (unit: kg)","neutron mass energy equivalent (unit: J)","neutron mass energy equivalent in MeV (unit: MeV)","neutron mass in u (unit: u)","neutron molar mass (unit: kg mol^-1)","neutron-muon mass ratio (dimensionless)","neutron-proton mag. mom. ratio (dimensionless)","neutron-proton mass difference (dimensionless)","neutron-proton mass difference energy equivalent …","neutron-proton mass difference energy equivalent in MeV …","neutron-proton mass difference in u (dimensionless)","neutron-proton mass ratio (dimensionless)","neutron-tau mass ratio (dimensionless)","neutron to shielded proton mag. mom. ratio (dimensionless)","Newtonian constant of gravitation (unit: m^3 kg^-1 s^-2)","Newtonian constant of gravitation over h-bar c (unit: …","nuclear magneton (unit: J T^-1)","nuclear magneton in eV/T (unit: eV T^-1)","nuclear magneton in inverse meters per tesla (unit: m^-1 …","nuclear magneton in K/T (unit: K T^-1)","nuclear magneton in MHz/T (unit: MHz T^-1)","Planck constant (unit: J s)","Planck constant in eV s (unit: eV s)","Planck constant over 2 pi (unit: J s)","Planck constant over 2 pi in eV s (unit: eV s)","Planck constant over 2 pi times c in MeV fm (unit: MeV fm)","Planck length (unit: m)","Planck mass (unit: kg)","Planck mass energy equivalent in GeV (unit: GeV)","Planck temperature (unit: K)","Planck time (unit: s)","proton charge to mass quotient (unit: C kg^-1)","proton Compton wavelength (unit: m)","proton Compton wavelength over 2 pi (unit: m)","proton-electron mass ratio (dimensionless)","proton gyromag. ratio (unit: s^-1 T^-1)","proton gyromag. ratio over 2 pi (unit: MHz T^-1)","proton g factor (dimensionless)","proton mag. mom. (unit: J T^-1)","proton mag. mom. to Bohr magneton ratio (dimensionless)","proton mag. mom. to nuclear magneton ratio (dimensionless)","proton mag. shielding correction (dimensionless)","proton mass (unit: kg)","proton mass energy equivalent (unit: J)","proton mass energy equivalent in MeV (unit: MeV)","proton mass in u (unit: u)","proton molar mass (unit: kg mol^-1)","proton-muon mass ratio (dimensionless)","proton-neutron mag. mom. ratio (dimensionless)","proton-neutron mass ratio (dimensionless)","proton rms charge radius (unit: m)","proton-tau mass ratio (dimensionless)","quantum of circulation (unit: m^2 s^-1)","quantum of circulation times 2 (unit: m^2 s^-1)","Rydberg constant (unit: m^-1)","Rydberg constant times c in Hz (unit: Hz)","Rydberg constant times hc in eV (unit: eV)","Rydberg constant times hc in J (unit: J)","Sackur-Tetrode constant (1 K, 100 kPa) (dimensionless)","Sackur-Tetrode constant (1 K, 101.325 kPa) (dimensionless)","second radiation constant (unit: m K)","shielded helion gyromag. ratio (unit: s^-1 T^-1)","shielded helion gyromag. ratio over 2 pi (unit: MHz T^-1)","shielded helion mag. mom. (unit: J T^-1)","shielded helion mag. mom. to Bohr magneton ratio …","shielded helion mag. mom. to nuclear magneton ratio …","shielded helion to proton mag. mom. ratio (dimensionless)","shielded helion to shielded proton mag. mom. ratio …","shielded proton gyromag. ratio (unit: s^-1 T^-1)","shielded proton gyromag. ratio over 2 pi (unit: MHz T^-1)","shielded proton mag. mom. (unit: J T^-1)","shielded proton mag. mom. to Bohr magneton ratio …","shielded proton mag. mom. to nuclear magneton ratio …","speed of light in vacuum (unit: m s^-1)","standard acceleration of gravity (unit: m s^-2)","standard atmosphere (unit: Pa)","standard-state pressure (unit: Pa)","Stefan-Boltzmann constant (unit: W m^-2 K^-4)","tau Compton wavelength (unit: m)","tau Compton wavelength over 2 pi (unit: m)","tau-electron mass ratio (dimensionless)","tau mass (unit: kg)","tau mass energy equivalent (unit: J)","tau mass energy equivalent in MeV (unit: MeV)","tau mass in u (unit: u)","tau molar mass (unit: kg mol^-1)","tau-muon mass ratio (dimensionless)","tau-neutron mass ratio (dimensionless)","tau-proton mass ratio (dimensionless)","Thomson cross section (unit: m^2)","triton-electron mass ratio (dimensionless)","triton g factor (dimensionless)","triton mag. mom. (unit: J T^-1)","triton mag. mom. to Bohr magneton ratio (dimensionless)","triton mag. mom. to nuclear magneton ratio (dimensionless)","triton mass (unit: kg)","triton mass energy equivalent (unit: J)","triton mass energy equivalent in MeV (unit: MeV)","triton mass in u (unit: u)","triton molar mass (unit: kg mol^-1)","triton-proton mass ratio (dimensionless)","unified atomic mass unit (unit: kg)","von Klitzing constant (unit: ohm)","weak mixing angle (dimensionless)","Wien frequency displacement law constant (unit: Hz K^-1)","Wien wavelength displacement law constant (unit: m K)"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[]},\
"png":{"doc":"PNG encoder and decoder","t":[3,13,13,18,13,13,4,4,13,13,4,4,13,13,4,3,4,13,4,18,18,13,3,4,13,4,13,13,13,3,13,18,13,13,13,13,18,18,18,13,13,13,13,3,13,13,13,3,13,13,13,13,13,13,13,3,13,18,18,13,13,3,13,13,13,13,3,13,18,18,18,18,18,18,18,18,18,13,13,3,3,13,3,13,4,13,13,3,11,11,12,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,11,11,11,11,12,12,12,12,12,12,12,12,6,17,17,17,17,17,17,17,17,5,5,17,5,5,17,17],"n":["AnimationControl","AnimationControl","Avg","BGR","Background","Best","BitDepth","BlendOp","ChunkBegin","ChunkComplete","ColorType","Compression","CorruptFlateStream","CrcMismatch","Decoded","Decoder","DecodingError","Default","DisposeOp","EXPAND","EXPAND_16","Eight","Encoder","EncodingError","Fast","FilterType","Format","Format","Four","FrameControl","FrameControl","GRAY_TO_RGB","Grayscale","GrayscaleAlpha","Header","Huffman","IDENTITY","INVERT_ALPHA","INVERT_MONO","ImageData","ImageDataFlushed","ImageEnd","Indexed","Info","InvalidSignature","IoError","IoError","Limits","LimitsExceeded","Meter","NoFilter","None","Nothing","One","Other","OutputInfo","Over","PACKING","PACKSWAP","Paeth","PartialChunk","PixelDimensions","PixelDimensions","Previous","RGB","RGBA","Reader","Rle","SCALE_16","SHIFT","STRIP_16","STRIP_ALPHA","STRIP_FILLER","STRIP_FILLER_AFTER","STRIP_FILLER_BEFORE","SWAP_ALPHA","SWAP_ENDIAN","Sixteen","Source","StreamWriter","StreamingDecoder","Sub","Transformations","Two","Unit","Unspecified","Up","Writer","all","animation_control","animation_control","bit_depth","bit_depth","bitand","bitand_assign","bitor","bitor_assign","bits","bits_per_pixel","bitxor","bitxor_assign","blend_op","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer_size","bytes","bytes_per_pixel","cause","cause","chunk","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","color_type","color_type","compression","contains","default","default","default","default","delay_den","delay_num","dispose_op","drop","drop","empty","eq","eq","eq","eq","eq","eq","eq","eq","extend","filter","finish","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frame_control","frame_control","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","hash","height","height","height","inc_seq_num","info","insert","interlaced","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_stream_writer","into_stream_writer_with_size","is_all","is_animated","is_empty","line_size","ne","ne","new","new","new","new_with_limits","next_frame","next_interlaced_row","next_row","not","num_frames","num_plays","output_buffer_size","output_color_type","output_line_size","palette","partial_cmp","pixel_dims","raw_bytes","raw_row_length","raw_row_length_from_width","read_info","remove","reset","samples","sequence_number","set","set_color","set_compression","set_depth","set_filter","set_limits","set_palette","set_seq_num","set_transformations","set_trns","size","stream_writer","stream_writer_with_size","sub","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","toggle","trns","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","update","width","width","width","write","write_chunk","write_header","write_image_data","x_offset","xppu","y_offset","yppu","chunk","crc_sum","crc_val","recover","ChunkType","IDAT","IEND","IHDR","PLTE","acTL","bKGD","fcTL","fdAT","is_critical","is_private","pHYs","reserved_set","safe_to_copy","tIME","tRNS"],"q":["png","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","png::DecodingError","","","","png::chunk","","","","","","","","","","","","","","",""],"d":["Animation control information","","","Flip RGB to BGR; RGBA to BGRA","Clear buffer with the background color.","Higher compression level","Bit depth of the png file","How pixels are written into the buffer.","","","Describes the layout of samples in a pixel","The type and strength of applied compression.","","","Result of the decoding process","PNG Decoder","","Default level  ","How to reset buffer of an animated png (APNG) at the end …","Expand paletted images to RGB; expand grayscale images of …","","","PNG Encoder","","Fast minimal compression","The byte level filter applied to scanlines to prepare …","","","","Frame control information","","","","","","","No transformation","Change alpha from opacity to transparency","Invert monochrome images","Decoded raw image data.","The last of a consecutive chunk of IDAT was done. This is …","","","PNG info struct","","","","Limits on the resources the <code>Decoder</code> is allowed too use","","","","Leave the buffer unchanged.","Nothing decoded yet","","","Output info","The new pixels are blended into the current state based …","Expand 1; 2 and 4-bit samples to bytes","Change order of packed pixels to LSB first","","","Pixel dimensions information","","Reset the buffer to the state before the current frame.","","","PNG reader (mostly high-level interface)","","","Normalize pixels to the sBIT depth","Strip 16-bit samples to 8 bits","Discard the alpha channel","","","","Flip RGBA to ARGB or GA to AG","Byte-swap 16-bit samples","","Pixels overwrite the value at their position.","Streaming png writer","PNG StreamingDecoder (low-level interface)","","Output transformations","","Physical unit of the pixel dimensions","","","PNG writer","Returns the set containing all flags.","Returns the frame control information of the image","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the bits per pixel","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Type of frame area rendering for this frame","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the size needed to hold a decoded frame","maximum number of bytes the decoder is allowed to …","Returns the bytes per pixel","","","Chunk types and functions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> all of the flags in <code>other</code> are contained …","","","","","Frame delay fraction denominator","Frame delay fraction numerator","Type of frame area disposal to be done after rendering …","","","Returns an empty set of flags","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the frame control information of the current frame","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","","u8 -> Self. Temporary solution until Rust provides a …","u8 -> Self. Temporary solution until Rust provides a …","u8 -> Self. Temporary solution until Rust provides a …","u8 -> Self. Using enum_primitive or transmute is probably …","u8 -> Self. Using enum_primitive or transmute is probably …","u8 -> Self. Temporary solution until Rust provides a …","","Height of the following frame","","","","Get information on the image.","Inserts the specified flags in-place.","","Returns <code>true</code> if there are flags common to both <code>self</code> and …","","","","","","","","","","","","","","","","","","","","","","","","Turn this into a stream writer for image data.","Turn this into a stream writer with custom buffer size.","Returns <code>true</code> if all flags are currently set.","Returns true if the image is an APNG image.","Returns <code>true</code> if no flags are currently stored.","","","","Creates a new StreamingDecoder","","","","Decodes the next frame into <code>buf</code>.","Returns the next processed row of the image","Returns the next processed row of the image","Returns the complement of this set of flags.","Number of frames","Number of times to loop this APNG.  0 indicates infinite …","Returns the number of bytes required to hold a …","Returns the color type and the number of bits per sample …","Returns the number of bytes required to hold a …","","","","Returns the number of bytes needed for one deinterlaced …","Returns the number of bytes needed for one deinterlaced …","Returns the number of bytes needed for one deinterlaced …","Reads all meta data until the first IDAT chunk","Removes the specified flags in-place.","Resets the StreamingDecoder","Returns the number of samples used per pixel of <code>ColorType</code>","Sequence number of the animation chunk, starting from 0","Inserts or removes the specified flags depending on the …","Set the color of the encoded image.","Set compression parameters.","Set the indicated depth of the image data.","Set the used filter type.","Limit resource usage","","","Set the allowed and performed transformations.","","Size of the image","Create an stream writer.","Create a stream writer with custom buffer size.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Either <em>Meter</em> or <em>Unspecified</em>","Low level StreamingDecoder interface.","Width of the following frame","","","","","","Writes the image data.","X position at which to render the following frame","Pixels per unit, X axis","Y position at which to render the following frame","Pixels per unit, Y axis","","Calculated CRC32 sum","Stored CRC32 value","bytes to skip to try to recover from this error","","Image data","Image trailer","Image header","Palette","Animation control","Background colour","Frame control","Frame data","Returns true if the chunk is critical.","Returns true if the chunk is private.","Physical pixel dimensions","Checks whether the reserved bit of the chunk name is set. …","Returns true if the chunk is safe to copy if unknown.","Image last-modification time","Transparency"],"i":[0,1,2,3,4,5,0,0,1,1,0,0,6,6,0,0,0,5,0,3,3,7,0,0,5,0,6,8,7,0,1,3,9,9,1,5,3,3,3,1,1,1,9,0,6,6,8,0,6,10,2,4,1,7,6,0,11,3,3,2,1,0,1,4,9,9,0,5,3,3,3,3,3,3,3,3,3,7,11,0,0,2,0,7,0,10,2,0,3,12,12,12,13,3,3,3,3,3,12,3,3,14,15,16,17,18,19,20,9,7,21,10,4,11,14,22,5,12,3,1,6,13,23,8,2,15,16,17,18,19,20,9,7,21,10,4,11,14,22,5,12,3,1,6,13,23,8,2,13,23,12,6,8,0,9,7,21,10,4,11,14,22,5,12,3,23,2,9,7,21,10,4,11,14,22,5,12,3,23,2,3,12,13,12,3,15,14,12,23,14,14,14,19,20,3,9,7,10,4,11,3,13,2,3,12,20,20,9,7,21,10,4,4,11,11,14,22,5,12,3,3,3,3,3,1,6,6,13,23,8,8,2,12,12,15,16,17,18,19,20,9,7,21,10,4,11,14,22,5,5,12,3,1,6,6,6,13,23,8,8,2,3,3,3,3,9,7,10,4,11,2,3,14,12,13,14,17,3,12,3,15,16,17,18,19,20,9,7,21,10,4,11,14,22,5,12,3,1,6,13,23,8,2,19,19,3,12,3,13,3,13,15,16,18,16,17,17,17,3,22,22,17,17,17,12,3,12,12,12,12,16,3,15,9,14,3,18,18,18,18,16,18,14,16,18,12,19,19,3,3,9,7,21,10,4,11,14,22,5,12,3,23,2,4,11,6,8,3,12,15,16,17,18,19,20,9,7,21,10,4,11,14,22,5,12,3,1,6,13,23,8,2,15,16,17,18,19,20,9,7,21,10,4,11,14,22,5,12,3,1,6,13,23,8,2,15,16,17,18,19,20,9,7,21,10,4,11,14,22,5,12,3,1,6,13,23,8,2,21,15,14,12,13,20,19,18,19,14,21,14,21,24,24,24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["transformations",3]],[[],[["animationcontrol",3],["option",4]]],null,null,null,[[["transformations",3]],["transformations",3]],[[["transformations",3]]],[[["transformations",3]],["transformations",3]],[[["transformations",3]]],[[],["u32",15]],[[],["usize",15]],[[["transformations",3]],["transformations",3]],[[["transformations",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],null,[[],["usize",15]],[[],[["error",8],["option",4]]],[[],[["error",8],["option",4]]],null,[[],["colortype",4]],[[],["bitdepth",4]],[[],["pixeldimensions",3]],[[],["unit",4]],[[],["disposeop",4]],[[],["blendop",4]],[[],["framecontrol",3]],[[],["animationcontrol",3]],[[],["compression",4]],[[],["info",3]],[[],["transformations",3]],[[],["limits",3]],[[],["filtertype",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["transformations",3]],["ordering",4]],null,null,null,[[["transformations",3]],["bool",15]],[[]],[[],["framecontrol",3]],[[],["info",3]],[[],["limits",3]],null,null,null,[[]],[[]],[[],["transformations",3]],[[["colortype",4]],["bool",15]],[[["bitdepth",4]],["bool",15]],[[["unit",4]],["bool",15]],[[["disposeop",4]],["bool",15]],[[["blendop",4]],["bool",15]],[[["transformations",3]],["bool",15]],[[["outputinfo",3]],["bool",15]],[[["filtertype",4]],["bool",15]],[[["intoiterator",8]]],null,[[],[["encodingerror",4],["result",4]]],[[],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[],[["option",4],["framecontrol",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["compression",4]]],[[]],[[]],[[]],[[]],[[["error",3]],["decodingerror",4]],[[]],[[["string",3]],["decodingerror",4]],[[]],[[]],[[["error",3]],["encodingerror",4]],[[]],[[]],[[["u32",15]],[["option",4],["transformations",3]]],[[["u32",15]],["transformations",3]],[[["u32",15]],["transformations",3]],[[["intoiterator",8]],["transformations",3]],[[["u8",15]],[["colortype",4],["option",4]]],[[["u8",15]],[["option",4],["bitdepth",4]]],[[["u8",15]],[["unit",4],["option",4]]],[[["u8",15]],[["option",4],["disposeop",4]]],[[["u8",15]],[["blendop",4],["option",4]]],[[["u8",15]],[["filtertype",4],["option",4]]],[[]],null,null,null,[[["u32",15]]],[[],["info",3]],[[["transformations",3]]],null,[[["transformations",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["streamwriter",3]],[[["usize",15]],["streamwriter",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["transformations",3]],["bool",15]],[[["outputinfo",3]],["bool",15]],[[],["streamingdecoder",3]],[[],["decoder",3]],[[["u32",15]],["encoder",3]],[[["limits",3]],["decoder",3]],[[],[["decodingerror",4],["result",4]]],[[],[["decodingerror",4],["result",4],["option",4]]],[[],[["option",4],["result",4],["decodingerror",4]]],[[],["transformations",3]],null,null,[[],["usize",15]],[[]],[[["u32",15]],["usize",15]],null,[[["transformations",3]],[["ordering",4],["option",4]]],null,[[],["usize",15]],[[],["usize",15]],[[["u32",15]],["usize",15]],[[],[["result",4],["decodingerror",4]]],[[["transformations",3]]],[[]],[[],["usize",15]],null,[[["bool",15],["transformations",3]]],[[["colortype",4]]],[[["compression",4],["into",8]]],[[["bitdepth",4]]],[[["filtertype",4]]],[[["limits",3]]],[[["u8",15],["vec",3]]],[[["u32",15]]],[[["transformations",3]]],[[["u8",15],["vec",3]]],[[]],[[],["streamwriter",3]],[[["usize",15]],["streamwriter",3]],[[["transformations",3]],["transformations",3]],[[["transformations",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["transformations",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["vec",3]],[["decodingerror",4],["result",4]]],null,null,null,[[],[["usize",15],["result",6]]],[[],[["encodingerror",4],["result",4]]],[[],[["encodingerror",4],["result",4],["writer",3]]],[[],[["encodingerror",4],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["chunktype",6]],["bool",15]],[[["chunktype",6]],["bool",15]],null,[[["chunktype",6]],["bool",15]],[[["chunktype",6]],["bool",15]],null,null],"p":[[4,"Decoded"],[4,"FilterType"],[3,"Transformations"],[4,"DisposeOp"],[4,"Compression"],[4,"DecodingError"],[4,"BitDepth"],[4,"EncodingError"],[4,"ColorType"],[4,"Unit"],[4,"BlendOp"],[3,"Info"],[3,"OutputInfo"],[3,"FrameControl"],[3,"StreamingDecoder"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[3,"Writer"],[3,"StreamWriter"],[3,"PixelDimensions"],[3,"AnimationControl"],[3,"Limits"],[13,"CrcMismatch"]]},\
"ppv_lite86":{"doc":"","t":[8,8,8,8,8,8,8,8,8,8,16,8,8,8,8,8,8,8,8,8,8,8,10,10,14,14,14,14,10,10,11,10,11,0,10,10,11,10,11,11,11,11,10,10,10,10,10,10,10,10,10,10,11,10,11,10,11,10,10,10,10,10,10,10,10,10,10,10,11,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,16,10,11,11,10,10,10,11,11,10,10,10,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,6,3,6,6,3,6,6,6,11,11,11,11,11,11,11,19,3,3,11,11,11,11],"n":["AndNot","ArithOps","BSwap","BitOps0","BitOps128","BitOps32","BitOps64","LaneWords4","Machine","MultiLane","Output","RotateEachWord128","RotateEachWord32","RotateEachWord64","Store","StoreBytes","Swap64","UnsafeFrom","VZip","Vec2","Vec4","Words4","andnot","bswap","dispatch","dispatch_light128","dispatch_light256","dispatch_light512","extract","extract","extract","from_lanes","from_lanes","generic","insert","insert","insert","instance","read_be","read_be","read_le","read_le","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right32","rotate_each_word_right7","rotate_each_word_right8","shuffle1230","shuffle1230","shuffle2301","shuffle2301","shuffle3012","shuffle3012","shuffle_lane_words1230","shuffle_lane_words2301","shuffle_lane_words3012","swap1","swap16","swap2","swap32","swap4","swap64","swap8","to_lanes","to_lanes","u128x1","u128x1","u128x2","u128x2","u128x4","u128x4","u32x4","u32x4","u32x4x2","u32x4x2","u32x4x4","u32x4x4","u64x2","u64x2","u64x2x2","u64x2x2","u64x2x4","u64x2x4","u64x4","u64x4","unpack","unpack","unpack","unsafe_from","unsafe_read_be","unsafe_read_le","vec","vec","vzip","write_be","write_le","G0","G1","GenericMachine","add","add","add","add_assign","add_assign","add_assign","andnot","andnot","andnot","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bswap","bswap","bswap","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","eq","eq","eq","eq","eq","eq","extract","extract","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_lanes","from_lanes","from_lanes","insert","insert","instance","into","into","into","into","into","into","into","into","into","ne","ne","ne","ne","ne","new128","new128","not","not","not","rotate_each_word_right11","rotate_each_word_right11","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right12","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right16","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right20","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right24","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right25","rotate_each_word_right25","rotate_each_word_right32","rotate_each_word_right32","rotate_each_word_right7","rotate_each_word_right7","rotate_each_word_right7","rotate_each_word_right8","rotate_each_word_right8","rotate_each_word_right8","shuffle1230","shuffle2301","shuffle3012","shuffle_lane_words1230","shuffle_lane_words2301","shuffle_lane_words3012","split128","split128","swap1","swap1","swap1","swap16","swap16","swap16","swap2","swap2","swap2","swap32","swap32","swap32","swap4","swap4","swap4","swap64","swap64","swap64","swap8","swap8","swap8","to_lanes","to_lanes","to_lanes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128x1_generic","u128x2_generic","u128x4_generic","u32x4_generic","u32x4x2_generic","u32x4x4_generic","u64x2_generic","u64x2x2_generic","u64x2x4_generic","u64x4_generic","unpack","unpack","unpack","unsafe_read_be","unsafe_read_be","unsafe_read_le","unsafe_read_le","vec128_storage","vec256_storage","vec512_storage","write_be","write_be","write_le","write_le"],"q":["ppv_lite86","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ppv_lite86::genericd":["","Ops that depend on word size","","Ops that are independent of word size and endian","","","","A vector composed one or more lanes each composed of four …","","A vector composed of multiple 128-bit lanes.","","","","","","","Exchange neigboring ranges of bits of the specified size","","Combine single vectors into a multi-lane vector.","A vector composed of two elements, which may be words or …","A vector composed of four elements, which may be words or …","A vector composed of four words; depending on their size, …","","","","","","","","","","Build a multi-lane vector from individual lanes.","","","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Split a multi-lane vector into single-lane vectors.","","","","","","","","","","","","","","","","","","","","","","Safety","","","","Safety","Safetyi":[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,3,4,5,6,5,0,3,4,5,7,7,7,7,7,8,8,8,8,8,8,9,8,8,10,5,10,5,10,5,11,11,11,12,12,12,12,12,12,12,6,5,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,13,7,7,14,15,15,7,7,16,15,15,0,0,0,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,20,21,22,23,17,18,19,24,25,20,21,22,23,17,18,19,24,25,17,18,19,20,21,22,23,17,18,19,24,25,20,21,22,20,21,22,17,18,19,17,18,17,18,19,20,20,20,20,20,20,21,22,23,17,18,19,24,25,17,18,19,17,18,23,20,21,22,23,17,18,19,24,25,21,22,17,18,19,21,22,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,18,19,17,18,19,17,18,19,17,17,17,17,17,17,21,22,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,17,18,19,20,21,22,23,17,18,19,24,25,20,21,22,23,17,18,19,24,25,20,21,22,23,17,18,19,24,25,0,0,0,0,0,0,0,0,0,0,17,18,19,17,18,17,18,0,0,0,17,18,17,18],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,null,null,null,[[["u32",15]]],[[["u32",15]]],[[["u32",15]],["u64",15]],[[]],[[]],null,[[["u32",15]]],[[["u32",15]]],[[["u32",15],["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["store",8]],[[],["store",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec128_storage",19]],[[],["vec256_storage",3]],[[],["vec512_storage",3]],[[],["genericmachine",3]],[[],["u32x4_generic",3]],[[],["u64x2_generic",3]],[[],["u128x1_generic",3]],[[],["g0",3]],[[],["g1",3]],[[]],[[],["vec256_storage",3]],[[],["vec512_storage",3]],[[],["bool",15]],[[["vec256_storage",3]],["bool",15]],[[["vec512_storage",3]],["bool",15]],[[["u32x4_generic",3]],["bool",15]],[[["u64x2_generic",3]],["bool",15]],[[["u128x1_generic",3]],["bool",15]],[[["u32",15]],["u32",15]],[[["u32",15]],["u64",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u32x4_generic",3]]],[[["u64x2_generic",3]]],[[["u128x1_generic",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15],["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec256_storage",3]],["bool",15]],[[["vec512_storage",3]],["bool",15]],[[["u32x4_generic",3]],["bool",15]],[[["u64x2_generic",3]],["bool",15]],[[["u128x1_generic",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["vec128_storage",19]]],[[["vec128_storage",19]]],[[["vec128_storage",19]]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]]],"p":[[8,"AndNot"],[8,"BSwap"],[8,"Vec2"],[8,"Vec4"],[6,"u64x4_generic"],[8,"MultiLane"],[8,"Machine"],[8,"RotateEachWord32"],[8,"RotateEachWord64"],[8,"Words4"],[8,"LaneWords4"],[8,"Swap64"],[8,"Store"],[8,"UnsafeFrom"],[8,"StoreBytes"],[8,"VZip"],[3,"u32x4_generic"],[3,"u64x2_generic"],[3,"u128x1_generic"],[19,"vec128_storage"],[3,"vec256_storage"],[3,"vec512_storage"],[3,"GenericMachine"],[3,"G0"],[3,"G1"]]},\
"proc_macro2":{"doc":"A wrapper around the procedural macro API of the compiler…","t":[13,13,13,4,3,13,3,13,13,3,3,13,13,13,3,13,4,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delimiter","eq","eq","eq","eq","extend","extend","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","spacing","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","IntoIter","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","to_owned","try_from","try_into","type_id"],"q":["proc_macroproc_macro2::token_stream","","","","","","","","","","","","",""],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>\'</code> is <code>Joint</code> in <code>\'#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>\\\"hello\\\"</code>), byte string (<code>b\\\"hello\\\"</code>), …","A literal character (<code>\'a\'</code>), string (<code>\\\"hello\\\"</code>), number (<code>2.3</code>…","<code>Ø ... Ø</code>","<code>( ... )</code>","An <code>Punct</code> is an single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>…","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether an <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural …","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns the delimiter of this <code>Group</code>","","","","","","","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","","","","","","","","","","","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the spacing of this punctuation character, …","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of …","Returns the span pointing to the opening delimiter of …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","","","","","","",""],"i":[1,2,2,0,0,3,0,3,1,0,0,3,2,2,0,3,0,0,0,0,4,5,6,7,3,8,2,4,1,9,10,5,6,7,3,8,2,4,1,9,10,10,7,10,6,7,3,8,2,4,1,9,10,6,7,3,8,2,4,1,9,10,9,6,8,2,1,9,9,6,6,10,10,10,10,5,5,6,6,7,3,3,8,8,2,4,4,1,9,9,10,10,5,6,6,6,7,7,3,3,3,3,3,8,2,4,1,9,10,6,6,6,9,10,10,10,10,10,10,10,10,10,10,5,6,7,3,8,2,4,1,9,10,6,6,10,10,7,7,7,6,8,4,9,9,7,3,8,4,9,10,4,3,8,4,9,10,8,8,8,10,10,6,7,3,8,2,4,1,9,10,5,6,3,8,4,9,10,0,5,6,7,3,8,2,4,1,9,10,5,6,7,3,8,2,4,1,9,10,5,6,7,3,8,2,4,1,9,10,10,10,10,10,10,10,10,10,10,10,7,10,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["char",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["literal",3]],[[],["span",3]],[[["char",15]],["literal",3]],[[],["tokenstream",3]],[[],["span",3]],[[],["tokentree",4]],[[],["group",3]],[[],["delimiter",4]],[[],["punct",3]],[[],["spacing",4]],[[],["ident",3]],[[],["literal",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ident",3]],["ordering",4]],[[]],[[],["delimiter",4]],[[["delimiter",4]],["bool",15]],[[["spacing",4]],["bool",15]],[[["ident",3]],["bool",15]],[[],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["f32",15]],["literal",3]],[[["f32",15]],["literal",3]],[[["f64",15]],["literal",3]],[[["f64",15]],["literal",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["tokentree",4]]],[[["tokenstream",3]],["tokenstream",3]],[[]],[[]],[[["span",3]],["span",3]],[[["ident",3]],["tokentree",4]],[[["punct",3]],["tokentree",4]],[[]],[[["literal",3]],["tokentree",4]],[[["group",3]],["tokentree",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["str",15]],[["lexerror",3],["result",4],["tokenstream",3]]],[[]],[[["i128",15]],["literal",3]],[[["i128",15]],["literal",3]],[[["i16",15]],["literal",3]],[[["i16",15]],["literal",3]],[[["i32",15]],["literal",3]],[[["i32",15]],["literal",3]],[[["i64",15]],["literal",3]],[[["i64",15]],["literal",3]],[[["i8",15]],["literal",3]],[[["i8",15]],["literal",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[],["bool",15]],[[["isize",15]],["literal",3]],[[["isize",15]],["literal",3]],[[["span",3]],[["option",4],["span",3]]],[[["span",3]],["span",3]],[[],["span",3]],[[],["tokenstream",3]],[[["delimiter",4],["tokenstream",3]],["group",3]],[[["spacing",4],["char",15]],["punct",3]],[[["str",15],["span",3]],["ident",3]],[[["ident",3]],[["option",4],["ordering",4]]],[[["span",3]],["span",3]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[],["spacing",4]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["tokenstream",3]],[[["str",15]],["literal",3]],[[["rangebounds",8],["usize",15]],[["option",4],["span",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u128",15]],["literal",3]],[[["u128",15]],["literal",3]],[[["u16",15]],["literal",3]],[[["u16",15]],["literal",3]],[[["u32",15]],["literal",3]],[[["u32",15]],["literal",3]],[[["u64",15]],["literal",3]],[[["u64",15]],["literal",3]],[[["u8",15]],["literal",3]],[[["u8",15]],["literal",3]],[[],["span",3]],[[["usize",15]],["literal",3]],[[["usize",15]],["literal",3]],null,[[]],[[]],[[],["intoiter",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["tokentree",4],["option",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"Spacing"],[4,"Delimiter"],[4,"TokenTree"],[3,"Punct"],[3,"LexError"],[3,"TokenStream"],[3,"Span"],[3,"Group"],[3,"Ident"],[3,"Literal"],[3,"IntoIter"]]},\
"quote":{"doc":"github crates-io docs-rs","t":[8,8,8,10,10,10,10,10,14,11,11,14,14,11,11,11,11,10],"n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":["quote","","","","","","","","","","","","","","","","",""],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,1,1,1,1,2,0,3,3,0,0,2,2,3,3,3],"f":[null,null,null,[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],null,[[],["tokenstream",3]],[[],["tokenstream",3]],null,null,[[],[["span",3],["option",4]]],[[],[["span",3],["option",4]]],[[],["tokenstream",3]],[[],["tokenstream",3]],[[["tokenstream",3]]]],"p":[[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]},\
"rand":{"doc":"Utilities for random number generation","t":[18,8,3,8,18,8,8,16,8,11,11,11,0,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,10,0,5,11,11,0,11,11,11,11,11,0,11,11,5,11,10,11,11,10,11,11,11,11,13,3,3,4,3,8,13,13,13,3,3,3,13,3,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,0,8,8,8,16,3,3,3,3,3,8,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,4,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,11,11,11,11,11,11,11,11,11,11,3,3,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,3,8,11,11,10,11,10,11,11,10,10,11,10,10,11,11,0,11,11,11,11,10,10,11,11,11,11,11,4,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CUSTOM_START","CryptoRng","Error","Fill","INTERNAL_START","Rng","RngCore","Seed","SeedableRng","borrow","borrow_mut","code","distributions","fill","fill","fill_bytes","fmt","fmt","from","from","from","from_entropy","from_rng","from_seed","gen","gen","gen_bool","gen_bool","gen_range","gen_range","gen_ratio","gen_ratio","inner","into","new","next_u32","next_u64","prelude","random","raw_os_error","read","rngs","sample","sample","sample_iter","sample_iter","seed_from_u64","seq","source","take_inner","thread_rng","to_string","try_fill","try_fill","try_fill","try_fill_bytes","try_from","try_into","type_id","vzip","AllWeightsZero","Alphanumeric","Bernoulli","BernoulliError","DistIter","Distribution","InvalidProbability","InvalidWeight","NoItem","Open01","OpenClosed01","Standard","TooMany","Uniform","WeightedError","WeightedIndex","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_ratio","into","into","into","into","into","into","into","into","into_iter","new","next","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_iter","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uniform","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weighted","SampleBorrow","SampleRange","SampleUniform","Sampler","Uniform","UniformChar","UniformDuration","UniformFloat","UniformInt","UniformSampler","X","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","is_empty","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","AllWeightsZero","InvalidWeight","NoItem","TooMany","WeightedError","WeightedIndex","alias_method","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","from","from","into","into","new","sample","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","update_weights","vzip","vzip","Weight","WeightedIndex","borrow","borrow_mut","fmt","from","into","new","try_from","try_into","type_id","vzip","OsRng","StdRng","ThreadRng","adapter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","eq","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from_rng","from_seed","into","into","into","mock","ne","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ReadError","ReadRng","ReseedingRng","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","from","from","from","into","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reseed","source","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","StepRng","borrow","borrow_mut","clone","clone_into","eq","fill_bytes","fmt","from","into","ne","new","next_u32","next_u64","to_owned","try_fill_bytes","try_from","try_into","type_id","vzip","Item","IteratorRandom","SliceChooseIter","SliceRandom","borrow","borrow_mut","choose","choose","choose_multiple","choose_multiple","choose_multiple_fill","choose_multiple_weighted","choose_mut","choose_stable","choose_weighted","choose_weighted_mut","fmt","from","index","into","into_iter","len","next","partial_shuffle","shuffle","size_hint","try_from","try_into","type_id","vzip","IndexVec","IndexVecIntoIter","IndexVecIter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","from","from","from","from","from","index","into","into","into","into_iter","into_iter","into_iter","into_vec","is_empty","iter","len","next","next","sample","sample_weighted","size_hint","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["rand","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributionsrand::distributions::uniform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributions::weighted","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributions::weighted::alias_method","","","","","","","","","","","","rand::rngs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::rngs::adapter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::rngs::mock","","","","","","","","","","","","","","","","","","","","rand::seq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::seq::index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an [<code>RngCore</code>] or …","Error type of random number generators","Types which may be filled with random data","Codes below this point represent OS Errors (i.e. positive …","An automatically-implemented extension trait on [<code>RngCore</code>] …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","","","Retrieve the error code, if any.","Generating random samples from probability distributions","Fill any type implementing [<code>Fill</code>] with random data","Fill any type implementing [<code>Fill</code>] with random data","Fill <code>dest</code> with random data.","","","","","","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Return a random value supporting the <code>Standard</code> …","Return a random value supporting the <code>Standard</code> …","Return a bool with a probability <code>p</code> of being true.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the given range.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","Return a bool with a probability of <code>numerator/denominator</code> …","Reference the inner error (<code>std</code> only)","","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Convenience re-export of common members","Generates a random value using the thread-local random …","Extract the raw OS error code (if this error came from …","","Random number generators and adapters","Sample a new value, using the given distribution.","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Sequence-related functionality","","Unwrap the inner error (<code>std</code> only)","Retrieve the lazily-initialized thread-local random …","","Fill self with random data","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data.","","","","","All items in the provided weight collection are zero.","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …","The Bernoulli distribution.","Error type returned from <code>Bernoulli::new</code>.","An iterator that generates random values of <code>T</code> with …","Types (distributions) that can be used to create a random …","<code>p < 0</code> or <code>p > 1</code>.","A weight is either less than zero, greater than the …","The provided weight collection contains no items.","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","A generic random value distribution, implemented for many …","Too many weights are provided (length greater than …","Sample values uniformly between two bounds.","Error type returned from <code>WeightedIndex::new</code>.","A distribution using weighted sampling of discrete items","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct a new <code>Bernoulli</code> with the probability of success …","","","","","","","","","","Construct a new <code>Bernoulli</code> with the given probability of …","","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an iterator that generates random values of <code>T</code>, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A distribution uniformly sampling numbers within a given …","","","","","","","","","Weighted index sampling","Helper trait similar to <code>Borrow</code> but implemented only for …","Range that supports generating a single sample …","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Sample values uniformly between two bounds.","The back-end implementing [<code>UniformSampler</code>] for <code>char</code>.","The back-end implementing [<code>UniformSampler</code>] for <code>Duration</code>.","The back-end implementing [<code>UniformSampler</code>] for …","The back-end implementing [<code>UniformSampler</code>] for integer …","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check whether the range is empty.","Construct self, with inclusive lower bound and exclusive …","Create a new <code>Uniform</code> instance which samples uniformly …","","","","","","","","","","","","","","","","","Construct self, with inclusive bounds <code>[low, high]</code>.","Create a new <code>Uniform</code> instance which samples uniformly …","","","","","","","","","","","","","","","","","Sample a value.","","","","","","","","","","","","","","","","","Generate a sample from the given range.","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All items in the provided weight collection are zero.","A weight is either less than zero, greater than the …","The provided weight collection contains no items.","Too many weights are provided (length greater than …","Error type returned from <code>WeightedIndex::new</code>.","A distribution using weighted sampling of discrete items","","","","","","","","","","","","","","","","","","Creates a new a <code>WeightedIndex</code> [<code>Distribution</code>] using the …","","","","","","","","","","","Update a subset of weights, without changing the number …","","","","","","","","","","","","","","","A random number generator that retrieves randomness from …","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","Wrappers / adapters forming RNGs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mock random number generator","","","","","","","","","","","","","","","","","","","","","","","","","","<code>ReadRng</code> error type","An RNG that reads random bytes straight from any type …","A wrapper around any PRNG that implements <code>BlockRngCore</code>, …","","","","","","","","","","","","","","","","","","","","","Create a new <code>ReadRng</code> from a <code>Read</code>.","Create a new <code>ReseedingRng</code> from an existing PRNG, combined …","","","","","Reseed the internal PRNG.","","","","","","","","","","","","","","","","","","A simple implementation of <code>RngCore</code> for testing purposes.","","","","","","","","","","","Create a <code>StepRng</code>, yielding an arithmetic sequence …","","","","","","","","","The element type.","Extension trait on iterators, providing random sampling …","An iterator over multiple slice elements.","Extension trait on slices, providing random mutation and …","","","Returns a reference to one random element of the slice, …","Choose one element at random from the iterator.","Chooses <code>amount</code> elements from the slice at random, without …","Collects <code>amount</code> values at random from the iterator into a …","Collects values at random from the iterator into a …","Similar to <code>choose_multiple</code>, but where the likelihood of …","Returns a mutable reference to one random element of the …","Choose one element at random from the iterator.","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","","","Low-level API for sampling indices","","","","","Shuffle a slice in place, but exit early.","Shuffle a mutable slice in place.","","","","","","A vector of indices.","Return type of <code>IndexVec::into_iter</code>.","Return type of <code>IndexVec::iter</code>.","","","","","","","","","","","","","","","","","","","","Return the value at the given <code>index</code>.","","","","Convert into an iterator over the indices as a sequence …","","","Return result as a <code>Vec<usize></code>. Conversion may or may not …","Returns <code>true</code> if the length is 0.","Iterate over the indices as a sequence of <code>usize</code> values","Returns the number of indices","","","Randomly sample exactly <code>amount</code> distinct indices from …","Randomly sample exactly <code>amount</code> distinct indices from …","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,1,0,0,2,0,1,1,1,0,3,3,4,1,1,1,1,1,2,2,2,3,3,3,3,3,3,3,3,1,1,1,4,4,0,0,1,4,0,3,3,3,3,2,0,1,1,0,1,5,3,3,4,1,1,1,1,6,0,0,0,0,0,7,6,6,0,0,0,6,0,0,0,8,7,9,10,11,12,13,14,8,7,9,10,11,12,13,14,8,7,9,10,11,14,8,7,9,10,11,14,7,8,7,7,9,10,11,12,13,14,8,7,9,9,9,10,11,12,13,14,8,8,7,9,10,11,12,13,14,13,8,13,15,8,9,10,10,11,11,12,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,13,8,7,9,10,11,14,7,8,7,9,10,11,12,13,14,8,7,9,10,11,12,13,14,8,7,9,10,11,12,13,14,0,8,7,9,10,11,12,13,14,0,0,0,0,16,0,0,0,0,0,0,17,18,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,23,17,9,19,19,19,19,19,19,19,19,19,19,19,19,20,21,21,22,17,9,19,19,19,19,19,19,19,19,19,19,19,19,20,21,21,22,17,19,19,19,19,19,19,19,19,19,19,19,19,20,21,21,22,23,17,19,19,19,19,19,19,19,19,19,19,19,19,21,21,17,19,19,19,19,19,19,19,19,19,19,19,19,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,6,6,6,6,0,0,0,24,6,24,6,24,6,24,6,6,24,6,6,24,6,24,6,24,24,24,6,6,24,6,24,6,24,6,24,24,6,0,0,25,25,25,25,25,25,25,25,25,25,0,0,0,0,26,27,28,26,27,28,26,27,28,26,27,28,27,28,26,26,27,28,26,27,28,26,27,28,26,26,26,27,28,0,26,26,27,28,26,27,28,26,27,28,26,27,28,26,27,28,26,27,28,26,27,28,26,27,28,0,0,0,29,30,31,29,30,31,31,31,29,31,29,30,30,31,29,30,31,29,30,31,29,31,29,31,29,31,31,30,31,30,29,31,29,30,31,29,30,31,29,30,31,29,30,31,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,0,0,0,34,34,33,35,33,35,35,33,33,35,33,33,34,34,0,34,34,34,34,33,33,34,34,34,34,34,0,0,0,36,37,38,36,37,38,36,38,36,38,36,36,37,38,36,36,36,37,38,36,36,37,38,36,37,38,36,36,36,36,37,38,0,0,37,38,36,38,36,37,38,36,37,38,36,37,38,36,37,38],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[],[["nonzerou32",3],["option",4]]],null,[[]],[[]],[[]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[["nonzerou32",3]],["error",3]],[[["error",3]],["error",3]],[[]],[[],[["error",3],["result",4]]],[[]],[[]],[[]],[[["f64",15]],["bool",15]],[[["f64",15]],["bool",15]],[[]],[[]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[],["error",8]],[[]],[[],["error",3]],[[],["u32",15]],[[],["u64",15]],null,[[]],[[],[["option",4],["i32",15]]],[[],[["usize",15],["result",4],["error",3]]],null,[[["distribution",8]]],[[["distribution",8]]],[[],["distiter",3]],[[],["distiter",3]],[[["u64",15]]],null,[[],[["option",4],["error",8]]],[[],[["error",8],["global",3],["box",3]]],[[],["threadrng",3]],[[],["string",3]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bernoulli",3]],[[],["bernoullierror",4]],[[],["uniform",3]],[[],["openclosed01",3]],[[],["open01",3]],[[],["standard",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bernoullierror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["rangeinclusive",3]],["uniform",3]],[[["range",3]],["uniform",3]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],[["result",4],["bernoulli",3],["bernoullierror",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15]],[["result",4],["bernoulli",3],["bernoullierror",4]]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["f64",15]],[[],["f32",15]],[[],["f64",15]],[[],["f32",15]],[[],["u8",15]],[[],["nonzerousize",3]],[[],["u64",15]],[[]],[[]],[[]],[[],["f32",15]],[[]],[[]],[[]],[[],["f64",15]],[[],["u8",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],["u16",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[],["wrapping",3]],[[]],[[]],[[],["u128",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[],["i8",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["char",15]],[[]],[[],["nonzerou128",3]],[[],["nonzerou64",3]],[[],["nonzerou32",3]],[[],["nonzerou16",3]],[[],["nonzerou8",3]],[[],["isize",15]],[[],["i128",15]],[[],["i64",15]],[[],["i32",15]],[[],["i16",15]],[[],["distiter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["uniformint",3]],[[],["uniformchar",3]],[[],["uniformfloat",3]],[[],["uniformduration",3]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["uniform",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["uniform",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["duration",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["weightedindex",3]],[[],["weightederror",4]],[[]],[[]],[[["weightederror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],[["result",4],["weightederror",4],["weightedindex",3]]],[[],["usize",15]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["result",4],["weightederror",4]]],[[]],[[]],null,null,[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["vec",3]],[["result",4],["weightederror",4]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["stdrng",3]],[[],["threadrng",3]],[[],["osrng",3]],[[]],[[]],[[]],[[],["threadrng",3]],[[],["osrng",3]],[[["stdrng",3]],["bool",15]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[["rngcore",8]],[["result",4],["error",3]]],[[]],[[]],[[]],[[]],null,[[["stdrng",3]],["bool",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["reseedingrng",3]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["readrng",3]],[[["u64",15]]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[],[["error",3],["result",4]]],[[],[["error",8],["option",4]]],[[]],[[],["string",3]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,[[]],[[]],[[],["steprng",3]],[[]],[[["steprng",3]],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["steprng",3]],["bool",15]],[[["u64",15]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["error",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["slicechooseiter",3]],[[["usize",15]],["vec",3]],[[],["usize",15]],[[["usize",15]],[["weightederror",4],["slicechooseiter",3],["result",4]]],[[],["option",4]],[[],["option",4]],[[],[["result",4],["weightederror",4]]],[[],[["result",4],["weightederror",4]]],[[["formatter",3]],["result",6]],[[]],null,[[]],[[]],[[],["usize",15]],[[],["option",4]],[[["usize",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["indexvec",4]],[[],["indexvecintoiter",4]],[[]],[[]],[[["indexvec",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["vec",3],["u32",15]]],[[["vec",3],["usize",15]]],[[]],[[]],[[]],[[["usize",15]],["usize",15]],[[]],[[]],[[]],[[],["indexvecintoiter",4]],[[]],[[]],[[],[["vec",3],["usize",15]]],[[],["bool",15]],[[],["indexveciter",4]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[],["option",4]],[[["usize",15]],["indexvec",4]],[[["usize",15]],[["indexvec",4],["result",4],["weightederror",4]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]]],"p":[[3,"Error"],[8,"SeedableRng"],[8,"Rng"],[8,"RngCore"],[8,"Fill"],[4,"WeightedError"],[4,"BernoulliError"],[3,"Bernoulli"],[3,"Uniform"],[3,"OpenClosed01"],[3,"Open01"],[3,"Alphanumeric"],[3,"DistIter"],[3,"Standard"],[8,"Distribution"],[8,"SampleUniform"],[8,"UniformSampler"],[8,"SampleBorrow"],[3,"UniformInt"],[3,"UniformChar"],[3,"UniformFloat"],[3,"UniformDuration"],[8,"SampleRange"],[3,"WeightedIndex"],[3,"WeightedIndex"],[3,"StdRng"],[3,"ThreadRng"],[3,"OsRng"],[3,"ReadRng"],[3,"ReadError"],[3,"ReseedingRng"],[3,"StepRng"],[8,"SliceRandom"],[3,"SliceChooseIter"],[8,"IteratorRandom"],[4,"IndexVec"],[4,"IndexVecIter"],[4,"IndexVecIntoIter"]]},\
"rand_chacha":{"doc":"The ChaCha random number generator.","t":[3,3,3,3,3,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ChaCha12Core","ChaCha12Rng","ChaCha20Core","ChaCha20Rng","ChaCha8Core","ChaCha8Rng","ChaChaCore","ChaChaRng","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_seed","from_seed","from_seed","from_seed","from_seed","from_seed","generate","generate","generate","get_word_pos","get_word_pos","get_word_pos","into","into","into","into","into","into","ne","ne","ne","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","set_stream","set_stream","set_stream","set_word_pos","set_word_pos","set_word_pos","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["rand_chacha","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["ChaCha with 12 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds","A cryptographically secure random number generator that …","ChaCha with 8 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds, low-level interface","ChaCha with 20 rounds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","","","","","","","","","","","","","","","","Set the stream number.","Set the stream number.","Set the stream number.","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,2,4,6,1,2,3,4,5,6,1,2,2,3,4,4,5,6,6,1,2,3,4,5,6,1,3,5,2,4,6,1,2,3,4,5,6,1,3,5,2,4,6,2,4,6,2,4,6,2,4,6,1,2,3,4,5,6,2,4,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6],"f":[null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["chacha20core",3]],[[],["chacha20rng",3]],[[],["chacha12core",3]],[[],["chacha12rng",3]],[[],["chacha8core",3]],[[],["chacha8rng",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["chacha20core",3]],["bool",15]],[[["chacha20rng",3]],["bool",15]],[[["chacha12core",3]],["bool",15]],[[["chacha12rng",3]],["bool",15]],[[["chacha8core",3]],["bool",15]],[[["chacha8rng",3]],["bool",15]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["chacha20core",3]]],[[]],[[["chacha12core",3]]],[[]],[[]],[[]],[[["chacha8core",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u128",15]],[[],["u128",15]],[[],["u128",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["chacha20core",3]],["bool",15]],[[["chacha12core",3]],["bool",15]],[[["chacha8core",3]],["bool",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"ChaCha20Core"],[3,"ChaCha20Rng"],[3,"ChaCha12Core"],[3,"ChaCha12Rng"],[3,"ChaCha8Core"],[3,"ChaCha8Rng"]]},\
"rand_core":{"doc":"Random number generation traits","t":[18,8,3,18,3,8,16,8,0,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,0,11,11,11,0,11,10,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,3,3,8,16,16,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5],"n":["CUSTOM_START","CryptoRng","Error","INTERNAL_START","OsRng","RngCore","Seed","SeedableRng","block","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","code","default","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from","from_entropy","from_rng","from_seed","impls","inner","into","into","le","new","next_u32","next_u32","next_u64","next_u64","raw_os_error","read","seed_from_u64","source","take_inner","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","BlockRng","BlockRng64","BlockRngCore","Item","Results","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","core","core","fill_bytes","fill_bytes","fmt","fmt","from","from","from_rng","from_rng","from_seed","from_seed","generate","generate_and_set","generate_and_set","index","index","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reset","reset","seed_from_u64","seed_from_u64","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","fill_bytes_via_next","fill_via_u32_chunks","fill_via_u64_chunks","next_u32_via_fill","next_u64_via_fill","next_u64_via_u32","read_u32_into","read_u64_into"],"q":["rand_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_core::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_core::impls","","","","","","rand_core::le",""],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an [<code>RngCore</code>] or …","Error type of random number generators","Codes below this point represent OS Errors (i.e. positive …","A random number generator that retrieves randomness from …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","The <code>BlockRngCore</code> trait and implementation helpers","","","","","","","Retrieve the error code, if any.","","Fill <code>dest</code> with random data.","","","","","","","","","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Helper functions for implementing <code>RngCore</code> functions.","Reference the inner error (<code>std</code> only)","","","Little-Endian utilities","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","","Return the next random <code>u64</code>.","","Extract the raw OS error code (if this error came from …","","Create a new PRNG using a <code>u64</code> seed.","","Unwrap the inner error (<code>std</code> only)","","","Fill <code>dest</code> entirely with random data.","","","","","","","","A wrapper type implementing [<code>RngCore</code>] for some type …","A wrapper type implementing [<code>RngCore</code>] for some type …","A trait for RNGs which do not generate random numbers …","Results element type, e.g. <code>u32</code>.","Results type. This is the ‘block’ an RNG implementing …","","","","","","","","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","","","","","","","","","","","Generate a new block of results.","Generate a new set of results immediately, setting the …","Generate a new set of results immediately, setting the …","Get the index into the result buffer.","Get the index into the result buffer.","","","Create a new <code>BlockRng</code> from an existing RNG implementing …","Create a new <code>BlockRng</code> from an existing RNG implementing …","","","","","Reset the number of available results. This will force a …","Reset the number of available results. This will force a …","","","","","","","","","","","","","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>."],"i":[1,0,0,1,0,0,2,0,0,1,3,1,3,3,3,1,3,4,3,1,1,3,1,1,1,3,2,2,2,0,1,1,3,0,1,4,3,4,3,1,4,2,1,1,3,1,4,3,1,3,1,3,1,3,0,0,0,5,5,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,5,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["osrng",3]],[[]],[[],[["nonzerou32",3],["option",4]]],[[],["osrng",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["nonzerou32",3]]],[[]],[[["error",3]]],[[]],[[]],[[["rngcore",8]],[["result",4],["error",3]]],[[]],null,[[],["error",8]],[[]],[[]],null,[[]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[],[["option",4],["i32",15]]],[[],[["result",4],["usize",15],["error",3]]],[[["u64",15]]],[[],[["option",4],["error",8]]],[[],[["box",3],["error",8]]],[[]],[[],["string",3]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["blockrng",3]],[[],["blockrng64",3]],[[]],[[]],null,null,[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["rngcore",8]],[["result",4],["error",3]]],[[["rngcore",8]],[["result",4],["error",3]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["blockrng",3]],[[],["blockrng64",3]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]]],"p":[[3,"Error"],[8,"SeedableRng"],[3,"OsRng"],[8,"RngCore"],[8,"BlockRngCore"],[3,"BlockRng"],[3,"BlockRng64"]]},\
"rawpointer":{"doc":"Rawpointer adds extra utility methods to raw pointers …","t":[8,11,11,11,10,11,11,11,11,5,11,11],"n":["PointerExt","add","dec","inc","offset","post_dec","post_inc","pre_dec","pre_inc","ptrdistance","stride_offset","sub"],"q":["rawpointer","","","","","","","","","","",""],"d":["Extension methods for raw pointers","","Decrement by 1","Increment by 1","","Decrement the pointer by 1, but return its old value.","Increment the pointer by 1, but return its old value.","Decrement the pointer by 1, and return its new value.","Increment the pointer by 1, and return its new value.","Return the number of elements of <code>T</code> from <code>start</code> to <code>end</code>. …","Offset the pointer by <code>s</code> multiplied by <code>index</code>.",""],"i":[0,1,1,1,1,1,1,1,1,0,1,1],"f":[null,[[["usize",15]]],[[]],[[]],[[["isize",15]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["isize",15],["usize",15]]],[[["usize",15]]]],"p":[[8,"PointerExt"]]},\
"rayon":{"doc":"Data-parallelism library that makes it easy to convert …","tn":["FnContext","Scope","ScopeFifo","ThreadBuilder","ThreadPool","ThreadPoolBuildError","ThreadPoolBuilder","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","breadth_first","build","build_global","build_scoped","collections","current_num_threads","current_num_threads","current_thread_has_pending_tasks","current_thread_index","current_thread_index","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","drop","drop","drop","drop","exit_handler","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","index","init","init","init","init","init","init","init","install","into","into","into","into","into","into","into","iter","join","join","join_context","migrated","name","new","new","num_threads","option","panic_handler","prelude","range","range_inclusive","result","run","scope","scope","scope_fifo","scope_fifo","slice","source","spawn","spawn","spawn","spawn_fifo","spawn_fifo","spawn_fifo","spawn_handler","stack_size","stack_size","start_handler","str","string","thread_name","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vec","binary_heap","btree_map","btree_set","hash_map","hash_set","linked_list","vec_deque","Drain","IntoIter","Iter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","len","len","len","opt_len","opt_len","opt_len","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_producer","with_producer","with_producer","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","opt_len","opt_len","opt_len","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","IntoIter","Iter","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drop","drop","fmt","fmt","from","from","init","init","into","into","into_par_iter","into_par_iter","opt_len","opt_len","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Drain","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","into_par_iter","into_par_iter","into_par_iter","into_par_iter","opt_len","opt_len","opt_len","opt_len","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Drain","IntoIter","Iter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","opt_len","opt_len","opt_len","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","opt_len","opt_len","opt_len","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Drain","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","into_par_iter","into_par_iter","into_par_iter","into_par_iter","len","len","len","len","opt_len","opt_len","opt_len","opt_len","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_producer","with_producer","with_producer","with_producer","Chain","Chunks","Cloned","Copied","Either","Empty","Enumerate","Filter","FilterMap","FlatMap","FlatMapIter","Flatten","FlattenIter","Fold","FoldWith","FromParallelIterator","IndexedParallelIterator","Inspect","Interleave","InterleaveShortest","Intersperse","IntoParallelIterator","IntoParallelRefIterator","IntoParallelRefMutIterator","Item","Item","Item","Item","Item","Item","Iter","Iter","Iter","Iter","Iter","IterBridge","Left","Map","MapInit","MapWith","MaxLen","MinLen","MultiZip","Once","PanicFuse","ParallelBridge","ParallelDrainFull","ParallelDrainRange","ParallelExtend","ParallelIterator","Positions","Repeat","RepeatN","Rev","Right","Skip","Split","StepBy","Take","TryFold","TryFoldWith","Update","WhileSome","Zip","ZipEq","all","all","any","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","chunks","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","cmp","collect","collect","collect_into_vec","copied","count","count","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","either","either_with","empty","enumerate","eq","eq","expect_left","expect_right","extend","factor_first","factor_second","filter","filter_map","find_any","find_first","find_last","find_map_any","find_map_first","find_map_last","flat_map","flat_map_iter","flatten","flatten_iter","flip","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold_with","for_each","for_each_init","for_each_with","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_par_iter","ge","gt","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inspect","interleave","interleave_shortest","intersperse","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_iter","into_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","is_left","is_right","last","le","left","left_and_then","left_or","left_or_default","left_or_else","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","lt","map","map","map_init","map_left","map_right","map_with","max","max_by","max_by_key","min","min_by","min_by_key","ne","ne","next","next_back","nth","once","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","panic_fuse","par_bridge","par_drain","par_drain","par_extend","par_extend","par_iter","par_iter_mut","partial_cmp","partial_cmp","partition","partition_map","plumbing","position_any","position_first","position_last","positions","product","reduce","reduce_with","repeat","repeatn","rev","right","right_and_then","right_or","right_or_default","right_or_else","size_hint","skip","split","step_by","sum","take","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_fold","try_fold_with","try_for_each","try_for_each_init","try_for_each_with","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reduce","try_reduce_with","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap_left","unwrap_right","unzip","unzip_into_vecs","update","while_some","with_max_len","with_min_len","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","zip","zip","zip_eq","Consumer","Folder","Folder","IntoIter","Item","Item","Output","Producer","ProducerCallback","Reducer","Reducer","Result","Result","UnindexedConsumer","UnindexedProducer","bridge","bridge_producer_consumer","bridge_unindexed","callback","complete","consume","consume_iter","fold_with","fold_with","full","full","into_folder","into_iter","max_len","min_len","reduce","split","split_at","split_at","split_off_left","to_reducer","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","len","len","len","opt_len","opt_len","opt_len","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_producer","with_producer","with_producer","ParallelBridge","par_bridge","Iter","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drive","drive","drive","drive","drive","drive","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","fmt","from","init","into","into_par_iter","len","len","len","len","len","len","len","len","len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","to_owned","try_from","try_into","type_id","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","Iter","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drive","drive","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","fmt","from","init","into","into_par_iter","len","len","len","len","len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","to_owned","try_from","try_into","type_id","with_producer","with_producer","with_producer","with_producer","with_producer","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_par_iter","into_par_iter","into_par_iter","len","len","len","opt_len","opt_len","opt_len","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_producer","with_producer","with_producer","Chunks","ChunksExact","ChunksExactMut","ChunksMut","Iter","IterMut","ParallelSlice","ParallelSliceMut","Split","SplitMut","Windows","as_parallel_slice","as_parallel_slice_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drive","drive","drive","drive","drive","drive","drive","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_remainder","len","len","len","len","len","len","len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","opt_len","par_chunks","par_chunks_exact","par_chunks_exact_mut","par_chunks_mut","par_sort","par_sort_by","par_sort_by_key","par_sort_unstable","par_sort_unstable_by","par_sort_unstable_by_key","par_split","par_split_mut","par_windows","remainder","remainder","take_remainder","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","with_producer","Bytes","CharIndices","Chars","EncodeUtf16","Lines","MatchIndices","Matches","ParallelString","Split","SplitTerminator","SplitWhitespace","as_parallel_string","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","par_bytes","par_char_indices","par_chars","par_encode_utf16","par_lines","par_match_indices","par_matches","par_split","par_split_terminator","par_split_whitespace","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Drain","borrow","borrow_mut","deref","deref_mut","drive_unindexed","drop","drop","fmt","from","init","into","into_par_iter","try_from","try_into","type_id","Drain","IntoIter","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drive","drive","drive_unindexed","drive_unindexed","drop","drop","drop","fmt","fmt","from","from","init","init","into","into","into_par_iter","into_par_iter","len","len","opt_len","opt_len","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_producer","with_producer"],"q":["rayon","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections","","","","","","","rayon::collections::binary_heap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::btree_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::btree_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::hash_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::hash_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::linked_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::vec_deque","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::iterrayon::iter::plumbing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::option","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::prelude","","rayon::range","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::range_inclusive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::result","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::slicerayon::strrayon::string","","","","","","","","","","","","","","","","rayon::vec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Provides the calling context to a closure called by …","Represents a fork-join scope which can be used to spawn …","Represents a fork-join scope which can be used to spawn …","Thread builder used for customization via …","Represents a user created thread-pool.","Error when initializing a thread pool.","Used to create a new <code>ThreadPool</code> or to configure the …","","","","","","","","","","","","","","","<strong>(DEPRECATED)</strong> Suggest to worker threads that they execute …","Creates a new <code>ThreadPool</code> initialized using this …","Initializes the global thread pool. This initialization is…","Creates a scoped <code>ThreadPool</code> initialized using this …","Parallel iterator types for standard collections","Returns the number of threads in the current registry. If …","Returns the (current) number of threads in the thread …","Returns true if the current worker thread currently has …","If called from a Rayon worker thread, returns the index …","If called from a Rayon worker thread in this thread-pool, …","","","","","","","","","","","","","","","","","","","","","","","","","Sets a callback to be invoked on thread exit.","","","","","","","","","","","","","","","","Gets the index of this thread in the pool, within …","","","","","","","","Executes <code>op</code> within the threadpool. Any attempts to use …","","","","","","","","Traits for writing parallel programs using an …","Takes two closures and <em>potentially</em> runs them in parallel. …","Execute <code>oper_a</code> and <code>oper_b</code> in the thread-pool and return …","Identical to <code>join</code>, except that the closures have a …","Returns <code>true</code> if the closure was called from a different …","Gets the string that was specified by …","Deprecated in favor of <code>ThreadPoolBuilder::build</code>.","Creates and returns a valid rayon thread pool builder, …","Sets the number of threads to be used in the rayon …","Parallel iterator types for options","Normally, whenever Rayon catches a panic, it tries to …","The rayon prelude imports the various <code>ParallelIterator</code> …","Parallel iterator types for ranges, the type for values …","Parallel iterator types for inclusive ranges, the type …","Parallel iterator types for results","Executes the main loop for this thread. This will not …","Creates a “fork-join” scope <code>s</code> and invokes the closure …","Creates a scope that executes within this thread-pool. …","Creates a “fork-join” scope <code>s</code> with FIFO order, and …","Creates a scope that executes within this thread-pool. …","Parallel iterator types for slices","","Fires off a task into the Rayon threadpool in the “…","Spawns a job into the fork-join scope <code>self</code>. This job will …","Spawns an asynchronous task in this thread-pool. This …","Fires off a task into the Rayon threadpool in the “…","Spawns a job into the fork-join scope <code>self</code>. This job will …","Spawns an asynchronous task in this thread-pool. This …","Sets a custom function for spawning threads.","Gets the value that was specified by …","Sets the stack size of the worker threads","Sets a callback to be invoked on thread start.","Parallel iterator types for strings","This module contains the parallel iterator types for …","Sets a closure which takes a thread index and returns the …","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator types for vectors (<code>Vec<T></code>)","This module contains the parallel iterator types for heaps…","This module contains the parallel iterator types for …","This module contains the parallel iterator types for …","This module contains the parallel iterator types for hash …","This module contains the parallel iterator types for hash …","This module contains the parallel iterator types for …","This module contains the parallel iterator types for …","Draining parallel iterator that moves out of a binary …","Parallel iterator over a binary heap","Parallel iterator over an immutable reference to a binary …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over a B-Tree map","Parallel iterator over an immutable reference to a B-Tree …","Parallel iterator over a mutable reference to a B-Tree map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over a B-Tree set","Parallel iterator over an immutable reference to a B-Tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Draining parallel iterator that moves out of a hash map, …","Parallel iterator over a hash map","Parallel iterator over an immutable reference to a hash …","Parallel iterator over a mutable reference to a hash map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Draining parallel iterator that moves out of a hash set, …","Parallel iterator over a hash set","Parallel iterator over an immutable reference to a hash …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over a linked list","Parallel iterator over an immutable reference to a linked …","Parallel iterator over a mutable reference to a linked …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Draining parallel iterator that moves a range out of a …","Parallel iterator over a double-ended queue","Parallel iterator over an immutable reference to a …","Parallel iterator over a mutable reference to a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Chain</code> is an iterator that joins <code>b</code> after <code>a</code> in one …","<code>Chunks</code> is an iterator that groups elements of an …","<code>Cloned</code> is an iterator that clones the elements of an …","<code>Copied</code> is an iterator that copies the elements of an …","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","Iterator adaptor for the <code>empty()</code> function.","<code>Enumerate</code> is an iterator that returns the current count …","<code>Filter</code> takes a predicate <code>filter_op</code> and filters out …","<code>FilterMap</code> creates an iterator that uses <code>filter_op</code> to both …","<code>FlatMap</code> maps each element to a parallel iterator, then …","<code>FlatMapIter</code> maps each element to a serial iterator, then …","<code>Flatten</code> turns each element to a parallel iterator, then …","<code>FlattenIter</code> turns each element to a serial iterator, then …","<code>Fold</code> is an iterator that applies a function over an …","<code>FoldWith</code> is an iterator that applies a function over an …","<code>FromParallelIterator</code> implements the creation of a …","An iterator that supports “random access” to its …","<code>Inspect</code> is an iterator that calls a function with a …","<code>Interleave</code> is an iterator that interleaves elements of …","<code>InterleaveShortest</code> is an iterator that works similarly to …","<code>Intersperse</code> is an iterator that inserts a particular item …","<code>IntoParallelIterator</code> implements the conversion to a …","<code>IntoParallelRefIterator</code> implements the conversion to a …","<code>IntoParallelRefMutIterator</code> implements the conversion to a …","The type of item that the parallel iterator will produce.","The type of item that the parallel iterator will produce. …","The type of item that will be produced; this is typically …","The type of item that this parallel iterator produces. …","The type of item that the parallel iterator will produce. …","The type of item that the parallel iterator will produce. …","The parallel iterator type that will be created.","The type of the parallel iterator that will be returned.","The type of iterator that will be created.","The draining parallel iterator type that will be created.","The draining parallel iterator type that will be created.","<code>IterBridge</code> is a parallel iterator that wraps a sequential …","A value of type <code>L</code>.","<code>Map</code> is an iterator that transforms the elements of an …","<code>MapInit</code> is an iterator that transforms the elements of an …","<code>MapWith</code> is an iterator that transforms the elements of an …","<code>MaxLen</code> is an iterator that imposes a maximum length on …","<code>MinLen</code> is an iterator that imposes a minimum length on …","<code>MultiZip</code> is an iterator that zips up a tuple of parallel …","Iterator adaptor for the <code>once()</code> function.","<code>PanicFuse</code> is an adaptor that wraps an iterator with a …","Conversion trait to convert an <code>Iterator</code> to a …","<code>ParallelDrainFull</code> creates a parallel iterator that moves …","<code>ParallelDrainRange</code> creates a parallel iterator that moves …","<code>ParallelExtend</code> extends an existing collection with items …","Parallel version of the standard iterator trait.","<code>Positions</code> takes a predicate <code>predicate</code> and filters out …","Iterator adaptor for the <code>repeat()</code> function.","Iterator adaptor for the <code>repeatn()</code> function.","<code>Rev</code> is an iterator that produces elements in reverse …","A value of type <code>R</code>.","<code>Skip</code> is an iterator that skips over the first <code>n</code> elements. …","<code>Split</code> is a parallel iterator using arbitrary data and a …","<code>StepBy</code> is an iterator that skips <code>n</code> elements between each …","<code>Take</code> is an iterator that iterates over the first <code>n</code> …","<code>TryFold</code> is an iterator that applies a function over an …","<code>TryFoldWith</code> is an iterator that applies a function over …","<code>Update</code> is an iterator that mutates the elements of an …","<code>WhileSome</code> is an iterator that yields the <code>Some</code> elements of …","<code>Zip</code> is an iterator that zips up <code>a</code> and <code>b</code> into a single …","An <code>IndexedParallelIterator</code> that iterates over two …","Tests that every item in the parallel iterator matches …","","Searches for <strong>some</strong> item in the parallel iterator that …","Convert <code>&mut Either<L, R></code> to <code>Either<&mut L, &mut R></code>.","","","","","Convert <code>&Either<L, R></code> to <code>Either<&L, &R></code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes two iterators and creates a new iterator over both.","Splits an iterator up into fixed-size chunks.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an iterator which clones all of its elements.  …","Lexicographically compares the elements of this …","","Creates a fresh collection containing all the elements …","","Collects the results of the iterator into the specified …","Creates an iterator which copies all of its elements.  …","Counts the number of items in this parallel iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Internal method used to define the behavior of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Internal method used to define the behavior of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Apply one of two functions depending on contents, …","Like <code>either</code>, but provide some context to whichever of the …","Creates a parallel iterator that produces nothing.","Yields an index along with each item.","Determines if the elements of this <code>ParallelIterator</code> are …","","Returns the left value","Returns the right value","","Factor out a homogeneous type from an either of pairs.","Factor out a homogeneous type from an either of pairs.","Applies <code>filter_op</code> to each item of this iterator, …","Applies <code>filter_op</code> to each item of this iterator to get an …","Searches for <strong>some</strong> item in the parallel iterator that …","Searches for the sequentially <strong>first</strong> item in the parallel …","Searches for the sequentially <strong>last</strong> item in the parallel …","Applies the given predicate to the items in the parallel …","Applies the given predicate to the items in the parallel …","Applies the given predicate to the items in the parallel …","Applies <code>map_op</code> to each item of this iterator to get …","Applies <code>map_op</code> to each item of this iterator to get …","An adaptor that flattens parallel-iterable <code>Item</code>s into one …","An adaptor that flattens serial-iterable <code>Item</code>s into one …","Convert <code>Either<L, R></code> to <code>Either<R, L></code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel fold is similar to sequential fold except that …","","Applies <code>fold_op</code> to the given <code>init</code> value with each item of …","Executes <code>OP</code> on each item produced by the iterator, in …","Executes <code>OP</code> on a value returned by <code>init</code> with each item …","Executes <code>OP</code> on the given <code>init</code> value with each item …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an instance of the collection from the parallel …","Determines if the elements of this <code>ParallelIterator</code> are …","Determines if the elements of this <code>ParallelIterator</code> are …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies <code>inspect_op</code> to a reference to each item of this …","Interleaves elements of this iterator and the other given …","Interleaves elements of this iterator and the other given …","Intersperses clones of an element between items of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extract the value of an either over two equivalent types.","","Convert the inner value to an iterator.","Converts <code>self</code> into a parallel iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","","Determines if the elements of this <code>ParallelIterator</code> are …","Convert the left side of <code>Either<L, R></code> to an <code>Option<L></code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","Produces an exact count of how many items this iterator …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Determines if the elements of this <code>ParallelIterator</code> are …","Applies <code>map_op</code> to each item of this iterator, producing a …","Map <code>f</code> over the contained value and return the result in …","Applies <code>map_op</code> to a value returned by <code>init</code> with each item …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Applies <code>map_op</code> to the given <code>init</code> value with each item of …","Computes the maximum of all the items in the iterator. If …","Computes the maximum of all the items in the iterator …","Computes the item that yields the maximum value for the …","Computes the minimum of all the items in the iterator. If …","Computes the minimum of all the items in the iterator …","Computes the item that yields the minimum value for the …","Determines if the elements of this <code>ParallelIterator</code> are …","","","","","Creates a parallel iterator that produces an element …","","Internal method used to define the behavior of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wraps an iterator with a fuse in case of panics, to halt …","Creates a bridge from this type to a <code>ParallelIterator</code>.","Returns a draining parallel iterator over an entire …","Returns a draining parallel iterator over a range of the …","Extends an instance of the collection with the elements …","","Converts <code>self</code> into a parallel iterator.","Creates the parallel iterator from <code>self</code>.","Lexicographically compares the elements of this …","","Partitions the items of a parallel iterator into a pair …","Partitions and maps the items of a parallel iterator into …","Traits and functions used to implement parallel …","Searches for <strong>some</strong> item in the parallel iterator that …","Searches for the sequentially <strong>first</strong> item in the parallel …","Searches for the sequentially <strong>last</strong> item in the parallel …","Searches for items in the parallel iterator that match …","Multiplies all the items in the iterator.","Reduces the items in the iterator into one item using <code>op</code>. …","Reduces the items in the iterator into one item using <code>op</code>. …","Creates a parallel iterator that endlessly repeats <code>elt</code> (by…","Creates a parallel iterator that produces <code>n</code> repeats of <code>elt</code>…","Produces a new iterator with the elements of this …","Convert the right side of <code>Either<L, R></code> to an <code>Option<R></code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","Creates an iterator that skips the first <code>n</code> elements.","The <code>split</code> function takes arbitrary data and a closure …","Creates an iterator that steps by the given amount","Sums up the items in the iterator.","Creates an iterator that yields the first <code>n</code> elements.","Takes only <code>n</code> repeats of the element, similar to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs a fallible parallel fold.","Performs a fallible parallel fold with a cloneable <code>init</code> …","Executes a fallible <code>OP</code> on each item produced by the …","Executes a fallible <code>OP</code> on a value returned by <code>init</code> with …","Executes a fallible <code>OP</code> on the given <code>init</code> value with each …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reduces the items in the iterator into one item using a …","Reduces the items in the iterator into one item using a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the left value","Returns the right value","Unzips the items of a parallel iterator into a pair of …","Unzips the results of the iterator into the specified …","Mutates each item of this iterator before yielding it.","Creates an iterator over the <code>Some</code> items of this iterator, …","Sets the maximum length of iterators desired to process …","Sets the minimum length of iterators desired to process …","Internal method used to define the behavior of this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterates over tuples <code>(A, B)</code>, where the items <code>A</code> are from …","Iterates tuples, repeating the element with items from …","The same as <code>Zip</code>, but requires that both iterators have …","A consumer is effectively a generalized “fold” …","The <code>Folder</code> trait encapsulates the standard fold operation…","The type of folder that this consumer can be converted …","The type of iterator we will become.","The type of item that will be produced by this producer …","The type of item returned by this producer.","The type of value returned by this callback. Analogous to …","A <code>Producer</code> is effectively a “splittable <code>IntoIterator</code>”…","The <code>ProducerCallback</code> trait is a kind of generic closure, …","The reducer is the final step of a <code>Consumer</code> – after a …","The type of reducer that is produced if this consumer is …","The type of result that this consumer will ultimately …","The type of result that will ultimately be produced by …","A stateless consumer can be freely copied. These …","A variant on <code>Producer</code> which does not know its exact …","This helper function is used to “connect” a parallel …","This helper function is used to “connect” a producer …","A variant of <code>bridge_producer_consumer</code> where the producer …","Invokes the callback with the given producer as argument. …","Finish consuming items, produce final result.","Consume next item and return new sequential state.","Consume items from the iterator until full, and return …","Iterate the producer, feeding each element to <code>folder</code>, and …","Iterate the producer, feeding each element to <code>folder</code>, and …","Hint whether this <code>Consumer</code> would like to stop processing …","Hint whether this <code>Folder</code> would like to stop processing …","Convert the consumer into a folder that can consume items …","Convert <code>self</code> into an iterator; at this point, no more …","The maximum number of items that we will process …","The minimum number of items that we will process …","Reduce two final results into one; this is executed after …","Split midway into a new producer if possible, otherwise …","Split into two producers; one produces items <code>0..index</code>, the…","Divide the consumer into two consumers, one processing …","Splits off a “left” consumer and returns it. The <code>self</code> …","Creates a reducer that can be used to combine the results …","A parallel iterator over the value in <code>Some</code> variant of an …","A parallel iterator over a reference to the <code>Some</code> variant …","A parallel iterator over a mutable reference to the <code>Some</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Conversion trait to convert an <code>Iterator</code> to a …","Creates a bridge from this type to a <code>ParallelIterator</code>.","Parallel iterator over a range, implemented for all …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over an inclusive range, implemented …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over a result","Parallel iterator over an immutable reference to a result","Parallel iterator over a mutable reference to a result","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over immutable non-overlapping chunks …","Parallel iterator over immutable non-overlapping chunks …","Parallel iterator over mutable non-overlapping chunks of …","Parallel iterator over mutable non-overlapping chunks of …","Parallel iterator over immutable items in a slice","Parallel iterator over mutable items in a slice","Parallel extensions for slices.","Parallel extensions for mutable slices.","Parallel iterator over slices separated by a predicate","Parallel iterator over mutable slices separated by a …","Parallel iterator over immutable overlapping windows of a …","Returns a plain slice, which is used to implement the …","Returns a plain mutable slice, which is used to implement …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the remainder of the original slice that is not …","","","","","","","","","","","","","","","Returns a parallel iterator over at most <code>chunk_size</code> …","Returns a parallel iterator over <code>chunk_size</code> elements of …","Returns a parallel iterator over <code>chunk_size</code> elements of …","Returns a parallel iterator over at most <code>chunk_size</code> …","Sorts the slice in parallel.","Sorts the slice in parallel with a comparator function.","Sorts the slice in parallel with a key extraction …","Sorts the slice in parallel, but may not preserve the …","Sorts the slice in parallel with a comparator function, …","Sorts the slice in parallel with a key extraction …","Returns a parallel iterator over subslices separated by …","Returns a parallel iterator over mutable subslices …","Returns a parallel iterator over all contiguous windows …","Return the remainder of the original slice that is not …","Return the remainder of the original slice that is not …","Return the remainder of the original slice that is not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel iterator over the bytes of a string","Parallel iterator over the characters of a string, with …","Parallel iterator over the characters of a string","Parallel iterator over a string encoded as UTF-16","Parallel iterator over lines in a string","Parallel iterator over substrings that match a pattern, …","Parallel iterator over substrings that match a pattern","Parallel extensions for strings.","Parallel iterator over substrings separated by a pattern","Parallel iterator over substrings separated by a …","Parallel iterator over substrings separated by whitespace","Returns a plain string slice, which is used to implement …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a parallel iterator over the bytes of a string.","Returns a parallel iterator over the characters of a …","Returns a parallel iterator over the characters of a …","Returns a parallel iterator over a string encoded as …","Returns a parallel iterator over the lines of a string, …","Returns a parallel iterator over substrings that match a …","Returns a parallel iterator over substrings that match a …","Returns a parallel iterator over substrings separated by a…","Returns a parallel iterator over substrings terminated by …","Returns a parallel iterator over the sub-slices of a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Draining parallel iterator that moves a range of …","","","","","","","","","","","","","","","","Draining parallel iterator that moves a range out of a …","Parallel iterator that moves out of a vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,2,3,4,5,6,7,1,2,3,4,5,6,7,5,5,5,5,0,0,4,4,0,4,5,1,2,3,4,5,6,7,1,2,3,4,5,6,7,6,1,2,3,4,4,5,6,7,5,1,2,3,4,5,6,6,7,1,2,3,4,5,6,7,1,1,2,3,4,5,6,7,4,1,2,3,4,5,6,7,0,0,4,0,7,1,4,5,5,0,5,0,0,0,0,1,0,4,0,4,0,6,0,2,4,0,3,4,5,1,5,5,0,0,5,6,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,0,0,0,0,0,0,0,0,0,0,0,8,9,10,8,9,10,8,9,8,9,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,8,9,10,8,9,10,8,9,10,8,9,10,0,0,0,11,12,13,11,12,13,12,12,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,11,12,13,12,11,12,13,11,12,13,11,12,13,0,0,14,15,14,15,15,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,15,14,15,14,15,14,15,0,0,0,0,16,17,18,19,16,17,18,19,17,17,16,17,18,19,16,17,18,19,16,17,18,19,16,17,18,19,16,17,18,19,16,17,18,19,16,17,18,19,16,17,18,19,16,17,18,19,16,17,18,19,17,16,17,18,19,16,17,18,19,16,17,18,19,0,0,0,20,21,22,20,21,22,21,21,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,21,20,21,22,20,21,22,20,21,22,0,0,0,23,24,25,23,24,25,23,24,23,24,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,23,24,25,23,24,25,23,24,25,0,0,0,0,26,27,28,29,26,27,28,29,26,27,26,27,26,27,28,29,26,27,28,29,26,27,28,29,26,27,28,29,26,27,28,29,29,26,27,28,29,26,27,28,29,26,27,28,29,26,27,28,29,26,27,28,29,26,27,28,29,26,27,28,29,26,27,26,27,28,29,26,27,28,29,26,27,28,29,26,27,28,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,31,32,33,34,35,30,31,32,34,35,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,0,0,0,33,36,33,36,36,36,36,36,36,36,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,36,33,78,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,36,33,78,36,33,36,78,33,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,36,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,36,36,78,37,38,39,40,41,42,51,52,53,54,55,56,57,58,59,60,60,60,60,60,60,60,60,60,60,60,60,61,62,66,67,68,70,73,75,76,77,36,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,60,60,60,60,60,60,60,60,60,60,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,36,36,36,0,78,78,36,36,36,36,36,36,33,33,33,33,33,33,33,33,33,33,33,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,36,36,33,36,33,33,33,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,36,36,79,78,78,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,36,33,78,78,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,36,36,36,36,36,30,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,36,36,36,36,78,36,36,36,36,36,78,37,38,39,40,41,42,51,52,53,54,55,56,57,58,59,60,60,60,60,60,60,60,60,60,60,60,60,61,62,66,67,68,70,73,75,76,77,36,78,33,36,33,36,36,33,33,33,33,33,33,33,78,36,36,36,36,0,37,33,38,39,40,41,42,51,52,53,54,55,56,57,58,59,60,60,60,60,60,60,60,60,60,60,60,60,61,62,66,67,68,70,73,75,76,77,36,33,80,34,35,81,36,31,32,78,36,33,33,0,78,78,78,78,33,33,33,0,0,78,36,36,36,36,36,36,78,0,78,33,78,65,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,36,36,33,33,33,33,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,36,33,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,36,36,36,33,78,33,33,78,78,78,37,38,39,40,41,42,51,52,53,54,55,56,57,58,59,60,60,60,60,60,60,60,60,60,60,60,60,61,62,66,67,68,70,73,75,76,77,36,78,65,78,0,0,82,83,83,84,85,0,0,0,82,82,86,0,0,0,0,0,85,86,86,86,84,83,82,86,82,83,83,83,87,84,83,82,88,88,0,0,0,89,90,91,89,90,91,89,90,89,90,89,90,91,89,90,91,89,90,91,89,90,91,89,90,91,89,90,91,89,90,91,89,90,91,89,90,91,89,90,91,89,90,91,89,90,91,89,90,89,90,91,89,90,91,89,90,91,89,90,91,0,80,0,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,0,0,0,94,95,96,94,95,96,94,95,94,95,94,95,96,94,95,96,94,95,96,94,95,96,94,95,96,94,95,96,94,95,96,94,95,96,94,95,96,94,95,96,94,95,96,94,95,96,94,95,94,95,96,94,95,96,94,95,96,94,95,96,0,0,0,0,0,0,0,0,0,0,0,97,98,99,100,101,102,103,104,105,106,107,99,100,101,102,103,104,105,106,107,99,101,102,103,104,99,101,102,103,104,99,100,101,102,103,104,105,106,107,99,100,101,102,103,104,105,106,107,101,102,103,104,105,106,107,99,100,101,102,103,104,105,106,107,99,100,101,102,103,104,105,106,107,99,100,101,102,103,104,105,106,107,99,100,101,102,103,104,105,106,107,99,100,101,102,103,104,105,106,107,99,100,101,102,103,104,105,106,107,99,100,101,102,103,104,105,106,107,107,101,102,103,104,105,106,107,101,102,103,104,105,106,107,97,97,98,98,98,98,98,98,98,98,97,98,97,103,107,107,99,101,102,103,104,99,100,101,102,103,104,105,106,107,99,100,101,102,103,104,105,106,107,99,100,101,102,103,104,105,106,107,101,102,103,104,105,106,107,0,0,0,0,0,0,0,0,0,0,0,108,109,110,111,112,113,114,115,116,117,118,109,110,111,112,113,114,115,116,117,118,109,110,111,112,113,114,115,116,117,118,109,110,111,112,113,114,115,116,117,118,109,110,111,112,113,114,115,116,117,118,109,110,111,112,113,114,115,116,117,118,109,110,111,112,113,114,115,116,117,118,109,110,111,112,113,114,115,116,117,118,109,110,111,112,113,114,115,116,117,118,109,110,111,112,113,114,115,116,117,118,109,110,111,112,113,114,115,116,117,118,109,110,111,112,113,114,115,116,117,118,109,110,111,112,113,114,115,116,117,118,108,108,108,108,108,108,108,108,108,108,109,110,111,112,113,114,115,116,117,118,109,110,111,112,113,114,115,116,117,118,109,110,111,112,113,114,115,116,117,118,109,110,111,112,113,114,115,116,117,118,0,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,0,0,120,121,120,121,120,120,120,121,120,121,120,121,120,121,120,121,121,120,121,120,121,120,121,120,121,120,121,120,121,120,121,120,120,121,120,121,120,121,120,121],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["threadpoolbuilder",3]],[[],[["result",4],["threadpoolbuilderror",3],["threadpool",3]]],[[],[["threadpoolbuilderror",3],["result",4]]],[[],[["threadpoolbuilderror",3],["result",4]]],null,[[],["usize",15]],[[],["usize",15]],[[],[["option",4],["bool",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["threadpoolbuilder",3],["defaultspawn",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["str",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["threadpoolbuilder",3]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[],["bool",15]],[[],[["str",15],["option",4]]],[[["configuration",3]],[["box",3],["result",4],["threadpool",3]]],[[],[["threadpoolbuilder",3],["defaultspawn",3]]],[[["usize",15]],["threadpoolbuilder",3]],null,[[],["threadpoolbuilder",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,[[],[["option",4],["error",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["threadpoolbuilder",3],["customspawn",3]]],[[],[["option",4],["usize",15]]],[[["usize",15]],["threadpoolbuilder",3]],[[],["threadpoolbuilder",3]],null,null,[[],["threadpoolbuilder",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["either",4]],[[]],[[]],[[],["str",15]],[[]],[[],["either",4]],[[]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["chain",3]],[[["usize",15]],["chunks",3]],[[]],[[],["chain",3]],[[],["chunks",3]],[[],["cloned",3]],[[],["copied",3]],[[],["enumerate",3]],[[],["filter",3]],[[],["filtermap",3]],[[],["flatmap",3]],[[],["flatmapiter",3]],[[],["flatten",3]],[[],["flatteniter",3]],[[],["fold",3]],[[],["foldwith",3]],[[],["inspect",3]],[[],["interleave",3]],[[],["interleaveshortest",3]],[[],["intersperse",3]],[[],["minlen",3]],[[],["maxlen",3]],[[],["map",3]],[[],["mapwith",3]],[[],["mapinit",3]],[[],["multizip",3]],[[],["once",3]],[[],["panicfuse",3]],[[],["iterbridge",3]],[[],["positions",3]],[[],["repeat",3]],[[],["repeatn",3]],[[],["rev",3]],[[],["skip",3]],[[],["split",3]],[[],["take",3]],[[],["tryfold",3]],[[],["tryfoldwith",3]],[[],["update",3]],[[],["whilesome",3]],[[],["zip",3]],[[],["zipeq",3]],[[],["stepby",3]],[[],["either",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cloned",3]],[[],["ordering",4]],[[["either",4]],["ordering",4]],[[]],[[]],[[["vec",3]]],[[],["copied",3]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["consumer",8]]],[[]],[[]],[[]],[[]],[[]],[[["consumer",8]]],[[]],[[]],[[]],[[]],[[["consumer",8]]],[[["consumer",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["consumer",8]]],[[["consumer",8]]],[[["consumer",8]]],[[]],[[]],[[]],[[["consumer",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],[["send",8],["empty",3]]],[[],["enumerate",3]],[[],["bool",15]],[[["either",4]],["bool",15]],[[["str",15]]],[[["str",15]]],[[]],[[]],[[]],[[],["filter",3]],[[],["filtermap",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["flatmap",3]],[[],["flatmapiter",3]],[[],["flatten",3]],[[],["flatteniter",3]],[[],["either",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[],["fold",3]],[[]],[[],["foldwith",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["result",4]],["either",4]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["inspect",3]],[[],["interleave",3]],[[],["interleaveshortest",3]],[[],["intersperse",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["either",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["bool",15]],[[],["option",4]],[[],["either",4]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[],["map",3]],[[],["either",4]],[[],["mapinit",3]],[[],["either",4]],[[],["either",4]],[[],["mapwith",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[["either",4]],["bool",15]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["send",8]],[["once",3],["send",8]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],["panicfuse",3]],[[],["iterbridge",3]],[[]],[[["rangebounds",8]]],[[]],[[]],[[]],[[]],[[],[["option",4],["ordering",4]]],[[["either",4]],[["ordering",4],["option",4]]],[[]],[[]],null,[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],["positions",3]],[[]],[[]],[[],["option",4]],[[["clone",8],["send",8]],[["repeat",3],["clone",8],["send",8]]],[[["clone",8],["send",8],["usize",15]],[["repeatn",3],["clone",8],["send",8]]],[[],["rev",3]],[[],["option",4]],[[],["either",4]],[[]],[[]],[[]],[[]],[[["usize",15]],["skip",3]],[[],["split",3]],[[["usize",15]],["stepby",3]],[[]],[[["usize",15]],["take",3]],[[["usize",15]],["repeatn",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["tryfold",3]],[[],["tryfoldwith",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["option",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[["vec",3],["vec",3]]],[[],["update",3]],[[],["whilesome",3]],[[["usize",15]],["maxlen",3]],[[["usize",15]],["minlen",3]],[[["producercallback",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["zip",3]],[[],[["zip",3],["repeatn",3]]],[[],["zipeq",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,[[],["iterbridge",3]],null,[[]],[[]],[[],["iter",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[],["iter",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[["usize",15]],["chunks",3]],[[["usize",15]],["chunksexact",3]],[[["usize",15]],["chunksexactmut",3]],[[["usize",15]],["chunksmut",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["split",3]],[[],["splitmut",3]],[[["usize",15]],["windows",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["chars",3]],[[],["charindices",3]],[[],["bytes",3]],[[],["encodeutf16",3]],[[],["split",3]],[[],["splitterminator",3]],[[],["lines",3]],[[],["splitwhitespace",3]],[[],["matches",3]],[[],["matchindices",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bytes",3]],[[],["charindices",3]],[[],["chars",3]],[[],["encodeutf16",3]],[[],["lines",3]],[[["pattern",8]],[["matchindices",3],["pattern",8]]],[[["pattern",8]],[["matches",3],["pattern",8]]],[[["pattern",8]],[["split",3],["pattern",8]]],[[["pattern",8]],[["splitterminator",3],["pattern",8]]],[[],["splitwhitespace",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]]],"p":[[3,"ThreadBuilder"],[3,"Scope"],[3,"ScopeFifo"],[3,"ThreadPool"],[3,"ThreadPoolBuilder"],[3,"ThreadPoolBuildError"],[3,"FnContext"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Drain"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ParallelIterator"],[8,"ParallelDrainFull"],[8,"ParallelDrainRange"],[4,"Either"],[3,"Empty"],[3,"Chain"],[3,"Chunks"],[3,"Cloned"],[3,"Copied"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[3,"FlatMapIter"],[3,"Flatten"],[3,"FlattenIter"],[3,"Fold"],[3,"FoldWith"],[3,"Inspect"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Intersperse"],[3,"MinLen"],[3,"MaxLen"],[3,"Map"],[3,"MapWith"],[3,"MapInit"],[3,"MultiZip"],[3,"Once"],[3,"PanicFuse"],[3,"IterBridge"],[3,"Positions"],[3,"Repeat"],[3,"RepeatN"],[3,"Rev"],[3,"Skip"],[3,"Split"],[3,"Take"],[3,"TryFold"],[3,"TryFoldWith"],[3,"Update"],[3,"WhileSome"],[3,"Zip"],[3,"ZipEq"],[3,"StepBy"],[8,"IndexedParallelIterator"],[8,"FromParallelIterator"],[8,"ParallelBridge"],[8,"ParallelExtend"],[8,"Consumer"],[8,"Producer"],[8,"UnindexedProducer"],[8,"ProducerCallback"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"ParallelSlice"],[8,"ParallelSliceMut"],[3,"Split"],[3,"SplitMut"],[3,"Iter"],[3,"Chunks"],[3,"ChunksExact"],[3,"Windows"],[3,"IterMut"],[3,"ChunksMut"],[3,"ChunksExactMut"],[8,"ParallelString"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"EncodeUtf16"],[3,"Split"],[3,"SplitTerminator"],[3,"Lines"],[3,"SplitWhitespace"],[3,"Matches"],[3,"MatchIndices"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"]]},\
"rayon_core":{"doc":"Under construction","t":[3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Configuration","FnContext","Scope","ScopeFifo","ThreadBuilder","ThreadPool","ThreadPoolBuildError","ThreadPoolBuilder","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","breadth_first","breadth_first","build","build","build_global","build_scoped","current_num_threads","current_num_threads","current_thread_has_pending_tasks","current_thread_has_pending_tasks","current_thread_index","current_thread_index","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","drop","drop","drop","drop","drop","drop","drop","drop","drop","exit_handler","exit_handler","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","index","init","init","init","init","init","init","init","init","initialize","install","into","into","into","into","into","into","into","into","join","join","join_context","migrated","name","new","new","new","num_threads","num_threads","panic_handler","panic_handler","run","scope","scope","scope_fifo","scope_fifo","source","spawn","spawn","spawn","spawn_fifo","spawn_fifo","spawn_fifo","spawn_handler","stack_size","stack_size","stack_size","start_handler","start_handler","thread_name","thread_name","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["rayon_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Contains the rayon thread pool configuration. Use …","Provides the calling context to a closure called by …","Represents a fork-join scope which can be used to spawn …","Represents a fork-join scope which can be used to spawn …","Thread builder used for customization via …","Represents a user created thread-pool.","Error when initializing a thread pool.","Used to create a new <code>ThreadPool</code> or to configure the …","","","","","","","","","","","","","","","","","<strong>(DEPRECATED)</strong> Suggest to worker threads that they execute …","Deprecated in favor of <code>ThreadPoolBuilder::breadth_first</code>.","Creates a new <code>ThreadPool</code> initialized using this …","Deprecated in favor of <code>ThreadPoolBuilder::build</code>.","Initializes the global thread pool. This initialization is…","Creates a scoped <code>ThreadPool</code> initialized using this …","Returns the number of threads in the current registry. If …","Returns the (current) number of threads in the thread …","If called from a Rayon worker thread, indicates whether …","Returns true if the current worker thread currently has …","If called from a Rayon worker thread, returns the index …","If called from a Rayon worker thread in this thread-pool, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets a callback to be invoked on thread exit.","Deprecated in favor of <code>ThreadPoolBuilder::exit_handler</code>.","","","","","","","","","","","","","","","","","","Gets the index of this thread in the pool, within …","","","","","","","","","Deprecated in favor of <code>ThreadPoolBuilder::build_global</code>.","Executes <code>op</code> within the threadpool. Any attempts to use …","","","","","","","","","Takes two closures and <em>potentially</em> runs them in parallel. …","Execute <code>oper_a</code> and <code>oper_b</code> in the thread-pool and return …","Identical to <code>join</code>, except that the closures have a …","Returns <code>true</code> if the closure was called from a different …","Gets the string that was specified by …","Deprecated in favor of <code>ThreadPoolBuilder::build</code>.","Creates and returns a valid rayon thread pool builder, …","Creates and return a valid rayon thread pool …","Sets the number of threads to be used in the rayon …","Deprecated in favor of <code>ThreadPoolBuilder::num_threads</code>.","Normally, whenever Rayon catches a panic, it tries to …","Deprecated in favor of <code>ThreadPoolBuilder::panic_handler</code>.","Executes the main loop for this thread. This will not …","Creates a “fork-join” scope <code>s</code> and invokes the closure …","Creates a scope that executes within this thread-pool. …","Creates a “fork-join” scope <code>s</code> with FIFO order, and …","Creates a scope that executes within this thread-pool. …","","Fires off a task into the Rayon threadpool in the “…","Spawns a job into the fork-join scope <code>self</code>. This job will …","Spawns an asynchronous task in this thread-pool. This …","Fires off a task into the Rayon threadpool in the “…","Spawns a job into the fork-join scope <code>self</code>. This job will …","Spawns an asynchronous task in this thread-pool. This …","Sets a custom function for spawning threads.","Gets the value that was specified by …","Sets the stack size of the worker threads","Deprecated in favor of <code>ThreadPoolBuilder::stack_size</code>.","Sets a callback to be invoked on thread start.","Deprecated in favor of <code>ThreadPoolBuilder::start_handler</code>.","Sets a closure which takes a thread index and returns the …","Deprecated in favor of <code>ThreadPoolBuilder::thread_name</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,5,6,5,6,5,5,0,4,0,4,0,4,5,6,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,7,1,2,3,4,4,5,6,7,8,5,6,1,2,3,4,5,6,7,7,8,1,2,3,4,5,6,7,8,1,1,2,3,4,5,6,7,8,0,4,1,2,3,4,5,6,7,8,0,4,0,8,1,4,5,6,5,6,5,6,1,0,4,0,4,7,0,2,4,0,3,4,5,1,5,6,5,6,5,6,7,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8],"f":[null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["threadpoolbuilderror",3],["threadpool",3],["result",4]]],[[],[["box",3],["result",4],["threadpool",3]]],[[],[["result",4],["threadpoolbuilderror",3]]],[[],[["result",4],["threadpoolbuilderror",3]]],[[],["usize",15]],[[],["usize",15]],[[],[["option",4],["bool",15]]],[[],[["option",4],["bool",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["str",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["configuration",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["configuration",3]],[["box",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],[["option",4],["str",15]]],[[["configuration",3]],[["box",3],["result",4],["threadpool",3]]],[[]],[[],["configuration",3]],[[["usize",15]]],[[["usize",15]],["configuration",3]],[[]],[[],["configuration",3]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["error",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["customspawn",3],["threadpoolbuilder",3]]],[[],[["option",4],["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["configuration",3]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"ThreadBuilder"],[3,"Scope"],[3,"ScopeFifo"],[3,"ThreadPool"],[3,"ThreadPoolBuilder"],[3,"Configuration"],[3,"ThreadPoolBuildError"],[3,"FnContext"]]},\
"reactor":{"doc":"Reaction-diffusion simulation binary. Compute the time …","t":[17,5,5,5],"n":["BACKUP_TERM_WIDTH","initialisation","load_parameters","main"],"q":["reactor","","",""],"d":["Backup print width if the terminal width can not be …","Initialise the input arguments.","Load the required files and form the input parameters.","Main simulation function."],"i":[0,0,0,0],"f":[null,[[["usize",15]]],[[["path",3],["usize",15]],["parameters",3]],[[]]],"p":[]},\
"regex":{"doc":"This crate provides a library for parsing, compiling, and …","tn":["0","CaptureLocations","CaptureMatches","CaptureNames","Captures","CompiledTooBig","Error","Match","Matches","NoExpand","Regex","RegexBuilder","RegexSet","RegexSetBuilder","Replacer","ReplacerRef","SetMatches","SetMatchesIntoIter","SetMatchesIter","Split","SplitN","SubCaptureMatches","Syntax","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","by_ref","by_ref","bytes","capture_locations","capture_names","captures","captures_iter","captures_len","captures_read","captures_read_at","case_insensitive","case_insensitive","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","description","dfa_size_limit","dfa_size_limit","dot_matches_new_line","dot_matches_new_line","empty","end","eq","eq","escape","expand","find","find_at","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get","get","ignore_whitespace","ignore_whitespace","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_match","is_match","is_match_at","iter","iter","len","len","len","len","matched","matched_any","matches","multi_line","multi_line","name","ne","ne","nest_limit","nest_limit","new","new","new","new","next","next","next","next","next","next","next","next","next_back","next_back","no_expansion","no_expansion","no_expansion","no_expansion","octal","octal","patterns","range","replace","replace_all","replace_append","replace_append","replace_append","replacen","shortest_match","shortest_match_at","size_hint","size_hint","size_hint","size_hint","size_limit","size_limit","split","splitn","start","swap_greed","swap_greed","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode","unicode","0","CaptureLocations","CaptureMatches","CaptureNames","Captures","Match","Matches","NoExpand","Regex","RegexBuilder","RegexSet","RegexSetBuilder","Replacer","ReplacerRef","SetMatches","SetMatchesIntoIter","SetMatchesIter","Split","SplitN","SubCaptureMatches","as_bytes","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","by_ref","by_ref","capture_locations","capture_names","captures","captures_iter","captures_len","captures_read","captures_read_at","case_insensitive","case_insensitive","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","dfa_size_limit","dfa_size_limit","dot_matches_new_line","dot_matches_new_line","empty","end","eq","expand","find","find_at","find_iter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get","get","ignore_whitespace","ignore_whitespace","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_match","is_match","is_match_at","iter","iter","len","len","len","len","matched","matched_any","matches","multi_line","multi_line","name","ne","nest_limit","nest_limit","new","new","new","new","next","next","next","next","next","next","next","next","next_back","next_back","no_expansion","no_expansion","no_expansion","no_expansion","octal","octal","patterns","range","replace","replace_all","replace_append","replace_append","replace_append","replacen","shortest_match","shortest_match_at","size_hint","size_hint","size_hint","size_hint","size_limit","size_limit","split","splitn","start","swap_greed","swap_greed","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode","unicode"],"q":["regexregex::bytesd":["","CaptureLocations is a low level representation of the raw …","An iterator that yields all non-overlapping capture …","An iterator over the names of all possible captures.","Captures represents a group of captured strings for a …","The compiled program exceeded the set size limit. The …","An error that occurred during parsing or compiling a …","Match represents a single match of a regex in a haystack.","An iterator over all non-overlapping matches for a …","<code>NoExpand</code> indicates literal string replacement.","A compiled regular expression for matching Unicode …","A configurable builder for a regular expression.","Match multiple (possibly overlapping) regular expressions …","A configurable builder for a set of regular expressions.","Replacer describes types that can be used to replace …","By-reference adaptor for a <code>Replacer</code>","A set of matches returned by a regex set.","An owned iterator over the set of matches from a regex …","A borrowed iterator over the set of matches from a regex …","Yields all substrings delimited by a regular expression …","Yields at most <code>N</code> substrings delimited by a regular …","An iterator that yields all capturing matches in the …","A syntax error.","Returns the matched text.","Returns the original string of this regex.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the builder and compile the regular expression.","Consume the builder and compile the regular expressions …","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.","Match regular expressions on arbitrary bytes.","Returns an empty set of capture locations that can be …","Returns an iterator over the capture names.","Returns the capture groups corresponding to the …","Returns an iterator over all the non-overlapping capture …","Returns the number of captures.","This is like <code>captures</code>, but uses <code>CaptureLocations</code> instead …","Returns the same as captures, but starts the search at …","Set the value for the case insensitive (<code>i</code>) flag.","Set the value for the case insensitive (<code>i</code>) flag.","","","","","","","","","","","","","","","","","","","","","","","Set the approximate size of the cache used by the DFA.","Set the approximate size of the cache used by the DFA.","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …","Create a new empty regex set.","Returns the ending byte offset of the match in the …","","","Escapes all regular expression meta characters in <code>text</code>.","Expands all instances of <code>$name</code> in <code>replacement</code> to the …","Returns the start and end byte range of the …","Returns the same as find, but starts the search at the …","Returns an iterator for each successive non-overlapping …","","","","","","","","","","","Shows the original regular expression.","Shows the original regular expression.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to parse a string into a regular expression","Returns the match associated with the capture group at …","Returns the start and end positions of the Nth capture …","Set the value for the ignore whitespace (<code>x</code>) flag.","Set the value for the ignore whitespace (<code>x</code>) flag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if this set contains no regular expressions.","Returns true if and only if one of the regexes in this …","Returns true if and only if there is a match for the …","Returns the same as is_match, but starts the search at …","An iterator that yields all capturing matches in the …","Returns an iterator over indexes in the regex that …","Returns the number of captured groups.","Returns the total number of regular expressions in this …","The total number of regexes in the set that created these …","Returns the total number of capturing groups.","Whether the regex at the given index matched.","Whether this set contains any matches.","Returns the set of regular expressions that match in the …","Set the value for the multi-line matching (<code>m</code>) flag.","Set the value for the multi-line matching (<code>m</code>) flag.","Returns the match for the capture group named <code>name</code>. If …","","","Set the nesting limit for this parser.","Set the nesting limit for this parser.","Create a new regular expression builder with the given …","Create a new regular expression builder with the given …","Create a new regex set with the given regular expressions.","Compiles a regular expression. Once compiled, it can be …","","","","","","","","","","","Return a fixed unchanging replacement string.","Return a fixed unchanging replacement string.","","","Whether to support octal syntax or not.","Whether to support octal syntax or not.","Returns the patterns that this set will match on.","Returns the range over the starting and ending byte …","Replaces the leftmost-first match with the replacement …","Replaces all non-overlapping matches in <code>text</code> with the …","Appends text to <code>dst</code> to replace the current match.","","","Replaces at most <code>limit</code> non-overlapping matches in <code>text</code> …","Returns the end location of a match in the text given.","Returns the same as shortest_match, but starts the search …","","","","","Set the approximate size limit of the compiled regular …","Set the approximate size limit of the compiled regular …","Returns an iterator of substrings of <code>text</code> delimited by a …","Returns an iterator of at most <code>limit</code> substrings of <code>text</code> …","Returns the starting byte offset of the match in the …","Set the value for the greedy swap (<code>U</code>) flag.","Set the value for the greedy swap (<code>U</code>) flag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the value for the Unicode (<code>u</code>) flag.","Set the value for the Unicode (<code>u</code>) flag.","","CaptureLocations is a low level representation of the raw …","An iterator that yields all non-overlapping capture …","An iterator over the names of all possible captures.","Captures represents a group of captured byte strings for …","Match represents a single match of a regex in a haystack.","An iterator over all non-overlapping matches for a …","<code>NoExpand</code> indicates literal byte string replacement.","A compiled regular expression for matching arbitrary …","A configurable builder for a regular expression.","Match multiple (possibly overlapping) regular expressions …","A configurable builder for a set of regular expressions.","Replacer describes types that can be used to replace …","By-reference adaptor for a <code>Replacer</code>","A set of matches returned by a regex set.","An owned iterator over the set of matches from a regex …","A borrowed iterator over the set of matches from a regex …","Yields all substrings delimited by a regular expression …","Yields at most <code>N</code> substrings delimited by a regular …","An iterator that yields all capturing matches in the …","Returns the matched text.","Returns the original string of this regex.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the builder and compile the regular expression.","Consume the builder and compile the regular expressions …","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.","Returns an empty set of capture locations that can be …","Returns an iterator over the capture names.","Returns the capture groups corresponding to the …","Returns an iterator over all the non-overlapping capture …","Returns the number of captures.","This is like <code>captures</code>, but uses <code>CaptureLocations</code> instead …","Returns the same as <code>captures_read</code>, but starts the search …","Set the value for the case insensitive (<code>i</code>) flag.","Set the value for the case insensitive (<code>i</code>) flag.","","","","","","","","","","","","","","","","","","","","Set the approximate size of the cache used by the DFA.","Set the approximate size of the cache used by the DFA.","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …","Create a new empty regex set.","Returns the ending byte offset of the match in the …","","Expands all instances of <code>$name</code> in <code>replacement</code> to the …","Returns the start and end byte range of the …","Returns the same as find, but starts the search at the …","Returns an iterator for each successive non-overlapping …","","","","","Shows the original regular expression.","Shows the original regular expression.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to parse a string into a regular expression","Returns the match associated with the capture group at …","Returns the start and end positions of the Nth capture …","Set the value for the ignore whitespace (<code>x</code>) flag.","Set the value for the ignore whitespace (<code>x</code>) flag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if this set contains no regular expressions.","Returns true if and only if there is a match for the …","Returns true if and only if one of the regexes in this …","Returns the same as is_match, but starts the search at …","An iterator that yields all capturing matches in the …","Returns an iterator over indexes in the regex that …","Returns the number of captured groups.","Returns the total number of capturing groups.","Returns the total number of regular expressions in this …","The total number of regexes in the set that created these …","Whether the regex at the given index matched.","Whether this set contains any matches.","Returns the set of regular expressions that match in the …","Set the value for the multi-line matching (<code>m</code>) flag.","Set the value for the multi-line matching (<code>m</code>) flag.","Returns the match for the capture group named <code>name</code>. If …","","Set the nesting limit for this parser.","Set the nesting limit for this parser.","Create a new regular expression builder with the given …","Create a new regular expression builder with the given …","Compiles a regular expression. Once compiled, it can be …","Create a new regex set with the given regular expressions.","","","","","","","","","","","Return a fixed unchanging replacement byte string.","Return a fixed unchanging replacement byte string.","","","Whether to support octal syntax or not.","Whether to support octal syntax or not.","Returns the patterns that this set will match on.","Returns the range over the starting and ending byte …","Replaces the leftmost-first match with the replacement …","Replaces all non-overlapping matches in <code>text</code> with the …","Appends text to <code>dst</code> to replace the current match.","","","Replaces at most <code>limit</code> non-overlapping matches in <code>text</code> …","Returns the end location of a match in the text given.","Returns the same as shortest_match, but starts the search …","","","","","Set the approximate size limit of the compiled regular …","Set the approximate size limit of the compiled regular …","Returns an iterator of substrings of <code>text</code> delimited by a …","Returns an iterator of at most <code>limit</code> substrings of <code>text</code> …","Returns the starting byte offset of the match in the …","Set the value for the greedy swap (<code>U</code>) flag.","Set the value for the greedy swap (<code>U</code>) flag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the value for the Unicode (<code>u</code>) flag.","Set the value for the Unicode (<code>u</code>) flag."],"i":[1,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,5,2,6,7,8,9,10,11,3,4,12,13,14,15,16,17,18,19,1,5,2,6,7,8,9,10,11,3,4,12,13,14,15,16,17,18,19,1,6,7,20,20,0,4,4,4,4,4,4,4,6,7,2,8,9,11,3,4,12,15,16,1,2,8,9,11,3,4,12,15,16,1,12,2,6,7,6,7,8,3,2,3,0,5,4,4,4,5,2,2,6,7,8,9,10,11,3,4,4,12,13,14,15,16,17,18,19,1,5,2,6,7,8,9,10,11,3,4,12,13,14,15,16,17,18,19,1,4,5,15,6,7,5,5,5,2,6,7,8,9,10,11,3,4,12,13,14,15,16,17,18,19,1,9,10,11,12,13,14,16,17,18,8,8,4,4,5,9,5,8,9,15,9,9,8,6,7,5,2,3,6,7,6,7,8,4,10,11,12,13,14,16,17,18,10,11,20,20,19,1,6,7,8,3,4,4,20,19,1,4,4,4,10,11,12,14,6,7,4,4,3,6,7,2,8,9,11,3,4,12,15,16,1,2,4,5,2,6,7,8,9,10,11,3,4,12,13,14,15,16,17,18,19,1,5,2,6,7,8,9,10,11,3,4,12,13,14,15,16,17,18,19,1,5,2,6,7,8,9,10,11,3,4,12,13,14,15,16,17,18,19,1,6,7,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,23,24,25,26,22,23,27,28,29,30,31,32,33,34,21,35,36,37,38,24,25,26,22,23,27,28,29,30,31,32,33,34,21,35,36,37,38,25,26,39,39,23,23,23,23,23,23,23,25,26,22,23,31,32,33,21,35,36,38,22,23,31,32,33,21,35,36,38,31,25,26,25,26,35,22,22,24,23,23,23,24,25,26,22,23,23,27,28,29,30,31,32,33,34,21,35,36,37,38,24,25,26,22,23,27,28,29,30,31,32,33,34,21,35,36,37,38,23,24,32,25,26,24,24,24,25,26,22,23,27,28,29,30,31,32,33,34,21,35,36,37,38,27,28,29,30,31,33,36,37,38,35,23,35,23,24,36,24,32,35,36,36,36,35,25,26,24,22,25,26,25,26,23,35,27,28,29,30,31,33,37,38,37,38,39,39,34,21,25,26,35,22,23,23,39,34,21,23,23,23,30,31,37,38,25,26,23,23,22,25,26,22,23,31,32,33,21,35,36,38,23,24,25,26,22,23,27,28,29,30,31,32,33,34,21,35,36,37,38,24,25,26,22,23,27,28,29,30,31,32,33,34,21,35,36,37,38,24,25,26,22,23,27,28,29,30,31,32,33,34,21,35,36,37,38,25,26],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["regex",3],["error",4],["result",4]]],[[],[["error",4],["result",4],["regexset",3]]],[[],["replacerref",3]],[[],["replacerref",3]],null,[[],["capturelocations",3]],[[],["capturenames",3]],[[["str",15]],[["captures",3],["option",4]]],[[["str",15]],["capturematches",3]],[[],["usize",15]],[[["str",15],["capturelocations",3]],[["option",4],["match",3]]],[[["str",15],["usize",15],["capturelocations",3]],[["option",4],["match",3]]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[],["error",4]],[[],["regexset",3]],[[],["setmatches",3]],[[],["setmatchesiter",3]],[[],["match",3]],[[],["regex",3]],[[],["capturenames",3]],[[],["capturelocations",3]],[[],["subcapturematches",3]],[[],["noexpand",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["str",15]],[[["usize",15]],["regexbuilder",3]],[[["usize",15]],["regexsetbuilder",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[],["regexset",3]],[[],["usize",15]],[[["error",4]],["bool",15]],[[["match",3]],["bool",15]],[[["str",15]],["string",3]],[[["str",15],["string",3]]],[[["str",15]],[["option",4],["match",3]]],[[["usize",15],["str",15]],[["option",4],["match",3]]],[[["str",15]],["matches",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["regex",3],["error",4],["result",4]]],[[["usize",15]],[["option",4],["match",3]]],[[["usize",15]],["option",4]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[["usize",15]],["str",15]],[[["str",15]],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[["usize",15],["str",15]],["bool",15]],[[],["subcapturematches",3]],[[],["setmatchesiter",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]],["bool",15]],[[],["bool",15]],[[["str",15]],["setmatches",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[["str",15]],[["option",4],["match",3]]],[[["error",4]],["bool",15]],[[["match",3]],["bool",15]],[[["u32",15]],["regexbuilder",3]],[[["u32",15]],["regexsetbuilder",3]],[[["str",15]],["regexbuilder",3]],[[],["regexsetbuilder",3]],[[],[["error",4],["result",4],["regexset",3]]],[[["str",15]],[["regex",3],["error",4],["result",4]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["option",4]]],[[],[["option",4],["str",15]]],[[],[["option",4],["str",15]]],[[],[["option",4],["option",4]]],[[],[["captures",3],["option",4]]],[[],[["option",4],["match",3]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["cow",4],["option",4]]],[[],[["cow",4],["option",4]]],[[],[["cow",4],["option",4]]],[[],[["cow",4],["option",4]]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[]],[[],[["usize",15],["range",3]]],[[["replacer",8],["str",15]],[["cow",4],["str",15]]],[[["replacer",8],["str",15]],[["cow",4],["str",15]]],[[["captures",3],["string",3]]],[[["captures",3],["string",3]]],[[["captures",3],["string",3]]],[[["replacer",8],["usize",15],["str",15]],[["cow",4],["str",15]]],[[["str",15]],[["option",4],["usize",15]]],[[["usize",15],["str",15]],[["option",4],["usize",15]]],[[]],[[]],[[]],[[]],[[["usize",15]],["regexbuilder",3]],[[["usize",15]],["regexsetbuilder",3]],[[["str",15]],["split",3]],[[["usize",15],["str",15]],["splitn",3]],[[],["usize",15]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["regex",3],["error",4]]],[[],[["result",4],["regexset",3],["error",4]]],[[],["replacerref",3]],[[],["replacerref",3]],[[],["capturelocations",3]],[[],["capturenames",3]],[[],[["option",4],["captures",3]]],[[],["capturematches",3]],[[],["usize",15]],[[["capturelocations",3]],[["match",3],["option",4]]],[[["usize",15],["capturelocations",3]],[["match",3],["option",4]]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[],["match",3]],[[],["regex",3]],[[],["capturenames",3]],[[],["capturelocations",3]],[[],["subcapturematches",3]],[[],["noexpand",3]],[[],["regexset",3]],[[],["setmatches",3]],[[],["setmatchesiter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["usize",15]],["regexbuilder",3]],[[["usize",15]],["regexsetbuilder",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[],["regexset",3]],[[],["usize",15]],[[["match",3]],["bool",15]],[[["vec",3]]],[[],[["match",3],["option",4]]],[[["usize",15]],[["match",3],["option",4]]],[[],["matches",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["result",4],["regex",3],["error",4]]],[[["usize",15]],[["match",3],["option",4]]],[[["usize",15]],["option",4]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[["str",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],["bool",15]],[[],["subcapturematches",3]],[[],["setmatchesiter",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]],["bool",15]],[[],["bool",15]],[[],["setmatches",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[["str",15]],[["match",3],["option",4]]],[[["match",3]],["bool",15]],[[["u32",15]],["regexbuilder",3]],[[["u32",15]],["regexsetbuilder",3]],[[["str",15]],["regexbuilder",3]],[[],["regexsetbuilder",3]],[[["str",15]],[["result",4],["regex",3],["error",4]]],[[],[["result",4],["regexset",3],["error",4]]],[[],[["match",3],["option",4]]],[[],[["option",4],["captures",3]]],[[],["option",4]],[[],["option",4]],[[],[["option",4],["option",4]]],[[],[["option",4],["option",4]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["cow",4]]],[[],[["option",4],["cow",4]]],[[],[["option",4],["cow",4]]],[[],[["option",4],["cow",4]]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[]],[[],[["usize",15],["range",3]]],[[["replacer",8]],["cow",4]],[[["replacer",8]],["cow",4]],[[["vec",3],["captures",3]]],[[["vec",3],["captures",3]]],[[["vec",3],["captures",3]]],[[["replacer",8],["usize",15]],["cow",4]],[[],[["option",4],["usize",15]]],[[["usize",15]],[["option",4],["usize",15]]],[[]],[[]],[[]],[[]],[[["usize",15]],["regexbuilder",3]],[[["usize",15]],["regexsetbuilder",3]],[[],["split",3]],[[["usize",15]],["splitn",3]],[[],["usize",15]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexsetbuilder",3]]],"p":[[3,"NoExpand"],[4,"Error"],[3,"Match"],[3,"Regex"],[3,"Captures"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"CaptureLocations"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[3,"ReplacerRef"],[8,"Replacer"],[3,"NoExpand"],[3,"Match"],[3,"Regex"],[3,"Captures"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"CaptureLocations"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[8,"Replacer"]]},\
"regex_syntax":{"doc":"This crate provides a robust regular expression parser.","t":[4,13,3,3,6,13,3,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,0,13,13,3,13,13,13,3,13,4,4,13,13,13,13,13,13,13,13,13,3,13,13,13,4,13,3,4,3,13,3,4,13,13,4,3,4,4,3,3,13,3,4,4,13,13,3,3,13,13,13,13,13,13,13,13,13,13,13,13,13,16,3,4,13,13,13,13,13,13,4,13,13,13,13,13,13,3,13,3,4,13,13,3,13,4,13,13,13,13,13,13,13,13,4,13,13,13,13,3,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,16,13,13,3,13,13,13,13,13,3,13,13,13,13,4,13,3,4,3,13,13,13,3,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,3,13,13,13,13,13,13,13,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,12,12,0,11,11,11,0,11,12,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,13,4,13,13,13,13,13,13,13,13,13,3,4,13,3,3,3,3,3,3,13,13,13,13,13,16,3,4,13,3,13,4,3,4,13,4,13,13,13,16,13,3,13,4,4,13,13,13,13,13,13,13,13,13,13,13,8,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,3,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11],"n":["Error","Parse","Parser","ParserBuilder","Result","Translate","UnicodeWordError","allow_invalid_utf8","ast","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","case_insensitive","clone","clone","clone","clone_into","clone_into","clone_into","default","description","dot_matches_new_line","eq","escape","escape_into","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hir","ignore_whitespace","into","into","into","into","is_meta_character","is_word_byte","is_word_character","multi_line","ne","nest_limit","new","new","octal","parse","swap_greed","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_is_word_character","type_id","type_id","type_id","type_id","unicode","utf8","Alnum","Alpha","Alternation","Alternation","Ascii","Ascii","Assertion","Assertion","AssertionKind","Ast","AtLeast","Bell","BinaryOp","Blank","Bounded","Bracketed","Bracketed","CaptureIndex","CaptureLimitExceeded","CaptureName","CaptureName","CarriageReturn","CaseInsensitive","Class","Class","ClassAscii","ClassAsciiKind","ClassBracketed","ClassEscapeInvalid","ClassPerl","ClassPerlKind","ClassRangeInvalid","ClassRangeLiteral","ClassSet","ClassSetBinaryOp","ClassSetBinaryOpKind","ClassSetItem","ClassSetRange","ClassSetUnion","ClassUnclosed","ClassUnicode","ClassUnicodeKind","ClassUnicodeOpKind","Cntrl","Colon","Comment","Concat","Concat","DecimalEmpty","DecimalInvalid","Difference","Digit","Digit","Dot","DotMatchesNewLine","Empty","Empty","EndLine","EndText","Equal","Err","Error","ErrorKind","EscapeHexEmpty","EscapeHexInvalid","EscapeHexInvalidDigit","EscapeUnexpectedEof","EscapeUnrecognized","Exactly","Flag","Flag","FlagDanglingNegation","FlagDuplicate","FlagRepeatedNegation","FlagUnexpectedEof","FlagUnrecognized","Flags","Flags","FlagsItem","FlagsItemKind","FormFeed","Graph","Group","Group","GroupKind","GroupNameDuplicate","GroupNameEmpty","GroupNameInvalid","GroupNameUnexpectedEof","GroupUnclosed","GroupUnopened","HexBrace","HexFixed","HexLiteralKind","IgnoreWhitespace","Intersection","Item","LineFeed","Literal","Literal","Literal","LiteralKind","Lower","MultiLine","Named","NamedValue","Negation","NestLimitExceeded","NonCapturing","NotEqual","NotWordBoundary","Octal","OneLetter","OneOrMore","Output","Perl","Perl","Position","Print","Punct","Punctuation","Range","Range","Repetition","Repetition","RepetitionCountDecimalEmpty","RepetitionCountInvalid","RepetitionCountUnclosed","RepetitionKind","RepetitionMissing","RepetitionOp","RepetitionRange","SetFlags","Space","Space","Space","Span","Special","SpecialLiteralKind","StartLine","StartText","SwapGreed","SymmetricDifference","Tab","Unicode","Unicode","Unicode","UnicodeClassInvalid","UnicodeLong","UnicodeShort","Union","UnsupportedBackreference","UnsupportedLookAround","Upper","Verbatim","VerticalTab","Visitor","WithComments","Word","Word","WordBoundary","X","Xdigit","ZeroOrMore","ZeroOrOne","add_item","ast","ast","ast","asts","asts","auxiliary_span","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte","c","capture_index","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","column","comment","comments","description","digits","drop","drop","end","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","finish","flag_state","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_name","greedy","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_ast","into_ast","into_item","is_capturing","is_empty","is_empty","is_equal","is_negated","is_negation","is_one_line","is_valid","is_valid","items","items","kind","kind","kind","kind","kind","kind","kind","kind","kind","kind","kind","lhs","line","name","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","negated","negated","negated","negated","new","new","offset","op","parse","partial_cmp","partial_cmp","pattern","print","push","rhs","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","splat","start","start","start","start","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","visit","visit_alternation_in","visit_alternation_in","visit_class_set_binary_op_in","visit_class_set_binary_op_in","visit_class_set_binary_op_post","visit_class_set_binary_op_post","visit_class_set_binary_op_pre","visit_class_set_binary_op_pre","visit_class_set_item_post","visit_class_set_item_post","visit_class_set_item_pre","visit_class_set_item_pre","visit_post","visit_post","visit_pre","visit_pre","with_end","with_start","name","op","value","original","original","original","Parser","ParserBuilder","borrow","borrow","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","ignore_whitespace","into","into","nest_limit","new","new","octal","parse","parse_with_comments","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Printer","borrow","borrow_mut","fmt","from","into","new","print","try_from","try_into","type_id","Alternation","Anchor","Anchor","Ascii","AsciiNegate","AtLeast","Bounded","Byte","Bytes","CaptureIndex","CaptureName","CaseFoldError","Class","Class","ClassBytes","ClassBytesIter","ClassBytesRange","ClassUnicode","ClassUnicodeIter","ClassUnicodeRange","Concat","Empty","EmptyClassNotAllowed","EndLine","EndText","Err","Error","ErrorKind","Exactly","Group","Group","GroupKind","Hir","HirKind","InvalidUtf8","Literal","Literal","NonCapturing","OneOrMore","Output","Range","Repetition","Repetition","RepetitionKind","RepetitionRange","StartLine","StartText","Unicode","Unicode","Unicode","UnicodeCaseUnavailable","UnicodeNegate","UnicodeNotAllowed","UnicodePerlClassNotFound","UnicodePropertyNotFound","UnicodePropertyValueNotFound","Visitor","WordBoundary","WordBoundary","ZeroOrMore","ZeroOrOne","alternation","anchor","any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","case_fold_simple","case_fold_simple","case_fold_simple","class","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","concat","default","default","description","difference","difference","dot","drop","empty","empty","empty","end","end","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","greedy","group","has_subexprs","hir","hir","intersect","intersect","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_kind","is_all_ascii","is_all_ascii","is_all_assertions","is_alternation_literal","is_always_utf8","is_always_utf8","is_anchored_end","is_anchored_start","is_any_anchored_end","is_any_anchored_start","is_empty","is_line_anchored_end","is_line_anchored_start","is_literal","is_match_empty","is_match_empty","is_negated","is_unicode","iter","iter","kind","kind","kind","kind","literal","literal","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","negate","negate","negate","new","new","new","new","next","next","partial_cmp","partial_cmp","pattern","print","push","push","ranges","ranges","repetition","span","start","start","start","start","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","translate","try_case_fold_simple","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","visit","visit_alternation_in","visit_alternation_in","visit_post","visit_post","visit_pre","visit_pre","word_boundary","index","name","Literal","Literals","add","add_byte_class","add_char_class","all_complete","any_complete","as_ref","borrow","borrow","borrow_mut","borrow_mut","clear","clone","clone","clone_into","clone_into","cmp","contains_empty","cross_add","cross_product","cut","cut","deref","deref_mut","empty","empty","eq","eq","fmt","fmt","from","from","into","into","is_cut","is_empty","limit_class","limit_size","literals","longest_common_prefix","longest_common_suffix","min_len","ne","new","partial_cmp","prefixes","reverse","set_limit_class","set_limit_size","suffixes","to_empty","to_owned","to_owned","trim_suffix","try_from","try_from","try_into","try_into","type_id","type_id","unambiguous_prefixes","unambiguous_suffixes","union","union_prefixes","union_suffixes","Printer","borrow","borrow_mut","fmt","from","into","new","print","try_from","try_into","type_id","Translator","TranslatorBuilder","allow_invalid_utf8","borrow","borrow","borrow_mut","borrow_mut","build","case_insensitive","clone","clone","clone_into","clone_into","default","dot_matches_new_line","fmt","fmt","from","from","into","into","multi_line","new","new","swap_greed","to_owned","to_owned","translate","try_from","try_from","try_into","try_into","type_id","type_id","unicode","Four","One","Three","Two","Utf8Range","Utf8Sequence","Utf8Sequences","as_slice","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","end","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","into_iter","len","matches","matches","ne","ne","new","next","partial_cmp","partial_cmp","reverse","start","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["regex_syntax","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::astregex_syntax::ast::ClassUnicodeKind","","","regex_syntax::ast::ErrorKind","","","regex_syntax::ast::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::ast::print","","","","","","","","","","","regex_syntax::hirregex_syntax::hir::GroupKind","","regex_syntax::hir::literal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::hir::print","","","","","","","","","","","regex_syntax::hir::translate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::utf8","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This error type encompasses any error that can be …","An error that occurred while translating concrete syntax …","A convenience parser for regular expressions.","A builder for a regular expression parser.","A type alias for dealing with errors returned by this …","An error that occurred while translating abstract syntax …","An error that occurs when the Unicode-aware <code>\\\\w</code> class is …","When enabled, the parser will permit the construction of …","Defines an abstract syntax for regular expressions.","","","","","","","","","Build a parser from this configuration with the given …","Enable or disable the case insensitive flag by default.","","","","","","","","","Enable or disable the “dot matches any character” …","","Escapes all regular expression meta characters in <code>text</code>.","Escapes all meta characters in <code>text</code> and writes the result …","","","","","","","","","","","","","Defines a high-level intermediate representation for …","Enable verbose mode in the regular expression.","","","","","Returns true if the give character has significance in a …","Returns true if and only if the given character is an …","Returns true if and only if the given character is a …","Enable or disable the multi-line matching flag by default.","","Set the nesting limit for this parser.","Create a new parser builder with a default configuration.","Create a new parser with a default configuration.","Whether to support octal syntax or not.","Parse the regular expression into a high level …","Enable or disable the “swap greed” flag by default.","","","","","","","","","","","","","","Returns true if and only if the given character is a …","","","","","Enable or disable the Unicode flag (<code>u</code>) by default.","Converts ranges of Unicode scalar values to equivalent …","<code>[0-9A-Za-z]</code>","<code>[A-Za-z]</code>","An alternation of regular expressions.","An alternation of regular expressions.","<code>[\\\\x00-\\\\x7F]</code>","An ASCII character class, e.g., <code>[:alnum:]</code> or <code>[:punct:]</code>.","A single zero-width assertion.","A single zero-width assertion.","An assertion kind.","An abstract syntax tree for a single regular expression.","<code>{m,}</code>","Bell, spelled <code>\\\\a</code> (<code>\\\\x07</code>).","A single binary operation (i.e., &&, – or ~~).","<code>[ \\\\t]</code>","<code>{m,n}</code>","A bracketed character class set, which may contain zero …","A bracketed character class set, which may contain zero …","<code>(a)</code>","The capturing group limit was exceeded.","A capture name.","<code>(?P<name>a)</code>","Carriage return, spelled <code>\\\\r</code> (<code>\\\\x0D</code>).","<code>i</code>","A single character class expression.","A single character class. This includes all forms of …","An ASCII character class.","The available ASCII character classes.","A bracketed character class, e.g., <code>[a-z0-9]</code>.","An invalid escape sequence was found in a character class …","A Perl character class.","The available Perl character classes.","An invalid character class range was found. An invalid …","An invalid range boundary was found in a character class. …","A character class set.","A Unicode character class set operation.","The type of a Unicode character class set operation.","A single component of a character class set.","A single character class range in a set.","A union of items inside a character class set.","An opening <code>[</code> was found with no corresponding closing <code>]</code>.","A Unicode character class.","The available forms of Unicode character classes.","The type of op used in a Unicode character class.","<code>[\\\\x00-\\\\x1F\\\\x7F]</code>","A property set to a specific value using a colon, e.g., …","A comment from a regular expression with an associated …","A concatenation of regular expressions.","A concatenation of regular expressions.","Note that this error variant is no longer used. Namely, a …","An invalid decimal number was given where one was …","The difference of two sets, e.g., <code>\\\\pN--[0-9]</code>.","Decimal numbers.","<code>[0-9]</code>","The “any character” class.","<code>s</code>","An empty regex that matches everything.","An empty item.","<code>$</code>","<code>\\\\z</code>","A property set to a specific value, e.g., <code>\\\\p{scx=Katakana}</code>…","An error that visiting an AST might return.","An error that occurred while parsing a regular expression …","The type of an error that occurred while building an AST.","A bracketed hex literal was empty.","A bracketed hex literal did not correspond to a Unicode …","An invalid hexadecimal digit was found.","EOF was found before an escape sequence was completed.","An unrecognized escape sequence.","<code>{m}</code>","A single flag.","A single flag in a group.","A dangling negation was used when setting flags, e.g., <code>i-</code>.","A flag was used twice, e.g., <code>i-i</code>.","The negation operator was used twice, e.g., <code>-i-s</code>.","Expected a flag but got EOF, e.g., <code>(?</code>.","Unrecognized flag, e.g., <code>a</code>.","A group of flags.","A set of flags, e.g., <code>(?is)</code>.","A single item in a group of flags.","The kind of an item in a group of flags.","Form feed, spelled <code>\\\\f</code> (<code>\\\\x0C</code>).","<code>[!-~]</code>","A grouped regular expression.","A grouped regular expression.","The kind of a group.","A duplicate capture name was found.","A capture group name is empty, e.g., <code>(?P<>abc)</code>.","An invalid character was seen for a capture group name. …","A closing <code>></code> could not be found for a capture group name.","An unclosed group, e.g., <code>(ab</code>.","An unopened group, e.g., <code>ab)</code>.","The literal is written as a hex code with a bracketed …","The literal is written as a hex code with a fixed number …","The type of a Unicode hex literal.","<code>x</code>","The intersection of two sets, e.g., <code>\\\\pN&&[a-z]</code>.","An item, which can be a single literal, range, nested …","Line feed, spelled <code>\\\\n</code> (<code>\\\\x0A</code>).","A single literal expression.","A single character literal, which includes escape …","A single literal.","The kind of a single literal expression.","<code>[a-z]</code>","<code>m</code>","A binary property, general category or script. The string …","A property name and an associated value.","A negation operator applied to all subsequent flags in …","The nest limit was exceeded. The limit stored here is the …","<code>(?:a)</code> and <code>(?i:a)</code>","A property that isn’t a particular value, e.g., …","<code>\\\\B</code>","The literal is written as an octal escape, e.g., <code>\\\\141</code>.","A one letter abbreviated class, e.g., <code>\\\\pN</code>.","<code>+</code>","The result of visiting an AST.","A perl character class, e.g., <code>\\\\d</code> or <code>\\\\W</code>.","A perl character class, e.g., <code>\\\\d</code> or <code>\\\\W</code>.","A single position in a regular expression.","<code>[ -~]</code>","<code>[!-/:-@\\\\[-</code>{-~]`","The literal is written as an escape because it is …","A range between two literals.","<code>{m,n}</code>","A repetition operation applied to a regular expression.","A repetition operator applied to an arbitrary regular …","An opening <code>{</code> was not followed by a valid decimal value. …","The range provided in a counted repetition operator is …","An opening <code>{</code> was found with no corresponding closing <code>}</code>.","The kind of a repetition operator.","A repetition operator was applied to a missing …","The repetition operator itself.","A range repetition operator.","A group of flags that is not applied to a particular …","Space, spelled <code>\\\\ </code> (<code>\\\\x20</code>). Note that this can only appear …","Whitespace.","<code>[\\\\t\\\\n\\\\v\\\\f\\\\r ]</code>","Span represents the position information of a single AST …","The literal is written as a specially recognized escape, …","The type of a special literal.","<code>^</code>","<code>\\\\A</code>","<code>U</code>","The symmetric difference of two sets. The symmetric …","Tab, spelled <code>\\\\t</code> (<code>\\\\x09</code>).","A Unicode character class, e.g., <code>\\\\pL</code> or <code>\\\\p{Greek}</code>.","A Unicode character class, e.g., <code>\\\\pL</code> or <code>\\\\p{Greek}</code>.","<code>u</code>","The Unicode class is not valid. This typically occurs …","A <code>\\\\U</code> prefix. When used without brackets, this form is …","A <code>\\\\u</code> prefix. When used without brackets, this form is …","A union of items.","When octal support is disabled, this error is produced …","When syntax similar to PCRE’s look-around is used, this …","<code>[A-Z]</code>","The literal is written verbatim, e.g., <code>a</code> or <code>☃</code>.","Vertical tab, spelled <code>\\\\v</code> (<code>\\\\x0B</code>).","A trait for visiting an abstract syntax tree (AST) in …","An abstract syntax tree for a singular expression along …","Word characters.","<code>[0-9A-Za-z_]</code>","<code>\\\\b</code>","A <code>\\\\x</code> prefix. When used without brackets, this form is …","<code>[0-9A-Fa-f]</code>","<code>*</code>","<code>?</code>","Add the given item to this sequence of flags.","The actual ast.","The regular expression under repetition.","The regular expression in this group.","The alternate regular expressions.","The concatenation regular expressions.","Return an auxiliary span. This span exists only for some …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If this literal was written as a <code>\\\\x</code> hex escape, then this …","The Unicode scalar value corresponding to this literal.","Returns the capture index of this group, if this is a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The approximate column number, starting at <code>1</code>.","The comment text, starting with the first character …","All comments found in the original regular expression.","","The number of digits that must be used with this literal …","","","The end byte offset.","The end of this range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All implementors of <code>Visitor</code> must provide a <code>finish</code> method, …","Returns the state of the given flag in this set.","If this group is non-capturing, then this returns the …","The actual sequence of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the corresponding ClassAsciiKind variant for the …","Whether this operation was applied greedily or not.","The capture index.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return this alternation as an AST.","Return this concatenation as an AST.","Return this union as a character class set item.","Returns true if and only if this group is capturing.","Returns true if and only if this span is empty. That is, …","Return true if and only if this Ast is empty.","Whether the op is an equality op or not.","Returns true if this class has been negated.","Returns true if and only if this item is a negation …","Returns true if and only if this span occurs on a single …","Returns true if and only if this character class range is …","Returns true if and only if this repetition range is …","The sequence of items that make up this union.","A sequence of flag items. Each item is either a flag or a …","Return the type of this error.","The kind of this literal.","The kind of Perl class.","The kind of ASCII class.","The kind of Unicode class.","The type of this set. A set is either a normal union of …","The type of this set operation.","The assertion kind, e.g., <code>\\\\b</code> or <code>^</code>.","The type of operation.","The kind of this group.","The kind of this item.","The left hand side of the operation.","The line number, starting at <code>1</code>.","The capture name.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether the class is negated or not. e.g., <code>\\\\d</code> is not …","Whether the class is negated or not. e.g., <code>[[:alpha:]]</code> is …","Whether this class is negated or not.","Whether this class is negated or not. e.g., <code>[a]</code> is not …","Create a new span with the given positions.","Create a new position with the given information.","The absolute offset of this position, starting at <code>0</code> from …","The actual operation.","This module provides a regular expression parser.","","","The original pattern string in which this error occurred.","This module provides a regular expression printer for <code>Ast</code>.","Push a new item in this union.","The right hand side of the operation.","Return the span at which this error occurred.","Return the span of this abstract syntax tree.","Return the span of this character class.","Return the span of this character class set.","Return the span of this character class set item.","The span of this comment, including the beginning <code>#</code> and …","The span of this alternation.","The span of this concatenation.","The span of this literal.","The span of this class.","The span of this class.","The span of this class.","The span of this class.","The span of this range.","The span of the items in this operation. e.g., the <code>a-z0-9</code> …","The span of this operation. e.g., the <code>a-z--[h-p]</code> in …","The span of this assertion.","The span of this operation.","The span of this operator. This includes things like <code>+</code>, <code>*?</code>…","The span of this group.","The span of this capture name.","The span of these flags, including the grouping …","The span of this group of flags.","The span of this item.","Create a new span using the given position as the start …","This method is called before beginning traversal of the …","This method is called before beginning traversal of the …","The start byte offset.","The start of this rangeuild a set from a union.","Executes an implementation of <code>Visitor</code> in constant stack …","This method is called between child nodes of an …","This method is called between child nodes of an …","This method is called between the left hand and right …","This method is called between the left hand and right …","This method is called on every <code>ClassSetBinaryOp</code> after …","This method is called on every <code>ClassSetBinaryOp</code> after …","This method is called on every <code>ClassSetBinaryOp</code> before …","This method is called on every <code>ClassSetBinaryOp</code> before …","This method is called on every <code>ClassSetItem</code> after …","This method is called on every <code>ClassSetItem</code> after …","This method is called on every <code>ClassSetItem</code> before …","This method is called on every <code>ClassSetItem</code> before …","This method is called on an <code>Ast</code> after descending all of …","This method is called on an <code>Ast</code> after descending all of …","This method is called on an <code>Ast</code> before descending into …","This method is called on an <code>Ast</code> before descending into …","Create a new span by replacing the ending the position …","Create a new span by replacing the starting the position …","The property name (which may be empty).","The type of Unicode op used to associate <code>name</code> with <code>value</code>.","The property value (which may be empty).","The position of the original flag. The error position …","The position of the original negation operator. The error …","The position of the initial occurrence of the capture …","A regular expression parser.","A builder for a regular expression parser.","","","","","Build a parser from this configuration with the given …","","","","","","","","","","Enable verbose mode in the regular expression.","","","Set the nesting limit for this parser.","Create a new parser builder with a default configuration.","Create a new parser with a default configuration.","Whether to support octal syntax or not.","Parse the regular expression into an abstract syntax tree.","Parse the regular expression and return an abstract …","","","","","","","","","A printer for a regular expression abstract syntax tree.","","","","","","Create a new printer.","Print the given <code>Ast</code> to the given writer. The writer must …","","","","An alternation of expressions. An alternation always has …","The high-level intermediate representation for an anchor …","An anchor assertion. An anchor assertion match always has …","Match an ASCII-only word boundary. That is, this matches …","Match an ASCII-only negation of a word boundary.","Matches a sub-expression at least this many times.","Matches a sub-expression at least <code>m</code> times and at most <code>n</code> …","A single character represented by an arbitrary byte.","A set of characters represented by arbitrary bytes (one …","A normal unnamed capturing group.","A named capturing group.","An error that occurs when Unicode-aware simple case …","The high-level intermediate representation of a character …","A single character class that matches any of the …","A set of characters represented by arbitrary bytes (where …","An iterator over all ranges in a byte character class.","A single range of characters represented by arbitrary …","A set of characters represented by Unicode scalar values.","An iterator over all ranges in a Unicode character class.","A single range of characters represented by Unicode …","A concatenation of expressions. A concatenation always …","The empty regular expression, which matches everything, …","This occurs when the translator attempts to construct a …","Match the end of a line or the end of text. Specifically, …","Match the end of text. Specifically, this matches at the …","An error that visiting an HIR might return.","An error that can occur while translating an <code>Ast</code> to a <code>Hir</code>.","The type of an error that occurred while building an <code>Hir</code>.","Matches a sub-expression exactly this many times.","The high-level intermediate representation for a group.","A possibly capturing group, which contains a child …","The kind of group.","A high-level intermediate representation (HIR) for a …","The kind of an arbitrary <code>Hir</code> expression.","This error occurs when translating a pattern that could …","The high-level intermediate representation of a literal.","A single literal character that matches exactly this …","A non-capturing group.","Matches a sub-expression one or more times.","The result of visiting an HIR.","Matches a sub-expression within a bounded range of times.","The high-level intermediate representation of a …","A repetition operation applied to a child expression.","The kind of a repetition operator.","The kind of a counted repetition operator.","Match the beginning of a line or the beginning of text. …","Match the beginning of text. Specifically, this matches …","A single character represented by a Unicode scalar value.","A set of characters represented by Unicode scalar values.","Match a Unicode-aware word boundary. That is, this …","This occurs when the Unicode simple case mapping tables …","Match a Unicode-aware negation of a word boundary.","This error occurs when a Unicode feature is used when …","This occurs when a Unicode-aware Perl character class (<code>\\\\w</code>…","This occurs when an unrecognized Unicode property name …","This occurs when an unrecognized Unicode property value …","A trait for visiting the high-level IR (HIR) in depth …","The high-level intermediate representation for a …","A word boundary assertion, which may or may not be …","Matches a sub-expression zero or more times.","Matches a sub-expression zero or one times.","Returns the alternation of the given expressions.","Creates an anchor assertion HIR expression.","Build an HIR expression for <code>(?s).</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Apply Unicode simple case folding to this character …","Expand this character class such that it contains all …","Expand this character class such that it contains all …","Creates a class HIR expression.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the concatenation of the given expressions.","","","","Subtract the given character class from this character …","Subtract the given byte class from this byte class, in …","Build an HIR expression for <code>.</code>.","","Returns an empty HIR expression.","Create a new class with no ranges.","Create a new class with no ranges.","Return the end of this range.","Return the end of this range.","","","","","","","","","","","","","","","","","","All implementors of <code>Visitor</code> must provide a <code>finish</code> method, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether this repetition operator is greedy or not. A …","Creates a group HIR expression.","Returns true if and only if this kind has any (including …","The expression inside the capturing group, which may be …","The expression being repeated.","Intersect this character class with the given character …","Intersect this byte class with the given byte class, in …","","","","","","","","","","","","","","","","","","","","","","","Consumes ownership of this HIR expression and returns its …","Returns true if and only if this character class will …","Returns true if and only if this character class will …","Returns true if and only if this entire HIR expression is …","Return true if and only if this HIR is either a simple …","Return true if and only if this HIR will always match …","Returns true if and only if this character class will …","Return true if and only if this HIR is required to match …","Return true if and only if this HIR is required to match …","Return true if and only if this HIR contains any …","Return true if and only if this HIR contains any …","Return true if and only if this HIR is the empty regular …","Return true if and only if this HIR is required to match …","Return true if and only if this HIR is required to match …","Return true if and only if this HIR is a simple literal. …","Return true if and only if the empty string is part of …","Returns true if and only if this repetition operator …","Returns true if and only if this word boundary assertion …","Returns true if and only if this literal corresponds to a …","Return an iterator over all ranges in this class.","Return an iterator over all ranges in this class.","Return the type of this error.","Returns a reference to the underlying HIR kind.","The kind of this group. If it is a capturing group, then …","The kind of this repetition operator.","Provides routines for extracting literal prefixes and …","Creates a literal HIR expression.","","","","","","","","","","","","","","","Negate this character class in place.","Negate this character class.","Negate this byte class.","Create a new class from a sequence of ranges.","Create a new Unicode scalar value range for a character …","Create a new class from a sequence of ranges.","Create a new byte range for a character class.","","","","","The original pattern string in which this error occurred.","This module provides a regular expression printer for <code>Hir</code>.","Add a new range to this set.","Add a new range to this set.","Return the underlying ranges as a slice.","Return the underlying ranges as a slice.","Creates a repetition HIR expression.","Return the span at which this error occurred.","This method is called before beginning traversal of the …","This method is called before beginning traversal of the …","Return the start of this range.","Return the start of this range.","Compute the symmetric difference of the given character …","Compute the symmetric difference of the given byte …","","","","","","","","","","","","","","","","","","","","","","Defines a translator that converts an <code>Ast</code> to an <code>Hir</code>.","Expand this character class such that it contains all …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Union this character class with the given character …","Union this byte class with the given byte class, in place.","Executes an implementation of <code>Visitor</code> in constant stack …","This method is called between child nodes of an …","This method is called between child nodes of an …","This method is called on an <code>Hir</code> after descending all of …","This method is called on an <code>Hir</code> after descending all of …","This method is called on an <code>Hir</code> before descending into …","This method is called on an <code>Hir</code> before descending into …","Creates a word boundary assertion HIR expression.","The capture index of the group.","The name of the group.","A single member of a set of literals extracted from a …","A set of literal byte strings extracted from a regular …","Adds the given literal to this set.","Extends each literal in this set with the byte class …","Extends each literal in this set with the character class …","Returns true if all members in this set are complete.","Returns true if any member in this set is complete.","","","","","","Clears this set of all members.","","","","","","Returns true if this set contains an empty literal.","Extends each literal in this set with the bytes given.","Extends this set with another set.","Cuts every member of this set. When a member is cut, it …","Cuts this literal.","","","Returns a new empty set of literals using default limits.","Returns a new complete empty literal.","","","","","","","","","Returns true if this literal was “cut.”","Returns true if this set is empty or if all of its …","Get the character class size limit for this set.","Get the approximate size limit (in bytes) of this set.","Returns the set of literals as a slice. Its order is …","Returns the longest common prefix of all members in this …","Returns the longest common suffix of all members in this …","Returns the length of the smallest literal.","","Returns a new complete literal with the bytes given.","","Returns a set of literal prefixes extracted from the …","Reverses all members in place.","Limits the size of character(or byte) classes considered.","Set the approximate size limit (in bytes) of this set.","Returns a set of literal suffixes extracted from the …","Returns a new empty set of literals using this set’s …","","","Returns a new set of literals with the given number of …","","","","","","","Returns a new set of prefixes of this set of literals …","Returns a new set of suffixes of this set of literals …","Unions this set with another set.","Unions the prefixes from the given expression to this set.","Unions the suffixes from the given expression to this set.","A printer for a regular expression’s high-level …","","","","","","Create a new printer.","Print the given <code>Ast</code> to the given writer. The writer must …","","","","A translator maps abstract syntax to a high level …","A builder for constructing an AST->HIR translator.","When enabled, translation will permit the construction of …","","","","","Build a translator using the current configuration.","Enable or disable the case insensitive flag (<code>i</code>) by …","","","","","","Enable or disable the “dot matches any character” …","","","","","","","Enable or disable the multi-line matching flag (<code>m</code>) by …","Create a new translator builder with a default c …","Create a new translator using the default configuration.","Enable or disable the “swap greed” flag (<code>U</code>) by …","","","Translate the given abstract syntax tree (AST) into a …","","","","","","","Enable or disable the Unicode flag (<code>u</code>) by default.","Four successive byte ranges.","One byte range.","Three successive byte ranges.","Two successive byte ranges.","A single inclusive range of UTF-8 bytes.","Utf8Sequence represents a sequence of byte ranges.","An iterator over ranges of matching UTF-8 byte sequences.","Returns the underlying sequence of byte ranges as a slice.","","","","","","","","","","","","","End of byte range (inclusive).","","","","","","","","","","","","","Returns the number of byte ranges in this sequence.","Returns true if and only if a prefix of <code>bytes</code> matches …","Returns true if and only if the given byte is in this …","","","Create a new iterator over UTF-8 byte ranges for the …","","","","Reverses the ranges in this sequence.","Start of byte range (inclusive).","","","","","","","","","","",""],"i":[0,1,0,0,0,1,0,2,0,1,2,3,4,1,2,3,4,2,2,1,2,3,1,2,3,2,1,2,1,0,0,1,1,2,3,4,4,1,1,1,2,3,4,0,2,1,2,3,4,0,0,0,2,1,2,2,3,2,3,2,1,2,3,1,4,1,2,3,4,1,2,3,4,0,1,2,3,4,2,0,5,5,0,6,5,7,0,6,0,0,8,9,10,5,8,11,7,12,13,0,12,9,14,0,6,0,0,0,13,0,0,13,13,0,0,0,0,0,0,13,0,0,0,5,15,0,0,6,13,13,16,17,5,6,14,6,7,18,18,15,19,0,0,13,13,13,13,13,8,0,20,13,13,13,13,13,0,6,0,0,9,5,0,6,0,13,13,13,13,13,13,21,21,0,14,16,10,9,0,6,7,0,5,14,22,22,20,13,12,15,18,21,22,23,19,11,7,0,5,5,21,7,23,0,6,13,13,13,0,13,0,0,0,9,17,5,0,21,0,18,18,14,16,9,11,7,14,13,24,24,7,13,13,5,21,9,0,0,17,5,18,24,5,23,23,25,26,27,28,29,30,31,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,35,35,28,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,32,33,33,34,26,31,24,6,10,32,40,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,19,25,28,46,31,31,13,13,32,33,26,34,6,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,5,27,45,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,29,30,41,28,32,6,15,38,20,32,40,8,41,25,31,35,36,37,38,39,42,43,44,28,47,42,33,45,31,13,32,33,26,34,6,29,30,35,21,11,36,37,38,22,39,10,7,40,41,42,43,27,44,23,8,28,12,45,46,25,47,20,36,37,38,39,32,33,33,27,0,32,33,31,0,41,42,31,6,11,10,7,34,29,30,35,36,37,38,39,40,41,42,43,27,44,28,45,46,25,47,32,19,19,32,40,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,31,13,6,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,31,13,32,33,26,34,6,29,30,35,21,9,24,11,36,17,37,5,38,22,15,39,10,7,40,41,42,16,43,18,27,44,23,8,28,12,45,46,25,47,20,14,10,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,32,32,48,48,48,49,50,51,0,0,52,53,52,53,52,52,53,52,53,52,52,53,52,53,52,52,53,52,52,53,52,53,53,52,53,52,53,52,53,52,53,0,54,54,54,54,54,54,54,54,54,54,55,0,55,56,56,57,57,58,59,60,60,0,0,55,0,0,0,0,0,0,55,55,61,62,62,63,0,0,57,0,55,0,0,0,61,0,55,60,64,63,64,0,55,0,0,62,62,58,59,56,61,56,61,61,61,61,0,0,55,64,64,65,65,65,66,61,65,55,58,59,67,68,69,70,71,72,62,56,73,60,74,64,57,75,66,61,65,55,58,59,67,68,69,70,71,72,62,56,73,60,74,64,57,75,59,67,70,65,66,61,65,55,58,59,67,69,70,72,62,56,73,60,74,64,57,66,61,65,55,58,59,67,69,70,72,62,56,73,60,74,64,57,69,72,65,69,72,66,67,70,65,65,65,67,70,69,72,66,61,65,55,58,59,67,69,70,72,62,56,73,60,74,64,57,63,66,66,61,61,65,65,55,58,59,67,68,69,70,71,72,62,56,73,60,74,64,57,75,75,66,61,65,55,58,59,67,68,69,70,71,72,62,56,73,60,74,64,57,75,74,65,55,73,74,67,70,66,61,65,55,58,59,67,68,69,70,71,72,62,56,73,60,74,64,57,75,68,71,65,67,70,65,65,65,59,65,65,65,65,55,65,65,65,65,74,56,58,67,70,66,65,73,74,0,65,66,65,55,58,59,67,69,70,72,73,60,74,64,57,59,67,70,67,69,70,72,68,71,69,72,66,0,67,70,67,70,65,66,63,63,69,72,67,70,66,61,65,55,58,59,67,69,70,72,62,56,73,60,74,64,57,66,61,65,75,0,67,66,61,65,55,58,59,67,68,69,70,71,72,62,56,73,60,74,64,57,75,66,61,65,55,58,59,67,68,69,70,71,72,62,56,73,60,74,64,57,75,66,61,65,55,58,59,67,68,69,70,71,72,62,56,73,60,74,64,57,75,67,70,0,63,63,63,63,63,63,65,76,76,0,0,77,77,77,77,77,78,77,78,77,78,77,77,78,77,78,78,77,77,77,77,78,78,78,77,78,77,78,77,78,77,78,77,78,78,77,77,77,77,77,77,77,77,78,78,77,77,77,77,77,77,77,78,77,77,78,77,78,77,78,77,77,77,77,77,0,79,79,79,79,79,79,79,79,79,79,0,0,80,80,81,80,81,80,80,80,81,80,81,80,80,80,81,80,81,80,81,80,80,81,80,80,81,81,80,81,80,81,80,81,80,82,82,82,82,0,0,0,82,82,83,84,82,83,84,82,83,82,83,82,83,83,82,83,82,83,84,82,83,84,82,83,84,84,82,82,83,82,83,84,84,82,83,82,83,82,83,82,83,84,82,83,84,82,83,84],"f":[null,null,null,null,null,null,null,[[["bool",15]],["parserbuilder",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["parser",3]],[[["bool",15]],["parserbuilder",3]],[[],["error",4]],[[],["parserbuilder",3]],[[],["parser",3]],[[]],[[]],[[]],[[],["parserbuilder",3]],[[],["str",15]],[[["bool",15]],["parserbuilder",3]],[[["error",4]],["bool",15]],[[["str",15]],["string",3]],[[["string",3],["str",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",3]],["error",4]],[[]],[[["error",3]],["error",4]],[[]],[[]],[[]],null,[[["bool",15]],["parserbuilder",3]],[[]],[[]],[[]],[[]],[[["char",15]],["bool",15]],[[["u8",15]],["bool",15]],[[["char",15]],["bool",15]],[[["bool",15]],["parserbuilder",3]],[[["error",4]],["bool",15]],[[["u32",15]],["parserbuilder",3]],[[],["parserbuilder",3]],[[],["parser",3]],[[["bool",15]],["parserbuilder",3]],[[["str",15]],[["result",6],["hir",3]]],[[["bool",15]],["parserbuilder",3]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["char",15]],[["bool",15],["result",4],["unicodeworderror",3]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["bool",15]],["parserbuilder",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["flagsitem",3]],[["option",4],["usize",15]]],null,null,null,null,null,[[],[["option",4],["span",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["u8",15]]],null,[[],[["option",4],["u32",15]]],[[],["error",3]],[[],["errorkind",4]],[[],["span",3]],[[],["position",3]],[[],["withcomments",3]],[[],["comment",3]],[[],["ast",4]],[[],["alternation",3]],[[],["concat",3]],[[],["literal",3]],[[],["literalkind",4]],[[],["specialliteralkind",4]],[[],["hexliteralkind",4]],[[],["class",4]],[[],["classperl",3]],[[],["classperlkind",4]],[[],["classascii",3]],[[],["classasciikind",4]],[[],["classunicode",3]],[[],["classunicodekind",4]],[[],["classunicodeopkind",4]],[[],["classbracketed",3]],[[],["classset",4]],[[],["classsetitem",4]],[[],["classsetrange",3]],[[],["classsetunion",3]],[[],["classsetbinaryop",3]],[[],["classsetbinaryopkind",4]],[[],["assertion",3]],[[],["assertionkind",4]],[[],["repetition",3]],[[],["repetitionop",3]],[[],["repetitionkind",4]],[[],["repetitionrange",4]],[[],["group",3]],[[],["groupkind",4]],[[],["capturename",3]],[[],["setflags",3]],[[],["flags",3]],[[],["flagsitem",3]],[[],["flagsitemkind",4]],[[],["flag",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["span",3]],["ordering",4]],[[["position",3]],["ordering",4]],null,null,null,[[],["str",15]],[[],["u32",15]],[[]],[[]],null,null,[[["error",3]],["bool",15]],[[["errorkind",4]],["bool",15]],[[["span",3]],["bool",15]],[[["position",3]],["bool",15]],[[["withcomments",3]],["bool",15]],[[["comment",3]],["bool",15]],[[["ast",4]],["bool",15]],[[["alternation",3]],["bool",15]],[[["concat",3]],["bool",15]],[[["literal",3]],["bool",15]],[[["literalkind",4]],["bool",15]],[[["specialliteralkind",4]],["bool",15]],[[["hexliteralkind",4]],["bool",15]],[[["class",4]],["bool",15]],[[["classperl",3]],["bool",15]],[[["classperlkind",4]],["bool",15]],[[["classascii",3]],["bool",15]],[[["classasciikind",4]],["bool",15]],[[["classunicode",3]],["bool",15]],[[["classunicodekind",4]],["bool",15]],[[["classunicodeopkind",4]],["bool",15]],[[["classbracketed",3]],["bool",15]],[[["classset",4]],["bool",15]],[[["classsetitem",4]],["bool",15]],[[["classsetrange",3]],["bool",15]],[[["classsetunion",3]],["bool",15]],[[["classsetbinaryop",3]],["bool",15]],[[["classsetbinaryopkind",4]],["bool",15]],[[["assertion",3]],["bool",15]],[[["assertionkind",4]],["bool",15]],[[["repetition",3]],["bool",15]],[[["repetitionop",3]],["bool",15]],[[["repetitionkind",4]],["bool",15]],[[["repetitionrange",4]],["bool",15]],[[["group",3]],["bool",15]],[[["groupkind",4]],["bool",15]],[[["capturename",3]],["bool",15]],[[["setflags",3]],["bool",15]],[[["flags",3]],["bool",15]],[[["flagsitem",3]],["bool",15]],[[["flagsitemkind",4]],["bool",15]],[[["flag",4]],["bool",15]],[[],["result",4]],[[["flag",4]],[["option",4],["bool",15]]],[[],[["option",4],["flags",3]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],[["classasciikind",4],["option",4]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ast",4]],[[],["ast",4]],[[],["classsetitem",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,[[],["errorkind",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["error",3]],["bool",15]],[[["errorkind",4]],["bool",15]],[[["span",3]],["bool",15]],[[["position",3]],["bool",15]],[[["withcomments",3]],["bool",15]],[[["comment",3]],["bool",15]],[[["ast",4]],["bool",15]],[[["alternation",3]],["bool",15]],[[["concat",3]],["bool",15]],[[["literal",3]],["bool",15]],[[["literalkind",4]],["bool",15]],[[["class",4]],["bool",15]],[[["classperl",3]],["bool",15]],[[["classascii",3]],["bool",15]],[[["classunicode",3]],["bool",15]],[[["classunicodekind",4]],["bool",15]],[[["classbracketed",3]],["bool",15]],[[["classset",4]],["bool",15]],[[["classsetitem",4]],["bool",15]],[[["classsetrange",3]],["bool",15]],[[["classsetunion",3]],["bool",15]],[[["classsetbinaryop",3]],["bool",15]],[[["assertion",3]],["bool",15]],[[["repetition",3]],["bool",15]],[[["repetitionop",3]],["bool",15]],[[["repetitionkind",4]],["bool",15]],[[["repetitionrange",4]],["bool",15]],[[["group",3]],["bool",15]],[[["groupkind",4]],["bool",15]],[[["capturename",3]],["bool",15]],[[["setflags",3]],["bool",15]],[[["flags",3]],["bool",15]],[[["flagsitem",3]],["bool",15]],[[["flagsitemkind",4]],["bool",15]],null,null,null,null,[[["position",3]],["span",3]],[[["usize",15]],["position",3]],null,null,null,[[["span",3]],[["option",4],["ordering",4]]],[[["position",3]],[["option",4],["ordering",4]]],[[],["str",15]],null,[[["classsetitem",4]]],null,[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["position",3]],["span",3]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["classsetunion",3]],["classset",4]],[[["visitor",8],["ast",4]],["result",4]],[[],["result",4]],[[],["result",4]],[[["classsetbinaryop",3]],["result",4]],[[["classsetbinaryop",3]],["result",4]],[[["classsetbinaryop",3]],["result",4]],[[["classsetbinaryop",3]],["result",4]],[[["classsetbinaryop",3]],["result",4]],[[["classsetbinaryop",3]],["result",4]],[[["classsetitem",4]],["result",4]],[[["classsetitem",4]],["result",4]],[[["classsetitem",4]],["result",4]],[[["classsetitem",4]],["result",4]],[[["ast",4]],["result",4]],[[["ast",4]],["result",4]],[[["ast",4]],["result",4]],[[["ast",4]],["result",4]],[[["position",3]],["span",3]],[[["position",3]],["span",3]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["parser",3]],[[],["parserbuilder",3]],[[],["parser",3]],[[]],[[]],[[],["parserbuilder",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["bool",15]],["parserbuilder",3]],[[]],[[]],[[["u32",15]],["parserbuilder",3]],[[],["parserbuilder",3]],[[],["parser",3]],[[["bool",15]],["parserbuilder",3]],[[["str",15]],[["result",4],["ast",4],["error",3]]],[[["str",15]],[["error",3],["withcomments",3],["result",4]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["printer",3]],[[["write",8],["ast",4]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["vec",3],["hir",3]],["hir",3]],[[["anchor",4]],["hir",3]],[[["bool",15]],["hir",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["class",4]],["hir",3]],[[],["error",3]],[[],["errorkind",4]],[[],["hir",3]],[[],["hirkind",4]],[[],["literal",4]],[[],["class",4]],[[],["classunicode",3]],[[],["classunicoderange",3]],[[],["classbytes",3]],[[],["classbytesrange",3]],[[],["anchor",4]],[[],["wordboundary",4]],[[],["group",3]],[[],["groupkind",4]],[[],["repetition",3]],[[],["repetitionkind",4]],[[],["repetitionrange",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["classunicoderange",3]],["ordering",4]],[[["classbytesrange",3]],["ordering",4]],[[["vec",3],["hir",3]],["hir",3]],[[],["classunicoderange",3]],[[],["classbytesrange",3]],[[],["str",15]],[[["classunicode",3]]],[[["classbytes",3]]],[[["bool",15]],["hir",3]],[[]],[[],["hir",3]],[[],["classunicode",3]],[[],["classbytes",3]],[[],["char",15]],[[],["u8",15]],[[["error",3]],["bool",15]],[[["errorkind",4]],["bool",15]],[[["hir",3]],["bool",15]],[[["hirkind",4]],["bool",15]],[[["literal",4]],["bool",15]],[[["class",4]],["bool",15]],[[["classunicode",3]],["bool",15]],[[["classunicoderange",3]],["bool",15]],[[["classbytes",3]],["bool",15]],[[["classbytesrange",3]],["bool",15]],[[["anchor",4]],["bool",15]],[[["wordboundary",4]],["bool",15]],[[["group",3]],["bool",15]],[[["groupkind",4]],["bool",15]],[[["repetition",3]],["bool",15]],[[["repetitionkind",4]],["bool",15]],[[["repetitionrange",4]],["bool",15]],[[],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["group",3]],["hir",3]],[[],["bool",15]],null,null,[[["classunicode",3]]],[[["classbytes",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["hirkind",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["classunicodeiter",3]],[[],["classbytesiter",3]],[[],["errorkind",4]],[[],["hirkind",4]],null,null,null,[[["literal",4]],["hir",3]],[[["error",3]],["bool",15]],[[["hir",3]],["bool",15]],[[["hirkind",4]],["bool",15]],[[["literal",4]],["bool",15]],[[["class",4]],["bool",15]],[[["classunicode",3]],["bool",15]],[[["classunicoderange",3]],["bool",15]],[[["classbytes",3]],["bool",15]],[[["classbytesrange",3]],["bool",15]],[[["group",3]],["bool",15]],[[["groupkind",4]],["bool",15]],[[["repetition",3]],["bool",15]],[[["repetitionkind",4]],["bool",15]],[[["repetitionrange",4]],["bool",15]],[[]],[[]],[[]],[[],["classunicode",3]],[[["char",15]],["classunicoderange",3]],[[],["classbytes",3]],[[["u8",15]],["classbytesrange",3]],[[],[["option",4],["classunicoderange",3]]],[[],[["classbytesrange",3],["option",4]]],[[["classunicoderange",3]],[["ordering",4],["option",4]]],[[["classbytesrange",3]],[["ordering",4],["option",4]]],[[],["str",15]],null,[[["classunicoderange",3]]],[[["classbytesrange",3]]],[[]],[[]],[[["repetition",3]],["hir",3]],[[],["span",3]],[[]],[[]],[[],["char",15]],[[],["u8",15]],[[["classunicode",3]]],[[["classbytes",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],null,[[],[["result",4],["casefolderror",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["classunicode",3]]],[[["classbytes",3]]],[[["visitor",8],["hir",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[["hir",3]],["result",4]],[[["hir",3]],["result",4]],[[["hir",3]],["result",4]],[[["hir",3]],["result",4]],[[["wordboundary",4]],["hir",3]],null,null,null,null,[[["literal",3]],["bool",15]],[[["classbytes",3]],["bool",15]],[[["classunicode",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["literals",3]],[[],["literal",3]],[[]],[[]],[[["literal",3]],["ordering",4]],[[],["bool",15]],[[],["bool",15]],[[["literals",3]],["bool",15]],[[]],[[]],[[],["vec",3]],[[],["vec",3]],[[],["literals",3]],[[],["literal",3]],[[["literals",3]],["bool",15]],[[["literal",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],[["option",4],["usize",15]]],[[["literals",3]],["bool",15]],[[["u8",15],["vec",3]],["literal",3]],[[["literal",3]],[["ordering",4],["option",4]]],[[["hir",3]],["literals",3]],[[]],[[["usize",15]],["literals",3]],[[["usize",15]],["literals",3]],[[["hir",3]],["literals",3]],[[],["literals",3]],[[]],[[]],[[["usize",15]],[["literals",3],["option",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["literals",3]],[[],["literals",3]],[[["literals",3]],["bool",15]],[[["hir",3]],["bool",15]],[[["hir",3]],["bool",15]],null,[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["printer",3]],[[["write",8],["hir",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["bool",15]],["translatorbuilder",3]],[[]],[[]],[[]],[[]],[[],["translator",3]],[[["bool",15]],["translatorbuilder",3]],[[],["translatorbuilder",3]],[[],["translator",3]],[[]],[[]],[[],["translatorbuilder",3]],[[["bool",15]],["translatorbuilder",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["bool",15]],["translatorbuilder",3]],[[],["translatorbuilder",3]],[[],["translator",3]],[[["bool",15]],["translatorbuilder",3]],[[]],[[]],[[["str",15],["ast",4]],[["hir",3],["error",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["bool",15]],["translatorbuilder",3]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["utf8sequence",4]],[[],["utf8range",3]],[[]],[[]],[[["utf8sequence",4]],["ordering",4]],[[["utf8range",3]],["ordering",4]],null,[[["utf8sequence",4]],["bool",15]],[[["utf8range",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["bool",15]],[[["u8",15]],["bool",15]],[[["utf8sequence",4]],["bool",15]],[[["utf8range",3]],["bool",15]],[[["char",15]]],[[],["option",4]],[[["utf8sequence",4]],[["ordering",4],["option",4]]],[[["utf8range",3]],[["ordering",4],["option",4]]],[[]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Error"],[3,"ParserBuilder"],[3,"Parser"],[3,"UnicodeWordError"],[4,"ClassAsciiKind"],[4,"Ast"],[4,"ClassSetItem"],[4,"RepetitionRange"],[4,"SpecialLiteralKind"],[4,"ClassSet"],[4,"Class"],[4,"GroupKind"],[4,"ErrorKind"],[4,"Flag"],[4,"ClassUnicodeOpKind"],[4,"ClassSetBinaryOpKind"],[4,"ClassPerlKind"],[4,"AssertionKind"],[8,"Visitor"],[4,"FlagsItemKind"],[4,"LiteralKind"],[4,"ClassUnicodeKind"],[4,"RepetitionKind"],[4,"HexLiteralKind"],[3,"Flags"],[3,"WithComments"],[3,"Repetition"],[3,"Group"],[3,"Alternation"],[3,"Concat"],[3,"Error"],[3,"Span"],[3,"Position"],[3,"Comment"],[3,"Literal"],[3,"ClassPerl"],[3,"ClassAscii"],[3,"ClassUnicode"],[3,"ClassBracketed"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[3,"Assertion"],[3,"RepetitionOp"],[3,"CaptureName"],[3,"SetFlags"],[3,"FlagsItem"],[13,"NamedValue"],[13,"FlagDuplicate"],[13,"FlagRepeatedNegation"],[13,"GroupNameDuplicate"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[4,"HirKind"],[4,"WordBoundary"],[4,"RepetitionRange"],[4,"Literal"],[4,"Class"],[4,"GroupKind"],[4,"ErrorKind"],[4,"Anchor"],[8,"Visitor"],[4,"RepetitionKind"],[3,"Hir"],[3,"Error"],[3,"ClassUnicode"],[3,"ClassUnicodeIter"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesIter"],[3,"ClassBytesRange"],[3,"Group"],[3,"Repetition"],[3,"CaseFoldError"],[13,"CaptureName"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[4,"Utf8Sequence"],[3,"Utf8Range"],[3,"Utf8Sequences"]]},\
"render":{"doc":"Rendering engine binary. Produce two-dimensional image …","t":[17,5,5,5],"n":["BACKUP_TERM_WIDTH","initialisation","load_parameters","main"],"q":["render","","",""],"d":["Backup print width if the terminal width can not be …","Initialise the input arguments.","Load the required files and form the input parameters.","Main program function."],"i":[0,0,0,0],"f":[null,[[["usize",15]]],[[["path",3],["usize",15]],["parameters",3]],[[]]],"p":[]},\
"rgb":{"doc":"Basic struct for <code>RGB</code> and <code>RGBA</code> pixels. Packed, with red …","t":[8,8,8,8,8,8,3,6,6,3,6,6,8,12,11,11,11,11,11,11,11,11,11,11,0,10,10,10,10,11,11,11,11,10,10,10,10,11,11,10,11,11,10,10,11,11,10,10,10,10,10,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,6,6,3,6,6,6,6,6,6,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AsPixels","ComponentBytes","ComponentMap","ComponentSlice","FromSlice","Pod","RGB","RGB16","RGB8","RGBA","RGBA16","RGBA8","Zeroable","a","add","add","add","add","add_assign","add_assign","add_assign","add_assign","alpha","alpha","alt","as_bgr","as_bgr_mut","as_bgra","as_bgra_mut","as_bytes","as_bytes","as_bytes_mut","as_bytes_mut","as_gray","as_gray_alpha","as_gray_alpha_mut","as_gray_mut","as_mut","as_mut","as_mut_slice","as_mut_slice","as_mut_slice","as_pixels","as_pixels_mut","as_ref","as_ref","as_rgb","as_rgb_mut","as_rgba","as_rgba_mut","as_slice","as_slice","as_slice","b","b","bgr","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","div","div","div_assign","div_assign","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","g","g","hash","hash","into","into","into","into","into","into","iter","iter","map","map","map","map_alpha","map_rgb","mul","mul","mul_assign","mul_assign","ne","ne","new","new","new_alpha","new_alpha","partial_cmp","partial_cmp","r","r","rgb","rgb_mut","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","try_from","try_from","try_into","try_into","type_id","type_id","zeroed","0","0","1","BGR","BGR16","BGR8","BGRA","BGRA16","BGRA8","GRAY16","GRAY8","GRAYA16","GRAYA8","Gray","GrayAlpha","a","add","add","add","add","add_assign","add_assign","add_assign","add_assign","alpha","alpha","alpha","as_mut","as_mut","as_mut_slice","as_mut_slice","as_mut_slice","as_mut_slice","as_ref","as_ref","as_slice","as_slice","as_slice","as_slice","b","b","bgr","bgr_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","cmp","cmp","cmp","default","default","default","default","deref","div","div","div_assign","div_assign","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","g","g","gray","gray_mut","hash","hash","hash","hash","into","into","into","into","into","into","into","into","iter","iter","map","map","map","map","map_alpha","map_alpha","map_gray","map_rgb","mul","mul","mul_assign","mul_assign","ne","ne","ne","ne","new","new","new","new","new_alpha","new_alpha","partial_cmp","partial_cmp","partial_cmp","partial_cmp","r","r","rgb","rgb_mut","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["rgb","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rgb::altd":["Casts a slice of bytes into a slice of pixels, e.g. <code>[u8]</code> …","Casting a slice of <code>RGB/A</code> values to a slice of <code>u8</code>","Applying operation to every component","Casting the struct to slices of its components","Cast a slice of component values (bytes) as a slice of …","Re-export from <code>bytemuck</code> crate","The RGB pixel","16-bit RGB in machine’s native endian","8-bit RGB","The RGBA pixel","16-bit RGB in machine’s native endian. 0 = transparent, …","8-bit RGBA, alpha is last. 0 = transparent, 255 = opaque.","Re-export from <code>bytemuck</code> crate","Alpha","","","","","","","","","Convenience function for converting to RGBA","Create a new RGBA with the new alpha value, but same RGB …","BGR/BGRA alernative layouts & grayscale","Reinterpert slice as reverse-order BGR pixels","Reinterpert ntable slice as reverse-order BGR pixels","Reinterpert slice as reverse-order BGRA pixels","Reinterpert mutable slice as reverse-order BGRA pixels","The components interpreted as raw bytes, in machine’s …","The components interpreted as raw bytes, in machine’s …","The components interpreted as raw bytes, in machine’s …","The components interpreted as raw bytes, in machine’s …","Reinterpert mutable slice as grayscale pixels","Reinterpert mutable slice as grayscale pixels with alpha","Reinterpert mutable slice as grayscale pixels with alpha","Reinterpert mutable slice as grayscale pixels","","","The components interpreted as a mutable array, e.g. one …","","","Reinterpret the slice as a read-only/shared slice of …","Reinterpret the slice as a mutable/exclusive slice of …","","","Reinterpert slice as RGB pixels","Reinterpert mutable slice as RGB pixels","Reinterpert slice as RGBA pixels","Reinterpert mutable slice as RGBA pixels","The components interpreted as an array, e.g. one <code>RGB</code> …","","","Blue","Blue","Copy RGB components out of the RGBA struct","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes exactly 3 elements from the iterator and creates a …","Takes exactly 4 elements from the iterator and creates a …","Green","Green","","","","","","","","","Iterate over color components (R, G, and B)","Iterate over all components (length=4)","Convenience function (equivalent of …","","","Create a new RGBA with a new alpha value created by the …","Create new RGBA with the same alpha value, but different …","","","","","","","Convenience function for creating a new pixel The order …","Convenience function for creating a new pixel The order …","Convenience function for converting to RGBA with alpha …","Convenience function for creating a new pixel The order …","","","Red","Red","Copy RGB components out of the RGBA struct","Provide a mutable view of only RGB components (leaving …","","","","","","","","","","","","","","","","","Calls <code>zeroed</code>.","brightness level","brightness level","alpha","RGB in reverse byte order","16-bit BGR in machine’s native endian","8-bit BGR","BGR+A","16-bit BGR in machine’s native endian","8-bit BGRA","16-bit gray in machine’s native endian","8-bit gray","16-bit gray with alpha in machine’s native endian","8-bit gray with alpha in machine’s native endian","Grayscale. Use <code>.0</code> or <code>*</code> (deref) to access the value.","Grayscale with alpha. Use <code>.0</code>/<code>.1</code> to access.","Alpha last","","","","","","","","","Convenience function for converting to RGBA","Create a new RGBA with the new alpha value, but same RGB …","Create a new <code>GrayAlpha</code> with the new alpha value, but same …","","","","","","","","","","","","","Blue first","Blue first","Copy RGB components out of the RGBA struct","Provide a mutable view of only RGB components (leaving …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Green","Green","Copy <code>Gray</code> component out of the <code>GrayAlpha</code> struct","Provide a mutable view of only <code>Gray</code> component (leaving …","","","","","","","","","","","","","Iterate over color components (R, G, and B)","Iterate over all components (length=4)","","","","","Create a new RGBA with a new alpha value created by the …","Create a new <code>GrayAlpha</code> with a new alpha value created by …","Create new <code>GrayAlpha</code> with the same alpha value, but …","Create new RGBA with the same alpha value, but different …","","","","","","","","","Convenience function for creating a new pixel Wargning: …","Convenience function for creating a new pixel Warning: …","New grayscale pixel","New grayscale+alpha pixel","Convenience function for converting to RGBA with alpha …","Convenience function for creating a new pixel Warning: …","","","","","Red last","Red","Copy RGB components out of the RGBA struct","Provide a mutable view of only RGB components (leaving …","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,1,1,2,2,1,1,2,1,0,3,3,3,3,4,4,4,4,3,3,3,3,2,1,5,2,1,6,6,2,1,3,3,3,3,5,2,1,2,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,2,2,1,1,1,2,1,7,2,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,1,2,2,1,1,2,2,1,1,2,1,2,1,2,1,2,1,8,9,10,10,0,0,0,0,0,0,0,0,0,0,0,0,11,9,9,10,10,9,9,10,10,12,11,10,9,10,12,11,9,10,9,10,12,11,9,10,12,11,11,11,12,11,9,10,12,11,9,10,12,11,9,10,12,11,9,10,12,11,9,10,9,9,10,9,10,12,11,9,10,12,12,12,12,11,11,9,10,12,12,12,12,11,11,11,11,11,11,11,11,9,9,9,10,10,10,12,11,10,10,12,11,9,10,12,12,12,11,11,11,9,10,12,11,12,11,9,10,11,10,10,11,9,10,9,10,12,11,9,10,12,11,9,10,12,11,12,11,9,10,12,11,11,11,9,9,10,10,9,9,10,10,9,10,12,11,9,10,12,11,9,10,12,11,9,10],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["rgb",3]]],[[["rgba",3]]],[[]],[[]],[[["rgb",3]]],[[]],[[["rgba",3]]],[[],["rgba",3]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["bgr",3]],[[]],[[]],[[]],[[]],[[],["rgb",3]],[[],["rgba",3]],[[["rgb",3]],["ordering",4]],[[["rgba",3]],["ordering",4]],[[],["rgb",3]],[[],["rgba",3]],[[]],[[]],[[]],[[]],[[["rgb",3]],["bool",15]],[[["rgba",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["rgb",3],["u8",15]]],[[["i16",15],["rgb",3]]],[[["i16",15],["rgb",3]]],[[["rgb",3],["u16",15]]],[[["rgb",3],["u16",15]]],[[["rgb",3],["u8",15]]],[[["rgb",3],["u16",15]]],[[["rgb",3],["u8",15]]],[[["bgr",3]]],[[]],[[["rgb",3],["i32",15]]],[[]],[[["rgb",3],["f32",15]]],[[["gray",3]]],[[]],[[]],[[["rgba",3],["u16",15]]],[[["bgr",3]]],[[["bgra",3]]],[[["grayalpha",3]]],[[["bgr",3]]],[[]],[[["rgb",3]]],[[["rgba",3],["f32",15]]],[[["rgba",3],["i32",15]]],[[["i16",15],["rgba",3]]],[[["rgb",3]]],[[["rgba",3],["u16",15]]],[[["u8",15],["rgba",3]]],[[]],[[["i16",15],["rgba",3]]],[[["u8",15],["rgba",3]]],[[["rgba",3],["u16",15]]],[[["intoiterator",8]]],[[["intoiterator",8]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["cloned",3],["iter",3]]],[[],[["cloned",3],["iter",3]]],[[]],[[],["rgb",3]],[[],["rgba",3]],[[],["rgba",3]],[[],["rgba",3]],[[]],[[]],[[]],[[]],[[["rgb",3]],["bool",15]],[[["rgba",3]],["bool",15]],[[]],[[]],[[],["rgba",3]],[[]],[[["rgb",3]],[["ordering",4],["option",4]]],[[["rgba",3]],[["ordering",4],["option",4]]],null,null,[[],["rgb",3]],[[],["rgb",3]],[[["rgb",3]]],[[]],[[]],[[["rgba",3]]],[[]],[[["rgb",3]]],[[]],[[["rgba",3]]],[[["iterator",8]]],[[["iterator",8]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["gray",3]]],[[]],[[["grayalpha",3]]],[[]],[[["gray",3]]],[[]],[[["grayalpha",3]]],[[]],[[],["bgra",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["bgr",3]],[[],["bgr",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bgr",3]],[[],["bgra",3]],[[],["gray",3]],[[],["grayalpha",3]],[[["bgr",3]],["ordering",4]],[[["bgra",3]],["ordering",4]],[[["gray",3]],["ordering",4]],[[["grayalpha",3]],["ordering",4]],[[],["bgr",3]],[[],["bgra",3]],[[],["gray",3]],[[],["grayalpha",3]],[[]],[[]],[[]],[[]],[[]],[[["bgr",3]],["bool",15]],[[["bgra",3]],["bool",15]],[[["gray",3]],["bool",15]],[[["grayalpha",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["rgb",3]]],[[]],[[]],[[]],[[["bgr",3]]],[[["rgb",3]]],[[["rgba",3]]],[[]],[[]],[[["bgr",3]]],[[]],[[["rgb",3]]],[[]],[[]],[[]],[[["gray",3]]],[[["gray",3]]],[[]],null,null,[[],["gray",3]],[[],["gray",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["cloned",3],["iter",3]]],[[],[["cloned",3],["iter",3]]],[[],["bgr",3]],[[],["bgra",3]],[[],["gray",3]],[[],["grayalpha",3]],[[],["bgra",3]],[[],["grayalpha",3]],[[],["grayalpha",3]],[[],["bgra",3]],[[]],[[]],[[]],[[]],[[["bgr",3]],["bool",15]],[[["bgra",3]],["bool",15]],[[["gray",3]],["bool",15]],[[["grayalpha",3]],["bool",15]],[[]],[[]],[[]],[[]],[[],["bgra",3]],[[]],[[["bgr",3]],[["ordering",4],["option",4]]],[[["bgra",3]],[["ordering",4],["option",4]]],[[["gray",3]],[["ordering",4],["option",4]]],[[["grayalpha",3]],[["ordering",4],["option",4]]],null,null,[[],["bgr",3]],[[],["bgr",3]],[[["gray",3]]],[[]],[[]],[[["grayalpha",3]]],[[["gray",3]]],[[]],[[["grayalpha",3]]],[[]],[[["iterator",8]]],[[["iterator",8]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"RGBA"],[3,"RGB"],[8,"FromSlice"],[8,"ComponentBytes"],[8,"ComponentSlice"],[8,"AsPixels"],[8,"ComponentMap"],[8,"Zeroable"],[3,"Gray"],[3,"GrayAlpha"],[3,"BGRA"],[3,"BGR"]]},\
"ryu":{"doc":"github crates-io docs-rs","t":[3,8,11,11,11,11,11,11,11,11,11,0,11,11,11,5,5],"n":["Buffer","Float","borrow","borrow_mut","clone","default","format","format_finite","from","into","new","raw","try_from","try_into","type_id","format32","format64"],"q":["ryu","","","","","","","","","","","","","","","ryu::raw",""],"d":["Safe API for formatting floating point numbers to text.","A floating point number, f32 or f64, that can be written …","","","","","Print a floating point number into this buffer and return …","Print a floating point number into this buffer and return …","","","This is a cheap operation; you don’t need to worry …","Unsafe functions that mirror the API of the C …","","","","Print f32 to the given buffer and return number of bytes …","Print f64 to the given buffer and return number of bytes …"],"i":[0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0],"f":[null,null,[[]],[[]],[[]],[[]],[[["float",8]],["str",15]],[[["float",8]],["str",15]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["f32",15]],["usize",15]],[[["f64",15]],["usize",15]]],"p":[[3,"Buffer"]]},\
"scopeguard":{"doc":"A scope guard will run a given closure when it goes out …","t":[4,3,8,11,11,11,11,14,11,11,11,11,11,11,11,5,11,11,11,10,11,11,11,11,11,11,11,11],"n":["Always","ScopeGuard","Strategy","borrow","borrow","borrow_mut","borrow_mut","defer","deref","deref_mut","drop","fmt","fmt","from","from","guard","into","into","into_inner","should_run","should_run","try_from","try_from","try_into","try_into","type_id","type_id","with_strategy"],"q":["scopeguard","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Always run on scope exit.","<code>ScopeGuard</code> is a scope guard that may own a protected …","Controls in which cases the associated code should be run","","","","","Macro to create a <code>ScopeGuard</code> (always run).","","","","","","","","Create a new <code>ScopeGuard</code> owning <code>v</code> and with deferred …","","","“Defuse” the guard and extract the value without …","Return <code>true</code> if the guard’s associated code should run …","","","","","","","","Create a <code>ScopeGuard</code> that owns <code>v</code> (accessible through …"],"i":[0,0,0,1,2,1,2,0,1,1,1,1,2,1,2,0,1,2,1,3,2,1,2,1,2,1,2,1],"f":[null,null,null,[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],[["always",4],["scopeguard",3]]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["scopeguard",3]]],"p":[[3,"ScopeGuard"],[4,"Always"],[8,"Strategy"]]},\
"serde":{"doc":"Serde","t":[8,8,16,16,16,8,16,16,16,16,16,16,16,8,11,11,11,0,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,14,11,11,0,14,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,13,13,13,8,8,8,8,16,13,8,8,16,16,16,16,16,8,13,3,8,13,8,13,13,13,13,13,8,13,13,13,13,4,13,13,13,16,16,16,8,8,11,11,11,11,11,11,11,11,10,11,10,10,11,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,11,11,10,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,10,11,11,11,10,11,10,11,11,10,11,11,11,11,11,11,11,10,11,11,10,11,11,0,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,16,16,16,16,16,16,16,3,16,16,16,16,16,16,16,16,8,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,11,11,11,11,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,11,11,11,10,10,10,10,10,10,11,11,11,11,11,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11],"n":["Deserialize","Deserializer","Error","Error","Ok","Serialize","SerializeMap","SerializeSeq","SerializeStruct","SerializeStructVariant","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","Serializer","collect_map","collect_seq","collect_str","de","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","forward_to_deserialize_any","is_human_readable","is_human_readable","ser","serde_if_integer128","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","Bool","Bytes","Char","Deserialize","DeserializeOwned","DeserializeSeed","Deserializer","Deserializer","Enum","EnumAccess","Error","Error","Error","Error","Error","Error","Expected","Float","IgnoredAny","IntoDeserializer","Map","MapAccess","NewtypeStruct","NewtypeVariant","Option","Other","Seq","SeqAccess","Signed","Str","StructVariant","TupleVariant","Unexpected","Unit","UnitVariant","Unsigned","Value","Value","Variant","VariantAccess","Visitor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","default","deserialize","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","duplicate_field","eq","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","into","into","into_deserializer","invalid_length","invalid_type","invalid_value","is_human_readable","missing_field","ne","newtype_variant","newtype_variant_seed","next_element","next_element_seed","next_entry","next_entry_seed","next_key","next_key_seed","next_value","next_value_seed","size_hint","size_hint","struct_variant","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","tuple_variant","type_id","type_id","unit_variant","unknown_field","unknown_variant","value","variant","variant_seed","visit_bool","visit_bool","visit_borrowed_bytes","visit_borrowed_str","visit_byte_buf","visit_bytes","visit_bytes","visit_char","visit_enum","visit_enum","visit_f32","visit_f64","visit_f64","visit_i128","visit_i128","visit_i16","visit_i32","visit_i64","visit_i64","visit_i8","visit_map","visit_map","visit_newtype_struct","visit_newtype_struct","visit_none","visit_none","visit_seq","visit_seq","visit_some","visit_some","visit_str","visit_str","visit_string","visit_u128","visit_u128","visit_u16","visit_u32","visit_u64","visit_u64","visit_u8","visit_unit","visit_unit","BoolDeserializer","BorrowedBytesDeserializer","BorrowedStrDeserializer","BytesDeserializer","CharDeserializer","CowStrDeserializer","Error","F32Deserializer","F64Deserializer","I128Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","I8Deserializer","IsizeDeserializer","MapAccessDeserializer","MapDeserializer","SeqAccessDeserializer","SeqDeserializer","StrDeserializer","StringDeserializer","U128Deserializer","U16Deserializer","U32Deserializer","U64Deserializer","U8Deserializer","UnitDeserializer","UsizeDeserializer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","custom","custom","description","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","end","end","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","ne","new","new","new","new","new","new","new","next_element_seed","next_element_seed","next_entry_seed","next_key_seed","next_value_seed","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","Error","Error","Error","Error","Error","Error","Error","Error","Error","Impossible","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Serialize","SerializeMap","SerializeMap","SerializeSeq","SerializeSeq","SerializeStruct","SerializeStruct","SerializeStructVariant","SerializeStructVariant","SerializeTuple","SerializeTuple","SerializeTupleStruct","SerializeTupleStruct","SerializeTupleVariant","SerializeTupleVariant","Serializer","borrow","borrow_mut","collect_map","collect_seq","collect_str","custom","end","end","end","end","end","end","end","end","end","end","end","end","end","end","from","into","is_human_readable","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_element","serialize_element","serialize_entry","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","serialize_value","skip_field","skip_field","try_from","try_into","type_id"],"q":["serde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde::deserde::de::valueserde::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A <strong>data structure</strong> that can be deserialized from any data …","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","The error type when some error occurs during …","The output type produced by this <code>Serializer</code> during …","A <strong>data structure</strong> that can be serialized into any data …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for …","A <strong>data format</strong> that can serialize any data structure …","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of …","Generic data structure deserialization framework.","Deserialize this value from the given Serde deserializer.","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Helper macro when implementing the <code>Deserializer</code> part of a …","Determine whether <code>Deserialize</code> implementations should …","Determine whether <code>Serialize</code> implementations should …","Generic data structure serialization framework.","Conditional compilation depending on whether Serde is …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData<T></code>…","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","The input contained a boolean value that was not expected.","The input contained a <code>&[u8]</code> or <code>Vec<u8></code> that was not …","The input contained a <code>char</code> that was not expected.","A <strong>data structure</strong> that can be deserialized from any data …","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The type of the deserializer being converted into.","The input contained an enum that was not expected.","Provides a <code>Visitor</code> access to the data of an enum in the …","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","An efficient way of discarding data from a deserializer.","Converts an existing value into a <code>Deserializer</code> from which …","The input contained a map that was not expected.","Provides a <code>Visitor</code> access to each entry of a map in the …","The input contained a newtype struct that was not …","The input contained a newtype variant that was not …","The input contained an <code>Option<T></code> that was not expected.","A message stating what uncategorized thing the input …","The input contained a sequence that was not expected.","Provides a <code>Visitor</code> access to each element of a sequence …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","The input contained a <code>&str</code> or <code>String</code> that was not …","The input contained a struct variant that was not …","The input contained a tuple variant that was not expected.","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a unit <code>()</code> that was not expected.","The input contained a unit variant that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or …","The type produced by using this seed.","The value produced by this visitor.","The <code>Visitor</code> that will be used to deserialize the content …","<code>VariantAccess</code> is a visitor that is created by the …","This trait represents a visitor that walks through a …","","","","","","","","","Raised when there is general error when deserializing a …","","Deserialize this value from the given Serde deserializer.","Equivalent to the more common <code>Deserialize::deserialize</code> …","","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Raised when a <code>Deserialize</code> struct type received more than …","","Format a message stating what data this Visitor expects …","","Format an explanation of what data was being expected. …","","","","","","","","","","Convert this value into a deserializer.","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Determine whether <code>Deserialize</code> implementations should …","Raised when a <code>Deserialize</code> struct type expected to receive …","","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, …","This returns <code>Ok(Some(key))</code> for the next key in the map, …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns a <code>Ok(value)</code> for the next value in the map.","Returns the number of elements remaining in the sequence, …","Returns the number of entries remaining in the map, if …","Called when deserializing a struct-like variant.","","","","","","","","Called when deserializing a tuple-like variant.","","","Called when deserializing a variant with no values.","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> enum type received a variant …","Building blocks for deserializing basic values using the …","<code>variant</code> is called to identify which variant to …","<code>variant</code> is called to identify which variant to …","The input contains a boolean.","","The input contains a byte array that lives at least as …","The input contains a string that lives at least as long …","The input contains a byte array and ownership of the byte …","The input contains a byte array. The lifetime of the byte …","","The input contains a <code>char</code>.","The input contains an enum.","","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","","The input contains a <code>i128</code>.","","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","","The input contains an <code>i8</code>.","The input contains a key-value map.","","The input contains a newtype struct.","","The input contains an optional that is absent.","","The input contains a sequence of elements.","","The input contains an optional that is present.","","The input contains a string. The lifetime of the string …","","The input contains a string and ownership of the string …","The input contains a <code>u128</code>.","","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","","The input contains a <code>u8</code>.","The input contains a unit <code>()</code>.","","A deserializer holding a <code>bool</code>.","A deserializer holding a <code>&[u8]</code> with a lifetime tied to …","A deserializer holding a <code>&str</code> with a lifetime tied to …","A deserializer holding a <code>&[u8]</code>. Always calls […","A deserializer holding a <code>char</code>.","A deserializer holding a <code>Cow<str></code>.","A minimal representation of all possible errors that can …","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>MapAccess</code>.","A deserializer that iterates over a map.","A deserializer holding a <code>SeqAccess</code>.","A deserializer that iterates over a sequence.","A deserializer holding a <code>&str</code>.","A deserializer holding a <code>String</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>()</code>.","A deserializer holding a <code>usize</codeheck for remaining elements after passing a …","Check for remaining elements after passing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new borrowed deserializer from the given string.","Create a new deserializer from the given bytes.","Create a new borrowed deserializer from the given …","Construct a new <code>MapDeserializer<I, E></code>.","Construct a new <code>SeqDeserializer<I, E></code>.","Construct a new <code>SeqAccessDeserializer<A></code>.","Construct a new <code>MapAccessDeserializer<A></code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait used by <code>Serialize</code> implementations to generically …","The error type when some error occurs during …","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Helper type for implementing a <code>Serializer</code> that does not …","The output type produced by this <code>Serializer</code> during …","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","A <strong>data structure</strong> that can be serialized into any data …","Returned from <code>Serializer::serialize_map</code>.","Type returned from <code>serialize_map</code> for serializing the …","Returned from <code>Serializer::serialize_seq</code>.","Type returned from <code>serialize_seq</code> for serializing the …","Returned from <code>Serializer::serialize_struct</code>.","Type returned from <code>serialize_struct</code> for serializing the …","Returned from <code>Serializer::serialize_struct_variant</code>.","Type returned from <code>serialize_struct_variant</code> for …","Returned from <code>Serializer::serialize_tuple</code>.","Type returned from <code>serialize_tuple</code> for serializing the …","Returned from <code>Serializer::serialize_tuple_struct</code>.","Type returned from <code>serialize_tuple_struct</code> for serializing …","Returned from <code>Serializer::serialize_tuple_variant</code>.","Type returned from <code>serialize_tuple_variant</code> for …","A <strong>data format</strong> that can serialize any data structure …","","","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of …","Used when a <code>Serialize</code> implementation encounters any error …","Finish serializing a sequence.","Finish serializing a tuple.","Finish serializing a tuple struct.","Finish serializing a tuple variant.","Finish serializing a map.","Finish serializing a struct.","Finish serializing a struct variant.","","","","","","","","","","Determine whether <code>Serialize</code> implementations should …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize a sequence element.","Serialize a tuple element.","","","Serialize a map entry consisting of a key and a value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a tuple struct field.","Serialize a tuple variant field.","Serialize a struct field.","Serialize a struct variant field.","","","","","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Serialize a map key.","","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData<T></code>…","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a map value.","","Indicate that a struct field has been skipped.","Indicate that a struct variant field has been skipped.","","",""],"i":[0,0,1,2,2,0,2,2,2,2,2,2,2,0,2,2,2,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,2,0,0,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,5,5,0,0,0,0,6,5,0,0,1,7,8,9,10,0,5,0,0,5,0,5,5,5,5,5,0,5,5,5,5,0,5,5,5,11,12,9,0,0,13,5,13,5,13,5,13,5,14,13,3,11,13,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,5,12,13,15,15,13,13,5,5,13,5,13,5,6,14,14,14,1,14,5,10,10,7,7,8,8,8,8,8,8,7,8,10,13,5,5,13,5,13,5,10,13,5,10,14,14,0,9,9,12,13,12,12,12,12,13,12,12,13,12,12,13,12,13,12,12,12,13,12,12,13,12,13,12,13,12,13,12,13,12,13,12,12,13,12,12,12,13,12,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,25,25,25,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,24,41,25,16,17,18,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,25,19,22,23,24,41,42,43,24,41,24,24,24,24,24,41,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,25,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,17,18,19,20,21,43,0,2,44,45,46,47,48,49,50,0,2,44,45,46,47,48,49,50,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,51,51,2,2,2,52,44,45,46,47,48,49,50,51,51,51,51,51,51,51,51,51,2,4,2,2,2,44,45,51,51,48,2,2,46,47,49,50,51,51,51,51,2,2,2,2,2,48,51,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,48,51,49,50,51,51,51],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],null,[[],["bool",15]],[[],["bool",15]],null,null,[[],["result",4]],[[["bool",15]],["result",4]],[[],["result",4]],[[["char",15]],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[["i128",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i8",15]],["result",4]],[[["option",4],["usize",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[],["result",4]],[[["option",4],["usize",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["u32",15],["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["u32",15],["usize",15]],["result",4]],[[["u128",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["ignoredany",3]],[[],["unexpected",4]],[[]],[[]],[[]],[[],["ignoredany",3]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["ignoredany",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]]],[[["unexpected",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["expected",8]]],[[["unexpected",4],["expected",8]]],[[["unexpected",4],["expected",8]]],[[],["bool",15]],[[["str",15]]],[[["unexpected",4]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["option",4]]],[[],[["option",4],["result",4]]],[[],[["option",4],["result",4]]],[[],[["result",4],["option",4]]],[[],[["result",4],["option",4]]],[[],[["option",4],["result",4]]],[[],["result",4]],[[],["result",4]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],["result",4]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[["str",15]]],[[["str",15]]],null,[[],["result",4]],[[],["result",4]],[[["bool",15]],["result",4]],[[["bool",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["u8",15],["vec",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[["char",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[["f64",15]],["result",4]],[[["i128",15]],["result",4]],[[["i128",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i64",15]],["result",4]],[[["i8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["string",3]],["result",4]],[[["u128",15]],["result",4]],[[["u128",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u64",15]],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["error",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["seqdeserializer",3]],[[],["seqaccessdeserializer",3]],[[],["mapaccessdeserializer",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["error",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",3]],["bool",15]],[[["str",15]],["borrowedstrdeserializer",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["result",4]]],[[],[["option",4],["result",4]]],[[],[["result",4],["option",4]]],[[],[["option",4],["result",4]]],[[],["result",4]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["bool",15]],[[],["result",4]],[[["bool",15]],["result",4]],[[],["result",4]],[[["char",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["i128",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["option",4],["usize",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[],["result",4]],[[["option",4],["usize",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["u32",15],["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[["str",15],["u32",15],["usize",15]],["result",4]],[[["u128",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[8,"Deserializer"],[8,"Serializer"],[8,"Deserialize"],[8,"Serialize"],[4,"Unexpected"],[8,"IntoDeserializer"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"DeserializeSeed"],[8,"Visitor"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[3,"UnitDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BytesDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"MapDeserializer"],[3,"Error"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapAccessDeserializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[3,"Impossible"],[8,"Error"]]},\
"serde_derive":{"doc":"This crate provides Serde’s two derive macros.","t":[24,24],"n":["Deserialize","Serialize"],"q":["serde_derive",""],"d":["",""],"i":[0,0],"f":[null,null],"p":[]},\
"serde_json":{"doc":"Serde JSON","tn":["Array","Bool","Deserializer","Error","Map","Null","Number","Number","Object","Result","Serializer","StreamDeserializer","String","Value","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","custom","de","default","default","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_reader","from_slice","from_str","from_str","from_value","index","index","index_mut","index_mut","into","into","into","into","into","into","into_deserializer","into_iter","into_iter","invalid_type","json","map","ne","next","ser","serialize","serialize","source","to_owned","to_owned","to_string","to_string","to_string","to_string_pretty","to_value","to_vec","to_vec_pretty","to_writer","to_writer_pretty","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value","Deserializer","IoRead","Read","SliceRead","StrRead","StreamDeserializer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte_offset","byte_offset","byte_offset","byte_offset","decode_hex_escape","decode_hex_escape","decode_hex_escape","discard","discard","discard","end","from","from","from","from_reader","from_reader","from_slice","from_slice","from_str","from_str","ignore_str","ignore_str","ignore_str","into","into","into","into_iter","new","new","new","new","new","next","next","next","parse_str","parse_str","parse_str","parse_str_raw","parse_str_raw","parse_str_raw","peek","peek","peek","peek_position","peek_position","peek_position","position","position","position","set_failed","set_failed","set_failed","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Category","Data","Eof","Error","Io","Result","Syntax","borrow","borrow_mut","classify","clone","clone_into","column","eq","fmt","from","into","is_data","is_eof","is_io","is_syntax","line","to_owned","try_from","try_into","type_id","Entry","IntoIter","Iter","IterMut","Keys","Map","Occupied","OccupiedEntry","Vacant","VacantEntry","Values","ValuesMut","and_modify","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","contains_key","entry","from","from","from","from","from","from","from","from","from","get","get","get_mut","get_mut","insert","insert","insert","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_mut","is_empty","iter","iter_mut","key","key","key","keys","len","len","len","len","len","len","len","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","or_insert","or_insert_with","remove","remove","remove_entry","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","AsciiControl","Backspace","CarriageReturn","CharEscape","CompactFormatter","FormFeed","Formatter","LineFeed","PrettyFormatter","Quote","ReverseSolidus","Serializer","Solidus","Tab","begin_array","begin_array","begin_array_value","begin_array_value","begin_object","begin_object","begin_object_key","begin_object_key","begin_object_value","begin_object_value","begin_string","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","end_array","end_array","end_array_value","end_array_value","end_object","end_object","end_object_key","end_object_value","end_object_value","end_string","fmt","fmt","from","from","from","into","into","into","into_inner","new","new","pretty","to_owned","to_owned","to_string","to_string_pretty","to_vec","to_vec_pretty","to_writer","to_writer_pretty","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_formatter","with_indent","write_bool","write_char_escape","write_f32","write_f64","write_i16","write_i32","write_i64","write_i8","write_null","write_number_str","write_raw_fragment","write_string_fragment","write_u16","write_u32","write_u64","write_u8","Array","Bool","Index","Null","Number","Number","Object","Serializer","String","Value","as_array","as_array_mut","as_bool","as_f64","as_f64","as_i64","as_i64","as_null","as_object","as_object_mut","as_str","as_u64","as_u64","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","collect_str","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_f64","from_str","from_value","get","get_mut","into","into","is_array","is_boolean","is_f64","is_f64","is_i64","is_i64","is_null","is_number","is_object","is_string","is_u64","is_u64","ne","pointer","pointer_mut","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","take","to_owned","to_string","to_value","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["serde_jsonserde_json::de","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::error","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Represents a JSON array.","Represents a JSON boolean.","A structure that deserializes JSON into Rust values.","This type represents all possible errors that can occur …","Represents a JSON key/value type.","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","A structure for serializing Rust values into JSON.","Iterator that deserializes a stream into multiple JSON …","Represents a JSON string.","Represents any valid JSON value.","","","","","","","","","","","","","","","","","","","Deserialize JSON data to a Rust data structure.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","When serializing or deserializing JSON goes wrong.","","","","","Display a JSON value as a string.","","","","","","","","Convert 64-bit floating point number to <code>Value</code>","Convert a <code>Vec</code> to <code>Value</code>","Convert map (with string keys) to <code>Value</code>","Convert <code>Number</code> to <code>Value</code>","","","","","","","","","Convert copy-on-write string to <code>Value</code>","Convert string slice to <code>Value</code>","Convert <code>()</code> to <code>Value</code>","Convert <code>String</code> to <code>Value</code>","","Convert boolean to <code>Value</code>","Convert a slice to <code>Value</code>","Convert 32-bit floating point number to <code>Value</code>","","","Convert an iteratable type to a <code>Value</code>","Convert an iteratable type to a <code>Value</code>","Deserialize an instance of type <code>T</code> from an IO stream of …","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Deserialize an instance of type <code>T</code> from a string of JSON …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","","Index into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> …","","Write into a <code>serde_json::Value</code> using the syntax …","","","","","","","","","","","Construct a <code>serde_json::Value</code> from a JSON literal.","A map of String to serde_json::Value.","","","Serialize a Rust data structure into JSON data.","","","","","","Serialize the given data structure as a String of JSON.","","","Serialize the given data structure as a pretty-printed …","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as JSON into the IO …","Serialize the given data structure as pretty-printed JSON …","","","","","","","","","","","","","","","","","","","The Value enum, a loosely typed way of representing any …","A structure that deserializes JSON into Rust values.","JSON input source that reads from a std::io input stream.","Trait used by the deserializer for iterating over input. …","JSON input source that reads from a slice of bytes.","JSON input source that reads from a UTF-8 string.","Iterator that deserializes a stream into multiple JSON …","","","","","","","Returns the number of bytes so far deserialized into a …","","","","","","","","","","The <code>Deserializer::end</code> method should be called after a …","","","","Deserialize an instance of type <code>T</code> from an IO stream of …","Creates a JSON deserializer from an <code>io::Read</code>.","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Creates a JSON deserializer from a <code>&[u8]</code>.","Deserialize an instance of type <code>T</code> from a string of JSON …","Creates a JSON deserializer from a <code>&str</code>.","","","","","","","Turn a JSON deserializer into an iterator over values of …","Create a JSON deserializer from one of the possible …","Create a JSON stream deserializer from one of the …","Create a JSON input source to read from a std::io input …","Create a JSON input source to read from a slice of bytes.","Create a JSON input source to read from a UTF-8 string.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Categorizes the cause of a <code>serde_json::Error</code>.","The error was caused by input data that was semantically …","The error was caused by prematurely reaching the end of …","This type represents all possible errors that can occur …","The error was caused by a failure to read or write bytes …","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","The error was caused by input that was not syntactically …","","","Categorizes the cause of this error.","","","One-based column number at which the error was detected.","","","","","Returns true if this error was caused by input data that …","Returns true if this error was caused by prematurely …","Returns true if this error was caused by a failure to …","Returns true if this error was caused by input that was …","One-based line number at which the error was detected.","","","","","A view into a single entry in a map, which may either be …","An owning iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s entries.","A mutable iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s keys.","Represents a JSON key/value type.","An occupied Entry.","An occupied Entry. It is part of the <code>Entry</code> enum.","A vacant Entry.","A vacant Entry. It is part of the <code>Entry</code> enum.","An iterator over a serde_json::Map’s values.","A mutable iterator over a serde_json::Map’s values.","Provides in-place mutable access to an occupied entry …","Moves all elements from other into Self, leaving other …","","","","","","","","","","","","","","","","","","","Clears the map, removing all values.","Returns true if the map contains a value for the …","Gets the given key’s corresponding entry in the map for …","","","","","","","","","","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Inserts a key-value pair into the map.","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry with the <code>OccupiedEntry</code>’s …","","","","","","","","","","","","","","","","Converts the entry into a mutable reference to its value.","Returns true if the map contains no elements.","Gets an iterator over the entries of the map.","Gets a mutable iterator over the entries of the map.","Returns a reference to this entry’s key.","Gets a reference to the key that would be used when …","Gets a reference to the key in the entry.","Gets an iterator over the keys of the map.","Returns the number of elements in the map.","","","","","","","Makes a new empty Map.","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result …","Removes a key from the map, returning the value at the …","Takes the value of the entry out of the map, and returns …","Removes a key from the map, returning the stored key and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets an iterator over the values of the map.","Gets an iterator over mutable values of the map.","Makes a new empty Map with the given initial capacity.","An escaped ASCII plane control character (usually escaped …","An escaped backspace character (usually escaped as <code>\\\\b</code>)","An escaped carriage return character (usually escaped as …","Represents a character escape code in a type-safe manner.","This structure compacts a JSON value with no extra …","An escaped form feed character (usually escaped as <code>\\\\f</code>)","This trait abstracts away serializing the JSON control …","An escaped line feed character (usually escaped as <code>\\\\n</code>)","This structure pretty prints a JSON value to make it …","An escaped quote <code>\\\"</code>","An escaped reverse solidus <code>\\\\</code>","A structure for serializing Rust values into JSON.","An escaped solidus <code>/</code>","An escaped tab character (usually escaped as <code>\\\\t</code>)","Called before every array.  Writes a <code>[</code> to the specified …","","Called before every array value.  Writes a <code>,</code> if needed to …","","Called before every object.  Writes a <code>{</code> to the specified …","","Called before every object key.","","Called before every object value.  A <code>:</code> should be written …","","Called before each series of <code>write_string_fragment</code> and …","","","","","","","","","","","","Called after every array.  Writes a <code>]</code> to the specified …","","Called after every array value.","","Called after every object.  Writes a <code>}</code> to the specified …","","Called after every object key.  A <code>:</code> should be written to …","Called after every object value.","","Called after each series of <code>write_string_fragment</code> and …","","","","","","","","","Unwrap the <code>Writer</code> from the <code>Serializer</code>.","Creates a new JSON serializer.","Construct a pretty printer formatter that defaults to …","Creates a new JSON pretty print serializer.","","","Serialize the given data structure as a String of JSON.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as JSON into the IO …","Serialize the given data structure as pretty-printed JSON …","","","","","","","","","","Creates a new JSON visitor whose output will be written …","Construct a pretty printer formatter that uses the <code>indent</code> …","Writes a <code>true</code> or <code>false</code> value to the specified writer.","Writes a character escape code to the specified writer.","Writes a floating point value like <code>-31.26e+12</code> to the …","Writes a floating point value like <code>-31.26e+12</code> to the …","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes a <code>null</code> value to the specified writer.","Writes a number that has already been rendered to a …","Writes a raw JSON fragment that doesn’t need any …","Writes a string fragment that doesn’t need any escaping …","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Represents a JSON array.","Represents a JSON boolean.","A type that can be used to index into a <code>serde_json::Value</code>.","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Serializer whose output is a <code>Value</code>.","Represents a JSON string.","Represents any valid JSON value.","If the <code>Value</code> is an Array, returns the associated vector. …","If the <code>Value</code> is an Array, returns the associated mutable …","If the <code>Value</code> is a Boolean, returns the associated bool. …","If the <code>Value</code> is a number, represent it as f64 if …","Represents the number as f64 if possible. Returns None …","If the <code>Value</code> is an integer, represent it as i64 if …","If the <code>Number</code> is an integer, represent it as i64 if …","If the <code>Value</code> is a Null, returns (). Returns None …","If the <code>Value</code> is an Object, returns the associated Map. …","If the <code>Value</code> is an Object, returns the associated mutable …","If the <code>Value</code> is a String, returns the associated str. …","If the <code>Value</code> is an integer, represent it as u64 if …","If the <code>Number</code> is an integer, represent it as u64 if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a finite <code>f64</code> to a <code>Number</code>. Infinite or NaN values …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","Index into a JSON array or map. A string index can be …","Mutably index into a JSON array or map. A string index …","","","Returns true if the <code>Value</code> is an Array. Returns false …","Returns true if the <code>Value</code> is a Boolean. Returns false …","Returns true if the <code>Value</code> is a number that can be …","Returns true if the <code>Number</code> can be represented by f64.","Returns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Value</code> is a Null. Returns false …","Returns true if the <code>Value</code> is a Number. Returns false …","Returns true if the <code>Value</code> is an Object. Returns false …","Returns true if the <code>Value</code> is a String. Returns false …","Returns true if the <code>Value</code> is an integer between zero and …","Returns true if the <code>Number</code> is an integer between zero and …","","Looks up a value by a JSON Pointer.","Looks up a value by a JSON Pointer and returns a mutable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …","","","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","","","","","",""],"i":[1,1,0,0,0,1,0,1,1,0,0,0,1,0,2,3,4,5,6,1,2,3,4,5,6,1,5,1,5,1,4,4,0,5,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,5,4,4,5,1,1,2,3,4,5,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,0,0,0,1,0,5,1,5,1,2,3,4,5,6,1,1,3,5,4,0,0,1,3,0,5,1,4,5,1,0,4,1,0,0,0,0,0,0,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,0,0,0,0,0,0,0,7,8,9,7,8,9,3,7,8,9,7,8,9,7,8,9,2,7,8,9,0,2,0,2,0,2,7,8,9,7,8,9,2,2,3,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,0,10,10,0,10,0,10,10,10,4,10,10,4,10,10,10,10,4,4,4,4,4,10,10,10,10,0,0,0,0,0,0,11,0,11,0,0,0,11,5,11,12,13,14,15,16,17,18,19,11,12,13,14,15,16,17,18,19,5,5,5,11,12,13,14,15,16,17,18,19,5,13,5,13,5,12,13,11,12,13,14,15,16,17,18,19,14,15,16,17,18,19,13,5,5,5,11,12,13,5,5,14,15,16,17,18,19,5,14,15,16,17,18,19,14,15,16,17,18,19,11,11,5,13,5,14,15,16,17,18,19,11,12,13,14,15,16,17,18,19,11,12,13,14,15,16,17,18,19,11,12,13,14,15,16,17,18,19,5,5,5,20,20,20,0,0,20,0,20,0,20,20,0,20,20,21,22,21,22,21,22,21,22,21,22,21,20,23,22,20,23,22,23,22,23,22,22,21,22,21,22,21,22,21,21,22,21,23,22,20,23,22,20,23,22,6,6,22,6,23,22,0,0,0,0,0,0,20,23,22,20,23,22,20,23,22,6,22,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,1,1,0,1,0,1,1,0,1,0,1,1,1,1,24,1,24,1,1,1,1,1,24,25,24,25,24,24,24,25,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,24,24,24,24,24,24,24,24,24,24,24,24,24,0,1,1,25,24,1,1,1,24,1,24,1,1,1,1,1,24,24,1,1,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,1,24,24,0,25,24,25,24,25,24],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["value",4]],[[]],[[]],[[["display",8]],["error",3]],[[["display",8]],["error",3]],null,[[]],[[],["value",4]],[[],["result",4]],[[],[["value",4],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[["str",15]],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[["str",15]],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[["str",15]],[["error",3],["result",4]]],[[["usize",15]],[["error",3],["result",4]]],[[["str",15],["usize",15]],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[["str",15]],[["error",3],["result",4]]],[[],["bool",15]],[[["str",15]],["bool",15]],[[["u64",15]],["bool",15]],[[["bool",15]],["bool",15]],[[["string",3]],["bool",15]],[[["i8",15]],["bool",15]],[[["i16",15]],["bool",15]],[[["i32",15]],["bool",15]],[[["i64",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["str",15]],["bool",15]],[[["u8",15]],["bool",15]],[[["f64",15]],["bool",15]],[[["value",4]],["bool",15]],[[["u16",15]],["bool",15]],[[["f32",15]],["bool",15]],[[["isize",15]],["bool",15]],[[["usize",15]],["bool",15]],null,[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15]]],[[["vec",3]]],[[["string",3],["value",4],["map",3]]],[[["number",3]]],[[["i64",15]]],[[["i32",15]]],[[["i16",15]]],[[["i8",15]]],[[["u8",15]]],[[["isize",15]]],[[["u64",15]]],[[["u32",15]]],[[["cow",4],["str",15]]],[[["str",15]]],[[]],[[["string",3]]],[[["u16",15]]],[[["bool",15]]],[[]],[[["f32",15]]],[[["usize",15]]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["result",6]],[[],["result",6]],[[["str",15]],["result",6]],[[["str",15]],[["error",3],["result",4],["value",4]]],[[["value",4]],[["result",4],["error",3]]],[[],["value",4]],[[],["value",4]],[[],["value",4]],[[],["value",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["expected",8],["unexpected",4]]],null,null,[[["value",4]],["bool",15]],[[],[["option",4],["result",6]]],null,[[],["result",4]],[[],["result",4]],[[],[["error",8],["option",4]]],[[]],[[]],[[],[["string",3],["result",6]]],[[],["string",3]],[[],["string",3]],[[],[["string",3],["result",6]]],[[],[["error",3],["result",4],["value",4]]],[[],[["result",6],["vec",3]]],[[],[["result",6],["vec",3]]],[[],["result",6]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],[["result",6],["u16",15]]],[[],[["result",6],["u16",15]]],[[],[["result",6],["u16",15]]],[[]],[[]],[[]],[[],["result",6]],[[]],[[]],[[]],[[],["result",6]],[[]],[[],["result",6]],[[]],[[["str",15]],["result",6]],[[["str",15]]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[]],[[]],[[]],[[],["streamdeserializer",3]],[[]],[[]],[[]],[[]],[[["str",15]]],[[],[["result",6],["option",4]]],[[],[["result",6],["option",4]]],[[],[["result",6],["option",4]]],[[["vec",3]],[["reference",4],["result",6]]],[[["vec",3]],[["reference",4],["result",6]]],[[["vec",3]],[["reference",4],["result",6]]],[[["vec",3]],[["result",6],["reference",4]]],[[["vec",3]],[["reference",4],["result",6]]],[[["vec",3]],[["reference",4],["result",6]]],[[],[["result",6],["option",4]]],[[],[["result",6],["option",4]]],[[],[["result",6],["option",4]]],[[],["position",3]],[[],["position",3]],[[],["position",3]],[[],["position",3]],[[],["position",3]],[[],["position",3]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[]],[[],["category",4]],[[],["category",4]],[[]],[[],["usize",15]],[[["category",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["entry",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["value",4],["option",4]]],[[],["value",4]],[[],[["value",4],["option",4]]],[[],["value",4]],[[["string",3],["value",4]],[["option",4],["value",4]]],[[["value",4]],["value",4]],[[["value",4]],["value",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["value",4]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["keys",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["value",4]],["value",4]],[[],["value",4]],[[],[["option",4],["value",4]]],[[],["value",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["values",3]],[[],["valuesmut",3]],[[["usize",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",6]],[[],["result",6]],[[["bool",15]],["result",6]],[[["bool",15]],["result",6]],[[],["result",6]],[[],["result",6]],[[["bool",15]],["result",6]],[[["bool",15]],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["compactformatter",3]],[[],["prettyformatter",3]],[[]],[[]],[[]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["string",3],["result",6]]],[[],[["string",3],["result",6]]],[[],[["result",6],["vec",3]]],[[],[["result",6],["vec",3]]],[[],["result",6]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["bool",15]],["result",6]],[[["charescape",4]],["result",6]],[[["f32",15]],["result",6]],[[["f64",15]],["result",6]],[[["i16",15]],["result",6]],[[["i32",15]],["result",6]],[[["i64",15]],["result",6]],[[["i8",15]],["result",6]],[[],["result",6]],[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[["u16",15]],["result",6]],[[["u32",15]],["result",6]],[[["u64",15]],["result",6]],[[["u8",15]],["result",6]],null,null,null,null,null,null,null,null,null,null,[[],[["vec",3],["option",4]]],[[],[["option",4],["vec",3]]],[[],[["option",4],["bool",15]]],[[],[["f64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],[["option",4],["i64",15]]],[[],[["option",4],["i64",15]]],[[],["option",4]],[[],[["map",3],["option",4]]],[[],[["map",3],["option",4]]],[[],[["option",4],["str",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u64",15]]],[[]],[[]],[[]],[[]],[[],["number",3]],[[]],[[],[["value",4],["result",6]]],[[],[["result",4],["number",3]]],[[],[["error",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["usize",15]],["result",4]],[[["str",15],["usize",15]],["result",4]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],["result",4]],[[["str",15]],["result",4]],[[["number",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u16",15]]],[[]],[[["u64",15]]],[[["i64",15]]],[[["isize",15]]],[[["usize",15]]],[[["i8",15]]],[[["i16",15]]],[[["u32",15]]],[[["u8",15]]],[[["i32",15]]],[[["f64",15]],[["number",3],["option",4]]],[[["str",15]],["result",4]],[[["value",4]],[["result",4],["error",3]]],[[["index",8]],[["value",4],["option",4]]],[[["index",8]],[["value",4],["option",4]]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["number",3]],["bool",15]],[[["str",15]],[["value",4],["option",4]]],[[["str",15]],[["value",4],["option",4]]],[[],["result",4]],[[["bool",15]],[["value",4],["result",6]]],[[],[["value",4],["result",6]]],[[["char",15]],[["value",4],["result",6]]],[[["f32",15]],[["value",4],["result",6]]],[[["f64",15]],[["value",4],["result",6]]],[[["i16",15]],[["value",4],["result",6]]],[[["i32",15]],[["value",4],["result",6]]],[[["i64",15]],[["value",4],["result",6]]],[[["i8",15]],[["value",4],["result",6]]],[[["option",4],["usize",15]],["result",6]],[[["str",15]],[["value",4],["result",6]]],[[["str",15],["u32",15]],[["value",4],["result",6]]],[[],[["value",4],["result",6]]],[[["option",4],["usize",15]],["result",6]],[[],[["value",4],["result",6]]],[[["str",15]],[["value",4],["result",6]]],[[["str",15],["usize",15]],["result",6]],[[["str",15],["u32",15],["usize",15]],["result",6]],[[["usize",15]],["result",6]],[[["str",15],["usize",15]],["result",6]],[[["str",15],["u32",15],["usize",15]],["result",6]],[[["u16",15]],[["value",4],["result",6]]],[[["u32",15]],[["value",4],["result",6]]],[[["u64",15]],[["value",4],["result",6]]],[[["u8",15]],[["value",4],["result",6]]],[[],[["value",4],["result",6]]],[[["str",15]],[["value",4],["result",6]]],[[["str",15],["u32",15]],[["value",4],["result",6]]],[[],["value",4]],[[]],[[],["string",3]],[[],[["error",3],["result",4],["value",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Value"],[3,"Deserializer"],[3,"StreamDeserializer"],[3,"Error"],[3,"Map"],[3,"Serializer"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"],[4,"Category"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[4,"CharEscape"],[8,"Formatter"],[3,"PrettyFormatter"],[3,"CompactFormatter"],[3,"Number"],[3,"Serializer"]]},\
"simba":{"doc":"<strong>Simba</strong> is a crate defining a set of trait for writing code …","tn":["scalar","simd","ClosedAdd","ClosedDiv","ClosedMul","ClosedNeg","ClosedSub","ComplexField","Field","RealField","RealField","SubsetOf","SupersetOf","abs","acos","acosh","argument","asin","asinh","atan","atan2","atanh","cbrt","ceil","clamp","conjugate","copysign","cos","cosc","cosc","cosh","coshc","coshc","e","exp","exp2","exp_m1","floor","frac_1_pi","frac_2_pi","frac_2_sqrt_pi","frac_pi_2","frac_pi_3","frac_pi_4","frac_pi_6","frac_pi_8","fract","from_real","from_subset","from_superset","from_superset","from_superset_unchecked","hypot","imaginary","is_finite","is_in_subset","is_in_subset","is_sign_negative","is_sign_positive","ln","ln_10","ln_1p","ln_2","log","log10","log10_e","log2","log2_e","max","min","modulus","modulus_squared","mul_add","norm1","pi","powc","powf","powi","real","recip","round","scale","signum","signum","sin","sin_cos","sinc","sinc","sinh","sinh_cosh","sinh_cosh","sinhc","sinhc","sqrt","tan","tanh","to_exp","to_exp","to_polar","to_polar","to_subset","to_subset","to_subset_unchecked","to_superset","trunc","try_sqrt","two_pi","unscale","0","0","AutoBoolSimd","AutoBoolx1","AutoBoolx16","AutoBoolx2","AutoBoolx32","AutoBoolx4","AutoBoolx8","AutoF32x16","AutoF32x2","AutoF32x4","AutoF32x8","AutoF64x2","AutoF64x4","AutoF64x8","AutoI128x1","AutoI128x2","AutoI128x4","AutoI16x16","AutoI16x2","AutoI16x32","AutoI16x4","AutoI16x8","AutoI32x16","AutoI32x2","AutoI32x4","AutoI32x8","AutoI64x2","AutoI64x4","AutoI64x8","AutoI8x16","AutoI8x2","AutoI8x32","AutoI8x4","AutoI8x8","AutoIsizex2","AutoIsizex4","AutoIsizex8","AutoSimd","AutoU128x1","AutoU128x2","AutoU128x4","AutoU16x16","AutoU16x2","AutoU16x32","AutoU16x4","AutoU16x8","AutoU32x16","AutoU32x2","AutoU32x4","AutoU32x8","AutoU64x2","AutoU64x4","AutoU64x8","AutoU8x16","AutoU8x2","AutoU8x32","AutoU8x4","AutoU8x8","AutoUsizex2","AutoUsizex4","AutoUsizex8","Element","PrimitiveSimdValue","SimdBool","SimdBool","SimdComplexField","SimdOption","SimdPartialOrd","SimdRealField","SimdRealField","SimdSigned","SimdValue","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","all","all","all","all","all","all","all","and","and","and","and","and","and","and","any","any","any","any","any","any","any","bitand","bitand","bitand","bitand","bitand","bitand","bitmask","bitmask","bitmask","bitmask","bitmask","bitmask","bitmask","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","eq","eq","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","if_else","if_else","if_else","if_else","if_else","if_else","if_else","if_else2","if_else2","if_else2","if_else2","if_else2","if_else2","if_else2","if_else3","if_else3","if_else3","if_else3","if_else3","if_else3","if_else3","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","map_lanes","map_lanes","mask","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","ne","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","none","none","none","none","none","none","none","not","not","not","not","not","not","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","option","or","or","or","or","or","or","or","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cosc","simd_cosc","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_coshc","simd_coshc","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_e","simd_e","simd_e","simd_e","simd_e","simd_e","simd_e","simd_e","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_pi","simd_pi","simd_pi","simd_pi","simd_pi","simd_pi","simd_pi","simd_pi","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sinc","simd_sinc","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh_cosh","simd_sinh_cosh","simd_sinhc","simd_sinhc","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_polar","simd_to_polar","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unwrap","simd_unwrap_or","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","to_owned","to_owned","to_string","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","xor","xor","xor","xor","xor","xor","xor","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zip_map_lanes","zip_map_lanes"],"q":["simba","","simba::scalar","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","simba::simdd":["Traits implemented by scalar, non-SIMD, types.","Traits implemented by SIMD types and non-SIMD types.","Trait <strong>alias</strong> for <code>Add</code> and <code>AddAssign</code> with result of type <code>Self</code>…","Trait <strong>alias</strong> for <code>Div</code> and <code>DivAssign</code> with result of type <code>Self</code>…","Trait <strong>alias</strong> for <code>Mul</code> and <code>MulAssign</code> with result of type <code>Self</code>…","Trait <strong>alias</strong> for <code>Neg</code> with result of type <code>Self</code>.","Trait <strong>alias</strong> for <code>Sub</code> and <code>SubAssign</code> with result of type <code>Self</code>…","Trait shared by all complex fields and its subfields …","Trait implemented by fields, i.e., complex numbers and …","Trait shared by all reals.","","Nested sets and conversions between them (using an …","Nested sets and conversions between them. Useful to work …","The absolute value of this complex number: …","","","The argument of this complex number.","","","","","","","","","","Copies the sign of <code>self</code> to <code>to</code>.","","Cardinal cos","Cardinal cos","","","","","","","","","","","","","","","","","","Builds a pure-real complex number from the given value.","The inclusion map: converts <code>self</code> to the equivalent …","The inverse inclusion map: attempts to construct <code>self</code> …","The inverse inclusion map: attempts to construct <code>self</code> …","Use with care! Same as <code>self.to_superset</code> but without any …","Computes (self.conjugate() * self + other.conjugate() * …","The imaginary part of this complex number.","","Checks if <code>element</code> is actually part of the subset <code>Self</code> …","Checks if <code>self</code> is actually part of its subset <code>T</code> (and can …","Is the sign of this real number negative?","Is the sign of this real number positive?","","","","","","","","","","","","The modulus of this complex number.","The squared modulus of this complex number.","","The sum of the absolute value of this complex number’s …","","","","","The real part of this complex number.","","","Multiplies this complex number by <code>factor</code>.","The exponential part of this complex number: …","The exponential part of this complex number: …","","","Cardinal sine","Cardinal sine","","","","","","","","","The exponential form of this complex number: (modulus, …","The exponential form of this complex number: (modulus, …","The polar form of this complex number: (modulus, arg)","The polar form of this complex number: (modulus, arg)","The inverse inclusion map: attempts to construct <code>self</code> …","The inverse inclusion map: attempts to construct <code>self</code> …","Use with care! Same as <code>self.to_subset</code> but without any …","The inclusion map: converts <code>self</code> to the equivalent …","","","","Divides this complex number by <code>factor</code>.","","","An Simd boolean structure that implements all the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An Simd structure that implements all the relevant traits …","","","","","","","","","","","","","","","","","","","","","","","","The type of the elements of each lane of this SIMD value.","Marker trait implemented by SIMD and non-SIMD primitive …","Lane-wise generalization of <code>bool</code> for SIMD booleans.","Type of the result of comparing two SIMD values like <code>self</code>.","Lane-wise generalisation of <code>ComplexField</code> for SIMD …","Generalization of Option for SIMD computation.","Lane-wise generalization of the standard <code>PartialOrd</code> for …","Lanewise generalization of <code>RealField</code> for SIMD reals.","Type of the coefficients of a complex number.","A lane-wise generalization of <code>num::Signed</code> for SIMD values.","Base trait for every SIMD types.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Are all vector lanes true?","","","","","","","Lane-wise bitwise and of the vector elements.","","","","","","","Is any vector lane true?","","","","","","","","","","","","","A bit mask representing the boolean state of each lanes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts the i-th lane of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts the i-th lane of <code>self</code> without bound-checkinguilds a pure-real complex number from the given valueerges the value of <code>if_value()</code> and <code>else_value()</code> depending …","","","","","","","Merges the value of <code>if_value()</code> and <code>else_if.1()</code> and …","","","","","","","Merges the value of <code>if_value()</code> and <code>else_if.1()</code> and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tests which lane is negative.","","","","","","","","Tests which lane is positive.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of lanes of this SIMD value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies a function to each lane of <code>self</code>.","Applies a function to each lane of <code>self</code>.","Return the underlying SIMD boolean mask.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new SIMD option by combining a value and a mask …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Are all vector lanes false?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts this SIMD option to a strandard Option.","Lane-wise bitwise or of the vector elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Replaces the i-th lane of <code>self</code> by <code>val</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Replaces the i-th lane of <code>self</code> by <code>val</code> without …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Merges <code>self</code> and <code>other</code> depending on the lanes of <code>cond</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The absolute value of this complex number: …","The absolute value of each lane of <code>self</code>.","","","","","","","","","","","","","","","The absolute difference of each lane of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","The argument of this complex number.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clamps each lane of <code>self</code> between the corresponding lane …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Copies the sign of <code>sign</code> to <code>self</code>.","","","","","","","","","","","","","","","","Cardinal cos","Cardinal cos","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>equal</em> <code>==</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>greater or equal</em> <code>>=</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>greater than</em> <code>></code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The max value among all lanes of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The min value among all lanes of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the product of all the lanes of <code>self</code>.","","","","","","","","Computes the sum of all the lanes of <code>self</code>.","","","","","","","","Computes (self.conjugate() * self + other.conjugate() * …","","","","","","","","The imaginary part of this complex number.","","","","","","","","Lanewise <em>less or equal</em> <code><=</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>less than</em> <code><</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise max value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise min value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The modulus of this complex number.","","","","","","","","The squared modulus of this complex number.","","","","","","","","","","","","","","","","Lanewise <em>not equal</em> <code>!=</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The sum of the absolute value of this complex number’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The real part of this complex number.","","","","","","","","","","","","","","","","","","","","","","","","Multiplies this complex number by <code>factor</code>.","","","","","","","","The signum of each lane of <code>Self</code>.","The exponential part of this complex number: …","The exponential part of this complex number: …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cardinal sine","Cardinal sine","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The exponential form of this complex number: (modulus, …","The exponential form of this complex number: (modulus, …","","","","","","","","The polar form of this complex number: (modulus, arg)","The polar form of this complex number: (modulus, arg)","","","","","","","","","","","","","","","","","Divides this complex number by <code>factor</code>.","","","","","","","","Retrieve the underlying value if all the bits of <code>self.mask</code>…","Merges the value of <code>self</code> with the value of <code>other</code>.","Initializes an SIMD value with each lanes set to <code>val</codeeturn the underlying unfiltered value.","Lane-wise bitwise xor of the vector elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies a function to each lane of <code>self</code> paired with the …","Applies a function to each lane of <code>self</code> paired with the …"],"i":[0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,2,1,1,1,2,1,2,1,1,1,1,1,1,2,1,1,1,1,2,2,2,2,2,2,2,2,1,1,3,4,4,4,1,1,1,4,3,2,2,1,2,1,2,1,1,2,1,2,2,2,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,4,1,1,2,1,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,7,0,0,0,0,8,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,9,5,5,5,5,5,5,9,5,5,5,5,5,5,9,5,5,5,5,5,5,5,5,5,5,5,5,9,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,10,5,6,10,5,6,5,6,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,10,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,9,5,5,5,5,5,5,9,5,5,5,5,5,5,9,5,5,5,5,5,5,10,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,5,5,5,5,5,5,5,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,7,10,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,10,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,9,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,10,9,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,8,8,5,5,5,5,5,5,5,8,8,12,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,11,8,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,8,8,5,5,5,5,5,5,5,8,8,8,8,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,8,8,5,5,5,5,5,5,5,8,8,8,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,8,5,5,5,5,5,5,5,10,10,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,10,5,6,10,5,6,10,5,6,10,9,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,7,7],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullbool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["autosimd",3]],[[],["autoboolsimdautosimd",3]],["bool",15]],[[["autoboolsimd",3]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["f64",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[["isize",15]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usizeautosimd",3]],["bool",15]],[[["autoboolsimd",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f32",15]]],[[["u8",15]]],[[["i8",15]]],[[["i128",15]]],[[["i128",15]]],[[["bool",15]]],[[["i16",15]]],[[["i16",15]]],[[["i16",15]]],[[["i8",15]]],[[["i16",15]]],[[["i16",15]]],[[["i32",15]]],[[["usize",15]]],[[["i32",15]]],[[["i32",15]]],[[["i8",15]]],[[["i32",15]]],[[["i64",15]]],[[["i64",15]]],[[["i64",15]]],[[["i8",15]]],[[["u16",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["usize",15]]],[[["u128",15]]],[[["bool",15]]],[[["bool",15]]],[[["f32",15]]],[[["isize",15]]],[[["f32",15]]],[[["f32",15]]],[[["usize",15]]],[[["i128",15]]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],[[["bool",15]]],[[["u8",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u32",15]]],[[["u32",15]]],[[["bool",15]]],[[["u32",15]]],[[["u32",15]]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[["i8",15]]],[[["u128",15]]],[[["u128",15]]],[[["isize",15]]],[[["isize",15]]],[[["bool",15]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["boolusize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usizei32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["istring",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[8,"ComplexField"],[8,"RealField"],[8,"SupersetOf"],[8,"SubsetOf"],[3,"AutoSimd"],[3,"AutoBoolSimd"],[8,"SimdValue"],[8,"SimdComplexField"],[8,"SimdBool"],[3,"SimdOption"],[8,"SimdSigned"],[8,"SimdRealField"],[8,"SimdPartialOrd"]]},\
"siphasher":{"doc":"","t":[0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["sip","sip128","SipHasher","SipHasher13","SipHasher24","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","default","default","default","finish","finish","finish","fmt","fmt","fmt","from","from","from","into","into","into","keys","keys","keys","new","new","new","new_with_keys","new_with_keys","new_with_keys","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write","write","Hash128","Hasher128","SipHasher","SipHasher13","SipHasher24","as_bytes","as_u128","as_u64","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","default","default","default","default","finish","finish","finish","finish128","finish128","finish128","finish128","fmt","fmt","fmt","fmt","from","from","from","from","from","h1","h2","into","into","into","into","into","keys","keys","keys","new","new","new","new_with_keys","new_with_keys","new_with_keys","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","write","write"],"q":["siphasher","","siphasher::sip","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","siphasher::sip128","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An implementation of SipHash.","An implementation of SipHash with a 128-bit output.","An implementation of SipHash 2-4.","An implementation of SipHash 1-3.","An implementation of SipHash 2-4.","","","","","","","","","","","","","","","","","","","","","","","","","Get the keys used by this hasher","Get the keys used by this hasher","Get the keys used by this hasher","Creates a new <code>SipHasher13</code> with the two initial keys set …","Creates a new <code>SipHasher24</code> with the two initial keys set …","Creates a new <code>SipHasher</code> with the two initial keys set to …","Creates a <code>SipHasher13</code> that is keyed off the provided keys.","Creates a <code>SipHasher24</code> that is keyed off the provided keys.","Creates a <code>SipHasher</code> that is keyed off the provided keys.","","","","","","","","","","","","","A 128-bit (2x64) hash output","","An implementation of SipHash128 2-4.","An implementation of SipHash128 1-3.","An implementation of SipHash128 2-4.","Convert into a 16-bytes vector","Convert into a <code>u128</code>","Convert into <code>(u64, u64)</code>","","","","","","","","","","","","","","","","","","","","Return a 128-bit hash","Return a 128-bit hash","Return a 128-bit hash","Return a 128-bit hash","","","","","","","","","","","","","","","","","Get the keys used by this hasher","Get the keys used by this hasher","Get the keys used by this hasher","Creates a new <code>SipHasher13</code> with the two initial keys set …","Creates a new <code>SipHasher24</code> with the two initial keys set …","Creates a new <code>SipHasher</code> with the two initial keys set to …","Creates a <code>SipHasher13</code> that is keyed off the provided keys.","Creates a <code>SipHasher24</code> that is keyed off the provided keys.","Creates a <code>SipHasher</code> that is keyed off the provided keys.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,0,4,4,4,4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,5,6,7,8,5,6,7,4,5,6,7,4,4,5,6,7,4,4,4,4,5,6,7,5,6,7,5,6,7,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7,5,6,7],"f":[null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["siphasher13",3]],[[],["siphasher24",3]],[[],["siphasher",3]],[[],["siphasher13",3]],[[],["siphasher24",3]],[[],["siphasher",3]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["siphasher13",3]],[[],["siphasher24",3]],[[],["siphasher",3]],[[["u64",15]],["siphasher13",3]],[[["u64",15]],["siphasher24",3]],[[["u64",15]],["siphasher",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,[[]],[[],["u128",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["hash128",3]],[[],["siphasher13",3]],[[],["siphasher24",3]],[[],["siphasher",3]],[[],["hash128",3]],[[],["siphasher13",3]],[[],["siphasher24",3]],[[],["siphasher",3]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["hash128",3]],[[],["hash128",3]],[[],["hash128",3]],[[],["hash128",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u128",15]]],[[]],[[]],[[]],null,null,[[]],[[],["u128",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["siphasher13",3]],[[],["siphasher24",3]],[[],["siphasher",3]],[[["u64",15]],["siphasher13",3]],[[["u64",15]],["siphasher24",3]],[[["u64",15]],["siphasher",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]]],"p":[[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Hash128"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[8,"Hasher128"]]},\
"slice_of_array":{"doc":"Extension traits for viewing a slice as a slice of arrays …","t":[16,8,18,8,8,8,10,10,10,10,10,10,0,11],"n":["Element","IsSliceomorphic","LEN","SliceArrayExt","SliceFlatExt","SliceNestExt","as_array","as_mut_array","flat","flat_mut","nest","nest_mut","prelude","to_array"],"q":["slice_of_array","","","","","","","","","","","","",""],"d":["","Marker trait used in bounds of <code>Slice{Flat,Nest,Array}Ext</code>.","","Permits viewing a slice as an array.","Permits viewing a slice of arrays as a flat slice.","Permits viewing a slice as a slice of arrays.","View <code>&[T]</code> as <code>&[T; n]</code>.","View <code>&mut [T]</code> as <code>&mut [T; n]</code>.","View <code>&[[T; n]]</code> as <code>&[T]</code>.","View <code>&mut [[T; n]]</code> as <code>&mut [T]</code>","View <code>&[T]</code> as <code>&[[T; n]]</code> without copying.","View <code>&mut [T]</code> as <code>&mut [[T; n]]</code> without copying.","This module contains extension traits from <code>slice_of_array</code>.","Clone <code>&[T]</code> to <code>[T; n]</code>."],"i":[1,0,1,0,0,0,2,2,3,3,4,4,0,2],"f":[null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["issliceomorphic",8]]],"p":[[8,"IsSliceomorphic"],[8,"SliceArrayExt"],[8,"SliceFlatExt"],[8,"SliceNestExt"]]},\
"syn":{"doc":"github crates-io docs-rs","tn":["Abi","Add","AddEq","And","AngleBracketed","AngleBracketedGenericArguments","Arm","Array","Array","Assign","AssignOp","Async","AttrStyle","Attribute","AttributeArgs","Await","BareFn","BareFnArg","BinOp","Binary","Binding","Binding","BitAnd","BitAndEq","BitOr","BitOrEq","BitXor","BitXorEq","Block","Block","Bool","BoundLifetimes","Box","Box","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closed","Closure","Const","Const","Const","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Crate","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivEq","Enum","Enum","Eq","Eq","Error","Expr","Expr","ExprArray","ExprAssign","ExprAssignOp","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBox","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprType","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","ExternCrate","Field","Field","FieldPat","FieldValue","Fields","FieldsNamed","FieldsUnnamed","File","Float","Fn","Fn","FnArg","ForLoop","ForeignItem","ForeignItemFn","ForeignItemMacro","ForeignItemStatic","ForeignItemType","ForeignMod","Ge","GenericArgument","GenericMethodArgument","GenericParam","Generics","Glob","Group","Group","Group","Gt","HalfOpen","Ident","Ident","If","Impl","ImplGenerics","ImplItem","ImplItemConst","ImplItemMacro","ImplItemMethod","ImplItemType","ImplTrait","Index","Index","Infer","Inherited","Inner","Int","Item","Item","ItemConst","ItemEnum","ItemExternCrate","ItemFn","ItemForeignMod","ItemImpl","ItemMacro","ItemMacro2","ItemMod","ItemStatic","ItemStruct","ItemTrait","ItemTraitAlias","ItemType","ItemUnion","ItemUse","Label","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeDef","List","Lit","Lit","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Local","Local","Loop","Lt","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro2","MacroDelimiter","Match","Maybe","Member","Meta","Meta","MetaList","MetaNameValue","Method","Method","MethodCall","MethodTurbofish","Mod","Mul","MulEq","Name","NameValue","Named","Named","Ne","Neg","NestedMeta","Never","None","None","Not","Or","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Pat","PatBox","PatIdent","PatLit","PatMacro","PatOr","PatPath","PatRange","PatReference","PatRest","PatSlice","PatStruct","PatTuple","PatTupleStruct","PatType","PatWild","Path","Path","Path","Path","Path","Path","PathArguments","PathSegment","PredicateEq","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Range","RangeLimits","Raw","Receiver","Receiver","Reference","Reference","Reference","Rem","RemEq","Rename","Repeat","Rest","Restricted","Result","Return","ReturnType","Semi","Shl","ShlEq","Shr","ShrEq","Signature","Slice","Slice","Static","Static","Stmt","Str","StrStyle","Struct","Struct","Struct","Struct","Sub","SubEq","Token","Trait","Trait","TraitAlias","TraitBound","TraitBoundModifier","TraitItem","TraitItemConst","TraitItemMacro","TraitItemMethod","TraitItemType","TraitObject","Try","TryBlock","Tuple","Tuple","Tuple","TupleStruct","Turbofish","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","Typed","UnOp","Unary","Union","Union","Unit","Unnamed","Unnamed","Unsafe","Use","UseGlob","UseGroup","UseName","UsePath","UseRename","UseTree","Variadic","Variant","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","VisCrate","VisPublic","VisRestricted","Visibility","WhereClause","WherePredicate","While","Wild","Yield","abi","abi","abi","and_token","and_token","and_token","apostrophe","args","args","args","args","arguments","arms","as_token","as_token","as_token","as_turbofish","async_token","asyncness","asyncness","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","auto_token","await_token","bang_token","bang_token","base","base","base10_digits","base10_digits","base10_parse","base10_parse","block","block","block","block","block","block","body","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","box_token","box_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","break_token","buffer","by_ref","capture","capture","cases","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon2_token","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","cond","cond","const_params","const_params_mut","const_token","const_token","const_token","const_token","const_token","constness","content","continue_token","crate_token","crate_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","default","default","default","defaultness","defaultness","defaultness","defaultness","delimiter","discriminant","display","display","display","display","display","display","display","display","display","display","dot2_token","dot2_token","dot2_token","dot_token","dot_token","dot_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","elems","elems","elems","elems","else_branch","enum_token","enum_token","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","ext","extern_token","extern_token","fat_arrow_token","fields","fields","fields","fields","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","fn_token","for_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","gt_token","guard","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hi","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","if_token","impl_token","impl_token","in_token","in_token","index","index","init","inputs","inputs","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","is_empty","is_ident","items","items","items","items","items","iter","iter_mut","label","label","label","label","label","label","leading_colon","leading_colon","leading_vert","left","left","left","len","len","len","let_token","let_token","lhs_ty","lifetime","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","limits","limits","lit","lit","lo","loop_token","lt_token","lt_token","lt_token","lt_token","lt_token","mac","mac","mac","mac","mac","mac","mac","macro_token","make_where_clause","match_token","member","member","member","method","mod_token","modifier","movability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","name","name","name","named","nested","new","new","new","new","new","new","new","new","new","new","new","op","op","op","or1_token","or2_token","output","output","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args_with","parse_body","parse_body_with","parse_file","parse_inner","parse_macro_input","parse_meta","parse_mod_style","parse_named","parse_outer","parse_quote","parse_str","parse_unnamed","parse_with","parse_within","parse_without_eager_brace","partial_cmp","partial_cmp","pat","pat","pat","pat","pat","pat","pat","pat","pat","path","path","path","path","path","path","path","path","path","path","path","path","path","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","position","pound_token","predicates","pub_token","pub_token","punctuated","qself","qself","qself","question_token","raw","receiver","receiver","reference","rename","rename","rest","return_token","rhs_ty","right","right","right","rules","segments","self_token","self_ty","semi","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","shebang","sig","sig","sig","sig","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","star_token","static_token","static_token","stmts","struct_token","struct_token","style","subpat","suffix","suffix","suffix","suffix","suffix","suffix","suffix","supertraits","then_branch","to","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","tokens","tokens","trait_","trait_token","trait_token","tree","tree","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_token","turbofish","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","type_token","type_token","type_token","type_token","underscore_token","underscore_token","union_token","union_token","unnamed","unraw","unsafe_token","unsafety","unsafety","unsafety","unsafety","use_token","value","value","value","value","value","value","variadic","variadic","variants","variants","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","where_clause","where_token","while_token","without_plus","without_plus","without_plus","yield_token","Cursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","Error","Lookahead1","Nothing","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","error","error","error","extend","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","into","into","into","into","into","into_compile_error","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_str","parse_terminated","peek","peek","peek2","peek3","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Speculative","advance_to","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","empty_or_trailing","eq","extend","extend","first","first_mut","fmt","from","from","from","from","from","from","from","from","from_iter","from_iter","hash","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","punct","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","Spanned","span","Abstract","Add","AddEq","And","AndAnd","AndEq","As","Async","At","Auto","Await","Bang","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Colon2","Comma","Const","Continue","Crate","Default","Div","DivEq","Do","Dollar","Dot","Dot2","Dot3","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Mod","Move","MulEq","Mut","Ne","Or","OrEq","OrOr","Override","Paren","Pound","Priv","Pub","Question","RArrow","Ref","Rem","RemEq","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Star","Static","Struct","Sub","SubEq","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","peek","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["synsyn::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::ext","","","","syn::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse::discouraged","","syn::punctuated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::spanned","","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The binary interface of a function: <code>extern \\\"C\\\"</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&&</code> operator (logical and)","The <code><\'a, T></code> in <code>std::slice::iter<\'a, T></code>.","Angle bracketed arguments of a path segment: the <code><K, V></code> …","One arm of a <code>match</code> expression: <code>0...10 => { return true; }</code>.","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item …","An attribute like <code>#[repr(transparent)]</code>.","Conventional argument type associated with an invocation …","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -> bool</code>.","An argument in a function type: the <code>usize</code> in …","A binary operator: <code>+</code>, <code>+=</code>, <code>&</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A binding (equality constraint) on an associated type: …","A binding (equality constraint) on an associated type: …","The <code>&</code> operator (bitwise and)","The <code>&=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A braced block containing Rust statements.","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for<\'a, \'b, \'c></code>.","A box expression: <code>box f</code>.","A box pattern: <code>box v</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b\'f\'</code>.","A byte string literal: <code>b\\\"foo\\\"</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>\'a\'</code>.","Inclusive at the beginning and end.","A closure expression: <code>|a, b| a + b</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","A constant item: <code>const MAX: u16 = 65535</code>.","An associated constant within the definition of a trait.","An associated constant within an impl block.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator<Item: Display></code>.","An associated type bound: <code>Iterator<Item: Display></code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>\\\"data\\\"</code>.","A crate-level visibility: <code>crate</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","An enum definition: <code>enum Foo<A, B> { A(A), B(B) }</code>.","An enum input to a <code>proc_macro_derive</code> macro.","An equality predicate in a <code>where</code> clause (unsupported).","The <code>==</code> operator (equality)","Error returned when a Syn parser cannot parse the input …","A Rust expression.","Expr without trailing semicolon.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A blocked scope: <code>{ ... }</code>.","A box expression: <code>box f</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>\\\"foo\\\"</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(\\\"{}\\\", q)</code>.","A <code>match</code> expression: <code>match n { Some(n) => {}, None => {} }</code>.","A method call expression: <code>x.foo::<T>(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&a</code> or <code>&mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A type ascription expression: <code>foo: f64</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A single field in a struct pattern.","A field-value pair in a struct literal.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A complete file of Rust source code.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A free-standing function: …","A foreign function in an <code>extern</code> block.","An argument in a function signature: the <code>n: usize</code> in …","A for loop: <code>for pat in expr { ... }</code>.","An item within an <code>extern</code> block.","A foreign function in an <code>extern</code> block.","A macro invocation within an extern block.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A foreign type in an <code>extern</code> block: <code>type void</code>.","A block of foreign items: <code>extern \\\"C\\\" { ... }</code>.","The <code>>=</code> operator (greater than or equal to)","An individual generic argument, like <code>\'a</code>, <code>T</code>, or <code>Item = T</code>.","An individual generic argument to a method, like <code>T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration …","A glob import in a <code>use</code> item: <code>*</code>.","An expression contained within invisible delimiters.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","A type contained within invisible delimiters.","The <code>></code> operator (greater than)","Inclusive at the beginning, exclusive at the end.","A word of Rust code, which may be a keyword or legal …","A pattern that binds a new variable: …","An <code>if</code> expression with an optional <code>else</code> block: …","An impl block providing trait or associated items: …","Returned by <code>Generics::split_for_impl</code>.","An item within an impl block.","An associated constant within an impl block.","A macro invocation within an impl block.","A method within an impl block.","An associated type within an impl block.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","Indication that a type should be inferred by the …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","Things that can appear directly inside of a module or …","An item definition.","A constant item: <code>const MAX: u16 = 65535</code>.","An enum definition: <code>enum Foo<A, B> { A(A), B(B) }</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A free-standing function: …","A block of foreign items: <code>extern \\\"C\\\" { ... }</code>.","An impl block providing trait or associated items: …","A macro invocation, which includes <code>macro_rules!</code> …","A 2.0-style declarative macro introduced by the <code>macro</code> …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A struct definition: <code>struct Foo<A> { x: A }</code>.","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: …","A type alias: …","A union definition: <code>union Foo<A, B> { x: A, y: B }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A lifetime labeling a <code>for</code>, <code>while</code>, or <code>loop</code>.","The <code><=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>\'a</code>.","A lifetime definition: <code>\'a: \'b + \'c + \'d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>\'a: \'b + \'c</code>.","A lifetime argument.","A lifetime definition: <code>\'a: \'b + \'c + \'d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A Rust literal, like the <code>\\\"new_name\\\"</code> in …","A literal in place of an expression: <code>1</code>, <code>\\\"foo\\\"</code>.","A literal pattern: <code>0</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b\'f\'</code>.","A byte string literal: <code>b\\\"foo\\\"</code>.","A character literal: <code>\'a\'</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>\\\"foo\\\"</code>.","A local <code>let</code> binding: <code>let x: u64 = s.parse()?</code>.","A local (let) binding.","Conditionless loop: <code>loop { ... }</code>.","The <code><</code> operator (less than)","A macro invocation: <code>println!(\\\"{}\\\", mac)</code>.","A macro invocation expression: <code>format!(\\\"{}\\\", q)</code>.","A macro invocation, which includes <code>macro_rules!</code> …","A macro invocation within an extern block.","A macro invocation within the definition of a trait.","A macro invocation within an impl block.","A macro in the type position.","A macro in pattern position.","A 2.0-style declarative macro introduced by the <code>macro</code> …","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) => {}, None => {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured meta item, like the <code>Copy</code> in <code>#[derive(Copy)]</code> …","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A trait method within the definition of a trait.","A method within an impl block.","A method call expression: <code>x.foo::<T>(a, b)</code>.","The <code>::<></code> explicit type parameters passed to a method call:…","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","Element of a compile-time attribute list.","The never type: <code>!</code>.","","","The <code>!</code> operator for logical inversion","The <code>||</code> operator (logical or)","A pattern that matches any one of a set of cases.","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -> C</code> in <code>Fn(A, B) -> C</code>.","Arguments of a function path segment: the <code>(A, B) -> C</code> in …","A pattern in a local binding, function signature, match …","A box pattern: <code>box v</code>.","A pattern that binds a new variable: …","A literal pattern: <code>0</code>.","A macro in pattern position.","A pattern that matches any one of a set of cases.","A path pattern like <code>Color::Red</code>, optionally qualified with …","A range pattern: <code>1..=2</code>.","A reference pattern: <code>&mut var</code>.","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A dynamically sized slice pattern: …","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","A type ascription pattern: <code>foo: f64</code>.","A pattern that matches any value: <code>_</code>.","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A path pattern like <code>Color::Red</code>, optionally qualified with …","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","An equality predicate in a <code>where</code> clause (unsupported).","A lifetime predicate in a <code>where</code> clause: <code>\'a: \'b + \'c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A range pattern: <code>1..=2</code>.","Limit types of a range, inclusive or exclusive.","A raw string like <code>r##\\\"data\\\"##</code>.","The <code>self</code> argument of an associated method, whether taken …","The <code>self</code> argument of an associated method, whether taken …","A referencing operation: <code>&a</code> or <code>&mut a</code>.","A reference type: <code>&\'a T</code> or <code>&\'a mut T</code>.","A reference pattern: <code>&mut var</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An renamed identifier imported by a <code>use</code> item: …","An array literal constructed from one repeated element: …","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","Expression with trailing semicolon.","The <code><<</code> operator (shift left)","The <code><<=</code> operator","The <code>>></code> operator (shift right)","The <code>>>=</code> operator","A function signature in a trait or implementation: …","A dynamically sized slice type: <code>[T]</code>.","A dynamically sized slice pattern: …","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A statement, usually ending in a semicolon.","A UTF-8 string literal: <code>\\\"foo\\\"</code>.","The style of a string literal, either plain quoted or a …","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A struct definition: <code>struct Foo<A> { x: A }</code>.","A struct input to a <code>proc_macro_derive</code> macro.","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: …","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code>…","An item declaration within the definition of a trait.","An associated constant within the definition of a trait.","A macro invocation within the definition of a trait.","A trait method within the definition of a trait.","An associated type within the definition of a trait.","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A type ascription expression: <code>foo: f64</code>.","A type argument.","A generic type parameter: <code>T: Into<String></code>.","A type predicate in a <code>where</code> clause: …","A type alias: …","A foreign type in an <code>extern</code> block: <code>type void</code>.","An associated type within the definition of a trait.","An associated type within an impl block.","A particular type is returned.","A type ascription pattern: <code>foo: f64</code>.","A type argument.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -> bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into<String></code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&\'a T</code> or <code>&\'a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …","A tuple type: <code>(A, B, C, String)</code>.","A function argument accepted by pattern and type.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","A union definition: <code>union Foo<A, B> { x: A, y: B }</code>.","An untagged union input to a <code>proc_macro_derive</code> macro.","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A glob import in a <code>use</code> item: <code>*</code>.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","An renamed identifier imported by a <code>use</code> item: …","A suffix of an import tree in a <code>use</code> item: <code>Type as Renamed</code> …","The variadic argument of a foreign function.","An enum variant.","Tokens in expression position not interpreted by Syn.","Tokens forming an item not interpreted by Syn.","Tokens in an <code>extern</code> block not interpreted by Syn.","Tokens within the definition of a trait not interpreted …","Tokens within an impl block not interpreted by Syn.","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","Tokens in pattern position not interpreted by Syn.","A crate-level visibility: <code>crate</code>.","A public visibility level: <code>pub</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize<\'de></code>.","A while loop: <code>while expr { ... }</code>.","A pattern that matches any value: <code>_</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","","","","","","","","","Turn a type’s generics like <code><X, Y></code> into a turbofish …","","","","Attributes tagged on the variant.","Attributes tagged on the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes tagged on the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes tagged on the whole struct or enum.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number typehe type being bounded","","","Trait and lifetime bounds (<code>Clone+Send+\'static</code>)","","","","","","","","","","","","","","","","","","","","Parse a set of curly braces and expose their content to …","","","","","","","","Parse a set of square brackets and expose their content …","","A stably addressed token buffer supporting efficient …he colon in <code>Struct { x: x }</code>. If written in shorthand like…","","","","","","","","","","","","","","","","","","","","Returns an Iterator<Item = &ConstParam> over the constant …","Returns an Iterator<Item = &mut ConstParam> over the …","","","","","","","","","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","Data within the struct or enum.","","","","","","","","","","","","","","Explicit discriminant: <code>Variant = 1</codealue of the field.","","","","","Extension traits to provide parsing methods on foreign …","","","","Content stored in the variantenerics required to complete the definition.","If this path consists of a single ident, returns the …ame of the variant.","Name of the field, if any.","","","","","","The <code>example</code> in <code>macro_rules! example { ... }</code>.","","","","","","","","","","","","","","","","","","","Name of the struct or enum.","","","","","","","","","","","","","","","","<code>(A, B)</codeeturns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to …","","","","","","Get an iterator over the borrowed [<code>Field</code>] items in this …","Get an iterator over the mutably borrowed [<code>Field</code>] items …","","","","","","","","","","","","","Returns the number of fields.","","","","","","","","","","Returns an Iterator<Item = &LifetimeDef> over the …","","The <code>for<\'a></code> in <code>for<\'a> Foo<&\'a T></code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator<Item = &mut LifetimeDef> over the …","","","","","","","","","","","","","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","Name or index of the field.","","","","","","","","","","","","","","","","","","","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","","","","","","","","","<code>C</code>","","","","","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","Parse the arguments to the attribute using the given …","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parse the content of a file of Rust code.","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parses the content of the attribute, consisting of the …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","Parse the body of a block as zero or more statements, …","An alternative to the primary <code>Expr::parse</code> parser (from the…","","","","","","","","","","","","Returns the identifier that begins this structured meta …","","","","","","","The <code>Foo<&\'a T></code> in <code>for<\'a> Foo<&\'a T></code>","","","","","","","","","","","","","","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","A method’s <code>self</code> receiver, such as <code>&self</code> or …","","","","","","","","","","","","","","The Self type of the impl.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …eturns the span of this <code>Ident</code>.","","","A trait that can provide the <code>Span</code> of the complete …","Split a type’s generics into the pieces required for …","","","","","Statements in a blockokens representing Rust punctuation, keywords, and …","","","Trait this impl implementsype of the fieldeturns an Iterator<Item = &TypeParam> over the type …","Returns an Iterator<Item = &mut TypeParam> over the type …","","","","","","","","","","","","","","","","","","","","","","","","","","","Visibility of the field.","","","","","","","","","","","","","","","","","","","","Visibility of the struct or enum.","","","","In some positions, types may not contain the <code>+</code> character, …","","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple …","Creates a cursor referencing the first token in the …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the …","","","","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","","","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","If the cursor is pointing at an <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or …","","Copies all remaining tokens visible from this cursor into …","If the cursor is pointing at a <code>TokenTree</code>, returns it …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of …","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","Forks a parse stream so that parsing tokens out of either …","","","","","","","","","","","","Render the error as an invocation of <code>compile_error!</code>.","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","Returns the <code>Span</code> of the next token in the parse stream, or…","The source location of the error.","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair<T, P></code>.","An iterator over borrowed values of type <code>&T</code>.","An iterator over mutably borrowed values of type <code>&mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair<&T, &P></code>.","An iterator over mutably borrowed pairs of type …","A punctuated sequence of syntax tree nodes of type <code>T</code> …","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it …","","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","","","","","","","","","","","","","","","Inserts an element at position <code>index</code>.","","","","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given …","Removes the last punctuated pair from this sequence, or …","Borrows the punctuation from this punctuated pair, unless …","Appends a syntax tree node onto the end of this …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","A trait that can provide the <code>Span</code> of the complete …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>+</code>","<code>+=</code>","<code>&</code>","<code>&&</code>","<code>&=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>!</code>","<code>become</code>","<code>box</code>","<code>{...}</code>","<code>[...]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>::</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>/</code>","<code>/=</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=></code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>>=</code>","None-delimited group","<code>></code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code><-</code>","<code><=</code>","<code>let</code>","<code>loop</code>","<code><</code>","<code>macro</code>","<code>match</code>","<code>mod</code>","<code>move</code>","<code>*=</code>","<code>mut</code>","<code>!=</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(...)</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-></code>","<code>ref</code>","<code>%</code>","<code>%=</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code><<</code>","<code><<=</code>","<code>>></code>","<code>>>=</code>","<code>*</code>","<code>static</code>","<code>struct</code>","<code>-</code>","<code>-=</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codei":[0,1,1,1,2,0,0,3,4,3,3,3,0,0,0,3,4,0,0,3,0,5,1,1,1,1,1,1,0,3,6,0,3,7,8,8,3,6,6,3,3,6,9,3,10,11,12,13,14,5,0,0,5,3,15,16,0,0,0,0,17,18,0,1,1,12,19,20,1,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,3,0,0,0,0,0,0,6,12,22,0,3,0,0,0,0,0,12,1,0,0,0,0,23,3,23,4,1,9,0,7,3,12,0,0,0,0,0,0,4,0,3,4,16,24,6,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,11,25,20,5,0,26,0,27,3,7,0,0,0,0,0,0,0,0,21,3,1,0,3,12,22,13,14,4,7,12,0,3,28,0,0,27,0,0,13,14,3,0,12,1,1,23,26,29,30,1,18,0,4,28,2,18,1,7,24,3,8,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,3,23,4,7,0,0,0,0,0,4,16,0,3,7,0,15,0,31,3,4,7,1,1,23,3,7,16,0,3,0,21,1,1,1,1,0,4,7,12,22,0,6,0,3,12,19,7,1,1,0,25,12,12,0,0,0,0,0,0,0,4,3,3,3,4,7,7,0,0,3,10,11,20,12,22,13,14,17,7,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,3,12,19,29,29,30,3,12,0,0,0,0,0,0,0,0,3,12,22,13,14,6,4,7,0,0,0,0,0,0,3,7,3,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,33,51,52,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,100,56,138,139,56,62,140,141,140,141,49,58,78,82,93,114,50,63,69,83,86,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,15,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,15,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,158,87,88,158,159,101,111,176,183,188,59,123,147,44,76,91,32,94,100,164,171,173,132,0,144,53,66,74,174,182,131,0,60,0,124,49,50,127,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,38,190,41,161,42,52,80,85,153,87,88,89,158,159,90,98,100,106,109,111,113,135,137,188,86,65,83,154,154,89,90,109,113,181,33,97,61,150,92,0,0,119,154,155,2,87,89,109,110,111,94,113,114,115,138,51,38,6,165,166,167,168,140,141,169,190,76,130,132,56,62,40,122,183,174,175,179,181,36,182,53,79,184,131,133,65,91,171,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,190,146,54,67,87,89,160,90,98,101,102,113,115,187,59,60,45,63,64,66,67,44,71,35,74,75,77,80,81,84,85,90,98,113,125,0,92,185,86,51,76,99,103,170,172,132,142,48,143,38,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,30,152,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,140,141,141,169,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,190,190,33,34,63,155,142,48,143,38,144,24,26,26,26,26,145,146,27,27,27,51,29,29,29,147,148,52,16,16,16,16,149,150,151,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,152,41,10,85,153,86,9,154,11,11,11,11,87,87,88,89,155,25,25,25,156,28,157,20,20,20,20,158,159,160,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,23,23,23,23,23,161,162,46,163,164,22,22,22,22,22,105,106,107,108,13,13,13,13,13,109,110,111,112,14,14,14,14,14,113,114,115,116,33,31,31,31,117,118,6,6,6,6,6,6,6,6,165,166,167,168,140,140,141,141,169,15,138,8,119,119,119,119,19,19,19,19,170,171,172,1,18,173,21,120,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,186,43,43,2,5,42,187,188,189,47,190,190,190,190,190,190,190,73,39,91,94,99,100,101,102,103,111,115,33,119,186,64,175,41,154,155,42,47,86,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,129,38,51,52,87,89,90,91,92,95,96,97,98,99,100,101,102,103,161,162,46,106,107,109,111,113,115,33,119,124,43,187,188,65,94,176,151,63,66,152,120,50,33,34,189,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,15,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,29,29,2,186,32,94,100,164,118,29,29,58,60,61,63,69,83,104,186,127,54,55,57,29,74,174,67,120,160,117,88,159,36,154,155,156,158,34,154,73,129,146,68,129,69,41,154,155,42,47,70,95,108,112,116,178,126,96,154,44,62,85,137,40,97,156,50,35,98,106,117,181,36,124,37,153,185,121,147,145,38,88,6,165,166,167,168,140,141,169,190,55,57,81,50,50,50,33,34,189,154,145,148,151,39,40,71,79,156,33,34,179,184,133,189,0,0,0,38,26,145,146,27,51,147,148,16,3,53,54,55,49,57,58,59,60,39,45,50,61,62,63,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,165,166,167,168,140,141,169,138,119,1,18,173,21,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,17,7,186,43,5,42,187,188,189,190,0,190,144,144,138,138,0,144,0,144,186,52,144,0,0,52,165,173,3,38,190,63,67,86,120,123,37,134,135,137,26,144,145,146,151,72,76,156,138,180,128,132,134,38,6,165,166,167,168,140,141,169,190,47,144,157,149,151,0,72,180,128,77,35,33,40,117,92,46,76,75,160,54,55,57,96,186,117,94,97,74,90,92,95,98,99,101,102,104,105,106,107,108,109,110,111,112,113,115,116,170,120,174,38,6,165,166,167,168,140,141,169,190,118,93,105,110,114,142,48,143,38,38,144,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,30,152,152,41,10,85,153,86,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,6,165,165,166,166,167,167,168,168,140,140,141,141,169,169,138,119,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,190,190,190,152,169,0,154,163,181,98,106,173,99,170,144,124,6,165,166,167,168,140,141,100,65,73,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,38,140,141,190,142,48,143,38,144,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,138,119,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,190,0,144,138,94,100,101,104,161,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,15,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,15,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,78,40,52,45,80,89,90,98,102,106,109,113,115,121,135,187,47,142,48,143,38,144,24,26,145,146,27,51,29,147,148,52,16,149,150,151,3,53,54,55,49,56,57,58,59,60,39,45,50,61,62,63,64,65,66,67,68,69,70,44,40,71,72,73,35,74,75,76,77,78,79,80,81,82,83,84,30,152,41,10,85,153,86,9,154,11,87,88,89,155,25,156,28,157,20,158,159,160,12,90,91,92,93,32,94,95,96,97,98,99,100,101,102,103,104,23,161,162,46,163,164,22,105,106,107,108,13,109,110,111,112,14,113,114,115,116,33,31,117,118,6,165,166,167,168,140,141,169,15,138,8,119,19,170,171,172,1,18,173,21,120,4,174,34,175,176,177,178,139,179,180,181,36,182,183,184,185,121,122,17,7,123,124,125,126,127,128,129,37,130,131,132,133,134,135,136,137,186,43,2,5,42,187,188,189,47,190,154,154,102,107,111,115,177,136,103,172,148,190,82,94,100,33,34,104,165,166,167,168,169,169,33,34,91,171,52,90,91,92,93,96,97,98,99,100,101,102,103,104,105,106,107,113,114,115,119,154,157,83,4,183,17,84,0,0,191,191,192,191,192,192,192,192,192,192,191,192,192,192,191,192,192,192,191,191,192,192,192,192,192,191,192,191,192,191,192,0,193,193,193,0,0,0,194,0,0,0,0,0,0,0,195,196,195,197,198,199,196,195,197,198,199,195,197,199,197,199,199,195,197,0,195,196,195,197,199,195,195,199,199,195,196,195,197,198,199,199,196,195,197,198,199,199,199,195,195,199,199,200,195,194,198,194,194,195,196,195,195,195,195,199,195,199,197,199,195,199,196,195,197,198,199,196,195,197,198,199,196,195,197,198,199,0,201,202,0,0,0,0,0,0,0,0,202,203,204,205,206,207,208,209,202,203,204,205,206,207,208,209,202,203,203,204,206,207,208,202,203,204,206,207,208,202,203,203,203,203,203,203,203,203,203,204,205,206,207,208,209,202,203,203,203,203,203,203,203,204,205,206,207,208,209,202,203,204,205,206,207,208,209,203,202,202,203,203,203,203,203,203,204,205,206,207,208,209,203,202,204,205,206,207,208,209,204,205,206,207,208,209,203,203,203,203,203,203,203,202,203,203,203,204,205,206,207,208,209,203,202,203,204,206,207,208,202,203,202,203,203,204,205,206,207,208,209,202,203,204,205,206,207,208,209,202,203,204,205,206,207,208,209,202,202,202,0,210,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,264,266,269,270,271,273,275,276,278,279,283,286,288,291,294,295,298,301,306,307,309,211,264,266,269,270,271,273,275,276,278,279,283,286,288,291,294,295,298,301,306,307,309,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,310,311,312,313,211,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["turbofish",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],[[],["str",15]],[[],["result",6]],[[],["result",6]],null,null,null,null,null,null,null,null,null,null,nullnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["identlifetime",3]],["ordering",4]],[[["ident",3]],["ordering",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["constparams",3]],[[],["constparamsmut",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["lifetime",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["ident",3]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["metalist",3]],["meta",4]],[[["path",3]],["meta",4]],[[["metanamevalue",3]],["meta",4]],[[]],[[]],[[]],[[["meta",4]],["nestedmeta",4]],[[["lit",4]],["nestedmeta",4]],[[]],[[]],[[["fieldsnamed",3]],["fields",4]],[[["fieldsunnamed",3]],["fields",4]],[[]],[[]],[[]],[[["viscrate",3]],["visibility",4]],[[["visrestricted",3]],["visibility",4]],[[]],[[["vispublic",3]],["visibility",4]],[[]],[[]],[[]],[[["exprreturn",3]],["expr",4]],[[["exprcontinue",3]],["expr",4]],[[["exprrepeat",3]],["expr",4]],[[["exprlit",3]],["expr",4]],[[["exprfield",3]],["expr",4]],[[["exprbox",3]],["expr",4]],[[["exprmethodcall",3]],["expr",4]],[[]],[[["exprloop",3]],["expr",4]],[[["exprassign",3]],["expr",4]],[[["exprtype",3]],["expr",4]],[[["exprclosure",3]],["expr",4]],[[["exprmacro",3]],["expr",4]],[[["expryield",3]],["expr",4]],[[["exprmatch",3]],["expr",4]],[[["exprbinary",3]],["expr",4]],[[["exprasync",3]],["expr",4]],[[["exprassignop",3]],["expr",4]],[[["exprcast",3]],["expr",4]],[[["exprstruct",3]],["expr",4]],[[["exprforloop",3]],["expr",4]],[[["exprtry",3]],["expr",4]],[[["exprindex",3]],["expr",4]],[[["exprtuple",3]],["expr",4]],[[["exprreference",3]],["expr",4]],[[["exprwhile",3]],["expr",4]],[[["exprblock",3]],["expr",4]],[[["exprlet",3]],["expr",4]],[[["exprrange",3]],["expr",4]],[[["exprgroup",3]],["expr",4]],[[["exprarray",3]],["expr",4]],[[["exprunary",3]],["expr",4]],[[["exprif",3]],["expr",4]],[[["exprbreak",3]],["expr",4]],[[["exprunsafe",3]],["expr",4]],[[["exprawait",3]],["expr",4]],[[["exprparen",3]],["expr",4]],[[["exprpath",3]],["expr",4]],[[["exprcall",3]],["expr",4]],[[["exprtryblock",3]],["expr",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["index",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["lifetimedef",3]],["genericparam",4]],[[["typeparam",3]],["genericparam",4]],[[["constparam",3]],["genericparam",4]],[[["ident",3]]],[[]],[[]],[[]],[[]],[[["traitbound",3]],["typeparambound",4]],[[]],[[["lifetime",3]],["typeparambound",4]],[[]],[[]],[[]],[[["predicateeq",3]],["wherepredicate",4]],[[["predicatetype",3]],["wherepredicate",4]],[[]],[[["predicatelifetime",3]],["wherepredicate",4]],[[]],[[]],[[]],[[["itemstatic",3]],["item",4]],[[["itemmod",3]],["item",4]],[[["itemmacro",3]],["item",4]],[[["itemtraitalias",3]],["item",4]],[[["itemunion",3]],["item",4]],[[["itemtrait",3]],["item",4]],[[["itemuse",3]],["item",4]],[[["itemstruct",3]],["item",4]],[[]],[[["itemfn",3]],["item",4]],[[["deriveinput",3]],["item",4]],[[["itemimpl",3]],["item",4]],[[["itemforeignmod",3]],["item",4]],[[["itemenum",3]],["item",4]],[[["itemconst",3]],["item",4]],[[["itemmacro2",3]],["item",4]],[[["itemtype",3]],["item",4]],[[["itemexterncrate",3]],["item",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usegroup",3]],["usetree",4]],[[["useglob",3]],["usetree",4]],[[["userename",3]],["usetree",4]],[[["usename",3]],["usetree",4]],[[["usepath",3]],["usetree",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["foreignitemtype",3]],["foreignitem",4]],[[["foreignitemstatic",3]],["foreignitem",4]],[[["foreignitemfn",3]],["foreignitem",4]],[[["foreignitemmacro",3]],["foreignitem",4]],[[]],[[]],[[]],[[]],[[["traititemmethod",3]],["traititem",4]],[[["traititemconst",3]],["traititem",4]],[[]],[[["traititemtype",3]],["traititem",4]],[[["traititemmacro",3]],["traititem",4]],[[]],[[]],[[]],[[]],[[["implitemmacro",3]],["implitem",4]],[[]],[[["implitemconst",3]],["implitem",4]],[[["implitemmethod",3]],["implitem",4]],[[["implitemtype",3]],["implitem",4]],[[]],[[]],[[]],[[]],[[]],[[["receiver",3]],["fnarg",4]],[[["pattype",3]],["fnarg",4]],[[]],[[]],[[]],[[["litint",3]],["lit",4]],[[["litbytestr",3]],["lit",4]],[[["litbyte",3]],["lit",4]],[[["litchar",3]],["lit",4]],[[["litstr",3]],["lit",4]],[[]],[[["litbool",3]],["lit",4]],[[["litfloat",3]],["lit",4]],[[]],[[]],[[]],[[]],[[]],[[["literal",3]]],[[]],[[["literal",3]]],[[]],[[]],[[]],[[]],[[["itemunion",3]],["deriveinput",3]],[[["itemenum",3]],["deriveinput",3]],[[["itemstruct",3]],["deriveinput",3]],[[]],[[["dataunion",3]],["data",4]],[[["dataenum",3]],["data",4]],[[["datastruct",3]],["data",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["typegroup",3]],["type",4]],[[["typearray",3]],["type",4]],[[["typetuple",3]],["type",4]],[[["typebarefn",3]],["type",4]],[[["typeimpltrait",3]],["type",4]],[[["typetraitobject",3]],["type",4]],[[["typeinfer",3]],["type",4]],[[["typemacro",3]],["type",4]],[[["typenever",3]],["type",4]],[[]],[[["typeparen",3]],["type",4]],[[["typepath",3]],["type",4]],[[["typeptr",3]],["type",4]],[[["typereference",3]],["type",4]],[[["typeslice",3]],["type",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["patpath",3]],["pat",4]],[[["patmacro",3]],["pat",4]],[[["patrest",3]],["pat",4]],[[["patslice",3]],["pat",4]],[[["patstruct",3]],["pat",4]],[[["pattuple",3]],["pat",4]],[[["pattuplestruct",3]],["pat",4]],[[]],[[["pattype",3]],["pat",4]],[[["patrange",3]],["pat",4]],[[["patbox",3]],["pat",4]],[[["patwild",3]],["pat",4]],[[["patident",3]],["pat",4]],[[["patlit",3]],["pat",4]],[[["patreference",3]],["pat",4]],[[["pator",3]],["pat",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["crate",3]],["ident",3]],[[["extern",3]],["ident",3]],[[["underscore",3]],["ident",3]],[[["super",3]],["ident",3]],[[["selftype",3]],["ident",3]],[[["selfvalue",3]],["ident",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["option",4],["ident",3]]],null,null,null,null,null,null,null,nullnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullbool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,[[],[["field",3],["iter",3]]],[[],[["itermut",3],["field",3]]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["usize",15]],null,null,null,null,null,[[],[["option",4],["lifetime",3]]],null,null,null,[[],["lifetimes",3]],null,null,null,null,[[],["lifetimesmut",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["whereclause",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["span",3],["str",15]]],[[["lifetime",3]]],[[["literal",3]]],[[["span",3],["str",15]]],[[["span",3]]],[[["span",3],["u8",15]]],[[["span",3],["char",15]]],[[["span",3],["str",15]]],[[["span",3],["str",15]]],[[["bool",15],["span",3]]],[[["str",15],["span",3]],["ident",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["tokenstream",3]],[["parse",8],["result",6]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],[["arm",3],["result",6]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],[["usetree",4],["result",6]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[],[["parse",8],["result",6]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["tokenstream",3]],[["parse",8],["result",6]]],[[["parsestream",6]],["result",6]],[[],[["parse",8],["result",6]]],[[["parser",8]],["result",6]],[[],[["parse",8],["result",6]]],[[["parser",8]],["result",6]],[[["str",15]],[["file",3],["result",6]]],[[["parsestream",6]],[["result",6],["vec",3]]],null,[[],[["result",6],["meta",4]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],[["result",6],["vec",3]]],null,[[["str",15]],[["parse",8],["result",6]]],[[["parsestream",6]],["result",6]],[[["parser",8]],["result",6]],[[["parsestream",6]],[["vec",3],["result",6]]],[[["parsestream",6]],[["expr",4],["result",6]]],[[["lifetime",3]],[["option",4],["ordering",4]]],[[["ident",3]],[["ordering",4],["option",4]]],null,null,null,null,null,null,null,null,null,[[],["path",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,[[],[["fnarg",4],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],[[["span",3]]],null,null,null,null,null,[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],[["span",3],["option",4]]],[[],[["span",3],["option",4]]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],[["option",4],["span",3]]],[[],["span",3]],null,null,null,[[]],null,null,null,null,null,null,null,null,null,[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],null,null,nullstring",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeparams",3]],[[],["typeparamsmut",3]],null,null,null,null,null,null,null,null,null,[[],["ident",3]],null,null,null,null,null,null,[[],["string",3]],[[],[["u8",15],["vec",3]]],[[],["u8",15]],[[],["char",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],null,null,null,[[],["cursor",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["delimiter",4]],["option",4]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[["tokenstream",3]],["tokenbuffer",3]],[[["tokenstream",3]],["tokenbuffer",3]],[[],["option",4]],[[],["span",3]],[[]],[[],["tokenstream",3]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[["parsestream",6]],["result",6]],null,[[],["ident",3]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],[[]],[[]],[[]],[[]],[[["error",3]]],[[],["cursor",3]],[[]],null,[[]],[[],["error",3]],[[["display",8]],["error",3]],[[["display",8]],["error",3]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["lexerror",3]]],[[]],[[]],[[]],[[]],[[]],[[],["tokenstream",3]],[[]],[[],["bool",15]],[[],["lookahead1",3]],[[["span",3],["display",8]]],[[["totokens",8],["display",8]]],[[["parsestream",6]],["result",6]],[[],[["parse",8],["result",6]]],[[["tokenstream",3]],["result",6]],[[["parsestream",6]],["result",6]],[[["tokenstream",3]],["result",6]],[[["str",15]],["result",6]],[[],[["punctuated",3],["result",6]]],[[["peek",8]],["bool",15]],[[["peek",8]],["bool",15]],[[["peek",8]],["bool",15]],[[["peek",8]],["bool",15]],[[],["span",3]],[[],["span",3]],[[],["result",6]],[[],["tokenstream",3]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["option",4]],[[],["option",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intopairs",3]],[[]],[[]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["option",4]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["pairs",3]],[[],["pairsmut",3]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[],[["option",4],["pair",4]]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["span",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,[[],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullstr",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[["underscore",3]],["bool",15]],[[["abstract",3]],["bool",15]],[[["as",3]],["bool",15]],[[["async",3]],["bool",15]],[[["auto",3]],["bool",15]],[[["await",3]],["bool",15]],[[["become",3]],["bool",15]],[[["box",3]],["bool",15]],[[["break",3]],["bool",15]],[[["const",3]],["bool",15]],[[["continue",3]],["bool",15]],[[["crate",3]],["bool",15]],[[["default",3]],["bool",15]],[[["do",3]],["bool",15]],[[["dyn",3]],["bool",15]],[[["else",3]],["bool",15]],[[["enum",3]],["bool",15]],[[["extern",3]],["bool",15]],[[["final",3]],["bool",15]],[[["fn",3]],["bool",15]],[[["for",3]],["bool",15]],[[["if",3]],["bool",15]],[[["impl",3]],["bool",15]],[[["in",3]],["bool",15]],[[["let",3]],["bool",15]],[[["loop",3]],["bool",15]],[[["macro",3]],["bool",15]],[[["match",3]],["bool",15]],[[["mod",3]],["bool",15]],[[["move",3]],["bool",15]],[[["mut",3]],["bool",15]],[[["override",3]],["bool",15]],[[["priv",3]],["bool",15]],[[["pub",3]],["bool",15]],[[["ref",3]],["bool",15]],[[["return",3]],["bool",15]],[[["selftype",3]],["bool",15]],[[["selfvalue",3]],["bool",15]],[[["static",3]],["bool",15]],[[["struct",3]],["bool",15]],[[["super",3]],["bool",15]],[[["trait",3]],["bool",15]],[[["try",3]],["bool",15]],[[["type",3]],["bool",15]],[[["typeof",3]],["bool",15]],[[["union",3]],["bool",15]],[[["unsafe",3]],["bool",15]],[[["unsized",3]],["bool",15]],[[["use",3]],["bool",15]],[[["virtual",3]],["bool",15]],[[["where",3]],["bool",15]],[[["while",3]],["bool",15]],[[["yield",3]],["bool",15]],[[["add",3]],["bool",15]],[[["addeq",3]],["bool",15]],[[["and",3]],["bool",15]],[[["andand",3]],["bool",15]],[[["andeq",3]],["bool",15]],[[["at",3]],["bool",15]],[[["bang",3]],["bool",15]],[[["caret",3]],["bool",15]],[[["careteq",3]],["bool",15]],[[["colon",3]],["bool",15]],[[["colon2",3]],["bool",15]],[[["comma",3]],["bool",15]],[[["div",3]],["bool",15]],[[["diveq",3]],["bool",15]],[[["dollar",3]],["bool",15]],[[["dot",3]],["bool",15]],[[["dot2",3]],["bool",15]],[[["dot3",3]],["bool",15]],[[["dotdoteq",3]],["bool",15]],[[["eq",3]],["bool",15]],[[["eqeq",3]],["bool",15]],[[["ge",3]],["bool",15]],[[["gt",3]],["bool",15]],[[["le",3]],["bool",15]],[[["lt",3]],["bool",15]],[[["muleq",3]],["bool",15]],[[["ne",3]],["bool",15]],[[["or",3]],["bool",15]],[[["oreq",3]],["bool",15]],[[["oror",3]],["bool",15]],[[["pound",3]],["bool",15]],[[["question",3]],["bool",15]],[[["rarrow",3]],["bool",15]],[[["larrow",3]],["bool",15]],[[["rem",3]],["bool",15]],[[["remeq",3]],["bool",15]],[[["fatarrow",3]],["bool",15]],[[["semi",3]],["bool",15]],[[["shl",3]],["bool",15]],[[["shleq",3]],["bool",15]],[[["shr",3]],["bool",15]],[[["shreq",3]],["bool",15]],[[["star",3]],["bool",15]],[[["sub",3]],["bool",15]],[[["subeq",3]],["bool",15]],[[["tilde",3]],["bool",15]],[[["brace",3]],["bool",15]],[[["bracket",3]],["bool",15]],[[["paren",3]],["bool",15]],[[["group",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["resultparsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[["cursor",3]],["bool",15]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstreamtokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"BinOp"],[4,"PathArguments"],[4,"Expr"],[4,"Type"],[4,"GenericArgument"],[4,"Lit"],[4,"Pat"],[4,"MacroDelimiter"],[4,"RangeLimits"],[4,"GenericMethodArgument"],[4,"GenericParam"],[4,"Item"],[4,"TraitItem"],[4,"ImplItem"],[4,"StrStyle"],[4,"Visibility"],[4,"ReturnType"],[4,"UnOp"],[4,"Data"],[4,"WherePredicate"],[4,"Stmt"],[4,"ForeignItem"],[4,"UseTree"],[4,"AttrStyle"],[4,"TypeParamBound"],[4,"Meta"],[4,"NestedMeta"],[4,"TraitBoundModifier"],[4,"Fields"],[4,"Member"],[4,"FnArg"],[3,"ItemForeignMod"],[3,"Signature"],[3,"TypeBareFn"],[3,"ExprReference"],[3,"TypeReference"],[3,"PatReference"],[3,"Lifetime"],[3,"ExprCall"],[3,"ExprMethodCall"],[3,"MethodTurbofish"],[3,"AngleBracketedGenericArguments"],[3,"PathSegment"],[3,"ExprMatch"],[3,"ExprCast"],[3,"UseRename"],[3,"QSelf"],[3,"TypeGenerics"],[3,"ExprAsync"],[3,"ExprClosure"],[3,"Variant"],[3,"Field"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAwait"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIndex"],[3,"ExprLet"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[3,"FieldValue"],[3,"Arm"],[3,"TypeParam"],[3,"LifetimeDef"],[3,"ConstParam"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemTraitAlias"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[3,"ForeignItemFn"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ForeignItemMacro"],[3,"TraitItemConst"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"TraitItemMacro"],[3,"ImplItemConst"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ImplItemMacro"],[3,"Receiver"],[3,"File"],[3,"DeriveInput"],[3,"Local"],[3,"BareFnArg"],[3,"Variadic"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatOr"],[3,"PatPath"],[3,"PatRange"],[3,"PatRest"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatType"],[3,"PatWild"],[3,"FieldPat"],[3,"Macro"],[3,"TypeNever"],[3,"LitInt"],[3,"LitFloat"],[3,"ImplGenerics"],[3,"Turbofish"],[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"VisPublic"],[3,"VisCrate"],[3,"VisRestricted"],[3,"Index"],[3,"Label"],[3,"Generics"],[3,"BoundLifetimes"],[3,"TraitBound"],[3,"WhereClause"],[3,"PredicateType"],[3,"PredicateLifetime"],[3,"PredicateEq"],[3,"UsePath"],[3,"UseName"],[3,"UseGlob"],[3,"UseGroup"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitBool"],[3,"DataStruct"],[3,"DataEnum"],[3,"DataUnion"],[3,"Block"],[3,"TypeArray"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Abi"],[3,"Path"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"Ident"],[3,"TokenBuffer"],[3,"Cursor"],[8,"IdentExt"],[8,"Parser"],[3,"ParseBuffer"],[3,"Lookahead1"],[3,"StepCursor"],[3,"Nothing"],[3,"Error"],[8,"Parse"],[8,"Speculative"],[4,"Pair"],[3,"Punctuated"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"Spanned"],[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"SelfType"],[3,"SelfValue"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"]]},\
"terminal_size":{"doc":"A simple utility for getting the size of a terminal.","t":[12,12,3,3,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11],"n":["0","0","Height","Width","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","into","into","terminal_size","terminal_size_using_fd","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["terminal_size","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","Returns the size of the terminal defaulting to STDOUT, if …","Returns the size of the terminal using the given file …","","","","","",""],"i":[1,2,0,0,1,2,1,2,1,2,1,2,1,2,0,0,1,2,1,2,1,2],"f":[null,null,null,null,[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["option",4]],[[["rawfd",6]],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Width"],[3,"Height"]]},\
"thread_local":{"doc":"Per-object thread-local storage","t":[3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CachedIntoIter","CachedIterMut","CachedThreadLocal","IntoIter","Iter","IterMut","ThreadLocal","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","default","default","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get","get","get_or","get_or","get_or_default","get_or_default","get_or_try","get_or_try","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","iter","iter_mut","iter_mut","new","new","next","next","next","next","next","size_hint","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity"],"q":["thread_local","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator that moves out of a <code>CachedThreadLocal</code>.","Mutable iterator over the contents of a <code>CachedThreadLocal</code>.","Wrapper around [<code>ThreadLocal</code>].","An iterator that moves out of a <code>ThreadLocal</code>.","Iterator over the contents of a <code>ThreadLocal</code>.","Mutable iterator over the contents of a <code>ThreadLocal</code>.","Thread-local variable wrapper","","","","","","","","","","","","","","","Removes all thread-specific values from the <code>ThreadLocal</code>, …","Removes all thread-specific values from the <code>ThreadLocal</code>, …","","","","","","","","","","","","","","","","Returns the element for the current thread, if it exists.","Returns the element for the current thread, if it exists.","Returns the element for the current thread, or creates it …","Returns the element for the current thread, or creates it …","Returns the element for the current thread, or creates a …","Returns the element for the current thread, or creates a …","Returns the element for the current thread, or creates it …","Returns the element for the current thread, or creates it …","","","","","","","","","","","","","","","Returns an iterator over the local values of all threads …","Returns a mutable iterator over the local values of all …","Returns a mutable iterator over the local values of all …","Creates a new empty <code>CachedThreadLocal</code>.","Creates a new empty <code>ThreadLocal</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>ThreadLocal</code> with an initial capacity. If …"],"i":[0,0,0,0,0,0,0,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,4,1,4,4,1,4,5,6,7,1,2,3,4,5,6,7,1,4,1,4,1,4,1,4,1,2,3,4,5,6,7,1,2,3,4,5,6,7,4,1,4,1,4,2,3,5,6,7,2,3,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,4],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cachedthreadlocal",3]],[[],["threadlocal",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["cachedintoiter",3]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[],["iter",3]],[[],["cacheditermut",3]],[[],["itermut",3]],[[],["cachedthreadlocal",3]],[[],["threadlocal",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],["threadlocal",3]]],"p":[[3,"CachedThreadLocal"],[3,"CachedIterMut"],[3,"CachedIntoIter"],[3,"ThreadLocal"],[3,"IterMut"],[3,"Iter"],[3,"IntoIter"]]},\
"typenum":{"doc":"This crate provides type-level numbers evaluated at …","t":[3,6,3,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,14,14,0,11,11,11,11,11,11,11,11,11,11,11,11,14,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,0,14,0,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,8,18,18,18,18,18,18,18,18,18,18,8,8,8,8,8,18,18,18,18,18,18,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,8,8,8,8,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,8,6,16,16,8,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Equal","False","Greater","Less","N1","N10","N100","N1000","N10000","N100000","N1000000","N10000000","N100000000","N1000000000","N10000000000","N100000000000","N1000000000000","N10000000000000","N100000000000000","N1000000000000000","N10000000000000000","N100000000000000000","N1000000000000000000","N1001","N1002","N1003","N1004","N1005","N1006","N1007","N1008","N1009","N101","N1010","N1011","N1012","N1013","N1014","N1015","N1016","N1017","N1018","N1019","N102","N1020","N1021","N1022","N1023","N1024","N103","N104","N1048576","N105","N106","N107","N1073741824","N108","N109","N1099511627776","N11","N110","N111","N112","N1125899906842624","N113","N114","N115","N1152921504606846976","N116","N117","N118","N119","N12","N120","N121","N122","N123","N124","N125","N126","N127","N128","N129","N13","N130","N131","N131072","N132","N133","N134","N134217728","N135","N136","N137","N137438953472","N138","N139","N14","N140","N140737488355328","N141","N142","N143","N144","N144115188075855872","N145","N146","N147","N148","N149","N15","N150","N151","N152","N153","N154","N155","N156","N157","N158","N159","N16","N160","N161","N162","N163","N16384","N164","N165","N166","N167","N16777216","N168","N169","N17","N170","N171","N17179869184","N172","N173","N174","N175","N17592186044416","N176","N177","N178","N179","N18","N180","N18014398509481984","N181","N182","N183","N184","N185","N186","N187","N188","N189","N19","N190","N191","N192","N193","N194","N195","N196","N197","N198","N199","N2","N20","N200","N201","N202","N203","N204","N2048","N205","N206","N207","N208","N209","N2097152","N21","N210","N211","N212","N213","N214","N2147483648","N215","N216","N217","N218","N219","N2199023255552","N22","N220","N221","N222","N223","N224","N225","N2251799813685248","N226","N227","N228","N229","N23","N230","N2305843009213693952","N231","N232","N233","N234","N235","N236","N237","N238","N239","N24","N240","N241","N242","N243","N244","N245","N246","N247","N248","N249","N25","N250","N251","N252","N253","N254","N255","N256","N257","N258","N259","N26","N260","N261","N262","N262144","N263","N264","N265","N266","N267","N268","N268435456","N269","N27","N270","N271","N272","N273","N274","N274877906944","N275","N276","N277","N278","N279","N28","N280","N281","N281474976710656","N282","N283","N284","N285","N286","N287","N288","N288230376151711744","N289","N29","N290","N291","N292","N293","N294","N295","N296","N297","N298","N299","N3","N30","N300","N301","N302","N303","N304","N305","N306","N307","N308","N309","N31","N310","N311","N312","N313","N314","N315","N316","N317","N318","N319","N32","N320","N321","N322","N323","N324","N325","N326","N327","N32768","N328","N329","N33","N330","N331","N332","N333","N334","N335","N33554432","N336","N337","N338","N339","N34","N340","N341","N342","N343","N34359738368","N344","N345","N346","N347","N348","N349","N35","N350","N351","N35184372088832","N352","N353","N354","N355","N356","N357","N358","N359","N36","N360","N36028797018963968","N361","N362","N363","N364","N365","N366","N367","N368","N369","N37","N370","N371","N372","N373","N374","N375","N376","N377","N378","N379","N38","N380","N381","N382","N383","N384","N385","N386","N387","N388","N389","N39","N390","N391","N392","N393","N394","N395","N396","N397","N398","N399","N4","N40","N400","N401","N402","N403","N404","N405","N406","N407","N408","N409","N4096","N41","N410","N411","N412","N413","N414","N415","N416","N417","N418","N419","N4194304","N42","N420","N421","N422","N423","N424","N425","N426","N427","N428","N429","N4294967296","N43","N430","N431","N432","N433","N434","N435","N436","N437","N438","N439","N4398046511104","N44","N440","N441","N442","N443","N444","N445","N446","N447","N448","N449","N45","N450","N4503599627370496","N451","N452","N453","N454","N455","N456","N457","N458","N459","N46","N460","N461","N4611686018427387904","N462","N463","N464","N465","N466","N467","N468","N469","N47","N470","N471","N472","N473","N474","N475","N476","N477","N478","N479","N48","N480","N481","N482","N483","N484","N485","N486","N487","N488","N489","N49","N490","N491","N492","N493","N494","N495","N496","N497","N498","N499","N5","N50","N500","N501","N502","N503","N504","N505","N506","N507","N508","N509","N51","N510","N511","N512","N513","N514","N515","N516","N517","N518","N519","N52","N520","N521","N522","N523","N524","N524288","N525","N526","N527","N528","N529","N53","N530","N531","N532","N533","N534","N535","N536","N536870912","N537","N538","N539","N54","N540","N541","N542","N543","N544","N545","N546","N547","N548","N549","N549755813888","N55","N550","N551","N552","N553","N554","N555","N556","N557","N558","N559","N56","N560","N561","N562","N562949953421312","N563","N564","N565","N566","N567","N568","N569","N57","N570","N571","N572","N573","N574","N575","N576","N576460752303423488","N577","N578","N579","N58","N580","N581","N582","N583","N584","N585","N586","N587","N588","N589","N59","N590","N591","N592","N593","N594","N595","N596","N597","N598","N599","N6","N60","N600","N601","N602","N603","N604","N605","N606","N607","N608","N609","N61","N610","N611","N612","N613","N614","N615","N616","N617","N618","N619","N62","N620","N621","N622","N623","N624","N625","N626","N627","N628","N629","N63","N630","N631","N632","N633","N634","N635","N636","N637","N638","N639","N64","N640","N641","N642","N643","N644","N645","N646","N647","N648","N649","N65","N650","N651","N652","N653","N654","N655","N65536","N656","N657","N658","N659","N66","N660","N661","N662","N663","N664","N665","N666","N667","N668","N669","N67","N670","N671","N67108864","N672","N673","N674","N675","N676","N677","N678","N679","N68","N680","N681","N682","N683","N684","N685","N686","N687","N68719476736","N688","N689","N69","N690","N691","N692","N693","N694","N695","N696","N697","N698","N699","N7","N70","N700","N701","N702","N703","N70368744177664","N704","N705","N706","N707","N708","N709","N71","N710","N711","N712","N713","N714","N715","N716","N717","N718","N719","N72","N720","N72057594037927936","N721","N722","N723","N724","N725","N726","N727","N728","N729","N73","N730","N731","N732","N733","N734","N735","N736","N737","N738","N739","N74","N740","N741","N742","N743","N744","N745","N746","N747","N748","N749","N75","N750","N751","N752","N753","N754","N755","N756","N757","N758","N759","N76","N760","N761","N762","N763","N764","N765","N766","N767","N768","N769","N77","N770","N771","N772","N773","N774","N775","N776","N777","N778","N779","N78","N780","N781","N782","N783","N784","N785","N786","N787","N788","N789","N79","N790","N791","N792","N793","N794","N795","N796","N797","N798","N799","N8","N80","N800","N801","N802","N803","N804","N805","N806","N807","N808","N809","N81","N810","N811","N812","N813","N814","N815","N816","N817","N818","N819","N8192","N82","N820","N821","N822","N823","N824","N825","N826","N827","N828","N829","N83","N830","N831","N832","N833","N834","N835","N836","N837","N838","N8388608","N839","N84","N840","N841","N842","N843","N844","N845","N846","N847","N848","N849","N85","N850","N851","N852","N853","N854","N855","N856","N857","N858","N8589934592","N859","N86","N860","N861","N862","N863","N864","N865","N866","N867","N868","N869","N87","N870","N871","N872","N873","N874","N875","N876","N877","N878","N879","N8796093022208","N88","N880","N881","N882","N883","N884","N885","N886","N887","N888","N889","N89","N890","N891","N892","N893","N894","N895","N896","N897","N898","N899","N9","N90","N900","N9007199254740992","N901","N902","N903","N904","N905","N906","N907","N908","N909","N91","N910","N911","N912","N913","N914","N915","N916","N917","N918","N919","N92","N920","N921","N922","N923","N924","N925","N926","N927","N928","N929","N93","N930","N931","N932","N933","N934","N935","N936","N937","N938","N939","N94","N940","N941","N942","N943","N944","N945","N946","N947","N948","N949","N95","N950","N951","N952","N953","N954","N955","N956","N957","N958","N959","N96","N960","N961","N962","N963","N964","N965","N966","N967","N968","N969","N97","N970","N971","N972","N973","N974","N975","N976","N977","N978","N979","N98","N980","N981","N982","N983","N984","N985","N986","N987","N988","N989","N99","N990","N991","N992","N993","N994","N995","N996","N997","N998","N999","P1","P10","P100","P1000","P10000","P100000","P1000000","P10000000","P100000000","P1000000000","P10000000000","P100000000000","P1000000000000","P10000000000000","P100000000000000","P1000000000000000","P10000000000000000","P100000000000000000","P1000000000000000000","P1001","P1002","P1003","P1004","P1005","P1006","P1007","P1008","P1009","P101","P1010","P1011","P1012","P1013","P1014","P1015","P1016","P1017","P1018","P1019","P102","P1020","P1021","P1022","P1023","P1024","P103","P104","P1048576","P105","P106","P107","P1073741824","P108","P109","P1099511627776","P11","P110","P111","P112","P1125899906842624","P113","P114","P115","P1152921504606846976","P116","P117","P118","P119","P12","P120","P121","P122","P123","P124","P125","P126","P127","P128","P129","P13","P130","P131","P131072","P132","P133","P134","P134217728","P135","P136","P137","P137438953472","P138","P139","P14","P140","P140737488355328","P141","P142","P143","P144","P144115188075855872","P145","P146","P147","P148","P149","P15","P150","P151","P152","P153","P154","P155","P156","P157","P158","P159","P16","P160","P161","P162","P163","P16384","P164","P165","P166","P167","P16777216","P168","P169","P17","P170","P171","P17179869184","P172","P173","P174","P175","P17592186044416","P176","P177","P178","P179","P18","P180","P18014398509481984","P181","P182","P183","P184","P185","P186","P187","P188","P189","P19","P190","P191","P192","P193","P194","P195","P196","P197","P198","P199","P2","P20","P200","P201","P202","P203","P204","P2048","P205","P206","P207","P208","P209","P2097152","P21","P210","P211","P212","P213","P214","P2147483648","P215","P216","P217","P218","P219","P2199023255552","P22","P220","P221","P222","P223","P224","P225","P2251799813685248","P226","P227","P228","P229","P23","P230","P2305843009213693952","P231","P232","P233","P234","P235","P236","P237","P238","P239","P24","P240","P241","P242","P243","P244","P245","P246","P247","P248","P249","P25","P250","P251","P252","P253","P254","P255","P256","P257","P258","P259","P26","P260","P261","P262","P262144","P263","P264","P265","P266","P267","P268","P268435456","P269","P27","P270","P271","P272","P273","P274","P274877906944","P275","P276","P277","P278","P279","P28","P280","P281","P281474976710656","P282","P283","P284","P285","P286","P287","P288","P288230376151711744","P289","P29","P290","P291","P292","P293","P294","P295","P296","P297","P298","P299","P3","P30","P300","P301","P302","P303","P304","P305","P306","P307","P308","P309","P31","P310","P311","P312","P313","P314","P315","P316","P317","P318","P319","P32","P320","P321","P322","P323","P324","P325","P326","P327","P32768","P328","P329","P33","P330","P331","P332","P333","P334","P335","P33554432","P336","P337","P338","P339","P34","P340","P341","P342","P343","P34359738368","P344","P345","P346","P347","P348","P349","P35","P350","P351","P35184372088832","P352","P353","P354","P355","P356","P357","P358","P359","P36","P360","P36028797018963968","P361","P362","P363","P364","P365","P366","P367","P368","P369","P37","P370","P371","P372","P373","P374","P375","P376","P377","P378","P379","P38","P380","P381","P382","P383","P384","P385","P386","P387","P388","P389","P39","P390","P391","P392","P393","P394","P395","P396","P397","P398","P399","P4","P40","P400","P401","P402","P403","P404","P405","P406","P407","P408","P409","P4096","P41","P410","P411","P412","P413","P414","P415","P416","P417","P418","P419","P4194304","P42","P420","P421","P422","P423","P424","P425","P426","P427","P428","P429","P4294967296","P43","P430","P431","P432","P433","P434","P435","P436","P437","P438","P439","P4398046511104","P44","P440","P441","P442","P443","P444","P445","P446","P447","P448","P449","P45","P450","P4503599627370496","P451","P452","P453","P454","P455","P456","P457","P458","P459","P46","P460","P461","P4611686018427387904","P462","P463","P464","P465","P466","P467","P468","P469","P47","P470","P471","P472","P473","P474","P475","P476","P477","P478","P479","P48","P480","P481","P482","P483","P484","P485","P486","P487","P488","P489","P49","P490","P491","P492","P493","P494","P495","P496","P497","P498","P499","P5","P50","P500","P501","P502","P503","P504","P505","P506","P507","P508","P509","P51","P510","P511","P512","P513","P514","P515","P516","P517","P518","P519","P52","P520","P521","P522","P523","P524","P524288","P525","P526","P527","P528","P529","P53","P530","P531","P532","P533","P534","P535","P536","P536870912","P537","P538","P539","P54","P540","P541","P542","P543","P544","P545","P546","P547","P548","P549","P549755813888","P55","P550","P551","P552","P553","P554","P555","P556","P557","P558","P559","P56","P560","P561","P562","P562949953421312","P563","P564","P565","P566","P567","P568","P569","P57","P570","P571","P572","P573","P574","P575","P576","P576460752303423488","P577","P578","P579","P58","P580","P581","P582","P583","P584","P585","P586","P587","P588","P589","P59","P590","P591","P592","P593","P594","P595","P596","P597","P598","P599","P6","P60","P600","P601","P602","P603","P604","P605","P606","P607","P608","P609","P61","P610","P611","P612","P613","P614","P615","P616","P617","P618","P619","P62","P620","P621","P622","P623","P624","P625","P626","P627","P628","P629","P63","P630","P631","P632","P633","P634","P635","P636","P637","P638","P639","P64","P640","P641","P642","P643","P644","P645","P646","P647","P648","P649","P65","P650","P651","P652","P653","P654","P655","P65536","P656","P657","P658","P659","P66","P660","P661","P662","P663","P664","P665","P666","P667","P668","P669","P67","P670","P671","P67108864","P672","P673","P674","P675","P676","P677","P678","P679","P68","P680","P681","P682","P683","P684","P685","P686","P687","P68719476736","P688","P689","P69","P690","P691","P692","P693","P694","P695","P696","P697","P698","P699","P7","P70","P700","P701","P702","P703","P70368744177664","P704","P705","P706","P707","P708","P709","P71","P710","P711","P712","P713","P714","P715","P716","P717","P718","P719","P72","P720","P72057594037927936","P721","P722","P723","P724","P725","P726","P727","P728","P729","P73","P730","P731","P732","P733","P734","P735","P736","P737","P738","P739","P74","P740","P741","P742","P743","P744","P745","P746","P747","P748","P749","P75","P750","P751","P752","P753","P754","P755","P756","P757","P758","P759","P76","P760","P761","P762","P763","P764","P765","P766","P767","P768","P769","P77","P770","P771","P772","P773","P774","P775","P776","P777","P778","P779","P78","P780","P781","P782","P783","P784","P785","P786","P787","P788","P789","P79","P790","P791","P792","P793","P794","P795","P796","P797","P798","P799","P8","P80","P800","P801","P802","P803","P804","P805","P806","P807","P808","P809","P81","P810","P811","P812","P813","P814","P815","P816","P817","P818","P819","P8192","P82","P820","P821","P822","P823","P824","P825","P826","P827","P828","P829","P83","P830","P831","P832","P833","P834","P835","P836","P837","P838","P8388608","P839","P84","P840","P841","P842","P843","P844","P845","P846","P847","P848","P849","P85","P850","P851","P852","P853","P854","P855","P856","P857","P858","P8589934592","P859","P86","P860","P861","P862","P863","P864","P865","P866","P867","P868","P869","P87","P870","P871","P872","P873","P874","P875","P876","P877","P878","P879","P8796093022208","P88","P880","P881","P882","P883","P884","P885","P886","P887","P888","P889","P89","P890","P891","P892","P893","P894","P895","P896","P897","P898","P899","P9","P90","P900","P9007199254740992","P901","P902","P903","P904","P905","P906","P907","P908","P909","P91","P910","P911","P912","P913","P914","P915","P916","P917","P918","P919","P92","P920","P921","P922","P923","P924","P925","P926","P927","P928","P929","P93","P930","P931","P932","P933","P934","P935","P936","P937","P938","P939","P94","P940","P941","P942","P943","P944","P945","P946","P947","P948","P949","P95","P950","P951","P952","P953","P954","P955","P956","P957","P958","P959","P96","P960","P961","P962","P963","P964","P965","P966","P967","P968","P969","P97","P970","P971","P972","P973","P974","P975","P976","P977","P978","P979","P98","P980","P981","P982","P983","P984","P985","P986","P987","P988","P989","P99","P990","P991","P992","P993","P994","P995","P996","P997","P998","P999","True","U0","U1","U10","U100","U1000","U10000","U100000","U1000000","U10000000","U100000000","U1000000000","U10000000000","U100000000000","U1000000000000","U10000000000000","U100000000000000","U1000000000000000","U10000000000000000","U100000000000000000","U1000000000000000000","U10000000000000000000","U1001","U1002","U1003","U1004","U1005","U1006","U1007","U1008","U1009","U101","U1010","U1011","U1012","U1013","U1014","U1015","U1016","U1017","U1018","U1019","U102","U1020","U1021","U1022","U1023","U1024","U103","U104","U1048576","U105","U106","U107","U1073741824","U108","U109","U1099511627776","U11","U110","U111","U112","U1125899906842624","U113","U114","U115","U1152921504606846976","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U128","U129","U13","U130","U131","U131072","U132","U133","U134","U134217728","U135","U136","U137","U137438953472","U138","U139","U14","U140","U140737488355328","U141","U142","U143","U144","U144115188075855872","U145","U146","U147","U148","U149","U15","U150","U151","U152","U153","U154","U155","U156","U157","U158","U159","U16","U160","U161","U162","U163","U16384","U164","U165","U166","U167","U16777216","U168","U169","U17","U170","U171","U17179869184","U172","U173","U174","U175","U17592186044416","U176","U177","U178","U179","U18","U180","U18014398509481984","U181","U182","U183","U184","U185","U186","U187","U188","U189","U19","U190","U191","U192","U193","U194","U195","U196","U197","U198","U199","U2","U20","U200","U201","U202","U203","U204","U2048","U205","U206","U207","U208","U209","U2097152","U21","U210","U211","U212","U213","U214","U2147483648","U215","U216","U217","U218","U219","U2199023255552","U22","U220","U221","U222","U223","U224","U225","U2251799813685248","U226","U227","U228","U229","U23","U230","U2305843009213693952","U231","U232","U233","U234","U235","U236","U237","U238","U239","U24","U240","U241","U242","U243","U244","U245","U246","U247","U248","U249","U25","U250","U251","U252","U253","U254","U255","U256","U257","U258","U259","U26","U260","U261","U262","U262144","U263","U264","U265","U266","U267","U268","U268435456","U269","U27","U270","U271","U272","U273","U274","U274877906944","U275","U276","U277","U278","U279","U28","U280","U281","U281474976710656","U282","U283","U284","U285","U286","U287","U288","U288230376151711744","U289","U29","U290","U291","U292","U293","U294","U295","U296","U297","U298","U299","U3","U30","U300","U301","U302","U303","U304","U305","U306","U307","U308","U309","U31","U310","U311","U312","U313","U314","U315","U316","U317","U318","U319","U32","U320","U321","U322","U323","U324","U325","U326","U327","U32768","U328","U329","U33","U330","U331","U332","U333","U334","U335","U33554432","U336","U337","U338","U339","U34","U340","U341","U342","U343","U34359738368","U344","U345","U346","U347","U348","U349","U35","U350","U351","U35184372088832","U352","U353","U354","U355","U356","U357","U358","U359","U36","U360","U36028797018963968","U361","U362","U363","U364","U365","U366","U367","U368","U369","U37","U370","U371","U372","U373","U374","U375","U376","U377","U378","U379","U38","U380","U381","U382","U383","U384","U385","U386","U387","U388","U389","U39","U390","U391","U392","U393","U394","U395","U396","U397","U398","U399","U4","U40","U400","U401","U402","U403","U404","U405","U406","U407","U408","U409","U4096","U41","U410","U411","U412","U413","U414","U415","U416","U417","U418","U419","U4194304","U42","U420","U421","U422","U423","U424","U425","U426","U427","U428","U429","U4294967296","U43","U430","U431","U432","U433","U434","U435","U436","U437","U438","U439","U4398046511104","U44","U440","U441","U442","U443","U444","U445","U446","U447","U448","U449","U45","U450","U4503599627370496","U451","U452","U453","U454","U455","U456","U457","U458","U459","U46","U460","U461","U4611686018427387904","U462","U463","U464","U465","U466","U467","U468","U469","U47","U470","U471","U472","U473","U474","U475","U476","U477","U478","U479","U48","U480","U481","U482","U483","U484","U485","U486","U487","U488","U489","U49","U490","U491","U492","U493","U494","U495","U496","U497","U498","U499","U5","U50","U500","U501","U502","U503","U504","U505","U506","U507","U508","U509","U51","U510","U511","U512","U513","U514","U515","U516","U517","U518","U519","U52","U520","U521","U522","U523","U524","U524288","U525","U526","U527","U528","U529","U53","U530","U531","U532","U533","U534","U535","U536","U536870912","U537","U538","U539","U54","U540","U541","U542","U543","U544","U545","U546","U547","U548","U549","U549755813888","U55","U550","U551","U552","U553","U554","U555","U556","U557","U558","U559","U56","U560","U561","U562","U562949953421312","U563","U564","U565","U566","U567","U568","U569","U57","U570","U571","U572","U573","U574","U575","U576","U576460752303423488","U577","U578","U579","U58","U580","U581","U582","U583","U584","U585","U586","U587","U588","U589","U59","U590","U591","U592","U593","U594","U595","U596","U597","U598","U599","U6","U60","U600","U601","U602","U603","U604","U605","U606","U607","U608","U609","U61","U610","U611","U612","U613","U614","U615","U616","U617","U618","U619","U62","U620","U621","U622","U623","U624","U625","U626","U627","U628","U629","U63","U630","U631","U632","U633","U634","U635","U636","U637","U638","U639","U64","U640","U641","U642","U643","U644","U645","U646","U647","U648","U649","U65","U650","U651","U652","U653","U654","U655","U65536","U656","U657","U658","U659","U66","U660","U661","U662","U663","U664","U665","U666","U667","U668","U669","U67","U670","U671","U67108864","U672","U673","U674","U675","U676","U677","U678","U679","U68","U680","U681","U682","U683","U684","U685","U686","U687","U68719476736","U688","U689","U69","U690","U691","U692","U693","U694","U695","U696","U697","U698","U699","U7","U70","U700","U701","U702","U703","U70368744177664","U704","U705","U706","U707","U708","U709","U71","U710","U711","U712","U713","U714","U715","U716","U717","U718","U719","U72","U720","U72057594037927936","U721","U722","U723","U724","U725","U726","U727","U728","U729","U73","U730","U731","U732","U733","U734","U735","U736","U737","U738","U739","U74","U740","U741","U742","U743","U744","U745","U746","U747","U748","U749","U75","U750","U751","U752","U753","U754","U755","U756","U757","U758","U759","U76","U760","U761","U762","U763","U764","U765","U766","U767","U768","U769","U77","U770","U771","U772","U773","U774","U775","U776","U777","U778","U779","U78","U780","U781","U782","U783","U784","U785","U786","U787","U788","U789","U79","U790","U791","U792","U793","U794","U795","U796","U797","U798","U799","U8","U80","U800","U801","U802","U803","U804","U805","U806","U807","U808","U809","U81","U810","U811","U812","U813","U814","U815","U816","U817","U818","U819","U8192","U82","U820","U821","U822","U823","U824","U825","U826","U827","U828","U829","U83","U830","U831","U832","U833","U834","U835","U836","U837","U838","U8388608","U839","U84","U840","U841","U842","U843","U844","U845","U846","U847","U848","U849","U85","U850","U851","U852","U853","U854","U855","U856","U857","U858","U8589934592","U859","U86","U860","U861","U862","U863","U864","U865","U866","U867","U868","U869","U87","U870","U871","U872","U873","U874","U875","U876","U877","U878","U879","U8796093022208","U88","U880","U881","U882","U883","U884","U885","U886","U887","U888","U889","U89","U890","U891","U892","U893","U894","U895","U896","U897","U898","U899","U9","U90","U900","U9007199254740992","U901","U902","U903","U904","U905","U906","U907","U908","U909","U91","U910","U911","U912","U913","U914","U915","U916","U917","U918","U919","U92","U920","U921","U922","U9223372036854775808","U923","U924","U925","U926","U927","U928","U929","U93","U930","U931","U932","U933","U934","U935","U936","U937","U938","U939","U94","U940","U941","U942","U943","U944","U945","U946","U947","U948","U949","U95","U950","U951","U952","U953","U954","U955","U956","U957","U958","U959","U96","U960","U961","U962","U963","U964","U965","U966","U967","U968","U969","U97","U970","U971","U972","U973","U974","U975","U976","U977","U978","U979","U98","U980","U981","U982","U983","U984","U985","U986","U987","U988","U989","U99","U990","U991","U992","U993","U994","U995","U996","U997","U998","U999","array","assert_type","assert_type_eq","bit","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","cmp","consts","default","default","default","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","int","into","into","into","marker_traits","op","operator_aliases","partial_cmp","partial_cmp","partial_cmp","powi","powi","powi","tarr","to_ordering","to_ordering","to_ordering","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_operators","uint","ATerm","TArr","add","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","div","div","eq","eq","fmt","fmt","from","from","hash","hash","into","into","len","len","mul","mul","ne","neg","neg","partial_cmp","partial_cmp","partial_div","partial_div","rem","rem","sub","sub","try_from","try_from","try_into","try_into","type_id","type_id","B0","B1","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","compare","compare","compare","compare","default","default","eq","eq","fmt","fmt","from","from","hash","hash","into","into","max","max","max","max","min","min","min","min","new","new","not","not","partial_cmp","partial_cmp","to_bool","to_bool","to_u8","to_u8","try_from","try_from","try_into","try_into","type_id","type_id","False","N1","N10","N100","N1000","N10000","N100000","N1000000","N10000000","N100000000","N1000000000","N10000000000","N100000000000","N1000000000000","N10000000000000","N100000000000000","N1000000000000000","N10000000000000000","N100000000000000000","N1000000000000000000","N1001","N1002","N1003","N1004","N1005","N1006","N1007","N1008","N1009","N101","N1010","N1011","N1012","N1013","N1014","N1015","N1016","N1017","N1018","N1019","N102","N1020","N1021","N1022","N1023","N1024","N103","N104","N1048576","N105","N106","N107","N1073741824","N108","N109","N1099511627776","N11","N110","N111","N112","N1125899906842624","N113","N114","N115","N1152921504606846976","N116","N117","N118","N119","N12","N120","N121","N122","N123","N124","N125","N126","N127","N128","N129","N13","N130","N131","N131072","N132","N133","N134","N134217728","N135","N136","N137","N137438953472","N138","N139","N14","N140","N140737488355328","N141","N142","N143","N144","N144115188075855872","N145","N146","N147","N148","N149","N15","N150","N151","N152","N153","N154","N155","N156","N157","N158","N159","N16","N160","N161","N162","N163","N16384","N164","N165","N166","N167","N16777216","N168","N169","N17","N170","N171","N17179869184","N172","N173","N174","N175","N17592186044416","N176","N177","N178","N179","N18","N180","N18014398509481984","N181","N182","N183","N184","N185","N186","N187","N188","N189","N19","N190","N191","N192","N193","N194","N195","N196","N197","N198","N199","N2","N20","N200","N201","N202","N203","N204","N2048","N205","N206","N207","N208","N209","N2097152","N21","N210","N211","N212","N213","N214","N2147483648","N215","N216","N217","N218","N219","N2199023255552","N22","N220","N221","N222","N223","N224","N225","N2251799813685248","N226","N227","N228","N229","N23","N230","N2305843009213693952","N231","N232","N233","N234","N235","N236","N237","N238","N239","N24","N240","N241","N242","N243","N244","N245","N246","N247","N248","N249","N25","N250","N251","N252","N253","N254","N255","N256","N257","N258","N259","N26","N260","N261","N262","N262144","N263","N264","N265","N266","N267","N268","N268435456","N269","N27","N270","N271","N272","N273","N274","N274877906944","N275","N276","N277","N278","N279","N28","N280","N281","N281474976710656","N282","N283","N284","N285","N286","N287","N288","N288230376151711744","N289","N29","N290","N291","N292","N293","N294","N295","N296","N297","N298","N299","N3","N30","N300","N301","N302","N303","N304","N305","N306","N307","N308","N309","N31","N310","N311","N312","N313","N314","N315","N316","N317","N318","N319","N32","N320","N321","N322","N323","N324","N325","N326","N327","N32768","N328","N329","N33","N330","N331","N332","N333","N334","N335","N33554432","N336","N337","N338","N339","N34","N340","N341","N342","N343","N34359738368","N344","N345","N346","N347","N348","N349","N35","N350","N351","N35184372088832","N352","N353","N354","N355","N356","N357","N358","N359","N36","N360","N36028797018963968","N361","N362","N363","N364","N365","N366","N367","N368","N369","N37","N370","N371","N372","N373","N374","N375","N376","N377","N378","N379","N38","N380","N381","N382","N383","N384","N385","N386","N387","N388","N389","N39","N390","N391","N392","N393","N394","N395","N396","N397","N398","N399","N4","N40","N400","N401","N402","N403","N404","N405","N406","N407","N408","N409","N4096","N41","N410","N411","N412","N413","N414","N415","N416","N417","N418","N419","N4194304","N42","N420","N421","N422","N423","N424","N425","N426","N427","N428","N429","N4294967296","N43","N430","N431","N432","N433","N434","N435","N436","N437","N438","N439","N4398046511104","N44","N440","N441","N442","N443","N444","N445","N446","N447","N448","N449","N45","N450","N4503599627370496","N451","N452","N453","N454","N455","N456","N457","N458","N459","N46","N460","N461","N4611686018427387904","N462","N463","N464","N465","N466","N467","N468","N469","N47","N470","N471","N472","N473","N474","N475","N476","N477","N478","N479","N48","N480","N481","N482","N483","N484","N485","N486","N487","N488","N489","N49","N490","N491","N492","N493","N494","N495","N496","N497","N498","N499","N5","N50","N500","N501","N502","N503","N504","N505","N506","N507","N508","N509","N51","N510","N511","N512","N513","N514","N515","N516","N517","N518","N519","N52","N520","N521","N522","N523","N524","N524288","N525","N526","N527","N528","N529","N53","N530","N531","N532","N533","N534","N535","N536","N536870912","N537","N538","N539","N54","N540","N541","N542","N543","N544","N545","N546","N547","N548","N549","N549755813888","N55","N550","N551","N552","N553","N554","N555","N556","N557","N558","N559","N56","N560","N561","N562","N562949953421312","N563","N564","N565","N566","N567","N568","N569","N57","N570","N571","N572","N573","N574","N575","N576","N576460752303423488","N577","N578","N579","N58","N580","N581","N582","N583","N584","N585","N586","N587","N588","N589","N59","N590","N591","N592","N593","N594","N595","N596","N597","N598","N599","N6","N60","N600","N601","N602","N603","N604","N605","N606","N607","N608","N609","N61","N610","N611","N612","N613","N614","N615","N616","N617","N618","N619","N62","N620","N621","N622","N623","N624","N625","N626","N627","N628","N629","N63","N630","N631","N632","N633","N634","N635","N636","N637","N638","N639","N64","N640","N641","N642","N643","N644","N645","N646","N647","N648","N649","N65","N650","N651","N652","N653","N654","N655","N65536","N656","N657","N658","N659","N66","N660","N661","N662","N663","N664","N665","N666","N667","N668","N669","N67","N670","N671","N67108864","N672","N673","N674","N675","N676","N677","N678","N679","N68","N680","N681","N682","N683","N684","N685","N686","N687","N68719476736","N688","N689","N69","N690","N691","N692","N693","N694","N695","N696","N697","N698","N699","N7","N70","N700","N701","N702","N703","N70368744177664","N704","N705","N706","N707","N708","N709","N71","N710","N711","N712","N713","N714","N715","N716","N717","N718","N719","N72","N720","N72057594037927936","N721","N722","N723","N724","N725","N726","N727","N728","N729","N73","N730","N731","N732","N733","N734","N735","N736","N737","N738","N739","N74","N740","N741","N742","N743","N744","N745","N746","N747","N748","N749","N75","N750","N751","N752","N753","N754","N755","N756","N757","N758","N759","N76","N760","N761","N762","N763","N764","N765","N766","N767","N768","N769","N77","N770","N771","N772","N773","N774","N775","N776","N777","N778","N779","N78","N780","N781","N782","N783","N784","N785","N786","N787","N788","N789","N79","N790","N791","N792","N793","N794","N795","N796","N797","N798","N799","N8","N80","N800","N801","N802","N803","N804","N805","N806","N807","N808","N809","N81","N810","N811","N812","N813","N814","N815","N816","N817","N818","N819","N8192","N82","N820","N821","N822","N823","N824","N825","N826","N827","N828","N829","N83","N830","N831","N832","N833","N834","N835","N836","N837","N838","N8388608","N839","N84","N840","N841","N842","N843","N844","N845","N846","N847","N848","N849","N85","N850","N851","N852","N853","N854","N855","N856","N857","N858","N8589934592","N859","N86","N860","N861","N862","N863","N864","N865","N866","N867","N868","N869","N87","N870","N871","N872","N873","N874","N875","N876","N877","N878","N879","N8796093022208","N88","N880","N881","N882","N883","N884","N885","N886","N887","N888","N889","N89","N890","N891","N892","N893","N894","N895","N896","N897","N898","N899","N9","N90","N900","N9007199254740992","N901","N902","N903","N904","N905","N906","N907","N908","N909","N91","N910","N911","N912","N913","N914","N915","N916","N917","N918","N919","N92","N920","N921","N922","N923","N924","N925","N926","N927","N928","N929","N93","N930","N931","N932","N933","N934","N935","N936","N937","N938","N939","N94","N940","N941","N942","N943","N944","N945","N946","N947","N948","N949","N95","N950","N951","N952","N953","N954","N955","N956","N957","N958","N959","N96","N960","N961","N962","N963","N964","N965","N966","N967","N968","N969","N97","N970","N971","N972","N973","N974","N975","N976","N977","N978","N979","N98","N980","N981","N982","N983","N984","N985","N986","N987","N988","N989","N99","N990","N991","N992","N993","N994","N995","N996","N997","N998","N999","P1","P10","P100","P1000","P10000","P100000","P1000000","P10000000","P100000000","P1000000000","P10000000000","P100000000000","P1000000000000","P10000000000000","P100000000000000","P1000000000000000","P10000000000000000","P100000000000000000","P1000000000000000000","P1001","P1002","P1003","P1004","P1005","P1006","P1007","P1008","P1009","P101","P1010","P1011","P1012","P1013","P1014","P1015","P1016","P1017","P1018","P1019","P102","P1020","P1021","P1022","P1023","P1024","P103","P104","P1048576","P105","P106","P107","P1073741824","P108","P109","P1099511627776","P11","P110","P111","P112","P1125899906842624","P113","P114","P115","P1152921504606846976","P116","P117","P118","P119","P12","P120","P121","P122","P123","P124","P125","P126","P127","P128","P129","P13","P130","P131","P131072","P132","P133","P134","P134217728","P135","P136","P137","P137438953472","P138","P139","P14","P140","P140737488355328","P141","P142","P143","P144","P144115188075855872","P145","P146","P147","P148","P149","P15","P150","P151","P152","P153","P154","P155","P156","P157","P158","P159","P16","P160","P161","P162","P163","P16384","P164","P165","P166","P167","P16777216","P168","P169","P17","P170","P171","P17179869184","P172","P173","P174","P175","P17592186044416","P176","P177","P178","P179","P18","P180","P18014398509481984","P181","P182","P183","P184","P185","P186","P187","P188","P189","P19","P190","P191","P192","P193","P194","P195","P196","P197","P198","P199","P2","P20","P200","P201","P202","P203","P204","P2048","P205","P206","P207","P208","P209","P2097152","P21","P210","P211","P212","P213","P214","P2147483648","P215","P216","P217","P218","P219","P2199023255552","P22","P220","P221","P222","P223","P224","P225","P2251799813685248","P226","P227","P228","P229","P23","P230","P2305843009213693952","P231","P232","P233","P234","P235","P236","P237","P238","P239","P24","P240","P241","P242","P243","P244","P245","P246","P247","P248","P249","P25","P250","P251","P252","P253","P254","P255","P256","P257","P258","P259","P26","P260","P261","P262","P262144","P263","P264","P265","P266","P267","P268","P268435456","P269","P27","P270","P271","P272","P273","P274","P274877906944","P275","P276","P277","P278","P279","P28","P280","P281","P281474976710656","P282","P283","P284","P285","P286","P287","P288","P288230376151711744","P289","P29","P290","P291","P292","P293","P294","P295","P296","P297","P298","P299","P3","P30","P300","P301","P302","P303","P304","P305","P306","P307","P308","P309","P31","P310","P311","P312","P313","P314","P315","P316","P317","P318","P319","P32","P320","P321","P322","P323","P324","P325","P326","P327","P32768","P328","P329","P33","P330","P331","P332","P333","P334","P335","P33554432","P336","P337","P338","P339","P34","P340","P341","P342","P343","P34359738368","P344","P345","P346","P347","P348","P349","P35","P350","P351","P35184372088832","P352","P353","P354","P355","P356","P357","P358","P359","P36","P360","P36028797018963968","P361","P362","P363","P364","P365","P366","P367","P368","P369","P37","P370","P371","P372","P373","P374","P375","P376","P377","P378","P379","P38","P380","P381","P382","P383","P384","P385","P386","P387","P388","P389","P39","P390","P391","P392","P393","P394","P395","P396","P397","P398","P399","P4","P40","P400","P401","P402","P403","P404","P405","P406","P407","P408","P409","P4096","P41","P410","P411","P412","P413","P414","P415","P416","P417","P418","P419","P4194304","P42","P420","P421","P422","P423","P424","P425","P426","P427","P428","P429","P4294967296","P43","P430","P431","P432","P433","P434","P435","P436","P437","P438","P439","P4398046511104","P44","P440","P441","P442","P443","P444","P445","P446","P447","P448","P449","P45","P450","P4503599627370496","P451","P452","P453","P454","P455","P456","P457","P458","P459","P46","P460","P461","P4611686018427387904","P462","P463","P464","P465","P466","P467","P468","P469","P47","P470","P471","P472","P473","P474","P475","P476","P477","P478","P479","P48","P480","P481","P482","P483","P484","P485","P486","P487","P488","P489","P49","P490","P491","P492","P493","P494","P495","P496","P497","P498","P499","P5","P50","P500","P501","P502","P503","P504","P505","P506","P507","P508","P509","P51","P510","P511","P512","P513","P514","P515","P516","P517","P518","P519","P52","P520","P521","P522","P523","P524","P524288","P525","P526","P527","P528","P529","P53","P530","P531","P532","P533","P534","P535","P536","P536870912","P537","P538","P539","P54","P540","P541","P542","P543","P544","P545","P546","P547","P548","P549","P549755813888","P55","P550","P551","P552","P553","P554","P555","P556","P557","P558","P559","P56","P560","P561","P562","P562949953421312","P563","P564","P565","P566","P567","P568","P569","P57","P570","P571","P572","P573","P574","P575","P576","P576460752303423488","P577","P578","P579","P58","P580","P581","P582","P583","P584","P585","P586","P587","P588","P589","P59","P590","P591","P592","P593","P594","P595","P596","P597","P598","P599","P6","P60","P600","P601","P602","P603","P604","P605","P606","P607","P608","P609","P61","P610","P611","P612","P613","P614","P615","P616","P617","P618","P619","P62","P620","P621","P622","P623","P624","P625","P626","P627","P628","P629","P63","P630","P631","P632","P633","P634","P635","P636","P637","P638","P639","P64","P640","P641","P642","P643","P644","P645","P646","P647","P648","P649","P65","P650","P651","P652","P653","P654","P655","P65536","P656","P657","P658","P659","P66","P660","P661","P662","P663","P664","P665","P666","P667","P668","P669","P67","P670","P671","P67108864","P672","P673","P674","P675","P676","P677","P678","P679","P68","P680","P681","P682","P683","P684","P685","P686","P687","P68719476736","P688","P689","P69","P690","P691","P692","P693","P694","P695","P696","P697","P698","P699","P7","P70","P700","P701","P702","P703","P70368744177664","P704","P705","P706","P707","P708","P709","P71","P710","P711","P712","P713","P714","P715","P716","P717","P718","P719","P72","P720","P72057594037927936","P721","P722","P723","P724","P725","P726","P727","P728","P729","P73","P730","P731","P732","P733","P734","P735","P736","P737","P738","P739","P74","P740","P741","P742","P743","P744","P745","P746","P747","P748","P749","P75","P750","P751","P752","P753","P754","P755","P756","P757","P758","P759","P76","P760","P761","P762","P763","P764","P765","P766","P767","P768","P769","P77","P770","P771","P772","P773","P774","P775","P776","P777","P778","P779","P78","P780","P781","P782","P783","P784","P785","P786","P787","P788","P789","P79","P790","P791","P792","P793","P794","P795","P796","P797","P798","P799","P8","P80","P800","P801","P802","P803","P804","P805","P806","P807","P808","P809","P81","P810","P811","P812","P813","P814","P815","P816","P817","P818","P819","P8192","P82","P820","P821","P822","P823","P824","P825","P826","P827","P828","P829","P83","P830","P831","P832","P833","P834","P835","P836","P837","P838","P8388608","P839","P84","P840","P841","P842","P843","P844","P845","P846","P847","P848","P849","P85","P850","P851","P852","P853","P854","P855","P856","P857","P858","P8589934592","P859","P86","P860","P861","P862","P863","P864","P865","P866","P867","P868","P869","P87","P870","P871","P872","P873","P874","P875","P876","P877","P878","P879","P8796093022208","P88","P880","P881","P882","P883","P884","P885","P886","P887","P888","P889","P89","P890","P891","P892","P893","P894","P895","P896","P897","P898","P899","P9","P90","P900","P9007199254740992","P901","P902","P903","P904","P905","P906","P907","P908","P909","P91","P910","P911","P912","P913","P914","P915","P916","P917","P918","P919","P92","P920","P921","P922","P923","P924","P925","P926","P927","P928","P929","P93","P930","P931","P932","P933","P934","P935","P936","P937","P938","P939","P94","P940","P941","P942","P943","P944","P945","P946","P947","P948","P949","P95","P950","P951","P952","P953","P954","P955","P956","P957","P958","P959","P96","P960","P961","P962","P963","P964","P965","P966","P967","P968","P969","P97","P970","P971","P972","P973","P974","P975","P976","P977","P978","P979","P98","P980","P981","P982","P983","P984","P985","P986","P987","P988","P989","P99","P990","P991","P992","P993","P994","P995","P996","P997","P998","P999","True","U0","U1","U10","U100","U1000","U10000","U100000","U1000000","U10000000","U100000000","U1000000000","U10000000000","U100000000000","U1000000000000","U10000000000000","U100000000000000","U1000000000000000","U10000000000000000","U100000000000000000","U1000000000000000000","U10000000000000000000","U1001","U1002","U1003","U1004","U1005","U1006","U1007","U1008","U1009","U101","U1010","U1011","U1012","U1013","U1014","U1015","U1016","U1017","U1018","U1019","U102","U1020","U1021","U1022","U1023","U1024","U103","U104","U1048576","U105","U106","U107","U1073741824","U108","U109","U1099511627776","U11","U110","U111","U112","U1125899906842624","U113","U114","U115","U1152921504606846976","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U128","U129","U13","U130","U131","U131072","U132","U133","U134","U134217728","U135","U136","U137","U137438953472","U138","U139","U14","U140","U140737488355328","U141","U142","U143","U144","U144115188075855872","U145","U146","U147","U148","U149","U15","U150","U151","U152","U153","U154","U155","U156","U157","U158","U159","U16","U160","U161","U162","U163","U16384","U164","U165","U166","U167","U16777216","U168","U169","U17","U170","U171","U17179869184","U172","U173","U174","U175","U17592186044416","U176","U177","U178","U179","U18","U180","U18014398509481984","U181","U182","U183","U184","U185","U186","U187","U188","U189","U19","U190","U191","U192","U193","U194","U195","U196","U197","U198","U199","U2","U20","U200","U201","U202","U203","U204","U2048","U205","U206","U207","U208","U209","U2097152","U21","U210","U211","U212","U213","U214","U2147483648","U215","U216","U217","U218","U219","U2199023255552","U22","U220","U221","U222","U223","U224","U225","U2251799813685248","U226","U227","U228","U229","U23","U230","U2305843009213693952","U231","U232","U233","U234","U235","U236","U237","U238","U239","U24","U240","U241","U242","U243","U244","U245","U246","U247","U248","U249","U25","U250","U251","U252","U253","U254","U255","U256","U257","U258","U259","U26","U260","U261","U262","U262144","U263","U264","U265","U266","U267","U268","U268435456","U269","U27","U270","U271","U272","U273","U274","U274877906944","U275","U276","U277","U278","U279","U28","U280","U281","U281474976710656","U282","U283","U284","U285","U286","U287","U288","U288230376151711744","U289","U29","U290","U291","U292","U293","U294","U295","U296","U297","U298","U299","U3","U30","U300","U301","U302","U303","U304","U305","U306","U307","U308","U309","U31","U310","U311","U312","U313","U314","U315","U316","U317","U318","U319","U32","U320","U321","U322","U323","U324","U325","U326","U327","U32768","U328","U329","U33","U330","U331","U332","U333","U334","U335","U33554432","U336","U337","U338","U339","U34","U340","U341","U342","U343","U34359738368","U344","U345","U346","U347","U348","U349","U35","U350","U351","U35184372088832","U352","U353","U354","U355","U356","U357","U358","U359","U36","U360","U36028797018963968","U361","U362","U363","U364","U365","U366","U367","U368","U369","U37","U370","U371","U372","U373","U374","U375","U376","U377","U378","U379","U38","U380","U381","U382","U383","U384","U385","U386","U387","U388","U389","U39","U390","U391","U392","U393","U394","U395","U396","U397","U398","U399","U4","U40","U400","U401","U402","U403","U404","U405","U406","U407","U408","U409","U4096","U41","U410","U411","U412","U413","U414","U415","U416","U417","U418","U419","U4194304","U42","U420","U421","U422","U423","U424","U425","U426","U427","U428","U429","U4294967296","U43","U430","U431","U432","U433","U434","U435","U436","U437","U438","U439","U4398046511104","U44","U440","U441","U442","U443","U444","U445","U446","U447","U448","U449","U45","U450","U4503599627370496","U451","U452","U453","U454","U455","U456","U457","U458","U459","U46","U460","U461","U4611686018427387904","U462","U463","U464","U465","U466","U467","U468","U469","U47","U470","U471","U472","U473","U474","U475","U476","U477","U478","U479","U48","U480","U481","U482","U483","U484","U485","U486","U487","U488","U489","U49","U490","U491","U492","U493","U494","U495","U496","U497","U498","U499","U5","U50","U500","U501","U502","U503","U504","U505","U506","U507","U508","U509","U51","U510","U511","U512","U513","U514","U515","U516","U517","U518","U519","U52","U520","U521","U522","U523","U524","U524288","U525","U526","U527","U528","U529","U53","U530","U531","U532","U533","U534","U535","U536","U536870912","U537","U538","U539","U54","U540","U541","U542","U543","U544","U545","U546","U547","U548","U549","U549755813888","U55","U550","U551","U552","U553","U554","U555","U556","U557","U558","U559","U56","U560","U561","U562","U562949953421312","U563","U564","U565","U566","U567","U568","U569","U57","U570","U571","U572","U573","U574","U575","U576","U576460752303423488","U577","U578","U579","U58","U580","U581","U582","U583","U584","U585","U586","U587","U588","U589","U59","U590","U591","U592","U593","U594","U595","U596","U597","U598","U599","U6","U60","U600","U601","U602","U603","U604","U605","U606","U607","U608","U609","U61","U610","U611","U612","U613","U614","U615","U616","U617","U618","U619","U62","U620","U621","U622","U623","U624","U625","U626","U627","U628","U629","U63","U630","U631","U632","U633","U634","U635","U636","U637","U638","U639","U64","U640","U641","U642","U643","U644","U645","U646","U647","U648","U649","U65","U650","U651","U652","U653","U654","U655","U65536","U656","U657","U658","U659","U66","U660","U661","U662","U663","U664","U665","U666","U667","U668","U669","U67","U670","U671","U67108864","U672","U673","U674","U675","U676","U677","U678","U679","U68","U680","U681","U682","U683","U684","U685","U686","U687","U68719476736","U688","U689","U69","U690","U691","U692","U693","U694","U695","U696","U697","U698","U699","U7","U70","U700","U701","U702","U703","U70368744177664","U704","U705","U706","U707","U708","U709","U71","U710","U711","U712","U713","U714","U715","U716","U717","U718","U719","U72","U720","U72057594037927936","U721","U722","U723","U724","U725","U726","U727","U728","U729","U73","U730","U731","U732","U733","U734","U735","U736","U737","U738","U739","U74","U740","U741","U742","U743","U744","U745","U746","U747","U748","U749","U75","U750","U751","U752","U753","U754","U755","U756","U757","U758","U759","U76","U760","U761","U762","U763","U764","U765","U766","U767","U768","U769","U77","U770","U771","U772","U773","U774","U775","U776","U777","U778","U779","U78","U780","U781","U782","U783","U784","U785","U786","U787","U788","U789","U79","U790","U791","U792","U793","U794","U795","U796","U797","U798","U799","U8","U80","U800","U801","U802","U803","U804","U805","U806","U807","U808","U809","U81","U810","U811","U812","U813","U814","U815","U816","U817","U818","U819","U8192","U82","U820","U821","U822","U823","U824","U825","U826","U827","U828","U829","U83","U830","U831","U832","U833","U834","U835","U836","U837","U838","U8388608","U839","U84","U840","U841","U842","U843","U844","U845","U846","U847","U848","U849","U85","U850","U851","U852","U853","U854","U855","U856","U857","U858","U8589934592","U859","U86","U860","U861","U862","U863","U864","U865","U866","U867","U868","U869","U87","U870","U871","U872","U873","U874","U875","U876","U877","U878","U879","U8796093022208","U88","U880","U881","U882","U883","U884","U885","U886","U887","U888","U889","U89","U890","U891","U892","U893","U894","U895","U896","U897","U898","U899","U9","U90","U900","U9007199254740992","U901","U902","U903","U904","U905","U906","U907","U908","U909","U91","U910","U911","U912","U913","U914","U915","U916","U917","U918","U919","U92","U920","U921","U922","U9223372036854775808","U923","U924","U925","U926","U927","U928","U929","U93","U930","U931","U932","U933","U934","U935","U936","U937","U938","U939","U94","U940","U941","U942","U943","U944","U945","U946","U947","U948","U949","U95","U950","U951","U952","U953","U954","U955","U956","U957","U958","U959","U96","U960","U961","U962","U963","U964","U965","U966","U967","U968","U969","U97","U970","U971","U972","U973","U974","U975","U976","U977","U978","U979","U98","U980","U981","U982","U983","U984","U985","U986","U987","U988","U989","U99","U990","U991","U992","U993","U994","U995","U996","U997","U998","U999","NInt","PInt","Z0","add","add","add","add","add","add","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","compare","compare","compare","compare","compare","compare","compare","compare","compare","default","default","default","div","div","div","div","div","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","max","max","max","max","max","max","max","max","max","min","min","min","min","min","min","min","min","min","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","ne","ne","neg","neg","neg","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_div","partial_div","partial_div","powi","powi","powi","powi","powi","powi","powi","powi","rem","rem","rem","rem","rem","sub","sub","sub","sub","sub","sub","sub","sub","sub","to_i16","to_i16","to_i16","to_i32","to_i32","to_i32","to_i64","to_i64","to_i64","to_i8","to_i8","to_i8","to_isize","to_isize","to_isize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BOOL","Bit","I16","I16","I32","I32","I64","I64","I8","I8","ISIZE","ISIZE","Integer","NonZero","Ord","PowerOfTwo","TypeArray","U16","U32","U64","U8","U8","USIZE","Unsigned","to_bool","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i8","to_i8","to_isize","to_isize","to_ordering","to_u16","to_u32","to_u64","to_u8","to_u8","to_usize","AbsVal","Add1","And","Compare","Cube","Diff","Double","Eq","Exp","Gcf","Gr","GrEq","Le","LeEq","Length","Log2","Maximum","Minimum","Mod","Negate","NotEq","Or","PartialQuot","Prod","Quot","Shleft","Shright","Sqrt","Square","Sub1","Sum","Xor","Abs","Cmp","Gcd","IsEqual","IsGreater","IsGreaterOrEqual","IsLess","IsLessOrEqual","IsNotEqual","Len","Logarithm2","Max","Min","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","PartialDiv","Pow","Same","SquareRoot","is_equal","is_greater","is_greater_or_equal","is_less","is_less_or_equal","is_not_equal","len","max","min","partial_div","powi","GetBit","GetBitOut","Output","Output","SetBit","SetBitOut","UInt","UTerm","add","add","add","add","add","add","add","add","add","add","add","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","compare","compare","compare","compare","compare","compare","compare","default","default","div","div","eq","eq","fmt","fmt","from","from","get_bit","get_bit","get_bit","hash","hash","into","into","len","len","max","max","min","min","mul","mul","mul","mul","mul","mul","mul","mul","ne","new","new","partial_cmp","partial_cmp","partial_div","partial_div","powi","powi","rem","rem","set_bit","set_bit","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","sub","sub","sub","sub","sub","sub","sub","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i8","to_i8","to_isize","to_isize","to_u16","to_u16","to_u32","to_u32","to_u64","to_u64","to_u8","to_u8","to_usize","to_usize","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["typenumtypenum::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::bit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::conststypenum::int","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::marker_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::operator_aliases","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::type_operators","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::uint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A potential output from <code>Cmp</code>, this is the type equivalent …","","A potential output from <code>Cmp</code>, this is the type equivalent …","A potential output from <code>Cmp</code>, this is the type equivalent …type-level array of type-level numbers.","Asserts that a type is <code>True</code>, aka <code>B1</code>.","Asserts that two types are the same.","Type-level bits.","","","","","","","","","","","","","A convenience macro for comparing type numbers. Use <code>op!</code> …","Type aliases for many constants.","","","","","","","","","","","","","","","","Type-level signed integers.","","","","All of the <strong>marker traits</strong> used in typenum.","Convenient type operations.","Aliases for the type operators used in this crate. Their …","","","","","","","Create a new type-level arrray. Only usable on Rust …","","","","","","","","","","","","","Useful <strong>type operators</strong> that are not defined in <code>core::ops</code>.","Type-level unsigned integers.","The terminating type for type arrays.","<code>TArr</code> is a type that acts as an array of types. It is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type-level bit 0.","The type-level bit 1.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this bit.","Instantiates a singleton representing this bitype-level signed integers with negative sign.","Type-level signed integers with positive sign.","The type-level signed integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this strictly …","Instantiates a singleton representing this strictly …","Instantiates a singleton representing the integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <strong>marker trait</strong> for compile time bits.","","","","","","","","","","","The <strong>marker trait</strong> for compile time signed integers.","A <strong>marker trait</strong> to designate that a type is not zero. All …","A <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.","The <strong>marker trait</strong> for type-level numbers which are a power …","The <strong>marker trait</strong> for type-level arrays of type-level …","","","","","","","The <strong>marker trait</strong> for compile time unsigned integers.","","","","","","","","","","","","","","","","","","","Alias for the associated type of <code>Abs</code>: …","Alias to make it easy to add 1: …","Alias for the associated type of <code>BitAnd</code>: …","Alias for the associated type of <code>Cmp</code>: …","Alias to make it easy to cube. …","Alias for the associated type of <code>Sub</code>: …","Alias to make it easy to multiply by 2. …","Alias for the associated type of <code>IsEqual</code>: …","Alias for the associated type of <code>Pow</code>: …","Alias for the associated type of <code>Gcd</code>: …","Alias for the associated type of <code>IsGreater</code>: …","Alias for the associated type of <code>IsGreaterOrEqual</code>: …","Alias for the associated type of <code>IsLess</code>: …","Alias for the associated type of <code>IsLessOrEqual</code>: …","Alias for the associated type of <code>Len</code>: …","Alias for the associated type of <code>Logarithm2</code>: …","Alias for the associated type of <code>Max</code>: …","Alias for the associated type of <code>Min</code>: …","Alias for the associated type of <code>Rem</code>: …","Alias for the associated type of <code>Neg</code>: …","Alias for the associated type of <code>IsNotEqual</code>: …","Alias for the associated type of <code>BitOr</code>: …","Alias for the associated type of <code>PartialDiv</code>: …","Alias for the associated type of <code>Mul</code>: …","Alias for the associated type of <code>Div</code>: …","Alias for the associated type of <code>Shl</code>: …","Alias for the associated type of <code>Shr</code>: …","Alias for the associated type of <code>SquareRoot</code>: …","Alias to make it easy to square. …","Alias to make it easy to subtract 1: …","Alias for the associated type of <code>Add</code>: …","Alias for the associated type of <code>BitXor</code>: …","A <strong>type operator</strong> that returns the absolute value.","A <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a …","A <strong>type operator</strong> that computes the greatest common divisor …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self > Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self >= Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self < Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self <= Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, …","A <strong>type operator</strong> that gives the length of an <code>Array</code> or the …","A <strong>type operator</strong> for taking the integer binary logarithm …","A <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.","A <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.","Should always be <code>Self</code>","The absolute value.","The result of the exponentiation.","The result of the comparison. It should only ever be one …","The length as a type-level unsigned integer.","The type of the result of the division","The type of the minimum of <code>Self</code> and <code>Rhs</code>","The type of the maximum of <code>Self</code> and <code>Rhs</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The result of the integer square root.","The result of the integer binary logarithm.","The greatest common divisor.","Division as a partial function. This <strong>type operator</strong> …","A <strong>type operator</strong> that provides exponentiation by repeated …","A <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>…","A <strong>type operator</strong> for taking the integer square root of <code>Self</code>…","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","This function isn’t used in this crate, but may be …","Method returning the maximum","Method returning the minimum","Method for performing the division","This function isn’t used in this crate, but may be …","","","","","A <strong>type operator</strong> that, when implemented for unsigned …","Alias for the result of calling <code>SetBit</code>: …","<code>UInt</code> is defined recursively, where <code>B</code> is the least …","The terminating type for <code>UInt</code>; it always comes after the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this unsigned …","Instantiates a singleton representing this unsigned …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,1,2,3,0,0,0,1,2,3,4,5,5,0,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,0,0,8,9,9,8,8,9,8,8,9,9,8,9,8,9,8,9,8,9,8,8,9,9,8,9,8,9,8,9,8,9,8,9,8,9,8,8,9,9,8,8,9,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,10,11,11,11,12,10,11,12,10,11,12,10,11,12,10,11,12,10,10,10,11,11,11,12,12,12,10,11,12,10,10,11,11,12,10,11,12,10,11,12,10,11,12,10,11,12,10,11,12,10,10,10,11,11,11,12,12,12,10,10,10,11,11,11,12,12,12,10,10,10,10,10,11,11,11,11,11,12,12,12,10,11,10,11,12,10,11,12,10,11,12,10,11,12,10,10,11,11,11,12,12,12,10,10,11,11,12,10,10,10,11,11,11,12,12,12,10,11,12,10,11,12,10,11,12,10,11,12,10,11,12,10,11,12,10,11,12,10,11,12,13,0,14,15,14,15,14,15,14,15,14,15,0,0,0,0,0,14,14,14,13,14,14,0,13,14,15,14,15,14,15,14,15,14,15,16,14,14,14,13,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,0,0,0,0,26,27,30,25,28,29,21,24,23,22,19,0,0,34,35,0,0,0,0,36,36,36,36,36,36,36,36,37,37,37,36,37,36,36,36,36,36,37,36,37,36,37,36,37,36,37,36,37,36,36,36,36,36,37,37,36,37,36,37,36,37,36,37,36,37,36,36,37,36,37,36,37,36,37,36,37,36,37,36,36,36,36,36,37,37,37,36,36,37,36,37,36,37,36,37,36,37,36,37,36,36,36,36,37,37,37,36,36,36,36,37,37,37,36,36,36,36,36,37,37,36,37,36,37,36,37,36,37,36,37,36,37,36,37,36,37,36,37,36,37,36,37,36,37,36,37],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["greater",3]],[[],["less",3]],[[],["equal",3]],[[["greater",3]],["ordering",4]],[[["less",3]],["ordering",4]],[[["equal",3]],["ordering",4]],null,null,[[],["greater",3]],[[],["less",3]],[[],["equal",3]],[[["greater",3]],["bool",15]],[[["less",3]],["bool",15]],[[["equal",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],null,null,null,[[["greater",3]],[["ordering",4],["option",4]]],[[["less",3]],[["ordering",4],["option",4]]],[[["equal",3]],[["ordering",4],["option",4]]],[[["nint",3]]],[[["nint",3],["uint",3]]],[[["nint",3],["uint",3]]],null,[[],["ordering",4]],[[],["ordering",4]],[[],["ordering",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[["aterm",3]]],[[["tarr",3]]],[[]],[[]],[[]],[[]],[[],["aterm",3]],[[],["tarr",3]],[[["aterm",3]],["ordering",4]],[[["tarr",3]],["ordering",4]],[[]],[[]],[[["aterm",3]],["bool",15]],[[["tarr",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tarr",3]],["bool",15]],[[]],[[]],[[["aterm",3]],[["ordering",4],["option",4]]],[[["tarr",3]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[]],[[["aterm",3]]],[[["tarr",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[["b0",3]]],[[]],[[["b1",3]]],[[["b0",3]]],[[["b1",3]]],[[["b0",3]]],[[]],[[]],[[]],[[]],[[],["b0",3]],[[],["b1",3]],[[["b0",3]],["ordering",4]],[[["b1",3]],["ordering",4]],[[["b0",3]]],[[["b1",3]]],[[["b0",3]]],[[["b1",3]]],[[],["b0",3]],[[],["b1",3]],[[["b0",3]],["bool",15]],[[["b1",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["b0",3]],["b0",3]],[[["b1",3]],["b1",3]],[[["b0",3]],["b1",3]],[[["b1",3]],["b1",3]],[[["b1",3]],["b0",3]],[[["b0",3]],["b0",3]],[[["b0",3]],["b0",3]],[[["b1",3]],["b1",3]],[[],["b0",3]],[[],["b1",3]],[[]],[[]],[[["b0",3]],[["ordering",4],["option",4]]],[[["b1",3]],[["ordering",4],["option",4]]],[[],["bool",15]],[[],["bool",15]],[[],["u8",15]],[[],["u8",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["nint",3]]],[[["z0",3]]],[[["pint",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["pint",3]],[[],["nint",3]],[[],["z0",3]],[[["pint",3]],["ordering",4]],[[["nint",3]],["ordering",4]],[[["z0",3]],["ordering",4]],[[["pint",3]]],[[["nint",3]]],[[["z0",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[],["pint",3]],[[],["nint",3]],[[],["z0",3]],[[["pint",3]]],[[["nint",3]]],[[["nint",3]]],[[["pint",3]]],[[]],[[["pint",3]],["bool",15]],[[["nint",3]],["bool",15]],[[["z0",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["aterm",3]]],[[["tarr",3]]],[[["pint",3]]],[[["z0",3]]],[[["z0",3]]],[[["nint",3]]],[[["pint",3]]],[[["aterm",3]]],[[["tarr",3]]],[[]],[[["aterm",3]]],[[["tarr",3]]],[[["pint",3]],["bool",15]],[[["nint",3]],["bool",15]],[[]],[[]],[[]],[[],["pint",3]],[[],["nint",3]],[[],["z0",3]],[[["pint",3]],[["ordering",4],["option",4]]],[[["nint",3]],[["ordering",4],["option",4]]],[[["z0",3]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[["z0",3]]],[[["pint",3]]],[[["z0",3]]],[[["pint",3],["uint",3]]],[[["pint",3],["uint",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["pint",3]]],[[["nint",3]]],[[["pint",3]]],[[]],[[["pint",3]]],[[["nint",3]]],[[["z0",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["nint",3]]],[[["z0",3]]],[[["pint",3]]],[[],["i16",15]],[[],["i16",15]],[[],["i16",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["i64",15]],[[],["i64",15]],[[],["i64",15]],[[],["i8",15]],[[],["i8",15]],[[],["i8",15]],[[],["isize",15]],[[],["isize",15]],[[],["isize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["i16",15]],[[],["i16",15]],[[],["i32",15]],[[],["i32",15]],[[],["i64",15]],[[],["i64",15]],[[],["i8",15]],[[],["i8",15]],[[],["isize",15]],[[],["isize",15]],[[],["ordering",4]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["u8",15]],[[],["u8",15]],[[],["usize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[["uterm",3]]],[[["uint",3],["b1",3]]],[[["b0",3],["uint",3]]],[[["uint",3],["b1",3]]],[[["b0",3],["uint",3]]],[[["b1",3]]],[[["b1",3]]],[[["b0",3]]],[[]],[[["b1",3]]],[[["b0",3]]],[[]],[[]],[[["uint",3],["b1",3]]],[[["uterm",3]]],[[["b0",3],["uint",3]]],[[["uint",3],["b1",3]]],[[["b0",3],["uint",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["uint",3]],[[],["uterm",3]],[[["uint",3]],["ordering",4]],[[["uterm",3]],["ordering",4]],[[["uint",3]]],[[["uint",3]]],[[["uint",3]]],[[["uint",3]]],[[["uterm",3]]],[[["uint",3]]],[[["uterm",3]]],[[],["uint",3]],[[],["uterm",3]],[[["uint",3]]],[[["uint",3]]],[[["uint",3]],["bool",15]],[[["uterm",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["uint",3]]],[[["u0",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["uint",3]]],[[["uint",3]]],[[["uterm",3]]],[[["b1",3]]],[[["b0",3]]],[[["b1",3]]],[[["b0",3]]],[[]],[[["uint",3]],["bool",15]],[[],["uint",3]],[[],["uterm",3]],[[["uint",3]],[["ordering",4],["option",4]]],[[["uterm",3]],[["ordering",4],["option",4]]],[[["uint",3]]],[[["uint",3]]],[[]],[[]],[[["uint",3]]],[[["uint",3]]],[[]],[[]],[[["b0",3]]],[[["b1",3]]],[[["uterm",3]]],[[["uint",3]]],[[["b0",3]]],[[["b1",3]]],[[]],[[["b1",3]]],[[["uterm",3]]],[[["uint",3]]],[[["b0",3]]],[[["b1",3]]],[[["b0",3]]],[[]],[[["b1",3]]],[[["b0",3]]],[[["b1",3]]],[[]],[[["b1",3]]],[[["b0",3]]],[[["uterm",3]]],[[],["i16",15]],[[],["i16",15]],[[],["i32",15]],[[],["i32",15]],[[],["i64",15]],[[],["i64",15]],[[],["i8",15]],[[],["i8",15]],[[],["isize",15]],[[],["isize",15]],[[],["u16",15]],[[],["u16",15]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[],["u8",15]],[[],["u8",15]],[[],["usize",15]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Greater"],[3,"Less"],[3,"Equal"],[6,"P1"],[6,"N1"],[3,"ATerm"],[3,"TArr"],[3,"B0"],[3,"B1"],[3,"PInt"],[3,"NInt"],[3,"Z0"],[8,"Bit"],[8,"Unsigned"],[8,"Integer"],[8,"Ord"],[8,"Same"],[8,"Abs"],[8,"Pow"],[8,"Cmp"],[8,"Len"],[8,"PartialDiv"],[8,"Min"],[8,"Max"],[8,"IsLess"],[8,"IsEqual"],[8,"IsGreater"],[8,"IsLessOrEqual"],[8,"IsNotEqual"],[8,"IsGreaterOrEqual"],[8,"SquareRoot"],[8,"Logarithm2"],[8,"Gcd"],[8,"GetBit"],[8,"SetBit"],[3,"UInt"],[3,"UTerm"]]},\
"ucd_trie":{"doc":"The ucd-trie crate provides a compressed trie set …","t":[4,13,13,6,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Error","GaveUp","InvalidCodepoint","Result","TrieSet","TrieSetOwned","TrieSetSlice","as_slice","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","contains_char","contains_char","contains_u32","contains_u32","fmt","fmt","fmt","fmt","from","from","from","from_codepoints","from_scalars","into","into","into","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["ucd_trie","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An error that can occur during construction of a trie.","This error is returned when a set of Unicode codepoints …","This error is returned when an invalid codepoint is given …","A type alias that maps to …","A type alias for <code>TrieSetSlice<\'static></code>.","An owned trie set.","A borrowed trie set.","Return this set as a slice.","","","","","","","","","","","","","Returns true if and only if the given Unicode scalar …","Returns true if and only if the given Unicode scalar …","Returns true if and only if the given codepoint is in …","Returns true if and only if the given codepoint is in …","","","","","","","","Create a new trie set from a set of Unicode scalar values.","Create a new trie set from a set of Unicode scalar values.","","","","","","","","","","","","","","","",""],"i":[0,1,1,0,0,0,0,2,1,2,3,1,2,3,1,2,3,1,2,3,2,3,2,3,1,1,2,3,1,2,3,2,2,1,2,3,1,2,3,1,1,2,3,1,2,3,1,2,3],"f":[null,null,null,null,null,null,null,[[],["triesetslice",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["error",4]],[[],["triesetowned",3]],[[],["triesetslice",3]],[[]],[[]],[[]],[[["char",15]],["bool",15]],[[["char",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["result",6],["triesetowned",3]]],[[],[["result",6],["triesetowned",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Error"],[3,"TrieSetOwned"],[3,"TrieSetSlice"]]},\
"unicode_width":{"doc":"Determine displayed width of <code>char</code> and <code>str</code> types according …","t":[17,8,8,10,10,10,10],"n":["UNICODE_VERSION","UnicodeWidthChar","UnicodeWidthStr","width","width","width_cjk","width_cjk"],"q":["unicode_width","","","","","",""],"d":["The version of Unicode that this version of unicode-width …","Methods for determining displayed width of Unicode …","Methods for determining displayed width of Unicode …","Returns the character’s displayed width in columns, or …","Returns the string’s displayed width in columns.","Returns the character’s displayed width in columns, or …","Returns the string’s displayed width in columns."],"i":[0,0,0,1,2,1,2],"f":[null,null,null,[[],[["usize",15],["option",4]]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[],["usize",15]]],"p":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]},\
"unicode_xid":{"doc":"Determine if a <code>char</code> is a valid identifier for a parser …","t":[17,8,10,10],"n":["UNICODE_VERSION","UnicodeXID","is_xid_continue","is_xid_start"],"q":["unicode_xid","","",""],"d":["The version of Unicode that this version of unicode-xid …","Methods for determining if a character is a valid …","Returns whether the specified <code>char</code> satisfies the ‘…","Returns whether the specified character satisfies the ‘…"],"i":[0,0,1,1],"f":[null,null,[[],["bool",15]],[[],["bool",15]]],"p":[[8,"UnicodeXID"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};