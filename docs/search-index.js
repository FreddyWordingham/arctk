var searchIndex = JSON.parse('{\
"adler32":{"doc":"A minimal implementation of Adler32 for Rust.","t":[3,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11],"n":["RollingAdler32","new","from_value","from_buffer","hash","remove","update","update_buffer","adler32","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","clone","default"],"q":["adler32","","","","","","","","","","","","","","","","","","",""],"d":["A rolling version of the Adler32 hash, which can ‘forget…","Creates an empty Adler32 context (with hash 1).","Creates an Adler32 context with the given initial value.","Convenience function initializing a context from the hash …","Returns the current hash.","Removes the given <code>byte</code> that was fed to the algorithm <code>size</code> …","Feeds a new <code>byte</code> to the algorithm to update the hash.","Feeds a vector of bytes to the algorithm to update the …","Consume a Read object and returns the Adler32 hash.","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[],["rollingadler32",3]],[[["u32",15]],["rollingadler32",3]],[[],["rollingadler32",3]],[[],["u32",15]],[[["usize",15],["u8",15]]],[[["u8",15]]],[[]],[[["read",8]],[["result",6],["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["rollingadler32",3]],[[],["rollingadler32",3]]],"p":[[3,"RollingAdler32"]]},\
"aho_corasick":{"doc":"A library for finding occurrences of many patterns at …","t":[0,3,3,3,4,13,13,3,3,3,3,3,4,13,13,13,3,3,4,13,12,13,12,12,8,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["packed","Builder","Config","FindIter","MatchKind","LeftmostFirst","LeftmostLongest","Searcher","AhoCorasick","AhoCorasickBuilder","FindIter","FindOverlappingIter","MatchKind","Standard","LeftmostFirst","LeftmostLongest","StreamFindIter","Error","ErrorKind","StateIDOverflow","max","PremultiplyOverflow","max","requested_max","StateID","from_usize","to_usize","max_id","Match","pattern","start","end","is_empty","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","next","next","next","next","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","eq","eq","eq","ne","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","hash","description","new","new_auto_configured","is_match","earliest_find","find","find_iter","find_overlapping_iter","replace_all","replace_all_bytes","replace_all_with","replace_all_with_bytes","stream_find_iter","stream_replace_all","stream_replace_all_with","match_kind","max_pattern_len","pattern_count","supports_overlapping","supports_stream","heap_bytes","new","build","build_with_size","auto_configure","match_kind","anchored","ascii_case_insensitive","dense_depth","dfa","prefilter","byte_classes","premultiply","kind","new","builder","match_kind","new","build","add","extend","new","find","find_at","find_iter","match_kind","minimum_len","heap_bytes"],"q":["aho_corasick","aho_corasick::packed","","","","","","","aho_corasick","","","","","","","","","","","","aho_corasick::ErrorKind","aho_corasick","aho_corasick::ErrorKind","","aho_corasick","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aho_corasick::packed","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aho_corasick","","","","","","","","","","","","aho_corasick::packed","aho_corasick","","","","","aho_corasick::packed","","","","aho_corasick","","","aho_corasick::packed","","","aho_corasick","aho_corasick::packed","aho_corasick","","","","","","","","","","aho_corasick::packed","","","","","aho_corasick","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aho_corasick::packed","","","","","","","","","","","","",""],"d":["A lower level API for packed multiple substring search, …","A builder for constructing a packed searcher from a …","The configuration for a packed multiple pattern searcher.","An iterator over non-overlapping matches from a packed …","A knob for controlling the match semantics of a packed …","Use leftmost-first match semantics, which reports …","Use leftmost-longest match semantics, which reports …","A packed searcher for quickly finding occurrences of …","An automaton for searching multiple strings in linear …","A builder for configuring an Aho-Corasick automaton.","An iterator of non-overlapping matches in a particular …","An iterator of overlapping matches in a particular …","A knob for controlling the match semantics of an …","Use standard match semantics, which support overlapping …","Use leftmost-first match semantics, which reports …","Use leftmost-longest match semantics, which reports …","An iterator that reports Aho-Corasick matches in a stream.","An error that occurred during the construction of an …","The kind of error that occurred.","An error that occurs when constructing an automaton would …","The maximum possible state ID.","An error that occurs when premultiplication of state IDs …","The maximum possible state id.","The maximum ID required by premultiplication.","A trait describing the representation of an automaton’s …","Convert from a <code>usize</code> to this implementation’s …","Convert this implementation’s representation to a <code>usize</code>.","Return the maximum state identifier supported by this …","A representation of a match reported by an Aho-Corasick …","Returns the identifier of the pattern that matched.","The starting position of the match.","The ending position of the match.","Returns true if and only if this match is empty. That is, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new Aho-Corasick automaton using the default …","Build an Aho-Corasick automaton with an automatically …","Returns true if and only if this automaton matches the …","Returns the location of the first detected match in …","Returns the location of the first match according to the …","Returns an iterator of non-overlapping matches, using the …","Returns an iterator of overlapping matches in the given …","Replace all matches with a corresponding value in the …","Replace all matches using raw bytes with a corresponding …","Replace all matches using a closure called on each match. …","Replace all matches using raw bytes with a closure called …","Returns an iterator of non-overlapping matches in the …","Search for and replace all matches of this automaton in …","Search the given reader and replace all matches of this …","Returns the match kind used by this automaton.","Returns the length of the longest pattern matched by this …","Return the total number of patterns matched by this …","Returns true if and only if this automaton supports …","Returns true if and only if this automaton supports …","Returns the approximate total amount of heap used by this …","Create a new builder for configuring an Aho-Corasick …","Build an Aho-Corasick automaton using the configuration …","Build an Aho-Corasick automaton using the configuration …","Automatically configure the settings on this builder …","Set the desired match semantics.","Enable anchored mode, which requires all matches to start …","Enable ASCII-aware case insensitive matching.","Set the limit on how many NFA states use a dense …","Compile the standard Aho-Corasick automaton into a …","Enable heuristic prefilter optimizations.","Shrink the size of the transition alphabet by mapping …","Premultiply state identifiers in the transition table. …","Return the kind of this error.","Create a new default configuration. A default …","Create a packed builder from this configuration. The …","Set the match semantics for this configuration.","Create a new builder for constructing a multi-pattern …","Build a searcher from the patterns added to this builder …","Add the given pattern to this set to match.","Add the given iterator of patterns to this set to match.","A convenience function for constructing a searcher from …","Return the first occurrence of any of the patterns in …","Return the first occurrence of any of the patterns in …","Return an iterator of non-overlapping occurrences of the …","Returns the match kind used by this packed searcher.","Returns the minimum length of a haystack that is required …","Returns the approximate total amount of heap used by this …"],"i":[0,0,0,0,0,1,1,0,0,0,0,0,0,2,2,2,0,0,0,3,4,3,5,5,0,6,6,6,0,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,2,2,2,2,2,2,2,2,2,13,13,13,13,13,13,13,13,13,13,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,7,7,7,7,7,7,7,7,7,9,10,11,17,8,12,2,13,3,1,14,15,16,7,12,2,1,14,15,2,1,7,7,8,9,10,11,12,2,13,3,1,14,15,16,17,7,13,7,13,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,12,12,12,12,12,12,12,12,12,12,12,12,13,14,14,14,15,15,15,15,16,16,16,16,16,16,16],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],[["match",3],["option",4]]],[[],[["match",3],["option",4]]],[[],[["option",4],["result",6]]],[[],[["match",3],["option",4]]],[[],["ahocorasick",3]],[[],["ahocorasickbuilder",3]],[[],["matchkind",4]],[[],["error",3]],[[],["errorkind",4]],[[],["matchkind",4]],[[],["config",3]],[[],["builder",3]],[[],["searcher",3]],[[],["match",3]],[[],["ahocorasickbuilder",3]],[[],["matchkind",4]],[[],["matchkind",4]],[[],["config",3]],[[],["builder",3]],[[["matchkind",4]],["bool",15]],[[["matchkind",4]],["bool",15]],[[["match",3]],["bool",15]],[[["match",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["str",15]],[[],["ahocorasick",3]],[[],["ahocorasick",3]],[[["asref",8]],["bool",15]],[[["asref",8]],[["match",3],["option",4]]],[[["asref",8]],[["match",3],["option",4]]],[[],["finditer",3]],[[],["findoverlappingiter",3]],[[["str",15]],["string",3]],[[],[["vec",3],["u8",15]]],[[["string",3],["str",15]]],[[["vec",3]]],[[["read",8]],[["streamfinditer",3],["read",8]]],[[],["result",6]],[[],["result",6]],[[],["matchkind",4]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["ahocorasickbuilder",3]],[[],["ahocorasick",3]],[[],[["error",3],["ahocorasick",3],["result",4]]],[[],["ahocorasickbuilder",3]],[[["matchkind",4]],["ahocorasickbuilder",3]],[[["bool",15]],["ahocorasickbuilder",3]],[[["bool",15]],["ahocorasickbuilder",3]],[[["usize",15]],["ahocorasickbuilder",3]],[[["bool",15]],["ahocorasickbuilder",3]],[[["bool",15]],["ahocorasickbuilder",3]],[[["bool",15]],["ahocorasickbuilder",3]],[[["bool",15]],["ahocorasickbuilder",3]],[[],["errorkind",4]],[[],["config",3]],[[],["builder",3]],[[["matchkind",4]],["config",3]],[[],["builder",3]],[[],[["searcher",3],["option",4]]],[[["asref",8]],["builder",3]],[[],["builder",3]],[[],[["searcher",3],["option",4]]],[[["asref",8]],[["match",3],["option",4]]],[[["asref",8],["usize",15]],[["match",3],["option",4]]],[[],["finditer",3]],[[],["matchkind",4]],[[],["usize",15]],[[],["usize",15]]],"p":[[4,"MatchKind"],[4,"MatchKind"],[4,"ErrorKind"],[13,"StateIDOverflow"],[13,"PremultiplyOverflow"],[8,"StateID"],[3,"Match"],[3,"AhoCorasick"],[3,"FindIter"],[3,"FindOverlappingIter"],[3,"StreamFindIter"],[3,"AhoCorasickBuilder"],[3,"Error"],[3,"Config"],[3,"Builder"],[3,"Searcher"],[3,"FindIter"]]},\
"ansi_rgb":{"doc":"Colorful console text using ANSI escape sequences.","t":[8,10,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Background","bg","WithBackground","white","black","red","orange","yellow","yellow_green","green","green_cyan","cyan","cyan_blue","blue","blue_magenta","magenta","magenta_pink","Foreground","fg","WithForeground","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt"],"q":["ansi_rgb","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Adds a background color","Adds the given background color","Something with a background color","Makes white","Makes black","Makes red","Makes orange","Makes yellow","Makes yellow green","Makes green","Makes green cyan","Makes cyan","Makes cyan blue","Makes blue","Makes blue magenta","Makes magenta","Makes magenta pink","Adds a foreground color","Adds the given foreground color","Something with a foreground color","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,3,3,3,3,3,3,4,4,4,4,4,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4],"f":[null,[[["rgb8",6]],["withbackground",3]],null,[[],["rgb8",6]],[[],["rgb8",6]],[[],["rgb8",6]],[[],["rgb8",6]],[[],["rgb8",6]],[[],["rgb8",6]],[[],["rgb8",6]],[[],["rgb8",6]],[[],["rgb8",6]],[[],["rgb8",6]],[[],["rgb8",6]],[[],["rgb8",6]],[[],["rgb8",6]],[[],["rgb8",6]],null,[[["rgb8",6]],["withforeground",3]],null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]]],"p":[[8,"Background"],[8,"Foreground"],[3,"WithBackground"],[3,"WithForeground"]]},\
"approx":{"doc":"A crate that provides facilities for testing the …","t":[8,16,10,10,11,8,10,10,11,8,10,10,11,3,12,11,11,11,3,12,12,11,11,11,11,3,12,12,11,11,11,11,14,14,14,14,14,14,14,14,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AbsDiffEq","Epsilon","default_epsilon","abs_diff_eq","abs_diff_ne","RelativeEq","default_max_relative","relative_eq","relative_ne","UlpsEq","default_max_ulps","ulps_eq","ulps_ne","AbsDiff","epsilon","epsilon","eq","ne","Relative","epsilon","max_relative","epsilon","max_relative","eq","ne","Ulps","epsilon","max_ulps","epsilon","max_ulps","eq","ne","abs_diff_eq","abs_diff_ne","relative_eq","relative_ne","ulps_eq","ulps_ne","assert_abs_diff_eq","assert_abs_diff_ne","assert_relative_eq","assert_relative_ne","assert_ulps_eq","assert_ulps_ne","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","default","default","default","abs_diff_ne","relative_ne","ulps_ne"],"q":["approx","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Equality that is defined using the absolute difference of …","Used for specifying relative comparisons.","The default tolerance to use when testing values that are …","A test for equality that uses the absolute difference to …","The inverse of [<code>AbsDiffEq::abs_diff_eq</code>].","Equality comparisons between two numbers using both the …","The default relative tolerance for testing values that …","A test for equality that uses a relative comparison if …","The inverse of [<code>RelativeEq::relative_eq</code>].","Equality comparisons between two numbers using both the …","The default ULPs to tolerate when testing values that are …","A test for equality that uses units in the last place …","The inverse of [<code>UlpsEq::ulps_eq</code>].","The requisite parameters for testing for approximate …","The tolerance to use when testing values that are close …","Replace the epsilon value with the one specified.","Peform the equality comparison","Peform the inequality comparison","The requisite parameters for testing for approximate …","The tolerance to use when testing values that are close …","The relative tolerance for testing values that are …","Replace the epsilon value with the one specified.","Replace the maximum relative value with the one specified.","Peform the equality comparison","Peform the inequality comparison","The requisite parameters for testing for approximate …","The tolerance to use when testing values that are close …","The ULPs to tolerate when testing values that are …","Replace the epsilon value with the one specified.","Replace the max ulps value with the one specified.","Peform the equality comparison","Peform the inequality comparison","Approximate equality of using the absolute difference.","Approximate inequality of using the absolute difference.","Approximate equality using both the absolute difference …","Approximate inequality using both the absolute difference …","Approximate equality using both the absolute difference …","Approximate inequality using both the absolute difference …","An assertion that delegates to [<code>abs_diff_eq!</code>], and panics …","An assertion that delegates to [<code>abs_diff_ne!</code>], and panics …","An assertion that delegates to [<code>relative_eq!</code>], and panics …","An assertion that delegates to [<code>relative_ne!</code>], and panics …","An assertion that delegates to [<code>ulps_eq!</code>], and panics …","An assertion that delegates to [<code>ulps_ne!</code>], and panics …","","","","","","","","","","","","","","","","","","","","","","","","","The inverse of [<code>AbsDiffEq::abs_diff_eq</code>].","The inverse of [<code>RelativeEq::relative_eq</code>].","The inverse of [<code>UlpsEq::ulps_eq</code>]."],"i":[0,1,1,1,1,0,2,2,2,0,3,3,3,0,4,4,4,4,0,5,5,5,5,5,5,0,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,4,5,6,1,2,3],"f":[null,null,[[]],[[],["bool",15]],[[],["bool",15]],null,[[]],[[],["bool",15]],[[],["bool",15]],null,[[],["u32",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],null,null,[[],["absdiff",3]],[[],["bool",15]],[[],["bool",15]],null,null,null,[[],["relative",3]],[[],["relative",3]],[[],["bool",15]],[[],["bool",15]],null,null,null,[[],["ulps",3]],[[["u32",15]],["ulps",3]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["absdiff",3]],[[],["relative",3]],[[],["ulps",3]],[[],["bool",15]],[[],["bool",15]],[[["u32",15]],["bool",15]]],"p":[[8,"AbsDiffEq"],[8,"RelativeEq"],[8,"UlpsEq"],[3,"AbsDiff"],[3,"Relative"],[3,"Ulps"]]},\
"arctk":{"doc":"Library core.","t":[0,0,3,11,11,11,11,0,3,11,0,3,11,11,11,0,3,0,3,11,11,0,3,0,0,3,11,11,11,11,0,3,11,11,11,11,11,11,11,11,0,3,11,11,11,11,0,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,0,5,5,0,0,0,0,8,11,10,0,8,16,10,0,4,13,13,0,8,10,11,5,0,0,0,3,11,11,11,11,11,11,11,11,0,3,11,11,0,4,13,13,13,13,13,11,11,11,11,11,11,0,4,13,13,13,13,13,0,0,3,11,11,11,11,11,11,11,11,11,0,3,11,11,11,11,0,3,11,11,11,0,3,11,0,3,0,4,13,12,12,13,12,12,11,11,11,11,11,11,11,11,11,0,3,11,11,11,11,0,0,8,10,0,8,10,0,8,10,10,10,0,8,10,0,0,3,11,11,11,11,11,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,11,11,11,11,11,11,11,11,0,4,13,13,11,11,0,4,13,13,11,11,11,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,11,11,11,11,11,0,3,0,3,11,11,11,11,0,3,11,11,11,11,11,11,11,11,0,0,4,13,13,13,13,13,13,13,13,13,11,11,11,0,6,0,6,0,3,0,3,11,11,11,11,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,4,13,12,13,12,12,13,12,12,12,13,12,12,13,12,12,12,13,12,12,12,12,11,11,11,11,11,0,4,13,13,13,13,13,13,13,0,0,5,5,5,5,5,5,5,0,4,13,12,13,12,13,12,12,12,12,13,12,12,13,12,12,13,12,13,12,12,12,12,12,11,11,11,11,11,11,11,11,0,4,13,13,13,13,13,13,13,0,5,5,5,5,5,5,0,3,0,0,0,0,0,0,0,3,11,11,0,8,16,10,0,8,16,10,10,0,0,0,4,13,13,13,17,17,17,0,0,4,13,13,13,17,17,17,0,0,4,13,13,13,17,17,17,0,4,13,13,0,4,13,13,13,17,17,17,0,6,0,3,11,0,3,11,11,11,11,11,0,3,11,11,11,11,11,11,11,11,11,0,0,3,11,11,11,11,11,11,0,3,11,11,11,11,11,0,3,11,0,3,11,0,3,0,3,11,11,11,11,11,11,11,11,11,0,3,11,11,11,11,11,11,11,0,3,0,3,11,11,11,11,11,11,11,11,11,0,0,0,4,13,13,13,13,13,13,12,12,12,13,13,13,13,13,13,13,13,13,13,13,11,0,4,13,13,13,13,13,13,12,12,12,13,13,13,13,13,13,13,13,13,13,13,0,4,13,13,13,13,13,13,12,12,12,13,13,13,13,13,13,13,13,13,13,13,0,3,12,0,0,4,13,13,0,4,13,13,0,4,13,13,13,13,11,11,0,5,0,4,13,13,11,0,3,12,12,12,12,12,11,0,3,12,12,12,11,0,3,12,12,12,12,12,11,0,3,11,0,3,0,5,5,0,3,11,11,11,11,11,11,0,4,13,13,13,11,11,0,0,3,12,12,12,12,11,0,3,11,11,11,0,3,12,12,12,12,12,11,0,3,11,0,3,0,5,5,0,3,11,11,11,11,11,0,0,3,11,11,0,3,11,11,0,0,3,12,12,12,12,11,0,3,12,12,12,12,11,0,3,0,5,0,3,11,11,11,11,11,0,0,3,12,12,12,12,12,12,12,11,0,3,12,12,12,12,12,11,0,3,11,0,3,0,5,5,0,3,11,11,11,11,11,11,11,11,0,0,3,11,11,0,3,11,11,0,0,4,13,13,13,13,0,4,13,13,13,13,0,4,13,13,13,13,0,4,13,13,13,13,0,4,13,13,13,11,0,4,13,13,13,0,4,13,13,13,0,0,5,0,5,5,0,5,0,4,13,13,13,11,0,3,11,11,11,11,0,3,0,3,12,12,12,12,12,12,12,11,0,3,12,12,12,12,12,12,11,11,11,11,11,0,3,12,12,12,12,12,12,12,12,11,0,3,11,0,3,0,5,0,5,0,5,5,0,3,11,11,11,11,11,11,11,0,5,0,5,0,0,4,13,13,13,13,13,13,0,4,13,13,13,13,13,13,0,6,0,4,13,13,0,0,5,0,5,0,3,12,12,12,12,12,12,12,11,0,5,5,5,0,3,12,12,12,12,11,0,3,12,12,12,12,12,12,12,12,11,0,3,11,0,3,0,5,5,0,3,11,11,11,11,11,0,3,11,11,11,11,11,11,11,11,11,11,11,0,3,0,3,11,11,11,11,11,0,0,3,11,11,11,11,11,11,0,5,5,0,3,11,11,11,11,11,0,3,11,11,11,11,11,11,11,11,0,3,11,11,11,0,8,10,0,0,0,8,16,10,0,5,5,5,5,0,3,11,0,3,11,0,3,11,0,5,0,0,5,0,0,5,5,0,5,14,14,14,14,14,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["chem","rate","Rate","new","order","rate","rate_m","rate_linker","RateLinker","order","reaction","Reaction","new","rate","components","reaction_linker","ReactionLinker","reactor","Reactor","new","deltas","reactor_linker","ReactorLinker","data","average","Average","total","counts","new","ave","histogram","Histogram","binner","counts","new","new_range","collect","collect_weight","try_collect","try_collect_weight","table","Table","rows","new","into_inner","new_from_array","err","Error","Text","Parallel","Format","EnvVar","LoadFile","ParseInt","ParseFloat","ParseHex","ReadJson","WriteJson","WritePng","InvalidShape","MinMax","NetCdf","fs","extensions","csv","json","from_json","from_json_str","wavefront","netcdf","png","file","File","new_from_file","load","load","Load","Inst","load","redirect","Redirect","There","Here","save","Save","save_data","save","as_json","geom","cast","camera","Camera","res","ss_power","new","pos","num_pixels","num_super_samples","num_samples","emit","camera_builder","CameraBuilder","new","travel","emitter","Emitter","Beam","Points","WeightedPoints","Surface","Volume","new_beam","new_points","new_weighted_points","new_surface","new_volume","emit","emitter_loader","EmitterLoader","Beam","Points","WeightedPoints","Surface","Volume","dom","grid","Grid","boundary","res","voxel_size","new","voxel_vol","num_cells","gen_index","gen_voxel","gen_index_voxel","grid_builder","GridBuilder","boundary","res","new","num_cells","surface","Surface","mesh","attr","new","surface_linker","SurfaceLinker","new","surface_linker_loader","SurfaceLinkerLoader","tree","Tree","Branch","boundary","children","Leaf","boundary","tris","new","boundary","num_cells","num_leaves","num_tris","depth","try_find_leaf","find_leaf","scan","tree_settings","TreeSettings","tar_tris","max_depth","padding","new","properties","collide","Collide","overlap","emit","Emit","cast","trace","Trace","hit","dist","dist_side","transformable","Transformable","transform","rt","hit","Hit","tag","dist","dist_mut","side","new","orient","Orient","pos","pos_mut","forward","right","up","new","new_up","new_tar","back","left","down","forward_ray","backward_ray","up_ray","down_ray","right_ray","left_ray","ray","Ray","pos","pos_mut","dir","dir_mut","new","destruct","travel","rotate","scan","Scan","Boundary","Surface","new_boundary","new_surface","side","Side","Inside","Outside","new","is_inside","norm","shape","cube","Cube","mins","maxs","new","new_centred","new_shrink","mins_maxs","widths","half_widths","centre","area","vol","contains","shrink","expand","rand_pos","uniform_pos","mesh","Mesh","boundary","tris","area","new","into_tris","mesh_loader","MeshLoader","smooth_triangle","SmoothTriangle","tri","norms","new","new_from_verts","triangle","Triangle","verts","plane_norm","new","side_lengths","perimeter","area","centre","intersection_coors","img","aspect_ratio","AspectRatio","Square","Classic","Golden","Silver","Standard","Widescreen","IPhoneXS","IPhone7","Custom","ratio","resolution","vt_res","colour","Colour","gradient","Gradient","gradient_builder","GradientBuilder","image","Image","pixels","pixels_mut","new","new_blank","math","alias","Vec2","Vec3","Vec4","Mat2","Mat3","Mat4","Vec2I","Vec3I","Vec4I","Mat2I","Mat3I","Mat4I","Dir2","Dir3","Dir4","Pos2","Pos3","Pos4","Pos2I","Pos3I","Pos4I","Rot2","Rot3","Trans2","Trans3","func","formula","Formula","Constant","c","Line","c","m","Bifurcation","t","under","over","ConstantSpline","xs","ys","LinearSpline","xs","ys","grads","QuadraticSpline","xs","ys","grads","quads","new_constant_spline","new_linear_spline","new_linear_spline_auto","new_quadratic_spline","y","formula_builder","FormulaBuilder","Constant","Line","Bifurcation","ConstantSpline","LinearSpline","LinearSplineAuto","QuadraticSpline","rng","distribution","sample_henyey_greenstein","sample_normal","sample_gaussian","rand_isotropic_dir","rand_circle_point","rand_sphere_point","rand_hemisphere_point","probability","Probability","Point","c","Points","cs","Linear","grad","intercept","offset","area","Uniform","min","max","Gaussian","mu","sigma","ConstantSpline","cdf","LinearSpline","grads","intercepts","offsets","areas","cdf","new_point","new_points","new_uniform","new_linear","new_gaussian","new_constant_spline","new_linear_spline","sample","probability_builder","ProbabilityBuilder","Point","Points","Uniform","Linear","Gaussian","ConstantSpline","LinearSpline","slice","min","max","is_ascending","is_descending","mode","kinds","trans3_builder","Trans3Builder","meta","access","args","map","pause","ord","array_linker","ArrayLinker","len","is_empty","build","Build","Inst","build","link","Link","Inst","requires","link","list","az","greek","Greek","Alpha","Beta","Gamma","ALPHA","BETA","GAMMA","cols","rgb","Rgb","Red","Green","Blue","RED","GREEN","BLUE","dim","cartesian","Cartesian","X","Y","Z","X","Y","Z","polar","Polar","Rho","Theta","spherical","Spherical","Rho","Theta","Phi","RHO","THETA","PHI","map","Map","name","Name","as_string","register","Register","new","is_empty","len","set","names_list","set","Set","new","from_pairs","is_empty","len","names_list","values","get","get_mut","map","phys","crossing","Crossing","ref_prob","ref_dir","trans_dir","new","calc_ref_dir","trans_prob","light","Light","power","spec","mat","new","emit","light_linker","LightLinker","new","light_linker_builder","LightLinkerBuilder","new","light_linker_builder_loader","LightLinkerBuilderLoader","local","Local","ref_index","scat_coeff","abs_coeff","shift_coeff","asym","new","inter_coeff","albedo","shift_prob","material","Material","ref_index","scat_coeff","abs_coeff","shift_coeff","asym_fact","new","sample_environment","material_builder","MaterialBuilder","photon","Photon","ray","ray_mut","weight","weight_mut","wavelength","wavelength_mut","power","new","kill","sim","babbage","operation","Operation","Info","Stripe","Zero","Unit","Point","Fill","res","mins","maxs","Remove","Sum","Add","Sub","Mult","Div","Norm","Clamp","PiecewiseMult","PiecewiseDiv","Sample","run","operation_builder","OperationBuilder","Info","Stripe","Zero","Unit","Point","Fill","res","mins","maxs","Remove","Sum","Add","Sub","Mult","Div","Norm","Clamp","PiecewiseMult","PiecewiseDiv","Sample","operation_builder_loader","OperationBuilderLoader","Info","Stripe","Zero","Unit","Point","Fill","res","mins","maxs","Remove","Sum","Add","Sub","Mult","Div","Norm","Clamp","PiecewiseMult","PiecewiseDiv","Sample","parameters","Parameters","ops","cartographer","attribute","Attribute","Interface","Mirror","attribute_linker","AttributeLinker","Interface","Mirror","caster","Caster","Direction","Target","Soft","Radiant","gen_ray","num_casts","engine","engine","event","Event","Grid","Surface","new","input","Input","mat_reg","attrs","tree","grid","sett","new","output","Output","mat_reg","void","mats","new","parameters","Parameters","sett","tree","grid","surfs","attrs","new","parameters_builder","ParametersBuilder","new","parameters_builder_loader","ParametersBuilderLoader","run","multi_thread","single_thread","settings","Settings","block_size","bump_dist","loop_limit","caster","super_sampling","new","super_sample","SuperSample","Off","Uniform","Random","num_samples","sample","diffuse","input","Input","coeffs","sources","grid","sett","new","output","Output","boundary","cell_vol","new","parameters","Parameters","sett","grid","coeffs","init","sources","new","parameters_builder","ParametersBuilder","new","parameters_builder_loader","ParametersBuilderLoader","run","multi_thread","evolve","settings","Settings","time","dumps","quality","block_size","new","stencil","grad","Grad","new","rate","reflect","Reflect","new","rate","flask","input","Input","specs","sources","reactor","sett","new","parameters","Parameters","sett","init","sources","reactor","new","parameters_loader","ParametersLoader","run","run","settings","Settings","time","dumps","quality","min_time","new","reactor","input","Input","specs","reactor","coeffs","sources","multipliers","grid","sett","new","parameters","Parameters","sett","grid","coeffs_values_sources","multipliers","reactor","new","parameters_builder","ParametersBuilder","new","parameters_builder_loader","ParametersBuilderLoader","run","multi_thread","evolve","settings","Settings","time","dumps","d_quality","r_quality","min_time","d_block_size","r_block_size","new","stencil","grad","Grad","new","rate","reflect","Reflect","new","rate","mcrt","attribute","Attribute","Interface","Mirror","Spectrometer","Imager","attribute_linker","AttributeLinker","Interface","Mirror","Spectrometer","Imager","attribute_linker_linker","AttributeLinkerLinker","Interface","Mirror","Spectrometer","Imager","attribute_linker_linker_linker","AttributeLinkerLinkerLinker","Interface","Mirror","Spectrometer","Imager","engine","Engine","Standard","Photo","Fluorescence","run","engine_builder","EngineBuilder","Standard","Photo","Fluorescence","engine_builder_loader","EngineBuilderLoader","Standard","Photo","Fluorescence","engines","fluorescence","fluorescence","photo","photo","wavelength_to_rbg","standard","standard","event","Event","Voxel","Scattering","Surface","new","frame","Frame","pos","res","new","transform","frame_builder","FrameBuilder","input","Input","spec_reg","mats","attrs","light","tree","grid","sett","new","output","Output","emission","energy","absorptions","shifts","specs","imgs","spec_reg","img_reg","boundary","cell_vol","new","parameters","Parameters","sett","tree","grid","surfs","attrs","mats","light","engine","new","parameters_builder","ParametersBuilder","new","parameters_builder_loader","ParametersBuilderLoader","peel_off","peel_off","run","multi_thread","scatter","scatter","shift_scatter","settings","Settings","num_phot","block_size","bump_dist","loop_limit","min_weight","roulette_barrels","new","surface","surface","travel","travel","render","attribute","Attribute","Opaque","Mirror","Transparent","Refractive","Luminous","Switchable","attribute_linker","AttributeLinker","Opaque","Mirror","Transparent","Refractive","Luminous","Switchable","engine","Engine","engine_builder","EngineBuilder","Antler","Cross","engines","antler","antler","cross","cross","input","Input","grads","attrs","cam","tree","sett","shader","img_id","new","lighting","light","shadow","occlusion","output","Output","time","light","shadow","colour","new","parameters","Parameters","sett","tree","surfs","attrs","grads","cam","shader","engine","new","parameters_builder","ParametersBuilder","new","parameters_builder_loader","ParametersBuilderLoader","run","multi_thread","single_thread","settings","Settings","block_size","bump_dist","loop_limit","min_weight","new","shader","Shader","sun_pos","light","shadow","spec_pow","occ_dist","fall_off","soft_shadow_samples","ambient_shadow_samples","sky_grad","data_grad","new","shader_linker","ShaderLinker","tracer","Tracer","ray","ray_mut","weight","weight_mut","new","tools","binner","Binner","range","bins","new","bin_width","bin","try_bin","index","two_dim_to_linear","linear_to_three_dim","progress_bar","ProgressBar","new","tick","block","is_done","finish_with_message","range","Range","min","max","new","new_infinite","width","contains","intersect","overlap","silent_progress_bar","SilentProgressBar","new","block","is_done","valid","Valid","check","util","fmt","analyze","Analyze","Inst","display","banner","title","section","sub_section","sub_sub_section","data_cube","DataCube","new","data_square","DataSquare","new","data_tesseract","DataTesseract","new","gradient","to_string","report","term","width","install","dir","root","io_dirs","exec","name","access","clone","args","map","pause","report","reports","fmt_report","fmt_reports","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","equivalent","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","adapt_into_using","convert_into","convert_unclamped_into","try_convert_into","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","bg","fg","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","save_data","save_data","save_data","save_data","save_data","save_data","save_data","save_data","overlap","overlap","overlap","overlap","cast","cast","cast","cast","hit","dist","dist_side","hit","dist","dist_side","hit","dist","dist_side","hit","dist","dist_side","transform","transform","transform","build","build","build","build","build","build","build","build","build","build","build","build","build","build","build","build","build","build","requires","link","requires","link","requires","link","requires","link","requires","link","requires","link","requires","link","requires","link","requires","link","requires","link","requires","link","requires","link","requires","link","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into_iter","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","cmp","eq","ne","eq","ne","eq","ne","partial_cmp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","serialize","serialize","serialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize"],"q":["arctk","arctk::chem","arctk::chem::rate","","","","","arctk::chem","arctk::chem::rate_linker","","arctk::chem","arctk::chem::reaction","","","","arctk::chem","arctk::chem::reaction_linker","arctk::chem","arctk::chem::reactor","","","arctk::chem","arctk::chem::reactor_linker","arctk","arctk::data","arctk::data::average","","","","","arctk::data","arctk::data::histogram","","","","","","","","","arctk::data","arctk::data::table","","","","","arctk","arctk::err","","","","","","","","","","","","","","","arctk","arctk::fs","arctk::fs::extensions","","arctk::fs::extensions::json","","arctk::fs::extensions","","","arctk::fs","arctk::fs::file","","","arctk::fs","arctk::fs::load","","","arctk::fs","arctk::fs::redirect","","","arctk::fs","arctk::fs::save","","","","arctk","arctk::geom","arctk::geom::cast","arctk::geom::cast::camera","","","","","","","","","arctk::geom::cast","arctk::geom::cast::camera_builder","","","arctk::geom::cast","arctk::geom::cast::emitter","","","","","","","","","","","","arctk::geom::cast","arctk::geom::cast::emitter_loader","","","","","","arctk::geom","arctk::geom::dom","arctk::geom::dom::grid","","","","","","","","","","arctk::geom::dom","arctk::geom::dom::grid_builder","","","","","arctk::geom::dom","arctk::geom::dom::surface","","","","arctk::geom::dom","arctk::geom::dom::surface_linker","","arctk::geom::dom","arctk::geom::dom::surface_linker_loader","arctk::geom::dom","arctk::geom::dom::tree","","arctk::geom::dom::tree::Tree","","arctk::geom::dom::tree","arctk::geom::dom::tree::Tree","","arctk::geom::dom::tree","","","","","","","","","arctk::geom::dom","arctk::geom::dom::tree_settings","","","","","arctk::geom","arctk::geom::properties","arctk::geom::properties::collide","","arctk::geom::properties","arctk::geom::properties::emit","","arctk::geom::properties","arctk::geom::properties::trace","","","","arctk::geom::properties","arctk::geom::properties::transformable","","arctk::geom","arctk::geom::rt","arctk::geom::rt::hit","","","","","","arctk::geom::rt","arctk::geom::rt::orient","","","","","","","","","","","","","","","","","","arctk::geom::rt","arctk::geom::rt::ray","","","","","","","","","arctk::geom::rt","arctk::geom::rt::scan","","","","","arctk::geom::rt","arctk::geom::rt::side","","","","","","arctk::geom","arctk::geom::shape","arctk::geom::shape::cube","","","","","","","","","","","","","","","","","arctk::geom::shape","arctk::geom::shape::mesh","","","","","","arctk::geom::shape","arctk::geom::shape::mesh_loader","arctk::geom::shape","arctk::geom::shape::smooth_triangle","","","","","arctk::geom::shape","arctk::geom::shape::triangle","","","","","","","","","arctk","arctk::img","arctk::img::aspect_ratio","","","","","","","","","","","","","arctk::img","arctk::img::colour","arctk::img","arctk::img::gradient","arctk::img","arctk::img::gradient_builder","arctk::img","arctk::img::image","","","","","arctk","arctk::math","arctk::math::alias","","","","","","","","","","","","","","","","","","","","","","","","","arctk::math","arctk::math::func","arctk::math::func::formula","","arctk::math::func::formula::Formula","arctk::math::func::formula","arctk::math::func::formula::Formula","","arctk::math::func::formula","arctk::math::func::formula::Formula","","","arctk::math::func::formula","arctk::math::func::formula::Formula","","arctk::math::func::formula","arctk::math::func::formula::Formula","","","arctk::math::func::formula","arctk::math::func::formula::Formula","","","","arctk::math::func::formula","","","","","arctk::math::func","arctk::math::func::formula_builder","","","","","","","","arctk::math","arctk::math::rng","arctk::math::rng::distribution","","","","","","","arctk::math::rng","arctk::math::rng::probability","","arctk::math::rng::probability::Probability","arctk::math::rng::probability","arctk::math::rng::probability::Probability","arctk::math::rng::probability","arctk::math::rng::probability::Probability","","","","arctk::math::rng::probability","arctk::math::rng::probability::Probability","","arctk::math::rng::probability","arctk::math::rng::probability::Probability","","arctk::math::rng::probability","arctk::math::rng::probability::Probability","arctk::math::rng::probability","arctk::math::rng::probability::Probability","","","","","arctk::math::rng::probability","","","","","","","","arctk::math::rng","arctk::math::rng::probability_builder","","","","","","","","arctk::math","arctk::math::slice","","","","","","arctk::math","arctk::math::trans3_builder","arctk","arctk::meta","","","","arctk","arctk::ord","arctk::ord::array_linker","","","arctk::ord","arctk::ord::build","","","arctk::ord","arctk::ord::link","","","","arctk::ord","arctk::ord::list","arctk::ord::list::az","arctk::ord::list::az::greek","","","","","","","arctk::ord::list","arctk::ord::list::cols","arctk::ord::list::cols::rgb","","","","","","","arctk::ord::list","arctk::ord::list::dim","arctk::ord::list::dim::cartesian","","","","","","","arctk::ord::list::dim","arctk::ord::list::dim::polar","","","arctk::ord::list::dim","arctk::ord::list::dim::spherical","","","","","","","arctk::ord","arctk::ord::map","arctk::ord","arctk::ord::name","","arctk::ord","arctk::ord::register","","","","","","arctk::ord","arctk::ord::set","","","","","","","","","","arctk","arctk::phys","arctk::phys::crossing","","","","","","","arctk::phys","arctk::phys::light","","","","","","arctk::phys","arctk::phys::light_linker","","arctk::phys","arctk::phys::light_linker_builder","","arctk::phys","arctk::phys::light_linker_builder_loader","arctk::phys","arctk::phys::local","","","","","","","","","","arctk::phys","arctk::phys::material","","","","","","","","arctk::phys","arctk::phys::material_builder","arctk::phys","arctk::phys::photon","","","","","","","","","","arctk","arctk::sim","arctk::sim::babbage","arctk::sim::babbage::operation","","","","","","","arctk::sim::babbage::operation::Operation","","","arctk::sim::babbage::operation","","","","","","","","","","","","arctk::sim::babbage","arctk::sim::babbage::operation_builder","","","","","","","arctk::sim::babbage::operation_builder::OperationBuilder","","","arctk::sim::babbage::operation_builder","","","","","","","","","","","arctk::sim::babbage","arctk::sim::babbage::operation_builder_loader","","","","","","","arctk::sim::babbage::operation_builder_loader::OperationBuilderLoader","","","arctk::sim::babbage::operation_builder_loader","","","","","","","","","","","arctk::sim::babbage","arctk::sim::babbage::parameters","","arctk::sim","arctk::sim::cartographer","arctk::sim::cartographer::attribute","","","arctk::sim::cartographer","arctk::sim::cartographer::attribute_linker","","","arctk::sim::cartographer","arctk::sim::cartographer::caster","","","","","","","arctk::sim::cartographer","arctk::sim::cartographer::engine","arctk::sim::cartographer","arctk::sim::cartographer::event","","","","arctk::sim::cartographer","arctk::sim::cartographer::input","","","","","","","arctk::sim::cartographer","arctk::sim::cartographer::output","","","","","arctk::sim::cartographer","arctk::sim::cartographer::parameters","","","","","","","arctk::sim::cartographer","arctk::sim::cartographer::parameters_builder","","arctk::sim::cartographer","arctk::sim::cartographer::parameters_builder_loader","arctk::sim::cartographer","arctk::sim::cartographer::run","","arctk::sim::cartographer","arctk::sim::cartographer::settings","","","","","","","arctk::sim::cartographer","arctk::sim::cartographer::super_sample","","","","","","arctk::sim","arctk::sim::diffuse","arctk::sim::diffuse::input","","","","","","arctk::sim::diffuse","arctk::sim::diffuse::output","","","","arctk::sim::diffuse","arctk::sim::diffuse::parameters","","","","","","","arctk::sim::diffuse","arctk::sim::diffuse::parameters_builder","","arctk::sim::diffuse","arctk::sim::diffuse::parameters_builder_loader","arctk::sim::diffuse","arctk::sim::diffuse::run","","arctk::sim::diffuse","arctk::sim::diffuse::settings","","","","","","arctk::sim::diffuse","arctk::sim::diffuse::stencil","arctk::sim::diffuse::stencil::grad","","","arctk::sim::diffuse::stencil","arctk::sim::diffuse::stencil::reflect","","","arctk::sim","arctk::sim::flask","arctk::sim::flask::input","","","","","","arctk::sim::flask","arctk::sim::flask::parameters","","","","","","arctk::sim::flask","arctk::sim::flask::parameters_loader","arctk::sim::flask","arctk::sim::flask::run","arctk::sim::flask","arctk::sim::flask::settings","","","","","","arctk::sim","arctk::sim::reactor","arctk::sim::reactor::input","","","","","","","","","arctk::sim::reactor","arctk::sim::reactor::parameters","","","","","","","arctk::sim::reactor","arctk::sim::reactor::parameters_builder","","arctk::sim::reactor","arctk::sim::reactor::parameters_builder_loader","arctk::sim::reactor","arctk::sim::reactor::run","","arctk::sim::reactor","arctk::sim::reactor::settings","","","","","","","","","arctk::sim::reactor","arctk::sim::reactor::stencil","arctk::sim::reactor::stencil::grad","","","arctk::sim::reactor::stencil","arctk::sim::reactor::stencil::reflect","","","arctk::sim","arctk::sim::mcrt","arctk::sim::mcrt::attribute","","","","","arctk::sim::mcrt","arctk::sim::mcrt::attribute_linker","","","","","arctk::sim::mcrt","arctk::sim::mcrt::attribute_linker_linker","","","","","arctk::sim::mcrt","arctk::sim::mcrt::attribute_linker_linker_linker","","","","","arctk::sim::mcrt","arctk::sim::mcrt::engine","","","","","arctk::sim::mcrt","arctk::sim::mcrt::engine_builder","","","","arctk::sim::mcrt","arctk::sim::mcrt::engine_builder_loader","","","","arctk::sim::mcrt","arctk::sim::mcrt::engines","arctk::sim::mcrt::engines::fluorescence","arctk::sim::mcrt::engines","arctk::sim::mcrt::engines::photo","","arctk::sim::mcrt::engines","arctk::sim::mcrt::engines::standard","arctk::sim::mcrt","arctk::sim::mcrt::event","","","","","arctk::sim::mcrt","arctk::sim::mcrt::frame","","","","","arctk::sim::mcrt","arctk::sim::mcrt::frame_builder","arctk::sim::mcrt","arctk::sim::mcrt::input","","","","","","","","","arctk::sim::mcrt","arctk::sim::mcrt::output","","","","","","","","","","","","arctk::sim::mcrt","arctk::sim::mcrt::parameters","","","","","","","","","","arctk::sim::mcrt","arctk::sim::mcrt::parameters_builder","","arctk::sim::mcrt","arctk::sim::mcrt::parameters_builder_loader","arctk::sim::mcrt","arctk::sim::mcrt::peel_off","arctk::sim::mcrt","arctk::sim::mcrt::run","arctk::sim::mcrt","arctk::sim::mcrt::scatter","","arctk::sim::mcrt","arctk::sim::mcrt::settings","","","","","","","","arctk::sim::mcrt","arctk::sim::mcrt::surface","arctk::sim::mcrt","arctk::sim::mcrt::travel","arctk::sim","arctk::sim::render","arctk::sim::render::attribute","","","","","","","arctk::sim::render","arctk::sim::render::attribute_linker","","","","","","","arctk::sim::render","arctk::sim::render::engine","arctk::sim::render","arctk::sim::render::engine_builder","","","arctk::sim::render","arctk::sim::render::engines","arctk::sim::render::engines::antler","arctk::sim::render::engines","arctk::sim::render::engines::cross","arctk::sim::render","arctk::sim::render::input","","","","","","","","","arctk::sim::render","arctk::sim::render::lighting","","","arctk::sim::render","arctk::sim::render::output","","","","","","arctk::sim::render","arctk::sim::render::parameters","","","","","","","","","","arctk::sim::render","arctk::sim::render::parameters_builder","","arctk::sim::render","arctk::sim::render::parameters_builder_loader","arctk::sim::render","arctk::sim::render::run","","arctk::sim::render","arctk::sim::render::settings","","","","","","arctk::sim::render","arctk::sim::render::shader","","","","","","","","","","","","arctk::sim::render","arctk::sim::render::shader_linker","arctk::sim::render","arctk::sim::render::tracer","","","","","","arctk","arctk::tools","arctk::tools::binner","","","","","","","arctk::tools","arctk::tools::index","","arctk::tools","arctk::tools::progress_bar","","","","","","arctk::tools","arctk::tools::range","","","","","","","","","arctk::tools","arctk::tools::silent_progress_bar","","","","arctk::tools","arctk::tools::valid","","arctk","arctk::util","arctk::util::fmt","arctk::util::fmt::analyze","","","arctk::util::fmt","arctk::util::fmt::banner","","","","arctk::util::fmt","arctk::util::fmt::data_cube","","arctk::util::fmt","arctk::util::fmt::data_square","","arctk::util::fmt","arctk::util::fmt::data_tesseract","","arctk::util::fmt","arctk::util::fmt::gradient","arctk::util::fmt","","arctk::util::fmt::term","arctk::util","arctk::util::install","arctk::util::install::dir","","arctk::util::install","arctk::util::install::exec","arctk","","","","","","","","","arctk::chem::rate","","","","","","","","","","","","","","","","","","","","","","","","","arctk::chem::rate_linker","","","","","","","","","","","","","","","","","","","","","","","arctk::chem::reaction","","","","","","","","","","","","","","","","","","","","","","","","arctk::chem::reaction_linker","","","","","","","","","","","","","","","","","","","","","","","arctk::chem::reactor","","","","","","","","","","","","","","","","","","","","","","","arctk::chem::reactor_linker","","","","","","","","","","","","","","","","","","","","","","","arctk::data::average","","","","","","","","","","","","","","","","","","","","","","","","arctk::data::histogram","","","","","","","","","","","","","","","","","","","","","","","","","arctk::data::table","","","","","","","","","","","","","","","","","","","","","","","arctk::err","","","","","","","","","","","","","","","","","","","","","","arctk::fs::redirect","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::cast::camera","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::cast::camera_builder","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::cast::emitter","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::cast::emitter_loader","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::dom::grid","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::dom::grid_builder","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::dom::surface","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::dom::surface_linker","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::dom::surface_linker_loader","","","","","","","","","","","","","","","","","","","","","","arctk::geom::dom::tree","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::dom::tree_settings","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::rt::hit","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::rt::orient","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::rt::ray","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::rt::scan","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::rt::side","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::shape::cube","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::shape::mesh","","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::shape::mesh_loader","","","","","","","","","","","","","","","","","","","","","","arctk::geom::shape::smooth_triangle","","","","","","","","","","","","","","","","","","","","","","","","arctk::geom::shape::triangle","","","","","","","","","","","","","","","","","","","","","","","","arctk::img::aspect_ratio","","","","","","","","","","","","","","","","","","","","","","","","","arctk::img::gradient_builder","","","","","","","","","","","","","","","","","","","","","","","arctk::img::image","","","","","","","","","","","","","","","","","","","","","","","","arctk::math::func::formula","","","","","","","","","","","","","","","","","","","","","","","","","arctk::math::func::formula_builder","","","","","","","","","","","","","","","","","","","","","","","arctk::math::rng::probability","","","","","","","","","","","","","","","","","","","","","","","","","arctk::math::rng::probability_builder","","","","","","","","","","","","","","","","","","","","","","","arctk::math::trans3_builder","","","","","","","","","","","","","","","","","","","","","","","","arctk::ord::array_linker","","","","","","","","","","","","","","","","","","","","","","","arctk::ord::list::az::greek","","","","","","","","","","","","","","","","","","","","","","arctk::ord::list::cols::rgb","","","","","","","","","","","","","","","","","","","","","","arctk::ord::list::dim::cartesian","","","","","","","","","","","","","","","","","","","","","","arctk::ord::list::dim::polar","","","","","","","","","","","","","","","","","","","","","","arctk::ord::list::dim::spherical","","","","","","","","","","","","","","","","","","","","","","arctk::ord::name","","","","","","","","","","","","","","","","","","","","","","","","","","arctk::ord::register","","","","","","","","","","","","","","","","","","","","","","","arctk::ord::set","","","","","","","","","","","","","","","","","","","","","","","arctk::phys::crossing","","","","","","","","","","","","","","","","","","","","","","arctk::phys::light","","","","","","","","","","","","","","","","","","","","","","","arctk::phys::light_linker","","","","","","","","","","","","","","","","","","","","","","","arctk::phys::light_linker_builder","","","","","","","","","","","","","","","","","","","","","","","arctk::phys::light_linker_builder_loader","","","","","","","","","","","","","","","","","","","","","","","arctk::phys::local","","","","","","","","","","","","","","","","","","","","","","arctk::phys::material","","","","","","","","","","","","","","","","","","","","","","","arctk::phys::material_builder","","","","","","","","","","","","","","","","","","","","","","","arctk::phys::photon","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::babbage::operation","","","","","","","","","","","","","","","","","","","","","","arctk::sim::babbage::operation_builder","","","","","","","","","","","","","","","","","","","","","","arctk::sim::babbage::operation_builder_loader","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::babbage::parameters","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::attribute","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::attribute_linker","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::caster","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::event","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::input","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::output","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::parameters","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::parameters_builder","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::parameters_builder_loader","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::settings","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::cartographer::super_sample","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::diffuse::input","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::diffuse::output","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::diffuse::parameters","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::diffuse::parameters_builder","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::diffuse::parameters_builder_loader","","","","","","","","","","","","","","","","","","","","","","arctk::sim::diffuse::settings","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::diffuse::stencil::grad","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::diffuse::stencil::reflect","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::flask::input","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::flask::parameters","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::flask::parameters_loader","","","","","","","","","","","","","","","","","","","","","","arctk::sim::flask::settings","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::reactor::input","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::reactor::parameters","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::reactor::parameters_builder","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::reactor::parameters_builder_loader","","","","","","","","","","","","","","","","","","","","","","arctk::sim::reactor::settings","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::reactor::stencil::grad","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::reactor::stencil::reflect","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::attribute","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::attribute_linker","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::attribute_linker_linker","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::attribute_linker_linker_linker","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::engine","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::engine_builder","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::engine_builder_loader","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::event","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::frame","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::frame_builder","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::input","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::output","","","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::parameters","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::parameters_builder","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::parameters_builder_loader","","","","","","","","","","","","","","","","","","","","","","arctk::sim::mcrt::settings","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::attribute","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::attribute_linker","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::engine_builder","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::input","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::output","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::parameters","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::parameters_builder","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::parameters_builder_loader","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::settings","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::shader","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::shader_linker","","","","","","","","","","","","","","","","","","","","","","","arctk::sim::render::tracer","","","","","","","","","","","","","","","","","","","","","","","","arctk::tools::binner","","","","","","","","","","","","","","","","","","","","","","","","","arctk::tools::progress_bar","","","","","","","","","","","","","","","","","","","","","","arctk::tools::range","","","","","","","","","","","","","","","","","","","","","","","","","arctk::tools::silent_progress_bar","","","","","","","","","","","","","","","","","","","","","","arctk::util::fmt::data_cube","","","","","","","","","","","","","","","","","","","","","","","arctk::util::fmt::data_square","","","","","","","","","","","","","","","","","","","","","","","arctk::util::fmt::data_tesseract","","","","","","","","","","","","","","","","","","","","","","","arctk::chem::rate_linker","arctk::chem::reaction_linker","arctk::chem::reactor_linker","arctk::data::table","arctk::geom::shape::mesh","arctk::fs::redirect","arctk::geom::cast::camera_builder","arctk::geom::cast::emitter_loader","arctk::geom::dom::grid_builder","arctk::geom::dom::surface_linker_loader","arctk::geom::dom::tree_settings","arctk::geom::shape::cube","arctk::geom::shape::mesh_loader","arctk::img::aspect_ratio","arctk::img::gradient_builder","arctk::math::func::formula_builder","arctk::math::rng::probability_builder","arctk::math::trans3_builder","arctk::ord::array_linker","arctk::ord::set","arctk::phys::light_linker_builder_loader","arctk::phys::material_builder","arctk::sim::babbage::operation_builder_loader","arctk::sim::babbage::parameters","arctk::sim::cartographer::attribute_linker","arctk::sim::cartographer::caster","arctk::sim::cartographer::parameters_builder_loader","arctk::sim::cartographer::settings","arctk::sim::cartographer::super_sample","arctk::sim::diffuse::parameters_builder_loader","arctk::sim::diffuse::settings","arctk::sim::flask::parameters_loader","arctk::sim::flask::settings","arctk::sim::reactor::parameters_builder","arctk::sim::reactor::parameters_builder_loader","arctk::sim::reactor::settings","arctk::sim::mcrt::attribute_linker_linker_linker","arctk::sim::mcrt::engine_builder_loader","arctk::sim::mcrt::frame_builder","arctk::sim::mcrt::parameters_builder_loader","arctk::sim::mcrt::settings","arctk::sim::render::attribute_linker","arctk::sim::render::engine_builder","arctk::sim::render::parameters_builder_loader","arctk::sim::render::settings","arctk::sim::render::shader_linker","arctk::tools::range","arctk::fs::redirect","arctk::geom::cast::emitter_loader","arctk::geom::dom::surface_linker_loader","arctk::geom::shape::mesh_loader","arctk::ord::set","arctk::phys::light_linker_builder_loader","arctk::sim::babbage::operation_builder_loader","arctk::sim::cartographer::parameters_builder_loader","arctk::sim::diffuse::parameters_builder_loader","arctk::sim::flask::parameters_loader","arctk::sim::reactor::parameters_builder_loader","arctk::sim::mcrt::engine_builder_loader","arctk::sim::mcrt::parameters_builder_loader","arctk::sim::render::parameters_builder_loader","arctk::data::histogram","arctk::data::table","arctk::img::image","arctk::fs::redirect","arctk::sim::cartographer::output","arctk::sim::diffuse::output","arctk::sim::mcrt::output","arctk::sim::render::output","arctk::geom::shape::cube","arctk::geom::shape::mesh","arctk::geom::shape::smooth_triangle","arctk::geom::shape::triangle","arctk","arctk::geom::shape::mesh","arctk::geom::shape::smooth_triangle","arctk::geom::shape::triangle","arctk::geom::shape::cube","","","arctk::geom::shape::mesh","","","arctk::geom::shape::smooth_triangle","","","arctk::geom::shape::triangle","","","arctk::geom::shape::mesh","arctk::geom::shape::smooth_triangle","arctk::geom::shape::triangle","arctk::geom::cast::camera_builder","arctk::geom::dom::grid_builder","arctk::img::gradient_builder","arctk::math::func::formula_builder","arctk::math::rng::probability_builder","arctk::math::trans3_builder","arctk::ord::set","arctk::phys::light_linker_builder","arctk::phys::material_builder","arctk::sim::babbage::operation_builder","arctk::sim::cartographer::parameters_builder","arctk::sim::diffuse::parameters_builder","arctk::sim::reactor::parameters_builder","arctk::sim::mcrt::engine_builder","arctk::sim::mcrt::frame_builder","arctk::sim::mcrt::parameters_builder","arctk::sim::render::engine_builder","arctk::sim::render::parameters_builder","arctk::chem::rate_linker","","arctk::chem::reaction_linker","","arctk::chem::reactor_linker","","arctk::geom::dom::surface_linker","","arctk::ord::array_linker","","arctk::ord::set","","arctk::phys::light_linker","","arctk::sim::cartographer::attribute_linker","","arctk::sim::mcrt::attribute_linker","","arctk::sim::mcrt::attribute_linker_linker","","arctk::sim::mcrt::attribute_linker_linker_linker","","arctk::sim::render::attribute_linker","","arctk::sim::render::shader_linker","","arctk::err","","","","","","","","","","","","","","arctk::ord::set","arctk::chem::rate","arctk::chem::reaction","arctk::data::average","arctk::data::histogram","arctk::fs::redirect","arctk::geom::cast::camera_builder","arctk::geom::dom::grid_builder","arctk::geom::rt::hit","arctk::geom::rt::ray","arctk::geom::rt::scan","arctk::geom::rt::side","arctk::geom::shape::cube","arctk::geom::shape::mesh","arctk::geom::shape::smooth_triangle","arctk::geom::shape::triangle","arctk::img::aspect_ratio","arctk::img::image","arctk::math::func::formula","arctk::math::rng::probability","arctk::math::trans3_builder","arctk::ord::name","arctk::phys::photon","arctk::sim::babbage::operation_builder_loader","arctk::sim::cartographer::caster","arctk::sim::cartographer::super_sample","arctk::sim::mcrt::output","arctk::sim::render::tracer","arctk::tools::binner","arctk::tools::range","arctk::data::average","arctk::ord::name","","","arctk::tools::binner","","arctk::tools::range","","arctk::ord::name","arctk::chem::rate","arctk::chem::rate_linker","arctk::chem::reaction_linker","arctk::chem::reactor","arctk::chem::reactor_linker","arctk::err","arctk::fs::redirect","arctk::geom::cast::camera_builder","arctk::geom::cast::emitter_loader","arctk::geom::dom::grid_builder","arctk::geom::dom::surface_linker_loader","arctk::geom::dom::tree_settings","arctk::geom::rt::orient","arctk::geom::shape::cube","arctk::geom::shape::mesh_loader","arctk::img::aspect_ratio","arctk::img::gradient_builder","arctk::math::func::formula","arctk::math::func::formula_builder","arctk::math::rng::probability_builder","arctk::math::trans3_builder","arctk::ord::array_linker","arctk::ord::name","arctk::ord::set","arctk::phys::light_linker_builder_loader","arctk::phys::material_builder","arctk::sim::babbage::operation_builder_loader","arctk::sim::babbage::parameters","arctk::sim::cartographer::attribute_linker","arctk::sim::cartographer::caster","arctk::sim::cartographer::parameters_builder_loader","arctk::sim::cartographer::settings","arctk::sim::cartographer::super_sample","arctk::sim::diffuse::parameters_builder_loader","arctk::sim::diffuse::settings","arctk::sim::diffuse::stencil::grad","arctk::sim::diffuse::stencil::reflect","arctk::sim::flask::parameters_loader","arctk::sim::flask::settings","arctk::sim::reactor::parameters_builder","arctk::sim::reactor::parameters_builder_loader","arctk::sim::reactor::settings","arctk::sim::reactor::stencil::grad","arctk::sim::reactor::stencil::reflect","arctk::sim::mcrt::attribute_linker_linker_linker","arctk::sim::mcrt::engine_builder_loader","arctk::sim::mcrt::frame_builder","arctk::sim::mcrt::parameters_builder_loader","arctk::sim::mcrt::settings","arctk::sim::render::attribute_linker","arctk::sim::render::engine_builder","arctk::sim::render::parameters_builder_loader","arctk::sim::render::settings","arctk::sim::render::shader_linker","arctk::tools::binner","arctk::tools::range","arctk::chem::rate","arctk::chem::rate_linker","arctk::chem::reaction_linker","arctk::chem::reactor","arctk::chem::reactor_linker","arctk::data::histogram","arctk::data::table","arctk::fs::redirect","arctk::geom::cast::camera","arctk::geom::cast::camera_builder","arctk::geom::cast::emitter","arctk::geom::cast::emitter_loader","arctk::geom::dom::grid","arctk::geom::dom::grid_builder","arctk::geom::dom::surface","arctk::geom::dom::surface_linker","arctk::geom::dom::tree","arctk::geom::dom::tree_settings","arctk::geom::rt::orient","arctk::geom::shape::cube","arctk::geom::shape::mesh","arctk::img::aspect_ratio","arctk::img::gradient_builder","arctk::math::func::formula","arctk::math::func::formula_builder","arctk::math::rng::probability","arctk::math::rng::probability_builder","arctk::ord::array_linker","arctk::ord::name","arctk::ord::register","arctk::ord::set","arctk::phys::light","arctk::phys::light_linker","arctk::phys::light_linker_builder","arctk::phys::light_linker_builder_loader","arctk::phys::material","arctk::phys::material_builder","arctk::sim::babbage::operation_builder_loader","arctk::sim::cartographer::attribute","arctk::sim::cartographer::attribute_linker","arctk::sim::cartographer::caster","arctk::sim::cartographer::input","arctk::sim::cartographer::output","arctk::sim::cartographer::parameters","arctk::sim::cartographer::parameters_builder","arctk::sim::cartographer::settings","arctk::sim::cartographer::super_sample","arctk::sim::diffuse::input","arctk::sim::diffuse::output","arctk::sim::diffuse::parameters","arctk::sim::diffuse::parameters_builder","arctk::sim::diffuse::settings","arctk::sim::diffuse::stencil::grad","arctk::sim::diffuse::stencil::reflect","arctk::sim::flask::input","arctk::sim::flask::parameters","arctk::sim::flask::settings","arctk::sim::reactor::input","arctk::sim::reactor::parameters","arctk::sim::reactor::parameters_builder","arctk::sim::reactor::settings","arctk::sim::reactor::stencil::grad","arctk::sim::reactor::stencil::reflect","arctk::sim::mcrt::attribute","arctk::sim::mcrt::attribute_linker","arctk::sim::mcrt::attribute_linker_linker","arctk::sim::mcrt::attribute_linker_linker_linker","arctk::sim::mcrt::engine","arctk::sim::mcrt::engine_builder","arctk::sim::mcrt::engine_builder_loader","arctk::sim::mcrt::input","arctk::sim::mcrt::output","arctk::sim::mcrt::parameters","arctk::sim::mcrt::parameters_builder","arctk::sim::mcrt::settings","arctk::sim::render::attribute","arctk::sim::render::attribute_linker","arctk::sim::render::engine_builder","arctk::sim::render::input","arctk::sim::render::output","arctk::sim::render::parameters","arctk::sim::render::parameters_builder","arctk::sim::render::settings","arctk::sim::render::shader","arctk::sim::render::shader_linker","arctk::tools::binner","arctk::tools::range","arctk::util::fmt::data_cube","arctk::util::fmt::data_square","arctk::util::fmt::data_tesseract","arctk::data::average","","","arctk::data::histogram","arctk::data::table","arctk::img::image","arctk::sim::cartographer::output","arctk::sim::diffuse::output","arctk::sim::mcrt::output","arctk::sim::render::output","arctk::fs::redirect","arctk::ord::name","arctk::ord::set","arctk::chem::rate_linker","arctk::chem::reaction_linker","arctk::chem::reactor_linker","arctk::fs::redirect","arctk::geom::cast::camera_builder","arctk::geom::cast::emitter_loader","arctk::geom::dom::grid_builder","arctk::geom::dom::surface_linker_loader","arctk::geom::dom::tree_settings","arctk::geom::shape::cube","arctk::geom::shape::mesh_loader","arctk::img::aspect_ratio","arctk::img::gradient_builder","arctk::math::func::formula_builder","arctk::math::rng::probability_builder","arctk::math::trans3_builder","arctk::ord::array_linker","arctk::ord::name","arctk::ord::set","arctk::phys::light_linker_builder_loader","arctk::phys::material_builder","arctk::sim::babbage::operation_builder_loader","arctk::sim::babbage::parameters","arctk::sim::cartographer::attribute_linker","arctk::sim::cartographer::caster","arctk::sim::cartographer::parameters_builder_loader","arctk::sim::cartographer::settings","arctk::sim::cartographer::super_sample","arctk::sim::diffuse::parameters_builder_loader","arctk::sim::diffuse::settings","arctk::sim::flask::parameters_loader","arctk::sim::flask::settings","arctk::sim::reactor::parameters_builder","arctk::sim::reactor::parameters_builder_loader","arctk::sim::reactor::settings","arctk::sim::mcrt::attribute_linker_linker_linker","arctk::sim::mcrt::engine_builder_loader","arctk::sim::mcrt::frame_builder","arctk::sim::mcrt::parameters_builder_loader","arctk::sim::mcrt::settings","arctk::sim::render::attribute_linker","arctk::sim::render::engine_builder","arctk::sim::render::parameters_builder_loader","arctk::sim::render::settings","arctk::sim::render::shader_linker","arctk::tools::range"],"d":["Chemical kinetics module.","Rate structure.","Rate of reaction.","Construct a new instance.","Get the total order of the reaction.","Calculate the current rate given the current …","Calculate the current rate given the current …","Rate building structure.","Rate of reaction builder.","Get the total order of the reaction.","Reaction structure.","Reaction.","Construct a new instance.","Determine the rate of change for each chemical within the …","Separate into components.","Reaction linker structure.","Reaction linker.","Reactor structure.","Complete reactor structure.","Construct a new instance.","Calculate the overall rate of change given the current …","Reactor linking structure.","Reactor linking structure.","Data reduction.","Rolling average implementation.","Rolling average value recording.","","","Construct a new instance.","Calculate the average value.","Histogram implementation.","Static range, constant bin width, Histogram.","","","Construct a new instance.","Construct a new instance using a range.","Increment the bin corresponding to x by unity.","Increment the bin corresponding to x by a given weight.","Increment the bin corresponding to x by unity if x is …","Increment the bin corresponding to x by unity if x is …","Data table implementation.","Table of row data.","","Construct a new instance.","Deconstruct the table and yield the inner rows vector.","Construct a new instance from a two-dimensional array.","Error handling.","Error enumeration.","Description error.","Parallelisation poison.","Formatting error.","Missing environment variable error.","File loading error.","Integer parsing error.","Float parsing error.","Hexadecimal parsing error.","Json reading error.","Json writing error.","Png writing error.","Shape error.","Min/max error.","NetCDF io error.","File IO.","File extension loaders.","Commer-Separated-Variable file handling.","Json loading.","Deserialise the type in json format.","Deserialise the type in json format.","Wavefront file handling.","Netcdf file handling.","Png writing.","Load from file trait.","Types implementing this trait can be loaded from a file.","Load an instance of this type from a given path.","Deserialize the type from a given file.","Build trait.","Types implementing this trait can be built into another …","End type to be built.","Build the instance type.","File re-direction implementation.","Possible file redirection structure.","Path to file.","Direct value.","Save trait.","Types implementing this trait can be saved to file.","Serialise the type to a given file","Report the saving of a file (if it is a filepath) and …","Serialise the type in json format.","Three-dimensional Euclidean geometry.","Ray-casting module.","Camera structure.","Tracer emission structure.","","","Construct a new instance.","Reference the camera’s position.","Calculate the total number of samples.","Calculate the total number of super samples per pixel.","Calculate the total number of samples.","Emit a ray for the given pixel and super-sample.","Camera builder structure.","Loadable camera structure.","Construct a new instance.","Move the camera.","Optical material.","Ray emission structure.","Single beam.","Points.","Weighted points.","Surface mesh.","Volume map.","Construct a new beam instance.","Construct a new points instance.","Construct a new points instance.","Construct a new surface instance.","Construct a new volume instance.","Emit a new ray.","Optical material.","Ray emission structure.","Single beam.","Point list.","Weighted point list.","Surface mesh.","Volume map.","Domain module.","Regular Cartesian-grid cell scheme.","Regular Cartesian-grid structure.","","","","Construct a new instance.","Calculate the voxel volume.","Determine the total number of cells.","If the given position is contained within the grid, …","Generate the voxel for the given index.","If the given position is contained within the grid, …","Regular-Cartesian grid builder.","Grid builder.","","","Construct a new instance.","Determine the total number of cells.","Optical surface structure.","Optical surface.","","","Construct a new instance.","Surface linking structure.","Surface with named attribute.","Construct a new instance.","Surface linker loading structure.","Optical surface.","Adaptive tree cell scheme.","Tree cell enumeration.","Branching cell.","Boundary.","Children.","Terminal populated cell.","Boundary.","Intersecting triangles and their corresponding mesh index.","Construct a new instance.","Reference the cell’s boundary.","Determine the total number of cells used by this cell. …","Determine the number leaf of cells contained used by this …","Determine the number of triangle collision references …","Determine the maximum depth from this cell to a terminal …","If a given position is contained within the cell to being …","Determine the terminal leaf cell containing the given …","Determine what a given Ray would observe. The maximum …","Adaptive tree construction settings.","Tree construction settings.","","","","Construct a new instance.","Properties module.","Collide trait.","Collide trait implementation. Types implementing this …","Check for an overlapping collision.","Emit trait.","Emit trait implementation. Types implementing this trait …","Cast a new ray.","Trace trait.","Trace trait implementation. Types implementing this trait …","Determine if a ray hit occurs.","Distance to the surface along the ray’s line of travel.","Distance to the surface along the ray’s line of travel …","Transformable trait.","Types implementing this trait may be transformed.","Apply the given transformation.","Ray-tracing module.","Hit implementation.","Hit collision information.","","","","","Construct a new instance.","Orientation implementation.","Orientation structure.","","","","","","Construct a new instance.","Construct with an up-direction.","Construct a new instance.","Reference the backward direction.","Reference the left direction.","Reference the downward direction.","Create a forward ray.","Create a backward ray.","Create a upward ray.","Create a downward ray.","Create a right ray.","Create a left ray.","Ray implementation.","Ray structure.","","","","","Construct a new instance.","Destruct self into components.","Move along the direction of travel a given distance.","Rotate the photon with a given pitch and subsequent roll …","Hit-scan result enumeration.","Hit-scan result enumeration.","Boundary collision.","Surface collision.","Construct a new cell boundary detection instance.","Construct a new surface detection instance.","Hit side enumeration.","Side of a surface hit.","Inside of surface hit. d.dot(n) > 0.0","Outside of surface hit. d.dot(n) < 0.0","Construct a new instance.","Check if the side is an inside.","Reference the surface-normal vector. This points away …","Three dimensional Euclidean shapes.","Axis-aligned-bounding-box implementation.","Axis-aligned bounding box geometry. Used for spatial …","","","Construct a new instance.","Construct a new axis-aligned bounding box centred on a …","Initialise the boundary encompassing all of the mesh …","Get mins and maxs together.","Calculate the widths.","Calculate the half-widths.","Calculate the centre position.","Calculate the surface area.","Calculate the volume.","Determine if the given point if contained.","Shrink the aabb by a fraction of its lengths, maintaining …","Expand the aabb by a fraction of its lengths, maintaining …","Generate a random position within the cube’s volume.","Generate a uniformly indexed position within the cube’s …","Smooth triangle-mesh implementation.","Mesh geometry.","","","","Construct a new instance.","Destruct the instance and retrieve the list of triangles.","Mesh loader.","Loadable triangle mesh conglomerate structure.","Smooth triangle implementation.","Triangle geometry with normal interpolation.","","","Construct a new instance.","Construct a new instance from vertices.","Flat triangle implementation.","Triangle.","","","Construct a new instance.","Calculate the side lengths.","Calculate the perimeter length.","Calculate the surface area.","Centre point.","Determine the intersection distance along a <code>Ray</code>’s …","Image tools module.","Formula implementation.","Aspect-ratio enumeration.","Square. 1:1.","Classic photographic film. 3:2.","Golden ratio. ((1+sqrt(5))/2):1","Silver ratio. (1+sqrt(2)):1","Standard. 16:9","Widescreen. 43:18","IPhone XS. (1125 x 2436)","IPhone 7. (750 x 1334)","Custom. (w x h)","Get the pixel ratios.","Determine a resolution for the target number of pixels. …","Calculate the vertical resolution for a given horizontal …","Colour alias.","Colour alias.","Gradient alias.","Colour gradient alias.","Gradient builder implementation.","Loadable colour gradient structure.","Image alias.","Image builder.","","","Construct a new instance.","Construct a new blank instance.","Mathematics.","Aliases.","Two-dimensional real-number vector alias.","Three-dimensional real-number vector alias.","Four-dimensional real-number vector alias.","Two-by-two dimensional real-number matrix alias.","Three-by-three dimensional real-number matrix alias.","Four-by-four dimensional real-number matrix alias.","Two-dimensional discrete-number vector alias.","Three-dimensional discrete-number vector alias.","Four-dimensional discrete-number vector alias.","Two-by-two dimensional discrete-number matrix alias.","Three-by-three dimensional discrete-number matrix alias.","Four-by-four dimensional discrete-number matrix alias.","Normalised two-dimensional vector alias.","Normalised three-dimensional vector alias.","Normalised four-dimensional vector alias.","Two-dimensional real-number position alias.","Three-dimensional real-number position alias.","Four-dimensional real-number position alias.","Two-dimensional discrete-number position alias.","Three-dimensional discrete-number position alias.","Four-dimensional discrete-number position alias.","Two-dimensional rotation alias.","Three-dimensional rotation alias.","Two-dimensional transformation alias.","Three-dimensional transformation alias.","Mathematical function module.","Formula implementation.","Mathematical formulae accepting a single scalar argument.","Constant value. = c","Constant.","Line formula. = mx + c","Offset.","Gradient.","Bifurcation formula. = if x < t { under } else { over }.","Threshold value.","Under value.","Over value.","Constant value spline.","X change points.","Y values.","Linear spline.","X change points.","Y values.","Gradient between points.","Quadratic spline.","X change points.","Y values.","Gradient between points.","Second order term between points.","Construct a constant spline instance.","Construct a linear spline instance.","Construct a linear spline instance.","Construct a quadratic spline instance.","Determine the corresponding output value for the given …","Formula form implementation.","Mathematical formulae accepting a single scalar argument.","Constant value. = c","Line formula. = (x * m) + c","Bifurcation formula. = x < y ? a : b.","Constant value spline.","Linear spline between points.","Connected linear spline between points.","Quadratic spline between points.","Random-Number-Generation module.","Distribution functions.","Sample the Henyey-Greenstein phase function with a given …","Sample the normal distribution.","Sample a gaussian distribution.","Create a random unit vector.","Sample points within a circle using the golden ratio.","Sample points on a sphere’s surface using the golden …","Sample points on a hemisphere’s surface using the …","Probability distribution implementation.","Probability distribution formulae.","Point.","Constant value.","Points.","Possible values.","Linear.","Gradient.","Y-intercept.","Integration constant offset.","Area beneath line in range.","Uniform range.","Minimum value.","Maximum value.","Gaussian distribution.","Average value.","Variance.","Constant spline.","Cumulative distribution function.","Linear spline.","Gradients.","Y-intercepts.","Integration constant offsets.","Area beneath line in each range.","Cumulative distribution function.","Construct a new point instance.","Construct a new points instance.","Construct a new uniform instance.","Construct a new linear instance.","Construct a new gaussian instance.","Construct a new constant spline instance.","Construct a new linear spline instance.","Sample a number from the described distribution.","Probability builder.","Probability distribution builders.","Point.","Points.","Uniform range.","Linear function: xs, ps.","Gaussian distribution.","Constant spline.","Linear spline.","Ordering functions.","Determine the minimum value within a list.","Determine the maximum value within a list.","Determine if the list is sorted in ascending order.","Determine if the list is sorted in descending order.","Get the mode of a slice.","Get the number of kinds within a slice.","Transform form implementation.","Loadable transform structure.","Meta-programming.","Access macro.","Command line argument macro.","Map building macro.","Pause macro.","Ordering module.","Array linker structure.","Array linking structure.","Get the length of the wrapped vec.","Determine if the wrapped vec is unoccupied.","Build trait.","Types implementing this trait can be built into another …","End type to be built.","Build the instance type.","Setup trait.","Types implementing this trait can be linked to a set to …","Type to be built.","Get a list of all required resource keys.","Link the instance type.","Enumerated lists.","Alphabets.","Greek alphabet.","Greek letters.","First letter.","Second letter.","Third letter.","Greek Alpha convenience indexing constant.","Greek Beta convenience indexing constant.","Greek Gamma convenience indexing constant.","Colour systems.","Red-Green-Blue colour representation.","RGB format.","Red channel.","Green channel.","Blue channel.","Red convenience indexing constant.","Green convenience indexing constant.","Blue convenience indexing constant.","Physical dimensions.","Cartesian dimensions.","Cartesian coordinate system.","First spatial dimension.","Second spatial dimension.","Third spatial dimension.","Cartesian X convenience indexing constant.","Cartesian Y convenience indexing constant.","Cartesian Z convenience indexing constant.","Plane-polar dimensions.","Polar enumeration implementation.","Radial distance. [0 : inf]","Angle. [0 : 2*Pi]","Spherical-polar dimensions.","Spherical-polar coordinate system.","Radial distance. [0 : inf]","Angle. [0 : Pi]","Azimuthal angle. [0 : 2*Pi]","Spherical-polar and plane-polar rho convenience indexing …","Spherical-polar and plane-polar theta convenience …","Spherical-polar phi convenience indexing constant.","Map alias.","Map alias type.","Name type.","Human-readable identifier type.","Get the name as a string.","Register structure.","Register used to index named data.","Construct a new instance.","Find if the number of entries is zero.","Get the number of entries.","Access the internal set.","Get a list of the names.","Data set.","Data map.","Construct a new instance.","Construct an instance from a vector of pairs.","Find if the number of entries is zero.","Get the number of entries.","Get a list of the names.","Iterate over the values.","Get a value from the map.","Get a mutable value from the map.","Reference the internal map.","Physics module.","Crossing implementation.","Optical interface crossing information. Calculates …","","","","Construct a new instance.","Calculate the reflection direction and the required …","Get the transmission probability.","Light surface structure.","Photon emission structure.","","","","Construct a new instance.","Emit a new photon.","Light surface structure.","Photon emission structure linker.","Construct a new instance.","Light surface structure.","Buildable light structure.","Construct a new instance.","Loadable light surface structure.","Loadable light structure.","Local optical environment.","Localised optical environment properties.","","","","","","Construct a new instance.","Calculate the interaction coefficient.","Calculate the albedo.","Calculate the shifting probability.","Optical material.","Optical properties.","","","","","","Construct a new instance.","Generate an optical environment for a given wavelength.","Material builder.","Loadable material.","Photon particle.","Photon.","","","","","","","","Construct a new instance.","Set the weight to zero.","Binary specific structures.","Babbage datacube manipulation module.","Operation implementation.","Possible operation enumeration.","Report information about datacube.","Sample the center of a datacube.","Generate a zero cube of the given resolution.","Generate a unit cube of the given resolution.","Generate a zero cube, with a point at the center, of the …","Generate a partially filled cube, with a range of …","Total resolution.","Minimum inclusive filling bound.","Maximum inclusive filling bound.","Remove one cube from another.","Sum cubes together.","Add a value to the datacube.","Subtract a value from the datacube.","Multiply the datacube by the value.","Divide the datacube by the value.","Normalise a datacube.","Clamp the values within datacube.","Piecewise multiply a datacube by another.","Piecewise divide a datacube by another.","Sample the locations for their values. (Points, DataCube, …","Perform the operation.","Operation builder.","Possible operation enumeration.","Report information about datacube.","Sample the center of a datacube.","Generate a zero cube of the given resolution.","Generate a unit cube of the given resolution.","Generate a zero cube, with a point at the center, of the …","Generate a partially filled cube, with a range of …","Total resolution.","Minimum inclusive filling bound.","Maximum inclusive filling bound.","Remove one cube from another.","Sum cubes together.","Add a value to the datacube.","Subtract a value from the datacube.","Multiply the datacube by the value.","Divide the datacube by the value.","Normalise a datacube.","Clamp the values within datacube.","Piecewise multiply a datacube by another.","Piecewise divide a datacube by another.","Sample the locations for their values. (Points, DataCube, …","Operation implementation.","Possible operation enumeration.","Report information about a datacube.","Sample the center of a datacube.","Generate a zero cube of the given resolution.","Generate a unit cube of the given resolution.","Generate a zero cube, with a point at the center, of the …","Generate a partially filled cube, with a range of …","Total resolution.","Minimum inclusive filling bound.","Maximum inclusive filling bound.","Remove one cube from another.","Sum cubes together.","Add a value to the datacube.","Subtract a value from the datacube.","Multiply the datacube by the value.","Divide the datacube by the value.","Normalise a datacube.","Clamp the values within datacube.","Piecewise multiply a datacube by another.","Piecewise divide a datacube by another.","Sample the locations for their values. (Points, DataCube, …","Loadable parameters.","Loadable runtime parameters.","Operations to perform, and their output path.","Cartography surface-to-volume mapping module.","Optical attributes.","Surface attributes.","Material interface, inside material index, outside …","Partially reflective mirror, reflection fraction.","Attribute linker.","Surface attribute setup.","Material interface, inside material name, outside …","Partially reflective mirror, reflection fraction.","Ray caster enumeration.","Ray caster generation.","Direction.","Target (m).","Soft-targeting (samples, target (m), spread (rad)).","Radiant (samples).","Calculate the total number of samples.","Retrieve the number of potential casts.","Material detection engine function.","Determine the material contents of a given voxel.","Event enumeration.","Event determination enumeration.","Grid boundary collision.","Surface hit.","Construct a new instance. Surface interactions are …","Simulation input.","Cartographer simulation resources conglomerate.","Material register.","Attributes.","Hit-scan tree.","Measurement grid.","General settings.","Construct a new instance.","Output data structure.","Cartographer output data.","Material name register.","Missing materials.","Occupying materials.","Construct a new instance.","Runtime parameters.","Runtime parameters.","Simulation specific settings.","Tree settings.","Measurement grid settings.","Surfaces.","Attributes.","Construct a new instance.","Buildable parameters.","Runtime parameters builder.","Construct a new instance.","Loadable parameters.","Loadable runtime parameters.","Simulation running functions.","Run a multi-threaded Cartography simulation.","Run a Cartography simulation using a single thread.","Cartographer settings.","General settings structure.","","","","","","Construct a new instance.","Super sampling options.","Super sampling types.","Single sample.","Uniform.","Random.","Calculate the total number of samples.","Determine the nth sampling position.","Diffusion simulation module.","Simulation input.","Diffuse simulation resources conglomerate.","Map of diffusion coeffs.","Map sources/sinks.","Measurement grid.","General settings.","Construct a new instance.","Output data structure.","Diffuse output data.","","","Construct a new instance.","Runtime parameters.","Runtime parameters.","Simulation specific settings.","Measurement grid.","Diffusion coefficents map.","Initial concentration map.","Source map.","Construct a new instance.","Loadable parameters.","Loadable runtime parameters.","Construct a new instance.","Loadable parameters.","Loadable runtime parameters.","Simulation control functions.","Run a diffusion simulation.","Integrate forward a given amount of time.","Diffuse settings.","General settings structure.","","","","","Construct a new instance.","Diffusion stencils module.","Gradient-type stencil structure.","Gradient stencil implementation.","Construct a new instance.","Calculate the rate of diffusion.","Reflective-type stencil structure.","Reflective stencil implementation.","Construct a new instance.","Calculate the rate of diffusion.","Reaction kinetics module.","Simulation input.","Flask simulation resources conglomerate.","Register of known species.","Sources.","Reactor processor.","General settings.","Construct a new instance.","Runtime parameters.","Runtime parameters.","Simulation specific settings.","Initial values.","Sources.","Reactions.","Construct a new instance.","Loadable parameters.","Loadable runtime parameters.","Simulation control functions.","Run a Flask simulation using a single thread.","Flask settings.","General settings structure.","","","","","Construct a new instance.","Reaction-diffusion simulation module.","Simulation input.","Reactor simulation resources conglomerate.","Register of known species.","Reactor processor.","Map of diffusion coeffs.","Map of source/sinks.","Map of rate multipliers.","Measurement grid.","General settings.","Construct a new instance.","Runtime parameters.","Runtime parameters.","Simulation specific settings.","Measurement grid.","List of diffusion coefficients, initial values, and …","Reaction rate multiplier map.","Reactions.","Construct a new instance.","Buildable parameters.","Buildable runtime parameters.","Construct a new instance.","Loadable parameters.","Loadable runtime parameters.","Simulation control functions.","Run a multi-threaded reaction-diffusion simulation.","Integrate forward a given amount of time.","Reactor settings.","General settings structure.","","","","","","","","Construct a new instance.","Diffusion stencils module.","Gradient-type stencil structure.","Gradient stencil implementation.","Construct a new instance.","Calculate the rate of diffusion.","Reflective-type stencil structure.","Reflective stencil implementation.","Construct a new instance.","Calculate the rate of diffusion.","Monte Carlo Radiative-transfer module.","Optical attributes.","Surface attributes.","Material interface, inside material reference, outside …","Partially reflective mirror, reflection fraction.","Spectrometer detector.","Imager detector id, width, orientation.","Attribute third-stage material linker.","Surface attribute setup.","Material interface, inside material name, outside …","Partially reflective mirror, reflection fraction.","Spectrometer id.","Imager id, width, orientation.","Attribute second-stage spectrometer linker.","Surface attribute setup. Handles detector linking.","Material interface, inside material name, outside …","Partially reflective mirror, reflection fraction.","Spectrometer id, range, resolution.","Imager id, horizontal size, orientation.","Attribute first-stage imager linker.","Surface attribute setup. Handles detector linking.","Material interface, inside material name, outside …","Partially reflective mirror, reflection fraction.","Spectrometer id, range, resolution.","Imager id, resolution, horizontal width (m), center, …","Engine function handler.","Engine selection.","Standard sampling engine.","Photography engine.","Fluorescence engine.","Run the engine for a single photon.","Engine selection.","Engine selection.","Standard sampling engine.","Photography engine.","Fluorescence engine.","Loadable Engine selection.","Engine selection.","Standard sampling engine.","Photography engine.","Fluorescence engine.","Engine functions.","Fluorescence photon-lifetime engine function.","Lifetime of a single photon capable of participating in …","Photography photon-lifetime engine function.","Photograph the life of a single photon.","Generate the RGB components of a given wavelength.","Standard photon-lifetime engine function.","Simulate the life of a single photon.","Event enumeration.","Event determination enumeration.","Voxel boundary collision.","Scattering event.","Surface hit.","Construct a new instance. Surface interactions are …","Simulation input.","Real-space to frame-space transformer.","","","Construct a new instance.","Transform a position in real-space to a pixel element.","Simulation input.","Picture frame builder.","Simulation input.","MCRT simulation resources conglomerate.","Spectrometer register.","Materials.","Attributes.","Emission light.","Hit-scan tree.","Measurement grid.","General settings.","Construct a new instance.","Output data structure.","MCRT output data.","Emission power.","Photo-energy.","Absorptions.","Wavelength shifts.","Spectrometer data.","Image data.","","","","","Construct a new instance.","Runtime parameters.","Runtime parameters.","Simulation specific settings.","Tree settings.","Measurement grid settings.","Surfaces.","Attributes.","Materials.","Main light.","Engine selection.","Construct a new instance.","Buildable parameters.","Buildable runtime parameters.","Construct a new instance.","Loadable parameters.","Loadable runtime parameters.","Peel-off function.","Perform a peel-off event. Calculate the change in weight …","Simulation control functions.","Run a multi-threaded MCRT simulation.","Photon scattering function.","Perform a photon scattering event.","Perform a photon scattering event with a probability of …","MCRT settings.","General settings structure.","","","","","","","Construct a new instance.","Photon scattering function.","Handle a surface collision.","Photon movement function.","Move the photon forward and record the flight.","Rendering module.","Attributes implementation.","Surface attributes.","Opaque coloured surface.","Partially reflective mirror, absorption fraction.","Partially transparent, absorption fraction.","Refractive, absorption fraction, inside and outside …","Luminous surface, brightness multiplier.","Switchable condition, conditional value.","Visual attributes.","Surface attribute setup.","Opaque coloured surface.","Partially reflective mirror, absorption fraction.","Partially transparent, absorption fraction.","Refractive, absorption fraction, inside and outside …","Luminous surface, brightness multiplier.","Switchable condition, conditional value.","Engine function alias.","Rendering engine function type.","Engine selection.","Engine selection.","Antler rendering engine.","Cross-section rendering engine.","Engine functions.","Pixel-sampling engine function.","Calculate the colour of a single tracer.","Pixel-sampling engine function.","Calculate the colour of a single tracer.","Render input.","Rendering simulation resources conglomerate.","Gradients.","Attributes.","Capturing camera.","Hit-scan tree.","General settings.","Shader settings.","Image number.","Construct a new instance.","Lighting calculation.","Calculate the lighting factor. Zero indicates darkness. …","Calculate the shadowing factor. Zero completely …","Calculate the occlusion experienced over a distance along …","Output data structure.","Rendering output data.","Render time.","Lighting factors.","Shadowing factors.","Colouring.","Construct a new instance.","Runtime parameters.","Runtime parameters.","Rendering specific settings.","Tree settings.","Surfaces.","Attributes.","Colour gradients.","Main camera.","Shader settings.","Engine selection.","Construct a new instance.","Loadable parameters.","Loadable runtime parameters.","Construct a new instance.","Loadable parameters.","Loadable runtime parameters.","Simulation running functions.","Run a multi-threaded rendering simulation.","Run a rendering simulation using a single thread.","Rendering settings.","General settings structure.","","","","","Construct a new instance.","Shader settings.","Colouring settings.","","","","","","","","","","","Construct a new instance.","Shader settings.","Colouring settings.","Colour particle.","Colour particle.","","","","","Construct a new instance.","Useful tools.","Binner implementation.","One-dimensional binning structure.","","","Construct a new Range.","Calculate the bin width.","Determine the corresponding bin.","Determine the corresponding bin if the value is within …","Index manipulation functions.","Determine the linear index form a two-dimension index and …","Create the next three-dimensional index from the given …","Progress-Bar implementation.","Progress-bar structure.","Construct a new instance.","Tick the bar forward a single increment.","Request a block of values to work on. Return the …","Check if the progress bar is complete.","Finish with a message.","Range implementation.","One-dimensional inclusive Range.","","","Construct a new Range.","Construct an infinite Range.","Calculate the width of the Range.","Determine if a value is contained within the Range.","Determine if the Range intersects with another given …","From a range of overlapping values.","Silent progress-Bar implementation.","Silent progress-bar structure.","Construct a new instance.","Request a block of values to work on. Return the …","Check if the progress bar is complete.","Validation trait.","Types implementing this trait can be queried for validity.","Check if the current state is valid.","Utilities.","Formatting module.","Display trait.","Types implementing this trait can be analysed to produce …","End type to be built.","Create a displayable instance.","Banner printing functions.","Print a colourful title bar to the terminal.","Print a section bar to the terminal.","Print a sub-section message to the terminal.","Print a sub-sub-section message to the terminal.","Datacube formatting functions.","Three-dimensional array analysis structure.","Construct a new instance.","Datacube formatting functions.","Two-dimensional array analysis structure.","Construct a new instance.","Datacube formatting functions.","Four-dimensional array analysis structure.","Construct a new instance.","Gradient formatting function.","Create a string of a gradients colour.","Reporting functions.","Terminal width calculation function.","Determine the terminal width. Return the fallback size if …","Installation information module.","Install directory information.","Get the arc installation directory path from the …","Set and get the input and output directories. Returned …","Executable information.","Determine the name of the executable.","Succinctly create a reference method for the given …","Succinctly create a clone method for the given variable.","Import command line arguments as a requested type.","Concisely construct a hashmap.","Pause the thread for the given number of milliseconds.","Report an object and either its associated name, or a …","Report an iterable object and either its associated name, …","Report an object and either its associated name, or a …","Report an iterable object and either its associated name, …et a list of all required resource keys.","Link the instance type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,1,0,0,2,0,0,3,3,3,0,0,0,0,4,4,0,0,0,0,0,5,5,5,5,0,0,6,6,6,6,6,6,6,6,0,0,7,7,7,7,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,9,9,0,0,10,10,0,0,11,11,0,0,12,12,0,0,0,0,0,13,13,13,13,13,13,13,13,0,0,14,14,0,0,15,15,15,15,15,15,15,15,15,15,15,0,0,16,16,16,16,16,0,0,0,17,17,17,17,17,17,17,17,17,0,0,18,18,18,18,0,0,19,19,19,0,0,20,0,0,0,0,21,22,22,21,23,23,21,21,21,21,21,21,21,21,21,0,0,24,24,24,24,0,0,0,25,0,0,26,0,0,27,27,27,0,0,28,0,0,0,29,29,29,29,29,0,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,31,31,31,31,31,31,31,31,0,0,32,32,32,32,0,0,33,33,33,33,33,0,0,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,0,35,35,35,35,35,0,0,0,0,36,36,36,36,0,0,37,37,37,37,37,37,37,37,0,0,0,38,38,38,38,38,38,38,38,38,38,38,38,0,0,0,0,0,0,0,0,39,39,39,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,41,40,42,42,40,43,43,43,40,44,44,40,45,45,45,40,46,46,46,46,40,40,40,40,40,0,0,47,47,47,47,47,47,47,0,0,0,0,0,0,0,0,0,0,0,48,49,48,50,48,51,51,51,51,48,52,52,48,53,53,48,54,48,55,55,55,55,55,48,48,48,48,48,48,48,48,0,0,56,56,56,56,56,56,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,57,0,0,58,58,0,0,59,59,59,0,0,0,0,60,60,60,0,0,0,0,0,0,61,61,61,0,0,0,0,0,0,62,62,62,0,0,0,0,0,63,63,0,0,64,64,64,0,0,0,0,0,0,0,65,0,0,66,66,66,66,66,0,0,67,67,67,67,67,67,67,67,67,0,0,0,68,68,68,68,68,68,0,0,69,69,69,69,69,0,0,70,0,0,71,0,0,0,0,72,72,72,72,72,72,72,72,72,0,0,73,73,73,73,73,73,73,0,0,0,0,74,74,74,74,74,74,74,74,74,0,0,0,0,75,75,75,75,75,75,76,76,76,75,75,75,75,75,75,75,75,75,75,75,75,0,0,77,77,77,77,77,77,78,78,78,77,77,77,77,77,77,77,77,77,77,77,0,0,79,79,79,79,79,79,80,80,80,79,79,79,79,79,79,79,79,79,79,79,0,0,81,0,0,0,82,82,0,0,83,83,0,0,84,84,84,84,84,84,0,0,0,0,85,85,85,0,0,86,86,86,86,86,86,0,0,87,87,87,87,0,0,88,88,88,88,88,88,0,0,89,0,0,0,0,0,0,0,90,90,90,90,90,90,0,0,91,91,91,91,91,0,0,0,92,92,92,92,92,0,0,93,93,93,0,0,94,94,94,94,94,94,0,0,95,0,0,0,0,0,0,0,96,96,96,96,96,0,0,0,97,97,0,0,98,98,0,0,0,99,99,99,99,99,0,0,100,100,100,100,100,0,0,0,0,0,0,101,101,101,101,101,0,0,0,102,102,102,102,102,102,102,102,0,0,103,103,103,103,103,103,0,0,104,0,0,0,0,0,0,0,105,105,105,105,105,105,105,105,0,0,0,106,106,0,0,107,107,0,0,0,108,108,108,108,0,0,109,109,109,109,0,0,110,110,110,110,0,0,111,111,111,111,0,0,112,112,112,112,0,0,113,113,113,0,0,114,114,114,0,0,0,0,0,0,0,0,0,0,115,115,115,115,0,0,116,116,116,116,0,0,0,0,117,117,117,117,117,117,117,117,0,0,118,118,118,118,118,118,118,118,118,118,118,0,0,119,119,119,119,119,119,119,119,119,0,0,120,0,0,0,0,0,0,0,0,0,0,0,121,121,121,121,121,121,121,0,0,0,0,0,0,0,122,122,122,122,122,122,0,0,123,123,123,123,123,123,0,0,0,0,124,124,0,0,0,0,0,0,0,125,125,125,125,125,125,125,125,0,0,0,0,0,0,126,126,126,126,126,0,0,127,127,127,127,127,127,127,127,127,0,0,128,0,0,0,0,0,0,0,129,129,129,129,129,0,0,130,130,130,130,130,130,130,130,130,130,130,0,0,0,0,131,131,131,131,131,0,0,0,132,132,132,132,132,132,0,0,0,0,0,133,133,133,133,133,0,0,134,134,134,134,134,134,134,134,0,0,135,135,135,0,0,136,0,0,0,0,137,137,0,0,0,0,0,0,0,138,0,0,139,0,0,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,2,141,142,7,35,11,14,16,18,143,24,34,144,38,145,47,56,146,57,67,147,148,79,81,83,84,149,90,91,150,96,151,101,104,152,105,111,114,153,154,121,123,124,155,129,156,134,11,16,143,144,67,147,79,149,150,151,152,114,154,155,6,7,39,11,87,93,118,126,34,35,36,37,157,35,36,37,34,34,34,35,35,35,36,36,36,37,37,37,35,36,37,14,18,145,47,56,146,67,71,148,77,89,95,104,113,153,120,124,128,2,2,141,141,142,142,20,20,57,57,67,67,70,70,83,83,109,109,110,110,111,111,123,123,156,156,8,8,8,8,8,8,8,8,8,8,8,8,8,8,67,1,3,5,6,11,14,18,29,31,32,33,34,35,36,37,38,39,40,48,146,65,74,79,84,91,118,131,132,134,5,65,65,65,132,132,134,134,65,1,2,141,4,142,8,11,14,16,18,143,24,30,34,144,38,145,40,47,56,146,57,65,67,147,148,79,81,83,84,149,90,91,150,96,97,98,151,101,104,152,105,106,107,111,114,153,154,121,123,124,155,129,156,132,134,1,2,141,4,142,6,7,11,13,14,15,16,17,18,19,20,21,24,30,34,35,38,145,40,47,48,56,57,65,66,67,69,70,71,147,73,148,79,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,120,121,122,123,124,125,126,127,128,129,130,156,132,134,138,139,140,5,5,5,6,7,39,87,93,118,126,11,65,67,2,141,142,11,14,16,18,143,24,34,144,38,145,47,56,146,57,65,67,147,148,79,81,83,84,149,90,91,150,96,151,101,104,152,105,111,114,153,154,121,123,124,155,129,156,134],"f":[null,null,null,[[["f64",15],["vec",3]]],[[],["f64",15]],[[["arrayview1",6]],["f64",15]],[[["arrayview1",6]],["f64",15]],null,null,[[],["f64",15]],null,null,[[["array1",6],["f64",15],["rate",3]]],[[["arrayview1",6]],[["array1",6],["f64",15]]],[[]],null,null,null,null,[[["f64",15],["array2",6],["array1",6],["rate",3]]],[[["arrayview1",6]],[["array1",6],["f64",15]]],null,null,null,null,null,[[],["f64",15]],[[],["i32",15]],[[["f64",15],["i32",15]]],[[],["f64",15]],null,null,[[],["binner",3]],[[],["array1",6]],[[["f64",15],["u64",15]]],[[["u64",15],["range",3]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],null,null,[[],["vec",3]],[[["vec",3],["vec",3],["vec",3],["string",3]]],[[],[["vec",3],["vec",3]]],[[["array2",6],["vec",3],["string",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["path",3]],[["result",4],["error",4]]],[[["str",15]],[["result",4],["error",4]]],null,null,null,null,null,[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],null,null,null,[[["path",3]],[["error",4],["result",4]]],null,null,null,null,null,null,[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],null,null,null,null,[[]],[[],["usize",15]],[[["f64",15],["orient",3],["usize",15]]],[[],["pos3",6]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["ray",3]],null,null,[[["f64",15],["usize",15],["option",4],["pos3",6]]],[[["vec3",6]]],null,null,null,null,null,null,null,[[["ray",3]]],[[["pos3",6],["vec",3]]],[[["pos3",6],["vec",3]]],[[["mesh",3]]],[[["f64",15],["array3",6],["grid",3]]],[[],["ray",3]],null,null,null,null,null,null,null,null,null,null,[[],["cube",3]],[[]],[[],["vec3",6]],[[["cube",3]]],[[],["f64",15]],[[],["usize",15]],[[["pos3",6]],["option",4]],[[],["cube",3]],[[["pos3",6]],["option",4]],null,null,[[],["cube",3]],[[]],[[["cube",3]]],[[],["usize",15]],null,null,[[],["mesh",3]],[[]],[[["mesh",3]]],null,null,[[["name",3],["mesh",3]]],null,null,null,null,null,null,null,null,null,null,[[["set",3],["treesettings",3]]],[[],["cube",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["pos3",6]],["option",4]],[[["pos3",6]]],[[["ray",3],["f64",15]],[["option",4],["hit",3]]],null,null,[[],["usize",15]],[[],["u32",15]],[[],["f64",15]],[[["usize",15],["u32",15],["f64",15]]],null,null,null,[[["cube",3]],["bool",15]],null,null,[[],["ray",3]],null,null,[[["ray",3]],["bool",15]],[[["ray",3]],[["f64",15],["option",4]]],[[["ray",3]],["option",4]],null,null,[[["trans3",6]]],null,null,null,[[]],[[],["f64",15]],[[],["f64",15]],[[],["side",4]],[[["f64",15],["side",4]]],null,null,[[],["pos3",6]],[[],["pos3",6]],[[],["dir3",6]],[[],["dir3",6]],[[],["dir3",6]],[[["ray",3]]],[[["ray",3],["dir3",6]]],[[["pos3",6],["pos3",6]]],[[],["dir3",6]],[[],["dir3",6]],[[],["dir3",6]],[[],["ray",3]],[[],["ray",3]],[[],["ray",3]],[[],["ray",3]],[[],["ray",3]],[[],["ray",3]],null,null,[[],["pos3",6]],[[],["pos3",6]],[[],["dir3",6]],[[],["dir3",6]],[[["pos3",6],["dir3",6]]],[[]],[[["f64",15]]],[[["f64",15]]],null,null,null,null,[[["f64",15]]],[[["hit",3]]],null,null,null,null,[[["dir3",6],["dir3",6]]],[[],["bool",15]],[[],["dir3",6]],null,null,null,[[],["pos3",6]],[[],["pos3",6]],[[["pos3",6]]],[[["pos3",6],["vec3",6]]],[[]],[[]],[[],["vec3",6]],[[],["vec3",6]],[[],["pos3",6]],[[],["f64",15]],[[],["f64",15]],[[["pos3",6]],["bool",15]],[[["f64",15]]],[[["f64",15]]],[[],["pos3",6]],[[],["pos3",6]],null,null,[[],["cube",3]],[[],["vec",3]],[[],["f64",15]],[[["smoothtriangle",3],["vec",3]]],[[],[["smoothtriangle",3],["vec",3]]],null,null,null,null,[[],["triangle",3]],[[]],[[["triangle",3]]],[[]],null,null,[[]],[[],["dir3",6]],[[]],[[]],[[],["f64",15]],[[],["f64",15]],[[],["pos3",6]],[[["ray",3]],["option",4]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["f64",15]],[[["u64",15]]],[[["u64",15]],["u64",15]],null,null,null,null,null,null,null,null,[[],["array2",6]],[[],["array2",6]],[[["array2",6],["colour",6]]],[[["colour",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["array1",6],["f64",15]]],[[["array1",6],["f64",15]]],[[["array1",6],["f64",15]]],[[["array1",6],["f64",15]]],[[["f64",15]],["f64",15]],null,null,null,null,null,null,null,null,null,null,null,[[["f64",15]],["f64",15]],[[],["f64",15]],[[["f64",15]],["f64",15]],[[],["dir3",6]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["f64",15]]],[[["array1",6],["f64",15]]],[[["f64",15]]],[[]],[[["f64",15]]],[[["array1",6],["f64",15],["array1",6]]],[[["array1",6]]],[[],["f64",15]],null,null,null,null,null,null,null,null,null,null,[[],["f64",15]],[[],["f64",15]],[[],["bool",15]],[[],["bool",15]],[[],[["eq",8],["clone",8],["option",4],["hash",8]]],[[],["usize",15]],null,null,null,null,null,null,null,null,null,null,[[],["usize",15]],[[],["bool",15]],null,null,null,[[]],null,null,null,[[],[["name",3],["vec",3]]],[[["set",3]],[["error",4],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["string",3]],null,null,[[["name",3],["vec",3]]],[[],["bool",15]],[[],["usize",15]],[[],["set",3]],[[],[["name",3],["vec",3]]],null,null,[[["name",3],["map",6]]],[[["vec",3]],[["result",4],["error",4]]],[[],["bool",15]],[[],["usize",15]],[[],[["name",3],["vec",3]]],[[],[["name",3],["values",3]]],[[["name",3]],["option",4]],[[["name",3]],["option",4]],[[],["map",6]],null,null,null,[[],["f64",15]],[[],["dir3",6]],[[],["option",4]],[[["f64",15],["dir3",6]]],[[["dir3",6]],["dir3",6]],[[],["f64",15]],null,null,[[],["f64",15]],[[],["probability",4]],[[],["material",3]],[[["f64",15],["emitter",4],["material",3],["probability",4]]],[[["f64",15]],["photon",3]],null,null,[[["f64",15],["emitter",4],["name",3],["probability",4]]],null,null,[[["f64",15],["emitter",4],["probabilitybuilder",4],["name",3]]],null,null,null,null,[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[["f64",15]]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],null,null,[[],["formula",4]],[[],["formula",4]],[[],["option",4]],[[],["option",4]],[[],["formula",4]],[[["formula",4],["option",4]]],[[["f64",15]],["local",3]],null,null,null,null,[[],["ray",3]],[[],["ray",3]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[["ray",3],["f64",15]]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["path",3],["string",3]],[["result",4],["error",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["pos3",6],["i32",15]],["ray",3]],[[],["i32",15]],null,[[["input",3],["output",3],["threadrng",3]]],null,null,null,null,[[["f64",15],["option",4],["hit",3]]],null,null,null,null,null,null,null,[[["grid",3],["settings",3],["register",3],["tree",4],["set",3]]],null,null,null,null,null,[[["register",3]]],null,null,null,null,null,null,null,[[["attributelinker",4],["surfacelinker",3],["set",3],["treesettings",3],["grid",3],["set",3],["settings",3]]],null,null,[[["set",3],["surfacelinker",3],["attributelinker",4],["set",3],["treesettings",3],["gridbuilder",3],["settings",3]]],null,null,null,[[["input",3]],[["result",4],["output",3],["error",4]]],[[["input",3]],[["result",4],["output",3],["error",4]]],null,null,[[],["usize",15]],[[],["f64",15]],[[],["u64",15]],[[],["caster",4]],[[],["supersample",4]],[[["usize",15],["f64",15],["supersample",4],["u64",15],["caster",4]]],null,null,null,null,null,[[],["usize",15]],[[["cube",3],["usize",15]],["pos3",6]],null,null,null,null,null,null,null,[[["array3",6],["settings",3],["grid",3]]],null,null,[[],["cube",3]],[[],["f64",15]],[[["cube",3]]],null,null,null,null,null,null,null,[[["settings",3],["f64",15],["array3",6],["grid",3]]],null,null,[[["settings",3],["f64",15],["array3",6],["gridbuilder",3]]],null,null,null,[[["f64",15],["array3",6],["input",3],["path",3]],[["result",4],["array3",6],["error",4]]],[[["f64",15],["array3",6],["vec3",6],["input",3]]],null,null,[[],["f64",15]],[[],["usize",15]],[[],["f64",15]],[[],["usize",15]],[[["f64",15],["usize",15]]],null,null,null,[[["array3",6]]],[[["f64",15],["vec3",6]],["f64",15]],null,null,[[["array3",6]]],[[["f64",15],["vec3",6]],["f64",15]],null,null,null,null,null,null,null,[[["settings",3],["reactor",3],["register",3],["array1",6]]],null,null,null,null,null,null,[[["reactorlinker",3],["settings",3],["arraylinker",3]]],null,null,null,[[["array1",6],["f64",15],["input",3]],[["array2",6],["error",4],["result",4]]],null,null,[[],["f64",15]],[[],["usize",15]],[[],["f64",15]],[[],["f64",15]],[[["f64",15],["usize",15]]],null,null,null,null,null,null,null,null,null,null,[[["settings",3],["array3",6],["array4",6],["reactor",3],["register",3],["grid",3]]],null,null,null,null,null,null,null,[[["settings",3],["f64",15],["array3",6],["reactorlinker",3],["grid",3],["set",3]]],null,null,[[["settings",3],["f64",15],["array3",6],["reactorlinker",3],["gridbuilder",3],["set",3]]],null,null,null,[[["f64",15],["input",3],["array4",6],["path",3]],[["array4",6],["error",4],["result",4]]],[[["f64",15],["vec3",6],["input",3],["array4",6]],[["error",4],["result",4]]],null,null,[[],["f64",15]],[[],["usize",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["usize",15]],[[],["usize",15]],[[["f64",15],["usize",15]]],null,null,null,[[["array4",6]]],[[["f64",15],["vec3",6]],["f64",15]],null,null,[[["array4",6]]],[[["f64",15],["vec3",6]],["f64",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["output",3],["photon",3],["input",3],["threadrng",3]]],null,null,null,null,null,null,null,null,null,null,null,null,[[["formula",4],["output",3],["photon",3],["array3",6],["input",3],["threadrng",3]]],null,[[["set",3],["output",3],["photon",3],["input",3],["threadrng",3]]],[[["f64",15]]],null,[[["output",3],["photon",3],["input",3],["threadrng",3]]],null,null,null,null,null,[[["f64",15],["option",4],["hit",3]]],null,null,[[],["pos3",6]],[[]],[[["pos3",6],["mat4",6]]],[[["pos3",6]],["option",4]],null,null,null,null,null,null,null,null,null,null,null,[[["tree",4],["set",3],["settings",3],["set",3],["register",3],["light",3],["grid",3]]],null,null,null,null,null,null,null,null,[[],["register",3]],[[],["register",3]],[[],["cube",3]],[[],["f64",15]],[[["vec",3],["image",3],["cube",3],["histogram",3],["register",3],["vec",3]]],null,null,null,null,null,null,null,null,null,null,[[["material",3],["grid",3],["set",3],["attributelinkerlinkerlinker",4],["settings",3],["surfacelinker",3],["set",3],["set",3],["treesettings",3],["lightlinker",3],["engine",4]]],null,null,[[["enginebuilder",4],["set",3],["attributelinkerlinkerlinker",4],["settings",3],["surfacelinker",3],["gridbuilder",3],["set",3],["treesettings",3],["materialbuilder",3],["set",3],["lightlinkerbuilder",3]]],null,null,null,[[["photon",3],["input",3],["local",3],["pos3",6]],[["f64",15],["option",4]]],null,[[["output",3],["engine",4],["input",3]],[["result",4],["output",3],["error",4]]],null,[[["photon",3],["local",3],["threadrng",3]]],[[["photon",3],["local",3],["threadrng",3]]],null,null,[[],["usize",15]],[[],["usize",15]],[[],["f64",15]],[[],["u64",15]],[[],["f64",15]],[[],["u64",15]],[[["usize",15],["f64",15],["u64",15]]],null,[[["photon",3],["output",3],["local",3],["hit",3],["threadrng",3]]],null,[[["photon",3],["f64",15],["output",3],["local",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["output",3],["input",3],["tracer",3],["threadrng",3]]],null,[[["output",3],["input",3],["tracer",3],["threadrng",3]]],null,null,null,null,null,null,null,null,null,[[["usize",15],["camera",3],["set",3],["tree",4],["set",3],["settings",3],["shader",3]]],null,[[["dir3",6],["ray",3],["input",3]],["f64",15]],[[["dir3",6],["input",3],["ray",3],["threadrng",3]],["f64",15]],[[["ray",3],["f64",15],["input",3]],["f64",15]],null,null,null,null,null,null,[[["gradient",6],["usize",15]]],null,null,null,null,null,null,null,null,null,null,[[["camera",3],["settings",3],["gradient",6],["set",3],["shaderlinker",3],["surfacelinker",3],["attributelinker",4],["set",3],["treesettings",3],["set",3],["engine",6]]],null,null,[[["gradientbuilder",3],["settings",3],["set",3],["set",3],["surfacelinker",3],["attributelinker",4],["camerabuilder",3],["treesettings",3],["set",3],["shaderlinker",3],["enginebuilder",4]]],null,null,null,[[["input",3],["engine",6]],[["result",4],["output",3],["error",4]]],[[["input",3],["engine",6]],[["result",4],["output",3],["error",4]]],null,null,[[],["usize",15]],[[],["f64",15]],[[],["u64",15]],[[],["f64",15]],[[["usize",15],["f64",15],["u64",15]]],null,null,[[],["pos3",6]],[[]],[[]],[[],["i32",15]],[[]],[[],["f64",15]],[[],["option",4]],[[],["option",4]],[[],["gradient",6]],[[],["gradient",6]],[[["f64",15],["option",4],["i32",15],["pos3",6],["option",4],["gradient",6]]],null,null,null,null,[[],["ray",3]],[[],["ray",3]],[[],["f64",15]],[[],["f64",15]],[[["ray",3],["f64",15]]],null,null,null,[[],["range",3]],[[],["u64",15]],[[["u64",15],["range",3]]],[[],["f64",15]],[[["f64",15]],["usize",15]],[[["f64",15]],[["usize",15],["option",4]]],null,[[],["usize",15]],[[["usize",15]]],null,null,[[["usize",15],["str",15]]],[[]],[[["usize",15]],["option",4]],[[],["bool",15]],[[["str",15]]],null,null,[[],["f64",15]],[[],["f64",15]],[[["f64",15]]],[[]],[[],["f64",15]],[[["f64",15]],["bool",15]],[[],["bool",15]],[[],["option",4]],null,null,[[["usize",15]]],[[["usize",15]],["option",4]],[[],["bool",15]],null,null,[[],["bool",15]],null,null,null,null,null,[[]],null,[[["usize",15],["str",15]]],[[["usize",15],["str",15]]],[[["usize",15],["str",15]]],[[["str",15]]],null,null,[[["array3",6]]],null,null,[[["array2",6]]],null,null,[[["array4",6]]],null,[[["usize",15],["gradient",3]],["string",3]],null,null,[[["usize",15]],["usize",15]],null,null,[[],[["pathbuf",3],["result",4],["varerror",4]]],[[["option",4],["pathbuf",3]],[["result",4],["error",4]]],null,[[],[["error",4],["result",4],["string",3]]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],[["outofbounds",3],["result",4]]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["rgb",3],["u8",15]],["withbackground",3]],[[["rgb",3],["u8",15]],["withforeground",3]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["error",4],["result",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["path",3]],[["result",4],["error",4]]],[[["cube",3]],["bool",15]],[[["cube",3]],["bool",15]],[[["cube",3]],["bool",15]],[[["cube",3]],["bool",15]],[[],["ray",3]],[[],["ray",3]],[[],["ray",3]],[[],["ray",3]],[[["ray",3]],["bool",15]],[[["ray",3]],[["f64",15],["option",4]]],[[["ray",3]],["option",4]],[[["ray",3]],["bool",15]],[[["ray",3]],[["f64",15],["option",4]]],[[["ray",3]],["option",4]],[[["ray",3]],["bool",15]],[[["ray",3]],[["f64",15],["option",4]]],[[["ray",3]],["option",4]],[[["ray",3]],["bool",15]],[[["ray",3]],[["f64",15],["option",4]]],[[["ray",3]],["option",4]],[[["trans3",6]]],[[["trans3",6]]],[[["trans3",6]]],[[]],[[],["grid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["name",3],["vec",3]]],[[["set",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[["set",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[["set",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[["set",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[["set",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[["set",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[["set",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[["set",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[["set",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[["set",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[["set",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[["set",3]],[["error",4],["result",4]]],[[],[["name",3],["vec",3]]],[[["set",3]],[["error",4],["result",4]]],[[["str",15]]],[[["poisonerror",3]]],[[["error",3]]],[[["varerror",4]]],[[["error",3]]],[[["parseinterror",3]]],[[["parsefloaterror",3]]],[[["fromhexerror",4]]],[[["error",4]]],[[["error",3]]],[[["encodingerror",4]]],[[["shapeerror",3]]],[[["minmaxerror",4]]],[[["error",4]]],[[]],[[],["rate",3]],[[],["reaction",3]],[[],["average",3]],[[],["histogram",3]],[[],["redirect",4]],[[],["camerabuilder",3]],[[],["gridbuilder",3]],[[],["hit",3]],[[],["ray",3]],[[],["scan",4]],[[],["side",4]],[[],["cube",3]],[[],["mesh",3]],[[],["smoothtriangle",3]],[[],["triangle",3]],[[],["aspectratio",4]],[[],["image",3]],[[],["formula",4]],[[],["probability",4]],[[],["trans3builder",3]],[[],["name",3]],[[],["photon",3]],[[],["operationbuilderloader",4]],[[],["caster",4]],[[],["supersample",4]],[[],["output",3]],[[],["tracer",3]],[[],["binner",3]],[[],["range",3]],[[],["average",3]],[[["name",3]],["ordering",4]],[[["name",3]],["bool",15]],[[["name",3]],["bool",15]],[[["binner",3]],["bool",15]],[[["binner",3]],["bool",15]],[[["range",3]],["bool",15]],[[["range",3]],["bool",15]],[[["name",3]],[["ordering",4],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]]],"p":[[3,"Rate"],[3,"RateLinker"],[3,"Reaction"],[3,"Reactor"],[3,"Average"],[3,"Histogram"],[3,"Table"],[4,"Error"],[8,"File"],[8,"Load"],[4,"Redirect"],[8,"Save"],[3,"Camera"],[3,"CameraBuilder"],[4,"Emitter"],[4,"EmitterLoader"],[3,"Grid"],[3,"GridBuilder"],[3,"Surface"],[3,"SurfaceLinker"],[4,"Tree"],[13,"Branch"],[13,"Leaf"],[3,"TreeSettings"],[8,"Collide"],[8,"Emit"],[8,"Trace"],[8,"Transformable"],[3,"Hit"],[3,"Orient"],[3,"Ray"],[4,"Scan"],[4,"Side"],[3,"Cube"],[3,"Mesh"],[3,"SmoothTriangle"],[3,"Triangle"],[4,"AspectRatio"],[3,"Image"],[4,"Formula"],[13,"Constant"],[13,"Line"],[13,"Bifurcation"],[13,"ConstantSpline"],[13,"LinearSpline"],[13,"QuadraticSpline"],[4,"FormulaBuilder"],[4,"Probability"],[13,"Point"],[13,"Points"],[13,"Linear"],[13,"Uniform"],[13,"Gaussian"],[13,"ConstantSpline"],[13,"LinearSpline"],[4,"ProbabilityBuilder"],[3,"ArrayLinker"],[8,"Build"],[8,"Link"],[4,"Greek"],[4,"Rgb"],[4,"Cartesian"],[4,"Polar"],[4,"Spherical"],[3,"Name"],[3,"Register"],[3,"Set"],[3,"Crossing"],[3,"Light"],[3,"LightLinker"],[3,"LightLinkerBuilder"],[3,"Local"],[3,"Material"],[3,"Photon"],[4,"Operation"],[13,"Fill"],[4,"OperationBuilder"],[13,"Fill"],[4,"OperationBuilderLoader"],[13,"Fill"],[3,"Parameters"],[4,"Attribute"],[4,"AttributeLinker"],[4,"Caster"],[4,"Event"],[3,"Input"],[3,"Output"],[3,"Parameters"],[3,"ParametersBuilder"],[3,"Settings"],[4,"SuperSample"],[3,"Input"],[3,"Output"],[3,"Parameters"],[3,"ParametersBuilder"],[3,"Settings"],[3,"Grad"],[3,"Reflect"],[3,"Input"],[3,"Parameters"],[3,"Settings"],[3,"Input"],[3,"Parameters"],[3,"ParametersBuilder"],[3,"Settings"],[3,"Grad"],[3,"Reflect"],[4,"Attribute"],[4,"AttributeLinker"],[4,"AttributeLinkerLinker"],[4,"AttributeLinkerLinkerLinker"],[4,"Engine"],[4,"EngineBuilder"],[4,"EngineBuilderLoader"],[4,"Event"],[3,"Frame"],[3,"Input"],[3,"Output"],[3,"Parameters"],[3,"ParametersBuilder"],[3,"Settings"],[4,"Attribute"],[4,"AttributeLinker"],[4,"EngineBuilder"],[3,"Input"],[3,"Output"],[3,"Parameters"],[3,"ParametersBuilder"],[3,"Settings"],[3,"Shader"],[3,"Tracer"],[3,"Binner"],[3,"ProgressBar"],[3,"Range"],[3,"SilentProgressBar"],[8,"Valid"],[8,"Analyze"],[3,"DataCube"],[3,"DataSquare"],[3,"DataTesseract"],[3,"ReactionLinker"],[3,"ReactorLinker"],[3,"SurfaceLinkerLoader"],[3,"MeshLoader"],[3,"GradientBuilder"],[3,"Trans3Builder"],[3,"LightLinkerBuilderLoader"],[3,"MaterialBuilder"],[3,"ParametersBuilderLoader"],[3,"ParametersBuilderLoader"],[3,"ParametersLoader"],[3,"ParametersBuilderLoader"],[3,"FrameBuilder"],[3,"ParametersBuilderLoader"],[3,"ParametersBuilderLoader"],[3,"ShaderLinker"],[6,"Pos3"]]},\
"arctk_attr":{"doc":"Support library of attribute macros.","t":[23,23,23,23],"n":["input","output","file","save"],"q":["arctk_attr","","",""],"d":["Create the attribute macro input.","Create the attribute macro output.","Create the attribute macro file.","Create the attribute macro save."],"i":[0,0,0,0],"f":[null,null,null,null],"p":[]},\
"arctk_proc":{"doc":"Support library of procedural macros.","t":[24,24,24,24],"n":["Input","File","Output","Save"],"q":["arctk_proc","","",""],"d":["Create the procedural macro Input.","Create the procedural macro File.","Create the procedural macro Output.","Create the procedural macro Save."],"i":[0,0,0,0],"f":[null,null,null,null],"p":[]},\
"atty":{"doc":"atty is a simple utility that answers one question","t":[4,13,13,13,5,5,11,11,11,11,11,11,11,11,11],"n":["Stream","Stdout","Stderr","Stdin","is","isnt","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","clone"],"q":["atty","","","","","","","","","","","","","",""],"d":["possible stream sources","","","","returns true if this is a tty","returns true if this is <em>not</em> a tty","","","","","","","","",""],"i":[0,1,1,1,0,0,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,[[["stream",4]],["bool",15]],[[["stream",4]],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[],["stream",4]]],"p":[[4,"Stream"]]},\
"babbage":{"doc":"Datacube manipulation engine binary. Produce some data …","t":[17,5,5,5],"n":["BACKUP_TERM_WIDTH","main","initialisation","run"],"q":["babbage","","",""],"d":["Backup print width if the terminal width can not be …","Main program function.","Initialise the input arguments.","Run the operations and save their results."],"i":[0,0,0,0],"f":[null,[[]],[[["usize",15]]],[[["usize",15],["parameters",3],["path",3]],[["result",4],["error",4]]]],"p":[]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":[14],"n":["bitflags"],"q":["bitflags"],"d":["The macro used to generate the flag structure."],"i":[0],"f":[null],"p":[]},\
"bytemuck":{"doc":"This crate gives small utilities for casting between …","t":[8,11,8,8,16,18,18,11,11,8,11,11,5,5,5,5,5,5,4,13,13,13,13,5,5,5,5,5,5,5,5,5,5,5,5,14,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,11,11,11,11],"n":["Zeroable","zeroed","Pod","Contiguous","Int","MAX_VALUE","MIN_VALUE","from_integer","into_integer","TransparentWrapper","wrap_ref","wrap_mut","bytes_of","bytes_of_mut","from_bytes","from_bytes_mut","try_from_bytes","try_from_bytes_mut","PodCastError","TargetAlignmentGreaterAndInputNotAligned","OutputSliceWouldHaveSlop","SizeMismatch","AlignmentMismatch","cast","cast_mut","cast_ref","cast_slice","cast_slice_mut","pod_align_to","pod_align_to_mut","try_cast","try_cast_ref","try_cast_mut","try_cast_slice","try_cast_slice_mut","offset_of","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","fmt","eq","hash","clone","zeroed","MAX_VALUE","MIN_VALUE","from_integer","into_integer","wrap_ref","wrap_mut"],"q":["bytemuck","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Trait for types that can be safely created with <code>zeroed</code>.","Calls <code>zeroed</code>.","Marker trait for “plain old data”.","A trait indicating that:","The primitive integer type with an identical …","The upper <em>inclusive</em> bound for valid instances of this …","The lower <em>inclusive</em> bound for valid instances of this …","If <code>value</code> is within the range for valid instances of this …","Perform the conversion from <code>C</code> into the underlying …","A trait which indicates that a type is a <code>repr(transparent)</code>…","Convert a reference to a wrapped type into a reference to …","Convert a mut reference to a wrapped type into a mut …","Re-interprets <code>&T</code> as <code>&[u8]</code>.","Re-interprets <code>&mut T</code> as <code>&mut [u8]</code>.","Re-interprets <code>&[u8]</code> as <code>&T</code>.","Re-interprets <code>&mut [u8]</code> as <code>&mut T</code>.","Re-interprets <code>&[u8]</code> as <code>&T</code>.","Re-interprets <code>&mut [u8]</code> as <code>&mut T</code>.","The things that can go wrong when casting between [<code>Pod</code>] …","You tried to cast a slice to an element type with a …","If the element size changes then the output slice changes …","When casting a slice you can’t convert between ZST …","For this type of cast the alignments must be exactly the …","Cast <code>T</code> into <code>U</code>","Cast <code>&mut T</code> into <code>&mut U</code>.","Cast <code>&T</code> into <code>&U</code>.","Cast <code>&[A]</code> into <code>&[B]</code>.","Cast <code>&mut [T]</code> into <code>&mut [U]</code>.","As <code>align_to</code>, but safe because of the [<code>Pod</code>] bound.","As <code>align_to_mut</code>, but safe because of the [<code>Pod</code>] bound.","Try to cast <code>T</code> into <code>U</code>.","Try to convert a <code>&T</code> into <code>&U</code>.","Try to convert a <code>&mut T</code> into <code>&mut U</code>.","Try to convert <code>&[A]</code> into <code>&[B]</code> (possibly with a change in …","Try to convert <code>&mut [A]</code> into <code>&mut [B]</code> (possibly with a …","Find the offset in bytes of the given <code>$field</code> of <code>$Type</code>. …","","","","","","","","","","","","","Calls <code>zeroed</code>.","The upper <em>inclusive</em> bound for valid instances of this …","The lower <em>inclusive</em> bound for valid instances of this …","If <code>value</code> is within the range for valid instances of this …","Perform the conversion from <code>C</code> into the underlying …","Convert a reference to a wrapped type into a reference to …","Convert a mut reference to a wrapped type into a mut …"],"i":[0,1,0,0,2,2,2,2,2,0,3,3,0,0,0,0,0,0,0,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,1,2,2,2,2,3,3],"f":[null,[[]],null,null,null,null,null,[[],["option",4]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["podcasterror",4]]],[[],[["podcasterror",4],["result",4]]],null,null,null,null,null,[[["pod",8]],["pod",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pod",8]],[["pod",8],["podcasterror",4],["result",4]]],[[],[["result",4],["podcasterror",4]]],[[],[["result",4],["podcasterror",4]]],[[],[["podcasterror",4],["result",4]]],[[],[["result",4],["podcasterror",4]]],null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["podcasterror",4]],["bool",15]],[[]],[[],["podcasterror",4]],[[]],null,null,[[],["option",4]],[[]],[[]],[[]]],"p":[[8,"Zeroable"],[8,"Contiguous"],[8,"TransparentWrapper"],[4,"PodCastError"]]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":[8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,11,10,11,10,10,10,10,10,11,10,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,10,10,4,6,4,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ReadBytesExt","read_u8","read_i8","read_u16","read_i16","read_u24","read_i24","read_u32","read_i32","read_u48","read_i48","read_u64","read_i64","read_u128","read_i128","read_uint","read_int","read_uint128","read_int128","read_f32","read_f64","read_u16_into","read_u32_into","read_u64_into","read_u128_into","read_i8_into","read_i16_into","read_i32_into","read_i64_into","read_i128_into","read_f32_into","read_f32_into_unchecked","read_f64_into","read_f64_into_unchecked","WriteBytesExt","write_u8","write_i8","write_u16","write_i16","write_u24","write_i24","write_u32","write_i32","write_u48","write_i48","write_u64","write_i64","write_u128","write_i128","write_uint","write_int","write_uint128","write_int128","write_f32","write_f64","ByteOrder","read_u16","read_u24","read_u32","read_u48","read_u64","read_u128","read_uint","read_uint128","write_u16","write_u24","write_u32","write_u48","write_u64","write_u128","write_uint","write_uint128","read_i16","read_i24","read_i32","read_i48","read_i64","read_i128","read_int","read_int128","read_f32","read_f64","write_i16","write_i24","write_i32","write_i48","write_i64","write_i128","write_int","write_int128","write_f32","write_f64","read_u16_into","read_u32_into","read_u64_into","read_u128_into","read_i16_into","read_i32_into","read_i64_into","read_i128_into","read_f32_into","read_f32_into_unchecked","read_f64_into","read_f64_into_unchecked","write_u16_into","write_u32_into","write_u64_into","write_u128_into","write_i8_into","write_i16_into","write_i32_into","write_i64_into","write_i128_into","write_f32_into","write_f64_into","from_slice_u16","from_slice_u32","from_slice_u64","from_slice_u128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_i128","from_slice_f32","from_slice_f64","BigEndian","BE","LittleEndian","LE","NetworkEndian","NativeEndian","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","read_u16","read_u32","read_u64","read_u128","read_uint","read_uint128","write_u16","write_u32","write_u64","write_u128","write_uint","write_uint128","read_u16_into","read_u32_into","read_u64_into","read_u128_into","write_u16_into","write_u32_into","write_u64_into","write_u128_into","from_slice_u16","from_slice_u32","from_slice_u64","from_slice_u128","from_slice_f32","from_slice_f64","read_u16","read_u32","read_u64","read_u128","read_uint","read_uint128","write_u16","write_u32","write_u64","write_u128","write_uint","write_uint128","read_u16_into","read_u32_into","read_u64_into","read_u128_into","write_u16_into","write_u32_into","write_u64_into","write_u128_into","from_slice_u16","from_slice_u32","from_slice_u64","from_slice_u128","from_slice_f32","from_slice_f64","clone","clone","default","default","cmp","cmp","eq","eq","partial_cmp","partial_cmp","fmt","fmt","hash","hash","read_u8","read_i8","read_u16","read_i16","read_u24","read_i24","read_u32","read_i32","read_u48","read_i48","read_u64","read_i64","read_u128","read_i128","read_uint","read_int","read_uint128","read_int128","read_f32","read_f64","read_u16_into","read_u32_into","read_u64_into","read_u128_into","read_i8_into","read_i16_into","read_i32_into","read_i64_into","read_i128_into","read_f32_into","read_f32_into_unchecked","read_f64_into","read_f64_into_unchecked","write_u8","write_i8","write_u16","write_i16","write_u24","write_i24","write_u32","write_i32","write_u48","write_i48","write_u64","write_i64","write_u128","write_i128","write_uint","write_int","write_uint128","write_int128","write_f32","write_f64"],"q":["byteorderd":["Extends <code>Read</code> with methods for reading numbers. (For …","Reads an unsigned 8 bit integer from the underlying …","Reads a signed 8 bit integer from the underlying reader.","Reads an unsigned 16 bit integer from the underlying …","Reads a signed 16 bit integer from the underlying reader.","Reads an unsigned 24 bit integer from the underlying …","Reads a signed 24 bit integer from the underlying reader.","Reads an unsigned 32 bit integer from the underlying …","Reads a signed 32 bit integer from the underlying reader.","Reads an unsigned 48 bit integer from the underlying …","Reads a signed 48 bit integer from the underlying reader.","Reads an unsigned 64 bit integer from the underlying …","Reads a signed 64 bit integer from the underlying reader.","Reads an unsigned 128 bit integer from the underlying …","Reads a signed 128 bit integer from the underlying reader.","Reads an unsigned n-bytes integer from the underlying …","Reads a signed n-bytes integer from the underlying reader.","Reads an unsigned n-bytes integer from the underlying …","Reads a signed n-bytes integer from the underlying reader.","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a sequence of unsigned 16 bit integers from the …","Reads a sequence of unsigned 32 bit integers from the …","Reads a sequence of unsigned 64 bit integers from the …","Reads a sequence of unsigned 128 bit integers from the …","Reads a sequence of signed 8 bit integers from the …","Reads a sequence of signed 16 bit integers from the …","Reads a sequence of signed 32 bit integers from the …","Reads a sequence of signed 64 bit integers from the …","Reads a sequence of signed 128 bit integers from the …","Reads a sequence of IEEE754 single-precision (4 bytes) …","<strong>DEPRECATED</strong>.","Reads a sequence of IEEE754 double-precision (8 bytes) …","<strong>DEPRECATED</strong>.","Extends <code>Write</code> with methods for writing numbers. (For …","Writes an unsigned 8 bit integer to the underlying writer.","Writes a signed 8 bit integer to the underlying writer.","Writes an unsigned 16 bit integer to the underlying …","Writes a signed 16 bit integer to the underlying writer.","Writes an unsigned 24 bit integer to the underlying …","Writes a signed 24 bit integer to the underlying writer.","Writes an unsigned 32 bit integer to the underlying …","Writes a signed 32 bit integer to the underlying writer.","Writes an unsigned 48 bit integer to the underlying …","Writes a signed 48 bit integer to the underlying writer.","Writes an unsigned 64 bit integer to the underlying …","Writes a signed 64 bit integer to the underlying writer.","Writes an unsigned 128 bit integer to the underlying …","Writes a signed 128 bit integer to the underlying writer.","Writes an unsigned n-bytes integer to the underlying …","Writes a signed n-bytes integer to the underlying writer.","Writes an unsigned n-bytes integer to the underlying …","Writes a signed n-bytes integer to the underlying writer.","Writes a IEEE754 single-precision (4 bytes) floating …","Writes a IEEE754 double-precision (8 bytes) floating …","<code>ByteOrder</code> describes types that can serialize integers as …","Reads an unsigned 16 bit integer from <code>buf</code>.","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from <code>buf</code>.","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Reads a signed 16 bit integer from <code>buf</code>.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from <code>buf</code>.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from <code>buf</code>.","Reads a signed 128 bit integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a IEEE754 single-precision (4 bytes) floating …","Writes a IEEE754 double-precision (8 bytes) floating …","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Converts the given slice of unsigned 16 bit integers to a …","Converts the given slice of unsigned 32 bit integers to a …","Converts the given slice of unsigned 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of IEEE754 single-precision (4 …","Converts the given slice of IEEE754 double-precision (8 …","Defines big-endian serialization.","A type alias for <code>BigEndian</code>.","Defines little-endian serialization.","A type alias for <code>LittleEndian</code>.","Defines network byte order serialization.","Defines system native-endian serialization.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reads an unsigned 8 bit integer from the underlying …","Reads a signed 8 bit integer from the underlying reader.","Reads an unsigned 16 bit integer from the underlying …","Reads a signed 16 bit integer from the underlying reader.","Reads an unsigned 24 bit integer from the underlying …","Reads a signed 24 bit integer from the underlying reader.","Reads an unsigned 32 bit integer from the underlying …","Reads a signed 32 bit integer from the underlying reader.","Reads an unsigned 48 bit integer from the underlying …","Reads a signed 48 bit integer from the underlying reader.","Reads an unsigned 64 bit integer from the underlying …","Reads a signed 64 bit integer from the underlying reader.","Reads an unsigned 128 bit integer from the underlying …","Reads a signed 128 bit integer from the underlying reader.","Reads an unsigned n-bytes integer from the underlying …","Reads a signed n-bytes integer from the underlying reader.","Reads an unsigned n-bytes integer from the underlying …","Reads a signed n-bytes integer from the underlying reader.","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a sequence of unsigned 16 bit integers from the …","Reads a sequence of unsigned 32 bit integers from the …","Reads a sequence of unsigned 64 bit integers from the …","Reads a sequence of unsigned 128 bit integers from the …","Reads a sequence of signed 8 bit integers from the …","Reads a sequence of signed 16 bit integers from the …","Reads a sequence of signed 32 bit integers from the …","Reads a sequence of signed 64 bit integers from the …","Reads a sequence of signed 128 bit integers from the …","Reads a sequence of IEEE754 single-precision (4 bytes) …","<strong>DEPRECATED</strong>.","Reads a sequence of IEEE754 double-precision (8 bytes) …","<strong>DEPRECATED</strong>.","Writes an unsigned 8 bit integer to the underlying writer.","Writes a signed 8 bit integer to the underlying writer.","Writes an unsigned 16 bit integer to the underlying …","Writes a signed 16 bit integer to the underlying writer.","Writes an unsigned 24 bit integer to the underlying …","Writes a signed 24 bit integer to the underlying writer.","Writes an unsigned 32 bit integer to the underlying …","Writes a signed 32 bit integer to the underlying writer.","Writes an unsigned 48 bit integer to the underlying …","Writes a signed 48 bit integer to the underlying writer.","Writes an unsigned 64 bit integer to the underlying …","Writes a signed 64 bit integer to the underlying writer.","Writes an unsigned 128 bit integer to the underlying …","Writes a signed 128 bit integer to the underlying writer.","Writes an unsigned n-bytes integer to the underlying …","Writes a signed n-bytes integer to the underlying writer.","Writes an unsigned n-bytes integer to the underlying …","Writes a signed n-bytes integer to the underlying writer.","Writes a IEEE754 single-precision (4 bytes) floating …","Writes a IEEE754 double-precision (8 bytes) floating …"],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[null,[[],[["u8",15],["result",6]]],[[],[["i8",15],["result",6]]],[[],[["u16",15],["result",6]]],[[],[["result",6],["i16",15]]],[[],[["u32",15],["result",6]]],[[],[["result",6],["i32",15]]],[[],[["u32",15],["result",6]]],[[],[["result",6],["i32",15]]],[[],[["result",6],["u64",15]]],[[],[["result",6],["i64",15]]],[[],[["result",6],["u64",15]]],[[],[["result",6],["i64",15]]],[[],[["u128",15],["result",6]]],[[],[["result",6],["i128",15]]],[[["usize",15]],[["result",6],["u64",15]]],[[["usize",15]],[["result",6],["i64",15]]],[[["usize",15]],[["u128",15],["result",6]]],[[["usize",15]],[["result",6],["i128",15]]],[[],[["f32",15],["result",6]]],[[],[["f64",15],["result",6]]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],null,[[["u8",15]],["result",6]],[[["i8",15]],["result",6]],[[["u16",15]],["result",6]],[[["i16",15]],["result",6]],[[["u32",15]],["result",6]],[[["i32",15]],["result",6]],[[["u32",15]],["result",6]],[[["i32",15]],["result",6]],[[["u64",15]],["result",6]],[[["i64",15]],["result",6]],[[["u64",15]],["result",6]],[[["i64",15]],["result",6]],[[["u128",15]],["result",6]],[[["i128",15]],["result",6]],[[["usize",15],["u64",15]],["result",6]],[[["i64",15],["usize",15]],["result",6]],[[["usize",15],["u128",15]],["result",6]],[[["usize",15],["i128",15]],["result",6]],[[["f32",15]],["result",6]],[[["f64",15]],["result",6]],null,[[],["u16",15]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[],["u128",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u128",15]],[[["u16",15]]],[[["u32",15]]],[[["u32",15]]],[[["u64",15]]],[[["u64",15]]],[[["u128",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u128",15]]],[[],["i16",15]],[[],["i32",15]],[[],["i32",15]],[[],["i64",15]],[[],["i64",15]],[[],["i128",15]],[[["usize",15]],["i64",15]],[[["usize",15]],["i128",15]],[[],["f32",15]],[[],["f64",15]],[[["i16",15]]],[[["i32",15]]],[[["i32",15]]],[[["i64",15]]],[[["i64",15]]],[[["i128",15]]],[[["i64",15],["usize",15]]],[[["usize",15],["i128",15]]],[[["f32",15]]],[[["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["u128",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u128",15]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["u128",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u128",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["u128",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u128",15]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["u128",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u128",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bigendian",4]],[[],["littleendian",4]],[[],["bigendian",4]],[[],["littleendian",4]],[[["bigendian",4]],["ordering",4]],[[["littleendian",4]],["ordering",4]],[[["bigendian",4]],["bool",15]],[[["littleendian",4]],["bool",15]],[[["bigendian",4]],[["ordering",4],["option",4]]],[[["littleendian",4]],[["ordering",4],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],[["u8",15],["result",6]]],[[],[["i8",15],["result",6]]],[[],[["u16",15],["result",6]]],[[],[["result",6],["i16",15]]],[[],[["u32",15],["result",6]]],[[],[["result",6],["i32",15]]],[[],[["u32",15],["result",6]]],[[],[["result",6],["i32",15]]],[[],[["result",6],["u64",15]]],[[],[["result",6],["i64",15]]],[[],[["result",6],["u64",15]]],[[],[["result",6],["i64",15]]],[[],[["u128",15],["result",6]]],[[],[["result",6],["i128",15]]],[[["usize",15]],[["result",6],["u64",15]]],[[["usize",15]],[["result",6],["i64",15]]],[[["usize",15]],[["u128",15],["result",6]]],[[["usize",15]],[["result",6],["i128",15]]],[[],[["f32",15],["result",6]]],[[],[["f64",15],["result",6]]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["u8",15]],["result",6]],[[["i8",15]],["result",6]],[[["u16",15]],["result",6]],[[["i16",15]],["result",6]],[[["u32",15]],["result",6]],[[["i32",15]],["result",6]],[[["u32",15]],["result",6]],[[["i32",15]],["result",6]],[[["u64",15]],["result",6]],[[["i64",15]],["result",6]],[[["u64",15]],["result",6]],[[["i64",15]],["result",6]],[[["u128",15]],["result",6]],[[["i128",15]],["result",6]],[[["usize",15],["u64",15]],["result",6]],[[["i64",15],["usize",15]],["result",6]],[[["usize",15],["u128",15]],["result",6]],[[["usize",15],["i128",15]],["result",6]],[[["f32",15]],["result",6]],[[["f64",15]],["result",6]]],"p":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]},\
"cartographer":{"doc":"Datacube manipulation engine binary. Produce some data …","t":[17,5,5,5],"n":["BACKUP_TERM_WIDTH","main","initialisation","load_parameters"],"q":["cartographer","","",""],"d":["Backup print width if the terminal width can not be …","Main program function.","Initialise the input arguments.","Load the required files and form the input parameters."],"i":[0,0,0,0],"f":[null,[[]],[[["usize",15]]],[[["usize",15],["path",3]],["parameters",3]]],"p":[]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[null],"p":[]},\
"colored":{"doc":"Coloring terminal so simple, you already know how to do …","t":[0,3,5,5,3,11,11,11,11,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,3,4,13,13,13,13,13,13,13,13,13,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["control","ShouldColorize","set_override","unset_override","SHOULD_COLORIZE","from_env","should_colorize","set_override","unset_override","Color","Black","Red","Green","Yellow","Blue","Magenta","Cyan","White","BrightBlack","BrightRed","BrightGreen","BrightYellow","BrightBlue","BrightMagenta","BrightCyan","BrightWhite","TrueColor","r","g","b","Style","Styles","Clear","Bold","Dimmed","Underline","Reversed","Italic","Blink","Hidden","Strikethrough","ColoredString","Colorize","black","red","green","yellow","blue","magenta","purple","cyan","white","bright_black","bright_red","bright_green","bright_yellow","bright_blue","bright_magenta","bright_purple","bright_cyan","bright_white","truecolor","color","on_black","on_red","on_green","on_yellow","on_blue","on_magenta","on_purple","on_cyan","on_white","on_bright_black","on_bright_red","on_bright_green","on_bright_yellow","on_bright_blue","on_bright_magenta","on_bright_purple","on_bright_cyan","on_bright_white","on_truecolor","on_color","clear","normal","bold","dimmed","italic","underline","blink","reverse","reversed","hidden","strikethrough","fgcolor","bgcolor","style","is_plain","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","color","on_color","clear","normal","bold","dimmed","italic","underline","blink","reverse","reversed","hidden","strikethrough","from","from","from","clone","clone","clone","clone","default","default","eq","ne","eq","ne","eq","eq","ne","deref","deref","fmt","fmt","fmt","fmt","fmt","from_str","initialize","to_fg_str","to_bg_str","contains"],"q":["colored","colored::control","","","","","","","","colored","","","","","","","","","","","","","","","","","","colored::Color","","","colored","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","colored::control","","","","","","","","","","","","","","colored","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","colored::control","colored","","","","","","","","colored::control","colored","","","","","","","colored::control","colored","",""],"d":["A couple of functions to enable and disable coloring.","A flag to to if coloring should occur.","Use this to force colored to ignore the environment and …","Remove the manual override and let the environment decide …","The persistent [<code>ShouldColorize</code>].","Reads environment variables and checks if output is a tty …","Returns if the current coloring is expected.","Use this to force colored to ignore the environment and …","Remove the manual override and let the environment decide …","The 8 standard colors.","","","","","","","","","","","","","","","","","","","","","A combinatorial style such as bold, italics, dimmed, etc.","","","","","","","","","","","A string that may have color and/or style applied to it.","The trait that enables something to be given color.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Historical name of <code>Colorize::reversed</code>. May be removed in …","This should be preferred to <code>Colorize::reverse</code>.","","","Get the current background color applied.","Get the current background color applied.","Get the current [<code>Style</code>] which can be check if it contains …","Checks if the colored string has no color or styling.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if the current style has one of <code>Styles</code> switched on."],"i":[0,0,0,0,0,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,0,0,4,4,4,4,4,4,4,4,4,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,2,6,2,8,4,6,1,6,2,2,8,8,4,6,6,7,6,2,8,4,6,6,2,7,2,2,8],"f":[null,null,[[["bool",15]]],[[]],null,[[]],[[],["bool",15]],[[["bool",15]]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[["u8",15]],["coloredstring",3]],[[["into",8],["color",4]],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[["u8",15]],["coloredstring",3]],[[["into",8],["color",4]],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],[["option",4],["color",4]]],[[],[["option",4],["color",4]]],[[],["style",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["into",8],["color",4]],["coloredstring",3]],[[["into",8],["color",4]],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[],["coloredstring",3]],[[["str",15]]],[[["string",3]]],[[["str",15]]],[[],["color",4]],[[],["style",3]],[[],["styles",4]],[[],["coloredstring",3]],[[],["shouldcolorize",3]],[[]],[[["color",4]],["bool",15]],[[["color",4]],["bool",15]],[[["style",3]],["bool",15]],[[["style",3]],["bool",15]],[[["styles",4]],["bool",15]],[[["coloredstring",3]],["bool",15]],[[["coloredstring",3]],["bool",15]],[[],["shouldcolorize",3]],[[],["str",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["str",15]],["result",4]],[[]],[[],[["cow",4],["str",15]]],[[],[["cow",4],["str",15]]],[[["styles",4]],["bool",15]]],"p":[[3,"ShouldColorize"],[4,"Color"],[13,"TrueColor"],[4,"Styles"],[8,"Colorize"],[3,"ColoredString"],[3,"SHOULD_COLORIZE"],[3,"Style"]]},\
"console":{"doc":"console is a library for Rust that provides access to …","t":[4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,5,5,3,4,13,13,13,13,3,4,13,13,5,5,5,5,5,5,5,5,4,13,13,13,4,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,3,12,12,3,3,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Key","Unknown","UnknownEscSeq","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","Enter","Escape","Backspace","Home","End","Tab","BackTab","Del","Insert","PageUp","PageDown","Char","user_attended","user_attended_stderr","Term","TermFamily","File","UnixTerm","WindowsConsole","Dummy","TermFeatures","TermTarget","Stdout","Stderr","colors_enabled","colors_enabled_stderr","measure_text_width","pad_str","set_colors_enabled","set_colors_enabled_stderr","style","truncate_str","Alignment","Left","Center","Right","Attribute","Bold","Dim","Italic","Underlined","Blink","Reverse","Hidden","Color","Black","Red","Green","Yellow","Blue","Magenta","Cyan","White","Color256","Emoji","0","1","Style","StyledObject","strip_ansi_codes","AnsiCodeIterator","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","next","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","cmp","eq","ne","eq","eq","eq","ne","eq","eq","eq","ne","partial_cmp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","read","write","flush","as_raw_fd","is_attended","colors_supported","is_msys_tty","wants_emoji","family","stdout","stderr","buffered_stdout","buffered_stderr","style","target","write_line","read_char","read_key","read_line","read_line_initial_text","read_secure_line","flush","is_term","features","size","size_checked","move_cursor_to","move_cursor_up","move_cursor_down","move_cursor_left","move_cursor_right","clear_line","clear_last_lines","clear_screen","clear_to_end_of_screen","clear_chars","set_title","show_cursor","hide_cursor","new","from_dotted_str","apply_to","force_styling","for_stderr","for_stdout","fg","bg","attr","black","red","green","yellow","blue","magenta","cyan","white","color256","bright","on_black","on_red","on_green","on_yellow","on_blue","on_magenta","on_cyan","on_white","on_color256","on_bright","bold","dim","italic","underlined","blink","reverse","hidden","force_styling","for_stderr","for_stdout","fg","bg","attr","black","red","green","yellow","blue","magenta","cyan","white","color256","bright","on_black","on_red","on_green","on_yellow","on_blue","on_magenta","on_cyan","on_white","on_color256","on_bright","bold","dim","italic","underlined","blink","reverse","hidden","new","new","current_slice","rest_slice"],"q":["consoled":["Key mapping","","Unrecognized sequence containing Esc and a list of chars","","","","","","","","","","","","","","","","","A fast way to check if the application has a user …","A fast way to check if the application has a user …","Abstraction around a terminal.","The family of the terminal.","Redirected to a file or file like thing.","A standard unix terminal.","A cmd.exe like windows console.","A dummy terminal (for instance on wasm)","Gives access to the terminal features.","Where the term is writing.","","","Returns <code>true</code> if colors should be enabled for stdout.","Returns <code>true</code> if colors should be enabled for stderr.","Measure the width of a string in terminal characters.","Pads a string to fill a certain number of characters.","Forces colorization on or off for stdout.","Forces colorization on or off for stderr.","Wraps an object for formatting for styling.","Truncates a string to a certain number of characters.","Defines the alignment for padding operations.","","","","A terminal style attribute.","","","","","","","","A terminal color.","","","","","","","","","","“Intelligent” emoji formatter.","","","A stored style that can be applied.","A formatting wrapper that can be styled for a terminal.","Helper function to strip ansi codes.","An iterator over ansi codes in a string.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if this is a real user attended terminal (<code>isatty</code>)","Checks if colors are supported by this terminal.","Checks if this terminal is an msys terminal.","Checks if this terminal wants emojis.","Returns the family of the terminal.","Return a new unbuffered terminal","Return a new unbuffered terminal to stderr","Return a new buffered terminal","Return a new buffered terminal to stderr","Returns the style for the term","Returns the targert","Writes a string to the terminal and adds a newline.","Read a single character from the terminal","Read a single key form the terminal.","Read one line of input.","Read one line of input with initial text.","Read securely a line of input.","Flushes internal buffers.","Checks if the terminal is indeed a terminal.","Checks for common terminal features.","Returns the terminal size in rows and columns or gets …","Returns the terminal size in rows and columns.","Moves the cursor to <code>x</code> and <code>y</code>","Moves the cursor up <code>n</code> lines","Moves the cursor down <code>n</code> lines","Moves the cursor left <code>n</code> lines","Moves the cursor down <code>n</code> lines","Clears the current line.","Clear the last <code>n</code> lines.","Clears the entire screen.","Clears the entire screen.","Clears the last char in the the current line.","Set the terminal title","Makes cursor visible again","Hides cursor","Returns an empty default style.","Creates a style from a dotted string.","Apply the style to something that can be displayed.","Forces styling on or off.","Specifies that style is applying to something being …","Specifies that style is applying to something being …","Sets a foreground color.","Sets a background color.","Adds a attr.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Forces styling on or off.","Specifies that style is applying to something being …","Specifies that style is applying to something being …","Sets a foreground color.","Sets a background color.","Adds a attr.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new ansi code iterator.","Returns the string slice up to the current match.","Returns the string slice from the current match to the …"],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,2,2,2,2,0,0,3,3,0,0,0,0,0,0,0,0,0,4,4,4,0,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,6,6,0,7,7,0,0,0,0,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,7,7,7,7,7,7,7,7,7,7,12,12,12,12,12,12,12,12,12,1,3,2,8,9,6,5,4,10,11,7,10,5,1,1,3,2,6,6,5,4,10,10,5,1,3,2,8,9,6,5,4,10,11,11,7,11,11,11,11,11,11,11,9,9,9,9,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,7,12,12,12],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[["str",15]],["usize",15]],[[["usize",15],["str",15],["alignment",4],["option",4],["str",15]],[["cow",4],["str",15]]],[[["bool",15]]],[[["bool",15]]],[[],["styledobject",3]],[[["usize",15],["str",15],["str",15]],[["cow",4],["str",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15]],[["cow",4],["str",15]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["key",4]],[[],["termtarget",4]],[[],["termfamily",4]],[[],["termfeatures",3]],[[],["term",3]],[[],["color",4]],[[],["attribute",4]],[[],["alignment",4]],[[],["style",3]],[[],["styledobject",3]],[[],["emoji",3]],[[],["style",3]],[[["attribute",4]],["ordering",4]],[[["key",4]],["bool",15]],[[["key",4]],["bool",15]],[[["termtarget",4]],["bool",15]],[[["termfamily",4]],["bool",15]],[[["color",4]],["bool",15]],[[["color",4]],["bool",15]],[[["attribute",4]],["bool",15]],[[["alignment",4]],["bool",15]],[[["style",3]],["bool",15]],[[["style",3]],["bool",15]],[[["attribute",4]],[["ordering",4],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["usize",15],["result",6]]],[[],[["usize",15],["result",6]]],[[],["result",6]],[[],["rawfd",6]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["termfamily",4]],[[],["term",3]],[[],["term",3]],[[],["term",3]],[[],["term",3]],[[],["style",3]],[[],["termtarget",4]],[[["str",15]],["result",6]],[[],[["result",6],["char",15]]],[[],[["result",6],["key",4]]],[[],[["result",6],["string",3]]],[[["str",15]],[["result",6],["string",3]]],[[],[["result",6],["string",3]]],[[],["result",6]],[[],["bool",15]],[[],["termfeatures",3]],[[]],[[],["option",4]],[[["usize",15]],["result",6]],[[["usize",15]],["result",6]],[[["usize",15]],["result",6]],[[["usize",15]],["result",6]],[[["usize",15]],["result",6]],[[],["result",6]],[[["usize",15]],["result",6]],[[],["result",6]],[[],["result",6]],[[["usize",15]],["result",6]],[[["display",8]]],[[],["result",6]],[[],["result",6]],[[],["style",3]],[[["str",15]],["style",3]],[[],["styledobject",3]],[[["bool",15]],["style",3]],[[],["style",3]],[[],["style",3]],[[["color",4]],["style",3]],[[["color",4]],["style",3]],[[["attribute",4]],["style",3]],[[],["style",3]],[[],["style",3]],[[],["style",3]],[[],["style",3]],[[],["style",3]],[[],["style",3]],[[],["style",3]],[[],["style",3]],[[["u8",15]],["style",3]],[[],["style",3]],[[],["style",3]],[[],["style",3]],[[],["style",3]],[[],["style",3]],[[],["style",3]],[[],["style",3]],[[],["style",3]],[[],["style",3]],[[["u8",15]],["style",3]],[[],["style",3]],[[],["style",3]],[[],["style",3]],[[],["style",3]],[[],["style",3]],[[],["style",3]],[[],["style",3]],[[],["style",3]],[[["bool",15]],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[["color",4]],["styledobject",3]],[[["color",4]],["styledobject",3]],[[["attribute",4]],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[["u8",15]],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[["u8",15]],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[],["styledobject",3]],[[["str",15],["str",15]],["emoji",3]],[[["str",15]],["ansicodeiterator",3]],[[],["str",15]],[[],["str",15]]],"p":[[4,"Key"],[4,"TermFamily"],[4,"TermTarget"],[4,"Alignment"],[4,"Attribute"],[4,"Color"],[3,"Emoji"],[3,"TermFeatures"],[3,"Term"],[3,"Style"],[3,"StyledObject"],[3,"AnsiCodeIterator"]]},\
"crc32fast":{"doc":"Example","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Hasher","new","new_with_initial","update","finalize","reset","combine","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","clone","default","fmt","write","finish"],"q":["crc32fast","","","","","","","","","","","","","","","","","","","",""],"d":["Represents an in-progress CRC32 computation.","Create a new <code>Hasher</code>.","Create a new <code>Hasher</code> with an initial CRC32 state.","Process the given byte slice and update the hash state.","Finalize the hash state and return the computed CRC32 …","Reset the hash state.","Combine the hash state with the hash state for the …","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[]],[[["u32",15]]],[[]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["hasher",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[],["u64",15]]],"p":[[3,"Hasher"]]},\
"crossbeam_channel":{"doc":"Multi-producer multi-consumer channels for message …","t":[5,5,5,5,5,5,3,3,3,3,3,3,3,3,3,3,3,3,4,13,13,4,13,13,3,12,4,13,13,4,13,13,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["after","at","never","tick","bounded","unbounded","IntoIter","Iter","TryIter","Receiver","Sender","Select","SelectedOperation","ReadyTimeoutError","SelectTimeoutError","TryReadyError","TrySelectError","RecvError","RecvTimeoutError","Timeout","Disconnected","TryRecvError","Empty","Disconnected","SendError","0","SendTimeoutError","Timeout","Disconnected","TrySendError","Full","Disconnected","select","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","drop","drop","drop","from","from","from","from","into_iter","next","next","next","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","eq","ne","eq","ne","eq","ne","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","try_send","send","send_timeout","send_deadline","is_empty","is_full","len","capacity","same_channel","try_recv","recv","recv_timeout","recv_deadline","is_empty","is_full","len","capacity","iter","try_iter","same_channel","into_inner","into_inner","is_full","is_disconnected","into_inner","is_timeout","is_disconnected","is_empty","is_disconnected","is_timeout","is_disconnected","new","send","recv","remove","try_select","select","select_timeout","select_deadline","try_ready","ready","ready_timeout","ready_deadline","index","send","recv"],"q":["crossbeam_channel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Creates a receiver that delivers a message after a …","Creates a receiver that delivers a message at a certain …","Creates a receiver that never delivers messages.","Creates a receiver that delivers messages periodically.","Creates a channel of bounded capacity.","Creates a channel of unbounded capacity.","A blocking iterator over messages in a channel.","A blocking iterator over messages in a channel.","A non-blocking iterator over messages in a channel.","The receiving side of a channel.","The sending side of a channel.","Selects from a set of channel operations.","A selected operation that needs to be completed.","An error returned from the <code>ready_timeout</code> method.","An error returned from the <code>select_timeout</code> method.","An error returned from the <code>try_ready</code> method.","An error returned from the <code>try_select</code> method.","An error returned from the <code>recv</code> method.","An error returned from the <code>recv_timeout</code> method.","A message could not be received because the channel is …","The message could not be received because the channel is …","An error returned from the <code>try_recv</code> method.","A message could not be received because the channel is …","The message could not be received because the channel is …","An error returned from the <code>send</code> method.","","An error returned from the <code>send_timeout</code> method.","The message could not be sent because the channel is full …","The message could not be sent because the channel is …","An error returned from the <code>try_send</code> method.","The message could not be sent because the channel is full.","The message could not be sent because the channel is …","Selects from a set of channel operations.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to send a message into the channel without …","Blocks the current thread until a message is sent or the …","Waits for a message to be sent into the channel, but only …","Waits for a message to be sent into the channel, but only …","Returns <code>true</code> if the channel is empty.","Returns <code>true</code> if the channel is full.","Returns the number of messages in the channel.","If the channel is bounded, returns its capacity.","Returns <code>true</code> if senders belong to the same channel.","Attempts to receive a message from the channel without …","Blocks the current thread until a message is received or …","Waits for a message to be received from the channel, but …","Waits for a message to be received from the channel, but …","Returns <code>true</code> if the channel is empty.","Returns <code>true</code> if the channel is full.","Returns the number of messages in the channel.","If the channel is bounded, returns its capacity.","A blocking iterator over messages in the channel.","A non-blocking iterator over messages in the channel.","Returns <code>true</code> if receivers belong to the same channel.","Unwraps the message.","Unwraps the message.","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the send operation failed because the …","Unwraps the message.","Returns <code>true</code> if the send operation timed out.","Returns <code>true</code> if the send operation failed because the …","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the receive operation failed because the …","Returns <code>true</code> if the receive operation timed out.","Returns <code>true</code> if the receive operation failed because the …","Creates an empty list of channel operations for selection.","Adds a send operation.","Adds a receive operation.","Removes a previously added operation.","Attempts to select one of the operations without blocking.","Blocks until one of the operations becomes ready and …","Blocks for a limited time until one of the operations …","Blocks until a given deadline, or until one of the …","Attempts to find a ready operation without blocking.","Blocks until one of the operations becomes ready.","Blocks for a limited time until one of the operations …","Blocks until a given deadline, or until one of the …","Returns the index of the selected operation.","Completes the send operation.","Completes the receive operation."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,2,2,0,3,0,4,4,0,5,5,0,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,3,3,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,11,11,11,11,11,11,11,11,11,11,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,6,7,17,5,4,2,1,7,8,9,10,6,7,3,5,4,11,2,1,12,13,14,15,16,16,3,3,5,5,4,4,11,2,1,12,13,14,15,6,7,8,9,10,11,2,1,12,13,14,15,3,5,4,16,17,3,5,4,11,2,1,12,13,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,3,5,5,5,4,4,4,2,2,1,1,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17],"f":[[[["duration",3]],[["instant",3],["receiver",3]]],[[["instant",3]],[["instant",3],["receiver",3]]],[[],["receiver",3]],[[["duration",3]],[["instant",3],["receiver",3]]],[[["usize",15]]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[["senderror",3]],["trysenderror",4]],[[["senderror",3]],["sendtimeouterror",4]],[[["recverror",3]],["tryrecverror",4]],[[["recverror",3]],["recvtimeouterror",4]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["senderror",3]],[[],["trysenderror",4]],[[],["sendtimeouterror",4]],[[],["recverror",3]],[[],["tryrecverror",4]],[[],["recvtimeouterror",4]],[[],["tryselecterror",3]],[[],["selecttimeouterror",3]],[[],["tryreadyerror",3]],[[],["readytimeouterror",3]],[[],["select",3]],[[],["select",3]],[[["senderror",3]],["bool",15]],[[["senderror",3]],["bool",15]],[[["trysenderror",4]],["bool",15]],[[["trysenderror",4]],["bool",15]],[[["sendtimeouterror",4]],["bool",15]],[[["sendtimeouterror",4]],["bool",15]],[[["recverror",3]],["bool",15]],[[["tryrecverror",4]],["bool",15]],[[["recvtimeouterror",4]],["bool",15]],[[["tryselecterror",3]],["bool",15]],[[["selecttimeouterror",3]],["bool",15]],[[["tryreadyerror",3]],["bool",15]],[[["readytimeouterror",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["trysenderror",4],["result",4]]],[[],[["result",4],["senderror",3]]],[[["duration",3]],[["sendtimeouterror",4],["result",4]]],[[["instant",3]],[["sendtimeouterror",4],["result",4]]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[["sender",3]],["bool",15]],[[],[["tryrecverror",4],["result",4]]],[[],[["result",4],["recverror",3]]],[[["duration",3]],[["recvtimeouterror",4],["result",4]]],[[["instant",3]],[["recvtimeouterror",4],["result",4]]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[],["iter",3]],[[],["tryiter",3]],[[["receiver",3]],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["select",3]],[[["sender",3]],["usize",15]],[[["receiver",3]],["usize",15]],[[["usize",15]]],[[],[["result",4],["selectedoperation",3],["tryselecterror",3]]],[[],["selectedoperation",3]],[[["duration",3]],[["selectedoperation",3],["selecttimeouterror",3],["result",4]]],[[["instant",3]],[["selectedoperation",3],["selecttimeouterror",3],["result",4]]],[[],[["usize",15],["result",4],["tryreadyerror",3]]],[[],["usize",15]],[[["duration",3]],[["usize",15],["readytimeouterror",3],["result",4]]],[[["instant",3]],[["usize",15],["readytimeouterror",3],["result",4]]],[[],["usize",15]],[[["sender",3]],[["result",4],["senderror",3]]],[[["receiver",3]],[["result",4],["recverror",3]]]],"p":[[4,"RecvTimeoutError"],[4,"TryRecvError"],[3,"SendError"],[4,"SendTimeoutError"],[4,"TrySendError"],[3,"Sender"],[3,"Receiver"],[3,"Iter"],[3,"TryIter"],[3,"IntoIter"],[3,"RecvError"],[3,"TrySelectError"],[3,"SelectTimeoutError"],[3,"TryReadyError"],[3,"ReadyTimeoutError"],[3,"Select"],[3,"SelectedOperation"]]},\
"crossbeam_deque":{"doc":"Concurrent work-stealing deques.","t":[3,4,13,13,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Injector","Steal","Empty","Success","Retry","Stealer","Worker","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","drop","clone","clone","default","eq","ne","fmt","fmt","fmt","fmt","from_iter","new_fifo","new_lifo","stealer","is_empty","len","push","pop","is_empty","steal","steal_batch","steal_batch_and_pop","new","push","steal","steal_batch","steal_batch_and_pop","is_empty","len","is_empty","is_success","is_retry","success","or_else"],"q":["crossbeam_deque","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An injector queue.","Possible outcomes of a steal operation.","The queue was empty at the time of stealing.","At least one task was successfully stolen.","The steal operation needs to be retried.","A stealer handle of a worker queue.","A worker queue.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consumes items until a <code>Success</code> is found and returns it.","Creates a FIFO worker queue.","Creates a LIFO worker queue.","Creates a stealer for this queue.","Returns <code>true</code> if the queue is empty.","Returns the number of tasks in the deque.","Pushes a task into the queue.","Pops a task from the queue.","Returns <code>true</code> if the queue is empty.","Steals a task from the queue.","Steals a batch of tasks and pushes them into another …","Steals a batch of tasks, pushes them into another worker, …","Creates a new injector queue.","Pushes a task into the queue.","Steals a task from the queue.","Steals a batch of tasks and pushes them into a worker.","Steals a batch of tasks, pushes them into a worker, and …","Returns <code>true</code> if the queue is empty.","Returns the number of tasks in the queue.","Returns <code>true</code> if the queue was empty at the time of …","Returns <code>true</code> if at least one task was stolen.","Returns <code>true</code> if the steal operation needs to be retried.","Returns the result of the operation, if successful.","If no task was stolen, attempts another steal operation."],"i":[0,0,1,1,1,0,0,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,4,3,1,4,1,1,2,3,4,1,1,2,2,2,2,2,2,2,3,3,3,3,4,4,4,4,4,4,4,1,1,1,1,1],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["stealer",3]],[[],["steal",4]],[[]],[[["steal",4]],["bool",15]],[[["steal",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["steal",4]],[[],["worker",3]],[[],["worker",3]],[[],["stealer",3]],[[],["bool",15]],[[],["usize",15]],[[]],[[],["option",4]],[[],["bool",15]],[[],["steal",4]],[[["worker",3]],["steal",4]],[[["worker",3]],["steal",4]],[[],["injector",3]],[[]],[[],["steal",4]],[[["worker",3]],["steal",4]],[[["worker",3]],["steal",4]],[[],["bool",15]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["steal",4]]],"p":[[4,"Steal"],[3,"Worker"],[3,"Stealer"],[3,"Injector"]]},\
"crossbeam_epoch":{"doc":"Epoch-based memory reclamation.","t":[8,18,16,10,10,10,10,3,3,12,12,3,8,10,10,3,3,3,5,3,6,8,10,10,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Pointable","ALIGN","Init","init","deref","deref_mut","drop","Atomic","CompareExchangeError","current","new","Owned","Pointer","into_usize","from_usize","Shared","Collector","LocalHandle","unprotected","Guard","CompareAndSetError","CompareAndSetOrdering","success","failure","default_collector","is_pinned","pin","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","into_usize","from_usize","into_usize","from_usize","drop","drop","drop","as_mut","as_ref","from","from","from","from","from","from","from","from","clone","clone","clone","clone","default","default","default","cmp","eq","eq","partial_cmp","deref","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","borrow","borrow_mut","fmt","fmt","ALIGN","new","init","null","load","load_consume","store","swap","compare_exchange","compare_exchange_weak","compare_and_set","compare_and_set_weak","fetch_and","fetch_or","fetch_xor","into_owned","from_raw","into_box","new","init","into_shared","tag","with_tag","as_raw","null","is_null","deref","deref_mut","as_ref","into_owned","tag","with_tag","new","register","pin","is_pinned","collector","defer","defer_unchecked","defer_destroy","flush","repin","repin_after","collector"],"q":["crossbeam_epochd":["Types that are pointed to by a single word.","The alignment of pointer.","The type for initializers.","Initializes a with the given initializer.","Dereferences the given pointer.","Mutably dereferences the given pointer.","Drops the object pointed to by the given pointer.","An atomic pointer that can be safely shared between …","The error returned on failed compare-and-swap operation.","The value in the atomic pointer at the time of the failed …","The new value, which the operation failed to store.","An owned heap-allocated object.","A trait for either <code>Owned</code> or <code>Shared</code> pointers.","Returns the machine representation of the pointer.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","A pointer to an object protected by the epoch GC.","An epoch-based garbage collector.","A handle to a garbage collector.","Returns a reference to a dummy guard that allows …","A guard that keeps the current thread pinned.","The error returned on failed compare-and-set operation.","Memory orderings for compare-and-set operations.","The ordering of the operation when it succeeds.","The ordering of the operation when it fails.","Returns the default global collector.","Returns <code>true</code> if the current thread is pinned.","Pins the current thread.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a new pointer pointing to the tagged pointer <code>data</code>.","","","","","","","","Returns a new atomic pointer pointing to <code>owned</code>.","","","Returns a new atomic pointer pointing to <code>ptr</code>.","Returns a new atomic pointer pointing to <code>raw</code>.","","Returns a new owned pointer pointing to <code>b</code>.","Returns a new pointer pointing to <code>raw</code>.","Returns a copy of the atomic value.","","","Creates another reference to the same garbage collector.","","","","","","Checks if both handles point to the same collector.","","","","","","","","","","","","","","","The alignment of pointer.","Allocates <code>value</code> on the heap and returns a new atomic …","Allocates <code>value</code> on the heap and returns a new atomic …","Returns a new null atomic pointer.","Loads a <code>Shared</code> from the atomic pointer.","Loads a <code>Shared</code> from the atomic pointer using a “consume…","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer.","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer, …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Bitwise “and” with the current tag.","Bitwise “or” with the current tag.","Bitwise “xor” with the current tag.","Takes ownership of the pointee.","Returns a new owned pointer pointing to <code>raw</code>.","Converts the owned pointer into a <code>Box</code>.","Allocates <code>value</code> on the heap and returns a new owned …","Allocates <code>value</code> on the heap and returns a new owned …","Converts the owned pointer into a [<code>Shared</code>].","Returns the tag stored within the pointer.","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …","Converts the pointer to a raw pointer (without the tag).","Returns a new null pointer.","Returns <code>true</code> if the pointer is null.","Dereferences the pointer.","Dereferences the pointer.","Converts the pointer to a reference.","Takes ownership of the pointee.","Returns the tag stored within the pointer.","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …","Creates a new collector.","Registers a new handle for the collector.","Pins the handle.","Returns <code>true</code> if the handle is pinned.","Returns the <code>Collector</code> associated with this handle.","Stores a function so that it can be executed at some …","Stores a function so that it can be executed at some …","Stores a destructor for an object so that it can be …","Clears up the thread-local cache of deferred functions by …","Unpins and then immediately re-pins the thread.","Temporarily unpins the thread, executes the given …","Returns the <code>Collector</code> associated with this guard."],"i":[0,1,1,1,1,1,1,0,0,2,2,0,0,3,3,0,0,0,0,0,0,0,4,4,0,0,0,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,6,6,7,7,6,9,10,6,6,5,5,5,5,5,6,6,7,5,6,7,8,5,7,8,7,7,8,7,6,6,2,5,6,7,8,9,10,6,6,5,7,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,9,9,9,10,10,10,10,10,10,10],"f":[null,null,null,[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,null,null,null,null,[[],["usize",15]],[[["usize",15]]],null,null,null,[[],["guard",3]],null,null,null,[[],["ordering",4]],[[],["ordering",4]],[[],["collector",3]],[[],["bool",15]],[[],["guard",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[],["usize",15]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[["owned",3]]],[[["box",3]]],[[]],[[["shared",3]]],[[]],[[]],[[["box",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[],["bool",15]],[[["collector",3]],["bool",15]],[[],[["ordering",4],["option",4]]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[],["atomic",3]],[[],["atomic",3]],[[],["atomic",3]],[[["guard",3],["ordering",4]],["shared",3]],[[["guard",3]],["shared",3]],[[["pointer",8],["ordering",4]]],[[["guard",3],["pointer",8],["ordering",4]],["shared",3]],[[["guard",3],["shared",3],["ordering",4]],[["shared",3],["result",4],["compareexchangeerror",3]]],[[["guard",3],["shared",3],["ordering",4]],[["shared",3],["result",4],["compareexchangeerror",3]]],[[["guard",3],["shared",3]],[["compareandseterror",6],["shared",3],["result",4]]],[[["guard",3],["shared",3]],[["compareandseterror",6],["shared",3],["result",4]]],[[["usize",15],["guard",3],["ordering",4]],["shared",3]],[[["usize",15],["guard",3],["ordering",4]],["shared",3]],[[["usize",15],["guard",3],["ordering",4]],["shared",3]],[[],["owned",3]],[[],["owned",3]],[[],["box",3]],[[],["owned",3]],[[],["owned",3]],[[["guard",3]],["shared",3]],[[],["usize",15]],[[["usize",15]],["owned",3]],[[]],[[],["shared",3]],[[],["bool",15]],[[]],[[]],[[],["option",4]],[[],["owned",3]],[[],["usize",15]],[[["usize",15]],["shared",3]],[[]],[[],["localhandle",3]],[[],["guard",3]],[[],["bool",15]],[[],["collector",3]],[[]],[[]],[[["shared",3]]],[[]],[[]],[[]],[[],[["option",4],["collector",3]]]],"p":[[8,"Pointable"],[3,"CompareExchangeError"],[8,"Pointer"],[8,"CompareAndSetOrdering"],[3,"Atomic"],[3,"Owned"],[3,"Shared"],[3,"Collector"],[3,"LocalHandle"],[3,"Guard"]]},\
"crossbeam_utils":{"doc":"Miscellaneous tools for concurrent programming.","t":[0,3,8,16,10,0,3,3,3,3,3,3,0,5,3,11,11,3,11,11,11,3,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["atomic","AtomicCell","AtomicConsume","Val","load_consume","sync","Parker","Unparker","ShardedLock","ShardedLockReadGuard","ShardedLockWriteGuard","WaitGroup","thread","scope","Scope","spawn","builder","ScopedThreadBuilder","name","stack_size","spawn","ScopedJoinHandle","join","thread","CachePadded","Backoff","from","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","drop","drop","from","from","from","clone","clone","clone","default","default","default","default","default","default","eq","ne","deref","deref","deref","deref_mut","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","hash","as_pthread_t","into_pthread_t","new","into_inner","is_lock_free","store","swap","as_ptr","take","load","compare_and_swap","compare_exchange","fetch_add","fetch_sub","fetch_and","fetch_or","fetch_xor","fetch_add","fetch_sub","fetch_and","fetch_or","fetch_xor","fetch_add","fetch_sub","fetch_and","fetch_or","fetch_xor","fetch_add","fetch_sub","fetch_and","fetch_or","fetch_xor","fetch_add","fetch_sub","fetch_and","fetch_or","fetch_xor","fetch_add","fetch_sub","fetch_and","fetch_or","fetch_xor","fetch_add","fetch_sub","fetch_and","fetch_or","fetch_xor","fetch_add","fetch_sub","fetch_and","fetch_or","fetch_xor","fetch_add","fetch_sub","fetch_and","fetch_or","fetch_xor","fetch_add","fetch_sub","fetch_and","fetch_or","fetch_xor","fetch_and","fetch_or","fetch_xor","new","into_inner","new","reset","spin","snooze","is_completed","new","park","park_timeout","park_deadline","unparker","into_raw","from_raw","unpark","into_raw","from_raw","new","into_inner","is_poisoned","get_mut","try_read","read","try_write","write","new","wait"],"q":["crossbeam_utils","crossbeam_utils::atomic","","","","crossbeam_utils","crossbeam_utils::sync","","","","","","crossbeam_utils","crossbeam_utils::thread","","","","","","","","","","","crossbeam_utils","","crossbeam_utils::atomic","","","","","","","","crossbeam_utils","","","","","","","","","","","","","","","","","crossbeam_utils::sync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam_utils::thread","","","","","","","","","","","","","","","","","","","","","crossbeam_utils::sync","","crossbeam_utils::atomic","crossbeam_utils","crossbeam_utils::sync","crossbeam_utils","crossbeam_utils::sync","","crossbeam_utils::atomic","crossbeam_utils","","crossbeam_utils::sync","","","crossbeam_utils","","","crossbeam_utils::sync","","crossbeam_utils","crossbeam_utils::sync","crossbeam_utils::atomic","crossbeam_utils","","crossbeam_utils::sync","","","","","","crossbeam_utils::thread","","","crossbeam_utils::sync","","crossbeam_utils","crossbeam_utils::thread","","crossbeam_utils::atomic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam_utils","","","","","","","crossbeam_utils::sync","","","","","","","","","","","","","","","","","","",""],"d":["Atomic types.","A thread-safe mutable memory location.","Trait which allows reading from primitive atomic types …","Type returned by <code>load_consume</code>.","Loads a value from the atomic using a “consume” …","Thread synchronization primitives.","A thread parking primitive.","Unparks a thread parked by the associated [<code>Parker</code>].","A sharded reader-writer lock.","A guard used to release the shared read access of a […","A guard used to release the exclusive write access of a […","Enables threads to synchronize the beginning or end of …","Threads that can borrow variables from the stack.","Creates a new scope for spawning threads.","A scope for spawning threads.","Spawns a scoped thread.","Creates a builder that can configure a thread before …","Configures the properties of a new thread.","Sets the name for the new thread.","Sets the size of the stack for the new thread.","Spawns a scoped thread with this configuration.","A handle that can be used to join its scoped thread.","Waits for the thread to finish and returns its result.","Returns a handle to the underlying thread.","Pads and aligns a value to the length of a cache line.","Performs exponential backoff in spin loops.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new atomic cell initialized with <code>val</code>.","Consumes the atomic and returns the contained value.","Returns <code>true</code> if operations on values of this type are …","Stores <code>val</code> into the atomic cell.","Stores <code>val</code> into the atomic cell and returns the previous …","Returns a raw pointer to the underlying data in this …","Takes the value of the atomic cell, leaving …","Loads a value from the atomic cell.","If the current value equals <code>current</code>, stores <code>new</code> into the …","If the current value equals <code>current</code>, stores <code>new</code> into the …","Increments the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Applies bitwise “and” to the current value and …","Applies bitwise “or” to the current value and returns …","Applies bitwise “xor” to the current value and …","Increments the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Applies bitwise “and” to the current value and …","Applies bitwise “or” to the current value and returns …","Applies bitwise “xor” to the current value and …","Increments the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Applies bitwise “and” to the current value and …","Applies bitwise “or” to the current value and returns …","Applies bitwise “xor” to the current value and …","Increments the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Applies bitwise “and” to the current value and …","Applies bitwise “or” to the current value and returns …","Applies bitwise “xor” to the current value and …","Increments the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Applies bitwise “and” to the current value and …","Applies bitwise “or” to the current value and returns …","Applies bitwise “xor” to the current value and …","Increments the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Applies bitwise “and” to the current value and …","Applies bitwise “or” to the current value and returns …","Applies bitwise “xor” to the current value and …","Increments the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Applies bitwise “and” to the current value and …","Applies bitwise “or” to the current value and returns …","Applies bitwise “xor” to the current value and …","Increments the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Applies bitwise “and” to the current value and …","Applies bitwise “or” to the current value and returns …","Applies bitwise “xor” to the current value and …","Increments the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Applies bitwise “and” to the current value and …","Applies bitwise “or” to the current value and returns …","Applies bitwise “xor” to the current value and …","Increments the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Applies bitwise “and” to the current value and …","Applies bitwise “or” to the current value and returns …","Applies bitwise “xor” to the current value and …","Applies logical “and” to the current value and …","Applies logical “or” to the current value and returns …","Applies logical “xor” to the current value and …","Pads and aligns a value to the length of a cache line.","Returns the inner value.","Creates a new <code>Backoff</code>.","Resets the <code>Backoff</code>.","Backs off in a lock-free loop.","Backs off in a blocking loop.","Returns <code>true</code> if exponential backoff has completed and …","Creates a new <code>Parker</code>.","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Returns a reference to an associated [<code>Unparker</code>].","Converts a <code>Parker</code> into a raw pointer.","Converts a raw pointer into a <code>Parker</code>.","Atomically makes the token available if it is not already.","Converts an <code>Unparker</code> into a raw pointer.","Converts a raw pointer into an <code>Unparker</code>.","Creates a new sharded reader-writer lock.","Consumes this lock, returning the underlying data.","Returns <code>true</code> if the lock is poisoned.","Returns a mutable reference to the underlying data.","Attempts to acquire this lock with shared read access.","Locks with shared read access, blocking the current …","Attempts to acquire this lock with exclusive write access.","Locks with exclusive write access, blocking the current …","Creates a new wait group and returns the single reference …","Drops this reference and waits until all other references …"],"i":[0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,2,2,0,3,3,3,0,4,4,0,0,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,12,13,5,6,10,6,9,13,5,6,7,8,10,13,6,6,6,11,12,6,12,5,6,7,8,9,10,11,12,13,2,3,4,11,12,6,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,10,10,10,10,10,10,10,10,13,13],"f":[null,null,null,null,[[]],null,null,null,null,null,null,null,null,[[],["result",6]],null,[[],["scopedjoinhandle",3]],[[],["scopedthreadbuilder",3]],null,[[["string",3]],["scopedthreadbuilder",3]],[[["usize",15]],["scopedthreadbuilder",3]],[[],[["scopedjoinhandle",3],["result",6]]],null,[[],["result",6]],[[],["thread",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["atomiccell",3]],[[]],[[]],[[],["cachepadded",3]],[[],["unparker",3]],[[],["waitgroup",3]],[[],["atomiccell",3]],[[],["cachepadded",3]],[[],["backoff",3]],[[]],[[],["shardedlock",3]],[[]],[[["cachepadded",3]],["bool",15]],[[["cachepadded",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["rawpthread",6]],[[],["rawpthread",6]],[[],["atomiccell",3]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[["u8",15]],["u8",15]],[[["u8",15]],["u8",15]],[[["u8",15]],["u8",15]],[[["u8",15]],["u8",15]],[[["u8",15]],["u8",15]],[[["i8",15]],["i8",15]],[[["i8",15]],["i8",15]],[[["i8",15]],["i8",15]],[[["i8",15]],["i8",15]],[[["i8",15]],["i8",15]],[[["u16",15]],["u16",15]],[[["u16",15]],["u16",15]],[[["u16",15]],["u16",15]],[[["u16",15]],["u16",15]],[[["u16",15]],["u16",15]],[[["i16",15]],["i16",15]],[[["i16",15]],["i16",15]],[[["i16",15]],["i16",15]],[[["i16",15]],["i16",15]],[[["i16",15]],["i16",15]],[[["u32",15]],["u32",15]],[[["u32",15]],["u32",15]],[[["u32",15]],["u32",15]],[[["u32",15]],["u32",15]],[[["u32",15]],["u32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["i32",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["i64",15]],["i64",15]],[[["i64",15]],["i64",15]],[[["i64",15]],["i64",15]],[[["i64",15]],["i64",15]],[[["i64",15]],["i64",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["isize",15]],["isize",15]],[[["isize",15]],["isize",15]],[[["isize",15]],["isize",15]],[[["isize",15]],["isize",15]],[[["isize",15]],["isize",15]],[[["bool",15]],["bool",15]],[[["bool",15]],["bool",15]],[[["bool",15]],["bool",15]],[[],["cachepadded",3]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["parker",3]],[[]],[[["duration",3]]],[[["instant",3]]],[[],["unparker",3]],[[["parker",3]]],[[],["parker",3]],[[]],[[["unparker",3]]],[[],["unparker",3]],[[],["shardedlock",3]],[[],["lockresult",6]],[[],["bool",15]],[[],["lockresult",6]],[[],[["trylockresult",6],["shardedlockreadguard",3]]],[[],[["lockresult",6],["shardedlockreadguard",3]]],[[],[["shardedlockwriteguard",3],["trylockresult",6]]],[[],[["shardedlockwriteguard",3],["lockresult",6]]],[[]],[[]]],"p":[[8,"AtomicConsume"],[3,"Scope"],[3,"ScopedThreadBuilder"],[3,"ScopedJoinHandle"],[3,"AtomicCell"],[3,"CachePadded"],[3,"Backoff"],[3,"Parker"],[3,"Unparker"],[3,"ShardedLock"],[3,"ShardedLockReadGuard"],[3,"ShardedLockWriteGuard"],[3,"WaitGroup"]]},\
"deflate":{"doc":"An implementation an encoder using DEFLATE compression …","t":[0,3,3,4,13,13,13,3,12,12,12,12,4,13,13,13,4,13,13,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["write","DeflateEncoder","ZlibEncoder","Compression","Fast","Default","Best","CompressionOptions","max_hash_checks","lazy_if_less_than","matching_type","special","SpecialOptions","Normal","_ForceFixed","_ForceStored","MatchingType","Greedy","Lazy","deflate_bytes_conf","deflate_bytes","deflate_bytes_zlib_conf","deflate_bytes_zlib","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","drop","drop","from","clone","clone","clone","clone","default","default","default","cmp","cmp","eq","eq","eq","ne","eq","partial_cmp","partial_cmp","fmt","fmt","fmt","fmt","fmt","hash","hash","hash","hash","write","flush","write","flush","high","fast","huffman_only","rle","new","finish","reset","new","finish","reset","checksum"],"q":["deflate","deflate::write","","deflate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","deflate::write","","","","","","","","","","","","","","","","deflate","","","","","","","","","","","","","","","","","","","","","","","","","","deflate::write","","","","deflate","","","","deflate::write","","","","","",""],"d":["Encoders implementing a <code>Write</code> interface.","A DEFLATE encoder/compressor.","A Zlib encoder/compressor.","An enum describing the level of compression to be used by …","Fast minimal compression (<code>CompressionOptions::fast()</code>).","Default level (<code>CompressionOptions::default()</code>).","Higher compression level (<code>CompressionOptions::high()</code>).","A struct describing the options for a compressor or …","The maximum number of checks to make in the hash table …","Only lazy match if we have a length less than this value.","Whether to use lazy or greedy matching.","Force fixed/stored blocks (Not implemented yet).","Enum allowing some special options (not implemented yet)!","Compress normally.","Force fixed Huffman tables. (Unimplemented!).","Force stored (uncompressed) blocks only. (Unimplemented!).","An enum describing whether we use lazy or greedy matching.","Use greedy matching: the matching algorithm simply uses a …","Use lazy matching: after finding a match, the next input …","Compress the given slice of bytes with DEFLATE …","Compress the given slice of bytes with DEFLATE …","Compress the given slice of bytes with DEFLATE …","Compress the given slice of bytes with DEFLATE …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","When the encoder is dropped, output the rest of the data.","When the encoder is dropped, output the rest of the data.","","","","","","","","Returns the options describing the default compression …","","","","","","","","","","","","","","","","","","","","Flush the encoder.","","Flush the encoder.","Returns compression settings roughly corresponding to the …","Returns  a fast set of compression settings","Returns a set of compression settings that makes the …","Returns a set of compression settings that makes the …","Creates a new encoder using the provided compression …","Encode all pending data to the contained writer, consume …","Resets the encoder (except the compression options), …","Create a new <code>ZlibEncoder</code> using the provided compression …","Encode all pending data to the contained writer, consume …","Resets the encoder (except the compression options), …","Return the adler32 checksum of the currently consumed …"],"i":[0,0,0,0,1,1,1,0,2,2,2,2,0,3,3,3,0,4,4,0,0,0,0,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,5,6,2,1,3,2,4,1,3,2,1,4,1,3,2,2,4,1,4,1,3,2,4,4,1,3,2,4,5,5,6,6,2,2,2,2,5,5,5,6,6,6,6],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["compressionoptions",3],["into",8]],[["vec",3],["u8",15]]],[[],[["vec",3],["u8",15]]],[[["compressionoptions",3],["into",8]],[["vec",3],["u8",15]]],[[],[["vec",3],["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[["compression",4]],["compressionoptions",3]],[[],["compression",4]],[[],["specialoptions",4]],[[],["compressionoptions",3]],[[],["matchingtype",4]],[[],["compression",4]],[[],["specialoptions",4]],[[],["compressionoptions",3]],[[["compression",4]],["ordering",4]],[[["matchingtype",4]],["ordering",4]],[[["compression",4]],["bool",15]],[[["specialoptions",4]],["bool",15]],[[["compressionoptions",3]],["bool",15]],[[["compressionoptions",3]],["bool",15]],[[["matchingtype",4]],["bool",15]],[[["compression",4]],[["ordering",4],["option",4]]],[[["matchingtype",4]],[["ordering",4],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],[["usize",15],["result",6]]],[[],["result",6]],[[],[["usize",15],["result",6]]],[[],["result",6]],[[],["compressionoptions",3]],[[],["compressionoptions",3]],[[],["compressionoptions",3]],[[],["compressionoptions",3]],[[["compressionoptions",3],["into",8]],["deflateencoder",3]],[[],["result",6]],[[],["result",6]],[[["compressionoptions",3],["into",8]],["zlibencoder",3]],[[],["result",6]],[[],["result",6]],[[],["u32",15]]],"p":[[4,"Compression"],[3,"CompressionOptions"],[4,"SpecialOptions"],[4,"MatchingType"],[3,"DeflateEncoder"],[3,"ZlibEncoder"]]},\
"diffuse":{"doc":"Diffusion simulation binary. Compute the time evolution …","t":[17,5,5,5],"n":["BACKUP_TERM_WIDTH","main","initialisation","load_parameters"],"q":["diffuse","","",""],"d":["Backup print width if the terminal width can not be …","Main simulation function.","Initialise the input arguments.","Load the required files and form the input parameters."],"i":[0,0,0,0],"f":[null,[[]],[[["usize",15]]],[[["usize",15],["path",3]],["parameters",3]]],"p":[]},\
"either":{"doc":"The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","t":[4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Either","Left","Right","is_left","is_right","left","right","as_ref","as_mut","flip","map_left","map_right","either","either_with","left_and_then","right_and_then","into_iter","left_or","left_or_default","left_or_else","right_or","right_or_default","right_or_else","unwrap_left","unwrap_right","expect_left","expect_right","factor_first","factor_second","into_inner","map","try_left","try_right","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","deref","deref_mut","fmt","fmt","eq","ne","cmp","partial_cmp","hash","next_back","next","size_hint","fold","count","last","nth","collect","all","extend","from","as_ref","as_ref","as_ref","as_mut","as_mut","as_mut","into","clone"],"q":["either","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","A value of type <code>L</code>.","A value of type <code>R</code>.","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","Convert the left side of <code>Either<L, R></code> to an <code>Option<L></code>.","Convert the right side of <code>Either<L, R></code> to an <code>Option<R></code>.","Convert <code>&Either<L, R></code> to <code>Either<&L, &R></code>.","Convert <code>&mut Either<L, R></code> to <code>Either<&mut L, &mut R></code>.","Convert <code>Either<L, R></code> to <code>Either<R, L></code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Apply one of two functions depending on contents, …","Like <code>either</code>, but provide some context to whichever of the …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Convert the inner value to an iterator.","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","Returns the left value","Returns the right value","Returns the left value","Returns the right value","Factor out a homogeneous type from an either of pairs.","Factor out a homogeneous type from an either of pairs.","Extract the value of an either over two equivalent types.","Map <code>f</code> over the contained value and return the result in …","Macro for unwrapping the left side of an <code>Either</code>, which …","Dual to <code>try_left!</code>, see its documentation for more …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["either",4]],[[],["either",4]],[[],["either",4]],[[],["either",4]],[[],["either",4]],[[]],[[]],[[],["either",4]],[[],["either",4]],[[],["either",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]]],[[["str",15]]],[[]],[[]],[[]],[[],["either",4]],null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["either",4]],["bool",15]],[[["either",4]],["bool",15]],[[["either",4]],["ordering",4]],[[["either",4]],[["option",4],["ordering",4]]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["usize",15]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[],["bool",15]],[[]],[[["result",4]]],[[]],[[],["str",15]],[[]],[[],["str",15]],[[]],[[]],[[],["result",4]],[[],["either",4]]],"p":[[4,"Either"]]},\
"flask":{"doc":"Chemical network simulation binary. Compute the time …","t":[17,5,5,5,5],"n":["BACKUP_TERM_WIDTH","main","initialisation","load_parameters","save"],"q":["flask","","","",""],"d":["Backup print width if the terminal width can not be …","Main simulation function.","Initialise the input arguments.","Load the required files and form the input parameters.","Save the output data."],"i":[0,0,0,0,0],"f":[null,[[]],[[["usize",15]]],[[["usize",15],["path",3]],["parameters",3]],[[["f64",15],["array2",6],["path",3],["input",3]]]],"p":[]},\
"getrandom":{"doc":"Interface to the operating system’s random number …","t":[3,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,18,18,18,18,18,18,18,18,18,11,11],"n":["Error","getrandom","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","fmt","fmt","eq","ne","from","clone","UNSUPPORTED","ERRNO_NOT_POSITIVE","IOS_SEC_RANDOM","WINDOWS_RTL_GEN_RANDOM","FAILED_RDRAND","NO_RDRAND","WEB_CRYPTO","WEB_GET_RANDOM_VALUES","VXWORKS_RAND_SECURE","NODE_CRYPTO","NODE_RANDOM_FILL_SYNC","INTERNAL_START","CUSTOM_START","raw_os_error","code"],"q":["getrandom","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A small and <code>no_std</code> compatible error type","Fill <code>dest</code> with random bytes from the system’s preferred …","","","","","","","","","","","","","","","","","This target/platform is not supported by <code>getrandom</code>.","The platform-specific <code>errno</code> returned a non-positive value.","Call to iOS <code>SecRandomCopyBytes</code> failed.","Call to Windows <code>RtlGenRandom</code> failed.","RDRAND instruction failed due to a hardware issue.","RDRAND instruction unsupported on this target.","The browser does not have support for <code>self.crypto</code>.","The browser does not have support for …","On VxWorks, call to <code>randSecure</code> failed (random number …","NodeJS does not have support for the <code>crypto</code> module.","NodeJS does not have support for <code>crypto.randomFillSync</code>.","Codes below this point represent OS Errors (i.e. positive …","Codes at or above this point can be used by users to …","Extract the raw OS error code (if this error came from …","Extract the bare error code."],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[],[["error",3],["result",4]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",3]],["bool",15]],[[["error",3]],["bool",15]],[[["nonzerou32",3]]],[[],["error",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["option",4],["i32",15]]],[[],["nonzerou32",3]]],"p":[[3,"Error"]]},\
"hashbrown":{"doc":"This crate is a Rust port of Google’s high-performance …","t":[0,3,3,3,3,3,3,0,4,3,3,3,3,3,3,3,3,3,3,4,13,13,3,3,3,4,13,13,3,3,0,3,3,3,3,3,3,3,3,3,3,3,4,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["raw","Bucket","RawTable","RawIter","RawIntoIter","RawDrain","RawIterHash","hash_map","DefaultHashBuilder","HashMap","Iter","IterMut","IntoIter","Keys","Values","Drain","DrainFilter","ValuesMut","RawEntryBuilderMut","RawEntryMut","Occupied","Vacant","RawOccupiedEntryMut","RawVacantEntryMut","RawEntryBuilder","Entry","Occupied","Vacant","OccupiedEntry","VacantEntry","hash_set","HashSet","Iter","IntoIter","Drain","DrainFilter","Intersection","Difference","SymmetricDifference","Union","HashMap","HashSet","TryReserveError","CapacityOverflow","AllocError","layout","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","eq","eq","ne","drop","drop","drop","drop","drop","index","len","len","len","len","len","len","len","len","len","len","from_iter","from_iter","next","size_hint","next","size_hint","next","size_hint","next","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","into_iter","into_iter","into_iter","extend","extend","extend","extend","clone","clone","clone_from","clone","clone","clone_from","clone","clone","clone","clone","clone_from","clone","clone","clone","clone","clone","clone","default","default","as_ptr","drop","read","write","as_ref","as_mut","copy_from_nonoverlapping","new","try_with_capacity","with_capacity","data_end","bucket_index","bucket","erase_no_drop","erase","erase_entry","remove","remove_entry","clear_no_drop","clear","shrink_to","reserve","try_reserve","insert","insert_entry","insert_no_grow","replace_bucket_with","find","get","get_mut","capacity","len","buckets","iter","iter_hash","drain","drain_iter_from","into_iter_from","clone_from_with_hasher","reflect_remove","reflect_insert","iter","iter","with_hasher","with_capacity_and_hasher","hasher","capacity","keys","values","values_mut","iter","iter_mut","len","is_empty","drain","retain","drain_filter","clear","reserve","try_reserve","shrink_to_fit","shrink_to","entry","get","get_key_value","get_key_value_mut","contains_key","get_mut","insert","remove","remove_entry","raw_entry_mut","raw_entry","from_key","from_key_hashed_nocheck","from_hash","from_key","from_key_hashed_nocheck","from_hash","insert","or_insert","or_insert_with","and_modify","and_replace_entry_with","key","key_mut","into_key","get","into_mut","get_mut","get_key_value","get_key_value_mut","into_key_value","insert","insert_key","remove","remove_entry","replace_entry_with","insert","insert_hashed_nocheck","insert_with_hasher","insert","or_insert","or_insert_with","or_insert_with_key","key","and_modify","and_replace_entry_with","or_default","key","remove_entry","get","get_mut","into_mut","insert","remove","replace_entry","replace_key","replace_entry_with","key","into_key","insert","with_hasher","with_capacity_and_hasher","capacity","iter","len","is_empty","drain","retain","drain_filter","clear","hasher","reserve","try_reserve","shrink_to_fit","shrink_to","difference","symmetric_difference","intersection","union","contains","get","get_or_insert","get_or_insert_owned","get_or_insert_with","is_disjoint","is_subset","is_superset","insert","replace","remove","take"],"q":["hashbrown","hashbrown::raw","","","","","","hashbrown","hashbrown::hash_map","","","","","","","","","","","","","","","","","","","","","","hashbrown","hashbrown::hash_set","","","","","","","","","hashbrown","","","","","hashbrown::TryReserveError","hashbrown::raw","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hashbrown::hash_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hashbrown::hash_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hashbrown","","","","","","","","","hashbrown::hash_map","","","","","","","","","","","","","","","","hashbrown::hash_set","","","","","","","","hashbrown","hashbrown::hash_map","hashbrown::hash_set","hashbrown","","hashbrown::raw","","","hashbrown::hash_map","hashbrown::hash_set","hashbrown::hash_map","","","","","","","","hashbrown::hash_set","","","hashbrown::hash_map","hashbrown::hash_set","hashbrown::raw","","","","","","","hashbrown::hash_map","","","","","","","","","","","","","","","","hashbrown::hash_set","","","","","","","","","","","","","","","","hashbrown::raw","hashbrown::hash_map","hashbrown::hash_set","hashbrown::hash_map","","hashbrown::hash_set","","hashbrown::raw","","","","hashbrown::hash_map","","","","","hashbrown::hash_set","","","","","","","hashbrown","hashbrown::hash_map","hashbrown::hash_set","hashbrown::raw","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hashbrown::hash_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hashbrown::hash_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Experimental and unsafe <code>RawTable</code> API. This module is only …","A reference to a hash table bucket containing a <code>T</code>.","A raw hash table with an unsafe API.","Iterator which returns a raw pointer to every full bucket …","Iterator which consumes a table and returns elements.","Iterator which consumes elements without freeing the …","Iterator over occupied buckets that could match a given …","A hash map implemented with quadratic probing and SIMD …","Dummy default hasher for <code>HashMap</code>.","A hash map implemented with quadratic probing and SIMD …","An iterator over the entries of a <code>HashMap</code>.","A mutable iterator over the entries of a <code>HashMap</code>.","An owning iterator over the entries of a <code>HashMap</code>.","An iterator over the keys of a <code>HashMap</code>.","An iterator over the values of a <code>HashMap</code>.","A draining iterator over the entries of a <code>HashMap</code>.","A draining iterator over entries of a <code>HashMap</code> which don’…","A mutable iterator over the values of a <code>HashMap</code>.","A builder for computing where in a [<code>HashMap</code>] a key-value …","A view into a single entry in a map, which may either be …","An occupied entry.","A vacant entry.","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into a vacant entry in a <code>HashMap</code>. It is part of …","A builder for computing where in a [<code>HashMap</code>] a key-value …","A view into a single entry in a map, which may either be …","An occupied entry.","A vacant entry.","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into a vacant entry in a <code>HashMap</code>. It is part of …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","An iterator over the items of a <code>HashSet</code>.","An owning iterator over the items of a <code>HashSet</code>.","A draining iterator over the items of a <code>HashSet</code>.","A draining iterator over entries of a <code>HashSet</code> which don’…","A lazy iterator producing elements in the intersection of …","A lazy iterator producing elements in the difference of …","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>HashSet</code>…","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","The error type for <code>try_reserve</code> methods.","Error due to the computed capacity exceeding the …","The memory allocator returned an error","The layout of the allocation request that failed.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value corresponding to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a consuming iterator, that is, one that moves …","Creates a consuming iterator, that is, one that moves …","","","","","","","","","","","","","","","","","","","","","","Creates an empty <code>HashMap<K, V, S></code>, with the <code>Default</code> value …","Creates an empty <code>HashSet<T, S></code> with the <code>Default</code> value for …","","","","","","","","Creates a new empty hash table without allocating any …","Attempts to allocate a new hash table with at least …","Allocates a new hash table with at least enough capacity …","Returns pointer to one past last element of data table.","Returns the index of a bucket from a <code>Bucket</code>.","Returns a pointer to an element in the table.","Erases an element from the table without dropping it.","Erases an element from the table, dropping it in place.","Finds and erases an element from the table, dropping it …","Removes an element from the table, returning it.","Finds and removes an element from the table, returning it.","Marks all table buckets as empty without dropping their …","Removes all elements from the table without freeing the …","Shrinks the table to fit <code>max(self.len(), min_size)</code> …","Ensures that at least <code>additional</code> items can be inserted …","Tries to ensure that at least <code>additional</code> items can be …","Inserts a new element into the table, and returns its raw …","Inserts a new element into the table, and returns a …","Inserts a new element into the table, without growing the …","Temporary removes a bucket, applying the given function …","Searches for an element in the table.","Gets a reference to an element in the table.","Gets a mutable reference to an element in the table.","Returns the number of elements the map can hold without …","Returns the number of elements in the table.","Returns the number of buckets in the table.","Returns an iterator over every element in the table. It …","Returns an iterator over occupied buckets that could …","Returns an iterator which removes all elements from the …","Returns an iterator which removes all elements from the …","Returns an iterator which consumes all elements from the …","Variant of <code>clone_from</code> to use when a hasher is available.","Refresh the iterator so that it reflects a removal from …","Refresh the iterator so that it reflects an insertion …","","","Creates an empty <code>HashMap</code> which will use the given hash …","Creates an empty <code>HashMap</code> with the specified capacity, …","Returns a reference to the map’s <code>BuildHasher</code>.","Returns the number of elements the map can hold without …","An iterator visiting all keys in arbitrary order. The …","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","Returns the number of elements in the map.","Returns <code>true</code> if the map contains no elements.","Clears the map, returning all key-value pairs as an …","Retains only the elements specified by the predicate.","Drains elements which are true under the given predicate, …","Clears the map, removing all key-value pairs. Keeps the …","Reserves capacity for at least <code>additional</code> more elements …","Tries to reserve capacity for at least <code>additional</code> more …","Shrinks the capacity of the map as much as possible. It …","Shrinks the capacity of the map with a lower limit. It …","Gets the given key’s corresponding entry in the map for …","Returns a reference to the value corresponding to the key.","Returns the key-value pair corresponding to the supplied …","Returns the key-value pair corresponding to the supplied …","Returns <code>true</code> if the map contains a value for the …","Returns a mutable reference to the value corresponding to …","Inserts a key-value pair into the map.","Removes a key from the map, returning the value at the …","Removes a key from the map, returning the stored key and …","Creates a raw entry builder for the HashMap.","Creates a raw immutable entry builder for the HashMap.","Creates a <code>RawEntryMut</code> from the given key.","Creates a <code>RawEntryMut</code> from the given key and its hash.","Creates a <code>RawEntryMut</code> from the given hash.","Access an entry by key.","Access an entry by a key and its hash.","Access an entry by hash.","Sets the value of the entry, and returns a …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result …","Provides in-place mutable access to an occupied entry …","Provides shared access to the key and owned access to the …","Gets a reference to the key in the entry.","Gets a mutable reference to the key in the entry.","Converts the entry into a mutable reference to the key in …","Gets a reference to the value in the entry.","Converts the OccupiedEntry into a mutable reference to …","Gets a mutable reference to the value in the entry.","Gets a reference to the key and value in the entry.","Gets a mutable reference to the key and value in the …","Converts the OccupiedEntry into a mutable reference to …","Sets the value of the entry, and returns the entry’s …","Sets the value of the entry, and returns the entry’s …","Takes the value out of the entry, and returns it.","Take the ownership of the key and value from the map.","Provides shared access to the key and owned access to the …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry with the VacantEntry’s key, …","Set the value of an entry with a custom hasher function.","Sets the value of the entry, and returns an OccupiedEntry.","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result …","Ensures a value is in the entry by inserting, if empty, …","Returns a reference to this entry’s key.","Provides in-place mutable access to an occupied entry …","Provides shared access to the key and owned access to the …","Ensures a value is in the entry by inserting the default …","Gets a reference to the key in the entry.","Take the ownership of the key and value from the map.","Gets a reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Converts the OccupiedEntry into a mutable reference to …","Sets the value of the entry, and returns the entry’s …","Takes the value out of the entry, and returns it.","Replaces the entry, returning the old key and value. The …","Replaces the key in the hash map with the key used to …","Provides shared access to the key and owned access to the …","Gets a reference to the key that would be used when …","Take ownership of the key.","Sets the value of the entry with the VacantEntry’s key, …","Creates a new empty hash set which will use the given …","Creates an empty <code>HashSet</code> with the specified capacity, …","Returns the number of elements the set can hold without …","An iterator visiting all elements in arbitrary order. The …","Returns the number of elements in the set.","Returns <code>true</code> if the set contains no elements.","Clears the set, returning all elements in an iterator.","Retains only the elements specified by the predicate.","Drains elements which are true under the given predicate, …","Clears the set, removing all values.","Returns a reference to the set’s <code>BuildHasher</code>.","Reserves capacity for at least <code>additional</code> more elements …","Tries to reserve capacity for at least <code>additional</code> more …","Shrinks the capacity of the set as much as possible. It …","Shrinks the capacity of the set with a lower limit. It …","Visits the values representing the difference, i.e., the …","Visits the values representing the symmetric difference, …","Visits the values representing the intersection, i.e., …","Visits the values representing the union, i.e., all the …","Returns <code>true</code> if the set contains a value.","Returns a reference to the value in the set, if any, that …","Inserts the given <code>value</code> into the set if it is not …","Inserts an owned copy of the given <code>value</code> into the set if …","Inserts a value computed from <code>f</code> into the set if the given …","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.…","Returns <code>true</code> if the set is a subset of another, i.e., …","Returns <code>true</code> if the set is a superset of another, i.e., …","Adds a value to the set.","Adds a value to the set, replacing the existing value, if …","Removes a value from the set. Returns whether the value …","Removes and returns the value in the set, if any, that is …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,1,1,1,1,1,1,1,22,22,22,22,22,22,22,23,23,23,23,23,23,23,24,24,24,24,24,24,24,2,2,2,2,2,2,2,25,25,25,25,25,25,25,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,3,3,3,3,3,3,3,3,3,12,13,16,17,21,1,22,23,24,2,25,26,14,15,20,18,27,28,29,30,32,33,34,35,3,12,27,3,3,6,8,9,19,31,12,13,14,15,16,17,20,18,28,29,30,12,27,7,7,8,8,9,9,10,19,19,13,13,14,14,15,15,16,16,17,17,20,20,18,18,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,6,12,27,12,12,27,27,5,6,6,7,12,12,13,16,17,27,27,28,32,33,34,35,3,12,27,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,8,9,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,21,21,21,24,24,24,1,1,1,1,1,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,2,2,2,2,2,2,2,2,25,25,25,25,25,25,25,25,25,25,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["bool",15]],[[],["bool",15]],[[["tryreserveerror",4]],["bool",15]],[[["tryreserveerror",4]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],[["bucket",3],["option",4]]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],[["bucket",3],["option",4]]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["rawintoiter",3]],[[],["intoiter",3]],[[],["intoiter",3]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["tryreserveerror",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],[["result",4],["tryreserveerror",4]]],[[["usize",15]]],[[],["nonnull",3]],[[["bucket",3]],["usize",15]],[[["usize",15]],["bucket",3]],[[["bucket",3]]],[[["bucket",3]]],[[["u64",15]],["bool",15]],[[["bucket",3]]],[[["u64",15]],["option",4]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["tryreserveerror",4],["result",4]]],[[["u64",15]],["bucket",3]],[[["u64",15]]],[[["u64",15]],["bucket",3]],[[["bucket",3]],["bool",15]],[[["u64",15]],[["bucket",3],["option",4]]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["rawiter",3]],[[["u64",15]],["rawiterhash",3]],[[],["rawdrain",3]],[[["rawiter",3]],["rawdrain",3]],[[["rawiter",3]],["rawintoiter",3]],[[]],[[["bucket",3]]],[[["bucket",3]]],[[],["rawiter",3]],[[],["rawiter",3]],[[]],[[["usize",15]]],[[]],[[],["usize",15]],[[],["keys",3]],[[],["values",3]],[[],["valuesmut",3]],[[],["iter",3]],[[],["itermut",3]],[[],["usize",15]],[[],["bool",15]],[[],["drain",3]],[[]],[[],["drainfilter",3]],[[]],[[["usize",15]]],[[["usize",15]],[["tryreserveerror",4],["result",4]]],[[]],[[["usize",15]]],[[],["entry",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["rawentrybuildermut",3]],[[],["rawentrybuilder",3]],[[],["rawentrymut",4]],[[["u64",15]],["rawentrymut",4]],[[["u64",15]],["rawentrymut",4]],[[],["option",4]],[[["u64",15]],["option",4]],[[["u64",15]],["option",4]],[[],["rawoccupiedentrymut",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rawentrymut",4]],[[]],[[["u64",15]]],[[["u64",15]]],[[],["occupiedentry",3]],[[]],[[["fnonce",8]]],[[["fnonce",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["entry",4]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["usize",15]],[[],["iter",3]],[[],["usize",15]],[[],["bool",15]],[[],["drain",3]],[[]],[[],["drainfilter",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]],[["tryreserveerror",4],["result",4]]],[[]],[[["usize",15]]],[[],["difference",3]],[[],["symmetricdifference",3]],[[],["intersection",3]],[[],["union",3]],[[],["bool",15]],[[],["option",4]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["bool",15]],[[],["option",4]]],"p":[[4,"RawEntryMut"],[4,"Entry"],[4,"TryReserveError"],[13,"AllocError"],[3,"Bucket"],[3,"RawTable"],[3,"RawIter"],[3,"RawIntoIter"],[3,"RawDrain"],[3,"RawIterHash"],[4,"DefaultHashBuilder"],[3,"HashMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"DrainFilter"],[3,"ValuesMut"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"DrainFilter"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"]]},\
"hdf5_sys":{"doc":"","t":[0,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,4,13,13,13,13,13,4,13,13,13,13,17,17,17,17,17,3,12,12,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,12,12,12,12,6,0,17,17,17,17,17,17,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,12,12,12,12,0,4,13,13,4,13,13,4,13,13,13,13,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,17,17,17,6,17,17,4,13,13,13,13,13,4,13,13,13,13,4,13,13,13,13,4,13,13,13,13,4,13,13,13,4,13,13,13,13,13,4,13,13,13,13,13,13,13,13,6,6,6,4,13,13,13,13,13,13,4,13,13,13,17,6,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,17,4,13,13,3,12,12,12,12,12,12,12,4,13,13,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,4,13,13,4,13,13,13,13,3,12,12,3,12,12,4,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,17,17,17,3,12,12,3,12,12,3,12,12,12,3,12,12,12,3,12,12,12,3,12,12,12,6,4,13,13,13,13,13,13,4,13,13,13,13,13,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,17,17,6,17,17,17,17,17,17,17,17,7,7,7,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,12,12,12,3,12,12,12,12,12,12,12,12,4,13,13,13,13,13,13,13,13,3,12,12,12,12,12,12,12,0,5,5,5,5,5,5,5,5,5,5,17,17,17,17,6,17,17,17,5,4,13,13,13,13,3,12,12,12,12,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,17,6,6,6,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,17,17,17,4,13,13,13,13,13,17,17,3,12,12,12,12,12,3,11,11,3,12,12,12,12,12,19,6,6,6,6,6,6,3,12,12,12,12,12,12,12,12,12,6,6,6,0,6,6,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,4,13,13,13,13,13,13,3,12,12,12,12,12,12,3,12,12,12,12,3,12,12,3,12,12,12,12,12,12,12,12,12,12,12,3,12,12,6,6,6,4,13,13,13,6,17,3,3,3,3,7,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,7,7,7,7,7,7,7,7,17,17,17,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,13,13,13,13,13,13,13,6,6,17,19,3,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,17,17,17,17,17,4,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,4,13,13,13,13,4,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,17,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,17,4,13,13,13,13,13,4,13,13,13,4,13,13,13,3,12,12,12,12,4,13,13,13,4,13,13,13,4,13,13,13,13,13,13,13,4,13,13,13,3,12,12,17,17,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,5,5,5,5,5,5,5,5,5,5,5,6,6,0,5,5,5,5,6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,4,13,13,13,4,13,13,13,13,4,13,13,13,13,6,3,12,12,6,6,6,3,12,12,12,12,12,12,12,12,0,5,5,5,5,5,5,5,5,5,4,13,13,13,13,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["h5","H5open","H5close","H5dont_atexit","H5garbage_collect","H5set_free_list_limits","H5get_libversion","H5check_version","H5free_memory","H5allocate_memory","H5resize_memory","H5is_library_threadsafe","herr_t","htri_t","hsize_t","hssize_t","haddr_t","hbool_t","H5_iter_order_t","H5_ITER_UNKNOWN","H5_ITER_INC","H5_ITER_DEC","H5_ITER_NATIVE","H5_ITER_N","H5_index_t","H5_INDEX_UNKNOWN","H5_INDEX_NAME","H5_INDEX_CRT_ORDER","H5_INDEX_N","H5_ITER_ERROR","H5_ITER_CONT","H5_ITER_STOP","HADDR_UNDEF","HADDR_MAX","H5_ih_info_t","index_size","heap_size","h5a","H5Acreate2","H5Acreate_by_name","H5Aopen","H5Aopen_by_name","H5Aopen_by_idx","H5Awrite","H5Aread","H5Aclose","H5Aget_space","H5Aget_type","H5Aget_create_plist","H5Aget_name","H5Aget_name_by_idx","H5Aget_storage_size","H5Aget_info","H5Aget_info_by_name","H5Aget_info_by_idx","H5Arename","H5Arename_by_name","H5Aiterate2","H5Aiterate_by_name","H5Adelete","H5Adelete_by_name","H5Adelete_by_idx","H5Aexists","H5Aexists_by_name","H5A_info_t","corder_valid","corder","cset","data_size","H5A_operator2_t","h5ac","H5AC__CURR_CACHE_CONFIG_VERSION","H5AC__MAX_TRACE_FILE_NAME_LEN","H5AC_METADATA_WRITE_STRATEGY__PROCESS_0_ONLY","H5AC_METADATA_WRITE_STRATEGY__DISTRIBUTED","H5AC__CACHE_IMAGE__ENTRY_AGEOUT__NONE","H5AC__CACHE_IMAGE__ENTRY_AGEOUT__MAX","H5AC_cache_config_t","version","rpt_fcn_enabled","open_trace_file","close_trace_file","trace_file_name","evictions_enabled","set_initial_size","initial_size","min_clean_fraction","max_size","min_size","epoch_length","incr_mode","lower_hr_threshold","increment","apply_max_increment","max_increment","flash_incr_mode","flash_multiple","flash_threshold","decr_mode","upper_hr_threshold","decrement","apply_max_decrement","max_decrement","epochs_before_eviction","apply_empty_reserve","empty_reserve","dirty_bytes_threshold","metadata_write_strategy","H5AC_cache_image_config_t","version","generate_image","save_resize_status","entry_ageout","h5c","H5C_cache_incr_mode","H5C_incr__off","H5C_incr__threshold","H5C_cache_flash_incr_mode","H5C_flash_incr__off","H5C_flash_incr__add_space","H5C_cache_decr_mode","H5C_decr__off","H5C_decr__threshold","H5C_decr__age_out","H5C_decr__age_out_with_threshold","h5d","H5Dcreate2","H5Dcreate_anon","H5Dopen2","H5Dclose","H5Dget_space","H5Dget_space_status","H5Dget_type","H5Dget_create_plist","H5Dget_access_plist","H5Dget_storage_size","H5Dget_offset","H5Dread","H5Dwrite","H5Diterate","H5Dvlen_reclaim","H5Dvlen_get_buf_size","H5Dfill","H5Dset_extent","H5Ddebug","H5Dscatter","H5Dgather","H5Dflush","H5Drefresh","H5Dformat_convert","H5Dget_chunk_index_type","H5Dread_chunk","H5Dwrite_chunk","H5Dget_chunk_info","H5Dget_chunk_info_by_coord","H5Dget_num_chunks","H5D_CHUNK_CACHE_NSLOTS_DEFAULT","H5D_CHUNK_CACHE_NBYTES_DEFAULT","H5D_CHUNK_CACHE_W0_DEFAULT","H5D_chunk_index_t","H5D_CHUNK_BTREE","H5D_CHUNK_IDX_BTREE","H5D_alloc_time_t","H5D_ALLOC_TIME_ERROR","H5D_ALLOC_TIME_DEFAULT","H5D_ALLOC_TIME_EARLY","H5D_ALLOC_TIME_LATE","H5D_ALLOC_TIME_INCR","H5D_space_status_t","H5D_SPACE_STATUS_ERROR","H5D_SPACE_STATUS_NOT_ALLOCATED","H5D_SPACE_STATUS_PART_ALLOCATED","H5D_SPACE_STATUS_ALLOCATED","H5D_fill_time_t","H5D_FILL_TIME_ERROR","H5D_FILL_TIME_ALLOC","H5D_FILL_TIME_NEVER","H5D_FILL_TIME_IFSET","H5D_fill_value_t","H5D_FILL_VALUE_ERROR","H5D_FILL_VALUE_UNDEFINED","H5D_FILL_VALUE_DEFAULT","H5D_FILL_VALUE_USER_DEFINED","H5D_mpio_actual_chunk_opt_mode_t","H5D_MPIO_NO_CHUNK_OPTIMIZATION","H5D_MPIO_LINK_CHUNK","H5D_MPIO_MULTI_CHUNK","H5D_mpio_actual_io_mode_t","H5D_MPIO_NO_COLLECTIVE","H5D_MPIO_CHUNK_INDEPENDENT","H5D_MPIO_CHUNK_COLLECTIVE","H5D_MPIO_CHUNK_MIXED","H5D_MPIO_CONTIGUOUS_COLLECTIVE","H5D_mpio_no_collective_cause_t","H5D_MPIO_COLLECTIVE","H5D_MPIO_SET_INDEPENDENT","H5D_MPIO_DATATYPE_CONVERSION","H5D_MPIO_DATA_TRANSFORMS","H5D_MPIO_MPI_OPT_TYPES_ENV_VAR_DISABLED","H5D_MPIO_NOT_SIMPLE_OR_SCALAR_DATASPACES","H5D_MPIO_NOT_CONTIGUOUS_OR_CHUNKED_DATASET","H5D_MPIO_FILTERS","H5D_operator_t","H5D_scatter_func_t","H5D_gather_func_t","H5D_layout_t","H5D_LAYOUT_ERROR","H5D_COMPACT","H5D_CONTIGUOUS","H5D_CHUNKED","H5D_VIRTUAL","H5D_NLAYOUTS","H5D_vds_view_t","H5D_VDS_ERROR","H5D_VDS_FIRST_MISSING","H5D_VDS_LAST_AVAILABLE","H5D_CHUNK_DONT_FILTER_PARTIAL_CHUNKS","H5D_append_cb_t","h5e","H5Eregister_class","H5Eunregister_class","H5Eclose_msg","H5Ecreate_msg","H5Ecreate_stack","H5Eget_current_stack","H5Eclose_stack","H5Eget_class_name","H5Eset_current_stack","H5Epush2","H5Epop","H5Eprint2","H5Ewalk2","H5Eget_auto2","H5Eset_auto2","H5Eclear2","H5Eauto_is_v2","H5Eget_msg","H5Eget_num","H5E_DEFAULT","H5E_type_t","H5E_MAJOR","H5E_MINOR","H5E_error2_t","cls_id","maj_num","min_num","line","func_name","file_name","desc","H5E_direction_t","H5E_WALK_UPWARD","H5E_WALK_DOWNWARD","H5E_walk2_t","H5E_auto2_t","H5E_ERR_CLS","H5E_DATASET","H5E_FUNC","H5E_STORAGE","H5E_FILE","H5E_SOHM","H5E_SYM","H5E_PLUGIN","H5E_VFL","H5E_INTERNAL","H5E_BTREE","H5E_REFERENCE","H5E_DATASPACE","H5E_RESOURCE","H5E_PLIST","H5E_LINK","H5E_DATATYPE","H5E_RS","H5E_HEAP","H5E_OHDR","H5E_ATOM","H5E_ATTR","H5E_NONE_MAJOR","H5E_IO","H5E_SLIST","H5E_EFL","H5E_TST","H5E_ARGS","H5E_ERROR","H5E_PLINE","H5E_FSPACE","H5E_CACHE","H5E_SEEKERROR","H5E_READERROR","H5E_WRITEERROR","H5E_CLOSEERROR","H5E_OVERFLOW","H5E_FCNTL","H5E_NOSPACE","H5E_CANTALLOC","H5E_CANTCOPY","H5E_CANTFREE","H5E_ALREADYEXISTS","H5E_CANTLOCK","H5E_CANTUNLOCK","H5E_CANTGC","H5E_CANTGETSIZE","H5E_OBJOPEN","H5E_CANTRESTORE","H5E_CANTCOMPUTE","H5E_CANTEXTEND","H5E_CANTATTACH","H5E_CANTUPDATE","H5E_CANTOPERATE","H5E_CANTINIT","H5E_ALREADYINIT","H5E_CANTRELEASE","H5E_CANTGET","H5E_CANTSET","H5E_DUPCLASS","H5E_SETDISALLOWED","H5E_CANTMERGE","H5E_CANTREVIVE","H5E_CANTSHRINK","H5E_LINKCOUNT","H5E_VERSION","H5E_ALIGNMENT","H5E_BADMESG","H5E_CANTDELETE","H5E_BADITER","H5E_CANTPACK","H5E_CANTRESET","H5E_CANTRENAME","H5E_SYSERRSTR","H5E_NOFILTER","H5E_CALLBACK","H5E_CANAPPLY","H5E_SETLOCAL","H5E_NOENCODER","H5E_CANTFILTER","H5E_CANTOPENOBJ","H5E_CANTCLOSEOBJ","H5E_COMPLEN","H5E_PATH","H5E_NONE_MINOR","H5E_OPENERROR","H5E_FILEEXISTS","H5E_FILEOPEN","H5E_CANTCREATE","H5E_CANTOPENFILE","H5E_CANTCLOSEFILE","H5E_NOTHDF5","H5E_BADFILE","H5E_TRUNCATED","H5E_MOUNT","H5E_BADATOM","H5E_BADGROUP","H5E_CANTREGISTER","H5E_CANTINC","H5E_CANTDEC","H5E_NOIDS","H5E_CANTFLUSH","H5E_CANTSERIALIZE","H5E_CANTLOAD","H5E_PROTECT","H5E_NOTCACHED","H5E_SYSTEM","H5E_CANTINS","H5E_CANTPROTECT","H5E_CANTUNPROTECT","H5E_CANTPIN","H5E_CANTUNPIN","H5E_CANTMARKDIRTY","H5E_CANTDIRTY","H5E_CANTEXPUNGE","H5E_CANTRESIZE","H5E_TRAVERSE","H5E_NLINKS","H5E_NOTREGISTERED","H5E_CANTMOVE","H5E_CANTSORT","H5E_MPI","H5E_MPIERRSTR","H5E_CANTRECV","H5E_CANTCLIP","H5E_CANTCOUNT","H5E_CANTSELECT","H5E_CANTNEXT","H5E_BADSELECT","H5E_CANTCOMPARE","H5E_UNINITIALIZED","H5E_UNSUPPORTED","H5E_BADTYPE","H5E_BADRANGE","H5E_BADVALUE","H5E_NOTFOUND","H5E_EXISTS","H5E_CANTENCODE","H5E_CANTDECODE","H5E_CANTSPLIT","H5E_CANTREDISTRIBUTE","H5E_CANTSWAP","H5E_CANTINSERT","H5E_CANTLIST","H5E_CANTMODIFY","H5E_CANTREMOVE","H5E_CANTCONVERT","H5E_BADSIZE","h5f","H5Fset_latest_format","H5Fis_hdf5","H5Fis_accessible","H5Fcreate","H5Fopen","H5Freopen","H5Fflush","H5Fclose","H5Fdelete","H5Fget_create_plist","H5Fget_access_plist","H5Fget_intent","H5Fget_fileno","H5Fget_obj_count","H5Fget_obj_ids","H5Fget_vfd_handle","H5Fmount","H5Funmount","H5Fget_freespace","H5Fget_filesize","H5Fget_mdc_config","H5Fset_mdc_config","H5Fget_mdc_hit_rate","H5Fget_mdc_size","H5Freset_mdc_hit_rate_stats","H5Fget_name","H5Fclear_elink_file_cache","H5Fget_file_image","H5Fstart_swmr_write","H5Fget_metadata_read_retry_info","H5Fstart_mdc_logging","H5Fstop_mdc_logging","H5Fget_free_sections","H5Fformat_convert","H5Fget_info2","H5Fget_info1","H5Fget_info","H5Fget_mdc_image_info","H5Freset_page_buffering_stats","H5Fget_page_buffering_stats","H5Fget_dset_no_attrs_hint","H5Fset_dset_no_attrs_hint","H5F_ACC_DEBUG","H5F_ACC_RDONLY","H5F_ACC_RDWR","H5F_ACC_TRUNC","H5F_ACC_EXCL","H5F_ACC_CREAT","H5F_ACC_DEFAULT","H5F_OBJ_FILE","H5F_OBJ_DATASET","H5F_OBJ_GROUP","H5F_OBJ_DATATYPE","H5F_OBJ_ATTR","H5F_OBJ_ALL","H5F_OBJ_LOCAL","H5F_FAMILY_DEFAULT","H5F_MPIO_DEBUG_KEY","H5F_UNLIMITED","H5F_scope_t","H5F_SCOPE_LOCAL","H5F_SCOPE_GLOBAL","H5F_close_degree_t","H5F_CLOSE_DEFAULT","H5F_CLOSE_WEAK","H5F_CLOSE_SEMI","H5F_CLOSE_STRONG","H5F_info_t","super_ext_size","sohm","H5F_info_t__sohm","hdr_size","msgs_info","H5F_mem_t","H5FD_MEM_NOLIST","H5FD_MEM_DEFAULT","H5FD_MEM_SUPER","H5FD_MEM_BTREE","H5FD_MEM_DRAW","H5FD_MEM_GHEAP","H5FD_MEM_LHEAP","H5FD_MEM_OHDR","H5FD_MEM_NTYPES","H5F_libver_t","H5F_LIBVER_ERROR","H5F_LIBVER_EARLIEST","H5F_LIBVER_V18","H5F_LIBVER_V110","H5F_LIBVER_NBOUNDS","H5F_LIBVER_LATEST","H5F_ACC_SWMR_WRITE","H5F_ACC_SWMR_READ","H5F_retry_info_t","nbins","retries","H5F_sect_info_t","addr","size","H5F_info2_t","super_","free","sohm","H5F_info2_t__super","version","super_size","super_ext_size","H5F_info2_t__free","version","meta_size","tot_space","H5F_info2_t__sohm","version","hdr_size","msgs_info","H5F_flush_cb_t","H5F_file_space_type_t","H5F_FILE_SPACE_DEFAULT","H5F_FILE_SPACE_ALL_PERSIST","H5F_FILE_SPACE_ALL","H5F_FILE_SPACE_AGGR_VFD","H5F_FILE_SPACE_VFD","H5F_FILE_SPACE_NTYPES","H5F_fspace_strategy_t","H5F_FSPACE_STRATEGY_FSM_AGGR","H5F_FSPACE_STRATEGY_PAGE","H5F_FSPACE_STRATEGY_AGGR","H5F_FSPACE_STRATEGY_NONE","H5F_FSPACE_STRATEGY_NTYPES","h5fd","H5FDregister","H5FDunregister","H5FDopen","H5FDclose","H5FDcmp","H5FDquery","H5FDalloc","H5FDfree","H5FDget_eoa","H5FDset_eoa","H5FDget_eof","H5FDget_vfd_handle","H5FDread","H5FDwrite","H5FDflush","H5FDtruncate","H5FD_sec2_init","H5FD_core_init","H5FD_stdio_init","H5FD_family_init","H5FD_log_init","H5FD_multi_init","H5FDlock","H5FDunlock","H5FDdriver_query","H5_HAVE_VFL","H5FD_VFD_DEFAULT","H5FD_mem_t","H5FD_MEM_FHEAP_HDR","H5FD_MEM_FHEAP_IBLOCK","H5FD_MEM_FHEAP_DBLOCK","H5FD_MEM_FHEAP_HUGE_OBJ","H5FD_MEM_FSPACE_HDR","H5FD_MEM_FSPACE_SINFO","H5FD_MEM_SOHM_TABLE","H5FD_MEM_SOHM_INDEX","H5FD_FLMAP_SINGLE","H5FD_FLMAP_DICHOTOMY","H5FD_FLMAP_DEFAULT","H5FD_FEAT_AGGREGATE_METADATA","H5FD_FEAT_ACCUMULATE_METADATA_WRITE","H5FD_FEAT_ACCUMULATE_METADATA_READ","H5FD_FEAT_ACCUMULATE_METADATA","H5FD_FEAT_DATA_SIEVE","H5FD_FEAT_AGGREGATE_SMALLDATA","H5FD_FEAT_IGNORE_DRVRINFO","H5FD_FEAT_DIRTY_SBLK_LOAD","H5FD_FEAT_POSIX_COMPAT_HANDLE","H5FD_FEAT_ALLOW_FILE_IMAGE","H5FD_FEAT_CAN_USE_FILE_IMAGE_CALLBACKS","H5FD_FEAT_DEFAULT_VFD_COMPATIBLE","H5FD_LOG_TRUNCATE","H5FD_LOG_META_IO","H5FD_LOG_LOC_READ","H5FD_LOG_LOC_WRITE","H5FD_LOG_LOC_SEEK","H5FD_LOG_LOC_IO","H5FD_LOG_FILE_READ","H5FD_LOG_FILE_WRITE","H5FD_LOG_FILE_IO","H5FD_LOG_FLAVOR","H5FD_LOG_NUM_READ","H5FD_LOG_NUM_WRITE","H5FD_LOG_NUM_SEEK","H5FD_LOG_NUM_TRUNCATE","H5FD_LOG_NUM_IO","H5FD_LOG_TIME_OPEN","H5FD_LOG_TIME_STAT","H5FD_LOG_TIME_READ","H5FD_LOG_TIME_WRITE","H5FD_LOG_TIME_SEEK","H5FD_LOG_TIME_TRUNCATE","H5FD_LOG_TIME_CLOSE","H5FD_LOG_TIME_IO","H5FD_LOG_ALLOC","H5FD_LOG_FREE","H5FD_LOG_ALL","H5FD_class_t","name","maxaddr","fc_degree","sb_size","sb_encode","sb_decode","fapl_size","fapl_get","fapl_copy","fapl_free","dxpl_size","dxpl_copy","dxpl_free","open","close","cmp","query","get_type_map","alloc","free","get_eoa","set_eoa","get_eof","get_handle","read","write","flush","truncate","lock","unlock","fl_map","H5FD_free_t","addr","size","next","H5FD_t","driver_id","cls","fileno","feature_flags","maxaddr","base_addr","threshold","alignment","H5FD_file_image_op_t","H5FD_FILE_IMAGE_OP_NO_OP","H5FD_FILE_IMAGE_OP_PROPERTY_LIST_SET","H5FD_FILE_IMAGE_OP_PROPERTY_LIST_COPY","H5FD_FILE_IMAGE_OP_PROPERTY_LIST_GET","H5FD_FILE_IMAGE_OP_PROPERTY_LIST_CLOSE","H5FD_FILE_IMAGE_OP_FILE_OPEN","H5FD_FILE_IMAGE_OP_FILE_RESIZE","H5FD_FILE_IMAGE_OP_FILE_CLOSE","H5FD_file_image_callbacks_t","image_malloc","image_memcpy","image_realloc","image_free","udata_copy","udata_free","udata","h5g","H5Gcreate2","H5Gcreate_anon","H5Gopen2","H5Gget_create_plist","H5Gget_info","H5Gget_info_by_name","H5Gget_info_by_idx","H5Gclose","H5Gflush","H5Grefresh","H5G_SAME_LOC","H5G_LINK_ERROR","H5G_LINK_HARD","H5G_LINK_SOFT","H5G_link_t","H5G_NTYPES","H5G_NLIBTYPES","H5G_NUSERTYPES","H5G_USERTYPE","H5G_storage_type_t","H5G_STORAGE_TYPE_UNKNOWN","H5G_STORAGE_TYPE_SYMBOL_TABLE","H5G_STORAGE_TYPE_COMPACT","H5G_STORAGE_TYPE_DENSE","H5G_info_t","storage_type","nlinks","max_corder","mounted","h5i","H5Iregister","H5Iobject_verify","H5Iremove_verify","H5Iget_type","H5Iget_file_id","H5Iget_name","H5Iinc_ref","H5Idec_ref","H5Iget_ref","H5Iregister_type","H5Iclear_type","H5Idestroy_type","H5Iinc_type_ref","H5Idec_type_ref","H5Iget_type_ref","H5Isearch","H5Iiterate","H5Inmembers","H5Itype_exists","H5Iis_valid","H5I_type_t","H5I_UNINIT","H5I_BADID","H5I_FILE","H5I_GROUP","H5I_DATATYPE","H5I_DATASPACE","H5I_DATASET","H5I_MAP","H5I_ATTR","H5I_VFL","H5I_VOL","H5I_GENPROP_CLS","H5I_GENPROP_LST","H5I_ERROR_CLASS","H5I_ERROR_MSG","H5I_ERROR_STACK","H5I_SPACE_SEL_ITER","H5I_NTYPES","hid_t","H5I_INVALID_HID","H5I_free_t","H5I_search_func_t","H5I_iterate_func_t","h5l","H5Lmove","H5Lcopy","H5Lcreate_hard","H5Lcreate_soft","H5Ldelete","H5Ldelete_by_idx","H5Lget_val","H5Lget_val_by_idx","H5Lexists","H5Lget_info1","H5Lget_info2","H5Lget_info_by_idx","H5Lget_info_by_idx2","H5Lget_name_by_idx","H5Literate1","H5Literate2","H5Literate_by_name1","H5Literate_by_name2","H5Lvisit1","H5Lvisit2","H5Lvisit_by_name1","H5Lvisit_by_name2","H5Lcreate_ud","H5Lregister","H5Lunregister","H5Lis_registered","H5Lunpack_elink_val","H5Lcreate_external","H5L_MAX_LINK_NAME_LEN","H5L_SAME_LOC","H5L_LINK_CLASS_T_VERS","H5L_type_t","H5L_TYPE_ERROR","H5L_TYPE_HARD","H5L_TYPE_SOFT","H5L_TYPE_EXTERNAL","H5L_TYPE_MAX","H5L_TYPE_BUILTIN_MAX","H5L_TYPE_UD_MIN","H5L_info1_t","type_","corder_valid","corder","cset","u","H5L_info1_t__u","address","val_size","H5L_info2_t","type_","corder_valid","corder","cset","u","H5L_info2_t__u","H5L_create_func_t","H5L_move_func_t","H5L_copy_func_t","H5L_traverse_func_t","H5L_delete_func_t","H5L_query_func_t","H5L_class_t","version","id","comment","create_func","move_func","copy_func","trav_func","del_func","query_func","H5L_iterate1_t","H5L_iterate2_t","H5L_elink_traverse_t","h5mm","H5MM_allocate_t","H5MM_free_t","h5o","H5Oopen","H5Oopen_by_addr","H5Oopen_by_idx","H5Olink","H5Oincr_refcount","H5Odecr_refcount","H5Ocopy","H5Oset_comment","H5Oset_comment_by_name","H5Oget_comment","H5Oget_comment_by_name","H5Oclose","H5Oexists_by_name","H5Odisable_mdc_flushes","H5Oenable_mdc_flushes","H5Oare_mdc_flushes_disabled","H5Oflush","H5Orefresh","H5Oget_info2","H5Oget_info_by_name2","H5Oget_info_by_idx2","H5Ovisit2","H5Ovisit_by_name2","H5Oget_info1","H5Oget_info_by_name1","H5Oget_info_by_idx1","H5Ovisit1","H5Ovisit_by_name1","H5Oget_info","H5Oget_info_by_name","H5Oget_info_by_idx","H5Ovisit","H5Ovisit_by_name","H5Oget_info3","H5Oget_info_by_idx3","H5Oget_info_by_name3","H5Oget_native_info","H5Oget_native_info_by_idx","H5Oget_native_info_by_name","H5Oopen_by_token","H5Otoken_cmp","H5Otoken_from_str","H5Otoken_to_str","H5Ovisit3","H5Ovisit_by_name3","H5O_COPY_SHALLOW_HIERARCHY_FLAG","H5O_COPY_EXPAND_SOFT_LINK_FLAG","H5O_COPY_EXPAND_EXT_LINK_FLAG","H5O_COPY_EXPAND_REFERENCE_FLAG","H5O_COPY_WITHOUT_ATTR_FLAG","H5O_COPY_PRESERVE_NULL_FLAG","H5O_COPY_MERGE_COMMITTED_DTYPE_FLAG","H5O_COPY_ALL","H5O_SHMESG_NONE_FLAG","H5O_SHMESG_SDSPACE_FLAG","H5O_SHMESG_DTYPE_FLAG","H5O_SHMESG_FILL_FLAG","H5O_SHMESG_PLINE_FLAG","H5O_SHMESG_ATTR_FLAG","H5O_SHMESG_ALL_FLAG","H5O_HDR_CHUNK0_SIZE","H5O_HDR_ATTR_CRT_ORDER_TRACKED","H5O_HDR_ATTR_CRT_ORDER_INDEXED","H5O_HDR_ATTR_STORE_PHASE_CHANGE","H5O_HDR_STORE_TIMES","H5O_HDR_ALL_FLAGS","H5O_SHMESG_MAX_NINDEXES","H5O_SHMESG_MAX_LIST_SIZE","H5O_INFO_BASIC","H5O_INFO_TIME","H5O_INFO_NUM_ATTRS","H5O_INFO_ALL","H5O_NATIVE_INFO_HDR","H5O_NATIVE_INFO_META_SIZE","H5O_NATIVE_INFO_ALL","H5O_type_t","H5O_TYPE_UNKNOWN","H5O_TYPE_GROUP","H5O_TYPE_DATASET","H5O_TYPE_NAMED_DATATYPE","H5O_TYPE_MAP","H5O_TYPE_NTYPES","H5O_hdr_info_t","version","nmesgs","nchunks","flags","space","mesg","H5O_hdr_info_t__space","total","meta","mesg","free","H5O_hdr_info_t__mesg","present","shared","H5O_info_t","fileno","addr","type_","rc","atime","mtime","ctime","btime","num_attrs","hdr","meta_size","H5O_info_t__meta_size","obj","attr","H5O_msg_crt_idx_t","H5O_iterate_t","H5O_iterate2_t","H5O_mcdt_search_ret_t","H5O_MCDT_SEARCH_ERROR","H5O_MCDT_SEARCH_CONT","H5O_MCDT_SEARCH_STOP","H5O_mcdt_search_cb_t","H5O_MAX_TOKEN_SIZE","H5O_token_t","H5O_info2_t","H5O_native_info_meta_size_t","H5O_native_info_t","H5O_TOKEN_UNDEF","h5p","H5Pcreate_class","H5Pget_class_name","H5Pcreate","H5Pregister2","H5Pinsert2","H5Pset","H5Pexist","H5Pget_size","H5Pget_nprops","H5Pget_class","H5Pget_class_parent","H5Pget","H5Pequal","H5Pisa_class","H5Piterate","H5Pcopy_prop","H5Premove","H5Punregister","H5Pclose_class","H5Pclose","H5Pcopy","H5Pset_attr_phase_change","H5Pget_attr_phase_change","H5Pset_attr_creation_order","H5Pget_attr_creation_order","H5Pset_obj_track_times","H5Pget_obj_track_times","H5Pmodify_filter","H5Pset_filter","H5Pget_nfilters","H5Pget_filter2","H5Pget_filter_by_id2","H5Pall_filters_avail","H5Premove_filter","H5Pset_deflate","H5Pset_fletcher32","H5Pset_userblock","H5Pget_userblock","H5Pset_sizes","H5Pget_sizes","H5Pset_sym_k","H5Pget_sym_k","H5Pset_istore_k","H5Pget_istore_k","H5Pset_shared_mesg_nindexes","H5Pget_shared_mesg_nindexes","H5Pset_shared_mesg_index","H5Pget_shared_mesg_index","H5Pset_shared_mesg_phase_change","H5Pget_shared_mesg_phase_change","H5Pset_alignment","H5Pget_alignment","H5Pset_driver","H5Pget_driver","H5Pget_driver_info","H5Pset_cache","H5Pget_cache","H5Pset_mdc_config","H5Pget_mdc_config","H5Pset_gc_references","H5Pget_gc_references","H5Pset_fclose_degree","H5Pget_fclose_degree","H5Pset_meta_block_size","H5Pget_meta_block_size","H5Pset_sieve_buf_size","H5Pget_sieve_buf_size","H5Pset_small_data_block_size","H5Pget_small_data_block_size","H5Pset_libver_bounds","H5Pget_libver_bounds","H5Pset_layout","H5Pget_layout","H5Pset_chunk","H5Pget_chunk","H5Pset_external","H5Pget_external_count","H5Pget_external","H5Pset_szip","H5Pset_shuffle","H5Pset_nbit","H5Pset_scaleoffset","H5Pset_fill_value","H5Pget_fill_value","H5Pfill_value_defined","H5Pset_alloc_time","H5Pget_alloc_time","H5Pset_fill_time","H5Pget_fill_time","H5Pset_chunk_cache","H5Pget_chunk_cache","H5Pset_data_transform","H5Pget_data_transform","H5Pset_buffer","H5Pget_buffer","H5Pset_edc_check","H5Pget_edc_check","H5Pset_filter_callback","H5Pset_btree_ratios","H5Pget_btree_ratios","H5Pset_vlen_mem_manager","H5Pget_vlen_mem_manager","H5Pset_hyper_vector_size","H5Pget_hyper_vector_size","H5Pset_type_conv_cb","H5Pget_type_conv_cb","H5Pset_create_intermediate_group","H5Pget_create_intermediate_group","H5Pset_local_heap_size_hint","H5Pget_local_heap_size_hint","H5Pset_link_phase_change","H5Pget_link_phase_change","H5Pset_est_link_info","H5Pget_est_link_info","H5Pset_link_creation_order","H5Pget_link_creation_order","H5Pset_char_encoding","H5Pget_char_encoding","H5Pset_nlinks","H5Pget_nlinks","H5Pset_elink_prefix","H5Pget_elink_prefix","H5Pget_elink_fapl","H5Pset_elink_fapl","H5Pset_elink_acc_flags","H5Pget_elink_acc_flags","H5Pset_elink_cb","H5Pget_elink_cb","H5Pset_copy_object","H5Pget_copy_object","H5Pget_version","H5Pset_fapl_sec2","H5Pset_fapl_core","H5Pget_fapl_core","H5Pset_fapl_stdio","H5Pset_fapl_family","H5Pget_fapl_family","H5Pset_family_offset","H5Pget_family_offset","H5Pset_fapl_multi","H5Pget_fapl_multi","H5Pset_multi_type","H5Pget_multi_type","H5Pset_fapl_split","H5Pset_fapl_log","H5Pset_elink_file_cache_size","H5Pget_elink_file_cache_size","H5Pset_file_image","H5Pget_file_image","H5Pset_file_image_callbacks","H5Pget_file_image_callbacks","H5Pset_mcdt_search_cb","H5Pget_mcdt_search_cb","H5Padd_merge_committed_dtype_path","H5Pfree_merge_committed_dtype_paths","H5Pset_core_write_tracking","H5Pget_core_write_tracking","H5Pset_efile_prefix","H5Pget_efile_prefix","H5Pset_append_flush","H5Pget_append_flush","H5Pset_object_flush_cb","H5Pget_object_flush_cb","H5Pget_metadata_read_attempts","H5Pset_metadata_read_attempts","H5Pset_mdc_log_options","H5Pget_mdc_log_options","H5Fget_mdc_logging_status","H5Pset_virtual","H5Pget_virtual_count","H5Pget_virtual_vspace","H5Pget_virtual_srcspace","H5Pget_virtual_dsetname","H5Pget_virtual_filename","H5Pget_virtual_printf_gap","H5Pset_virtual_printf_gap","H5Pget_virtual_view","H5Pset_virtual_view","H5Pget_chunk_opts","H5Pset_chunk_opts","H5Pencode1","H5Pencode2","H5Pdecode","H5Pset_file_space","H5Pget_file_space","H5Pset_evict_on_close","H5Pget_evict_on_close","H5Pset_mdc_image_config","H5Pget_mdc_image_config","H5Pset_page_buffer_size","H5Pget_page_buffer_size","H5Pset_file_space_strategy","H5Pget_file_space_strategy","H5Pset_file_space_page_size","H5Pget_file_space_page_size","H5Pset_virtual_prefix","H5Pget_virtual_prefix","H5Pget_dset_no_attrs_hint","H5Pset_dset_no_attrs_hint","H5Pget_vol_id","H5Pget_vol_info","H5Pset_vol","globals","H5P_MAP_CREATE","H5P_MAP_ACCESS","H5P_VOL_INITIALIZE","H5P_REFERENCE_ACCESS","H5P_MAP_CREATE_DEFAULT","H5P_MAP_ACCESS_DEFAULT","H5P_VOL_INITIALIZE_DEFAULT","H5P_REFERENCE_ACCESS_DEFAULT","H5P_CRT_ORDER_TRACKED","H5P_CRT_ORDER_INDEXED","H5P_DEFAULT","H5P_cls_create_func_t","H5P_cls_copy_func_t","H5P_cls_close_func_t","H5P_prp_cb1_t","H5P_prp_cb2_t","H5P_prp_create_func_t","H5P_prp_set_func_t","H5P_prp_get_func_t","H5P_prp_delete_func_t","H5P_prp_copy_func_t","H5P_prp_compare_func_t","H5P_prp_close_func_t","H5P_iterate_t","H5P_CLS_ROOT","H5P_CLS_OBJECT_CREATE","H5P_CLS_FILE_CREATE","H5P_CLS_FILE_ACCESS","H5P_CLS_DATASET_CREATE","H5P_CLS_DATASET_ACCESS","H5P_CLS_DATASET_XFER","H5P_CLS_FILE_MOUNT","H5P_CLS_GROUP_CREATE","H5P_CLS_GROUP_ACCESS","H5P_CLS_DATATYPE_CREATE","H5P_CLS_DATATYPE_ACCESS","H5P_CLS_STRING_CREATE","H5P_CLS_ATTRIBUTE_CREATE","H5P_CLS_OBJECT_COPY","H5P_CLS_LINK_CREATE","H5P_CLS_LINK_ACCESS","H5P_LST_FILE_CREATE","H5P_LST_FILE_ACCESS","H5P_LST_DATASET_CREATE","H5P_LST_DATASET_ACCESS","H5P_LST_DATASET_XFER","H5P_LST_FILE_MOUNT","H5P_LST_GROUP_CREATE","H5P_LST_GROUP_ACCESS","H5P_LST_DATATYPE_CREATE","H5P_LST_DATATYPE_ACCESS","H5P_LST_ATTRIBUTE_CREATE","H5P_LST_OBJECT_COPY","H5P_LST_LINK_CREATE","H5P_LST_LINK_ACCESS","H5P_MAP_CREATE","H5P_MAP_ACCESS","H5P_VOL_INITIALIZE","H5P_REFERENCE_ACCESS","H5P_MAP_CREATE_DEFAULT","H5P_MAP_ACCESS_DEFAULT","H5P_VOL_INITIALIZE_DEFAULT","H5P_REFERENCE_ACCESS_DEFAULT","h5r","H5Rcreate","H5Rget_region","H5Rget_obj_type2","H5Rget_name","H5Rdereference1","H5Rdereference2","H5Rcopy","H5Rcreate_attr","H5Rcreate_object","H5Rcreate_region","H5Rdestroy","H5Requal","H5Rget_attr_name","H5Rget_file_name","H5Rget_obj_name","H5Rget_obj_type3","H5Rget_type","H5Ropen_attr","H5Ropen_object","H5Ropen_region","H5R_type_t","H5R_BADTYPE","H5R_OBJECT1","H5R_DATASET_REGION1","H5R_OBJECT2","H5R_DATASET_REGION2","H5R_ATTR","H5R_MAXTYPE","hobj_ref_t","hdset_reg_ref_t","H5R_REF_BUF_SIZE","H5R_ref_t_u","H5R_ref_t","h5s","H5Screate","H5Screate_simple","H5Sset_extent_simple","H5Scopy","H5Sclose","H5Sencode1","H5Sencode2","H5Sdecode","H5Sget_simple_extent_npoints","H5Sget_simple_extent_ndims","H5Sget_simple_extent_dims","H5Sis_simple","H5Sget_select_npoints","H5Sselect_hyperslab","H5Sselect_elements","H5Sget_simple_extent_type","H5Sset_extent_none","H5Sextent_copy","H5Sextent_equal","H5Sselect_all","H5Sselect_none","H5Soffset_simple","H5Sselect_valid","H5Sget_select_hyper_nblocks","H5Sget_select_elem_npoints","H5Sget_select_hyper_blocklist","H5Sget_select_elem_pointlist","H5Sget_select_bounds","H5Sget_select_type","H5Sis_regular_hyperslab","H5Sget_regular_hyperslab","H5Scombine_hyperslab","H5Scombine_select","H5Smodify_select","H5Ssel_iter_close","H5Ssel_iter_create","H5Ssel_iter_get_seq_list","H5Sselect_adjust","H5Sselect_copy","H5Sselect_intersect_block","H5Sselect_project_intersection","H5Sselect_shape_same","H5S_ALL","H5S_UNLIMITED","H5S_MAX_RANK","H5S_SEL_ITER_GET_SEQ_LIST_SORTED","H5S_SEL_ITER_SHARE_WITH_DATASPACE","H5S_class_t","H5S_NO_CLASS","H5S_SCALAR","H5S_SIMPLE","H5S_NULL","H5S_seloper_t","H5S_SELECT_NOOP","H5S_SELECT_SET","H5S_SELECT_OR","H5S_SELECT_AND","H5S_SELECT_XOR","H5S_SELECT_NOTB","H5S_SELECT_NOTA","H5S_SELECT_APPEND","H5S_SELECT_PREPEND","H5S_SELECT_INVALID","H5S_sel_type","H5S_SEL_ERROR","H5S_SEL_NONE","H5S_SEL_POINTS","H5S_SEL_HYPERSLABS","H5S_SEL_ALL","H5S_SEL_N","h5t","H5Tcreate","H5Tcopy","H5Tclose","H5Tequal","H5Tlock","H5Tcommit2","H5Topen2","H5Tcommit_anon","H5Tget_create_plist","H5Tcommitted","H5Tencode","H5Tdecode","H5Tinsert","H5Tpack","H5Tenum_create","H5Tenum_insert","H5Tenum_nameof","H5Tenum_valueof","H5Tvlen_create","H5Tarray_create2","H5Tget_array_ndims","H5Tget_array_dims2","H5Tset_tag","H5Tget_tag","H5Tget_super","H5Tget_class","H5Tdetect_class","H5Tget_size","H5Tget_order","H5Tget_precision","H5Tget_offset","H5Tget_pad","H5Tget_sign","H5Tget_fields","H5Tget_ebias","H5Tget_norm","H5Tget_inpad","H5Tget_strpad","H5Tget_nmembers","H5Tget_member_name","H5Tget_member_index","H5Tget_member_offset","H5Tget_member_class","H5Tget_member_type","H5Tget_member_value","H5Tget_cset","H5Tis_variable_str","H5Tget_native_type","H5Tset_size","H5Tset_order","H5Tset_precision","H5Tset_offset","H5Tset_pad","H5Tset_sign","H5Tset_fields","H5Tset_ebias","H5Tset_norm","H5Tset_inpad","H5Tset_cset","H5Tset_strpad","H5Tregister","H5Tunregister","H5Tfind","H5Tcompiler_conv","H5Tconvert","H5Tflush","H5Trefresh","H5Treclaim","H5T_class_t","H5T_NO_CLASS","H5T_INTEGER","H5T_FLOAT","H5T_TIME","H5T_STRING","H5T_BITFIELD","H5T_OPAQUE","H5T_COMPOUND","H5T_REFERENCE","H5T_ENUM","H5T_VLEN","H5T_ARRAY","H5T_NCLASSES","H5T_order_t","H5T_ORDER_ERROR","H5T_ORDER_LE","H5T_ORDER_BE","H5T_ORDER_VAX","H5T_ORDER_MIXED","H5T_ORDER_NONE","H5T_sign_t","H5T_SGN_ERROR","H5T_SGN_NONE","H5T_SGN_2","H5T_NSGN","H5T_norm_t","H5T_NORM_ERROR","H5T_NORM_IMPLIED","H5T_NORM_MSBSET","H5T_NORM_NONE","H5T_cset_t","H5T_CSET_ERROR","H5T_CSET_ASCII","H5T_CSET_UTF8","H5T_CSET_RESERVED_2","H5T_CSET_RESERVED_3","H5T_CSET_RESERVED_4","H5T_CSET_RESERVED_5","H5T_CSET_RESERVED_6","H5T_CSET_RESERVED_7","H5T_CSET_RESERVED_8","H5T_CSET_RESERVED_9","H5T_CSET_RESERVED_10","H5T_CSET_RESERVED_11","H5T_CSET_RESERVED_12","H5T_CSET_RESERVED_13","H5T_CSET_RESERVED_14","H5T_CSET_RESERVED_15","H5T_NCSET","H5T_str_t","H5T_STR_ERROR","H5T_STR_NULLTERM","H5T_STR_NULLPAD","H5T_STR_SPACEPAD","H5T_STR_RESERVED_3","H5T_STR_RESERVED_4","H5T_STR_RESERVED_5","H5T_STR_RESERVED_6","H5T_STR_RESERVED_7","H5T_STR_RESERVED_8","H5T_STR_RESERVED_9","H5T_STR_RESERVED_10","H5T_STR_RESERVED_11","H5T_STR_RESERVED_12","H5T_STR_RESERVED_13","H5T_STR_RESERVED_14","H5T_STR_RESERVED_15","H5T_NSTR","H5T_pad_t","H5T_PAD_ERROR","H5T_PAD_ZERO","H5T_PAD_ONE","H5T_PAD_BACKGROUND","H5T_NPAD","H5T_cmd_t","H5T_CONV_INIT","H5T_CONV_CONV","H5T_CONV_FREE","H5T_bkg_t","H5T_BKG_NO","H5T_BKG_TEMP","H5T_BKG_YES","H5T_cdata_t","command","need_bkg","recalc","_priv","H5T_pers_t","H5T_PERS_DONTCARE","H5T_PERS_HARD","H5T_PERS_SOFT","H5T_direction_t","H5T_DIR_DEFAULT","H5T_DIR_ASCEND","H5T_DIR_DESCEND","H5T_conv_except_t","H5T_CONV_EXCEPT_RANGE_HI","H5T_CONV_EXCEPT_RANGE_LOW","H5T_CONV_EXCEPT_PRECISION","H5T_CONV_EXCEPT_TRUNCATE","H5T_CONV_EXCEPT_PINF","H5T_CONV_EXCEPT_NINF","H5T_CONV_EXCEPT_NAN","H5T_conv_ret_t","H5T_CONV_ABORT","H5T_CONV_UNHANDLED","H5T_CONV_HANDLED","hvl_t","len","p","H5T_VARIABLE","H5T_OPAQUE_TAG_MAX","H5T_conv_t","H5T_conv_except_func_t","H5T_IEEE_F32BE","H5T_IEEE_F32LE","H5T_IEEE_F64BE","H5T_IEEE_F64LE","H5T_STD_I8BE","H5T_STD_I8LE","H5T_STD_I16BE","H5T_STD_I16LE","H5T_STD_I32BE","H5T_STD_I32LE","H5T_STD_I64BE","H5T_STD_I64LE","H5T_STD_U8BE","H5T_STD_U8LE","H5T_STD_U16BE","H5T_STD_U16LE","H5T_STD_U32BE","H5T_STD_U32LE","H5T_STD_U64BE","H5T_STD_U64LE","H5T_STD_B8BE","H5T_STD_B8LE","H5T_STD_B16BE","H5T_STD_B16LE","H5T_STD_B32BE","H5T_STD_B32LE","H5T_STD_B64BE","H5T_STD_B64LE","H5T_STD_REF_OBJ","H5T_STD_REF_DSETREG","H5T_UNIX_D32BE","H5T_UNIX_D32LE","H5T_UNIX_D64BE","H5T_UNIX_D64LE","H5T_C_S1","H5T_FORTRAN_S1","H5T_VAX_F32","H5T_VAX_F64","H5T_NATIVE_SCHAR","H5T_NATIVE_UCHAR","H5T_NATIVE_SHORT","H5T_NATIVE_USHORT","H5T_NATIVE_INT","H5T_NATIVE_UINT","H5T_NATIVE_LONG","H5T_NATIVE_ULONG","H5T_NATIVE_LLONG","H5T_NATIVE_ULLONG","H5T_NATIVE_FLOAT","H5T_NATIVE_DOUBLE","H5T_NATIVE_LDOUBLE","H5T_NATIVE_B8","H5T_NATIVE_B16","H5T_NATIVE_B32","H5T_NATIVE_B64","H5T_NATIVE_OPAQUE","H5T_NATIVE_HADDR","H5T_NATIVE_HSIZE","H5T_NATIVE_HSSIZE","H5T_NATIVE_HERR","H5T_NATIVE_HBOOL","H5T_NATIVE_INT8","H5T_NATIVE_UINT8","H5T_NATIVE_INT_LEAST8","H5T_NATIVE_UINT_LEAST8","H5T_NATIVE_INT_FAST8","H5T_NATIVE_UINT_FAST8","H5T_NATIVE_INT16","H5T_NATIVE_UINT16","H5T_NATIVE_INT_LEAST16","H5T_NATIVE_UINT_LEAST16","H5T_NATIVE_INT_FAST16","H5T_NATIVE_UINT_FAST16","H5T_NATIVE_INT32","H5T_NATIVE_UINT32","H5T_NATIVE_INT_LEAST32","H5T_NATIVE_UINT_LEAST32","H5T_NATIVE_INT_FAST32","H5T_NATIVE_UINT_FAST32","H5T_NATIVE_INT64","H5T_NATIVE_UINT64","H5T_NATIVE_INT_LEAST64","H5T_NATIVE_UINT_LEAST64","H5T_NATIVE_INT_FAST64","H5T_NATIVE_UINT_FAST64","H5T_STD_REF","h5vl","H5VLclose","H5VLget_connector_id","H5VLget_connector_id_by_name","H5VLget_connector_id_by_value","H5VLget_connector_name","H5VLis_connector_registered_by_name","H5VLis_connector_registered_by_value","H5VLregister_connector","H5VLregister_connector_by_name","H5VLregister_connector_by_value","H5VLunregister_connector","H5VL_class_value_t","H5VL_class_t","h5z","H5Zregister","H5Zunregister","H5Zfilter_avail","H5Zget_filter_info","H5Z_filter_t","H5Z_FILTER_ERROR","H5Z_FILTER_NONE","H5Z_FILTER_DEFLATE","H5Z_FILTER_SHUFFLE","H5Z_FILTER_FLETCHER32","H5Z_FILTER_SZIP","H5Z_FILTER_NBIT","H5Z_FILTER_SCALEOFFSET","H5Z_FILTER_RESERVED","H5Z_FILTER_MAX","H5Z_FILTER_ALL","H5Z_MAX_NFILTERS","H5Z_FLAG_DEFMASK","H5Z_FLAG_MANDATORY","H5Z_FLAG_OPTIONAL","H5Z_FLAG_INVMASK","H5Z_FLAG_REVERSE","H5Z_FLAG_SKIP_EDC","H5_SZIP_ALLOW_K13_OPTION_MASK","H5_SZIP_CHIP_OPTION_MASK","H5_SZIP_EC_OPTION_MASK","H5_SZIP_NN_OPTION_MASK","H5_SZIP_MAX_PIXELS_PER_BLOCK","H5Z_SHUFFLE_USER_NPARMS","H5Z_SHUFFLE_TOTAL_NPARMS","H5Z_SZIP_USER_NPARMS","H5Z_SZIP_TOTAL_NPARMS","H5Z_SZIP_PARM_MASK","H5Z_SZIP_PARM_PPB","H5Z_SZIP_PARM_BPP","H5Z_SZIP_PARM_PPS","H5Z_NBIT_USER_NPARMS","H5Z_SCALEOFFSET_USER_NPARMS","H5Z_SO_INT_MINBITS_DEFAULT","H5Z_CLASS_T_VERS","H5Z_FILTER_CONFIG_ENCODE_ENABLED","H5Z_FILTER_CONFIG_DECODE_ENABLED","H5Z_SO_scale_type_t","H5Z_SO_FLOAT_DSCALE","H5Z_SO_FLOAT_ESCALE","H5Z_SO_INT","H5Z_EDC_t","H5Z_ERROR_EDC","H5Z_DISABLE_EDC","H5Z_ENABLE_EDC","H5Z_NO_EDC","H5Z_cb_return_t","H5Z_CB_ERROR","H5Z_CB_FAIL","H5Z_CB_CONT","H5Z_CB_NO","H5Z_filter_func_t","H5Z_cb_t","func","op_data","H5Z_can_apply_func_t","H5Z_set_local_func_t","H5Z_func_t","H5Z_class2_t","version","id","encoder_present","decoder_present","name","can_apply","set_local","filter","h5pl","H5PLget_loading_state","H5PLset_loading_state","H5PLappend","H5PLprepend","H5PLreplace","H5PLinsert","H5PLremove","H5PLget","H5PLsize","H5PL_type_t","H5PL_TYPE_ERROR","H5PL_TYPE_FILTER","H5PL_VOL","H5PL_TYPE_NONE","H5PL_FILTER_PLUGIN","H5PL_ALL_PLUGIN","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt"],"q":["hdf5_sys","hdf5_sys::h5","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys","hdf5_sys::h5a","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys","hdf5_sys::h5ac","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys","hdf5_sys::h5c","","","","","","","","","","","hdf5_sys","hdf5_sys::h5d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys","hdf5_sys::h5ehdf5_sys","hdf5_sys::h5f","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys","hdf5_sys::h5fd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys","hdf5_sys::h5g","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys","hdf5_sys::h5i","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys","hdf5_sys::h5l","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys","hdf5_sys::h5mm","","hdf5_sys","hdf5_sys::h5o","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys","hdf5_sys::h5phdf5_sys::h5p::globals","","","","","","","","hdf5_sys::h5p","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys","hdf5_sys::h5r","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys","hdf5_sys::h5s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys","hdf5_sys::h5thdf5_sys","hdf5_sys::h5vl","","","","","","","","","","","","","hdf5_sys","hdf5_sys::h5z","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys","hdf5_sys::h5pl","","","","","","","","","","","","","","","","hdf5_sys::h5","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5a","","","","","","","","","hdf5_sys::h5ac","","","","","","","","","","","","","","","","","","hdf5_sys::h5c","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5e","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5f","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5fd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5g","","","","","","","","","","","","","","","","","","hdf5_sys::h5i","","","","","","","","","hdf5_sys::h5l","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5o","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5r","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5s","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5t","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5z","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hdf5_sys::h5pl","","","","","","","","","hdf5_sys::h5","","","hdf5_sys::h5a","hdf5_sys::h5ac","","hdf5_sys::h5c","","","hdf5_sys::h5d","","","","","","","","","hdf5_sys::h5e","","","hdf5_sys::h5f","","","","","","","","","","","","","","hdf5_sys::h5fd","","","","","hdf5_sys::h5g","","hdf5_sys::h5i","hdf5_sys::h5l","","","","","","hdf5_sys::h5o","","","","","","","","","","","hdf5_sys::h5r","","","hdf5_sys::h5s","","","hdf5_sys::h5t","","","","","","","","","","","","","","","hdf5_sys::h5z","","","","","hdf5_sys::h5pl","hdf5_sys::h5","hdf5_sys::h5a","hdf5_sys::h5ac","","hdf5_sys::h5d","","","","","hdf5_sys::h5e","hdf5_sys::h5f","","","","","","","","","","","hdf5_sys::h5fd","","","","hdf5_sys::h5g","hdf5_sys::h5l","","","","","hdf5_sys::h5o","","","","","hdf5_sys::h5r","","hdf5_sys::h5t","","","hdf5_sys::h5z","","hdf5_sys::h5","","hdf5_sys::h5c","","","hdf5_sys::h5d","","","","","","","","","hdf5_sys::h5e","","hdf5_sys::h5f","","","","","","hdf5_sys::h5fd","hdf5_sys::h5g","hdf5_sys::h5i","hdf5_sys::h5l","hdf5_sys::h5o","","hdf5_sys::h5r","hdf5_sys::h5s","","","hdf5_sys::h5t","","","","","","","","","","","","","hdf5_sys::h5z","","","hdf5_sys::h5pl","hdf5_sys::h5","","hdf5_sys::h5c","","","hdf5_sys::h5d","","","","","","","","","hdf5_sys::h5e","","hdf5_sys::h5f","","","","","","hdf5_sys::h5fd","hdf5_sys::h5g","hdf5_sys::h5i","hdf5_sys::h5l","hdf5_sys::h5o","","hdf5_sys::h5r","hdf5_sys::h5s","","","hdf5_sys::h5t","","","","","","","","","","","","","hdf5_sys::h5z","","","hdf5_sys::h5pl","hdf5_sys::h5","","","hdf5_sys::h5ac","hdf5_sys::h5c","","","hdf5_sys::h5d","","","","","","","","","hdf5_sys::h5e","","","hdf5_sys::h5f","","","","","","","","","","","","","","hdf5_sys::h5fd","","","","","hdf5_sys::h5g","","hdf5_sys::h5i","hdf5_sys::h5l","","","","","hdf5_sys::h5o","","","","","","","","","","","hdf5_sys::h5r","hdf5_sys::h5s","","","hdf5_sys::h5t","","","","","","","","","","","","","","","hdf5_sys::h5z","","","","","hdf5_sys::h5pl"],"di":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,2,2,2,2,0,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,0,0,7,7,0,8,8,0,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,10,10,10,0,11,11,11,11,0,12,12,12,12,0,13,13,13,13,0,14,14,14,0,15,15,15,15,15,0,16,16,16,16,16,16,16,16,0,0,0,0,17,17,17,17,17,17,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,19,0,20,20,20,20,20,20,20,0,21,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,0,23,23,23,23,0,24,24,0,25,25,0,26,26,26,26,26,26,26,26,26,0,27,27,27,27,27,0,0,0,0,28,28,0,29,29,0,30,30,30,0,31,31,31,0,32,32,32,0,33,33,33,0,0,34,34,34,34,34,34,0,35,35,35,35,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,37,37,37,0,38,38,38,38,38,38,38,38,0,39,39,39,39,39,39,39,39,0,40,40,40,40,40,40,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,41,41,41,0,42,42,42,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,44,44,44,44,0,0,0,45,45,45,45,45,0,46,46,0,47,47,47,47,47,0,0,0,0,0,0,0,0,48,48,48,48,48,48,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,49,49,49,49,49,0,50,50,50,50,50,50,0,51,51,51,51,0,52,52,0,53,53,53,53,53,53,53,53,53,53,53,0,54,54,0,0,0,0,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,56,56,56,56,56,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,57,57,57,0,58,58,58,58,58,58,58,58,58,58,0,59,59,59,59,59,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,60,60,60,60,60,60,60,60,60,60,60,60,0,61,61,61,61,61,61,0,62,62,62,62,0,63,63,63,63,0,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,0,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,0,66,66,66,66,66,0,67,67,67,0,68,68,68,0,69,69,69,69,0,70,70,70,0,71,71,71,0,72,72,72,72,72,72,72,0,73,73,73,0,74,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,75,75,0,76,76,76,76,0,77,77,77,77,0,0,78,78,0,0,0,0,79,79,79,79,79,79,79,79,0,0,0,0,0,0,0,0,0,0,0,80,80,80,80,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,81,81,81,81,81,81,81,81,81,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,56,56,56,56,56,56,56,56,56,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,80,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,81,48,49,50,51,52,53,54,55,82,83,84,85,56,86,87,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,3,4,5,6,17,10,12,13,18,20,23,24,25,27,28,29,30,31,32,33,35,36,37,38,40,42,45,46,47,81,48,50,51,52,53,82,86,87,64,69,74,78,79,1,2,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,26,27,34,35,39,41,43,44,49,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,75,76,77,80,1,2,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,26,27,34,35,39,41,43,44,49,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,75,76,77,80,1,2,3,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,82,83,84,85,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_uint",6]],["c_uint",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["h5_iter_order_t",4]],[[],["h5_index_t",4]],[[],["h5_ih_info_t",3]],[[],["h5a_info_t",3]],[[],["h5ac_cache_config_t",3]],[[],["h5ac_cache_image_config_t",3]],[[],["h5c_cache_incr_mode",4]],[[],["h5c_cache_flash_incr_mode",4]],[[],["h5c_cache_decr_mode",4]],[[],["h5d_alloc_time_t",4]],[[],["h5d_space_status_t",4]],[[],["h5d_fill_time_t",4]],[[],["h5d_fill_value_t",4]],[[],["h5d_mpio_actual_chunk_opt_mode_t",4]],[[],["h5d_mpio_actual_io_mode_t",4]],[[],["h5d_mpio_no_collective_cause_t",4]],[[],["h5d_layout_t",4]],[[],["h5d_vds_view_t",4]],[[],["h5e_type_t",4]],[[],["h5e_error2_t",3]],[[],["h5e_direction_t",4]],[[],["h5f_scope_t",4]],[[],["h5f_close_degree_t",4]],[[],["h5f_info_t",3]],[[],["h5f_info_t__sohm",3]],[[],["h5f_mem_t",4]],[[],["h5f_libver_t",4]],[[],["h5f_retry_info_t",3]],[[],["h5f_sect_info_t",3]],[[],["h5f_info2_t",3]],[[],["h5f_info2_t__super",3]],[[],["h5f_info2_t__free",3]],[[],["h5f_info2_t__sohm",3]],[[],["h5f_file_space_type_t",4]],[[],["h5f_fspace_strategy_t",4]],[[],["h5fd_class_t",3]],[[],["h5fd_free_t",3]],[[],["h5fd_t",3]],[[],["h5fd_file_image_op_t",4]],[[],["h5fd_file_image_callbacks_t",3]],[[],["h5g_storage_type_t",4]],[[],["h5g_info_t",3]],[[],["h5i_type_t",4]],[[],["h5l_type_t",4]],[[],["h5l_info1_t",3]],[[],["h5l_info1_t__u",3]],[[],["h5l_info2_t",3]],[[],["h5l_info2_t__u",19]],[[],["h5l_class_t",3]],[[],["h5o_type_t",4]],[[],["h5o_hdr_info_t",3]],[[],["h5o_hdr_info_t__space",3]],[[],["h5o_hdr_info_t__mesg",3]],[[],["h5o_info_t",3]],[[],["h5o_info_t__meta_size",3]],[[],["h5o_mcdt_search_ret_t",4]],[[],["h5o_token_t",3]],[[],["h5o_info2_t",3]],[[],["h5o_native_info_meta_size_t",3]],[[],["h5o_native_info_t",3]],[[],["h5r_type_t",4]],[[],["h5r_ref_t_u",19]],[[],["h5r_ref_t",3]],[[],["h5s_class_t",4]],[[],["h5s_seloper_t",4]],[[],["h5s_sel_type",4]],[[],["h5t_class_t",4]],[[],["h5t_order_t",4]],[[],["h5t_sign_t",4]],[[],["h5t_norm_t",4]],[[],["h5t_cset_t",4]],[[],["h5t_str_t",4]],[[],["h5t_pad_t",4]],[[],["h5t_cmd_t",4]],[[],["h5t_bkg_t",4]],[[],["h5t_cdata_t",3]],[[],["h5t_pers_t",4]],[[],["h5t_direction_t",4]],[[],["h5t_conv_except_t",4]],[[],["h5t_conv_ret_t",4]],[[],["hvl_t",3]],[[],["h5z_so_scale_type_t",4]],[[],["h5z_edc_t",4]],[[],["h5z_cb_return_t",4]],[[],["h5z_cb_t",3]],[[],["h5z_class2_t",3]],[[],["h5pl_type_t",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["h5r_ref_t",3]],[[]],[[]],[[]],[[]],[[]],[[["h5_iter_order_t",4]],["bool",15]],[[["h5_index_t",4]],["bool",15]],[[["h5c_cache_incr_mode",4]],["bool",15]],[[["h5c_cache_flash_incr_mode",4]],["bool",15]],[[["h5c_cache_decr_mode",4]],["bool",15]],[[["h5d_alloc_time_t",4]],["bool",15]],[[["h5d_space_status_t",4]],["bool",15]],[[["h5d_fill_time_t",4]],["bool",15]],[[["h5d_fill_value_t",4]],["bool",15]],[[["h5d_mpio_actual_chunk_opt_mode_t",4]],["bool",15]],[[["h5d_mpio_actual_io_mode_t",4]],["bool",15]],[[["h5d_mpio_no_collective_cause_t",4]],["bool",15]],[[["h5d_layout_t",4]],["bool",15]],[[["h5d_vds_view_t",4]],["bool",15]],[[["h5e_type_t",4]],["bool",15]],[[["h5e_direction_t",4]],["bool",15]],[[["h5f_scope_t",4]],["bool",15]],[[["h5f_close_degree_t",4]],["bool",15]],[[["h5f_mem_t",4]],["bool",15]],[[["h5f_libver_t",4]],["bool",15]],[[["h5f_file_space_type_t",4]],["bool",15]],[[["h5f_fspace_strategy_t",4]],["bool",15]],[[["h5fd_file_image_op_t",4]],["bool",15]],[[["h5g_storage_type_t",4]],["bool",15]],[[["h5i_type_t",4]],["bool",15]],[[["h5l_type_t",4]],["bool",15]],[[["h5o_type_t",4]],["bool",15]],[[["h5o_mcdt_search_ret_t",4]],["bool",15]],[[["h5r_type_t",4]],["bool",15]],[[["h5s_class_t",4]],["bool",15]],[[["h5s_seloper_t",4]],["bool",15]],[[["h5s_sel_type",4]],["bool",15]],[[["h5t_class_t",4]],["bool",15]],[[["h5t_order_t",4]],["bool",15]],[[["h5t_sign_t",4]],["bool",15]],[[["h5t_norm_t",4]],["bool",15]],[[["h5t_cset_t",4]],["bool",15]],[[["h5t_str_t",4]],["bool",15]],[[["h5t_pad_t",4]],["bool",15]],[[["h5t_cmd_t",4]],["bool",15]],[[["h5t_bkg_t",4]],["bool",15]],[[["h5t_pers_t",4]],["bool",15]],[[["h5t_direction_t",4]],["bool",15]],[[["h5t_conv_except_t",4]],["bool",15]],[[["h5t_conv_ret_t",4]],["bool",15]],[[["h5z_so_scale_type_t",4]],["bool",15]],[[["h5z_edc_t",4]],["bool",15]],[[["h5z_cb_return_t",4]],["bool",15]],[[["h5pl_type_t",4]],["bool",15]],[[["h5_iter_order_t",4]],[["ordering",4],["option",4]]],[[["h5_index_t",4]],[["ordering",4],["option",4]]],[[["h5c_cache_incr_mode",4]],[["ordering",4],["option",4]]],[[["h5c_cache_flash_incr_mode",4]],[["ordering",4],["option",4]]],[[["h5c_cache_decr_mode",4]],[["ordering",4],["option",4]]],[[["h5d_alloc_time_t",4]],[["ordering",4],["option",4]]],[[["h5d_space_status_t",4]],[["ordering",4],["option",4]]],[[["h5d_fill_time_t",4]],[["ordering",4],["option",4]]],[[["h5d_fill_value_t",4]],[["ordering",4],["option",4]]],[[["h5d_mpio_actual_chunk_opt_mode_t",4]],[["ordering",4],["option",4]]],[[["h5d_mpio_actual_io_mode_t",4]],[["ordering",4],["option",4]]],[[["h5d_mpio_no_collective_cause_t",4]],[["ordering",4],["option",4]]],[[["h5d_layout_t",4]],[["ordering",4],["option",4]]],[[["h5d_vds_view_t",4]],[["ordering",4],["option",4]]],[[["h5e_type_t",4]],[["ordering",4],["option",4]]],[[["h5e_direction_t",4]],[["ordering",4],["option",4]]],[[["h5f_scope_t",4]],[["ordering",4],["option",4]]],[[["h5f_close_degree_t",4]],[["ordering",4],["option",4]]],[[["h5f_mem_t",4]],[["ordering",4],["option",4]]],[[["h5f_libver_t",4]],[["ordering",4],["option",4]]],[[["h5f_file_space_type_t",4]],[["ordering",4],["option",4]]],[[["h5f_fspace_strategy_t",4]],[["ordering",4],["option",4]]],[[["h5fd_file_image_op_t",4]],[["ordering",4],["option",4]]],[[["h5g_storage_type_t",4]],[["ordering",4],["option",4]]],[[["h5i_type_t",4]],[["ordering",4],["option",4]]],[[["h5l_type_t",4]],[["ordering",4],["option",4]]],[[["h5o_type_t",4]],[["ordering",4],["option",4]]],[[["h5o_mcdt_search_ret_t",4]],[["ordering",4],["option",4]]],[[["h5r_type_t",4]],[["ordering",4],["option",4]]],[[["h5s_class_t",4]],[["ordering",4],["option",4]]],[[["h5s_seloper_t",4]],[["ordering",4],["option",4]]],[[["h5s_sel_type",4]],[["ordering",4],["option",4]]],[[["h5t_class_t",4]],[["ordering",4],["option",4]]],[[["h5t_order_t",4]],[["ordering",4],["option",4]]],[[["h5t_sign_t",4]],[["ordering",4],["option",4]]],[[["h5t_norm_t",4]],[["ordering",4],["option",4]]],[[["h5t_cset_t",4]],[["ordering",4],["option",4]]],[[["h5t_str_t",4]],[["ordering",4],["option",4]]],[[["h5t_pad_t",4]],[["ordering",4],["option",4]]],[[["h5t_cmd_t",4]],[["ordering",4],["option",4]]],[[["h5t_bkg_t",4]],[["ordering",4],["option",4]]],[[["h5t_pers_t",4]],[["ordering",4],["option",4]]],[[["h5t_direction_t",4]],[["ordering",4],["option",4]]],[[["h5t_conv_except_t",4]],[["ordering",4],["option",4]]],[[["h5t_conv_ret_t",4]],[["ordering",4],["option",4]]],[[["h5z_so_scale_type_t",4]],[["ordering",4],["option",4]]],[[["h5z_edc_t",4]],[["ordering",4],["option",4]]],[[["h5z_cb_return_t",4]],[["ordering",4],["option",4]]],[[["h5pl_type_t",4]],[["ordering",4],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]]],"p":[[4,"H5_iter_order_t"],[4,"H5_index_t"],[3,"H5_ih_info_t"],[3,"H5A_info_t"],[3,"H5AC_cache_config_t"],[3,"H5AC_cache_image_config_t"],[4,"H5C_cache_incr_mode"],[4,"H5C_cache_flash_incr_mode"],[4,"H5C_cache_decr_mode"],[4,"H5D_alloc_time_t"],[4,"H5D_space_status_t"],[4,"H5D_fill_time_t"],[4,"H5D_fill_value_t"],[4,"H5D_mpio_actual_chunk_opt_mode_t"],[4,"H5D_mpio_actual_io_mode_t"],[4,"H5D_mpio_no_collective_cause_t"],[4,"H5D_layout_t"],[4,"H5D_vds_view_t"],[4,"H5E_type_t"],[3,"H5E_error2_t"],[4,"H5E_direction_t"],[4,"H5F_scope_t"],[4,"H5F_close_degree_t"],[3,"H5F_info_t"],[3,"H5F_info_t__sohm"],[4,"H5F_mem_t"],[4,"H5F_libver_t"],[3,"H5F_retry_info_t"],[3,"H5F_sect_info_t"],[3,"H5F_info2_t"],[3,"H5F_info2_t__super"],[3,"H5F_info2_t__free"],[3,"H5F_info2_t__sohm"],[4,"H5F_file_space_type_t"],[4,"H5F_fspace_strategy_t"],[3,"H5FD_class_t"],[3,"H5FD_free_t"],[3,"H5FD_t"],[4,"H5FD_file_image_op_t"],[3,"H5FD_file_image_callbacks_t"],[4,"H5G_storage_type_t"],[3,"H5G_info_t"],[4,"H5I_type_t"],[4,"H5L_type_t"],[3,"H5L_info1_t"],[3,"H5L_info1_t__u"],[3,"H5L_info2_t"],[3,"H5L_class_t"],[4,"H5O_type_t"],[3,"H5O_hdr_info_t"],[3,"H5O_hdr_info_t__space"],[3,"H5O_hdr_info_t__mesg"],[3,"H5O_info_t"],[3,"H5O_info_t__meta_size"],[4,"H5O_mcdt_search_ret_t"],[4,"H5R_type_t"],[4,"H5S_class_t"],[4,"H5S_seloper_t"],[4,"H5S_sel_type"],[4,"H5T_class_t"],[4,"H5T_order_t"],[4,"H5T_sign_t"],[4,"H5T_norm_t"],[4,"H5T_cset_t"],[4,"H5T_str_t"],[4,"H5T_pad_t"],[4,"H5T_cmd_t"],[4,"H5T_bkg_t"],[3,"H5T_cdata_t"],[4,"H5T_pers_t"],[4,"H5T_direction_t"],[4,"H5T_conv_except_t"],[4,"H5T_conv_ret_t"],[3,"hvl_t"],[4,"H5Z_SO_scale_type_t"],[4,"H5Z_EDC_t"],[4,"H5Z_cb_return_t"],[3,"H5Z_cb_t"],[3,"H5Z_class2_t"],[4,"H5PL_type_t"],[19,"H5L_info2_t__u"],[3,"H5O_token_t"],[3,"H5O_info2_t"],[3,"H5O_native_info_meta_size_t"],[3,"H5O_native_info_t"],[19,"H5R_ref_t_u"],[3,"H5R_ref_t"]]},\
"hex":{"doc":"Encoding and decoding hex strings.","t":[4,13,12,12,13,13,8,10,10,8,16,10,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FromHexError","InvalidHexCharacter","c","index","OddLength","InvalidStringLength","ToHex","encode_hex","encode_hex_upper","FromHex","Error","from_hex","encode","encode_upper","decode","decode_to_slice","encode_to_slice","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","clone","eq","ne","fmt","fmt"],"q":["hex","","hex::FromHexError","","hex","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The error type for decoding a hex string into <code>Vec<u8></code> or …","An invalid character was found. Valid ones are: <code>0...9</code>, …","","","A hex string’s length needs to be even, as two digits …","If the hex string is decoded into a fixed sized …","Encoding values as hex string.","Encode the hex strict representing <code>self</code> into the result. …","Encode the hex strict representing <code>self</code> into the result. …","Types that can be decoded from a hex string.","","Creates an instance of type <code>Self</code> from the given hex …","Encodes <code>data</code> as hex string using lowercase characters.","Encodes <code>data</code> as hex string using uppercase characters.","Decodes a hex string into raw bytes.","Decode a hex string into a mutable bytes slice.","Encodes some bytes into a mutable slice of bytes.","","","","","","","","","","","","","","",""],"i":[0,1,2,2,1,1,0,3,3,0,4,4,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,null,null,null,[[],[["fromiterator",8],["char",15]]],[[],[["fromiterator",8],["char",15]]],null,null,[[["asref",8]],["result",4]],[[["asref",8]],["string",3]],[[["asref",8]],["string",3]],[[["asref",8]],[["result",4],["vec",3],["fromhexerror",4]]],[[["asref",8]],[["result",4],["fromhexerror",4]]],[[["asref",8]],[["result",4],["fromhexerror",4]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["fromhexerror",4]],[[["fromhexerror",4]],["bool",15]],[[["fromhexerror",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]]],"p":[[4,"FromHexError"],[13,"InvalidHexCharacter"],[8,"ToHex"],[8,"FromHex"]]},\
"indexmap":{"doc":"<code>IndexMap</code> is a hash table where the iteration order of the …","t":[0,8,16,16,10,10,10,4,13,13,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,3,3,3,3,8,10,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["map","MutableKeys","Key","Value","get_full_mut2","retain2","__private_marker","Entry","Occupied","Vacant","OccupiedEntry","VacantEntry","IndexMap","new","with_capacity","with_capacity_and_hasher","with_hasher","capacity","hasher","len","is_empty","iter","iter_mut","keys","values","values_mut","clear","truncate","drain","split_off","reserve","shrink_to_fit","insert","insert_full","entry","contains_key","get","get_key_value","get_full","get_index_of","get_mut","get_full_mut","remove","remove_entry","swap_remove","swap_remove_entry","swap_remove_full","shift_remove","shift_remove_entry","shift_remove_full","pop","retain","sort_keys","sort_by","sorted_by","reverse","get_index","get_index_mut","first","first_mut","last","last_mut","swap_remove_index","shift_remove_index","swap_indices","Keys","Values","ValuesMut","Iter","IterMut","IntoIter","Drain","set","IndexSet","new","with_capacity","with_capacity_and_hasher","with_hasher","capacity","hasher","len","is_empty","iter","clear","truncate","drain","split_off","reserve","shrink_to_fit","insert","insert_full","difference","symmetric_difference","intersection","union","contains","get","get_full","get_index_of","replace","remove","swap_remove","shift_remove","take","swap_take","shift_take","swap_remove_full","shift_remove_full","pop","retain","sort","sort_by","sorted_by","reverse","get_index","first","last","swap_remove_index","shift_remove_index","swap_indices","IntoIter","Iter","Drain","is_disjoint","is_subset","is_superset","Difference","Intersection","SymmetricDifference","Union","Equivalent","equivalent","indexmap","indexset","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","to_owned","clone_into","get_full_mut2","retain2","__private_marker","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","eq","index","index","index","index_mut","index_mut","len","len","len","len","len","len","len","len","from_iter","from_iter","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next","size_hint","count","nth","last","collect","next","size_hint","count","nth","last","collect","next","size_hint","count","nth","last","collect","next","size_hint","count","nth","last","collect","next","size_hint","count","nth","last","collect","next","size_hint","count","nth","last","collect","next","size_hint","count","nth","last","collect","next","size_hint","count","nth","last","collect","next","size_hint","count","nth","last","collect","next","size_hint","count","nth","last","collect","next","size_hint","next","size_hint","next","size_hint","fold","next","size_hint","fold","into_iter","into_iter","extend","extend","extend","extend","clone","clone_from","clone","clone","clone","clone","clone_from","clone","clone","clone","clone","clone","default","default","key","get","get_mut","index","into_mut","swap_remove_entry","shift_remove_entry","or_insert","or_insert_with","or_insert_with_key","key","index","and_modify","or_default","insert","remove","swap_remove","shift_remove","remove_entry","key","into_key","index","insert"],"q":["indexmap","indexmap::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","indexmap","indexmap::set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","indexmap","","","","indexmap::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","indexmap::set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","indexmap::map","","","","","","","","","","","indexmap::set","","","","","","","indexmap::map","indexmap::set","indexmap::map","","indexmap::set","indexmap::map","","","","","","","","indexmap::set","","indexmap::map","indexmap::set","indexmap::map","","","","","","","indexmap::set","","","","","","","indexmap::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","indexmap::set","","","","","","","","","","","","","","","","","","","","","","","","","","","","indexmap::map","indexmap::set","indexmap::map","","indexmap::set","","indexmap::map","","","","","indexmap::set","","","","","","","indexmap::map","indexmap::set","indexmap::map","","","","","","","","","","","","","","","","","","","","","",""],"d":["<code>IndexMap</code> is a hash table where the iteration order of the …","Opt-in mutable access to keys.","","","Return item index, mutable reference to key and value","Scan through each key-value pair in the map and keep …","This method is not useful in itself – it is there to …","Entry for an existing key-value pair or a vacant location …","Existing slot with equivalent key.","Vacant slot (no equivalent key in the map).","A view into an occupied entry in a <code>IndexMap</code>. It is part …","A view into a vacant entry in a <code>IndexMap</code>. It is part of …","A hash table where the iteration order of the key-value …","Create a new map. (Does not allocate.)","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with <code>hash_builder</code>","Computes in <strong>O(1)</strong> time.","Return a reference to the map’s <code>BuildHasher</code>.","Return the number of key-value pairs in the map.","Returns true if the map contains no elements.","Return an iterator over the key-value pairs of the map, …","Return an iterator over the key-value pairs of the map, …","Return an iterator over the keys of the map, in their …","Return an iterator over the values of the map, in their …","Return an iterator over mutable references to the the …","Remove all key-value pairs in the map, while preserving …","Shortens the map, keeping the first <code>len</code> elements and …","Clears the <code>IndexMap</code> in the given index range, returning …","Splits the collection into two at the given index.","Reserve capacity for <code>additional</code> more key-value pairs.","Shrink the capacity of the map as much as possible.","Insert a key-value pair in the map.","Insert a key-value pair in the map, and get their index.","Get the given key’s corresponding entry in the map for …","Return <code>true</code> if an equivalent to <code>key</code> exists in the map.","Return a reference to the value stored for <code>key</code>, if it is …","Return references to the key-value pair stored for <code>key</code>, …","Return item index, key and value","Return item index, if it exists in the map","","","Remove the key-value pair equivalent to <code>key</code> and return …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the key-value pair equivalent to <code>key</code> and return …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the last key-value pair","Scan through each key-value pair in the map and keep …","Sort the map’s key-value pairs by the default ordering …","Sort the map’s key-value pairs in place using the …","Sort the key-value pairs of the map and return a by value …","Reverses the order of the map’s key-value pairs in …","Get a key-value pair by index","Get a key-value pair by index","Get the first key-value pair","Get the first key-value pair, with mutable access to the …","Get the last key-value pair","Get the last key-value pair, with mutable access to the …","Remove the key-value pair by index","Remove the key-value pair by index","Swaps the position of two key-value pairs in the map.","An iterator over the keys of a <code>IndexMap</code>.","An iterator over the values of a <code>IndexMap</code>.","A mutable iterator over the values of a <code>IndexMap</code>.","An iterator over the entries of a <code>IndexMap</code>.","A mutable iterator over the entries of a <code>IndexMap</code>.","An owning iterator over the entries of a <code>IndexMap</code>.","A draining iterator over the entries of a <code>IndexMap</code>.","A hash set implemented using <code>IndexMap</code>","A hash set where the iteration order of the values is …","Create a new set. (Does not allocate.)","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with <code>hash_builder</code>","Computes in <strong>O(1)</strong> time.","Return a reference to the set’s <code>BuildHasher</code>.","Return the number of elements in the set.","Returns true if the set contains no elements.","Return an iterator over the values of the set, in their …","Remove all elements in the set, while preserving its …","Shortens the set, keeping the first <code>len</code> elements and …","Clears the <code>IndexSet</code> in the given index range, returning …","Splits the collection into two at the given index.","Reserve capacity for <code>additional</code> more values.","Shrink the capacity of the set as much as possible.","Insert the value into the set.","Insert the value into the set, and get its index.","Return an iterator over the values that are in <code>self</code> but …","Return an iterator over the values that are in <code>self</code> or …","Return an iterator over the values that are in both <code>self</code> …","Return an iterator over all values that are in <code>self</code> or …","Return <code>true</code> if an equivalent to <code>value</code> exists in the set.","Return a reference to the value stored in the set, if it …","Return item index and value","Return item index, if it exists in the set","Adds a value to the set, replacing the existing value, if …","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set, and return <code>true</code> if it was …","Removes and returns the value in the set, if any, that is …","Removes and returns the value in the set, if any, that is …","Removes and returns the value in the set, if any, that is …","Remove the value from the set return it and the index it …","Remove the value from the set return it and the index it …","Remove the last value","Scan through each value in the set and keep those where …","Sort the set’s values by their default ordering.","Sort the set’s values in place using the comparison …","Sort the values of the set and return a by value iterator …","Reverses the order of the set’s values in place.","Get a value by index","Get the first value","Get the last value","Remove the value by index","Remove the value by index","Swaps the position of two values in the set.","An owning iterator over the items of a <code>IndexSet</code>.","An iterator over the items of a <code>IndexSet</code>.","A draining iterator over the items of a <code>IndexSet</code>.","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.","Returns <code>true</code> if all elements of <code>self</code> are contained in …","Returns <code>true</code> if all elements of <code>other</code> are contained in …","A lazy iterator producing elements in the difference of …","A lazy iterator producing elements in the intersection of …","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of …","Key equivalence trait.","Compare self to <code>key</code> and return <code>true</code> if they are equal.","Create an <code>IndexMap</code> from a list of key-value pairs","Create an <code>IndexSet</code> from a list of valueseturns a reference to the value corresponding to the …","Returns a reference to the value at the supplied <code>index</code>.","Returns a reference to the value at the supplied <code>index</code>.","Returns a mutable reference to the value corresponding to …","Returns a mutable reference to the value at the supplied …","","","","","","","","","Create an <code>IndexMap</code> from the sequence of key-value pairs …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extend the map with all key-value pairs in the iterable.","Extend the map with all key-value pairs in the iterable.","","","","","","","","","","","","","","","Return an empty <code>IndexMap</code>","Return an empty <code>IndexSet</code>","Gets a reference to the entry’s key in the map.","Gets a reference to the entry’s value in the map.","Gets a mutable reference to the entry’s value in the …","Return the index of the key-value pair","Converts into a mutable reference to the entry’s value …","Remove and return the key, value pair stored in the map …","Remove and return the key, value pair stored in the map …","Inserts the given default value in the entry if it is …","Inserts the result of the <code>call</code> function in the entry if …","Inserts the result of the <code>call</code> function with a reference …","Gets a reference to the entry’s key, either within the …","Return the index where the key-value pair exists or will …","Modifies the entry if it is occupied.","Inserts a default-constructed value in the entry if it is …","Sets the value of the entry to <code>value</code>, and returns the …","Remove the key, value pair stored in the map for this …","Remove the key, value pair stored in the map for this …","Remove the key, value pair stored in the map for this …","Remove and return the key, value pair stored in the map …","Gets a reference to the key that was used to find the …","Takes ownership of the key, leaving the entry vacant.","Return the index where the key-value pair will be …","Inserts the entry’s key and the given value into the …"],"i":[0,0,1,1,1,1,1,0,2,2,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,4,4,4,0,0,0,0,0,5,0,0,6,6,6,6,6,6,6,2,2,2,2,2,2,2,7,7,7,7,7,7,7,3,3,3,3,3,3,3,3,3,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,4,4,4,4,4,4,4,4,4,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,3,3,3,2,6,7,3,8,9,11,13,4,15,16,18,19,20,21,3,4,3,3,4,3,3,8,9,10,11,12,13,15,16,3,4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,8,8,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13,13,13,13,14,14,14,14,14,14,15,15,15,15,15,15,16,16,16,16,16,16,17,17,17,17,17,17,18,18,19,19,20,20,20,21,21,21,3,4,3,3,4,4,3,3,8,9,11,4,4,16,18,19,20,21,3,4,6,6,6,6,6,6,6,2,2,2,2,2,2,2,6,6,6,6,6,7,7,7,7],"f":[null,null,null,null,[[],["option",4]],[[]],[[],["privatemarker",3]],null,null,null,null,null,null,[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[],["usize",15]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["keys",3]],[[],["values",3]],[[],["valuesmut",3]],[[]],[[["usize",15]]],[[],["drain",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["option",4]],[[]],[[],["entry",4]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],[["usize",15],["option",4]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]]],null,null,null,null,null,null,null,null,null,[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[],["usize",15]],[[],["bool",15]],[[],["iter",3]],[[]],[[["usize",15]]],[[],["drain",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["bool",15]],[[]],[[["indexset",3]],["difference",3]],[[["indexset",3]],["symmetricdifference",3]],[[["indexset",3]],["intersection",3]],[[["indexset",3]],["union",3]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],[["usize",15],["option",4]]],[[],["option",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[["usize",15]],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]]],null,null,null,[[["indexset",3]],["bool",15]],[[["indexset",3]],["bool",15]],[[["indexset",3]],["bool",15]],null,null,null,null,null,[[],["bool",15]],null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["option",4]],[[]],[[],["privatemarker",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["indexmap",3]],["bool",15]],[[["indexset",3]],["bool",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[],["usize",15]],[[["usize",15]],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["usize",15]],[[["usize",15]],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["usize",15]],[[["usize",15]],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["usize",15]],[[["usize",15]],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["usize",15]],[[["usize",15]],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["usize",15]],[[["usize",15]],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["usize",15]],[[["usize",15]],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["usize",15]],[[["usize",15]],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["usize",15]],[[["usize",15]],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["usize",15]],[[["usize",15]],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]]],"p":[[8,"MutableKeys"],[4,"Entry"],[3,"IndexMap"],[3,"IndexSet"],[8,"Equivalent"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"Difference"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"Union"]]},\
"indicatif":{"doc":"indicatif is a library for Rust that helps you build …","t":[3,12,3,12,3,12,3,12,3,12,3,8,11,11,10,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BinaryBytes","0","DecimalBytes","0","FormattedDuration","0","HumanBytes","0","HumanDuration","0","ProgressBarIter","ProgressIterator","progress","progress_count","progress_with","MultiProgress","ProgressBar","ProgressBarWrap","ProgressDrawTarget","WeakProgressBar","ProgressStyle","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","next","clone","clone","clone","default","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","read","seek","write","flush","write_vectored","write_all","progress","progress_count","stdout","stderr","stdout_with_hz","stderr_with_hz","stdout_nohz","stderr_nohz","to_term","hidden","is_hidden","new","hidden","with_draw_target","with_style","new_spinner","set_style","enable_steady_tick","disable_steady_tick","set_draw_delta","tick","inc","is_hidden","is_finished","println","set_position","set_length","inc_length","set_prefix","set_message","downgrade","reset_eta","reset_elapsed","reset","finish","finish_at_current_pos","finish_with_message","finish_and_clear","abandon","abandon_with_message","set_draw_target","wrap_iter","wrap_read","wrap_write","position","length","upgrade","new","with_draw_target","set_draw_target","set_move_cursor","add","insert","join","join_and_clear","default_bar","default_spinner","tick_chars","tick_strings","progress_chars","template","get_tick_char","get_tick_str","get_final_tick_char","get_final_tick_str"],"q":["indicatifd":["Formats bytes for human readability using ISO/IEC prefixes","","Formats bytes for human readability using SI prefixes","","Wraps an std duration for human basic formatting.","","Formats bytes for human readability","","Wraps an std duration for human readable formatting.","","Wraps an iterator to display its progress.","Wraps an iterator to display its progress.","Wrap an iterator with default styling. Attempt to guess …","Wrap an iterator with an explicit element count.","Wrap an iterator with a custom progress bar.","Manages multiple progress bars from different threads.","A progress bar or spinner.","wraps an io-object, either a Reader or a Writer (or both).","Target for draw operations","A weak reference to a <code>ProgressBar</code>.","Controls the rendering style of progress bars.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrap an iterator with default styling. Attempt to guess …","Wrap an iterator with an explicit element count.","Draw to a buffered stdout terminal at a max of 15 times a …","Draw to a buffered stderr terminal at a max of 15 times a …","Draw to a buffered stdout terminal at a max of …","Draw to a buffered stderr terminal at a max of …","Draw to a buffered stdout terminal without max framerate.","Draw to a buffered stderr terminal without max framerate.","Draw to a terminal, optionally with a specific refresh …","A hidden draw target.","Returns true if the draw target is hidden.","Creates a new progress bar with a given length.","Creates a completely hidden progress bar.","Creates a new progress bar with a given length and draw …","A convenience builder-like function for a progress bar …","Creates a new spinner.","Overrides the stored style.","Spawns a background thread to tick the progress bar.","Undoes <code>enable_steady_tick</code>.","Limit redrawing of progress bar to every <code>n</code> steps. …","Manually ticks the spinner or progress bar.","Advances the position of a progress bar by delta.","A quick convenience check if the progress bar is hidden.","","Print a log line above the progress bar.","Sets the position of the progress bar.","Sets the length of the progress bar.","Increase the length of the progress bar.","Sets the current prefix of the progress bar.","Sets the current message of the progress bar.","Creates a new weak reference to this <code>ProgressBar</code>.","Resets the ETA calculation.","Resets elapsed time","","Finishes the progress bar and leaves the current message.","Finishes the progress bar at current position and leaves …","Finishes the progress bar and sets a message.","Finishes the progress bar and completely clears it.","Finishes the progress bar and leaves the current message …","Finishes the progress bar and sets a message, and leaves …","Sets a different draw target for the progress bar.","Wraps an iterator with the progress bar.","Wraps a Reader with the progress bar.","Wraps a Writer with the progress bar.","","","Attempts to upgrade the Weak pointer to a <code>ProgressBar</code>, …","Creates a new multi progress object.","Creates a new multi progress object with the given draw …","Sets a different draw target for the multiprogress bar.","Set whether we should try to move the cursor when …","Adds a progress bar.","Inserts a progress bar.","Waits for all progress bars to report that they are …","Works like <code>join</code> but clears the progress bar in the end.","Returns the default progress bar style for bars.","Returns the default progress bar style for spinners.","Sets the tick character sequence for spinners.","Sets the tick string sequence for spinners.","Sets the progress characters <code>(filled, current, to do)</code>. …","Sets the template string for the progress bar.","Returns the tick char for a given number.","Returns the tick string for a given number.","Returns the tick char for the finished state.","Returns the tick string for the finished state."],"i":[0,1,0,2,0,3,0,4,0,5,0,0,6,6,6,0,0,0,0,0,0,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,7,9,10,13,11,3,5,4,2,1,9,11,12,13,3,5,4,2,1,12,12,12,12,12,12,6,6,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[],["progressbariter",3]],[[["u64",15]],["progressbariter",3]],[[["progressbar",3]],["progressbariter",3]],null,null,null,null,null,null,[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["progressbar",3]],[[],["weakprogressbar",3]],[[],["progressstyle",3]],[[],["multiprogress",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["usize",15],["result",6]]],[[["seekfrom",4]],[["result",6],["u64",15]]],[[],[["usize",15],["result",6]]],[[],["result",6]],[[],[["usize",15],["result",6]]],[[],["result",6]],[[],["progressbariter",3]],[[["u64",15]],["progressbariter",3]],[[],["progressdrawtarget",3]],[[],["progressdrawtarget",3]],[[["u64",15]],["progressdrawtarget",3]],[[["u64",15]],["progressdrawtarget",3]],[[],["progressdrawtarget",3]],[[],["progressdrawtarget",3]],[[["term",3]],["progressdrawtarget",3]],[[],["progressdrawtarget",3]],[[],["bool",15]],[[["u64",15]],["progressbar",3]],[[],["progressbar",3]],[[["progressdrawtarget",3],["u64",15]],["progressbar",3]],[[["progressstyle",3]],["progressbar",3]],[[],["progressbar",3]],[[["progressstyle",3]]],[[["u64",15]]],[[]],[[["u64",15]]],[[]],[[["u64",15]]],[[],["bool",15]],[[],["bool",15]],[[["string",3],["into",8]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["str",15]]],[[["str",15]]],[[],["weakprogressbar",3]],[[]],[[]],[[]],[[]],[[]],[[["str",15]]],[[]],[[]],[[["str",15]]],[[["progressdrawtarget",3]]],[[["iterator",8]],[["iterator",8],["progressbariter",3]]],[[["read",8]],[["progressbarwrap",3],["read",8]]],[[["write",8]],[["progressbarwrap",3],["write",8]]],[[],["u64",15]],[[],["u64",15]],[[],[["option",4],["progressbar",3]]],[[],["multiprogress",3]],[[["progressdrawtarget",3]],["multiprogress",3]],[[["progressdrawtarget",3]]],[[["bool",15]]],[[["progressbar",3]],["progressbar",3]],[[["usize",15],["progressbar",3]],["progressbar",3]],[[],["result",6]],[[],["result",6]],[[],["progressstyle",3]],[[],["progressstyle",3]],[[["str",15]],["progressstyle",3]],[[],["progressstyle",3]],[[["str",15]],["progressstyle",3]],[[["str",15]],["progressstyle",3]],[[["u64",15]],["char",15]],[[["u64",15]],["str",15]],[[],["char",15]],[[],["str",15]]],"p":[[3,"BinaryBytes"],[3,"DecimalBytes"],[3,"FormattedDuration"],[3,"HumanBytes"],[3,"HumanDuration"],[8,"ProgressIterator"],[3,"ProgressBarIter"],[3,"ProgressDrawTarget"],[3,"ProgressBar"],[3,"WeakProgressBar"],[3,"MultiProgress"],[3,"ProgressBarWrap"],[3,"ProgressStyle"]]},\
"itertools":{"doc":"Extra iterator adaptors, functions and macros.","t":[0,6,6,6,6,3,3,3,3,3,3,3,6,6,6,3,3,3,6,3,3,3,6,3,3,3,3,3,6,3,3,3,3,3,3,3,3,12,3,3,3,3,3,3,3,3,3,0,8,11,11,11,11,4,13,13,5,5,5,4,13,13,13,4,13,13,13,8,10,5,5,5,5,5,4,13,13,13,13,5,4,13,13,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,4,13,13,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["structs","Dedup","DedupBy","DedupWithCount","DedupByWithCount","Interleave","InterleaveShortest","FilterMapOk","FilterOk","Product","PutBack","Batching","MapInto","MapOk","Merge","MergeBy","TakeWhileRef","WhileSome","Coalesce","TupleCombinations","Positions","Update","MapResults","Step","ConsTuples","ExactlyOneError","Format","FormatWith","Intersperse","IntersperseWith","MergeJoinBy","PadUsing","PeekingTakeWhile","ProcessResults","RepeatN","RepeatCall","Unfold","state","Iterate","TupleBuffer","TupleWindows","CircularTupleWindows","Tuples","WithPosition","ZipEq","ZipLongest","Zip","traits","HomogeneousTuple","with_value","into_parts","put_back","into_buffer","Either","Left","Right","concat","cons_tuples","diff_with","Diff","FirstMismatch","Shorter","Longer","MinMaxResult","NoElements","OneElement","MinMax","PeekingNext","peeking_next","process_results","repeat_n","repeat_call","unfold","iterate","Position","First","Middle","Last","Only","multizip","EitherOrBoth","Both","Left","Right","interleave","merge","put_back","zip_eq","merge_join_by","enumerate","rev","zip","chain","cloned","fold","all","any","max","min","Itertools","interleave","interleave_shortest","intersperse","intersperse_with","zip_longest","zip_eq","batching","tuple_windows","circular_tuple_windows","tuples","step","map_into","map_results","map_ok","filter_ok","filter_map_ok","merge","merge_by","merge_join_by","cartesian_product","coalesce","dedup","dedup_by","dedup_with_count","dedup_by_with_count","peeking_take_while","take_while_ref","while_some","tuple_combinations","pad_using","with_position","positions","update","next_tuple","collect_tuple","find_position","all_equal","dropping","dropping_back","foreach","concat","set_from","format","format_with","fold_results","fold_ok","fold_options","fold1","tree_fold1","fold_while","sum1","product1","partition_map","minmax","minmax_by_key","minmax_by","position_max","position_max_by_key","position_max_by","position_min","position_min_by_key","position_min_by","position_minmax","position_minmax_by_key","position_minmax_by","exactly_one","equal","assert_equal","partition","FoldWhile","Continue","Done","into_inner","is_done","iproduct","izip","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","cmp","partial_cmp","deref_mut","as_ref","as_ref","as_ref","next_back","into","as_mut","as_mut","as_mut","from","clone","deref","fmt","extend","fmt","hash","eq","ne","next","size_hint","fold","count","last","nth","collect","all","peeking_next","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","ne","eq","ne","eq","ne","eq","ne","hash","fmt","fmt","fmt","fmt","fmt","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next","size_hint","next","size_hint","next","size_hint","count","last","nth","all","fold","next","size_hint","fold","next","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","next","size_hint","fold","collect","next","size_hint","fold","collect","next","size_hint","next","size_hint","fold","collect","next","size_hint","fold","next","size_hint","fold","next","size_hint","fold","next","size_hint","fold","next","size_hint","fold","next","size_hint","fold","next","size_hint","fold","next","size_hint","fold","next","size_hint","fold","next","size_hint","fold","next","size_hint","next","size_hint","fold","next","size_hint","count","last","nth","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","next","size_hint","next","size_hint","next","next","next","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","from","from","from","from","from","from","from","from","from","from","from","from","into","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","has_left","has_right","is_left","is_right","is_both","left","right","both","as_ref","as_mut","flip","map_left","map_right","map_any","left_and_then","right_and_then","reduce","into_option","into_inner","is_left","is_right","left","right","as_ref","as_mut","flip","map_left","map_right","either","either_with","left_and_then","right_and_then","into_iter","left_or","left_or_default","left_or_else","right_or","right_or_default","right_or_else","unwrap_left","unwrap_right","expect_left","expect_right","factor_first","factor_second","into_inner","map"],"q":["itertools","itertools::structs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","itertools","itertools::traits","itertools::structs","","","","itertools","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","itertools::structs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","itertools","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","itertools::structs","","","","","","","","","","","itertools","itertools::structs","","","","","itertools","itertools::structs","","","","","","","","itertools","itertools::structs","","","itertools","itertools::structs","","","","","itertools","","","","","","","","","itertools::structsitertools","itertools::structs","","","","","","","","","","","","itertools","itertools::structs","","","","","","itertools","itertools::structs","","","","","","","","","itertools","itertools::structs","","","itertools","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The concrete iterator types.","An iterator adaptor that removes repeated duplicates.","An iterator adaptor that removes repeated duplicates, …","An iterator adaptor that removes repeated duplicates, …","An iterator adaptor that removes repeated duplicates, …","An iterator adaptor that alternates elements from two …","An iterator adaptor that alternates elements from the two …","An iterator adapter to filter and apply a transformation …","An iterator adapter to filter values within a nested …","An iterator adaptor that iterates over the cartesian …","An iterator adaptor that allows putting back a single …","A “meta iterator adaptor”. Its closure receives a …","An iterator adapter to apply <code>Into</code> conversion to each …","An iterator adapter to apply a transformation within a …","An iterator adaptor that merges the two base iterators in …","An iterator adaptor that merges the two base iterators in …","An iterator adaptor that borrows from a <code>Clone</code>-able …","An iterator adaptor that filters <code>Option<A></code> iterator …","An iterator adaptor that may join together adjacent …","An iterator to iterate through all combinations in a <code>Clone</code>…","An iterator adapter to get the positions of each element …","An iterator adapter to apply a mutating function to each …","See <code>MapOk</code>.","An iterator adaptor that steps a number elements in the …","An iterator that maps an iterator of tuples like …","Iterator returned for the error case of …","Format all iterator elements lazily, separated by <code>sep</code>.","Format all iterator elements lazily, separated by <code>sep</code>.","An iterator adaptor to insert a particular value between …","An iterator adaptor to insert a particular value created …","An iterator adaptor that merge-joins items from the two …","An iterator adaptor that pads a sequence to a minimum …","An iterator adaptor that takes items while a closure …","An iterator that produces only the <code>T</code> values as long as the…","An iterator that produces <em>n</em> repetitions of an element.","See <code>repeat_call</code> for more information.","See <code>unfold</code> for more information.","Internal state that will be passed to the closure on the …","An iterator that infinitely applies function to value and …","An iterator over a incomplete tuple.","An iterator over all contiguous windows that produces …","An iterator over all windows,wrapping back to the first …","An iterator that groups the items in tuples of a specific …","An iterator adaptor that wraps each element in an <code>Position</code>…","An iterator which iterates two other iterators …","An iterator which iterates two other iterators …","See <code>multizip</code> for more information.","Traits helpful for using certain <code>Itertools</code> methods in …","Implemented for homogeneous tuples of size up to 4.","put back value <code>value</code> (builder method)","Split the <code>PutBack</code> into its parts.","Put back a single value to the front of the iterator.","Return a buffer with the produced items that was not …","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","A value of type <code>L</code>.","A value of type <code>R</code>.","Combine all an iterator’s elements into one element by …","Create an iterator that maps for example iterators of …","Compares every element yielded by both <code>i</code> and <code>j</code> with the …","A type returned by the <code>diff_with</code> function.","The index of the first non-matching element along with …","The total number of elements that were in <code>J</code> along with …","The total number of elements that were in <code>I</code> along with …","<code>MinMaxResult</code> is an enum returned by <code>minmax</code>. See …","Empty iterator","Iterator with one element, so the minimum and maximum are …","More than one element in the iterator, the first element …","An iterator that allows peeking at an element before …","Pass a reference to the next iterator element to the …","“Lift” a function of the values of an iterator so …","Create an iterator that produces <code>n</code> repetitions of <code>element</code>.","An iterator source that produces elements indefinitely by …","Creates a new unfold source with the specified closure as …","Creates a new iterator that infinitely applies function …","A value yielded by <code>WithPosition</code>. Indicates the position …","This is the first element.","This is neither the first nor the last element.","This is the last element.","This is the only element.","An iterator that generalizes <em>.zip()</em> and allows running …","Value that either holds a single A or B, or both.","Both values are present.","Only the left value of type <code>A</code> is present.","Only the right value of type <code>B</code> is present.","Create an iterator that interleaves elements in <code>i</code> and <code>j</code>.","Create an iterator that merges elements in <code>i</code> and <code>j</code>.","Create an iterator where you can put back a single item","Iterate <code>i</code> and <code>j</code> in lock step.","Return an iterator adaptor that merge-joins items from …","Iterate <code>iterable</code> with a running index.","Iterate <code>iterable</code> in reverse.","Iterate <code>i</code> and <code>j</code> in lock step.","Create an iterator that first iterates <code>i</code> and then <code>j</code>.","Create an iterator that clones each element from &T to T","Perform a fold operation over the iterable.","Test whether the predicate holds for all elements in the …","Test whether the predicate holds for any elements in the …","Return the maximum value of the iterable.","Return the minimum value of the iterable.","An <code>Iterator</code> blanket implementation that provides extra …","Alternate elements from two iterators until both have run …","Alternate elements from two iterators until at least one …","An iterator adaptor to insert a particular value between …","An iterator adaptor to insert a particular value created …","Create an iterator which iterates over both this and the …","Create an iterator which iterates over both this and the …","A “meta iterator adaptor”. Its closure receives a …","Return an iterator over all contiguous windows producing …","Return an iterator over all windows, wrapping back to the …","Return an iterator that groups the items in tuples of a …","Return an iterator adaptor that steps <code>n</code> elements in the …","Convert each item of the iterator using the <code>Into</code> trait.","See <code>.map_ok()</code>.","Return an iterator adaptor that applies the provided …","Return an iterator adaptor that filters every <code>Result::Ok</code> …","Return an iterator adaptor that filters and transforms …","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merges the two base …","Create an iterator that merges items from both this and …","Return an iterator adaptor that iterates over the …","Return an iterator adaptor that uses the passed-in …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Return an iterator adaptor that borrows from this …","Return an iterator adaptor that borrows from a <code>Clone</code>-able …","Return an iterator adaptor that filters <code>Option<A></code> …","Return an iterator adaptor that iterates over the …","Return an iterator adaptor that pads the sequence to a …","Return an iterator adaptor that wraps each element in a …","Return an iterator adaptor that yields the indices of all …","Return an iterator adaptor that applies a mutating …","Advances the iterator and returns the next items grouped …","Collects all items from the iterator into a tuple of a …","Find the position and value of the first element …","Check whether all elements compare equal.","Consume the first <code>n</code> elements from the iterator eagerly, …","Consume the last <code>n</code> elements from the iterator eagerly, …","Run the closure <code>f</code> eagerly on each element of the iterator.","Combine all an iterator’s elements into one element by …","Assign to each reference in <code>self</code> from the <code>from</code> iterator, …","Format all iterator elements, separated by <code>sep</code>.","Format all iterator elements, separated by <code>sep</code>.","See <code>.fold_ok()</code>.","Fold <code>Result</code> values from an iterator.","Fold <code>Option</code> values from an iterator.","Accumulator of the elements in the iterator.","Accumulate the elements in the iterator in a tree-like …","An iterator method that applies a function, producing a …","Iterate over the entire iterator and add all the elements.","Iterate over the entire iterator and multiply all the …","Collect all iterator elements into one of two partitions. …","Return the minimum and maximum elements in the iterator.","Return the minimum and maximum element of an iterator, as …","Return the minimum and maximum element of an iterator, as …","Return the position of the maximum element in the …","Return the position of the maximum element in the …","Return the position of the maximum element in the …","Return the position of the minimum element in the …","Return the position of the minimum element in the …","Return the position of the minimum element in the …","Return the positions of the minimum and maximum elements …","Return the postions of the minimum and maximum elements …","Return the postions of the minimum and maximum elements …","If the iterator yields exactly one element, that element …","Return <code>true</code> if both iterables produce equal sequences …","Assert that two iterables produce equal sequences, with …","Partition a sequence using predicate <code>pred</code> so that elements…","An enum used for controlling the execution of …","Continue folding with this value","Fold is complete and will return this value","Return the value in the continue or done.","Return true if <code>self</code> is <code>Done</code>, false if it is <code>Continue</code>.","Create an iterator over the “cartesian product” of …","Create an iterator running multiple iterators in lockstepf <code>Left</code>, or <code>Both</code>, return true, otherwise, return false.","If <code>Right</code>, or <code>Both</code>, return true, otherwise, return false.","If Left, return true otherwise, return false. Exclusive …","If Right, return true otherwise, return false. Exclusive …","If Right, return true otherwise, return false. Equivalent …","If <code>Left</code>, or <code>Both</code>, return <code>Some</code> with the left value, …","If <code>Right</code>, or <code>Both</code>, return <code>Some</code> with the right value, …","If Both, return <code>Some</code> tuple containing left and right.","Converts from <code>&EitherOrBoth<A, B></code> to <code>EitherOrBoth<&A, &B></code>.","Converts from <code>&mut EitherOrBoth<A, B></code> to …","Convert <code>EitherOrBoth<A, B></code> to <code>EitherOrBoth<B, A></code>.","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Apply the functions <code>f</code> and <code>g</code> on the value <code>a</code> and <code>b</code> …","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Return either value of left, right, or the product of <code>f</code> …","<code>into_option</code> creates an <code>Option</code> of type <code>(T, T)</code>. The …","Return the inner value.","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","Convert the left side of <code>Either<L, R></code> to an <code>Option<L></code>.","Convert the right side of <code>Either<L, R></code> to an <code>Option<R></code>.","Convert <code>&Either<L, R></code> to <code>Either<&L, &R></code>.","Convert <code>&mut Either<L, R></code> to <code>Either<&mut L, &mut R></code>.","Convert <code>Either<L, R></code> to <code>Either<R, L></code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Apply one of two functions depending on contents, …","Like <code>either</code>, but provide some context to whichever of the …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Convert the inner value to an iterator.","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","Returns the left value","Returns the right value","Returns the left value","Returns the right value","Factor out a homogeneous type from an either of pairs.","Factor out a homogeneous type from an either of pairs.","Extract the value of an either over two equivalent types.","Map <code>f</code> over the contained value and return the result in …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,2,2,3,0,4,4,0,0,0,0,5,5,5,0,6,6,6,0,7,0,0,0,0,0,0,8,8,8,8,0,0,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,11,11,11,11,0,0,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,2,2,2,2,2,2,2,2,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,1,1,1,1,1,1,1,1,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,3,3,3,3,3,3,3,3,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,9,9,9,9,9,9,9,5,5,5,5,5,5,5,6,6,6,6,6,6,6,8,8,8,8,8,8,8,4,4,4,4,4,4,4,4,11,11,11,11,11,11,11,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,12,13,2,16,17,24,18,19,20,21,9,25,26,27,29,30,6,33,34,35,1,36,37,38,39,8,41,42,43,11,26,28,27,27,27,9,9,6,6,8,8,11,11,9,27,27,27,27,27,22,23,25,25,25,25,25,25,25,25,25,25,31,34,42,43,43,43,43,43,43,43,43,43,43,43,43,12,12,13,13,2,2,2,2,2,2,2,16,16,16,17,24,24,18,18,19,19,20,20,21,15,15,15,15,14,14,14,14,22,22,23,23,23,23,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,29,29,29,30,30,30,30,30,31,31,32,32,33,33,34,34,35,35,1,36,36,37,37,3,38,39,40,40,41,41,42,42,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,9,12,13,2,16,17,24,18,20,21,15,22,23,9,25,26,28,27,29,30,6,31,34,35,1,36,37,3,38,40,8,41,42,43,11,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,6,8,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["tuplebuffer",3]],null,null,null,[[]],[[],["constuples",3]],[[],[["option",4],["diff",4]]],null,null,null,null,null,null,null,null,null,[[],["option",4]],[[],["result",4]],[[["usize",15]],["repeatn",3]],[[],["repeatcall",3]],[[],["unfold",3]],[[],["iterate",3]],null,null,null,null,null,[[],["zip",3]],null,null,null,null,[[],["interleave",3]],[[],["merge",6]],[[],["putback",3]],[[],["zipeq",3]],[[],["mergejoinby",3]],[[],["enumerate",3]],[[],["rev",3]],[[],["zip",3]],[[],["chain",3]],[[],["cloned",3]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],null,[[],["interleave",3]],[[],["interleaveshortest",3]],[[],["intersperse",6]],[[],["interspersewith",3]],[[],["ziplongest",3]],[[],["zipeq",3]],[[],["batching",3]],[[],["tuplewindows",3]],[[],["circulartuplewindows",3]],[[],["tuples",3]],[[["usize",15]],["step",3]],[[],["mapinto",6]],[[],["mapok",6]],[[],["mapok",6]],[[],["filterok",3]],[[],["filtermapok",3]],[[],["merge",6]],[[],["mergeby",3]],[[],["mergejoinby",3]],[[],["product",3]],[[],["coalesce",6]],[[],["dedup",6]],[[],["dedupby",6]],[[],["dedupwithcount",6]],[[],["dedupbywithcount",6]],[[],["peekingtakewhile",3]],[[],["takewhileref",3]],[[],["whilesome",3]],[[],["tuplecombinations",3]],[[["usize",15]],["padusing",3]],[[],["withposition",3]],[[],["positions",3]],[[],["update",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["usize",15]],[[["str",15]],["format",3]],[[["str",15]],["formatwith",3]],[[],["result",4]],[[],["result",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["foldwhile",4]],[[],["option",4]],[[],["option",4]],[[]],[[],["minmaxresult",4]],[[],["minmaxresult",4]],[[],["minmaxresult",4]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["minmaxresult",4]]],[[],[["usize",15],["minmaxresult",4]]],[[],[["usize",15],["minmaxresult",4]]],[[],[["exactlyoneerror",3],["result",4]]],[[],["bool",15]],[[]],[[],["usize",15]],null,null,null,[[]],[[],["bool",15]],null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["either",4]],["ordering",4]],[[["either",4]],[["option",4],["ordering",4]]],[[]],[[]],[[],["str",15]],[[]],[[],["option",4]],[[],["result",4]],[[]],[[],["str",15]],[[]],[[["result",4]],["either",4]],[[],["either",4]],[[]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[["either",4]],["bool",15]],[[["either",4]],["bool",15]],[[],["option",4]],[[]],[[]],[[],["usize",15]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[],["bool",15]],[[],["option",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["fmtresult",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["fmtresult",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["eitherorboth",4]],["bool",15]],[[["eitherorboth",4]],["bool",15]],[[["minmaxresult",4]],["bool",15]],[[["minmaxresult",4]],["bool",15]],[[["position",4]],["bool",15]],[[["position",4]],["bool",15]],[[["foldwhile",4]],["bool",15]],[[["foldwhile",4]],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["usize",15]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[],["usize",15]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["either",4]]],[[],["interleave",3]],[[],["interleaveshortest",3]],[[],["putback",3]],[[],["product",3]],[[],["batching",3]],[[],["step",3]],[[]],[[],["whilesome",3]],[[],["tuplecombinations",3]],[[],["filterok",3]],[[],["positions",3]],[[],["update",3]],[[],["eitherorboth",4]],[[]],[[],["exactlyoneerror",3]],[[],["formatwith",3]],[[],["format",3]],[[],["interspersewith",3]],[[]],[[],["minmaxresult",4]],[[],["padusing",3]],[[],["repeatn",3]],[[],["repeatcall",3]],[[],["unfold",3]],[[],["iterate",3]],[[],["tuplebuffer",3]],[[],["tuples",3]],[[],["tuplewindows",3]],[[]],[[],["position",4]],[[],["zipeq",3]],[[],["ziplongest",3]],[[],["zip",3]],[[],["foldwhile",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["eitherorboth",4]],[[],["eitherorboth",4]],[[],["eitherorboth",4]],[[],["eitherorboth",4]],[[],["eitherorboth",4]],[[],["eitherorboth",4]],[[],["eitherorboth",4]],[[],["eitherorboth",4]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["either",4]],[[],["either",4]],[[],["either",4]],[[],["either",4]],[[],["either",4]],[[]],[[]],[[],["either",4]],[[],["either",4]],[[],["either",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]]],[[["str",15]]],[[]],[[]],[[]],[[],["either",4]]],"p":[[3,"Unfold"],[3,"PutBack"],[3,"Tuples"],[4,"Either"],[4,"Diff"],[4,"MinMaxResult"],[8,"PeekingNext"],[4,"Position"],[4,"EitherOrBoth"],[8,"Itertools"],[4,"FoldWhile"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"FilterMapOk"],[3,"FilterOk"],[3,"Product"],[3,"Batching"],[3,"MergeBy"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"Positions"],[3,"Update"],[3,"Step"],[3,"ConsTuples"],[3,"ExactlyOneError"],[3,"Format"],[3,"FormatWith"],[3,"IntersperseWith"],[3,"MergeJoinBy"],[3,"PadUsing"],[3,"PeekingTakeWhile"],[3,"ProcessResults"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"TupleBuffer"],[3,"TupleWindows"],[3,"CircularTupleWindows"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"]]},\
"itoa":{"doc":"github crates-io docs-rs","t":[5,3,11,11,8,11,11,11,11,11,11,11,11,11],"n":["fmt","Buffer","new","format","Integer","borrow","borrow_mut","try_from","from","into","try_into","type_id","clone","default"],"q":["itoa","","","","","","","","","","","","",""],"d":["Write integer to an <code>fmt::Write</code>.","A safe API for formatting integers to text.","This is a cheap operation; you don’t need to worry …","Print an integer into this buffer and return a reference …","An integer that can be formatted by <code>itoa::write</code> and …","","","","","","","","",""],"i":[0,0,1,1,0,1,1,1,1,1,1,1,1,1],"f":[[[["write",8],["integer",8]],["result",6]],null,[[],["buffer",3]],[[["integer",8]],["str",15]],null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["buffer",3]]],"p":[[3,"Buffer"]]},\
"json5":{"doc":"JSON5 is a superset of JSON with an expanded syntax …","t":[5,4,13,12,12,3,12,12,6,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["from_str","Error","Message","msg","location","Location","line","column","Result","to_string","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","from","clone","clone","eq","ne","eq","ne","fmt","fmt","fmt","custom","custom"],"q":["json5","","","json5::Error","","json5","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Deserialize an instance of type <code>T</code> from a string of JSON5 …","A bare bones error type which currently just collapses …","Just shove everything in a single variant for now.","The error message.","The location of the error, if applicable.","One-based line and column at which the error was detected.","The one-based line number of the error.","The one-based column number of the error.","Alias for a <code>Result</code> with error type <code>json5::Error</code>","Attempts to serialize the input as a JSON5 string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,2,2,0,3,3,0,0,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,3,1,3,1,3,3,1,1,3,1,1,1,1],"f":[[[["str",15]],["result",6]],null,null,null,null,null,null,null,null,[[],[["result",6],["string",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["span",3]]],[[["error",3],["rule",4]]],[[],["location",3]],[[],["error",4]],[[["location",3]],["bool",15]],[[["location",3]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["display",8]]],[[["display",8]]]],"p":[[4,"Error"],[13,"Message"],[3,"Location"]]},\
"lazy_static":{"doc":"A macro for declaring lazily evaluated statics.","t":[8,5,14],"n":["LazyStatic","initialize","lazy_static"],"q":["lazy_static","",""],"d":["Support trait for enabling a few common operation on lazy …","Takes a shared reference to a lazy static and initializes …",""],"i":[0,0,0],"f":[null,[[]],null],"p":[]},\
"libc":{"doc":"libc - Raw FFI bindings to platforms’ system libraries","tn":["isalnum","isalpha","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","isblank","tolower","toupper","qsort","bsearch","fopen","freopen","fmemopen","open_memstream","fflush","fclose","remove","rename","tmpfile","setvbuf","setbuf","getchar","putchar","fgetc","fgets","fputc","fputs","puts","ungetc","fread","fwrite","fseek","ftell","rewind","fgetpos","fsetpos","feof","ferror","clearerr","perror","atoi","strtod","strtol","strtoul","calloc","malloc","realloc","free","abort","exit","_exit","atexit","system","getenv","strcpy","strncpy","strcat","strncat","strcmp","strncmp","strcoll","strchr","strrchr","strspn","strcspn","strdup","strndup","strpbrk","strstr","strcasecmp","strncasecmp","strlen","strnlen","strerror","strtok","strxfrm","strsignal","wcslen","wcstombs","memchr","wmemchr","memcmp","memcpy","memmove","memset","getpwnam","getpwuid","fprintf","printf","snprintf","sprintf","fscanf","scanf","sscanf","getchar_unlocked","putchar_unlocked","socket","connect","listen","accept","getpeername","getsockname","setsockopt","socketpair","sendto","shutdown","chmod","fchmod","fstat","mkdir","stat","pclose","fdopen","fileno","open","creat","fcntl","opendir","readdir","closedir","rewinddir","fchmodat","fchown","fchownat","fstatat","linkat","renameat","symlinkat","unlinkat","access","alarm","chdir","fchdir","chown","lchown","close","dup","dup2","execl","execle","execlp","execv","execve","execvp","fork","fpathconf","getcwd","getegid","geteuid","getgid","getgroups","getlogin","getopt","getpgid","getpgrp","getpid","getppid","getuid","isatty","link","lseek","pathconf","pipe","posix_memalign","read","rmdir","seteuid","setegid","setgid","setpgid","setsid","setuid","sleep","nanosleep","tcgetpgrp","tcsetpgrp","ttyname","ttyname_r","unlink","wait","waitpid","write","pread","pwrite","umask","utime","kill","killpg","mlock","munlock","mlockall","munlockall","mmap","munmap","if_nametoindex","if_indextoname","lstat","fsync","setenv","unsetenv","symlink","ftruncate","signal","getrusage","realpath","flock","times","pthread_self","pthread_join","pthread_exit","pthread_attr_init","pthread_attr_destroy","pthread_attr_setstacksize","pthread_attr_setdetachstate","pthread_detach","sched_yield","pthread_key_create","pthread_key_delete","pthread_getspecific","pthread_setspecific","pthread_mutex_init","pthread_mutex_destroy","pthread_mutex_lock","pthread_mutex_trylock","pthread_mutex_unlock","pthread_mutexattr_init","pthread_mutexattr_destroy","pthread_mutexattr_settype","pthread_cond_init","pthread_cond_wait","pthread_cond_timedwait","pthread_cond_signal","pthread_cond_broadcast","pthread_cond_destroy","pthread_condattr_init","pthread_condattr_destroy","pthread_rwlock_init","pthread_rwlock_destroy","pthread_rwlock_rdlock","pthread_rwlock_tryrdlock","pthread_rwlock_wrlock","pthread_rwlock_trywrlock","pthread_rwlock_unlock","pthread_rwlockattr_init","pthread_rwlockattr_destroy","getsockopt","raise","sigaction","utimes","dlopen","dlerror","dlsym","dlclose","dladdr","getaddrinfo","freeaddrinfo","gai_strerror","res_init","gmtime_r","localtime_r","mktime","time","gmtime","localtime","difftime","timegm","mknod","gethostname","endservent","getservbyname","getservbyport","getservent","setservent","getprotobyname","getprotobynumber","chroot","usleep","send","recv","putenv","poll","select","setlocale","localeconv","sem_wait","sem_trywait","sem_post","statvfs","fstatvfs","readlink","sigemptyset","sigaddset","sigfillset","sigdelset","sigismember","sigprocmask","sigpending","sysconf","mkfifo","pselect","fseeko","ftello","tcdrain","cfgetispeed","cfgetospeed","cfsetispeed","cfsetospeed","tcgetattr","tcsetattr","tcflow","tcflush","tcgetsid","tcsendbreak","mkstemp","mkdtemp","tmpnam","openlog","closelog","setlogmask","syslog","nice","grantpt","posix_openpt","ptsname","unlockpt","strcasestr","getline","lockf","open_wmemstream","getsid","truncate","pause","readlinkat","mkdirat","openat","fdopendir","readdir_r","cfmakeraw","cfsetspeed","getrlimit","setrlimit","strerror_r","abs","atof","labs","rand","srand","getifaddrs","freeifaddrs","setgroups","ioctl","kqueue","unmount","syscall","getpwent","setpwent","endpwent","endgrent","getgrent","getprogname","setprogname","getloadavg","if_nameindex","if_freenameindex","getpeereid","glob","globfree","posix_madvise","shm_unlink","seekdir","telldir","madvise","msync","recvfrom","mkstemps","futimes","nl_langinfo","bind","writev","readv","sendmsg","recvmsg","sync","getgrgid_r","sigaltstack","sem_close","getdtablesize","getgrnam_r","pthread_sigmask","sem_open","getgrnam","pthread_cancel","pthread_kill","sem_unlink","getpwnam_r","getpwuid_r","sigwait","pthread_atfork","getgrgid","popen","faccessat","pthread_create","acct","wait4","getitimer","setitimer","regcomp","regexec","regerror","regfree","setgrent","aio_read","aio_write","aio_fsync","aio_error","aio_return","aio_suspend","aio_cancel","chflags","fchflags","clock_getres","clock_gettime","lio_listio","dirfd","lutimes","gettimeofday","getutxent","getutxid","getutxline","pututxline","setutxent","endutxent","utmpxname","getnameinfo","mincore","sysctlnametomib","mprotect","semget","semctl","semop","shm_open","ftok","shmat","shmdt","shmctl","shmget","sysctl","sysctlbyname","mach_absolute_time","mach_timebase_info","pthread_setname_np","pthread_getname_np","pthread_from_mach_thread_np","pthread_get_stackaddr_np","pthread_get_stacksize_np","pthread_condattr_setpshared","pthread_condattr_getpshared","pthread_mutexattr_setpshared","pthread_mutexattr_getpshared","pthread_rwlockattr_getpshared","pthread_rwlockattr_setpshared","__error","backtrace","statfs","fstatfs","kevent","kevent64","mount","ptrace","quotactl","sethostname","sendfile","futimens","utimensat","openpty","forkpty","login_tty","duplocale","freelocale","localeconv_l","newlocale","uselocale","querylocale","getpriority","setpriority","getdomainname","setdomainname","preadv","pwritev","getxattr","fgetxattr","setxattr","fsetxattr","listxattr","flistxattr","removexattr","renamex_np","renameatx_np","fremovexattr","getgrouplist","initgroups","waitid","brk","sbrk","settimeofday","_dyld_image_count","_dyld_get_image_header","_dyld_get_image_vmaddr_slide","_dyld_get_image_name","posix_spawn","posix_spawnp","posix_spawnattr_init","posix_spawnattr_destroy","posix_spawnattr_getsigdefault","posix_spawnattr_setsigdefault","posix_spawnattr_getsigmask","posix_spawnattr_setsigmask","posix_spawnattr_getflags","posix_spawnattr_setflags","posix_spawnattr_getpgroup","posix_spawnattr_setpgroup","posix_spawn_file_actions_init","posix_spawn_file_actions_destroy","posix_spawn_file_actions_addopen","posix_spawn_file_actions_addclose","posix_spawn_file_actions_adddup2","uname","connectx","disconnectx","ntp_adjtime","ntp_gettime","getmntinfo","getfsstat","iconv_open","iconv","iconv_close","exchangedata","int8_t","int16_t","int32_t","int64_t","uint8_t","uint16_t","uint32_t","uint64_t","c_schar","c_uchar","c_short","c_ushort","c_int","c_uint","c_float","c_double","c_longlong","c_ulonglong","intmax_t","uintmax_t","size_t","ptrdiff_t","intptr_t","uintptr_t","ssize_t","pid_t","uid_t","gid_t","in_addr_t","in_port_t","sighandler_t","cc_t","DIR","locale_t","group","gr_name","gr_passwd","gr_gid","gr_mem","utimbuf","actime","modtime","timeval","tv_sec","tv_usec","timespec","tv_sec","tv_nsec","rlimit","rlim_cur","rlim_max","rusage","ru_utime","ru_stime","ru_maxrss","ru_ixrss","ru_idrss","ru_isrss","ru_minflt","ru_majflt","ru_nswap","ru_inblock","ru_oublock","ru_msgsnd","ru_msgrcv","ru_nsignals","ru_nvcsw","ru_nivcsw","ipv6_mreq","ipv6mr_multiaddr","ipv6mr_interface","hostent","h_name","h_aliases","h_addrtype","h_length","h_addr_list","iovec","iov_base","iov_len","pollfd","fd","events","revents","winsize","ws_row","ws_col","ws_xpixel","ws_ypixel","linger","l_onoff","l_linger","sigval","sival_ptr","itimerval","it_interval","it_value","tms","tms_utime","tms_stime","tms_cutime","tms_cstime","servent","s_name","s_aliases","s_port","s_proto","protoent","p_name","p_aliases","p_proto","INT_MIN","INT_MAX","SIG_DFL","SIG_IGN","SIG_ERR","DT_UNKNOWN","DT_FIFO","DT_CHR","DT_DIR","DT_BLK","DT_REG","DT_LNK","DT_SOCK","FD_CLOEXEC","USRQUOTA","GRPQUOTA","SIGIOT","S_ISUID","S_ISGID","S_ISVTX","IF_NAMESIZE","IFNAMSIZ","LOG_EMERG","LOG_ALERT","LOG_CRIT","LOG_ERR","LOG_WARNING","LOG_NOTICE","LOG_INFO","LOG_DEBUG","LOG_KERN","LOG_USER","LOG_MAIL","LOG_DAEMON","LOG_AUTH","LOG_SYSLOG","LOG_LPR","LOG_NEWS","LOG_UUCP","LOG_LOCAL0","LOG_LOCAL1","LOG_LOCAL2","LOG_LOCAL3","LOG_LOCAL4","LOG_LOCAL5","LOG_LOCAL6","LOG_LOCAL7","LOG_PID","LOG_CONS","LOG_ODELAY","LOG_NDELAY","LOG_NOWAIT","LOG_PRIMASK","LOG_FACMASK","PRIO_MIN","PRIO_MAX","IPPROTO_ICMP","IPPROTO_ICMPV6","IPPROTO_TCP","IPPROTO_UDP","IPPROTO_IP","IPPROTO_IPV6","INADDR_LOOPBACK","INADDR_ANY","INADDR_BROADCAST","INADDR_NONE","ARPOP_REQUEST","ARPOP_REPLY","ATF_COM","ATF_PERM","ATF_PUBL","ATF_USETRAILERS","FILE","fpos_t","off_t","useconds_t","blkcnt_t","socklen_t","sa_family_t","pthread_t","nfds_t","regoff_t","sockaddr","sa_len","sa_family","sa_data","sockaddr_in6","sin6_len","sin6_family","sin6_port","sin6_flowinfo","sin6_addr","sin6_scope_id","passwd","pw_name","pw_passwd","pw_uid","pw_gid","pw_change","pw_class","pw_gecos","pw_dir","pw_shell","pw_expire","ifaddrs","ifa_next","ifa_name","ifa_flags","ifa_addr","ifa_netmask","ifa_dstaddr","ifa_data","fd_set","tm","tm_sec","tm_min","tm_hour","tm_mday","tm_mon","tm_year","tm_wday","tm_yday","tm_isdst","tm_gmtoff","tm_zone","msghdr","msg_name","msg_namelen","msg_iov","msg_iovlen","msg_control","msg_controllen","msg_flags","cmsghdr","cmsg_len","cmsg_level","cmsg_type","fsid_t","if_nameindex","if_index","if_name","regex_t","regmatch_t","rm_so","rm_eo","sockaddr_un","sun_len","sun_family","sun_path","utsname","sysname","nodename","release","version","machine","LC_ALL","LC_COLLATE","LC_CTYPE","LC_MONETARY","LC_NUMERIC","LC_TIME","LC_MESSAGES","FIOCLEX","FIONCLEX","FIONREAD","FIONBIO","FIOASYNC","FIOSETOWN","FIOGETOWN","PATH_MAX","IOV_MAX","SA_ONSTACK","SA_SIGINFO","SA_RESTART","SA_RESETHAND","SA_NOCLDSTOP","SA_NODEFER","SA_NOCLDWAIT","SS_ONSTACK","SS_DISABLE","SIGCHLD","SIGBUS","SIGUSR1","SIGUSR2","SIGCONT","SIGSTOP","SIGTSTP","SIGURG","SIGIO","SIGSYS","SIGTTIN","SIGTTOU","SIGXCPU","SIGXFSZ","SIGVTALRM","SIGPROF","SIGWINCH","SIGINFO","SIG_SETMASK","SIG_BLOCK","SIG_UNBLOCK","IP_TOS","IP_MULTICAST_IF","IP_MULTICAST_TTL","IP_MULTICAST_LOOP","IPV6_UNICAST_HOPS","IPV6_MULTICAST_IF","IPV6_MULTICAST_HOPS","IPV6_MULTICAST_LOOP","IPV6_V6ONLY","IPTOS_ECN_NOTECT","IPTOS_ECN_MASK","IPTOS_ECN_ECT1","IPTOS_ECN_ECT0","IPTOS_ECN_CE","ST_RDONLY","SCM_RIGHTS","NCCS","O_ACCMODE","O_RDONLY","O_WRONLY","O_RDWR","O_APPEND","O_CREAT","O_TRUNC","O_EXCL","O_ASYNC","O_SYNC","O_NONBLOCK","O_NOFOLLOW","O_SHLOCK","O_EXLOCK","O_FSYNC","O_NDELAY","F_GETOWN","F_SETOWN","F_RDLCK","F_UNLCK","F_WRLCK","MNT_FORCE","Q_SYNC","Q_QUOTAON","Q_QUOTAOFF","TCIOFF","TCION","TCOOFF","TCOON","TCIFLUSH","TCOFLUSH","TCIOFLUSH","TCSANOW","TCSADRAIN","TCSAFLUSH","VEOF","VEOL","VEOL2","VERASE","VWERASE","VKILL","VREPRINT","VINTR","VQUIT","VSUSP","VDSUSP","VSTART","VSTOP","VLNEXT","VDISCARD","VMIN","VTIME","VSTATUS","_POSIX_VDISABLE","IGNBRK","BRKINT","IGNPAR","PARMRK","INPCK","ISTRIP","INLCR","IGNCR","ICRNL","IXON","IXOFF","IXANY","IMAXBEL","OPOST","ONLCR","OXTABS","ONOEOT","CIGNORE","CSIZE","CS5","CS6","CS7","CS8","CSTOPB","CREAD","PARENB","PARODD","HUPCL","CLOCAL","ECHOKE","ECHOE","ECHOK","ECHO","ECHONL","ECHOPRT","ECHOCTL","ISIG","ICANON","ALTWERASE","IEXTEN","EXTPROC","TOSTOP","FLUSHO","NOKERNINFO","PENDIN","NOFLSH","MDMBUF","WNOHANG","WUNTRACED","RTLD_LAZY","RTLD_NOW","RTLD_NEXT","RTLD_DEFAULT","RTLD_SELF","LOG_CRON","LOG_AUTHPRIV","LOG_FTP","LOG_PERROR","TCP_NODELAY","TCP_MAXSEG","PIPE_BUF","CLD_EXITED","CLD_KILLED","CLD_DUMPED","CLD_TRAPPED","CLD_STOPPED","CLD_CONTINUED","POLLIN","POLLPRI","POLLOUT","POLLERR","POLLHUP","POLLNVAL","POLLRDNORM","POLLWRNORM","POLLRDBAND","POLLWRBAND","BIOCGBLEN","BIOCSBLEN","BIOCFLUSH","BIOCPROMISC","BIOCGDLT","BIOCGETIF","BIOCSETIF","BIOCGSTATS","BIOCIMMEDIATE","BIOCVERSION","BIOCGHDRCMPLT","BIOCSHDRCMPLT","SIOCGIFADDR","REG_BASIC","REG_EXTENDED","REG_ICASE","REG_NOSUB","REG_NEWLINE","REG_NOSPEC","REG_PEND","REG_DUMP","REG_NOMATCH","REG_BADPAT","REG_ECOLLATE","REG_ECTYPE","REG_EESCAPE","REG_ESUBREG","REG_EBRACK","REG_EPAREN","REG_EBRACE","REG_BADBR","REG_ERANGE","REG_ESPACE","REG_BADRPT","REG_EMPTY","REG_ASSERT","REG_INVARG","REG_ATOI","REG_ITOA","REG_NOTBOL","REG_NOTEOL","REG_STARTEND","REG_TRACE","REG_LARGE","REG_BACKR","TIOCCBRK","TIOCSBRK","PRIO_PROCESS","PRIO_PGRP","PRIO_USER","ITIMER_REAL","ITIMER_VIRTUAL","ITIMER_PROF","CMSG_FIRSTHDR","FD_CLR","FD_ISSET","FD_SET","FD_ZERO","WTERMSIG","WIFEXITED","WEXITSTATUS","WCOREDUMP","QCMD","c_char","wchar_t","clock_t","time_t","suseconds_t","dev_t","ino_t","mode_t","nlink_t","blksize_t","rlim_t","pthread_key_t","sigset_t","clockid_t","fsblkcnt_t","fsfilcnt_t","speed_t","tcflag_t","nl_item","id_t","sem_t","idtype_t","integer_t","cpu_type_t","cpu_subtype_t","natural_t","mach_msg_type_number_t","posix_spawnattr_t","posix_spawn_file_actions_t","key_t","shmatt_t","sae_associd_t","sae_connid_t","mach_port_t","processor_flavor_t","iconv_t","processor_cpu_load_info_t","processor_cpu_load_info_data_t","processor_basic_info_t","processor_basic_info_data_t","processor_set_basic_info_data_t","processor_set_basic_info_t","processor_set_load_info_data_t","processor_set_load_info_t","processor_info_t","processor_info_array_t","vm_prot_t","vm_size_t","mach_timebase_info_data_t","timezone","ip_mreq","imr_multiaddr","imr_interface","aiocb","aio_fildes","aio_offset","aio_buf","aio_nbytes","aio_reqprio","aio_sigevent","aio_lio_opcode","glob_t","gl_pathc","gl_offs","gl_pathv","addrinfo","ai_flags","ai_family","ai_socktype","ai_protocol","ai_addrlen","ai_canonname","ai_addr","ai_next","mach_timebase_info","numer","denom","stat","st_dev","st_mode","st_nlink","st_ino","st_uid","st_gid","st_rdev","st_atime","st_atime_nsec","st_mtime","st_mtime_nsec","st_ctime","st_ctime_nsec","st_birthtime","st_birthtime_nsec","st_size","st_blocks","st_blksize","st_flags","st_gen","st_lspare","st_qspare","pthread_mutexattr_t","pthread_condattr_t","pthread_rwlockattr_t","siginfo_t","si_signo","si_errno","si_code","si_pid","si_uid","si_status","si_addr","sigaction","sa_sigaction","sa_mask","sa_flags","stack_t","ss_sp","ss_size","ss_flags","fstore_t","fst_flags","fst_posmode","fst_offset","fst_length","fst_bytesalloc","radvisory","ra_offset","ra_count","statvfs","f_bsize","f_frsize","f_blocks","f_bfree","f_bavail","f_files","f_ffree","f_favail","f_fsid","f_flag","f_namemax","Dl_info","dli_fname","dli_fbase","dli_sname","dli_saddr","sockaddr_in","sin_len","sin_family","sin_port","sin_addr","sin_zero","kevent64_s","ident","filter","flags","fflags","data","udata","ext","dqblk","dqb_bhardlimit","dqb_bsoftlimit","dqb_curbytes","dqb_ihardlimit","dqb_isoftlimit","dqb_curinodes","dqb_btime","dqb_itime","dqb_id","dqb_spare","if_msghdr","ifm_msglen","ifm_version","ifm_type","ifm_addrs","ifm_flags","ifm_index","ifm_data","termios","c_iflag","c_oflag","c_cflag","c_lflag","c_cc","c_ispeed","c_ospeed","flock","l_start","l_len","l_pid","l_type","l_whence","sf_hdtr","headers","hdr_cnt","trailers","trl_cnt","lconv","decimal_point","thousands_sep","grouping","int_curr_symbol","currency_symbol","mon_decimal_point","mon_thousands_sep","mon_grouping","positive_sign","negative_sign","int_frac_digits","frac_digits","p_cs_precedes","p_sep_by_space","n_cs_precedes","n_sep_by_space","p_sign_posn","n_sign_posn","int_p_cs_precedes","int_n_cs_precedes","int_p_sep_by_space","int_n_sep_by_space","int_p_sign_posn","int_n_sign_posn","proc_taskinfo","pti_virtual_size","pti_resident_size","pti_total_user","pti_total_system","pti_threads_user","pti_threads_system","pti_policy","pti_faults","pti_pageins","pti_cow_faults","pti_messages_sent","pti_messages_received","pti_syscalls_mach","pti_syscalls_unix","pti_csw","pti_threadnum","pti_numrunning","pti_priority","proc_bsdinfo","pbi_flags","pbi_status","pbi_xstatus","pbi_pid","pbi_ppid","pbi_uid","pbi_gid","pbi_ruid","pbi_rgid","pbi_svuid","pbi_svgid","rfu_1","pbi_comm","pbi_name","pbi_nfiles","pbi_pgid","pbi_pjobc","e_tdev","e_tpgid","pbi_nice","pbi_start_tvsec","pbi_start_tvusec","proc_taskallinfo","pbsd","ptinfo","xsw_usage","xsu_total","xsu_avail","xsu_used","xsu_pagesize","xsu_encrypted","xucred","cr_version","cr_uid","cr_ngroups","cr_groups","mach_header","magic","cputype","cpusubtype","filetype","ncmds","sizeofcmds","flags","mach_header_64","magic","cputype","cpusubtype","filetype","ncmds","sizeofcmds","flags","reserved","segment_command","cmd","cmdsize","segname","vmaddr","vmsize","fileoff","filesize","maxprot","initprot","nsects","flags","segment_command_64","cmd","cmdsize","segname","vmaddr","vmsize","fileoff","filesize","maxprot","initprot","nsects","flags","load_command","cmd","cmdsize","sockaddr_dl","sdl_len","sdl_family","sdl_index","sdl_type","sdl_nlen","sdl_alen","sdl_slen","sdl_data","sockaddr_inarp","sin_len","sin_family","sin_port","sin_addr","sin_srcaddr","sin_tos","sin_other","sockaddr_ctl","sc_len","sc_family","ss_sysaddr","sc_id","sc_unit","sc_reserved","in_pktinfo","ipi_ifindex","ipi_spec_dst","ipi_addr","in6_pktinfo","ipi6_addr","ipi6_ifindex","ipc_perm","uid","gid","cuid","cgid","mode","_seq","_key","sembuf","sem_num","sem_op","sem_flg","arphdr","ar_hrd","ar_pro","ar_hln","ar_pln","ar_op","in_addr","s_addr","sa_endpoints_t","sae_srcif","sae_srcaddr","sae_srcaddrlen","sae_dstaddr","sae_dstaddrlen","timex","modes","offset","freq","maxerror","esterror","status","constant","precision","tolerance","ppsfreq","jitter","shift","stabil","jitcnt","calcnt","errcnt","stbcnt","ntptimeval","time","maxerror","esterror","tai","time_state","kevent","ident","filter","flags","fflags","data","udata","semid_ds","sem_perm","sem_base","sem_nsems","sem_otime","sem_pad1","sem_ctime","sem_pad2","sem_pad3","shmid_ds","shm_perm","shm_segsz","shm_lpid","shm_cpid","shm_nattch","shm_atime","shm_dtime","shm_ctime","shm_internal","proc_threadinfo","pth_user_time","pth_system_time","pth_cpu_usage","pth_policy","pth_run_state","pth_flags","pth_sleep_time","pth_curpri","pth_priority","pth_maxpriority","pth_name","statfs","f_bsize","f_iosize","f_blocks","f_bfree","f_bavail","f_files","f_ffree","f_fsid","f_owner","f_type","f_flags","f_fssubtype","f_fstypename","f_mntonname","f_mntfromname","f_reserved","dirent","d_ino","d_seekoff","d_reclen","d_namlen","d_type","d_name","pthread_rwlock_t","pthread_mutex_t","pthread_cond_t","sockaddr_storage","ss_len","ss_family","utmpx","ut_user","ut_id","ut_line","ut_pid","ut_type","ut_tv","ut_host","sigevent","sigev_notify","sigev_signo","sigev_value","sigev_notify_attributes","processor_cpu_load_info","cpu_ticks","processor_basic_info","cpu_type","cpu_subtype","running","slot_num","is_master","processor_set_basic_info","processor_count","default_policy","processor_set_load_info","task_count","thread_count","load_average","mach_factor","semun","val","buf","array","_UTX_USERSIZE","_UTX_LINESIZE","_UTX_IDSIZE","_UTX_HOSTSIZE","EMPTY","RUN_LVL","BOOT_TIME","OLD_TIME","NEW_TIME","INIT_PROCESS","LOGIN_PROCESS","USER_PROCESS","DEAD_PROCESS","ACCOUNTING","SIGNATURE","SHUTDOWN_TIME","LC_COLLATE_MASK","LC_CTYPE_MASK","LC_MESSAGES_MASK","LC_MONETARY_MASK","LC_NUMERIC_MASK","LC_TIME_MASK","LC_ALL_MASK","CODESET","D_T_FMT","D_FMT","T_FMT","T_FMT_AMPM","AM_STR","PM_STR","DAY_1","DAY_2","DAY_3","DAY_4","DAY_5","DAY_6","DAY_7","ABDAY_1","ABDAY_2","ABDAY_3","ABDAY_4","ABDAY_5","ABDAY_6","ABDAY_7","MON_1","MON_2","MON_3","MON_4","MON_5","MON_6","MON_7","MON_8","MON_9","MON_10","MON_11","MON_12","ABMON_1","ABMON_2","ABMON_3","ABMON_4","ABMON_5","ABMON_6","ABMON_7","ABMON_8","ABMON_9","ABMON_10","ABMON_11","ABMON_12","CLOCK_REALTIME","CLOCK_MONOTONIC","CLOCK_PROCESS_CPUTIME_ID","CLOCK_THREAD_CPUTIME_ID","ERA","ERA_D_FMT","ERA_D_T_FMT","ERA_T_FMT","ALT_DIGITS","RADIXCHAR","THOUSEP","YESEXPR","NOEXPR","YESSTR","NOSTR","CRNCYSTR","D_MD_ORDER","EXIT_FAILURE","EXIT_SUCCESS","RAND_MAX","EOF","SEEK_SET","SEEK_CUR","SEEK_END","_IOFBF","_IONBF","_IOLBF","BUFSIZ","FOPEN_MAX","FILENAME_MAX","L_tmpnam","TMP_MAX","_PC_LINK_MAX","_PC_MAX_CANON","_PC_MAX_INPUT","_PC_NAME_MAX","_PC_PATH_MAX","_PC_PIPE_BUF","_PC_CHOWN_RESTRICTED","_PC_NO_TRUNC","_PC_VDISABLE","O_DSYNC","O_NOCTTY","O_CLOEXEC","O_DIRECTORY","O_SYMLINK","S_IFIFO","S_IFCHR","S_IFBLK","S_IFDIR","S_IFREG","S_IFLNK","S_IFSOCK","S_IFMT","S_IEXEC","S_IWRITE","S_IREAD","S_IRWXU","S_IXUSR","S_IWUSR","S_IRUSR","S_IRWXG","S_IXGRP","S_IWGRP","S_IRGRP","S_IRWXO","S_IXOTH","S_IWOTH","S_IROTH","F_OK","R_OK","W_OK","X_OK","STDIN_FILENO","STDOUT_FILENO","STDERR_FILENO","F_LOCK","F_TEST","F_TLOCK","F_ULOCK","F_GETLK","F_SETLK","F_SETLKW","SIGHUP","SIGINT","SIGQUIT","SIGILL","SIGABRT","SIGEMT","SIGFPE","SIGKILL","SIGSEGV","SIGPIPE","SIGALRM","SIGTERM","PROT_NONE","PROT_READ","PROT_WRITE","PROT_EXEC","PT_TRACE_ME","PT_READ_I","PT_READ_D","PT_READ_U","PT_WRITE_I","PT_WRITE_D","PT_WRITE_U","PT_CONTINUE","PT_KILL","PT_STEP","PT_ATTACH","PT_DETACH","PT_SIGEXC","PT_THUPDATE","PT_ATTACHEXC","PT_FORCEQUOTA","PT_DENY_ATTACH","PT_FIRSTMACH","MAP_FILE","MAP_SHARED","MAP_PRIVATE","MAP_FIXED","MAP_ANON","MAP_ANONYMOUS","CPU_STATE_USER","CPU_STATE_SYSTEM","CPU_STATE_IDLE","CPU_STATE_NICE","CPU_STATE_MAX","PROCESSOR_BASIC_INFO","PROCESSOR_CPU_LOAD_INFO","PROCESSOR_PM_REGS_INFO","PROCESSOR_TEMPERATURE","PROCESSOR_SET_LOAD_INFO","PROCESSOR_SET_BASIC_INFO","VM_FLAGS_FIXED","VM_FLAGS_ANYWHERE","VM_FLAGS_PURGABLE","VM_FLAGS_RANDOM_ADDR","VM_FLAGS_NO_CACHE","VM_FLAGS_RESILIENT_CODESIGN","VM_FLAGS_RESILIENT_MEDIA","VM_FLAGS_OVERWRITE","VM_FLAGS_SUPERPAGE_MASK","VM_FLAGS_RETURN_DATA_ADDR","VM_FLAGS_RETURN_4K_DATA_ADDR","VM_FLAGS_ALIAS_MASK","VM_FLAGS_USER_ALLOCATE","VM_FLAGS_USER_MAP","VM_FLAGS_USER_REMAP","VM_FLAGS_SUPERPAGE_SHIFT","SUPERPAGE_NONE","SUPERPAGE_SIZE_ANY","VM_FLAGS_SUPERPAGE_NONE","VM_FLAGS_SUPERPAGE_SIZE_ANY","SUPERPAGE_SIZE_2MB","VM_FLAGS_SUPERPAGE_SIZE_2MB","VM_MEMORY_MALLOC","VM_MEMORY_MALLOC_SMALL","VM_MEMORY_MALLOC_LARGE","VM_MEMORY_MALLOC_HUGE","VM_MEMORY_SBRK","VM_MEMORY_REALLOC","VM_MEMORY_MALLOC_TINY","VM_MEMORY_MALLOC_LARGE_REUSABLE","VM_MEMORY_MALLOC_LARGE_REUSED","VM_MEMORY_ANALYSIS_TOOL","VM_MEMORY_MALLOC_NANO","VM_MEMORY_MACH_MSG","VM_MEMORY_IOKIT","VM_MEMORY_STACK","VM_MEMORY_GUARD","VM_MEMORY_SHARED_PMAP","VM_MEMORY_DYLIB","VM_MEMORY_OBJC_DISPATCHERS","VM_MEMORY_UNSHARED_PMAP","VM_MEMORY_APPKIT","VM_MEMORY_FOUNDATION","VM_MEMORY_COREGRAPHICS","VM_MEMORY_CORESERVICES","VM_MEMORY_CARBON","VM_MEMORY_JAVA","VM_MEMORY_COREDATA","VM_MEMORY_COREDATA_OBJECTIDS","VM_MEMORY_ATS","VM_MEMORY_LAYERKIT","VM_MEMORY_CGIMAGE","VM_MEMORY_TCMALLOC","VM_MEMORY_COREGRAPHICS_DATA","VM_MEMORY_COREGRAPHICS_SHARED","VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS","VM_MEMORY_COREGRAPHICS_BACKINGSTORES","VM_MEMORY_COREGRAPHICS_XALLOC","VM_MEMORY_COREGRAPHICS_MISC","VM_MEMORY_DYLD","VM_MEMORY_DYLD_MALLOC","VM_MEMORY_SQLITE","VM_MEMORY_JAVASCRIPT_CORE","VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR","VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE","VM_MEMORY_GLSL","VM_MEMORY_OPENCL","VM_MEMORY_COREIMAGE","VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS","VM_MEMORY_IMAGEIO","VM_MEMORY_COREPROFILE","VM_MEMORY_ASSETSD","VM_MEMORY_OS_ALLOC_ONCE","VM_MEMORY_LIBDISPATCH","VM_MEMORY_ACCELERATE","VM_MEMORY_COREUI","VM_MEMORY_COREUIFILE","VM_MEMORY_GENEALOGY","VM_MEMORY_RAWCAMERA","VM_MEMORY_CORPSEINFO","VM_MEMORY_ASL","VM_MEMORY_SWIFT_RUNTIME","VM_MEMORY_SWIFT_METADATA","VM_MEMORY_DHMM","VM_MEMORY_SCENEKIT","VM_MEMORY_SKYWALK","VM_MEMORY_APPLICATION_SPECIFIC_1","VM_MEMORY_APPLICATION_SPECIFIC_16","MAP_FAILED","MCL_CURRENT","MCL_FUTURE","MS_ASYNC","MS_INVALIDATE","MS_SYNC","MS_KILLPAGES","MS_DEACTIVATE","EPERM","ENOENT","ESRCH","EINTR","EIO","ENXIO","E2BIG","ENOEXEC","EBADF","ECHILD","EDEADLK","ENOMEM","EACCES","EFAULT","ENOTBLK","EBUSY","EEXIST","EXDEV","ENODEV","ENOTDIR","EISDIR","EINVAL","ENFILE","EMFILE","ENOTTY","ETXTBSY","EFBIG","ENOSPC","ESPIPE","EROFS","EMLINK","EPIPE","EDOM","ERANGE","EAGAIN","EWOULDBLOCK","EINPROGRESS","EALREADY","ENOTSOCK","EDESTADDRREQ","EMSGSIZE","EPROTOTYPE","ENOPROTOOPT","EPROTONOSUPPORT","ESOCKTNOSUPPORT","ENOTSUP","EPFNOSUPPORT","EAFNOSUPPORT","EADDRINUSE","EADDRNOTAVAIL","ENETDOWN","ENETUNREACH","ENETRESET","ECONNABORTED","ECONNRESET","ENOBUFS","EISCONN","ENOTCONN","ESHUTDOWN","ETOOMANYREFS","ETIMEDOUT","ECONNREFUSED","ELOOP","ENAMETOOLONG","EHOSTDOWN","EHOSTUNREACH","ENOTEMPTY","EPROCLIM","EUSERS","EDQUOT","ESTALE","EREMOTE","EBADRPC","ERPCMISMATCH","EPROGUNAVAIL","EPROGMISMATCH","EPROCUNAVAIL","ENOLCK","ENOSYS","EFTYPE","EAUTH","ENEEDAUTH","EPWROFF","EDEVERR","EOVERFLOW","EBADEXEC","EBADARCH","ESHLIBVERS","EBADMACHO","ECANCELED","EIDRM","ENOMSG","EILSEQ","ENOATTR","EBADMSG","EMULTIHOP","ENODATA","ENOLINK","ENOSR","ENOSTR","EPROTO","ETIME","EOPNOTSUPP","ENOPOLICY","ENOTRECOVERABLE","EOWNERDEAD","EQFULL","ELAST","EAI_AGAIN","EAI_BADFLAGS","EAI_FAIL","EAI_FAMILY","EAI_MEMORY","EAI_NODATA","EAI_NONAME","EAI_SERVICE","EAI_SOCKTYPE","EAI_SYSTEM","EAI_OVERFLOW","F_DUPFD","F_DUPFD_CLOEXEC","F_GETFD","F_SETFD","F_GETFL","F_SETFL","F_PREALLOCATE","F_RDADVISE","F_RDAHEAD","F_NOCACHE","F_GETPATH","F_FULLFSYNC","F_FREEZE_FS","F_THAW_FS","F_GLOBAL_NOCACHE","F_NODIRECT","F_ALLOCATECONTIG","F_ALLOCATEALL","F_PEOFPOSMODE","F_VOLPOSMODE","AT_FDCWD","AT_EACCESS","AT_SYMLINK_NOFOLLOW","AT_SYMLINK_FOLLOW","AT_REMOVEDIR","TIOCMODG","TIOCMODS","TIOCM_LE","TIOCM_DTR","TIOCM_RTS","TIOCM_ST","TIOCM_SR","TIOCM_CTS","TIOCM_CAR","TIOCM_CD","TIOCM_RNG","TIOCM_RI","TIOCM_DSR","TIOCEXCL","TIOCNXCL","TIOCFLUSH","TIOCGETD","TIOCSETD","TIOCIXON","TIOCIXOFF","TIOCSDTR","TIOCCDTR","TIOCGPGRP","TIOCSPGRP","TIOCOUTQ","TIOCSTI","TIOCNOTTY","TIOCPKT","TIOCPKT_DATA","TIOCPKT_FLUSHREAD","TIOCPKT_FLUSHWRITE","TIOCPKT_STOP","TIOCPKT_START","TIOCPKT_NOSTOP","TIOCPKT_DOSTOP","TIOCPKT_IOCTL","TIOCSTOP","TIOCSTART","TIOCMSET","TIOCMBIS","TIOCMBIC","TIOCMGET","TIOCREMOTE","TIOCGWINSZ","TIOCSWINSZ","TIOCUCNTL","TIOCSTAT","TIOCSCONS","TIOCCONS","TIOCSCTTY","TIOCEXT","TIOCSIG","TIOCDRAIN","TIOCMSDTRWAIT","TIOCMGDTRWAIT","TIOCSDRAINWAIT","TIOCGDRAINWAIT","TIOCDSIMICROCODE","TIOCPTYGRANT","TIOCPTYGNAME","TIOCPTYUNLK","BIOCGRSIG","BIOCSRSIG","BIOCSDLT","BIOCGSEESENT","BIOCSSEESENT","BIOCGDLTLIST","FIODTYPE","B0","B50","B75","B110","B134","B150","B200","B300","B600","B1200","B1800","B2400","B4800","B9600","B19200","B38400","B7200","B14400","B28800","B57600","B76800","B115200","B230400","EXTA","EXTB","SIGTRAP","GLOB_APPEND","GLOB_DOOFFS","GLOB_ERR","GLOB_MARK","GLOB_NOCHECK","GLOB_NOSORT","GLOB_NOESCAPE","GLOB_NOSPACE","GLOB_ABORTED","GLOB_NOMATCH","POSIX_MADV_NORMAL","POSIX_MADV_RANDOM","POSIX_MADV_SEQUENTIAL","POSIX_MADV_WILLNEED","POSIX_MADV_DONTNEED","_SC_IOV_MAX","_SC_GETGR_R_SIZE_MAX","_SC_GETPW_R_SIZE_MAX","_SC_LOGIN_NAME_MAX","_SC_MQ_PRIO_MAX","_SC_THREAD_ATTR_STACKADDR","_SC_THREAD_ATTR_STACKSIZE","_SC_THREAD_DESTRUCTOR_ITERATIONS","_SC_THREAD_KEYS_MAX","_SC_THREAD_PRIO_INHERIT","_SC_THREAD_PRIO_PROTECT","_SC_THREAD_PRIORITY_SCHEDULING","_SC_THREAD_PROCESS_SHARED","_SC_THREAD_SAFE_FUNCTIONS","_SC_THREAD_STACK_MIN","_SC_THREAD_THREADS_MAX","_SC_THREADS","_SC_TTY_NAME_MAX","_SC_ATEXIT_MAX","_SC_XOPEN_CRYPT","_SC_XOPEN_ENH_I18N","_SC_XOPEN_LEGACY","_SC_XOPEN_REALTIME","_SC_XOPEN_REALTIME_THREADS","_SC_XOPEN_SHM","_SC_XOPEN_UNIX","_SC_XOPEN_VERSION","_SC_XOPEN_XCU_VERSION","_SC_PHYS_PAGES","PTHREAD_PROCESS_PRIVATE","PTHREAD_PROCESS_SHARED","PTHREAD_CREATE_JOINABLE","PTHREAD_CREATE_DETACHED","PTHREAD_STACK_MIN","RLIMIT_CPU","RLIMIT_FSIZE","RLIMIT_DATA","RLIMIT_STACK","RLIMIT_CORE","RLIMIT_AS","RLIMIT_RSS","RLIMIT_MEMLOCK","RLIMIT_NPROC","RLIMIT_NOFILE","RLIM_NLIMITS","_RLIMIT_POSIX_FLAG","RLIM_INFINITY","RUSAGE_SELF","RUSAGE_CHILDREN","MADV_NORMAL","MADV_RANDOM","MADV_SEQUENTIAL","MADV_WILLNEED","MADV_DONTNEED","MADV_FREE","MADV_ZERO_WIRED_PAGES","MADV_FREE_REUSABLE","MADV_FREE_REUSE","MADV_CAN_REUSE","MINCORE_INCORE","MINCORE_REFERENCED","MINCORE_MODIFIED","MINCORE_REFERENCED_OTHER","MINCORE_MODIFIED_OTHER","IPPROTO_HOPOPTS","IPPROTO_IGMP","IPPROTO_GGP","IPPROTO_IPIP","IPPROTO_ST","IPPROTO_EGP","IPPROTO_PIGP","IPPROTO_RCCMON","IPPROTO_NVPII","IPPROTO_PUP","IPPROTO_ARGUS","IPPROTO_EMCON","IPPROTO_XNET","IPPROTO_CHAOS","IPPROTO_MUX","IPPROTO_MEAS","IPPROTO_HMP","IPPROTO_PRM","IPPROTO_IDP","IPPROTO_TRUNK1","IPPROTO_TRUNK2","IPPROTO_LEAF1","IPPROTO_LEAF2","IPPROTO_RDP","IPPROTO_IRTP","IPPROTO_TP","IPPROTO_BLT","IPPROTO_NSP","IPPROTO_INP","IPPROTO_SEP","IPPROTO_3PC","IPPROTO_IDPR","IPPROTO_XTP","IPPROTO_DDP","IPPROTO_CMTP","IPPROTO_TPXX","IPPROTO_IL","IPPROTO_SDRP","IPPROTO_ROUTING","IPPROTO_FRAGMENT","IPPROTO_IDRP","IPPROTO_RSVP","IPPROTO_GRE","IPPROTO_MHRP","IPPROTO_BHA","IPPROTO_ESP","IPPROTO_AH","IPPROTO_INLSP","IPPROTO_SWIPE","IPPROTO_NHRP","IPPROTO_NONE","IPPROTO_DSTOPTS","IPPROTO_AHIP","IPPROTO_CFTP","IPPROTO_HELLO","IPPROTO_SATEXPAK","IPPROTO_KRYPTOLAN","IPPROTO_RVD","IPPROTO_IPPC","IPPROTO_ADFS","IPPROTO_SATMON","IPPROTO_VISA","IPPROTO_IPCV","IPPROTO_CPNX","IPPROTO_CPHB","IPPROTO_WSN","IPPROTO_PVP","IPPROTO_BRSATMON","IPPROTO_ND","IPPROTO_WBMON","IPPROTO_WBEXPAK","IPPROTO_EON","IPPROTO_VMTP","IPPROTO_SVMTP","IPPROTO_VINES","IPPROTO_TTP","IPPROTO_IGP","IPPROTO_DGP","IPPROTO_TCF","IPPROTO_IGRP","IPPROTO_OSPFIGP","IPPROTO_SRPC","IPPROTO_LARP","IPPROTO_MTP","IPPROTO_AX25","IPPROTO_IPEIP","IPPROTO_MICP","IPPROTO_SCCSP","IPPROTO_ETHERIP","IPPROTO_ENCAP","IPPROTO_APES","IPPROTO_GMTP","IPPROTO_PIM","IPPROTO_IPCOMP","IPPROTO_PGM","IPPROTO_SCTP","IPPROTO_DIVERT","IPPROTO_RAW","IPPROTO_MAX","IPPROTO_DONE","AF_UNSPEC","AF_LOCAL","AF_UNIX","AF_INET","AF_IMPLINK","AF_PUP","AF_CHAOS","AF_NS","AF_ISO","AF_OSI","AF_ECMA","AF_DATAKIT","AF_CCITT","AF_SNA","AF_DECnet","AF_DLI","AF_LAT","AF_HYLINK","AF_APPLETALK","AF_ROUTE","AF_LINK","pseudo_AF_XTP","AF_COIP","AF_CNT","pseudo_AF_RTIP","AF_IPX","AF_SIP","pseudo_AF_PIP","AF_ISDN","AF_E164","pseudo_AF_KEY","AF_INET6","AF_NATM","AF_SYSTEM","AF_NETBIOS","AF_PPP","pseudo_AF_HDRCMPLT","AF_SYS_CONTROL","SYSPROTO_EVENT","SYSPROTO_CONTROL","PF_UNSPEC","PF_LOCAL","PF_UNIX","PF_INET","PF_IMPLINK","PF_PUP","PF_CHAOS","PF_NS","PF_ISO","PF_OSI","PF_ECMA","PF_DATAKIT","PF_CCITT","PF_SNA","PF_DECnet","PF_DLI","PF_LAT","PF_HYLINK","PF_APPLETALK","PF_ROUTE","PF_LINK","PF_XTP","PF_COIP","PF_CNT","PF_SIP","PF_IPX","PF_RTIP","PF_PIP","PF_ISDN","PF_KEY","PF_INET6","PF_NATM","PF_SYSTEM","PF_NETBIOS","PF_PPP","NET_RT_DUMP","NET_RT_FLAGS","NET_RT_IFLIST","SOMAXCONN","SOCK_MAXADDRLEN","SOCK_STREAM","SOCK_DGRAM","SOCK_RAW","SOCK_RDM","SOCK_SEQPACKET","IP_TTL","IP_HDRINCL","IP_RECVDSTADDR","IP_ADD_MEMBERSHIP","IP_DROP_MEMBERSHIP","IP_RECVIF","IP_PKTINFO","IP_RECVTOS","IPV6_JOIN_GROUP","IPV6_LEAVE_GROUP","IPV6_CHECKSUM","IPV6_RECVTCLASS","IPV6_TCLASS","IPV6_PKTINFO","IPV6_HOPLIMIT","IPV6_RECVPKTINFO","TCP_NOPUSH","TCP_NOOPT","TCP_KEEPALIVE","TCP_KEEPINTVL","TCP_KEEPCNT","TCP_FASTOPEN","SOL_LOCAL","LOCAL_PEERCRED","LOCAL_PEERPID","LOCAL_PEEREPID","LOCAL_PEERUUID","LOCAL_PEEREUUID","SOL_SOCKET","SO_DEBUG","SO_ACCEPTCONN","SO_REUSEADDR","SO_KEEPALIVE","SO_DONTROUTE","SO_BROADCAST","SO_USELOOPBACK","SO_LINGER","SO_OOBINLINE","SO_REUSEPORT","SO_TIMESTAMP","SO_TIMESTAMP_MONOTONIC","SO_DONTTRUNC","SO_WANTMORE","SO_WANTOOBFLAG","SO_SNDBUF","SO_RCVBUF","SO_SNDLOWAT","SO_RCVLOWAT","SO_SNDTIMEO","SO_RCVTIMEO","SO_ERROR","SO_TYPE","SO_LABEL","SO_PEERLABEL","SO_NREAD","SO_NKE","SO_NOSIGPIPE","SO_NOADDRERR","SO_NWRITE","SO_REUSESHAREUID","SO_NOTIFYCONFLICT","SO_LINGER_SEC","SO_RANDOMPORT","SO_NP_EXTENSIONS","MSG_OOB","MSG_PEEK","MSG_DONTROUTE","MSG_EOR","MSG_TRUNC","MSG_CTRUNC","MSG_WAITALL","MSG_DONTWAIT","MSG_EOF","MSG_FLUSH","MSG_HOLD","MSG_SEND","MSG_HAVEMORE","MSG_RCVMORE","SCM_TIMESTAMP","SCM_CREDS","IFF_UP","IFF_BROADCAST","IFF_DEBUG","IFF_LOOPBACK","IFF_POINTOPOINT","IFF_NOTRAILERS","IFF_RUNNING","IFF_NOARP","IFF_PROMISC","IFF_ALLMULTI","IFF_OACTIVE","IFF_SIMPLEX","IFF_LINK0","IFF_LINK1","IFF_LINK2","IFF_ALTPHYS","IFF_MULTICAST","SHUT_RD","SHUT_WR","SHUT_RDWR","SAE_ASSOCID_ANY","SAE_ASSOCID_ALL","SAE_CONNID_ANY","SAE_CONNID_ALL","CONNECT_RESUME_ON_READ_WRITE","CONNECT_DATA_IDEMPOTENT","CONNECT_DATA_AUTHENTICATED","LOCK_SH","LOCK_EX","LOCK_NB","LOCK_UN","MAP_COPY","MAP_RENAME","MAP_NORESERVE","MAP_NOEXTEND","MAP_HASSEMAPHORE","MAP_NOCACHE","MAP_JIT","_SC_ARG_MAX","_SC_CHILD_MAX","_SC_CLK_TCK","_SC_NGROUPS_MAX","_SC_OPEN_MAX","_SC_JOB_CONTROL","_SC_SAVED_IDS","_SC_VERSION","_SC_BC_BASE_MAX","_SC_BC_DIM_MAX","_SC_BC_SCALE_MAX","_SC_BC_STRING_MAX","_SC_COLL_WEIGHTS_MAX","_SC_EXPR_NEST_MAX","_SC_LINE_MAX","_SC_RE_DUP_MAX","_SC_2_VERSION","_SC_2_C_BIND","_SC_2_C_DEV","_SC_2_CHAR_TERM","_SC_2_FORT_DEV","_SC_2_FORT_RUN","_SC_2_LOCALEDEF","_SC_2_SW_DEV","_SC_2_UPE","_SC_STREAM_MAX","_SC_TZNAME_MAX","_SC_ASYNCHRONOUS_IO","_SC_PAGESIZE","_SC_MEMLOCK","_SC_MEMLOCK_RANGE","_SC_MEMORY_PROTECTION","_SC_MESSAGE_PASSING","_SC_PRIORITIZED_IO","_SC_PRIORITY_SCHEDULING","_SC_REALTIME_SIGNALS","_SC_SEMAPHORES","_SC_FSYNC","_SC_SHARED_MEMORY_OBJECTS","_SC_SYNCHRONIZED_IO","_SC_TIMERS","_SC_AIO_LISTIO_MAX","_SC_AIO_MAX","_SC_AIO_PRIO_DELTA_MAX","_SC_DELAYTIMER_MAX","_SC_MQ_OPEN_MAX","_SC_MAPPED_FILES","_SC_RTSIG_MAX","_SC_SEM_NSEMS_MAX","_SC_SEM_VALUE_MAX","_SC_SIGQUEUE_MAX","_SC_TIMER_MAX","_SC_NPROCESSORS_CONF","_SC_NPROCESSORS_ONLN","_SC_2_PBS","_SC_2_PBS_ACCOUNTING","_SC_2_PBS_CHECKPOINT","_SC_2_PBS_LOCATE","_SC_2_PBS_MESSAGE","_SC_2_PBS_TRACK","_SC_ADVISORY_INFO","_SC_BARRIERS","_SC_CLOCK_SELECTION","_SC_CPUTIME","_SC_FILE_LOCKING","_SC_HOST_NAME_MAX","_SC_MONOTONIC_CLOCK","_SC_READER_WRITER_LOCKS","_SC_REGEXP","_SC_SHELL","_SC_SPAWN","_SC_SPIN_LOCKS","_SC_SPORADIC_SERVER","_SC_THREAD_CPUTIME","_SC_THREAD_SPORADIC_SERVER","_SC_TIMEOUTS","_SC_TRACE","_SC_TRACE_EVENT_FILTER","_SC_TRACE_INHERIT","_SC_TRACE_LOG","_SC_TYPED_MEMORY_OBJECTS","_SC_V6_ILP32_OFF32","_SC_V6_ILP32_OFFBIG","_SC_V6_LP64_OFF64","_SC_V6_LPBIG_OFFBIG","_SC_IPV6","_SC_RAW_SOCKETS","_SC_SYMLOOP_MAX","_SC_PAGE_SIZE","_SC_XOPEN_STREAMS","_SC_XBS5_ILP32_OFF32","_SC_XBS5_ILP32_OFFBIG","_SC_XBS5_LP64_OFF64","_SC_XBS5_LPBIG_OFFBIG","_SC_SS_REPL_MAX","_SC_TRACE_EVENT_NAME_MAX","_SC_TRACE_NAME_MAX","_SC_TRACE_SYS_MAX","_SC_TRACE_USER_EVENT_MAX","_SC_PASS_MAX","PTHREAD_MUTEX_NORMAL","PTHREAD_MUTEX_ERRORCHECK","PTHREAD_MUTEX_RECURSIVE","PTHREAD_MUTEX_DEFAULT","_PTHREAD_MUTEX_SIG_init","_PTHREAD_COND_SIG_init","_PTHREAD_RWLOCK_SIG_init","PTHREAD_MUTEX_INITIALIZER","PTHREAD_COND_INITIALIZER","PTHREAD_RWLOCK_INITIALIZER","MINSIGSTKSZ","SIGSTKSZ","FD_SETSIZE","ST_NOSUID","EVFILT_READ","EVFILT_WRITE","EVFILT_AIO","EVFILT_VNODE","EVFILT_PROC","EVFILT_SIGNAL","EVFILT_TIMER","EVFILT_MACHPORT","EVFILT_FS","EVFILT_USER","EVFILT_VM","EV_ADD","EV_DELETE","EV_ENABLE","EV_DISABLE","EV_ONESHOT","EV_CLEAR","EV_RECEIPT","EV_DISPATCH","EV_FLAG0","EV_POLL","EV_FLAG1","EV_OOBAND","EV_ERROR","EV_EOF","EV_SYSFLAGS","NOTE_TRIGGER","NOTE_FFNOP","NOTE_FFAND","NOTE_FFOR","NOTE_FFCOPY","NOTE_FFCTRLMASK","NOTE_FFLAGSMASK","NOTE_LOWAT","NOTE_DELETE","NOTE_WRITE","NOTE_EXTEND","NOTE_ATTRIB","NOTE_LINK","NOTE_RENAME","NOTE_REVOKE","NOTE_NONE","NOTE_EXIT","NOTE_FORK","NOTE_EXEC","NOTE_SIGNAL","NOTE_EXITSTATUS","NOTE_EXIT_DETAIL","NOTE_PDATAMASK","NOTE_PCTRLMASK","NOTE_EXIT_DETAIL_MASK","NOTE_EXIT_DECRYPTFAIL","NOTE_EXIT_MEMORY","NOTE_EXIT_CSERROR","NOTE_VM_PRESSURE","NOTE_VM_PRESSURE_TERMINATE","NOTE_VM_PRESSURE_SUDDEN_TERMINATE","NOTE_VM_ERROR","NOTE_SECONDS","NOTE_USECONDS","NOTE_NSECONDS","NOTE_ABSOLUTE","NOTE_LEEWAY","NOTE_CRITICAL","NOTE_BACKGROUND","NOTE_TRACK","NOTE_TRACKERR","NOTE_CHILD","OCRNL","ONOCR","ONLRET","OFILL","NLDLY","TABDLY","CRDLY","FFDLY","BSDLY","VTDLY","OFDEL","NL0","NL1","TAB0","TAB1","TAB2","CR0","CR1","CR2","CR3","FF0","FF1","BS0","BS1","TAB3","VT0","VT1","IUTF8","CRTSCTS","NI_MAXHOST","NI_MAXSERV","NI_NOFQDN","NI_NUMERICHOST","NI_NAMEREQD","NI_NUMERICSERV","NI_NUMERICSCOPE","NI_DGRAM","Q_GETQUOTA","Q_SETQUOTA","RENAME_SWAP","RENAME_EXCL","RTLD_LOCAL","RTLD_FIRST","RTLD_NODELETE","RTLD_NOLOAD","RTLD_GLOBAL","_WSTOPPED","LOG_NETINFO","LOG_REMOTEAUTH","LOG_INSTALL","LOG_RAS","LOG_LAUNCHD","LOG_NFACILITIES","CTLTYPE","CTLTYPE_NODE","CTLTYPE_INT","CTLTYPE_STRING","CTLTYPE_QUAD","CTLTYPE_OPAQUE","CTLTYPE_STRUCT","CTLFLAG_RD","CTLFLAG_WR","CTLFLAG_RW","CTLFLAG_NOLOCK","CTLFLAG_ANYBODY","CTLFLAG_SECURE","CTLFLAG_MASKED","CTLFLAG_NOAUTO","CTLFLAG_KERN","CTLFLAG_LOCKED","CTLFLAG_OID2","CTL_UNSPEC","CTL_KERN","CTL_VM","CTL_VFS","CTL_NET","CTL_DEBUG","CTL_HW","CTL_MACHDEP","CTL_USER","CTL_MAXID","KERN_OSTYPE","KERN_OSRELEASE","KERN_OSREV","KERN_VERSION","KERN_MAXVNODES","KERN_MAXPROC","KERN_MAXFILES","KERN_ARGMAX","KERN_SECURELVL","KERN_HOSTNAME","KERN_HOSTID","KERN_CLOCKRATE","KERN_VNODE","KERN_PROC","KERN_FILE","KERN_PROF","KERN_POSIX1","KERN_NGROUPS","KERN_JOB_CONTROL","KERN_SAVED_IDS","KERN_BOOTTIME","KERN_NISDOMAINNAME","KERN_DOMAINNAME","KERN_MAXPARTITIONS","KERN_KDEBUG","KERN_UPDATEINTERVAL","KERN_OSRELDATE","KERN_NTP_PLL","KERN_BOOTFILE","KERN_MAXFILESPERPROC","KERN_MAXPROCPERUID","KERN_DUMPDEV","KERN_IPC","KERN_DUMMY","KERN_PS_STRINGS","KERN_USRSTACK32","KERN_LOGSIGEXIT","KERN_SYMFILE","KERN_PROCARGS","KERN_NETBOOT","KERN_SYSV","KERN_AFFINITY","KERN_TRANSLATE","KERN_CLASSIC","KERN_EXEC","KERN_CLASSICHANDLER","KERN_AIOMAX","KERN_AIOPROCMAX","KERN_AIOTHREADS","KERN_COREFILE","KERN_COREDUMP","KERN_SUGID_COREDUMP","KERN_PROCDELAYTERM","KERN_SHREG_PRIVATIZABLE","KERN_LOW_PRI_WINDOW","KERN_LOW_PRI_DELAY","KERN_POSIX","KERN_USRSTACK64","KERN_NX_PROTECTION","KERN_TFP","KERN_PROCNAME","KERN_THALTSTACK","KERN_SPECULATIVE_READS","KERN_OSVERSION","KERN_SAFEBOOT","KERN_RAGEVNODE","KERN_TTY","KERN_CHECKOPENEVT","KERN_THREADNAME","KERN_MAXID","KERN_RAGE_PROC","KERN_RAGE_THREAD","KERN_UNRAGE_PROC","KERN_UNRAGE_THREAD","KERN_OPENEVT_PROC","KERN_UNOPENEVT_PROC","KERN_TFP_POLICY","KERN_TFP_POLICY_DENY","KERN_TFP_POLICY_DEFAULT","KERN_KDEFLAGS","KERN_KDDFLAGS","KERN_KDENABLE","KERN_KDSETBUF","KERN_KDGETBUF","KERN_KDSETUP","KERN_KDREMOVE","KERN_KDSETREG","KERN_KDGETREG","KERN_KDREADTR","KERN_KDPIDTR","KERN_KDTHRMAP","KERN_KDPIDEX","KERN_KDSETRTCDEC","KERN_KDGETENTROPY","KERN_KDWRITETR","KERN_KDWRITEMAP","KERN_KDREADCURTHRMAP","KERN_KDSET_TYPEFILTER","KERN_KDBUFWAIT","KERN_KDCPUMAP","KERN_PROC_ALL","KERN_PROC_PID","KERN_PROC_PGRP","KERN_PROC_SESSION","KERN_PROC_TTY","KERN_PROC_UID","KERN_PROC_RUID","KERN_PROC_LCID","KIPC_MAXSOCKBUF","KIPC_SOCKBUF_WASTE","KIPC_SOMAXCONN","KIPC_MAX_LINKHDR","KIPC_MAX_PROTOHDR","KIPC_MAX_HDR","KIPC_MAX_DATALEN","KIPC_MBSTAT","KIPC_NMBCLUSTERS","KIPC_SOQLIMITCOMPAT","VM_METER","VM_LOADAVG","VM_MACHFACTOR","VM_SWAPUSAGE","VM_MAXID","HW_MACHINE","HW_MODEL","HW_NCPU","HW_BYTEORDER","HW_PHYSMEM","HW_USERMEM","HW_PAGESIZE","HW_DISKNAMES","HW_DISKSTATS","HW_EPOCH","HW_FLOATINGPT","HW_MACHINE_ARCH","HW_VECTORUNIT","HW_BUS_FREQ","HW_CPU_FREQ","HW_CACHELINE","HW_L1ICACHESIZE","HW_L1DCACHESIZE","HW_L2SETTINGS","HW_L2CACHESIZE","HW_L3SETTINGS","HW_L3CACHESIZE","HW_TB_FREQ","HW_MEMSIZE","HW_AVAILCPU","HW_TARGET","HW_PRODUCT","HW_MAXID","USER_CS_PATH","USER_BC_BASE_MAX","USER_BC_DIM_MAX","USER_BC_SCALE_MAX","USER_BC_STRING_MAX","USER_COLL_WEIGHTS_MAX","USER_EXPR_NEST_MAX","USER_LINE_MAX","USER_RE_DUP_MAX","USER_POSIX2_VERSION","USER_POSIX2_C_BIND","USER_POSIX2_C_DEV","USER_POSIX2_CHAR_TERM","USER_POSIX2_FORT_DEV","USER_POSIX2_FORT_RUN","USER_POSIX2_LOCALEDEF","USER_POSIX2_SW_DEV","USER_POSIX2_UPE","USER_STREAM_MAX","USER_TZNAME_MAX","USER_MAXID","CTL_DEBUG_NAME","CTL_DEBUG_VALUE","CTL_DEBUG_MAXID","PRIO_DARWIN_THREAD","PRIO_DARWIN_PROCESS","PRIO_DARWIN_BG","PRIO_DARWIN_NONUI","SEM_FAILED","AI_PASSIVE","AI_CANONNAME","AI_NUMERICHOST","AI_NUMERICSERV","AI_MASK","AI_ALL","AI_V4MAPPED_CFG","AI_ADDRCONFIG","AI_V4MAPPED","AI_DEFAULT","AI_UNUSABLE","SIGEV_NONE","SIGEV_SIGNAL","SIGEV_THREAD","AIO_CANCELED","AIO_NOTCANCELED","AIO_ALLDONE","AIO_LISTIO_MAX","LIO_NOP","LIO_WRITE","LIO_READ","LIO_WAIT","LIO_NOWAIT","WEXITED","WSTOPPED","WCONTINUED","WNOWAIT","P_ALL","P_PID","P_PGID","UTIME_OMIT","UTIME_NOW","XATTR_NOFOLLOW","XATTR_CREATE","XATTR_REPLACE","XATTR_NOSECURITY","XATTR_NODEFAULT","XATTR_SHOWCOMPRESSION","NET_RT_IFLIST2","RTF_UP","RTF_GATEWAY","RTF_HOST","RTF_REJECT","RTF_DYNAMIC","RTF_MODIFIED","RTF_DONE","RTF_DELCLONE","RTF_CLONING","RTF_XRESOLVE","RTF_LLINFO","RTF_STATIC","RTF_BLACKHOLE","RTF_NOIFREF","RTF_PROTO2","RTF_PROTO1","RTF_PRCLONING","RTF_WASCLONED","RTF_PROTO3","RTF_PINNED","RTF_LOCAL","RTF_BROADCAST","RTF_MULTICAST","RTF_IFSCOPE","RTF_CONDEMNED","RTF_IFREF","RTF_PROXY","RTF_ROUTER","RTM_VERSION","RTM_ADD","RTM_DELETE","RTM_CHANGE","RTM_GET","RTM_LOSING","RTM_REDIRECT","RTM_MISS","RTM_LOCK","RTM_OLDADD","RTM_OLDDEL","RTM_RESOLVE","RTM_NEWADDR","RTM_DELADDR","RTM_IFINFO","RTM_NEWMADDR","RTM_DELMADDR","RTM_IFINFO2","RTM_NEWMADDR2","RTM_GET2","RTV_MTU","RTV_HOPCOUNT","RTV_EXPIRE","RTV_RPIPE","RTV_SPIPE","RTV_SSTHRESH","RTV_RTT","RTV_RTTVAR","RTA_DST","RTA_GATEWAY","RTA_NETMASK","RTA_GENMASK","RTA_IFP","RTA_IFA","RTA_AUTHOR","RTA_BRD","RTAX_DST","RTAX_GATEWAY","RTAX_NETMASK","RTAX_GENMASK","RTAX_IFP","RTAX_IFA","RTAX_AUTHOR","RTAX_BRD","RTAX_MAX","KERN_PROCARGS2","PROC_PIDTASKALLINFO","PROC_PIDTASKINFO","PROC_PIDTHREADINFO","MAXCOMLEN","MAXTHREADNAMESIZE","XUCRED_VERSION","LC_SEGMENT","LC_SEGMENT_64","MH_MAGIC","MH_MAGIC_64","UTUN_OPT_FLAGS","UTUN_OPT_IFNAME","DLT_NULL","DLT_EN10MB","DLT_EN3MB","DLT_AX25","DLT_PRONET","DLT_CHAOS","DLT_IEEE802","DLT_ARCNET","DLT_SLIP","DLT_PPP","DLT_FDDI","DLT_ATM_RFC1483","DLT_RAW","DLT_LOOP","BPF_ALIGNMENT","MNT_RDONLY","MNT_SYNCHRONOUS","MNT_NOEXEC","MNT_NOSUID","MNT_NODEV","MNT_UNION","MNT_ASYNC","MNT_CPROTECT","MNT_EXPORTED","MNT_QUARANTINE","MNT_LOCAL","MNT_QUOTA","MNT_ROOTFS","MNT_DOVOLFS","MNT_DONTBROWSE","MNT_IGNORE_OWNERSHIP","MNT_AUTOMOUNTED","MNT_JOURNALED","MNT_NOUSERXATTR","MNT_DEFWRITE","MNT_MULTILABEL","MNT_NOATIME","MNT_SNAPSHOT","MNT_UPDATE","MNT_NOBLOCK","MNT_RELOAD","POSIX_SPAWN_RESETIDS","POSIX_SPAWN_SETPGROUP","POSIX_SPAWN_SETSIGDEF","POSIX_SPAWN_SETSIGMASK","POSIX_SPAWN_SETEXEC","POSIX_SPAWN_START_SUSPENDED","POSIX_SPAWN_CLOEXEC_DEFAULT","IPC_CREAT","IPC_EXCL","IPC_NOWAIT","IPC_PRIVATE","IPC_RMID","IPC_SET","IPC_STAT","IPC_R","IPC_W","IPC_M","SEM_UNDO","GETNCNT","GETPID","GETVAL","GETALL","GETZCNT","SETVAL","SETALL","SHM_RDONLY","SHM_RND","SHMLBA","SHM_R","SHM_W","UF_SETTABLE","UF_NODUMP","UF_IMMUTABLE","UF_APPEND","UF_OPAQUE","UF_COMPRESSED","UF_TRACKED","SF_SETTABLE","SF_ARCHIVED","SF_IMMUTABLE","SF_APPEND","UF_HIDDEN","NTP_API","MAXPHASE","MAXFREQ","MINSEC","MAXSEC","NANOSECOND","SCALE_PPM","MAXTC","MOD_OFFSET","MOD_FREQUENCY","MOD_MAXERROR","MOD_ESTERROR","MOD_STATUS","MOD_TIMECONST","MOD_PPSMAX","MOD_TAI","MOD_MICRO","MOD_NANO","MOD_CLKB","MOD_CLKA","STA_PLL","STA_PPSFREQ","STA_PPSTIME","STA_FLL","STA_INS","STA_DEL","STA_UNSYNC","STA_FREQHOLD","STA_PPSSIGNAL","STA_PPSJITTER","STA_PPSWANDER","STA_PPSERROR","STA_CLOCKERR","STA_NANO","STA_MODE","STA_CLK","STA_RONLY","TIME_OK","TIME_INS","TIME_DEL","TIME_OOP","TIME_WAIT","TIME_ERROR","MNT_WAIT","MNT_NOWAIT","CMSG_NXTHDR","CMSG_DATA","CMSG_SPACE","CMSG_LEN","WSTOPSIG","_WSTATUS","WIFCONTINUED","WIFSIGNALED","WIFSTOPPED","c_long","c_ulong","timeval32","tv_sec","tv_usec","if_data","ifi_type","ifi_typelen","ifi_physical","ifi_addrlen","ifi_hdrlen","ifi_recvquota","ifi_xmitquota","ifi_unused1","ifi_mtu","ifi_metric","ifi_baudrate","ifi_ipackets","ifi_ierrors","ifi_opackets","ifi_oerrors","ifi_collisions","ifi_ibytes","ifi_obytes","ifi_imcasts","ifi_omcasts","ifi_iqdrops","ifi_noproto","ifi_recvtiming","ifi_xmittiming","ifi_lastchange","ifi_unused2","ifi_hwassist","ifi_reserved1","ifi_reserved2","bpf_hdr","bh_tstamp","bh_caplen","bh_datalen","bh_hdrlen","pthread_attr_t","__PTHREAD_MUTEX_SIZE__","__PTHREAD_COND_SIZE__","__PTHREAD_CONDATTR_SIZE__","__PTHREAD_RWLOCK_SIZE__","__PTHREAD_RWLOCKATTR_SIZE__","TIOCTIMESTAMP","TIOCDCDTIMESTAMP","BIOCSETF","BIOCSRTIMEOUT","BIOCGRTIMEOUT","BIOCSETFNR","boolean_t","mcontext_t","max_align_t","ucontext_t","uc_onstack","uc_sigmask","uc_stack","uc_link","uc_mcsize","uc_mcontext","__darwin_mcontext64","__es","__ss","__ns","__darwin_arm_exception_state64","__far","__esr","__exception","__darwin_arm_thread_state64","__x","__fp","__lr","__sp","__pc","__cpsr","__pad","__darwin_arm_neon_state64","__v","__fpsr","__fpcr","c_void","in6_addr","s6_addr","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","si_addr","si_value","si_pid","si_uid","si_status"],"q":["libcdhe 64-bit libc on Solaris and illumos only has …hop-by-hop options","group mgmt protocol","gateway2 (deprecated)","for compatibility","Stream protocol II.","exterior gateway protocol","private interior gateway","BBN RCC Monitoring","network voice protocol","pup","Argus","EMCON","Cross Net Debugger","Chaos","Multiplexing","DCN Measurement Subsystems","Host Monitoring","Packet Radio Measurement","xns idp","Trunk-1","Trunk-2","Leaf-1","Leaf-2","Reliable Data","Reliable Transaction","tp-4 w/ class negotiation","Bulk Data Transfer","Network Services","Merit Internodal","Sequential Exchange","Third Party Connect","InterDomain Policy Routing","XTP","Datagram Delivery","Control Message Transport","TP++ Transport","IL transport protocol","Source Demand Routing","IP6 routing header","IP6 fragmentation header","InterDomain Routing","resource reservation","General Routing Encap.","Mobile Host Routing","BHA","IP6 Encap Sec. Payload","IP6 Auth Header","Integ. Net Layer Security","IP with encryption","Next Hop Resolution","IP6 no next header","IP6 destination option","any host internal protocol","CFTP","“hello” routing protocol","SATNET/Backroom EXPAK","Kryptolan","Remote Virtual Disk","Pluribus Packet Core","Any distributed FS","Satnet Monitoring","VISA Protocol","Packet Core Utility","Comp. Prot. Net. Executive","Comp. Prot. HeartBeat","Wang Span Network","Packet Video Protocol","BackRoom SATNET Monitoring","Sun net disk proto (temp.)","WIDEBAND Monitoring","WIDEBAND EXPAK","ISO cnlp","VMTP","Secure VMTP","Banyon VINES","TTP","NSFNET-IGP","dissimilar gateway prot.","TCF","Cisco/GXS IGRP","OSPFIGP","Strite RPC protocol","Locus Address Resoloution","Multicast Transport","AX.25 Frames","IP encapsulated in IP","Mobile Int.ing control","Semaphore Comm. security","Ethernet IP encapsulation","encapsulation header","any private encr. scheme","GMTP","Protocol Independent Mcast","payload compression (IPComp)","PGM","SCTP","divert pseudo-protocol","raw IP packet","","last return value of *_input(), meaning “all job for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enable/Disable TCP Fastopen on this socket","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","((sae_associd_t)(-1ULL))","","((sae_connid_t)(-1ULL))","resume connect() on read/write","data is idempotent","data includes security that replaces the TFO-cookiequivalent to C’s <code>void</code> type when used as a [pointeri":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,2,2,0,3,3,0,4,4,0,5,5,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,7,7,0,8,8,8,8,8,0,9,9,0,10,10,10,0,11,11,11,11,0,12,12,0,13,0,14,14,0,15,15,15,15,0,16,16,16,16,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,18,18,0,19,19,19,19,19,19,0,20,20,20,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,0,0,22,22,22,22,22,22,22,22,22,22,22,0,23,23,23,23,23,23,23,0,24,24,24,0,0,25,25,0,0,26,26,0,27,27,27,0,28,28,28,28,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,29,0,30,30,30,30,30,30,30,0,31,31,31,0,32,32,32,32,32,32,32,32,0,33,33,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,0,0,0,35,35,35,35,35,35,35,0,36,36,36,0,37,37,37,0,38,38,38,38,38,0,39,39,0,40,40,40,40,40,40,40,40,40,40,40,0,41,41,41,41,0,42,42,42,42,42,0,43,43,43,43,43,43,43,0,44,44,44,44,44,44,44,44,44,44,0,45,45,45,45,45,45,45,0,46,46,46,46,46,46,46,0,47,47,47,47,47,0,48,48,48,48,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,52,52,0,53,53,53,53,53,0,54,54,54,54,0,55,55,55,55,55,55,55,0,56,56,56,56,56,56,56,56,0,57,57,57,57,57,57,57,57,57,57,57,0,58,58,58,58,58,58,58,58,58,58,58,0,59,59,0,60,60,60,60,60,60,60,60,0,61,61,61,61,61,61,61,0,62,62,62,62,62,62,0,63,63,63,0,64,64,0,65,65,65,65,65,65,65,0,66,66,66,0,67,67,67,67,67,0,68,0,69,69,69,69,69,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0,71,71,71,71,71,0,72,72,72,72,72,72,0,73,73,73,73,73,73,73,73,0,74,74,74,74,74,74,74,74,74,0,75,75,75,75,75,75,75,75,75,75,75,0,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,0,77,77,77,77,77,77,0,0,0,0,78,78,0,79,79,79,79,79,79,79,0,80,80,80,80,0,81,0,82,82,82,82,82,0,83,83,0,84,84,84,84,0,85,85,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,86,0,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,0,88,88,88,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,89,89,89,89,89,0,90,90,90,0,91,91,91,0,92,92,92,92,92,92,92,0,93,93,93,0,0,94,95,95,95,95,95,95,95,89,89,89,89,89,89,89,90,90,90,90,90,90,90,91,91,91,91,91,91,91,92,92,92,92,92,92,92,93,93,93,93,93,93,93,86,86,86,86,86,86,86,87,87,87,87,87,87,87,88,88,88,88,88,88,88,96,96,96,96,96,96,96,97,97,97,97,97,97,97,29,29,29,29,29,29,29,30,30,30,30,30,30,30,31,31,31,31,31,31,31,32,32,32,32,32,32,32,33,33,33,33,33,33,33,34,34,34,34,34,34,34,98,98,98,98,98,98,98,99,99,99,99,99,99,99,100,100,100,100,100,100,100,35,35,35,35,35,35,35,36,36,36,36,36,36,36,37,37,37,37,37,37,37,38,38,38,38,38,38,38,39,39,39,39,39,39,39,40,40,40,40,40,40,40,41,41,41,41,41,41,41,42,42,42,42,42,42,42,43,43,43,43,43,43,43,44,44,44,44,44,44,44,45,45,45,45,45,45,45,46,46,46,46,46,46,46,47,47,47,47,47,47,47,48,48,48,48,48,48,48,49,49,49,49,49,49,49,50,50,50,50,50,50,50,51,51,51,51,51,51,51,52,52,52,52,52,52,52,53,53,53,53,53,53,53,54,54,54,54,54,54,54,55,55,55,55,55,55,55,56,56,56,56,56,56,56,57,57,57,57,57,57,57,58,58,58,58,58,58,58,59,59,59,59,59,59,59,60,60,60,60,60,60,60,61,61,61,61,61,61,61,62,62,62,62,62,62,62,63,63,63,63,63,63,63,64,64,64,64,64,64,64,65,65,65,65,65,65,65,66,66,66,66,66,66,66,67,67,67,67,67,67,67,68,68,68,68,68,68,68,69,69,69,69,69,69,69,70,70,70,70,70,70,70,71,71,71,71,71,71,71,72,72,72,72,72,72,72,73,73,73,73,73,73,73,74,74,74,74,74,74,74,75,75,75,75,75,75,75,76,76,76,76,76,76,76,77,77,77,77,77,77,77,101,101,101,101,101,101,101,102,102,102,102,102,102,102,103,103,103,103,103,103,103,78,78,78,78,78,78,78,79,79,79,79,79,79,79,80,80,80,80,80,80,80,81,81,81,81,81,81,81,82,82,82,82,82,82,82,83,83,83,83,83,83,83,84,84,84,84,84,84,84,85,85,85,85,85,85,85,18,18,18,18,18,18,18,19,19,19,19,19,19,19,20,20,20,20,20,20,20,21,21,21,21,21,21,21,104,104,104,104,104,104,104,22,22,22,22,22,22,22,23,23,23,23,23,23,23,24,24,24,24,24,24,24,105,105,105,105,105,105,105,25,25,25,25,25,25,25,106,106,106,106,106,106,106,26,26,26,26,26,26,26,27,27,27,27,27,27,27,28,28,28,28,28,28,28,94,94,94,94,94,94,94,107,107,107,107,107,107,107,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,11,11,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,14,14,14,14,14,14,14,15,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,108,108,108,108,108,108,108,109,109,109,109,109,109,109,110,110,110,110,110,110,110,110,107,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,108,109,18,19,20,21,104,22,23,24,105,25,106,26,27,28,97,29,30,31,32,33,34,98,99,100,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,85,72,73,74,75,76,77,101,102,103,78,79,80,81,82,83,84,86,87,88,96,89,90,91,92,93,94,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,104,104,22,22,23,23,24,24,105,105,25,25,106,106,26,26,27,28,29,29,30,30,31,31,32,32,33,33,34,34,98,98,99,99,100,100,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,85,72,73,74,75,76,77,101,102,103,78,79,80,81,82,83,84,86,86,87,87,88,88,96,89,89,90,90,91,91,92,92,93,93,94,94,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,104,22,23,24,105,25,106,26,27,28,29,30,31,32,33,34,98,99,100,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,85,72,73,74,75,76,77,101,102,103,78,79,80,81,82,83,84,86,87,88,96,89,90,91,92,93,94,107,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,108,109,18,19,20,21,104,22,23,24,105,25,106,26,27,28,97,29,30,31,32,33,34,98,99,100,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,101,102,103,78,79,80,81,82,83,84,85,86,87,88,96,95,89,90,91,92,93,94,35,35,35,35,35],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["c_int",6]]],[[["c_int",6]],["bool",15]],[[["c_int",6]]],[[]],[[["c_int",6]],["c_int",6]],[[["c_int",6]],["bool",15]],[[["c_int",6]],["c_int",6]],[[["c_int",6]],["bool",15]],[[["c_int",6]],["c_int",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["c_uint",6]],["c_uint",6]],[[["c_uint",6]],["c_uint",6]],[[["c_int",6]],["c_int",6]],[[["c_int",6]],["c_int",6]],[[["c_int",6]],["bool",15]],[[["c_int",6]],["bool",15]],[[["c_int",6]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["group",3]],["bool",15]],[[["group",3]],["bool",15]],[[["utimbuf",3]],["bool",15]],[[["utimbuf",3]],["bool",15]],[[["timeval",3]],["bool",15]],[[["timeval",3]],["bool",15]],[[["timespec",3]],["bool",15]],[[["timespec",3]],["bool",15]],[[["rlimit",3]],["bool",15]],[[["rlimit",3]],["bool",15]],[[["rusage",3]],["bool",15]],[[["rusage",3]],["bool",15]],[[["ipv6_mreq",3]],["bool",15]],[[["ipv6_mreq",3]],["bool",15]],[[["hostent",3]],["bool",15]],[[["hostent",3]],["bool",15]],[[["iovec",3]],["bool",15]],[[["iovec",3]],["bool",15]],[[["pollfd",3]],["bool",15]],[[["pollfd",3]],["bool",15]],[[["winsize",3]],["bool",15]],[[["winsize",3]],["bool",15]],[[["linger",3]],["bool",15]],[[["linger",3]],["bool",15]],[[["sigval",3]],["bool",15]],[[["sigval",3]],["bool",15]],[[["itimerval",3]],["bool",15]],[[["itimerval",3]],["bool",15]],[[["tms",3]],["bool",15]],[[["tms",3]],["bool",15]],[[["servent",3]],["bool",15]],[[["servent",3]],["bool",15]],[[["protoent",3]],["bool",15]],[[["protoent",3]],["bool",15]],[[["sockaddr",3]],["bool",15]],[[["sockaddr",3]],["bool",15]],[[["sockaddr_in6",3]],["bool",15]],[[["sockaddr_in6",3]],["bool",15]],[[["passwd",3]],["bool",15]],[[["passwd",3]],["bool",15]],[[["ifaddrs",3]],["bool",15]],[[["ifaddrs",3]],["bool",15]],[[["fd_set",3]],["bool",15]],[[["fd_set",3]],["bool",15]],[[["tm",3]],["bool",15]],[[["tm",3]],["bool",15]],[[["msghdr",3]],["bool",15]],[[["msghdr",3]],["bool",15]],[[["cmsghdr",3]],["bool",15]],[[["cmsghdr",3]],["bool",15]],[[["fsid_t",3]],["bool",15]],[[["fsid_t",3]],["bool",15]],[[["if_nameindex",3]],["bool",15]],[[["if_nameindex",3]],["bool",15]],[[["regex_t",3]],["bool",15]],[[["regex_t",3]],["bool",15]],[[["regmatch_t",3]],["bool",15]],[[["regmatch_t",3]],["bool",15]],[[["sockaddr_un",3]],["bool",15]],[[["utsname",3]],["bool",15]],[[["ip_mreq",3]],["bool",15]],[[["ip_mreq",3]],["bool",15]],[[["aiocb",3]],["bool",15]],[[["aiocb",3]],["bool",15]],[[["glob_t",3]],["bool",15]],[[["glob_t",3]],["bool",15]],[[["addrinfo",3]],["bool",15]],[[["addrinfo",3]],["bool",15]],[[["mach_timebase_info",3]],["bool",15]],[[["mach_timebase_info",3]],["bool",15]],[[["stat",3]],["bool",15]],[[["stat",3]],["bool",15]],[[["pthread_mutexattr_t",3]],["bool",15]],[[["pthread_mutexattr_t",3]],["bool",15]],[[["pthread_condattr_t",3]],["bool",15]],[[["pthread_condattr_t",3]],["bool",15]],[[["pthread_rwlockattr_t",3]],["bool",15]],[[["pthread_rwlockattr_t",3]],["bool",15]],[[["siginfo_t",3]],["bool",15]],[[["siginfo_t",3]],["bool",15]],[[["sigaction",3]],["bool",15]],[[["sigaction",3]],["bool",15]],[[["stack_t",3]],["bool",15]],[[["stack_t",3]],["bool",15]],[[["fstore_t",3]],["bool",15]],[[["fstore_t",3]],["bool",15]],[[["radvisory",3]],["bool",15]],[[["radvisory",3]],["bool",15]],[[["statvfs",3]],["bool",15]],[[["statvfs",3]],["bool",15]],[[["dl_info",3]],["bool",15]],[[["dl_info",3]],["bool",15]],[[["sockaddr_in",3]],["bool",15]],[[["sockaddr_in",3]],["bool",15]],[[["kevent64_s",3]],["bool",15]],[[["kevent64_s",3]],["bool",15]],[[["dqblk",3]],["bool",15]],[[["dqblk",3]],["bool",15]],[[["if_msghdr",3]],["bool",15]],[[["if_msghdr",3]],["bool",15]],[[["termios",3]],["bool",15]],[[["termios",3]],["bool",15]],[[["flock",3]],["bool",15]],[[["flock",3]],["bool",15]],[[["sf_hdtr",3]],["bool",15]],[[["sf_hdtr",3]],["bool",15]],[[["lconv",3]],["bool",15]],[[["lconv",3]],["bool",15]],[[["proc_taskinfo",3]],["bool",15]],[[["proc_taskinfo",3]],["bool",15]],[[["proc_bsdinfo",3]],["bool",15]],[[["proc_bsdinfo",3]],["bool",15]],[[["proc_taskallinfo",3]],["bool",15]],[[["proc_taskallinfo",3]],["bool",15]],[[["xsw_usage",3]],["bool",15]],[[["xsw_usage",3]],["bool",15]],[[["xucred",3]],["bool",15]],[[["xucred",3]],["bool",15]],[[["mach_header",3]],["bool",15]],[[["mach_header",3]],["bool",15]],[[["mach_header_64",3]],["bool",15]],[[["mach_header_64",3]],["bool",15]],[[["segment_command",3]],["bool",15]],[[["segment_command",3]],["bool",15]],[[["segment_command_64",3]],["bool",15]],[[["segment_command_64",3]],["bool",15]],[[["load_command",3]],["bool",15]],[[["load_command",3]],["bool",15]],[[["sockaddr_dl",3]],["bool",15]],[[["sockaddr_dl",3]],["bool",15]],[[["sockaddr_inarp",3]],["bool",15]],[[["sockaddr_inarp",3]],["bool",15]],[[["sockaddr_ctl",3]],["bool",15]],[[["sockaddr_ctl",3]],["bool",15]],[[["in_pktinfo",3]],["bool",15]],[[["in_pktinfo",3]],["bool",15]],[[["in6_pktinfo",3]],["bool",15]],[[["in6_pktinfo",3]],["bool",15]],[[["ipc_perm",3]],["bool",15]],[[["ipc_perm",3]],["bool",15]],[[["sembuf",3]],["bool",15]],[[["sembuf",3]],["bool",15]],[[["arphdr",3]],["bool",15]],[[["arphdr",3]],["bool",15]],[[["in_addr",3]],["bool",15]],[[["in_addr",3]],["bool",15]],[[["sa_endpoints_t",3]],["bool",15]],[[["sa_endpoints_t",3]],["bool",15]],[[["timex",3]],["bool",15]],[[["timex",3]],["bool",15]],[[["ntptimeval",3]],["bool",15]],[[["ntptimeval",3]],["bool",15]],[[["semun",19]],["bool",15]],[[["kevent",3]],["bool",15]],[[["semid_ds",3]],["bool",15]],[[["shmid_ds",3]],["bool",15]],[[["proc_threadinfo",3]],["bool",15]],[[["statfs",3]],["bool",15]],[[["dirent",3]],["bool",15]],[[["pthread_rwlock_t",3]],["bool",15]],[[["pthread_mutex_t",3]],["bool",15]],[[["pthread_cond_t",3]],["bool",15]],[[["sockaddr_storage",3]],["bool",15]],[[["utmpx",3]],["bool",15]],[[["sigevent",3]],["bool",15]],[[["processor_cpu_load_info",3]],["bool",15]],[[["processor_basic_info",3]],["bool",15]],[[["processor_set_basic_info",3]],["bool",15]],[[["processor_set_load_info",3]],["bool",15]],[[["timeval32",3]],["bool",15]],[[["timeval32",3]],["bool",15]],[[["if_data",3]],["bool",15]],[[["if_data",3]],["bool",15]],[[["bpf_hdr",3]],["bool",15]],[[["bpf_hdr",3]],["bool",15]],[[["pthread_attr_t",3]],["bool",15]],[[["ucontext_t",3]],["bool",15]],[[["ucontext_t",3]],["bool",15]],[[["__darwin_mcontext64",3]],["bool",15]],[[["__darwin_mcontext64",3]],["bool",15]],[[["__darwin_arm_exception_state64",3]],["bool",15]],[[["__darwin_arm_exception_state64",3]],["bool",15]],[[["__darwin_arm_thread_state64",3]],["bool",15]],[[["__darwin_arm_thread_state64",3]],["bool",15]],[[["__darwin_arm_neon_state64",3]],["bool",15]],[[["__darwin_arm_neon_state64",3]],["bool",15]],[[["in6_addr",3]],["bool",15]],[[["in6_addr",3]],["booldir",4]],[[],["group",3]],[[],["utimbuf",3]],[[],["timeval",3]],[[],["timespec",3]],[[],["rlimit",3]],[[],["rusage",3]],[[],["ipv6_mreq",3]],[[],["hostent",3]],[[],["iovec",3]],[[],["pollfd",3]],[[],["winsize",3]],[[],["linger",3]],[[],["sigval",3]],[[],["itimerval",3]],[[],["tms",3]],[[],["servent",3]],[[],["protoent",3]],[[],["file",4]],[[],["fpos_t",4]],[[],["sockaddr",3]],[[],["sockaddr_in6",3]],[[],["passwd",3]],[[],["ifaddrs",3]],[[],["fd_set",3]],[[],["tm",3]],[[],["msghdr",3]],[[],["cmsghdr",3]],[[],["fsid_t",3]],[[],["if_nameindex",3]],[[],["regex_t",3]],[[],["regmatch_t",3]],[[],["sockaddr_un",3]],[[],["utsname",3]],[[],["timezone",4]],[[],["ip_mreq",3]],[[],["aiocb",3]],[[],["glob_t",3]],[[],["addrinfo",3]],[[],["mach_timebase_info",3]],[[],["stat",3]],[[],["pthread_mutexattr_t",3]],[[],["pthread_condattr_t",3]],[[],["pthread_rwlockattr_t",3]],[[],["siginfo_t",3]],[[],["sigaction",3]],[[],["stack_t",3]],[[],["fstore_t",3]],[[],["radvisory",3]],[[],["statvfs",3]],[[],["dl_info",3]],[[],["sockaddr_in",3]],[[],["kevent64_s",3]],[[],["dqblk",3]],[[],["if_msghdr",3]],[[],["termios",3]],[[],["flock",3]],[[],["sf_hdtr",3]],[[],["lconv",3]],[[],["proc_taskinfo",3]],[[],["proc_bsdinfo",3]],[[],["proc_taskallinfo",3]],[[],["xsw_usage",3]],[[],["xucred",3]],[[],["mach_header",3]],[[],["mach_header_64",3]],[[],["segment_command",3]],[[],["segment_command_64",3]],[[],["load_command",3]],[[],["sockaddr_dl",3]],[[],["sockaddr_inarp",3]],[[],["sockaddr_ctl",3]],[[],["in_pktinfo",3]],[[],["in6_pktinfo",3]],[[],["ipc_perm",3]],[[],["sembuf",3]],[[],["arphdr",3]],[[],["in_addr",3]],[[],["sa_endpoints_t",3]],[[],["timex",3]],[[],["ntptimeval",3]],[[],["kevent",3]],[[],["semid_ds",3]],[[],["shmid_ds",3]],[[],["proc_threadinfo",3]],[[],["statfs",3]],[[],["dirent",3]],[[],["pthread_rwlock_t",3]],[[],["pthread_mutex_t",3]],[[],["pthread_cond_t",3]],[[],["sockaddr_storage",3]],[[],["utmpx",3]],[[],["sigevent",3]],[[],["processor_cpu_load_info",3]],[[],["processor_basic_info",3]],[[],["processor_set_basic_info",3]],[[],["processor_set_load_info",3]],[[],["semun",19]],[[],["timeval32",3]],[[],["if_data",3]],[[],["bpf_hdr",3]],[[],["pthread_attr_t",3]],[[],["max_align_t",3]],[[],["ucontext_t",3]],[[],["__darwin_mcontext64",3]],[[],["__darwin_arm_exception_state64",3]],[[],["__darwin_arm_thread_state64",3]],[[],["__darwin_arm_neon_state64",3]],[[],["in6_addr",3]],[[]],[[],["sigval",3]],[[],["pid_t",6]],[[],["uid_t",6]],[[],["c_int",6]]],"p":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"msghdr"],[3,"cmsghdr"],[3,"if_nameindex"],[3,"regmatch_t"],[3,"sockaddr_un"],[3,"utsname"],[3,"ip_mreq"],[3,"aiocb"],[3,"glob_t"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"kevent64_s"],[3,"dqblk"],[3,"if_msghdr"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"proc_taskinfo"],[3,"proc_bsdinfo"],[3,"proc_taskallinfo"],[3,"xsw_usage"],[3,"xucred"],[3,"mach_header"],[3,"mach_header_64"],[3,"segment_command"],[3,"segment_command_64"],[3,"load_command"],[3,"sockaddr_dl"],[3,"sockaddr_inarp"],[3,"sockaddr_ctl"],[3,"in_pktinfo"],[3,"in6_pktinfo"],[3,"ipc_perm"],[3,"sembuf"],[3,"arphdr"],[3,"in_addr"],[3,"sa_endpoints_t"],[3,"timex"],[3,"ntptimeval"],[3,"kevent"],[3,"semid_ds"],[3,"shmid_ds"],[3,"proc_threadinfo"],[3,"statfs"],[3,"dirent"],[3,"sockaddr_storage"],[3,"utmpx"],[3,"sigevent"],[3,"processor_cpu_load_info"],[3,"processor_basic_info"],[3,"processor_set_basic_info"],[3,"processor_set_load_info"],[19,"semun"],[3,"timeval32"],[3,"if_data"],[3,"bpf_hdr"],[3,"ucontext_t"],[3,"__darwin_mcontext64"],[3,"__darwin_arm_exception_state64"],[3,"__darwin_arm_thread_state64"],[3,"__darwin_arm_neon_state64"],[3,"in6_addr"],[3,"max_align_t"],[3,"pthread_attr_t"],[4,"timezone"],[3,"pthread_mutexattr_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutex_t"],[3,"pthread_cond_t"],[3,"fd_set"],[3,"fsid_t"],[3,"regex_t"],[4,"DIR"],[4,"FILE"],[4,"fpos_t"],[4,"c_void"]]},\
"libz_sys":{"doc":"","t":[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,4,4,6,3,12,12,12,12,12,12,12,12,12,12,12,12,12,6,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["adler32","crc32","deflate","deflateBound","deflateCopy","deflateEnd","deflateInit_","deflateInit2_","deflateParams","deflatePrime","deflateReset","deflateSetDictionary","deflateSetHeader","deflateTune","inflate","inflateBack","inflateBackEnd","inflateBackInit_","inflateCopy","inflateEnd","inflateGetHeader","inflateInit_","inflateInit2_","inflateMark","inflatePrime","inflateReset","inflateReset2","inflateSetDictionary","inflateSync","zlibCompileFlags","zlibVersion","adler32_combine","compress","compress2","compressBound","crc32_combine","gzdirect","gzdopen","gzclearerr","gzclose","gzeof","gzerror","gzflush","gzgetc","gzgets","gzopen","gzputc","gzputs","gzread","gzrewind","gzseek","gzsetparams","gztell","gzungetc","gzwrite","uncompress","alloc_func","Bytef","free_func","gzFile","in_func","out_func","uInt","uLong","uLongf","voidp","voidpc","voidpf","gzFile_s","internal_state","z_off_t","gz_header","text","time","xflags","os","extra","extra_len","extra_max","name","name_max","comment","comm_max","hcrc","done","gz_headerp","z_stream","next_in","avail_in","total_in","next_out","avail_out","total_out","msg","state","zalloc","zfree","opaque","data_type","adler","reserved","z_streamp","Z_NO_FLUSH","Z_PARTIAL_FLUSH","Z_SYNC_FLUSH","Z_FULL_FLUSH","Z_FINISH","Z_BLOCK","Z_TREES","Z_OK","Z_STREAM_END","Z_NEED_DICT","Z_ERRNO","Z_STREAM_ERROR","Z_DATA_ERROR","Z_MEM_ERROR","Z_BUF_ERROR","Z_VERSION_ERROR","Z_NO_COMPRESSION","Z_BEST_SPEED","Z_BEST_COMPRESSION","Z_DEFAULT_COMPRESSION","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_DEFAULT_STRATEGY","Z_BINARY","Z_TEXT","Z_ASCII","Z_UNKNOWN","Z_DEFLATED","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","clone","clone"],"q":["libz_sys","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"di":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,2],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["gz_header",3]],[[],["z_stream",3]]],"p":[[3,"gz_header"],[3,"z_stream"],[4,"gzFile_s"],[4,"internal_state"]]},\
"maplit":{"doc":"Macros for container literals with specific type.","t":[14,14,14,14,14],"n":["hashmap","hashset","btreemap","btreeset","convert_args"],"q":["maplit","","","",""],"d":["Create a <strong>HashMap</strong> from a list of key-value pairs","Create a <strong>HashSet</strong> from a list of elements.","Create a <strong>BTreeMap</strong> from a list of key-value pairs","Create a <strong>BTreeSet</strong> from a list of elements.","Macro that converts the keys or key-value pairs passed to …"],"i":[0,0,0,0,0],"f":[null,null,null,null,null],"p":[]},\
"matrixmultiply":{"doc":"General matrix multiplication for f32, f64 matrices. …","t":[5,5],"n":["dgemm","sgemm"],"q":["matrixmultiply",""],"d":["General matrix multiplication (f64)","General matrix multiplication (f32)"],"i":[0,0],"f":[[[["usize",15],["f64",15],["isize",15]]],[[["usize",15],["f32",15],["isize",15]]]],"p":[]},\
"mcrt":{"doc":"Monte-Carlo radiative transfer simulation binary. Compute …","t":[17,5,5,5,5,5],"n":["BACKUP_TERM_WIDTH","main","initialisation","load_parameters","gen_detector_registers","gen_base_output"],"q":["mcrt","","","","",""],"d":["Backup print width if the terminal width can not be …","Main program function.","Initialise the input arguments.","Load the required files and form the input parameters.","Generate the detector registers.","Generate the base output instance."],"i":[0,0,0,0,0,0],"f":[null,[[]],[[["usize",15]]],[[["usize",15],["path",3]],["parameters",3]],[[["set",3],["engine",4]]],[[["set",3],["engine",4],["grid",3],["register",3]],["output",3]]],"p":[]},\
"memchr":{"doc":"The <code>memchr</code> crate provides heavily optimized routines for …","t":[3,3,3,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Memchr","Memchr2","Memchr3","memchr_iter","memchr2_iter","memchr3_iter","memrchr_iter","memrchr2_iter","memrchr3_iter","memchr","memchr2","memchr3","memrchr","memrchr2","memrchr3","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","next_back","next_back","next_back","next","size_hint","next","size_hint","next","size_hint","new","new","new"],"q":["memchr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator for <code>memchr</code>.","An iterator for <code>memchr2</code>.","An iterator for <code>memchr3</code>.","An iterator over all occurrences of the needle in a …","An iterator over all occurrences of the needles in a …","An iterator over all occurrences of the needles in a …","An iterator over all occurrences of the needle in a …","An iterator over all occurrences of the needles in a …","An iterator over all occurrences of the needles in a …","Search for the first occurrence of a byte in a slice.","Like <code>memchr</code>, but searches for either of two bytes instead …","Like <code>memchr</code>, but searches for any of three bytes instead …","Search for the last occurrence of a byte in a slice.","Like <code>memrchr</code>, but searches for either of two bytes …","Like <code>memrchr</code>, but searches for any of three bytes instead …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new iterator that yields all positions of …","Creates a new iterator that yields all positions of …","Create a new <code>Memchr3</code> that’s initialized to zero with a …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,1,2,3,1,1,2,2,3,3,1,2,3],"f":[null,null,null,[[["u8",15]],["memchr",3]],[[["u8",15]],["memchr2",3]],[[["u8",15]],["memchr3",3]],[[["u8",15]],[["memchr",3],["rev",3]]],[[["u8",15]],[["rev",3],["memchr2",3]]],[[["u8",15]],[["rev",3],["memchr3",3]]],[[["u8",15]],[["usize",15],["option",4]]],[[["u8",15]],[["usize",15],["option",4]]],[[["u8",15]],[["usize",15],["option",4]]],[[["u8",15]],[["usize",15],["option",4]]],[[["u8",15]],[["usize",15],["option",4]]],[[["u8",15]],[["usize",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[["u8",15]],["memchr",3]],[[["u8",15]],["memchr2",3]],[[["u8",15]],["memchr3",3]]],"p":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]},\
"memoffset":{"doc":"A crate used for calculating offsets of struct members …","t":[14,14,14,14,14],"n":["raw_field","raw_field_tuple","offset_of","offset_of_tuple","span_of"],"q":["memoffset","","","",""],"d":["Computes a const raw pointer to the given field of the …","Computes a const raw pointer to the given field of the …","Calculates the offset of the specified field from the …","Calculates the offset of the specified field from the …","Produces a range instance representing the sub-slice …"],"i":[0,0,0,0,0],"f":[null,null,null,null,null],"p":[]},\
"minifb":{"doc":"minifb is a cross platform library written in Rust that …","t":[4,13,13,13,13,13,13,13,4,13,13,4,13,13,13,4,13,13,13,4,13,13,13,13,13,13,13,13,8,10,4,13,13,13,13,6,8,10,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,5,4,13,13,13,13,3,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,3,12,12,3,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,3,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Scale","FitScreen","X1","X2","X4","X8","X16","X32","KeyRepeat","Yes","No","MouseButton","Left","Middle","Right","MouseMode","Pass","Clamp","Discard","CursorStyle","Arrow","Ibeam","Crosshair","ClosedHand","OpenHand","ResizeLeftRight","ResizeUpDown","ResizeAll","InputCallback","add_char","Error","MenusNotSupported","MenuExists","WindowCreate","UpdateFailed","Result","HasRawWindowHandle","raw_window_handle","Key","Key0","Key1","Key2","Key3","Key4","Key5","Key6","Key7","Key8","Key9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","F13","F14","F15","Down","Left","Right","Up","Apostrophe","Backquote","Backslash","Comma","Equal","LeftBracket","Minus","Period","RightBracket","Semicolon","Slash","Backspace","Delete","End","Enter","Escape","Home","Insert","Menu","PageDown","PageUp","Pause","Space","Tab","NumLock","CapsLock","ScrollLock","LeftShift","RightShift","LeftCtrl","RightCtrl","NumPad0","NumPad1","NumPad2","NumPad3","NumPad4","NumPad5","NumPad6","NumPad7","NumPad8","NumPad9","NumPadDot","NumPadSlash","NumPadAsterisk","NumPadMinus","NumPadPlus","NumPadEnter","LeftAlt","RightAlt","LeftSuper","RightSuper","Unknown","Count","Window","clamp","ScaleMode","Stretch","AspectRatioStretch","Center","UpperLeft","WindowOptions","borderless","title","resize","scale","scale_mode","topmost","transparency","none","new","set_title","get_window_handle","update_with_buffer","update","is_open","set_position","topmost","set_background_color","set_cursor_visibility","limit_update_rate","get_size","get_mouse_pos","get_unscaled_mouse_pos","get_mouse_down","get_scroll_wheel","set_cursor_style","get_keys","get_keys_pressed","get_keys_released","is_key_down","is_key_pressed","is_key_released","set_key_repeat_delay","set_key_repeat_rate","is_active","set_input_callback","add_menu","remove_menu","get_posix_menus","get_unix_menus","is_menu_pressed","MENU_KEY_COMMAND","MENU_KEY_WIN","MENU_KEY_SHIFT","MENU_KEY_CTRL","MENU_KEY_ALT","UnixMenu","name","items","UnixMenuItem","sub_menu","handle","id","label","enabled","key","modifier","Menu","new","destroy_menu","add_sub_menu","add_separator","add_menu_item","add_item","remove_item","MenuItem","id","label","enabled","key","modifier","new","shortcut","separator","enabled","build","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","cmp","eq","eq","eq","eq","eq","eq","partial_cmp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","hash","raw_window_handle"],"q":["minifbd":["Scale will scale the frame buffer and the window that is …","This mode checks your current screen resolution and will …","1X scale (which means leave the corrdinates sent into …","2X window scale (Example: 320 x 200 -> 640 x 400)","4X window scale (Example: 320 x 200 -> 1280 x 800)","8X window scale (Example: 320 x 200 -> 2560 x 1600)","16X window scale (Example: 320 x 200 -> 5120 x 3200)","32 window scale (Example: 320 x 200 -> 10240 x 6400)","Used for is_key_pressed and get_keys_pressed() to …","Use repeat","Don’t use repeat","The various mouse buttons that are availible","Left mouse button","Middle mouse button","Right mouse button","The diffrent modes that can be used to decide how mouse …","Return mouse coords from outside of the window (may be …","Clamp the mouse coordinates within the window","Discared if the mouse is outside the window","Different style of cursors that can be used","Regular arrow style (this is what the cursor normal looks …","Used when indicating insertion (like text field)","Cross-hair cursor","Closed hand which useful for dragging things, may use …","Open hand which useful for indicating drangable things, …","Rezining left-rigth direction","Rezining up-down direction","Resize in all directions","This trait can be implemented and set with …","","Errors that can be returned from various operations","Returned if menu Menu function isn’t supported","Menu already exists","Menu already exists","Unable to Update","","Window that wraps around a raw window handle.","","Key is used by the get key functions to check if some …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Used when an Unknown key has been pressed","","Window is used to open up a window. It’s possible to …","","On some OS (X11 for example) it’s possible a window can …","Stretch the buffer in the whole window meaning if your …","Keep the correct aspect ratio to be displayed while …","Places the buffer in the middle of the window without any …","Same as Center but places the buffer in the upper left …","WindowOptions is creation settings for the window. By …","If the window should be borderless (default: false)","If the window should have a title (default: true)","If it should be possible to resize the window (default: …","Scale of the window that used in conjunction with …","Adjust how the scaling of the buffer used with …","Should the window be the topmost window (default: false)","Specifies whether or not the window is allowed to draw …","Required for transparency on windows. Should be mutually …","Opens up a new window","Allows you to set a new title of the window after creation","Returns the native handle for a window which is an opaque …","Updates the window with a 32-bit pixel buffer. The …","Updates the window (this is required to call in order to …","Checks if the window is still open. A window can be …","Sets the position of the window. This is useful if you …","Makes the window the topmost window and makes it stay …","Sets the background color that is used with …","Changes whether or not the cursor image should be shown …","Limits the update rate of polling for new events in order …","Returns the current size of the window","Get the current position of the mouse relative to the …","Get the current position of the mouse relative to the …","Check if a mouse button is down or not","Get the current movement of the scroll wheel. Scroll …","Set a different cursor style. This can be used if you …","Get the current keys that are down.","Get the current pressed keys. Repeat can be used to …","Get the current released keys.","Check if a single key is down.","Check if a single key is pressed. KeyRepeat will control …","Check if a single key was released since last call to …","Sets the delay for when a key is being held before it …","Sets the rate in between when the keys has passed the …","Returns if this windows is the current active one","Set input callback to recive callback on char input","This allows adding menus to your windows. As menus …","Remove a menu that has been added with [#add_menu]","Get POSIX menus. Will only return menus on POSIX-like …","","Check if a menu item has been pressed","Command key on Mac OS","Windows key on Windows","Shift key","Control key","Alt key","Used on POSIX systems (Linux, FreeBSD, etc) as menus aren…","Name of the menu","All items of the menu.","Used on POSIX systems (Linux, FreeBSD, etc) as menus aren…","Set to a menu if there is a Item is a sub_menu otherwise …","Handle of the MenuItem","Id of the item (set by the user from the outside and …","Name of the item","Set to true if enabled otherwise false","Shortcut key","Modifier for the key (Shift, Ctrl, etc)","Menu holds info for menus","Create a new menu. Returns error if failed","Destroys a menu. Currently not implemented","Adds a sub menu to the current menu","Adds a menu separator","Adds an item to the menu","Adds an item to the menu. Notice that you need to call “…","Removes an item from the menu","Holds info about each item in a menu","","","","","","Creates a new menu item","Sets a shortcut key and modifer (and returns itself)","Sets item to a separator","Sets the menu item disabled/or not","Must be called to finalize building of a menu item when …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,0,2,2,0,3,3,3,0,4,4,4,0,5,5,5,5,5,5,5,5,0,6,0,7,7,7,7,0,0,8,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,10,10,10,10,0,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,13,13,0,14,14,14,14,14,14,14,0,15,15,15,15,15,15,15,0,16,16,16,16,16,16,16,16,16,16,7,7,7,7,7,7,7,7,9,9,9,9,9,9,9,9,9,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,12,12,12,12,12,12,12,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,1,2,3,4,5,9,10,11,13,14,16,16,11,9,2,3,4,5,9,10,9,1,2,3,4,5,7,9,12,10,11,13,14,15,16,7,9,12],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u32",15]]],null,null,null,null,null,null,null,[[],["rawwindowhandle",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["partialord",8]],["partialord",8]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["windowoptions",3],["str",15]],[["window",3],["result",6]]],[[["str",15]]],[[]],[[["usize",15]],["result",6]],[[]],[[],["bool",15]],[[["isize",15]]],[[["bool",15]]],[[["usize",15]]],[[["bool",15]]],[[["option",4],["duration",3]]],[[]],[[["mousemode",4]],["option",4]],[[["mousemode",4]],["option",4]],[[["mousebutton",4]],["bool",15]],[[],["option",4]],[[["cursorstyle",4]]],[[],[["vec",3],["option",4]]],[[["keyrepeat",4]],[["vec",3],["option",4]]],[[],[["vec",3],["option",4]]],[[["key",4]],["bool",15]],[[["key",4],["keyrepeat",4]],["bool",15]],[[["key",4]],["bool",15]],[[["f32",15]]],[[["f32",15]]],[[],["bool",15]],[[["box",3],["inputcallback",8]]],[[["menu",3]],["menuhandle",3]],[[["menuhandle",3]]],[[],[["vec",3],["option",4]]],[[],[["vec",3],["option",4]]],[[],[["usize",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15]],[["menu",3],["result",6]]],[[]],[[["menu",3],["str",15]]],[[]],[[["menuitem",3]],["menuitemhandle",3]],[[["usize",15],["str",15]],["menuitem",3]],[[["menuitemhandle",3]]],null,null,null,null,null,null,[[["usize",15],["str",15]],["menuitem",3]],[[["usize",15],["key",4]]],[[]],[[["bool",15]]],[[],["menuitemhandle",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["scale",4]],[[],["keyrepeat",4]],[[],["mousebutton",4]],[[],["mousemode",4]],[[],["cursorstyle",4]],[[],["key",4]],[[],["scalemode",4]],[[],["windowoptions",3]],[[],["unixmenu",3]],[[],["unixmenuitem",3]],[[]],[[]],[[],["windowoptions",3]],[[["key",4]],["ordering",4]],[[["keyrepeat",4]],["bool",15]],[[["mousebutton",4]],["bool",15]],[[["mousemode",4]],["bool",15]],[[["cursorstyle",4]],["bool",15]],[[["key",4]],["bool",15]],[[["scalemode",4]],["bool",15]],[[["key",4]],[["ordering",4],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["rawwindowhandle",4]]],"p":[[4,"Scale"],[4,"KeyRepeat"],[4,"MouseButton"],[4,"MouseMode"],[4,"CursorStyle"],[8,"InputCallback"],[4,"Error"],[8,"HasRawWindowHandle"],[4,"Key"],[4,"ScaleMode"],[3,"WindowOptions"],[3,"Window"],[3,"UnixMenu"],[3,"UnixMenuItem"],[3,"Menu"],[3,"MenuItem"]]},\
"miniz_oxide":{"doc":"A pure rust replacement for the miniz DEFLATE/zlib …","t":[0,0,0,17,17,17,17,17,17,17,17,4,13,13,13,13,13,4,13,13,13,13,11,4,13,13,13,13,3,11,11,11,11,11,11,11,11,11,3,12,5,5,5,0,5,4,13,13,13,13,13,13,5,5,0,0,0,17,17,17,17,17,3,11,11,11,5,0,3,11,11,11,11,11,11,5,4,13,13,13,13,13,13,13,11,5,5,4,13,13,13,13,13,13,11,4,13,13,13,4,13,13,13,13,13,13,13,4,13,13,6,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["deflate","core","deflate_flags","TDEFL_WRITE_ZLIB_HEADER","TDEFL_COMPUTE_ADLER32","TDEFL_GREEDY_PARSING_FLAG","TDEFL_NONDETERMINISTIC_PARSING_FLAG","TDEFL_RLE_MATCHES","TDEFL_FILTER_MATCHES","TDEFL_FORCE_ALL_STATIC_BLOCKS","TDEFL_FORCE_ALL_RAW_BLOCKS","CompressionStrategy","Default","Filtered","HuffmanOnly","RLE","Fixed","TDEFLFlush","None","Sync","Full","Finish","new","TDEFLStatus","BadParam","PutBufFailed","Okay","Done","CompressorOxide","new","adler32","prev_return_status","flags","data_format","reset","set_compression_level","set_compression_level_raw","set_format_and_level","CallbackFunc","put_buf_func","compress","compress_to_output","create_comp_flags_from_zip_params","stream","deflate","CompressionLevel","NoCompression","BestSpeed","BestCompression","UberCompression","DefaultLevel","DefaultCompression","compress_to_vec","compress_to_vec_zlib","inflate","core","inflate_flags","TINFL_FLAG_PARSE_ZLIB_HEADER","TINFL_FLAG_HAS_MORE_INPUT","TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","TINFL_FLAG_COMPUTE_ADLER32","TINFL_LZ_DICT_SIZE","DecompressorOxide","new","init","adler32","decompress","stream","InflateState","new","new_boxed","decompressor","last_status","new_boxed_with_window_bits","reset","inflate","TINFLStatus","FailedCannotMakeProgress","BadParam","Adler32Mismatch","Failed","Done","NeedsMoreInput","HasMoreOutput","from_i32","decompress_to_vec","decompress_to_vec_zlib","MZFlush","None","Partial","Sync","Full","Finish","Block","new","MZStatus","Ok","StreamEnd","NeedDict","MZError","ErrNo","Stream","Data","Mem","Buf","Version","Param","DataFormat","Zlib","Raw","MZResult","StreamResult","bytes_consumed","bytes_written","status","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","from","from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","ne","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash"],"q":["miniz_oxide","miniz_oxide::deflate","miniz_oxide::deflate::core","miniz_oxide::deflate::core::deflate_flags","","","","","","","","miniz_oxide::deflate::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","miniz_oxide::deflate","miniz_oxide::deflate::stream","miniz_oxide::deflate","","","","","","","","","miniz_oxide","miniz_oxide::inflate","miniz_oxide::inflate::core","miniz_oxide::inflate::core::inflate_flags","","","","miniz_oxide::inflate::core","","","","","","miniz_oxide::inflate","miniz_oxide::inflate::stream","","","","","","","","miniz_oxide::inflate","","","","","","","","","","","miniz_oxide","","","","","","","","","","","","","","","","","","","","","","","","","","","","miniz_oxide::deflate::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","miniz_oxide::deflate","","","","","","","","","miniz_oxide::inflate::core","","","","","","","miniz_oxide::inflate::stream","","","","","","","miniz_oxide::inflate","","","","","","","","","miniz_oxide","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","miniz_oxide::deflate::core","miniz_oxide","","miniz_oxide::deflate::core","","","miniz_oxide::deflate","miniz_oxide::inflate","miniz_oxide","","","","","miniz_oxide::deflate::core","miniz_oxide::inflate::core","miniz_oxide::inflate::stream","miniz_oxide::deflate::core","","","miniz_oxide::deflate","miniz_oxide::inflate","miniz_oxide","","","","","","miniz_oxide::deflate::core","","","miniz_oxide::deflate","miniz_oxide::inflate","miniz_oxide","","","","","miniz_oxide::deflate::core","","","miniz_oxide::deflate","miniz_oxide::inflate","miniz_oxide","","","",""],"d":["This module contains functionality for compression.","Streaming compression functionality.","","Whether to use a zlib wrapper.","Should we compute the adler32 checksum.","Should we use greedy parsing (as opposed to lazy parsing …","Used in miniz to skip zero-initializing hash and dict. We …","Only look for matches with a distance of 0.","Only use matches that are at least 6 bytes long.","Force the compressor to only output static blocks. …","Force the compressor to only output raw/uncompressed …","Strategy setting for compression.","Don’t use any of the special strategies.","Only use matches that are at least 5 bytes long.","Don’t look for matches, only huffman encode the …","Only look for matches with a distance of 1, i.e do …","Only use static/fixed blocks. (Blocks using the default …","A list of deflate flush types.","Compress as much as there is space for, and then return …","Try to flush the current data and output an empty raw …","Same as sync, but reset the dictionary so that the …","Try to flush everything and end the stream.","","Return status codes.","","","","","Main compression struct.","Create a new <code>CompressorOxide</code> with the given flags.","Get the adler32 checksum of the currently encoded data.","Get the return status of the previous <code>compress</code> call with …","Get the raw compressor flags.","Returns whether the compressor is wrapping the data in a …","Reset the state of the compressor, keeping the same …","Set the compression level of the compressor.","Set the compression level of the compressor using an …","Update the compression settings of the compressor.","Callback function and user used in <code>compress_to_output</code>.","","Main compression function. Tries to compress as much as …","Main compression function. Callbacks output.","Create a set of compression flags using parameters used …","Extra streaming compression functionality.","Try to compress from input to output with the given …","How much processing the compressor should do to compress …","Don’t do any compression, only output uncompressed …","Fast compression. Uses a special compression routine that …","Slow/high compression. Do a lot of checks to try to find …","Even more checks, can be very slow.","Default compromise between speed and compression.","Use the default compression level.","Compress the input data to a vector, using the specified …","Compress the input data to a vector, using the specified …","This module contains functionality for decompression.","Streaming decompression functionality.","","Should we try to parse a zlib header?","There is more input that hasn’t been given to the …","The output buffer should not wrap around.","Should we calculate the adler32 checksum of the output …","","Main decompression struct.","Create a new tinfl_decompressor with all fields set to 0.","Set the current state to <code>Start</code>.","Returns the adler32 checksum of the currently …","Main decompression function. Keeps decompressing data …","Extra streaming decompression functionality.","A struct that compbines a decompressor with extra data …","Create a new state.","Create a new state on the heap.","Access the innner decompressor.","Return the status of the last call to <code>inflate</code> with this …","Create a new state using miniz/zlib style window bits …","Reset the decompressor without re-allocating memory, …","Try to decompress from <code>input</code> to <code>output</code> with the given …","Return status codes.","More input data was expected, but the caller indicated …","One or more of the input parameters were invalid.","The decompression went fine, but the adler32 checksum did …","Failed to decompress due to invalid data.","Finished decomression without issues.","The decompressor needs more input data to continue …","There is still pending data that didn’t fit in the …","","Decompress the deflate-encoded data in <code>input</code> to a vector.","Decompress the deflate-encoded data (with a zlib wrapper) …","A list of flush types.","Don’t force any flushing. Used when more input data is …","Zlib partial flush. Currently treated as <code>Sync</code>.","Finish compressing the currently buffered data, and …","Same as <code>Sync</code>, but resets the compression dictionary so …","Attempt to flush the remaining data and end the stream.","Not implemented.","Create an MZFlush value from an integer value.","A list of miniz successful status codes.","","","","A list of miniz failed status codes.","","","","","","","","How compressed data is wrapped.","Wrapped using the zlib format.","Raw DEFLATE.","<code>Result</code> alias for all miniz status codes both successful …","A structure containg the result of a call to the inflate …","The number of bytes consumed from the input slice.","The number of bytes written to the output slice.","The return status of the call.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Initialize the compressor with a level of 4, zlib wrapper …","Create a new tinfl_decompressor with all fields set to 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,2,2,2,2,2,0,3,3,3,3,0,4,4,4,4,4,4,4,4,4,0,5,0,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,7,7,7,0,0,0,8,8,8,8,8,8,0,0,9,9,9,9,9,9,9,9,0,0,0,10,10,10,10,10,10,10,0,11,11,11,0,12,12,12,12,12,12,12,0,13,13,0,0,14,14,14,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,2,15,15,1,2,3,6,9,10,11,12,13,14,4,7,8,1,2,3,6,9,10,11,12,13,14,14,1,2,3,6,9,10,11,12,13,14,1,2,3,6,9,10,11,12,13,14],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["i32",15]],[["mzerror",4],["result",4]]],null,null,null,null,null,null,[[["u32",15]]],[[],["u32",15]],[[],["tdeflstatus",4]],[[],["i32",15]],[[],["dataformat",4]],[[]],[[["compressionlevel",4]]],[[["u8",15]]],[[["dataformat",4],["u8",15]]],null,null,[[["tdeflflush",4],["compressoroxide",3]]],[[["tdeflflush",4],["compressoroxide",3]]],[[["i32",15]],["u32",15]],null,[[["mzflush",4],["compressoroxide",3]],["streamresult",3]],null,null,null,null,null,null,null,[[["u8",15]],[["vec",3],["u8",15]]],[[["u8",15]],[["vec",3],["u8",15]]],null,null,null,null,null,null,null,null,null,[[],["decompressoroxide",3]],[[]],[[],[["u32",15],["option",4]]],[[["cursor",3],["u32",15],["decompressoroxide",3]]],null,null,[[["dataformat",4]],["inflatestate",3]],[[["dataformat",4]],[["inflatestate",3],["box",3]]],[[],["decompressoroxide",3]],[[],["tinflstatus",4]],[[["i32",15]],[["inflatestate",3],["box",3]]],[[["dataformat",4]]],[[["inflatestate",3],["mzflush",4]],["streamresult",3]],null,null,null,null,null,null,null,null,[[["i32",15]],[["tinflstatus",4],["option",4]]],[[],[["result",4],["tinflstatus",4],["vec",3]]],[[],[["result",4],["tinflstatus",4],["vec",3]]],null,null,null,null,null,null,null,[[["i32",15]],[["mzerror",4],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["mzflush",4]]],[[["streamresult",3]]],[[["streamresult",3]]],[[],["compressionstrategy",4]],[[],["tdeflflush",4]],[[],["tdeflstatus",4]],[[],["compressionlevel",4]],[[],["tinflstatus",4]],[[],["mzflush",4]],[[],["mzstatus",4]],[[],["mzerror",4]],[[],["dataformat",4]],[[],["streamresult",3]],[[]],[[]],[[]],[[["compressionstrategy",4]],["bool",15]],[[["tdeflflush",4]],["bool",15]],[[["tdeflstatus",4]],["bool",15]],[[["compressionlevel",4]],["bool",15]],[[["tinflstatus",4]],["bool",15]],[[["mzflush",4]],["bool",15]],[[["mzstatus",4]],["bool",15]],[[["mzerror",4]],["bool",15]],[[["dataformat",4]],["bool",15]],[[["streamresult",3]],["bool",15]],[[["streamresult",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[4,"CompressionStrategy"],[4,"TDEFLFlush"],[4,"TDEFLStatus"],[3,"CompressorOxide"],[3,"CallbackFunc"],[4,"CompressionLevel"],[3,"DecompressorOxide"],[3,"InflateState"],[4,"TINFLStatus"],[4,"MZFlush"],[4,"MZStatus"],[4,"MZError"],[4,"DataFormat"],[3,"StreamResult"],[6,"MZResult"]]},\
"nalgebra":{"doc":"nalgebra","tn":["base","allocator","Allocator","Buffer","allocate_uninitialized","allocate_from_iterator","Reallocator","reallocate_copy","SameShapeR","SameShapeC","SameShapeAllocator","SameShapeVectorAllocator","constraint","ShapeConstraint","AreMultipliable","DimEq","Representative","SameNumberOfRows","Representative","SameNumberOfColumns","Representative","SameDimension","Representative","coordinates","X","x","XY","x","y","XYZ","x","y","z","XYZW","x","y","z","w","XYZWA","x","y","z","w","a","XYZWAB","x","y","z","w","a","b","IJKW","i","j","k","w","M2x2","m11","m21","m12","m22","M2x3","m11","m21","m12","m22","m13","m23","M2x4","m11","m21","m12","m22","m13","m23","m14","m24","M2x5","m11","m21","m12","m22","m13","m23","m14","m24","m15","m25","M2x6","m11","m21","m12","m22","m13","m23","m14","m24","m15","m25","m16","m26","M3x2","m11","m21","m31","m12","m22","m32","M3x3","m11","m21","m31","m12","m22","m32","m13","m23","m33","M3x4","m11","m21","m31","m12","m22","m32","m13","m23","m33","m14","m24","m34","M3x5","m11","m21","m31","m12","m22","m32","m13","m23","m33","m14","m24","m34","m15","m25","m35","M3x6","m11","m21","m31","m12","m22","m32","m13","m23","m33","m14","m24","m34","m15","m25","m35","m16","m26","m36","M4x2","m11","m21","m31","m41","m12","m22","m32","m42","M4x3","m11","m21","m31","m41","m12","m22","m32","m42","m13","m23","m33","m43","M4x4","m11","m21","m31","m41","m12","m22","m32","m42","m13","m23","m33","m43","m14","m24","m34","m44","M4x5","m11","m21","m31","m41","m12","m22","m32","m42","m13","m23","m33","m43","m14","m24","m34","m44","m15","m25","m35","m45","M4x6","m11","m21","m31","m41","m12","m22","m32","m42","m13","m23","m33","m43","m14","m24","m34","m44","m15","m25","m35","m45","m16","m26","m36","m46","M5x2","m11","m21","m31","m41","m51","m12","m22","m32","m42","m52","M5x3","m11","m21","m31","m41","m51","m12","m22","m32","m42","m52","m13","m23","m33","m43","m53","M5x4","m11","m21","m31","m41","m51","m12","m22","m32","m42","m52","m13","m23","m33","m43","m53","m14","m24","m34","m44","m54","M5x5","m11","m21","m31","m41","m51","m12","m22","m32","m42","m52","m13","m23","m33","m43","m53","m14","m24","m34","m44","m54","m15","m25","m35","m45","m55","M5x6","m11","m21","m31","m41","m51","m12","m22","m32","m42","m52","m13","m23","m33","m43","m53","m14","m24","m34","m44","m54","m15","m25","m35","m45","m55","m16","m26","m36","m46","m56","M6x2","m11","m21","m31","m41","m51","m61","m12","m22","m32","m42","m52","m62","M6x3","m11","m21","m31","m41","m51","m61","m12","m22","m32","m42","m52","m62","m13","m23","m33","m43","m53","m63","M6x4","m11","m21","m31","m41","m51","m61","m12","m22","m32","m42","m52","m62","m13","m23","m33","m43","m53","m63","m14","m24","m34","m44","m54","m64","M6x5","m11","m21","m31","m41","m51","m61","m12","m22","m32","m42","m52","m62","m13","m23","m33","m43","m53","m63","m14","m24","m34","m44","m54","m64","m15","m25","m35","m45","m55","m65","M6x6","m11","m21","m31","m41","m51","m61","m12","m22","m32","m42","m52","m62","m13","m23","m33","m43","m53","m63","m14","m24","m34","m44","m54","m64","m15","m25","m35","m45","m55","m65","m16","m26","m36","m46","m56","m66","default_allocator","DefaultAllocator","dimension","Dynamic","new","IsDynamic","IsNotStaticOne","Dim","is","try_to_usize","value","from_usize","DimSum","DimAdd","Output","add","DimNameSum","DimNameAdd","Output","add","DimProd","DimMul","Output","mul","DimNameProd","DimNameMul","Output","mul","DimDiff","DimSub","Output","sub","DimNameDiff","DimNameSub","Output","sub","DimQuot","DimDiv","Output","div","DimNameQuot","DimNameDiv","Output","div","DimMinimum","DimMin","Output","min","DimNameMinimum","DimNameMin","Output","min","DimMaximum","DimMax","Output","max","DimNameMaximum","DimNameMax","Output","max","Const","DimName","USIZE","name","dim","ToConst","Const","ToTypenum","Typenum","U1","U0","U2","U3","U4","U5","U6","U7","U8","U9","U10","U11","U12","U13","U14","U15","U16","U17","U18","U19","U20","U21","U22","U23","U24","U25","U26","U27","U28","U29","U30","U31","U32","U33","U34","U35","U36","U37","U38","U39","U40","U41","U42","U43","U44","U45","U46","U47","U48","U49","U50","U51","U52","U53","U54","U55","U56","U57","U58","U59","U60","U61","U62","U63","U64","U65","U66","U67","U68","U69","U70","U71","U72","U73","U74","U75","U76","U77","U78","U79","U80","U81","U82","U83","U84","U85","U86","U87","U88","U89","U90","U91","U92","U93","U94","U95","U96","U97","U98","U99","U100","U101","U102","U103","U104","U105","U106","U107","U108","U109","U110","U111","U112","U113","U114","U115","U116","U117","U118","U119","U120","U121","U122","U123","U124","U125","U126","U127","iter","MatrixIter","new","MatrixIterMut","new","RowIter","RowIterMut","ColumnIter","ColumnIterMut","storage","SameShapeStorage","Owned","RStride","CStride","Storage","RStride","CStride","ptr","shape","strides","linear_index","get_address_unchecked_linear","get_address_unchecked","get_unchecked_linear","get_unchecked","is_contiguous","as_slice","into_owned","clone_owned","StorageMut","ptr_mut","get_address_unchecked_linear_mut","get_address_unchecked_mut","get_unchecked_linear_mut","get_unchecked_mut","swap_unchecked_linear","swap_unchecked","as_mut_slice","ContiguousStorage","ContiguousStorageMut","ReshapableStorage","Output","reshape_generic","indexing","MatrixIndex","Output","MatrixIndexMut","OutputMut","SquareMatrix","Vector","RowVector","MatrixSum","VectorSum","MatrixCross","Matrix","data","Norm","norm","metric_distance","EuclideanNorm","LpNorm","0","UniformNorm","Scalar","is","inlined_clone","Unit","Normed","Norm","norm","norm_squared","scale_mut","unscale_mut","OMatrix","MatrixMN","MatrixN","SMatrix","DMatrix","MatrixXx1","MatrixXx2","MatrixXx3","MatrixXx4","MatrixXx5","MatrixXx6","Matrix1xX","Matrix2xX","Matrix3xX","Matrix4xX","Matrix5xX","Matrix6xX","Matrix1","Matrix2","Matrix3","Matrix4","Matrix5","Matrix6","Matrix1x2","Matrix1x3","Matrix1x4","Matrix1x5","Matrix1x6","Matrix2x3","Matrix2x4","Matrix2x5","Matrix2x6","Matrix3x4","Matrix3x5","Matrix3x6","Matrix4x5","Matrix4x6","Matrix5x6","Matrix2x1","Matrix3x1","Matrix4x1","Matrix5x1","Matrix6x1","Matrix3x2","Matrix4x2","Matrix5x2","Matrix6x2","Matrix4x3","Matrix5x3","Matrix6x3","Matrix5x4","Matrix6x4","Matrix6x5","DVector","OVector","SVector","VectorN","Vector1","Vector2","Vector3","Vector4","Vector5","Vector6","RowDVector","RowOVector","RowSVector","RowVector1","RowVector2","RowVector3","RowVector4","RowVector5","RowVector6","UnitVector1","UnitVector2","UnitVector3","UnitVector4","UnitVector5","UnitVector6","SMatrixSlice","DMatrixSlice","MatrixSlice1","MatrixSlice2","MatrixSlice3","MatrixSlice4","MatrixSlice5","MatrixSlice6","MatrixSlice1x2","MatrixSlice1x3","MatrixSlice1x4","MatrixSlice1x5","MatrixSlice1x6","MatrixSlice2x1","MatrixSlice2x3","MatrixSlice2x4","MatrixSlice2x5","MatrixSlice2x6","MatrixSlice3x1","MatrixSlice3x2","MatrixSlice3x4","MatrixSlice3x5","MatrixSlice3x6","MatrixSlice4x1","MatrixSlice4x2","MatrixSlice4x3","MatrixSlice4x5","MatrixSlice4x6","MatrixSlice5x1","MatrixSlice5x2","MatrixSlice5x3","MatrixSlice5x4","MatrixSlice5x6","MatrixSlice6x1","MatrixSlice6x2","MatrixSlice6x3","MatrixSlice6x4","MatrixSlice6x5","MatrixSlice1xX","MatrixSlice2xX","MatrixSlice3xX","MatrixSlice4xX","MatrixSlice5xX","MatrixSlice6xX","MatrixSliceXx1","MatrixSliceXx2","MatrixSliceXx3","MatrixSliceXx4","MatrixSliceXx5","MatrixSliceXx6","VectorSlice","SVectorSlice","DVectorSlice","VectorSlice1","VectorSlice2","VectorSlice3","VectorSlice4","VectorSlice5","VectorSlice6","MatrixSliceMutMN","MatrixSliceMutN","SMatrixSliceMut","DMatrixSliceMut","MatrixSliceMut1","MatrixSliceMut2","MatrixSliceMut3","MatrixSliceMut4","MatrixSliceMut5","MatrixSliceMut6","MatrixSliceMut1x2","MatrixSliceMut1x3","MatrixSliceMut1x4","MatrixSliceMut1x5","MatrixSliceMut1x6","MatrixSliceMut2x1","MatrixSliceMut2x3","MatrixSliceMut2x4","MatrixSliceMut2x5","MatrixSliceMut2x6","MatrixSliceMut3x1","MatrixSliceMut3x2","MatrixSliceMut3x4","MatrixSliceMut3x5","MatrixSliceMut3x6","MatrixSliceMut4x1","MatrixSliceMut4x2","MatrixSliceMut4x3","MatrixSliceMut4x5","MatrixSliceMut4x6","MatrixSliceMut5x1","MatrixSliceMut5x2","MatrixSliceMut5x3","MatrixSliceMut5x4","MatrixSliceMut5x6","MatrixSliceMut6x1","MatrixSliceMut6x2","MatrixSliceMut6x3","MatrixSliceMut6x4","MatrixSliceMut6x5","MatrixSliceMut1xX","MatrixSliceMut2xX","MatrixSliceMut3xX","MatrixSliceMut4xX","MatrixSliceMut5xX","MatrixSliceMut6xX","MatrixSliceMutXx1","MatrixSliceMutXx2","MatrixSliceMutXx3","MatrixSliceMutXx4","MatrixSliceMutXx5","MatrixSliceMutXx6","VectorSliceMut","SVectorSliceMut","DVectorSliceMut","VectorSliceMut1","VectorSliceMut2","VectorSliceMut3","VectorSliceMut4","VectorSliceMut5","VectorSliceMut6","ArrayStorage","0","SliceStorage","SliceStorageMut","MatrixSlice","MatrixSliceMut","SliceRange","Size","begin","end","size","VecStorage","MatrixVec","geometry","angle","quaternion","conjugate","inverse","angle_to","rotation_to","lerp","nlerp","slerp","try_slerp","conjugate_mut","inverse_mut","axis","scaled_axis","axis_angle","exp","ln","powf","to_rotation_matrix","to_euler_angles","euler_angles","to_homogeneous","transform_point","transform_vector","inverse_transform_point","inverse_transform_vector","inverse_transform_unit_vector","append_axisangle_linearized","identity","cast","from_axis_angle","from_quaternion","from_euler_angles","from_basis_unchecked","from_rotation_matrix","from_matrix","from_matrix_eps","rotation_between","scaled_rotation_between","rotation_between_axis","scaled_rotation_between_axis","face_towards","new_observer_frames","look_at_rh","look_at_lh","new","new_eps","from_scaled_axis","from_scaled_axis_eps","mean_of","dual_quaternion","conjugate","conjugate_mut","inverse","inverse_mut","isometry_to","lerp","nlerp","sclerp","try_sclerp","rotation","translation","to_isometry","transform_point","transform_vector","inverse_transform_point","inverse_transform_vector","inverse_transform_unit_vector","to_homogeneous","identity","cast","from_parts","from_isometry","from_rotation","angle","sin_angle","cos_angle","scaled_axis","axis_angle","angle_to","conjugate","inverse","conjugate_mut","inverse_mut","to_rotation_matrix","to_homogeneous","transform_point","transform_vector","inverse_transform_point","inverse_transform_vector","inverse_transform_unit_vector","slerp","identity","new","from_angle","from_cos_sin_unchecked","from_scaled_axis","cast","complex","from_complex","from_complex_and_get","from_rotation_matrix","from_basis_unchecked","from_matrix","from_matrix_eps","rotation_to","powf","rotation_between","scaled_rotation_between","rotation_between_axis","scaled_rotation_between_axis","AbstractRotation","identity","inverse","inverse_mut","transform_vector","transform_point","inverse_transform_vector","inverse_transform_unit_vector","inverse_transform_point","Point","coords","Point1","Point2","Point3","Point4","Point5","Point6","Rotation","Rotation2","Rotation3","Quaternion","coords","UnitQuaternion","DualQuaternion","real","dual","UnitDualQuaternion","UnitComplex","Translation","vector","Translation1","Translation2","Translation3","Translation4","Translation5","Translation6","Isometry","rotation","translation","Isometry2","Isometry3","IsometryMatrix2","IsometryMatrix3","Similarity","isometry","Similarity2","Similarity3","SimilarityMatrix2","SimilarityMatrix3","TCategory","has_normalizer","check_homogeneous_invariants","TCategoryMul","Representative","SuperTCategoryOf","SubTCategoryOf","TGeneral","TProjective","TAffine","Transform","Transform2","Projective2","Affine2","Transform3","Projective3","Affine3","Reflection","Orthographic3","Perspective3","linalg","balancing","balance_parlett_reinsch","unbalance","convolve_full","convolve_valid","convolve_same","convolve_full","convolve_valid","convolve_same","determinant","determinant","bidiagonalize","full_piv_lu","lu","qr","col_piv_qr","svd","try_svd","cholesky","udu","hessenberg","schur","try_schur","symmetric_eigen","try_symmetric_eigen","symmetric_tridiagonalize","exp","exp","givens","GivensRotation","identity","new_unchecked","new","try_new","cancel_y","cancel_x","c","s","inverse","rotate","rotate_rows","householder","try_inverse","try_inverse","try_inverse_mut","try_inverse_mut","pow_mut","pow","eigenvalues","complex_eigenvalues","eigenvalues","complex_eigenvalues","solve_lower_triangular","solve_upper_triangular","solve_lower_triangular_mut","solve_lower_triangular_with_diag_mut","solve_upper_triangular_mut","tr_solve_lower_triangular","tr_solve_upper_triangular","tr_solve_lower_triangular_mut","tr_solve_upper_triangular_mut","ad_solve_lower_triangular","ad_solve_upper_triangular","ad_solve_lower_triangular_mut","ad_solve_upper_triangular_mut","solve_lower_triangular","solve_upper_triangular","solve_lower_triangular_mut","solve_lower_triangular_with_diag_mut","solve_upper_triangular_mut","tr_solve_lower_triangular","tr_solve_upper_triangular","tr_solve_lower_triangular_mut","tr_solve_upper_triangular_mut","ad_solve_lower_triangular","ad_solve_upper_triangular","ad_solve_lower_triangular_mut","ad_solve_upper_triangular_mut","solve_lower_triangular_unchecked","solve_upper_triangular_unchecked","solve_lower_triangular_unchecked_mut","solve_lower_triangular_with_diag_unchecked_mut","solve_upper_triangular_unchecked_mut","tr_solve_lower_triangular_unchecked","tr_solve_upper_triangular_unchecked","tr_solve_lower_triangular_unchecked_mut","tr_solve_upper_triangular_unchecked_mut","ad_solve_lower_triangular_unchecked","ad_solve_upper_triangular_unchecked","ad_solve_lower_triangular_unchecked_mut","ad_solve_upper_triangular_unchecked_mut","solve_lower_triangular_unchecked","solve_upper_triangular_unchecked","solve_lower_triangular_unchecked_mut","solve_lower_triangular_with_diag_unchecked_mut","solve_upper_triangular_unchecked_mut","tr_solve_lower_triangular_unchecked","tr_solve_upper_triangular_unchecked","tr_solve_lower_triangular_unchecked_mut","tr_solve_upper_triangular_unchecked_mut","ad_solve_lower_triangular_unchecked","ad_solve_upper_triangular_unchecked","ad_solve_lower_triangular_unchecked_mut","ad_solve_upper_triangular_unchecked_mut","singular_values","rank","pseudo_inverse","symmetric_eigenvalues","symmetric_eigenvalues","Bidiagonal","Cholesky","ColPivQR","FullPivLU","Hessenberg","LU","try_invert_to","PermutationSequence","QR","Schur","SVD","u","v_t","singular_values","SymmetricEigen","eigenvectors","eigenvalues","wilkinson_shift","SymmetricTridiagonal","UDU","u","d","Complex","re","im","ClosedAdd","ClosedDiv","ClosedMul","ClosedSub","ComplexField","RealField","from_real","real","imaginary","modulus","modulus_squared","argument","norm1","scale","unscale","to_polar","to_exp","signum","floor","ceil","round","trunc","fract","mul_add","abs","hypot","recip","conjugate","sin","cos","sin_cos","sinh_cosh","tan","asin","acos","atan","sinh","cosh","tanh","asinh","acosh","atanh","sinc","sinhc","cosc","coshc","log","log2","log10","ln","ln_1p","sqrt","exp","exp2","exp_m1","powi","powf","powc","cbrt","is_finite","try_sqrt","Field","RealField","is_sign_positive","is_sign_negative","copysign","max","min","clamp","atan2","pi","two_pi","frac_pi_2","frac_pi_3","frac_pi_4","frac_pi_6","frac_pi_8","frac_1_pi","frac_2_pi","frac_2_sqrt_pi","e","log2_e","log10_e","ln_2","ln_10","SimdBool","bitmask","and","or","xor","all","any","none","if_else","if_else2","if_else3","SimdComplexField","SimdRealField","from_simd_real","simd_real","simd_imaginary","simd_modulus","simd_modulus_squared","simd_argument","simd_norm1","simd_scale","simd_unscale","simd_to_polar","simd_to_exp","simd_signum","simd_floor","simd_ceil","simd_round","simd_trunc","simd_fract","simd_mul_add","simd_abs","simd_hypot","simd_recip","simd_conjugate","simd_sin","simd_cos","simd_sin_cos","simd_sinh_cosh","simd_tan","simd_asin","simd_acos","simd_atan","simd_sinh","simd_cosh","simd_tanh","simd_asinh","simd_acosh","simd_atanh","simd_sinc","simd_sinhc","simd_cosc","simd_coshc","simd_log","simd_log2","simd_log10","simd_ln","simd_ln_1p","simd_sqrt","simd_exp","simd_exp2","simd_exp_m1","simd_powi","simd_powf","simd_powc","simd_cbrt","simd_horizontal_sum","simd_horizontal_product","SimdPartialOrd","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","SimdRealField","simd_copysign","simd_atan2","simd_default_epsilon","simd_pi","simd_two_pi","simd_frac_pi_2","simd_frac_pi_3","simd_frac_pi_4","simd_frac_pi_6","simd_frac_pi_8","simd_frac_1_pi","simd_frac_2_pi","simd_frac_2_sqrt_pi","simd_e","simd_log2_e","simd_log10_e","simd_ln_2","simd_ln_10","SimdValue","Element","SimdBool","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","map_lanes","zip_map_lanes","one","zero","wrap","clamp","max","min","abs","inf","sup","inf_sup","partial_cmp","partial_lt","partial_le","partial_gt","partial_ge","partial_min","partial_max","partial_clamp","partial_sort2","center","distance","distance_squared","convert","try_convert","is_convertible","convert_unchecked","convert_ref","try_convert_ref","convert_ref_unchecked","unimplemented_or_uninitialized_generic","from","into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","add","mul","sub","div","min","max","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","to_subset","is_in_subset","to_subset_unchecked","from_subset","from_simd_real","simd_real","simd_imaginary","simd_modulus","simd_modulus_squared","simd_argument","simd_norm1","simd_scale","simd_unscale","simd_to_polar","simd_to_exp","simd_signum","simd_floor","simd_ceil","simd_round","simd_trunc","simd_fract","simd_mul_add","simd_abs","simd_hypot","simd_recip","simd_conjugate","simd_sin","simd_cos","simd_sin_cos","simd_sinh_cosh","simd_tan","simd_asin","simd_acos","simd_atan","simd_sinh","simd_cosh","simd_tanh","simd_asinh","simd_acosh","simd_atanh","simd_sinc","simd_sinhc","simd_cosc","simd_coshc","simd_log","simd_log2","simd_log10","simd_ln","simd_ln_1p","simd_sqrt","simd_exp","simd_exp2","simd_exp_m1","simd_powi","simd_powf","simd_powc","simd_cbrt","simd_horizontal_sum","simd_horizontal_product","to_superset","from_superset_unchecked","is_in_subset","simd_horizontal_sum","simd_horizontal_product","from_simd_real","simd_real","simd_imaginary","simd_argument","simd_modulus","simd_modulus_squared","simd_norm1","simd_recip","simd_conjugate","simd_scale","simd_unscale","simd_floor","simd_ceil","simd_round","simd_trunc","simd_fract","simd_mul_add","simd_abs","simd_exp2","simd_exp_m1","simd_ln_1p","simd_log2","simd_log10","simd_cbrt","simd_powi","simd_exp","simd_ln","simd_sqrt","simd_hypot","simd_powf","simd_log","simd_powc","simd_sin","simd_cos","simd_sin_cos","simd_tan","simd_asin","simd_acos","simd_atan","simd_sinh","simd_cosh","simd_sinh_cosh","simd_tanh","simd_asinh","simd_acosh","simd_atanh","simd_horizontal_sum","simd_horizontal_product","from_simd_real","simd_real","simd_imaginary","simd_argument","simd_modulus","simd_modulus_squared","simd_norm1","simd_recip","simd_conjugate","simd_scale","simd_unscale","simd_floor","simd_ceil","simd_round","simd_trunc","simd_fract","simd_mul_add","simd_abs","simd_exp2","simd_exp_m1","simd_ln_1p","simd_log2","simd_log10","simd_cbrt","simd_powi","simd_exp","simd_ln","simd_sqrt","simd_hypot","simd_powf","simd_log","simd_powc","simd_sin","simd_cos","simd_sin_cos","simd_tan","simd_asin","simd_acos","simd_atan","simd_sinh","simd_cosh","simd_sinh_cosh","simd_tanh","simd_asinh","simd_acosh","simd_atanh","simd_horizontal_sum","simd_horizontal_product","from_simd_real","simd_real","simd_imaginary","simd_argument","simd_modulus","simd_modulus_squared","simd_norm1","simd_recip","simd_conjugate","simd_scale","simd_unscale","simd_floor","simd_ceil","simd_round","simd_trunc","simd_fract","simd_mul_add","simd_abs","simd_exp2","simd_exp_m1","simd_ln_1p","simd_log2","simd_log10","simd_cbrt","simd_powi","simd_exp","simd_ln","simd_sqrt","simd_hypot","simd_powf","simd_log","simd_powc","simd_sin","simd_cos","simd_sin_cos","simd_tan","simd_asin","simd_acos","simd_atan","simd_sinh","simd_cosh","simd_sinh_cosh","simd_tanh","simd_asinh","simd_acosh","simd_atanh","simd_horizontal_sum","simd_horizontal_product","from_simd_real","simd_real","simd_imaginary","simd_argument","simd_modulus","simd_modulus_squared","simd_norm1","simd_recip","simd_conjugate","simd_scale","simd_unscale","simd_floor","simd_ceil","simd_round","simd_trunc","simd_fract","simd_mul_add","simd_abs","simd_exp2","simd_exp_m1","simd_ln_1p","simd_log2","simd_log10","simd_cbrt","simd_powi","simd_exp","simd_ln","simd_sqrt","simd_hypot","simd_powf","simd_log","simd_powc","simd_sin","simd_cos","simd_sin_cos","simd_tan","simd_asin","simd_acos","simd_atan","simd_sinh","simd_cosh","simd_sinh_cosh","simd_tanh","simd_asinh","simd_acosh","simd_atanh","simd_horizontal_sum","simd_horizontal_product","from_simd_real","simd_real","simd_imaginary","simd_argument","simd_modulus","simd_modulus_squared","simd_norm1","simd_recip","simd_conjugate","simd_scale","simd_unscale","simd_floor","simd_ceil","simd_round","simd_trunc","simd_fract","simd_mul_add","simd_abs","simd_exp2","simd_exp_m1","simd_ln_1p","simd_log2","simd_log10","simd_cbrt","simd_powi","simd_exp","simd_ln","simd_sqrt","simd_hypot","simd_powf","simd_log","simd_powc","simd_sin","simd_cos","simd_sin_cos","simd_tan","simd_asin","simd_acos","simd_atan","simd_sinh","simd_cosh","simd_sinh_cosh","simd_tanh","simd_asinh","simd_acosh","simd_atanh","simd_horizontal_sum","simd_horizontal_product","from_simd_real","simd_real","simd_imaginary","simd_argument","simd_modulus","simd_modulus_squared","simd_norm1","simd_recip","simd_conjugate","simd_scale","simd_unscale","simd_floor","simd_ceil","simd_round","simd_trunc","simd_fract","simd_mul_add","simd_abs","simd_exp2","simd_exp_m1","simd_ln_1p","simd_log2","simd_log10","simd_cbrt","simd_powi","simd_exp","simd_ln","simd_sqrt","simd_hypot","simd_powf","simd_log","simd_powc","simd_sin","simd_cos","simd_sin_cos","simd_tan","simd_asin","simd_acos","simd_atan","simd_sinh","simd_cosh","simd_sinh_cosh","simd_tanh","simd_asinh","simd_acosh","simd_atanh","simd_horizontal_sum","simd_horizontal_product","from_simd_real","simd_real","simd_imaginary","simd_argument","simd_modulus","simd_modulus_squared","simd_norm1","simd_recip","simd_conjugate","simd_scale","simd_unscale","simd_floor","simd_ceil","simd_round","simd_trunc","simd_fract","simd_mul_add","simd_abs","simd_exp2","simd_exp_m1","simd_ln_1p","simd_log2","simd_log10","simd_cbrt","simd_powi","simd_exp","simd_ln","simd_sqrt","simd_hypot","simd_powf","simd_log","simd_powc","simd_sin","simd_cos","simd_sin_cos","simd_tan","simd_asin","simd_acos","simd_atan","simd_sinh","simd_cosh","simd_sinh_cosh","simd_tanh","simd_asinh","simd_acosh","simd_atanh","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","from_real","real","imaginary","argument","modulus","modulus_squared","norm1","recip","conjugate","scale","unscale","floor","ceil","round","trunc","fract","mul_add","abs","exp2","exp_m1","ln_1p","log2","log10","cbrt","powi","is_finite","exp","ln","sqrt","try_sqrt","hypot","powf","log","powc","sin","cos","sin_cos","tan","asin","acos","atan","sinh","cosh","sinh_cosh","tanh","asinh","acosh","atanh","div","div","div","div","rem","rem","rem","rem","mul_add_assign","mul_add_assign","product","product","to_usize","to_isize","to_u8","to_u16","to_u32","to_u64","to_i8","to_i16","to_i32","to_i64","to_u128","to_i128","to_f32","to_f64","from_str","add","add","add","add","div_assign","div_assign","div_assign","div_assign","from_str_radix","add_assign","add_assign","add_assign","add_assign","fmt","fmt","from","from","fmt","sub_assign","sub_assign","sub_assign","sub_assign","mul","mul","mul","mul","fmt","fmt","serialize","mul_add","as_","inv","rem_assign","rem_assign","rem_assign","rem_assign","from","fmt","from_usize","from_isize","from_u8","from_u16","from_u32","from_u64","from_i8","from_i16","from_i32","from_i64","from_u128","from_i128","from_f32","from_f64","default","mul_assign","mul_assign","mul_assign","mul_assign","zero","is_zero","set_zero","one","is_one","set_one","deserialize","sum","sum","clone","sub","sub","sub","sub","fmt","hash","fmt","eq","ne","neg","allocate_uninitialized","allocate_from_iterator","allocate_uninitialized","allocate_from_iterator","allocate_uninitialized","allocate_from_iterator","reallocate_copy","reallocate_copy","reallocate_copy","reallocate_copy","reallocate_copy","reallocate_copy","reallocate_copy","try_to_usize","from_usize","value","try_to_usize","value","from_usize","name","dim","ptr","shape","strides","is_contiguous","into_owned","clone_owned","as_slice","ptr","shape","strides","is_contiguous","into_owned","clone_owned","as_slice","ptr","shape","strides","is_contiguous","into_owned","clone_owned","as_slice","ptr","shape","strides","is_contiguous","into_owned","clone_owned","as_slice","ptr","shape","strides","is_contiguous","into_owned","clone_owned","as_slice","ptr_mut","as_mut_slice","ptr_mut","as_mut_slice","ptr_mut","as_mut_slice","ptr_mut","as_mut_slice","reshape_generic","reshape_generic","reshape_generic","reshape_generic","reshape_generic","norm","metric_distance","norm","metric_distance","norm","metric_distance","norm","norm_squared","scale_mut","unscale_mut","norm","norm_squared","scale_mut","unscale_mut","norm","norm_squared","scale_mut","unscale_mut","norm","norm_squared","scale_mut","unscale_mut","identity","inverse","inverse_mut","transform_vector","transform_point","inverse_transform_vector","inverse_transform_unit_vector","inverse_transform_point","identity","inverse","inverse_mut","transform_vector","transform_point","inverse_transform_vector","inverse_transform_point","identity","inverse","inverse_mut","transform_vector","transform_point","inverse_transform_vector","inverse_transform_point","check_homogeneous_invariants","check_homogeneous_invariants","has_normalizer","check_homogeneous_invariants","add","add","add","mul","mul","mul","sub","sub","sub","div","div","div","min","min","min","max","max","max","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","next_back","next_back","len","len","len","len","len","len","extend","extend","extend","extend","extend","extend","extend","next","size_hint","count","next","size_hint","count","next","size_hint","count","next","size_hint","count","next","size_hint","count","next","size_hint","count","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","eq","eq","ne","eq","eq","eq","eq","eq","ne","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","partial_cmp","lt","le","gt","ge","partial_cmp","lt","le","gt","ge","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","add","add","add","add","add","add","add","add","add","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","neg","neg","neg","neg","neg","neg","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","fmt","fmt","fmt","fmt","fmt","sum","sum","sum","sum","product","product","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","max_value","min_value","max_value","min_value","zero","is_zero","zero","is_zero","zero","is_zero","one","one","one","one","one","one","one","one","one","one","one","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","to_superset","is_in_subset","from_superset_unchecked","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","dot","dotc","tr_dot","axcpy","axpy","gemv","gemv_symm","sygemv","hegemv","gemv_tr","gemv_ad","axcpy","axpy","gemv","gemv_symm","sygemv","hegemv","gemv_tr","gemv_ad","ger","gerc","gemm","gemm_tr","gemm_ad","ger_symm","syger","hegerc","quadform_tr_with_workspace","quadform_tr","quadform_with_workspace","quadform","quadform_tr_with_workspace","quadform_tr","quadform_with_workspace","quadform","neg_mut","add_to","sub_to","tr_mul","ad_mul","tr_mul_to","ad_mul_to","mul_to","kronecker","new_scaling","new_nonuniform_scaling","new_translation","new_scaling","new_nonuniform_scaling","new_translation","new_rotation","new_nonuniform_scaling_wrt_point","new_rotation","new_nonuniform_scaling_wrt_point","new_rotation","new_rotation_wrt_point","new_nonuniform_scaling_wrt_point","from_scaled_axis","from_euler_angles","from_axis_angle","new_orthographic","new_perspective","face_towards","new_observer_frame","look_at_rh","look_at_lh","new_rotation","new_rotation_wrt_point","new_nonuniform_scaling_wrt_point","from_scaled_axis","from_euler_angles","from_axis_angle","new_orthographic","new_perspective","face_towards","new_observer_frame","look_at_rh","look_at_lh","append_scaling","prepend_scaling","append_nonuniform_scaling","prepend_nonuniform_scaling","append_translation","prepend_translation","append_scaling_mut","prepend_scaling_mut","append_nonuniform_scaling_mut","prepend_nonuniform_scaling_mut","append_translation_mut","prepend_translation_mut","append_scaling","prepend_scaling","append_nonuniform_scaling","prepend_nonuniform_scaling","append_translation","prepend_translation","append_scaling_mut","prepend_scaling_mut","append_nonuniform_scaling_mut","prepend_nonuniform_scaling_mut","append_translation_mut","prepend_translation_mut","transform_vector","transform_vector","transform_point","transform_point","transform_point","transform_point","abs","component_mul","cmpy","component_mul_assign","component_mul_mut","component_div","cdpy","component_div_assign","component_div_mut","inf","sup","inf_sup","add_scalar","add_scalar_mut","new_uninitialized_generic","from_element_generic","repeat_generic","zeros_generic","from_iterator_generic","from_row_slice_generic","from_column_slice_generic","from_fn_generic","identity_generic","from_diagonal_element_generic","from_partial_diagonal_generic","from_rows","from_columns","from_vec_generic","new_uninitialized_generic","from_element_generic","repeat_generic","zeros_generic","from_iterator_generic","from_row_slice_generic","from_column_slice_generic","from_fn_generic","identity_generic","from_diagonal_element_generic","from_partial_diagonal_generic","from_rows","from_columns","from_vec_generic","from_diagonal","from_diagonal","new_uninitialized","from_element","repeat","zeros","from_iterator","from_fn","identity","from_diagonal_element","from_partial_diagonal","new_uninitialized","from_element","repeat","zeros","from_iterator","from_fn","identity","from_diagonal_element","from_partial_diagonal","new_uninitialized","from_element","repeat","zeros","from_iterator","from_fn","identity","from_diagonal_element","from_partial_diagonal","new_uninitialized","from_element","repeat","zeros","from_iterator","from_fn","identity","from_diagonal_element","from_partial_diagonal","new_uninitialized","from_element","repeat","zeros","from_iterator","from_fn","identity","from_diagonal_element","from_partial_diagonal","new_uninitialized","from_element","repeat","zeros","from_iterator","from_fn","identity","from_diagonal_element","from_partial_diagonal","new_uninitialized","from_element","repeat","zeros","from_iterator","from_fn","identity","from_diagonal_element","from_partial_diagonal","new_uninitialized","from_element","repeat","zeros","from_iterator","from_fn","identity","from_diagonal_element","from_partial_diagonal","from_row_slice","from_column_slice","from_vec","from_row_slice","from_column_slice","from_vec","from_row_slice","from_column_slice","from_vec","from_row_slice","from_column_slice","from_vec","from_row_slice","from_column_slice","from_vec","from_row_slice","from_column_slice","from_vec","from_row_slice","from_column_slice","from_vec","from_row_slice","from_column_slice","from_vec","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","ith","ith_axis","x","y","z","w","a","b","x_axis","y_axis","z_axis","w_axis","a_axis","b_axis","ith","ith_axis","x","y","z","w","a","b","x_axis","y_axis","z_axis","w_axis","a_axis","b_axis","from_slice_with_strides_generic_unchecked","from_slice_with_strides_generic","from_slice_with_strides_generic_unchecked","from_slice_with_strides_generic","from_slice_generic_unchecked","from_slice_generic","from_slice_generic_unchecked","from_slice_generic","from_slice","from_slice_unchecked","from_slice","from_slice_unchecked","from_slice_with_strides","from_slice_with_strides_unchecked","from_slice_with_strides","from_slice_with_strides_unchecked","from_slice","from_slice_unchecked","from_slice","from_slice_unchecked","from_slice_with_strides","from_slice_with_strides_unchecked","from_slice_with_strides","from_slice_with_strides_unchecked","from_slice","from_slice_unchecked","from_slice","from_slice_unchecked","from_slice_with_strides","from_slice_with_strides_unchecked","from_slice_with_strides","from_slice_with_strides_unchecked","from_slice","from_slice_unchecked","from_slice","from_slice_unchecked","from_slice_with_strides","from_slice_with_strides_unchecked","from_slice_with_strides","from_slice_with_strides_unchecked","from_slice_with_strides_generic_unchecked","from_slice_with_strides_generic","from_slice_with_strides_generic_unchecked","from_slice_with_strides_generic","from_slice_generic_unchecked","from_slice_generic","from_slice_generic_unchecked","from_slice_generic","from_slice","from_slice_unchecked","from_slice","from_slice_unchecked","from_slice_with_strides_mut","from_slice_with_strides_unchecked","from_slice_with_strides_mut","from_slice_with_strides_unchecked","from_slice","from_slice_unchecked","from_slice","from_slice_unchecked","from_slice_with_strides_mut","from_slice_with_strides_unchecked","from_slice_with_strides_mut","from_slice_with_strides_unchecked","from_slice","from_slice_unchecked","from_slice","from_slice_unchecked","from_slice_with_strides_mut","from_slice_with_strides_unchecked","from_slice_with_strides_mut","from_slice_with_strides_unchecked","from_slice","from_slice_unchecked","from_slice","from_slice_unchecked","from_slice_with_strides_mut","from_slice_with_strides_unchecked","from_slice_with_strides_mut","from_slice_with_strides_unchecked","upper_triangle","lower_triangle","select_rows","select_columns","set_diagonal","set_partial_diagonal","set_row","set_column","fill","fill_with_identity","fill_diagonal","fill_row","fill_column","fill_lower_triangle","fill_upper_triangle","fill_lower_triangle_with_upper_triangle","fill_upper_triangle_with_lower_triangle","swap_rows","swap_columns","remove_column","remove_columns_at","remove_rows_at","remove_fixed_columns","remove_columns","remove_columns_generic","remove_row","remove_fixed_rows","remove_rows","remove_rows_generic","insert_column","insert_fixed_columns","insert_columns","insert_columns_generic_uninitialized","insert_row","insert_fixed_rows","insert_rows","insert_rows_generic_uninitialized","resize","resize_vertically","resize_horizontally","fixed_resize","resize_generic","reshape_generic","resize_mut","resize_mut","resize_vertically_mut","resize_vertically_mut","resize_horizontally_mut","resize_horizontally_mut","get","get_mut","index","index_mut","get_unchecked","get_unchecked_mut","from_data_statically_unchecked","from_data","from_uninitialized_data","shape","nrows","ncols","strides","vector_to_matrix_index","as_ptr","relative_eq","eq","into_owned","into_owned_sum","clone_owned","clone_owned_sum","transpose_to","transpose","map","cast","fold_with","map_with_location","zip_map","zip_zip_map","fold","zip_fold","apply","zip_apply","zip_zip_apply","iter","row_iter","column_iter","iter_mut","row_iter_mut","column_iter_mut","as_mut_ptr","swap_unchecked","swap","copy_from_slice","copy_from","tr_copy_from","apply_into","vget_unchecked","vget_unchecked","vget_unchecked_mut","vget_unchecked_mut","as_slice","as_mut_slice","transpose_mut","adjoint_to","adjoint","conjugate_transpose_to","conjugate_transpose","conjugate","unscale","scale","conjugate_mut","unscale_mut","scale_mut","conjugate_transform_mut","adjoint_mut","diagonal","map_diagonal","trace","diagonal","map_diagonal","trace","symmetric_part","hermitian_part","symmetric_part","hermitian_part","to_homogeneous","to_homogeneous","from_homogeneous","to_homogeneous","from_homogeneous","push","push","perp","cross","cross_matrix","cross_matrix","angle","from_raw_parts","new_unchecked","new_with_strides_unchecked","from_raw_parts","new_unchecked","new_with_strides_unchecked","row","row_part","rows","rows_with_step","fixed_rows","fixed_rows_with_step","rows_generic","rows_generic_with_step","column","column_part","columns","columns_with_step","fixed_columns","fixed_columns_with_step","columns_generic","columns_generic_with_step","slice","slice_with_steps","fixed_slice","fixed_slice_with_steps","generic_slice","generic_slice_with_steps","rows_range_pair","columns_range_pair","row_mut","row_part_mut","rows_mut","rows_with_step_mut","fixed_rows_mut","fixed_rows_with_step_mut","rows_generic_mut","rows_generic_with_step_mut","column_mut","column_part_mut","columns_mut","columns_with_step_mut","fixed_columns_mut","fixed_columns_with_step_mut","columns_generic_mut","columns_generic_with_step_mut","slice_mut","slice_with_steps_mut","fixed_slice_mut","fixed_slice_with_steps_mut","generic_slice_mut","generic_slice_with_steps_mut","rows_range_pair_mut","columns_range_pair_mut","slice_range","rows_range","columns_range","slice_range_mut","rows_range_mut","columns_range_mut","norm_squared","norm","metric_distance","apply_norm","apply_metric_distance","magnitude","magnitude_squared","set_magnitude","normalize","lp_norm","simd_try_normalize","try_set_magnitude","cap_magnitude","simd_cap_magnitude","try_normalize","normalize_mut","simd_try_normalize_mut","try_normalize_mut","orthonormalize","orthonormal_subspace_basis","orthonormalize","orthonormal_subspace_basis","len","is_empty","is_square","is_identity","is_orthogonal","is_special_orthogonal","is_invertible","is_special_orthogonal","is_invertible","is","inlined_clone","compress_rows","compress_rows_tr","compress_columns","sum","row_sum","row_sum_tr","column_sum","variance","row_variance","row_variance_tr","column_variance","mean","row_mean","row_mean_tr","column_mean","xx","xxx","xy","yx","yy","xxy","xyx","xyy","yxx","yxy","yyx","yyy","xz","yz","zx","zy","zz","xxz","xyz","xzx","xzy","xzz","yxz","yyz","yzx","yzy","yzz","zxx","zxy","zxz","zyx","zyy","zyz","zzx","zzy","zzz","xx","xxx","xy","yx","yy","xxy","xyx","xyy","yxx","yxy","yyx","yyy","xz","yz","zx","zy","zz","xxz","xyz","xzx","xzy","xzz","yxz","yyz","yzx","yzy","yzz","zxx","zxy","zxz","zyx","zyy","zyz","zzx","zzy","zzz","new_normalize","try_new","new_and_get","try_new_and_get","renormalize","renormalize_fast","new_unchecked","from_ref_unchecked","into_inner","unwrap","as_mut_unchecked","new","as_vec","as_vec_mut","resize","len","is_empty","lerp","slerp","lerp","slerp","slerp","try_slerp","amax","camax","max","amin","camin","min","icamax_full","iamax_full","icamax","argmax","imax","iamax","argmin","imin","iamin","icamax","argmax","imax","iamax","argmin","imin","iamin","inverse_transform_unit_vector","map","apply","to_homogeneous","from_coordinates","len","is_empty","stride","iter","get_unchecked","iter_mut","get_unchecked_mut","swap_unchecked","inf","sup","inf_sup","new_uninitialized","origin","from_slice","from_homogeneous","cast","new","new","new","new","new","new","new","new","new","new","new","new","from_matrix_unchecked","matrix","matrix_mut","matrix_mut_unchecked","into_inner","unwrap","to_homogeneous","transpose","inverse","transpose_mut","inverse_mut","transform_point","transform_vector","inverse_transform_point","inverse_transform_vector","inverse_transform_unit_vector","identity","cast","slerp","slerp","slerp","try_slerp","slerp","try_slerp","new","from_scaled_axis","new","from_scaled_axis","from_basis_unchecked","from_matrix","from_matrix_eps","rotation_between","scaled_rotation_between","rotation_to","renormalize","powf","from_basis_unchecked","from_matrix","from_matrix_eps","rotation_between","scaled_rotation_between","rotation_to","renormalize","powf","angle","angle_to","scaled_axis","angle","angle_to","scaled_axis","new","from_scaled_axis","from_axis_angle","from_euler_angles","new","from_scaled_axis","from_axis_angle","from_euler_angles","face_towards","new_observer_frames","look_at_rh","look_at_lh","face_towards","new_observer_frames","look_at_rh","look_at_lh","rotation_between","scaled_rotation_between","rotation_to","powf","from_basis_unchecked","from_matrix","from_matrix_eps","renormalize","rotation_between","scaled_rotation_between","rotation_to","powf","from_basis_unchecked","from_matrix","from_matrix_eps","renormalize","angle","axis","scaled_axis","axis_angle","angle_to","to_euler_angles","euler_angles","angle","axis","scaled_axis","axis_angle","angle_to","to_euler_angles","euler_angles","into_owned","clone_owned","normalize","imag","conjugate","lerp","vector","scalar","as_vector","norm","magnitude","norm_squared","magnitude_squared","dot","try_inverse","simd_try_inverse","inner","outer","project","reject","polar_decomposition","ln","exp","exp_eps","powf","as_vector_mut","vector_mut","conjugate_mut","try_inverse_mut","normalize_mut","squared","half","sqrt","is_pure","pure","left_div","right_div","cos","acos","sin","asin","tan","atan","sinh","asinh","cosh","acosh","tanh","atanh","angle","quaternion","conjugate","inverse","angle_to","rotation_to","lerp","nlerp","slerp","try_slerp","conjugate_mut","inverse_mut","axis","scaled_axis","axis_angle","exp","ln","powf","to_rotation_matrix","to_euler_angles","euler_angles","to_homogeneous","transform_point","transform_vector","inverse_transform_point","inverse_transform_vector","inverse_transform_unit_vector","append_axisangle_linearized","from_vector","new","cast","from_imag","from_parts","from_real","identity","from_polar_decomposition","identity","cast","from_axis_angle","from_quaternion","from_euler_angles","from_basis_unchecked","from_rotation_matrix","from_matrix","from_matrix_eps","rotation_between","scaled_rotation_between","rotation_between_axis","scaled_rotation_between_axis","face_towards","new_observer_frames","look_at_rh","look_at_lh","new","new_eps","from_scaled_axis","from_scaled_axis_eps","mean_of","normalize","normalize_mut","conjugate","conjugate_mut","try_inverse","try_inverse_mut","lerp","dual_quaternion","conjugate","conjugate_mut","inverse","inverse_mut","isometry_to","lerp","nlerp","sclerp","try_sclerp","rotation","translation","to_isometry","transform_point","transform_vector","inverse_transform_point","inverse_transform_vector","inverse_transform_unit_vector","to_homogeneous","from_real_and_dual","identity","cast","from_real","identity","cast","from_parts","from_isometry","from_rotation","angle","sin_angle","cos_angle","scaled_axis","axis_angle","angle_to","conjugate","inverse","conjugate_mut","inverse_mut","to_rotation_matrix","to_homogeneous","transform_point","transform_vector","inverse_transform_point","inverse_transform_vector","inverse_transform_unit_vector","slerp","identity","new","from_angle","from_cos_sin_unchecked","from_scaled_axis","cast","complex","from_complex","from_complex_and_get","from_rotation_matrix","from_basis_unchecked","from_matrix","from_matrix_eps","rotation_to","powf","rotation_between","scaled_rotation_between","rotation_between_axis","scaled_rotation_between_axis","from_vector","inverse","to_homogeneous","inverse_mut","transform_point","inverse_transform_point","identity","cast","new","new","new","new","new","new","from_parts","inverse","inverse_mut","inv_mul","append_translation_mut","append_rotation_mut","append_rotation_wrt_point_mut","append_rotation_wrt_center_mut","transform_point","transform_vector","inverse_transform_point","inverse_transform_vector","inverse_transform_unit_vector","to_homogeneous","to_matrix","identity","rotation_wrt_point","new","translation","rotation","cast","new","translation","rotation","cast","new","translation","rotation","cast","new","translation","rotation","cast","new","translation","rotation","cast","new","translation","rotation","cast","new","translation","rotation","cast","new","translation","rotation","cast","face_towards","new_observer_frame","look_at_rh","look_at_lh","face_towards","new_observer_frame","look_at_rh","look_at_lh","face_towards","new_observer_frame","look_at_rh","look_at_lh","face_towards","new_observer_frame","look_at_rh","look_at_lh","lerp_slerp","try_lerp_slerp","lerp_slerp","try_lerp_slerp","lerp_slerp","try_lerp_slerp","lerp_slerp","try_lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","from_parts","from_isometry","set_scaling","scaling","from_scaling","inverse","inverse_mut","prepend_scaling","append_scaling","prepend_scaling_mut","append_scaling_mut","append_translation_mut","append_rotation_mut","append_rotation_wrt_point_mut","append_rotation_wrt_center_mut","transform_point","transform_vector","inverse_transform_point","inverse_transform_vector","to_homogeneous","identity","rotation_wrt_point","new","cast","new","cast","new","cast","face_towards","new_observer_frames","look_at_rh","look_at_lh","new","cast","face_towards","new_observer_frames","look_at_rh","look_at_lh","xx","xxx","xy","yx","yy","xxy","xyx","xyy","yxx","yxy","yyx","yyy","xz","yz","zx","zy","zz","xxz","xyz","xzx","xzy","xzz","yxz","yyz","yzx","yzy","yzz","zxx","zxy","zxz","zyx","zyy","zyz","zzx","zzy","zzz","has_normalizer","from_matrix_unchecked","into_inner","unwrap","matrix","matrix_mut_unchecked","set_category","clone_owned","to_homogeneous","try_inverse","inverse","try_inverse_mut","inverse_mut","transform_point","transform_vector","inverse_transform_point","inverse_transform_vector","matrix_mut","identity","new_containing_point","new","axis","reflect","reflect_with_sign","reflect_rows","reflect_rows_with_sign","new","from_matrix_unchecked","from_fov","inverse","to_homogeneous","as_matrix","as_projective","to_projective","into_inner","unwrap","left","right","bottom","top","znear","zfar","project_point","unproject_point","project_vector","set_left","set_right","set_bottom","set_top","set_znear","set_zfar","set_left_and_right","set_bottom_and_top","set_znear_and_zfar","new","from_matrix_unchecked","inverse","to_homogeneous","as_matrix","as_projective","to_projective","into_inner","unwrap","aspect","fovy","znear","zfar","project_point","unproject_point","project_vector","set_aspect","set_fovy","set_znear","set_zfar","set_znear_and_zfar","new","is_upper_diagonal","unpack","d","u","v_t","diagonal","off_diagonal","new_unchecked","unpack","unpack_dirty","l","l_dirty","solve_mut","solve","inverse","determinant","new","rank_one_update","insert_column","remove_column","new","r","unpack_r","q","p","unpack","q_tr_mul","solve","solve_mut","try_inverse","is_invertible","determinant","new","l","u","p","q","unpack","solve","solve_mut","try_inverse","is_invertible","determinant","new","new_with_workspace","unpack","unpack_h","h","q","new","l","l_unpack","u","p","unpack","solve","solve_mut","try_inverse","try_inverse_to","determinant","is_invertible","identity","identity","identity_generic","append_permutation","permute_rows","inv_permute_rows","permute_columns","inv_permute_columns","len","is_empty","determinant","new","r","unpack_r","q","unpack","q_tr_mul","solve","solve_mut","try_inverse","is_invertible","new","try_new","unpack","eigenvalues","complex_eigenvalues","new","try_new","rank","recompose","pseudo_inverse","solve","new","try_new","recompose","new","unpack","unpack_tridiagonal","diagonal","off_diagonal","q","recompose","new","d_matrix","new","i","norm_sqr","scale","unscale","powu","conj","inv","powi","l1_norm","is_nan","is_infinite","is_finite","is_normal"],"q":["nalgebra","nalgebra::base","nalgebra::base::allocator","","","","","","","","","","nalgebra::base","nalgebra::base::constraint","","","","","","","","","","nalgebra::base","nalgebra::base::coordinatesnalgebra::base","nalgebra::base::default_allocator","nalgebra::base","nalgebra::base::dimensionnalgebra::base","nalgebra::base::iter","","","","","","","","nalgebra::base","nalgebra::base::storage","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base","nalgebra::base::indexing","","","","nalgebra::basenalgebra","nalgebra::base","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra","nalgebra::linalg","nalgebra::linalg::balancing","","nalgebra::base","","","nalgebra::linalg::convolution","","","nalgebra::base","nalgebra::linalg::determinant","nalgebra::base","","","","","","","","","","","","","","","","nalgebra::linalg::exp","nalgebra::linalg","nalgebra::linalg::givens","","","","","","","","","","","","nalgebra::linalg","nalgebra::base","nalgebra::linalg::inverse","nalgebra::base","nalgebra::linalg::inverse","nalgebra::base","","","","nalgebra::linalg::schur","","nalgebra::base","","","","","","","","","","","","","nalgebra::linalg::solve","","","","","","","","","","","","","nalgebra::base","","","","","","","","","","","","","nalgebra::linalg::solve","","","","","","","","","","","","","nalgebra::base","","","","nalgebra::linalg::symmetric_eigen","nalgebra::linalg","","","","","","","","","","","","","","","","","","","","","","nalgebranalgebra::base::constraint","","","","","","","","","","","nalgebra::base::coordinatesnalgebra::base::default_allocator","","","","","","","","","","","nalgebra::base::dimension","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::geometrynalgebra::linalg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::linalg::givens","","","","","","","","","","","","","nalgebra::linalg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebranalgebra::base::default_allocator","","","","","","","","","","","","","nalgebra::base::dimension","","","","","","","","nalgebra::base","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra","","","","nalgebra::geometry","","","","","","","","nalgebra","","","","nalgebra::geometry","","","","","","","","nalgebra","","","","","","","","","","","","","","nalgebra::geometry","","","","nalgebra::base::dimension","","","","","","","","","","","","","","","","","","nalgebra::base","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::geometry","nalgebra::base","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::geometry","nalgebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base","","","","","","nalgebra","","","","","","","","","","","nalgebra::base","","","","nalgebra","","","","","","","nalgebra::geometry","","","","","nalgebra","","","","nalgebra::geometry","","","","nalgebra","","","","nalgebra::geometry","","","","","","nalgebra","","","","","","","","","","","","","","","","nalgebra::geometry","","","","","","nalgebra","nalgebra::geometry","","","","nalgebra","nalgebra::geometry","","","","nalgebra","","","nalgebra::base","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base::iter","","","","","","","","nalgebra::base","","","","","","","nalgebra::base::iter","","","","","","","","","","","","","","","","","","nalgebra::base::coordinates","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base::dimension","","nalgebra::base::iter","","nalgebra::base","","","","","nalgebra::geometry","","","","","","","","","","","","","nalgebra::linalg","","","","nalgebra::linalg::givens","nalgebra::linalg","","","","","","","","","nalgebra::base","","nalgebra::geometry","nalgebra","nalgebra::geometry","nalgebra","nalgebra::base::coordinates","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base::dimension","","","nalgebra::base","","","","","","nalgebra::geometry","","","nalgebra","nalgebra::geometry","","nalgebra","","nalgebra::geometry","","","","","","","","","nalgebra::base","","","","","nalgebra::geometry","","","","","nalgebra::base","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::geometry","","","","","","","","","","","","","nalgebra::base","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::geometry","","","","","","","","","","","","","nalgebra::base::coordinates","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base::dimension","","nalgebra::base","","","","","","nalgebra::geometry","","","","","","","","","","","","","nalgebra::linalg","","","","nalgebra::linalg::givens","nalgebra::linalg","","","","","","","","","nalgebra::base","nalgebra::geometry","","","nalgebra","","","nalgebra::geometry","","","nalgebra::base","","","nalgebra::geometry","","","nalgebra::base","","nalgebra","","","","nalgebra::geometry","","","","","nalgebra","","","","","","","","","","","","","","nalgebra::geometry","nalgebra","","","","nalgebra::geometry","","","","","","","","","","","","nalgebra","","nalgebra::geometry","","","","","","","","","","","","","","nalgebra","","nalgebra::geometry","","","","","","","","","","nalgebra","","nalgebra::geometry","","","","nalgebra::base::dimension","nalgebra::base","","nalgebra::geometry","","","","","","","","nalgebra::base::dimension","nalgebra::base","","nalgebra::geometry","","","","","","nalgebra::base","","","","","nalgebra::geometry","","","","","nalgebra::base","","nalgebra::geometry","","","","","","nalgebra","","","","nalgebra::geometry","","nalgebra","","","","","","nalgebra::geometry","","","","","nalgebra","","","","","","","","","","","","","","","","","","","","","","nalgebra::geometry","nalgebra","","","","nalgebra::geometry","","nalgebra","","","","","","","","","","","","nalgebra::geometry","","","","","","","","","","","","","","","","","","","","nalgebra","","nalgebra::geometry","","","","","","nalgebra","","nalgebra::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra","","nalgebra::geometry","","","","","","","","","","","","","","nalgebra","","nalgebra::geometry","","","","","","","","","","","","nalgebra::base","","nalgebra::geometry","","","nalgebra","nalgebra::base","","nalgebra::geometry","","","","","","nalgebra::base","","nalgebra::geometry","","","","","","nalgebra::base","","","nalgebra::geometry","","","nalgebra","","nalgebra::geometry","","","nalgebra","","","","nalgebra::geometry","","","","nalgebra","","","","","","","","nalgebra::geometry","nalgebra","","","","nalgebra::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base","nalgebra::geometry","","","nalgebra","","nalgebra::geometry","nalgebra","","","","nalgebra::geometry","","nalgebra","","","","","","","","nalgebra::geometry","nalgebra","","","","nalgebra::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base","","nalgebra::geometry","","","","","nalgebra::base","","nalgebra::geometry","","","","nalgebra::base::coordinates","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base::dimension","nalgebra::base","","","nalgebra::geometry","","","","","","","","","nalgebra::base","","","","","nalgebra","","","","","","nalgebra::base::coordinates","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base::dimension","","nalgebra::base","","","","nalgebra::geometry","","","","","","","","","","nalgebra::linalg","","","","","","","","","","","","","nalgebra::base::coordinates","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base::dimension","","nalgebra::base","","","","nalgebra::geometry","","","","","","","","","","nalgebra::linalg","","","","","","","","","","","","","nalgebra::base","","","","nalgebra::geometry","","","","","","nalgebra","","nalgebra::geometry","","nalgebra","","","","nalgebra::geometry","","","","","","","","nalgebra::base","","","","nalgebra::geometry","","","","","","nalgebra","","nalgebra::geometry","","nalgebra","","","","nalgebra::geometry","","","","","","","","nalgebra::base","","","","nalgebra::geometry","","","","","","nalgebra","","nalgebra::geometry","","nalgebra","","","","nalgebra::geometry","","","","","","","","nalgebra","","nalgebra::geometry","","nalgebra","","nalgebra::geometry","","","","nalgebra","nalgebra::geometry","","nalgebra","nalgebra::geometry","nalgebra","","nalgebra::geometry","","","","nalgebra","","","nalgebra::geometry","","","","","","","","","nalgebra","","","","","","","","","nalgebra::geometry","","","","","","","","","","","","","","","nalgebra","","","","","","","","","","","","","","","","","","","","","nalgebra::geometry","","","nalgebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::geometry","","","","","","nalgebra","","","nalgebra::geometry","","","","","","","","","","","","nalgebra","","","nalgebra::geometry","","","","","","","","","","","","","","","","","","","","","","","","nalgebra","","","","","","","nalgebra::geometry","","","","","","","","","","","","","","","","","","","","","nalgebra","","","","","","","","","","","","","","nalgebra::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::basenalgebra::geometrynalgebra::linalg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra","","","","","","","","","","","","",""],"d":["[Reexported at the root of this crate.] Data structures …","Abstract definition of a matrix data storage allocator.","A matrix allocator of a memory buffer that may contain …","The type of buffer this allocator can instanciate.","Allocates a buffer with the given number of rows and …","Allocates a buffer initialized with the content of the …","A matrix reallocator. Changes the size of the memory …","Reallocates a buffer of shape <code>(RTo, CTo)</code>, possibly …","The number of rows of the result of a componentwise …","The number of columns of the result of a componentwise …","Restricts the given number of rows and columns to be …","Restricts the given number of rows to be equal.","Compatibility constraints between matrix shapes, e.g., …","A type used in <code>where</code> clauses for enforcing constraints.","Constraints <code>C1</code> and <code>R2</code> to be equivalent.","Constraints <code>D1</code> and <code>D2</code> to be equivalent.","This is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …","Constraints <code>D1</code> and <code>D2</code> to be equivalent. They are both …","This is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …","Constraints <code>D1</code> and <code>D2</code> to be equivalent. They are both …","This is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …","Constraints D1 and D2 to be equivalent, where they both …","This is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …","Structures to which matrices and vector can be …","Data structure used to provide access to matrix and …","","Data structure used to provide access to matrix and …","","","Data structure used to provide access to matrix and …","","","","Data structure used to provide access to matrix and …","","","","","Data structure used to provide access to matrix and …","","","","","","Data structure used to provide access to matrix and …","","","","","","","Data structure used to provide access to matrix and …","","","","","Data structure used to provide access to matrix and …","","","","","Data structure used to provide access to matrix and …","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","","","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","","","","","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","","","","","","","","","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","","","","","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","","","","","","","","","","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","","","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","","","","","","","","","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Data structure used to provide access to matrix and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The default matrix data storage allocator.","An allocator based on <code>GenericArray</code> and <code>VecStorage</code> for …","Traits and tags for identifying the dimension of all …","Dim of dynamically-sized algebraic entities.","A dynamic size equal to <code>value</code>.","Trait implemented by <code>Dynamic</code>.","Trait implemented by <code>Dynamic</code> and type-level integers …","Trait implemented by any type that can be used as a …","","Gets the compile-time value of <code>Self</code>. Returns <code>None</code> if it …","Gets the run-time value of <code>self</code>. For type-level integers, …","Builds an instance of <code>Self</code> from a run-time value. Panics …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait implemented exclusively by type-level integers.","","The name of this dimension, i.e., the singleton <code>Self</code>.","The value of this dimension.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Matrix iterators.","An iterator through a dense matrix with arbitrary strides …","Creates a new iterator for the given matrix storage.","An iterator through a dense matrix with arbitrary strides …","Creates a new iterator for the given matrix storage.","An iterator through the rows of a matrix.","An iterator through the mutable rows of a matrix.","An iterator through the columns of a matrix.","An iterator through the mutable columns of a matrix.","Abstract definition of a matrix data storage.","The data storage for the sum of two matrices with …","The owned data storage that can be allocated from <code>S</code>.","The row-stride of the owned data storage for a buffer of …","The column-stride of the owned data storage for a buffer …","The trait shared by all matrix data storage.","The static stride of this storage’s rows.","The static stride of this storage’s columns.","The matrix data pointer.","The dimension of the matrix at run-time. Arr length of …","The spacing between consecutive row elements and …","Compute the index corresponding to the irow-th row and …","Gets the address of the i-th matrix component without …","Gets the address of the i-th matrix component without …","Retrieves a reference to the i-th element without …","Retrieves a reference to the i-th element without …","Indicates whether this data buffer stores its elements …","Retrieves the data buffer as a contiguous slice.","Builds a matrix data storage that does not contain any …","Clones this data storage to one that does not contain any …","Trait implemented by matrix data storage that can provide …","The matrix mutable data pointer.","Gets the mutable address of the i-th matrix component …","Gets the mutable address of the i-th matrix component …","Retrieves a mutable reference to the i-th element without …","Retrieves a mutable reference to the element at …","Swaps two elements using their linear index without …","Swaps two elements without bound-checking.","Retrieves the mutable data buffer as a contiguous slice.","A matrix storage that is stored contiguously in memory.","A mutable matrix storage that is stored contiguously in …","A matrix storage that can be reshaped in-place.","The reshaped storage type.","Reshapes the storage into the output storage type.","Indexing","A helper trait used for indexing operations.","The output type returned by methods.","A helper trait used for indexing operations.","The output type returned by methods.","A square matrix.","A matrix with one column and <code>D</code> rows.","A matrix with one row and <code>D</code> columns .","The type of the result of a matrix sum.","The type of the result of a matrix sum.","The type of the result of a matrix cross product.","The most generic column-major matrix (and vector) type.","The data storage that contains all the matrix components. …","A trait for abstract matrix norms.","Apply this norm to the given matrix.","Use the metric induced by this norm to compute the metric …","Euclidean norm.","Lp norm.","","L-infinite norm aka. Chebytchev norm aka. uniform norm …","The basic scalar type for all structures of <code>nalgebra</code>.","Tests if <code>Self</code> the same as the type <code>T</code>","Performance hack: Clone doesn’t get inlined for Copy …","A wrapper that ensures the underlying algebraic entity …","Trait implemented by entities scan be be normalized and …","The type of the norm.","Computes the norm.","Computes the squared norm.","Multiply <code>self</code> by n.","Divides <code>self</code> by n.","An owned matrix column-major matrix with <code>R</code> rows and <code>C</code> …","An owned matrix column-major matrix with <code>R</code> rows and <code>C</code> …","An owned matrix column-major matrix with <code>D</code> columns.","A statically sized column-major matrix with <code>R</code> rows and <code>C</code> …","A dynamically sized column-major matrix.","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, row-major, matrix with 1 rows and a …","A heap-allocated, row-major, matrix with 2 rows and a …","A heap-allocated, row-major, matrix with 3 rows and a …","A heap-allocated, row-major, matrix with 4 rows and a …","A heap-allocated, row-major, matrix with 5 rows and a …","A heap-allocated, row-major, matrix with 6 rows and a …","A stack-allocated, column-major, 1x1 square matrix.","A stack-allocated, column-major, 2x2 square matrix.","A stack-allocated, column-major, 3x3 square matrix.","A stack-allocated, column-major, 4x4 square matrix.","A stack-allocated, column-major, 5x5 square matrix.","A stack-allocated, column-major, 6x6 square matrix.","A stack-allocated, column-major, 1x2 matrix.","A stack-allocated, column-major, 1x3 matrix.","A stack-allocated, column-major, 1x4 matrix.","A stack-allocated, column-major, 1x5 matrix.","A stack-allocated, column-major, 1x6 matrix.","A stack-allocated, column-major, 2x3 matrix.","A stack-allocated, column-major, 2x4 matrix.","A stack-allocated, column-major, 2x5 matrix.","A stack-allocated, column-major, 2x6 matrix.","A stack-allocated, column-major, 3x4 matrix.","A stack-allocated, column-major, 3x5 matrix.","A stack-allocated, column-major, 3x6 matrix.","A stack-allocated, column-major, 4x5 matrix.","A stack-allocated, column-major, 4x6 matrix.","A stack-allocated, column-major, 5x6 matrix.","A stack-allocated, column-major, 2x1 matrix.","A stack-allocated, column-major, 3x1 matrix.","A stack-allocated, column-major, 4x1 matrix.","A stack-allocated, column-major, 5x1 matrix.","A stack-allocated, column-major, 6x1 matrix.","A stack-allocated, column-major, 3x2 matrix.","A stack-allocated, column-major, 4x2 matrix.","A stack-allocated, column-major, 5x2 matrix.","A stack-allocated, column-major, 6x2 matrix.","A stack-allocated, column-major, 4x3 matrix.","A stack-allocated, column-major, 5x3 matrix.","A stack-allocated, column-major, 6x3 matrix.","A stack-allocated, column-major, 5x4 matrix.","A stack-allocated, column-major, 6x4 matrix.","A stack-allocated, column-major, 6x5 matrix.","A dynamically sized column vector.","An owned D-dimensional column vector.","A statically sized D-dimensional column vector.","An owned matrix column-major matrix with <code>R</code> rows and <code>C</code> …","A stack-allocated, 1-dimensional column vector.","A stack-allocated, 2-dimensional column vector.","A stack-allocated, 3-dimensional column vector.","A stack-allocated, 4-dimensional column vector.","A stack-allocated, 5-dimensional column vector.","A stack-allocated, 6-dimensional column vector.","A dynamically sized row vector.","An owned D-dimensional row vector.","A statically sized D-dimensional row vector.","A stack-allocated, 1-dimensional row vector.","A stack-allocated, 2-dimensional row vector.","A stack-allocated, 3-dimensional row vector.","A stack-allocated, 4-dimensional row vector.","A stack-allocated, 5-dimensional row vector.","A stack-allocated, 6-dimensional row vector.","A stack-allocated, 1-dimensional unit vector.","A stack-allocated, 2-dimensional unit vector.","A stack-allocated, 3-dimensional unit vector.","A stack-allocated, 4-dimensional unit vector.","A stack-allocated, 5-dimensional unit vector.","A stack-allocated, 6-dimensional unit vector.","A column-major matrix slice with dimensions known at …","A column-major matrix slice dynamic numbers of rows and …","A column-major 1x1 matrix slice.","A column-major 2x2 matrix slice.","A column-major 3x3 matrix slice.","A column-major 4x4 matrix slice.","A column-major 5x5 matrix slice.","A column-major 6x6 matrix slice.","A column-major 1x2 matrix slice.","A column-major 1x3 matrix slice.","A column-major 1x4 matrix slice.","A column-major 1x5 matrix slice.","A column-major 1x6 matrix slice.","A column-major 2x1 matrix slice.","A column-major 2x3 matrix slice.","A column-major 2x4 matrix slice.","A column-major 2x5 matrix slice.","A column-major 2x6 matrix slice.","A column-major 3x1 matrix slice.","A column-major 3x2 matrix slice.","A column-major 3x4 matrix slice.","A column-major 3x5 matrix slice.","A column-major 3x6 matrix slice.","A column-major 4x1 matrix slice.","A column-major 4x2 matrix slice.","A column-major 4x3 matrix slice.","A column-major 4x5 matrix slice.","A column-major 4x6 matrix slice.","A column-major 5x1 matrix slice.","A column-major 5x2 matrix slice.","A column-major 5x3 matrix slice.","A column-major 5x4 matrix slice.","A column-major 5x6 matrix slice.","A column-major 6x1 matrix slice.","A column-major 6x2 matrix slice.","A column-major 6x3 matrix slice.","A column-major 6x4 matrix slice.","A column-major 6x5 matrix slice.","A column-major matrix slice with 1 row and a number of …","A column-major matrix slice with 2 rows and a number of …","A column-major matrix slice with 3 rows and a number of …","A column-major matrix slice with 4 rows and a number of …","A column-major matrix slice with 5 rows and a number of …","A column-major matrix slice with 6 rows and a number of …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column vector slice with dimensions known at …","A column vector slice with dimensions known at …","A column vector slice dynamic numbers of rows and columns.","A 1D column vector slice.","A 2D column vector slice.","A 3D column vector slice.","A 4D column vector slice.","A 5D column vector slice.","A 6D column vector slice.","A column-major matrix slice with <code>R</code> rows and <code>C</code> columns.","A column-major matrix slice with <code>D</code> rows and columns.","A column-major matrix slice with dimensions known at …","A column-major matrix slice dynamic numbers of rows and …","A column-major 1x1 matrix slice.","A column-major 2x2 matrix slice.","A column-major 3x3 matrix slice.","A column-major 4x4 matrix slice.","A column-major 5x5 matrix slice.","A column-major 6x6 matrix slice.","A column-major 1x2 matrix slice.","A column-major 1x3 matrix slice.","A column-major 1x4 matrix slice.","A column-major 1x5 matrix slice.","A column-major 1x6 matrix slice.","A column-major 2x1 matrix slice.","A column-major 2x3 matrix slice.","A column-major 2x4 matrix slice.","A column-major 2x5 matrix slice.","A column-major 2x6 matrix slice.","A column-major 3x1 matrix slice.","A column-major 3x2 matrix slice.","A column-major 3x4 matrix slice.","A column-major 3x5 matrix slice.","A column-major 3x6 matrix slice.","A column-major 4x1 matrix slice.","A column-major 4x2 matrix slice.","A column-major 4x3 matrix slice.","A column-major 4x5 matrix slice.","A column-major 4x6 matrix slice.","A column-major 5x1 matrix slice.","A column-major 5x2 matrix slice.","A column-major 5x3 matrix slice.","A column-major 5x4 matrix slice.","A column-major 5x6 matrix slice.","A column-major 6x1 matrix slice.","A column-major 6x2 matrix slice.","A column-major 6x3 matrix slice.","A column-major 6x4 matrix slice.","A column-major 6x5 matrix slice.","A column-major matrix slice with 1 row and a number of …","A column-major matrix slice with 2 rows and a number of …","A column-major matrix slice with 3 rows and a number of …","A column-major matrix slice with 4 rows and a number of …","A column-major matrix slice with 5 rows and a number of …","A column-major matrix slice with 6 rows and a number of …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column vector slice with dimensions known at …","A column vector slice with dimensions known at …","A column vector slice dynamic numbers of rows and columns.","A 1D column vector slice.","A 2D column vector slice.","A 3D column vector slice.","A 4D column vector slice.","A 5D column vector slice.","A 6D column vector slice.","A array-based statically sized matrix data storage.","","A matrix data storage for a matrix slice. Only contains …","A mutable matrix data storage for mutable matrix slice. …","A matrix slice.","A mutable matrix slice.","A range with a size that may be known at compile-time.","Type of the range size. May be a type-level integer.","The start index of the range.","The index immediately after the last index inside of the …","The number of elements of the range, i.e., …","A Vec-based matrix data storage. It may be …","Renamed to [VecStorage].","[Reexported at the root of this crate.] Data structures …","The rotation angle in [0; pi] of this unit quaternion.","The underlying quaternion.","Compute the conjugate of this unit quaternion.","Inverts this quaternion if it is not zero.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The unit quaternion needed to make <code>self</code> and <code>other</code> …","Linear interpolation between two unit quaternions.","Normalized linear interpolation between two unit …","Spherical linear interpolation between two unit …","Computes the spherical linear interpolation between two …","Compute the conjugate of this unit quaternion in-place.","Inverts this quaternion if it is not zero.","The rotation axis of this unit quaternion or <code>None</code> if the …","The rotation axis of this unit quaternion multiplied by …","The rotation axis and angle in ]0, pi] of this unit …","Compute the exponential of a quaternion.","Compute the natural logarithm of a quaternion.","Raise the quaternion to a given floating power.","Builds a rotation matrix from this unit quaternion.","Converts this unit quaternion into its equivalent Euler …","Retrieves the euler angles corresponding to this unit …","Converts this unit quaternion into its equivalent …","Rotate a point by this unit quaternion.","Rotate a vector by this unit quaternion.","Rotate a point by the inverse of this unit quaternion. …","Rotate a vector by the inverse of this unit quaternion. …","Rotate a vector by the inverse of this unit quaternion. …","Appends to <code>self</code> a rotation given in the axis-angle form, …","The rotation identity.","Cast the components of <code>self</code> to another type.","Creates a new quaternion from a unit vector (the rotation …","Creates a new unit quaternion from a quaternion.","Creates a new unit quaternion from Euler angles.","Builds an unit quaternion from a basis assumed to be …","Builds an unit quaternion from a rotation matrix.","Builds an unit quaternion by extracting the rotation part …","Builds an unit quaternion by extracting the rotation part …","The unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","Creates an unit quaternion that corresponds to the local …","Deprecated: Use [UnitQuaternion::face_towards] instead.","Builds a right-handed look-at view matrix without …","Builds a left-handed look-at view matrix without …","Creates a new unit quaternion rotation from a rotation …","Creates a new unit quaternion rotation from a rotation …","Creates a new unit quaternion rotation from a rotation …","Creates a new unit quaternion rotation from a rotation …","Create the mean unit quaternion from a data structure …","The underlying dual quaternion.","Compute the conjugate of this unit quaternion.","Compute the conjugate of this unit quaternion in-place.","Inverts this dual quaternion if it is not zero.","Inverts this dual quaternion in place if it is not zero.","The unit dual quaternion needed to make <code>self</code> and <code>other</code> …","Linear interpolation between two unit dual quaternions.","Normalized linear interpolation between two unit …","Screw linear interpolation between two unit quaternions. …","Computes the screw-linear interpolation between two unit …","Return the rotation part of this unit dual quaternion.","Return the translation part of this unit dual quaternion.","Builds an isometry from this unit dual quaternion.","Rotate and translate a point by this unit dual quaternion …","Rotate a vector by this unit dual quaternion, ignoring …","Rotate and translate a point by the inverse of this unit …","Rotate a vector by the inverse of this unit quaternion, …","Rotate a unit vector by the inverse of this unit …","Converts this unit dual quaternion interpreted as an …","The unit dual quaternion multiplicative identity, which …","Cast the components of <code>self</code> to another type.","Return a dual quaternion representing the translation and …","Return a unit dual quaternion representing the …","Creates a dual quaternion from a unit quaternion rotation.","The rotation angle in <code>]-pi; pi]</code> of this unit complex …","The sine of the rotation angle.","The cosine of the rotation angle.","The rotation angle returned as a 1-dimensional vector.","The rotation axis and angle in ]0, pi] of this complex …","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","Compute the conjugate of this unit complex number.","Inverts this complex number if it is not zero.","Compute in-place the conjugate of this unit complex …","Inverts in-place this unit complex number.","Builds the rotation matrix corresponding to this unit …","Converts this unit complex number into its equivalent …","Rotate the given point by this unit complex number.","Rotate the given vector by this unit complex number.","Rotate the given point by the inverse of this unit …","Rotate the given vector by the inverse of this unit …","Rotate the given vector by the inverse of this unit …","Spherical linear interpolation between two rotations …","The unit complex number multiplicative identity.","Builds the unit complex number corresponding to the …","Builds the unit complex number corresponding to the …","Builds the unit complex number from the sinus and cosinus …","Builds a unit complex rotation from an angle in radian …","Cast the components of <code>self</code> to another type.","The underlying complex number.","Creates a new unit complex number from a complex number.","Creates a new unit complex number from a complex number.","Builds the unit complex number from the corresponding 2D …","Builds a rotation from a basis assumed to be orthonormal.","Builds an unit complex by extracting the rotation part of …","Builds an unit complex by extracting the rotation part of …","The unit complex number needed to make <code>self</code> and <code>other</code> …","Raise this unit complex number to a given floating power.","The unit complex needed to make <code>a</code> and <code>b</code> be collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The unit complex needed to make <code>a</code> and <code>b</code> be collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","Trait implemented by rotations that can be used inside of …","The rotation identity.","The rotation inverse.","Change <code>self</code> to its inverse.","Apply the rotation to the given vector.","Apply the rotation to the given point.","Apply the inverse rotation to the given vector.","Apply the inverse rotation to the given unit vector.","Apply the inverse rotation to the given point.","A point in an euclidean space.","The coordinates of this point, i.e., the shift from the …","A statically sized 1-dimensional column point.","A statically sized 2-dimensional column point.","A statically sized 3-dimensional column point.","A statically sized 4-dimensional column point.","A statically sized 5-dimensional column point.","A statically sized 6-dimensional column point.","A rotation matrix.","A 2-dimensional rotation matrix.","A 3-dimensional rotation matrix.","A quaternion. See the type alias …","This quaternion as a 4D vector of coordinates in the …","A unit quaternions. May be used to represent a rotation.","A dual quaternion.","The real component of the quaternion","The dual component of the quaternion","A unit quaternions. May be used to represent a rotation …","A 2D rotation represented as a complex number with …","A translation.","The translation coordinates, i.e., how much is added to a …","A 1-dimensional translation.","A 2-dimensional translation.","A 3-dimensional translation.","A 4-dimensional translation.","A 5-dimensional translation.","A 6-dimensional translation.","A direct isometry, i.e., a rotation followed by a …","The pure rotational part of this isometry.","The pure translational part of this isometry.","A 2-dimensional direct isometry using a unit complex …","A 3-dimensional direct isometry using a unit quaternion …","A 2-dimensional direct isometry using a rotation matrix …","A 3-dimensional direct isometry using a rotation matrix …","A similarity, i.e., an uniform scaling, followed by a …","The part of this similarity that does not include the …","A 2-dimensional similarity.","A 3-dimensional similarity.","A 2-dimensional similarity using a rotation matrix for …","A 3-dimensional similarity using a rotation matrix for …","Trait implemented by phantom types identifying the …","Indicates whether a <code>Transform</code> with the category <code>Self</code> has …","Checks that the given matrix is a valid homogeneous …","Traits that gives the <code>Transform</code> category that is …","The transform category that results from the …","Indicates that <code>Self</code> is a more general <code>Transform</code> category …","Indicates that <code>Self</code> is a more specific <code>Transform</code> category …","Tag representing the most general (not necessarily …","Tag representing the most general inversible <code>Transform</code> …","Tag representing an affine <code>Transform</code>. Its bottom-row is …","A transformation matrix in homogeneous coordinates.","A 2D general transformation that may not be invertible. …","An invertible 2D general transformation. Stored as a …","A 2D affine transformation. Stored as a homogeneous 3x3 …","A 3D general transformation that may not be inversible. …","An invertible 3D general transformation. Stored as a …","A 3D affine transformation. Stored as a homogeneous 4x4 …","A reflection wrt. a plane.","A 3D orthographic projection stored as a homogeneous 4x4 …","A 3D perspective projection stored as a homogeneous 4x4 …","[Reexported at the root of this crate.] Factorization of …","Functions for balancing a matrix.","Applies in-place a modified Parlett and Reinsch matrix …","Computes in-place <code>D * m * D.inverse()</code>, where <code>D</code> is the …","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Computes the matrix determinant.","Computes the matrix determinant.","Computes the bidiagonalization using householder …","Computes the LU decomposition with full pivoting of <code>matrix</code>…","Computes the LU decomposition with partial (row) pivoting …","Computes the QR decomposition of this matrix.","Computes the QR decomposition (with column pivoting) of …","Computes the Singular Value Decomposition using implicit …","Attempts to compute the Singular Value Decomposition of …","Attempts to compute the Cholesky decomposition of this …","Attempts to compute the UDU decomposition of this matrix.","Computes the Hessenberg decomposition of this matrix …","Computes the Schur decomposition of a square matrix.","Attempts to compute the Schur decomposition of a square …","Computes the eigendecomposition of this symmetric matrix.","Computes the eigendecomposition of the given symmetric …","Computes the tridiagonalization of this symmetric matrix.","Computes exponential of this matrix","Computes exponential of this matrix","Construction of givens rotations.","A Givens rotation.","The Givents rotation that does nothing.","Initializes a Givens rotation from its components.","Initializes a Givens rotation from its non-normalized …","Initializes a Givens rotation form its non-normalized …","Computes the rotation <code>R</code> required such that the <code>y</code> …","Computes the rotation <code>R</code> required such that the <code>x</code> …","The cos part of this roration.","The sin part of this roration.","The inverse of this givens rotation.","Performs the multiplication <code>rhs = self * rhs</code> in-place.","Performs the multiplication <code>lhs = lhs * self</code> in-place.","Construction of householder elementary reflections.","Attempts to invert this matrix.","Attempts to invert this matrix.","Attempts to invert this matrix in-place. Returns <code>false</code> …","Attempts to invert this matrix in-place. Returns <code>false</code> …","Attempts to raise this matrix to an integral power <code>e</code> …","Attempts to raise this matrix to an integral power <code>e</code>. If …","Computes the eigenvalues of this matrix.","Computes the eigenvalues of this matrix.","Computes the eigenvalues of this matrix.","Computes the eigenvalues of this matrix.","Computes the solution of the linear system <code>self . x = b</code> …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Computes the solution of the linear system <code>self . x = b</code> …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Computes the solution of the linear system <code>self . x = b</code> …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Computes the solution of the linear system <code>self . x = b</code> …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> …","Computes the singular values of this matrix.","Computes the rank of this matrix.","Computes the pseudo-inverse of this matrix.","Computes the eigenvalues of this symmetric matrix.","Computes the eigenvalues of this symmetric matrix.","The bidiagonalization of a general matrix.","The Cholesky decomposition of a …","The QR decomposition (with column pivoting) of a general …","LU decomposition with full row and column pivoting.","Hessenberg decomposition of a general matrix.","LU decomposition with partial (row) pivoting.","Performs a LU decomposition to overwrite <code>out</code> with the …","A sequence of row or column permutations.","The QR decomposition of a general matrix.","Schur decomposition of a square matrix.","Singular Value Decomposition of a general matrix.","The left-singular vectors <code>U</code> of this SVD.","The right-singular vectors <code>V^t</code> of this SVD.","The singular values of this SVD.","Eigendecomposition of a symmetric matrix.","The eigenvectors of the decomposed matrix.","The unsorted eigenvalues of the decomposed matrix.","Computes the wilkinson shift, i.e., the 2x2 symmetric …","Tridiagonalization of a symmetric matrix.","UDU factorization.","The upper triangular matrix resulting from the …","The diagonal matrix resulting from the factorization","A complex number in Cartesian form.","Real portion of the complex number","Imaginary portion of the complex number","Trait <strong>alias</strong> for <code>Add</code> and <code>AddAssign</code> with result of type <code>Self</code>…","Trait <strong>alias</strong> for <code>Div</code> and <code>DivAssign</code> with result of type <code>Self</code>…","Trait <strong>alias</strong> for <code>Mul</code> and <code>MulAssign</code> with result of type <code>Self</code>…","Trait <strong>alias</strong> for <code>Sub</code> and <code>SubAssign</code> with result of type <code>Self</code>…","Trait shared by all complex fields and its subfields …","","Builds a pure-real complex number from the given value.","The real part of this complex number.","The imaginary part of this complex number.","The modulus of this complex number.","The squared modulus of this complex number.","The argument of this complex number.","The sum of the absolute value of this complex number’s …","Multiplies this complex number by <code>factor</code>.","Divides this complex number by <code>factor</code>.","The polar form of this complex number: (modulus, arg)","The exponential form of this complex number: (modulus, …","The exponential part of this complex number: …","","","","","","","The absolute value of this complex number: …","Computes (self.conjugate() * self + other.conjugate() * …","","","","","","","","","","","","","","","","","Cardinal sine","","Cardinal cos","","","","","","","","","","","","","","","","","Trait implemented by fields, i.e., complex numbers and …","Trait shared by all reals.","Is the sign of this real number positive?","Is the sign of this real number negative?","Copies the sign of <code>self</code> to <code>to</code>.","","","","","","","","","","","","","","","","","","","","Lane-wise generalization of <code>bool</code> for SIMD booleans.","A bit mask representing the boolean state of each lanes …","Lane-wise bitwise and of the vector elements.","Lane-wise bitwise or of the vector elements.","Lane-wise bitwise xor of the vector elements.","Are all vector lanes true?","Is any vector lane true?","Are all vector lanes false?","Merges the value of <code>if_value()</code> and <code>else_value()</code> depending …","Merges the value of <code>if_value()</code> and <code>else_if.1()</code> and …","Merges the value of <code>if_value()</code> and <code>else_if.1()</code> and …","Lane-wise generalisation of <code>ComplexField</code> for SIMD …","Type of the coefficients of a complex number.","Builds a pure-real complex number from the given value.","The real part of this complex number.","The imaginary part of this complex number.","The modulus of this complex number.","The squared modulus of this complex number.","The argument of this complex number.","The sum of the absolute value of this complex number’s …","Multiplies this complex number by <code>factor</code>.","Divides this complex number by <code>factor</code>.","The polar form of this complex number: (modulus, arg)","The exponential form of this complex number: (modulus, …","The exponential part of this complex number: …","","","","","","","The absolute value of this complex number: …","Computes (self.conjugate() * self + other.conjugate() * …","","","","","","","","","","","","","","","","","Cardinal sine","","Cardinal cos","","","","","","","","","","","","","","","Computes the sum of all the lanes of <code>self</code>.","Computes the product of all the lanes of <code>self</code>.","Lane-wise generalization of the standard <code>PartialOrd</code> for …","Lanewise <em>greater than</em> <code>></code> comparison.","Lanewise <em>less than</em> <code><</code> comparison.","Lanewise <em>greater or equal</em> <code>>=</code> comparison.","Lanewise <em>less or equal</em> <code><=</code> comparison.","Lanewise <em>equal</em> <code>==</code> comparison.","Lanewise <em>not equal</em> <code>!=</code> comparison.","Lanewise max value.","Lanewise min value.","Clamps each lane of <code>self</code> between the corresponding lane …","The min value among all lanes of <code>self</code>.","The max value among all lanes of <code>self</code>.","Lanewise generalization of <code>RealField</code> for SIMD reals.","Copies the sign of <code>sign</code> to <code>self</code>.","","","","","","","","","","","","","","","","","","Base trait for every SIMD types.","The type of the elements of each lane of this SIMD value.","Type of the result of comparing two SIMD values like <code>self</code>.","The number of lanes of this SIMD value.","Initializes an SIMD value with each lanes set to <code>val</code>.","Extracts the i-th lane of <code>self</code>.","Extracts the i-th lane of <code>self</code> without bound-checking.","Replaces the i-th lane of <code>self</code> by <code>val</code>.","Replaces the i-th lane of <code>self</code> by <code>val</code> without …","Merges <code>self</code> and <code>other</code> depending on the lanes of <code>cond</code>.","Applies a function to each lane of <code>self</code>.","Applies a function to each lane of <code>self</code> paired with the …","Gets the multiplicative identity element.","Gets the additive identity element.","Wraps <code>val</code> into the range <code>[min, max]</code> using modular …","Returns a reference to the input value clamped to the …","Same as <code>cmp::max</code>.","Same as <code>cmp::min</code>.","The absolute value of <code>a</code>.","Returns the infimum of <code>a</code> and <code>b</code>.","Returns the supremum of <code>a</code> and <code>b</code>.","Returns simultaneously the infimum and supremum of <code>a</code> and <code>b</code>…","Compare <code>a</code> and <code>b</code> using a partial ordering relation.","Returns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a < b</code>.","Returns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a <= b</code>.","Returns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a > b</code>.","Returns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a >= b</code>.","Return the minimum of <code>a</code> and <code>b</code> if they are comparable.","Return the maximum of <code>a</code> and <code>b</code> if they are comparable.","Clamp <code>value</code> between <code>min</code> and <code>max</code>. Returns <code>None</code> if <code>value</code> is …","Sorts two values in increasing order using a partial …","The center of two points.","The distance between two points.","The squared distance between two points.","Converts an object from one type to an equivalent or more …","Attempts to convert an object to a more specific one.","Indicates if <code>try_convert</code> will succeed without actually …","Use with care! Same as <code>try_convert</code> but without any …","Converts an object from one type to an equivalent or more …","Attempts to convert an object to a more specific one.","Use with care! Same as <code>try_convert</code> but without any …","When “no_unsound_assume_init” is enabled, expands to …omputes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","","Raises <code>self</code> to a floating point power.","Returns the logarithm of <code>self</code> with respect to an …","Raises <code>self</code> to a complex power.","Computes the sine of <code>self</code>.","Computes the cosine of <code>self</code>.","","Computes the tangent of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>…","Computes the principal value of the inverse tangent of …","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","Computes the principal value of inverse hyperbolic sine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","","Raises <code>self</code> to a floating point power.","Returns the logarithm of <code>self</code> with respect to an …","Raises <code>self</code> to a complex power.","Computes the sine of <code>self</code>.","Computes the cosine of <code>self</code>.","","Computes the tangent of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>…","Computes the principal value of the inverse tangent of …","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","Computes the principal value of inverse hyperbolic sine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","","Raises <code>self</code> to a floating point power.","Returns the logarithm of <code>self</code> with respect to an …","Raises <code>self</code> to a complex power.","Computes the sine of <code>self</code>.","Computes the cosine of <code>self</code>.","","Computes the tangent of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>…","Computes the principal value of the inverse tangent of …","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","Computes the principal value of inverse hyperbolic sine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","","Raises <code>self</code> to a floating point power.","Returns the logarithm of <code>self</code> with respect to an …","Raises <code>self</code> to a complex power.","Computes the sine of <code>self</code>.","Computes the cosine of <code>self</code>.","","Computes the tangent of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>…","Computes the principal value of the inverse tangent of …","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","Computes the principal value of inverse hyperbolic sine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","","Raises <code>self</code> to a floating point power.","Returns the logarithm of <code>self</code> with respect to an …","Raises <code>self</code> to a complex power.","Computes the sine of <code>self</code>.","Computes the cosine of <code>self</code>.","","Computes the tangent of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>…","Computes the principal value of the inverse tangent of …","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","Computes the principal value of inverse hyperbolic sine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","","Raises <code>self</code> to a floating point power.","Returns the logarithm of <code>self</code> with respect to an …","Raises <code>self</code> to a complex power.","Computes the sine of <code>self</code>.","Computes the cosine of <code>self</code>.","","Computes the tangent of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>…","Computes the principal value of the inverse tangent of …","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","Computes the principal value of inverse hyperbolic sine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","","Raises <code>self</code> to a floating point power.","Returns the logarithm of <code>self</code> with respect to an …","Raises <code>self</code> to a complex power.","Computes the sine of <code>self</code>.","Computes the cosine of <code>self</code>.","","Computes the tangent of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>…","Computes the principal value of the inverse tangent of …","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","Computes the principal value of inverse hyperbolic sine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","","","Raises <code>self</code> to a floating point power.","Returns the logarithm of <code>self</code> with respect to an …","Raises <code>self</code> to a complex power.","Computes the sine of <code>self</code>.","Computes the cosine of <code>self</code>.","","Computes the tangent of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>…","Computes the principal value of the inverse tangent of …","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","Computes the principal value of inverse hyperbolic sine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic …","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …xtend the number of columns of the <code>Matrix</code> with elements …","Extend the number of rows of a <code>Vector</code> with elements from …","Extends the number of columns of a <code>Matrix</code> with <code>Vector</code>s …","Extends the number of columns of the <code>VecStorage</code> with …","Extends the number of columns of the <code>VecStorage</code> with …","Extends the number of columns of the <code>VecStorage</code> with …","Extends the number of rows of the <code>VecStorage</code> with elements…xample","","Examplereates a new identity isometry.","Creates a new identity similarity.","Creates a new identity transformhe dot product between two vectors or matrices (seen as …","The conjugate-linear dot product between two vectors or …","The dot product between the transpose of <code>self</code> and <code>rhs</code>.","Computes <code>self = a * x * c + b * self</code>.","Computes <code>self = a * x + b * self</code>.","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a …","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a <strong>…","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a <strong>…","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is …","Computes <code>self = alpha * a.transpose() * x + beta * self</code>, …","Computes <code>self = alpha * a.adjoint() * x + beta * self</code>, …","Computes <code>self = a * x * c + b * self</code>.","Computes <code>self = a * x + b * self</code>.","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a …","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a <strong>…","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a <strong>…","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is …","Computes <code>self = alpha * a.transpose() * x + beta * self</code>, …","Computes <code>self = alpha * a.adjoint() * x + beta * self</code>, …","Computes <code>self = alpha * x * y.transpose() + beta * self</code>.","Computes <code>self = alpha * x * y.adjoint() + beta * self</code>.","Computes <code>self = alpha * a * b + beta * self</code>, where …","Computes <code>self = alpha * a.transpose() * b + beta * self</code>, …","Computes <code>self = alpha * a.adjoint() * b + beta * self</code>, …","Computes <code>self = alpha * x * y.transpose() + beta * self</code>, …","Computes <code>self = alpha * x * y.transpose() + beta * self</code>, …","Computes <code>self = alpha * x * y.adjoint() + beta * self</code>, …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Negates <code>self</code> in-place.","Equivalent to <code>self + rhs</code> but stores the result into <code>out</code> …","Equivalent to <code>self + rhs</code> but stores the result into <code>out</code> …","Equivalent to <code>self.transpose() * rhs</code>.","Equivalent to <code>self.adjoint() * rhs</code>.","Equivalent to <code>self.transpose() * rhs</code> but stores the …","Equivalent to <code>self.adjoint() * rhs</code> but stores the result …","Equivalent to <code>self * rhs</code> but stores the result into <code>out</code> …","The kronecker product of two matrices (aka. tensor …","Creates a new homogeneous matrix that applies the same …","Creates a new homogeneous matrix that applies a distinct …","Creates a new homogeneous matrix that applies a pure …","Creates a new homogeneous matrix that applies the same …","Creates a new homogeneous matrix that applies a distinct …","Creates a new homogeneous matrix that applies a pure …","Builds a 2 dimensional homogeneous rotation matrix from …","Creates a new homogeneous matrix that applies a scaling …","Builds a 2 dimensional homogeneous rotation matrix from …","Creates a new homogeneous matrix that applies a scaling …","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a 3D homogeneous rotation matrix from an axis and …","Creates a new homogeneous matrix that applies a scaling …","Builds a 3D homogeneous rotation matrix from an axis and …","Creates a new rotation from Euler angles.","Builds a 3D homogeneous rotation matrix from an axis and …","Creates a new homogeneous matrix for an orthographic …","Creates a new homogeneous matrix for a perspective …","Creates an isometry that corresponds to the local frame …","Deprecated: Use [Matrix4::face_towards] instead.","Builds a right-handed look-at view matrix.","Builds a left-handed look-at view matrix.","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a 3D homogeneous rotation matrix from an axis and …","Creates a new homogeneous matrix that applies a scaling …","Builds a 3D homogeneous rotation matrix from an axis and …","Creates a new rotation from Euler angles.","Builds a 3D homogeneous rotation matrix from an axis and …","Creates a new homogeneous matrix for an orthographic …","Creates a new homogeneous matrix for a perspective …","Creates an isometry that corresponds to the local frame …","Deprecated: Use [Matrix4::face_towards] instead.","Builds a right-handed look-at view matrix.","Builds a left-handed look-at view matrix.","Computes the transformation equal to <code>self</code> followed by an …","Computes the transformation equal to an uniform scaling …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to a non-uniform …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to a translation …","Computes in-place the transformation equal to <code>self</code> …","Computes in-place the transformation equal to an uniform …","Computes in-place the transformation equal to <code>self</code> …","Computes in-place the transformation equal to a …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to a translation …","Computes the transformation equal to <code>self</code> followed by an …","Computes the transformation equal to an uniform scaling …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to a non-uniform …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to a translation …","Computes in-place the transformation equal to <code>self</code> …","Computes in-place the transformation equal to an uniform …","Computes in-place the transformation equal to <code>self</code> …","Computes in-place the transformation equal to a …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to a translation …","Transforms the given vector, assuming the matrix <code>self</code> …","Transforms the given vector, assuming the matrix <code>self</code> …","Transforms the given point, assuming the matrix <code>self</code> uses …","Transforms the given point, assuming the matrix <code>self</code> uses …","Transforms the given point, assuming the matrix <code>self</code> uses …","Transforms the given point, assuming the matrix <code>self</code> uses …","Computes the component-wise absolute value.","Componentwise matrix or vector multiplication.","Computes componentwise …","Inplace componentwise matrix or vector multiplication.","Inplace componentwise matrix or vector multiplication.","Componentwise matrix or vector division.","Computes componentwise …","Inplace componentwise matrix or vector division.","Inplace componentwise matrix or vector division.","Computes the infimum (aka. componentwise min) of two …","Computes the supremum (aka. componentwise max) of two …","Computes the (infimum, supremum) of two matrices/vectors.","Adds a scalar to <code>self</code>.","Adds a scalar to <code>self</code> in-place.","Creates a new uninitialized matrix. If the matrix has a …","Creates a matrix with all its elements set to <code>elem</code>.","Creates a matrix with all its elements set to <code>elem</code>.","Creates a matrix with all its elements set to 0.","Creates a matrix with all its elements filled by an …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix filled with the results of a function …","Creates a new identity matrix.","Creates a new matrix with its diagonal filled with copies …","Creates a new matrix that may be rectangular. The first …","Builds a new matrix from its rows.","Builds a new matrix from its columns.","Creates a matrix backed by a given <code>Vec</code>.","Creates a new uninitialized matrix. If the matrix has a …","Creates a matrix with all its elements set to <code>elem</code>.","Creates a matrix with all its elements set to <code>elem</code>.","Creates a matrix with all its elements set to 0.","Creates a matrix with all its elements filled by an …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix filled with the results of a function …","Creates a new identity matrix.","Creates a new matrix with its diagonal filled with copies …","Creates a new matrix that may be rectangular. The first …","Builds a new matrix from its rows.","Builds a new matrix from its columns.","Creates a matrix backed by a given <code>Vec</code>.","Creates a square matrix with its diagonal set to <code>diag</code> and …","Creates a square matrix with its diagonal set to <code>diag</code> and …","Creates a new uninitialized matrix or vector.","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector filled with the results of a …","Creates an identity matrix. If the matrix is not square, …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a new matrix that may be rectangular. The first …","Creates a new uninitialized matrix or vector.","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector filled with the results of a …","Creates an identity matrix. If the matrix is not square, …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a new matrix that may be rectangular. The first …","Creates a new uninitialized matrix or vector.","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector filled with the results of a …","Creates an identity matrix. If the matrix is not square, …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a new matrix that may be rectangular. The first …","Creates a new uninitialized matrix or vector.","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector filled with the results of a …","Creates an identity matrix. If the matrix is not square, …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a new matrix that may be rectangular. The first …","Creates a new uninitialized matrix or vector.","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector filled with the results of a …","Creates an identity matrix. If the matrix is not square, …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a new matrix that may be rectangular. The first …","Creates a new uninitialized matrix or vector.","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector filled with the results of a …","Creates an identity matrix. If the matrix is not square, …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a new matrix that may be rectangular. The first …","Creates a new uninitialized matrix or vector.","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector filled with the results of a …","Creates an identity matrix. If the matrix is not square, …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a new matrix that may be rectangular. The first …","Creates a new uninitialized matrix or vector.","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements filled …","Creates a matrix or vector filled with the results of a …","Creates an identity matrix. If the matrix is not square, …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a new matrix that may be rectangular. The first …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix backed by a given <code>Vec</code>.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","The column vector with <code>val</code> as its i-th component.","The column unit vector with <code>T::one()</code> as its i-th …","The column vector with a 1 as its first component, and …","The column vector with a 1 as its second component, and …","The column vector with a 1 as its third component, and …","The column vector with a 1 as its fourth component, and …","The column vector with a 1 as its fifth component, and …","The column vector with a 1 as its sixth component, and …","The unit column vector with a 1 as its first component, …","The unit column vector with a 1 as its second component, …","The unit column vector with a 1 as its third component, …","The unit column vector with a 1 as its fourth component, …","The unit column vector with a 1 as its fifth component, …","The unit column vector with a 1 as its sixth component, …","The column vector with <code>val</code> as its i-th component.","The column unit vector with <code>T::one()</code> as its i-th …","The column vector with a 1 as its first component, and …","The column vector with a 1 as its second component, and …","The column vector with a 1 as its third component, and …","The column vector with a 1 as its fourth component, and …","The column vector with a 1 as its fifth component, and …","The column vector with a 1 as its sixth component, and …","The unit column vector with a 1 as its first component, …","The unit column vector with a 1 as its second component, …","The unit column vector with a 1 as its third component, …","The unit column vector with a 1 as its fourth component, …","The unit column vector with a 1 as its fifth component, …","The unit column vector with a 1 as its sixth component, …","Creates, without bound-checking, a matrix slice from an …","Creates a matrix slice from an array and with dimensions …","Creates, without bound-checking, a matrix slice from an …","Creates a matrix slice from an array and with dimensions …","Creates, without bound-checking, a matrix slice from an …","Creates a matrix slice from an array and with dimensions …","Creates, without bound-checking, a matrix slice from an …","Creates a matrix slice from an array and with dimensions …","Creates a new matrix slice from the given data array.","Creates, without bound checking, a new matrix slice from …","Creates a new matrix slice from the given data array.","Creates, without bound checking, a new matrix slice from …","Creates a new matrix slice with the specified strides …","Creates, without bound checking, a new matrix slice with …","Creates a new matrix slice with the specified strides …","Creates, without bound checking, a new matrix slice with …","Creates a new matrix slice from the given data array.","Creates, without bound checking, a new matrix slice from …","Creates a new matrix slice from the given data array.","Creates, without bound checking, a new matrix slice from …","Creates a new matrix slice with the specified strides …","Creates, without bound checking, a new matrix slice with …","Creates a new matrix slice with the specified strides …","Creates, without bound checking, a new matrix slice with …","Creates a new matrix slice from the given data array.","Creates, without bound checking, a new matrix slice from …","Creates a new matrix slice from the given data array.","Creates, without bound checking, a new matrix slice from …","Creates a new matrix slice with the specified strides …","Creates, without bound checking, a new matrix slice with …","Creates a new matrix slice with the specified strides …","Creates, without bound checking, a new matrix slice with …","Creates a new matrix slice from the given data array.","Creates, without bound checking, a new matrix slice from …","Creates a new matrix slice from the given data array.","Creates, without bound checking, a new matrix slice from …","Creates a new matrix slice with the specified strides …","Creates, without bound checking, a new matrix slice with …","Creates a new matrix slice with the specified strides …","Creates, without bound checking, a new matrix slice with …","Creates, without bound-checking, a mutable matrix slice …","Creates a mutable matrix slice from an array and with …","Creates, without bound-checking, a mutable matrix slice …","Creates a mutable matrix slice from an array and with …","Creates, without bound-checking, a mutable matrix slice …","Creates a mutable matrix slice from an array and with …","Creates, without bound-checking, a mutable matrix slice …","Creates a mutable matrix slice from an array and with …","Creates a new mutable matrix slice from the given data …","Creates, without bound checking, a new mutable matrix …","Creates a new mutable matrix slice from the given data …","Creates, without bound checking, a new mutable matrix …","Creates a new mutable matrix slice with the specified …","Creates, without bound checking, a new mutable matrix …","Creates a new mutable matrix slice with the specified …","Creates, without bound checking, a new mutable matrix …","Creates a new mutable matrix slice from the given data …","Creates, without bound checking, a new mutable matrix …","Creates a new mutable matrix slice from the given data …","Creates, without bound checking, a new mutable matrix …","Creates a new mutable matrix slice with the specified …","Creates, without bound checking, a new mutable matrix …","Creates a new mutable matrix slice with the specified …","Creates, without bound checking, a new mutable matrix …","Creates a new mutable matrix slice from the given data …","Creates, without bound checking, a new mutable matrix …","Creates a new mutable matrix slice from the given data …","Creates, without bound checking, a new mutable matrix …","Creates a new mutable matrix slice with the specified …","Creates, without bound checking, a new mutable matrix …","Creates a new mutable matrix slice with the specified …","Creates, without bound checking, a new mutable matrix …","Creates a new mutable matrix slice from the given data …","Creates, without bound checking, a new mutable matrix …","Creates a new mutable matrix slice from the given data …","Creates, without bound checking, a new mutable matrix …","Creates a new mutable matrix slice with the specified …","Creates, without bound checking, a new mutable matrix …","Creates a new mutable matrix slice with the specified …","Creates, without bound checking, a new mutable matrix …","Extracts the upper triangular part of this matrix …","Extracts the lower triangular part of this matrix …","Creates a new matrix by extracting the given set of rows …","Creates a new matrix by extracting the given set of …","Fills the diagonal of this matrix with the content of the …","Fills the diagonal of this matrix with the content of the …","Fills the selected row of this matrix with the content of …","Fills the selected column of this matrix with the content …","Sets all the elements of this matrix to <code>val</code>.","Fills <code>self</code> with the identity matrix.","Sets all the diagonal elements of this matrix to <code>val</code>.","Sets all the elements of the selected row to <code>val</code>.","Sets all the elements of the selected column to <code>val</code>.","Sets all the elements of the lower-triangular part of …","Sets all the elements of the lower-triangular part of …","Copies the upper-triangle of this matrix to its …","Copies the upper-triangle of this matrix to its …","Swaps two rows in-place.","Swaps two columns in-place.","Removes the <code>i</code>-th column from this matrix.","Removes all columns in <code>indices</code>   ","Removes all rows in <code>indices</code>   ","Removes <code>D::dim()</code> consecutive columns from this matrix, …","Removes <code>n</code> consecutive columns from this matrix, starting …","Removes <code>nremove.value()</code> columns from this matrix, …","Removes the <code>i</code>-th row from this matrix.","Removes <code>D::dim()</code> consecutive rows from this matrix, …","Removes <code>n</code> consecutive rows from this matrix, starting …","Removes <code>nremove.value()</code> rows from this matrix, starting …","Inserts a column filled with <code>val</code> at the <code>i-th</code> position.","Inserts <code>D</code> columns filled with <code>val</code> starting at the <code>i-th</code> …","Inserts <code>n</code> columns filled with <code>val</code> starting at the <code>i-th</code> …","Inserts <code>ninsert.value()</code> columns starting at the <code>i-th</code> …","Inserts a row filled with <code>val</code> at the <code>i-th</code> position.","Inserts <code>D::dim()</code> rows filled with <code>val</code> starting at the <code>i-th</code>…","Inserts <code>n</code> rows filled with <code>val</code> starting at the <code>i-th</code> …","Inserts <code>ninsert.value()</code> rows at the <code>i-th</code> place of this …","Resizes this matrix so that it contains <code>new_nrows</code> rows …","Resizes this matrix vertically, i.e., so that it contains …","Resizes this matrix horizontally, i.e., so that it …","Resizes this matrix so that it contains <code>R2::value()</code> rows …","Resizes <code>self</code> such that it has dimensions …","Reshapes <code>self</code> such that it has dimensions …","Resizes this matrix in-place.","Resizes this matrix in-place.","Changes the number of rows of this matrix in-place.","Changes the number of rows of this matrix in-place.","Changes the number of column of this matrix in-place.","Changes the number of column of this matrix in-place.","Produces a view of the data at the given index, or <code>None</code> …","Produces a mutable view of the data at the given index, or…","Produces a view of the data at the given index, or panics …","Produces a mutable view of the data at the given index, or…","Produces a view of the data at the given index, without …","Returns a mutable view of the data at the given index, …","Creates a new matrix with the given data without …","Creates a new matrix with the given data.","Creates a new uninitialized matrix with the given …","The shape of this matrix returned as the tuple (number of …","The number of rows of this matrix.","The number of columns of this matrix.","The strides (row stride, column stride) of this matrix.","Computes the row and column coordinates of the i-th …","Returns a pointer to the start of the matrix.","Tests whether <code>self</code> and <code>rhs</code> are equal up to a given …","Tests whether <code>self</code> and <code>rhs</code> are exactly equal.","Moves this matrix into one that owns its data.","Moves this matrix into one that owns its data. The actual …","Clones this matrix to one that owns its data.","Clones this matrix into one that owns its data. The …","Transposes <code>self</code> and store the result into <code>out</code>.","Transposes <code>self</code>.","Returns a matrix containing the result of <code>f</code> applied to …","Cast the components of <code>self</code> to another type.","Similar to <code>self.iter().fold(init, f)</code> except that <code>init</code> is …","Returns a matrix containing the result of <code>f</code> applied to …","Returns a matrix containing the result of <code>f</code> applied to …","Returns a matrix containing the result of <code>f</code> applied to …","Folds a function <code>f</code> on each entry of <code>self</code>.","Folds a function <code>f</code> on each pairs of entries from <code>self</code> and …","Replaces each component of <code>self</code> by the result of a …","Replaces each component of <code>self</code> by the result of a …","Replaces each component of <code>self</code> by the result of a …","Iterates through this matrix coordinates in column-major …","Iterate through the rows of this matrix.","Iterate through the columns of this matrix.","Mutably iterates through this matrix coordinates.","Mutably iterates through this matrix rows.","Mutably iterates through this matrix columns.","Returns a mutable pointer to the start of the matrix.","Swaps two entries without bound-checking.","Swaps two entries.","Fills this matrix with the content of a slice. Both must …","Fills this matrix with the content of another one. Both …","Fills this matrix with the content of the transpose …","Returns <code>self</code> with each of its components replaced by the …","Gets a reference to the i-th element of this column …","Gets a reference to the i-th element of this column …","Gets a mutable reference to the i-th element of this …","Gets a mutable reference to the i-th element of this …","Extracts a slice containing the entire matrix entries …","Extracts a mutable slice containing the entire matrix …","Transposes the square matrix <code>self</code> in-place.","Takes the adjoint (aka. conjugate-transpose) of <code>self</code> and …","The adjoint (aka. conjugate-transpose) of <code>self</code>.","Takes the conjugate and transposes <code>self</code> and store the …","The conjugate transposition of <code>self</code>.","The conjugate of <code>self</code>.","Divides each component of the complex matrix <code>self</code> by the …","Multiplies each component of the complex matrix <code>self</code> by …","The conjugate of the complex matrix <code>self</code> computed …","Divides each component of the complex matrix <code>self</code> by the …","Multiplies each component of the complex matrix <code>self</code> by …","Sets <code>self</code> to its adjoint.","Sets <code>self</code> to its adjoint (aka. conjugate-transpose).","The diagonal of this matrix.","Apply the given function to this matrix’s diagonal and …","Computes a trace of a square matrix, i.e., the sum of its …","The diagonal of this matrix.","Apply the given function to this matrix’s diagonal and …","Computes a trace of a square matrix, i.e., the sum of its …","The symmetric part of <code>self</code>, i.e., …","The hermitian part of <code>self</code>, i.e., …","The symmetric part of <code>self</code>, i.e., …","The hermitian part of <code>self</code>, i.e., …","Yields the homogeneous matrix for this matrix, i.e., …","Computes the coordinates in projective space of this …","Constructs a vector from coordinates in projective space, …","Computes the coordinates in projective space of this …","Constructs a vector from coordinates in projective space, …","Constructs a new vector of higher dimension by appending …","Constructs a new vector of higher dimension by appending …","The perpendicular product between two 2D column vectors, …","The 3D cross product between two vectors.","Computes the matrix <code>M</code> such that for all vector <code>v</code> we have …","Computes the matrix <code>M</code> such that for all vector <code>v</code> we have …","The smallest angle between two vectors.","Create a new matrix slice without bound checking and from …","Create a new matrix slice without bound checking.","Create a new matrix slice without bound checking.","Create a new matrix slice without bound checking and from …","Create a new matrix slice without bound checking.","Create a new matrix slice without bound checking.","Returns a slice containing the i-th row of this matrix.","Returns a slice containing the <code>n</code> first elements of the …","Extracts from this matrix a set of consecutive rows.","Extracts from this matrix a set of consecutive rows …","Extracts a compile-time number of consecutive rows from …","Extracts from this matrix a compile-time number of rows …","Extracts from this matrix <code>nrows</code> rows regularly skipping …","Extracts from this matrix <code>nrows</code> rows regularly skipping …","Returns a slice containing the i-th column of this matrix.","Returns a slice containing the <code>n</code> first elements of the …","Extracts from this matrix a set of consecutive columns.","Extracts from this matrix a set of consecutive columns …","Extracts a compile-time number of consecutive columns …","Extracts from this matrix a compile-time number of …","Extracts from this matrix <code>ncols</code> columns. The number of …","Extracts from this matrix <code>ncols</code> columns skipping <code>step</code> …","Slices this matrix starting at its component <code>(irow, icol)</code> …","Slices this matrix starting at its component …","Slices this matrix starting at its component <code>(irow, icol)</code> …","Slices this matrix starting at its component …","Creates a slice that may or may not have a fixed size and …","Creates a slice that may or may not have a fixed size and …","Splits this NxM matrix into two parts delimited by two …","Splits this NxM matrix into two parts delimited by two …","Returns a slice containing the i-th row of this matrix.","Returns a slice containing the <code>n</code> first elements of the …","Extracts from this matrix a set of consecutive rows.","Extracts from this matrix a set of consecutive rows …","Extracts a compile-time number of consecutive rows from …","Extracts from this matrix a compile-time number of rows …","Extracts from this matrix <code>nrows</code> rows regularly skipping …","Extracts from this matrix <code>nrows</code> rows regularly skipping …","Returns a slice containing the i-th column of this matrix.","Returns a slice containing the <code>n</code> first elements of the …","Extracts from this matrix a set of consecutive columns.","Extracts from this matrix a set of consecutive columns …","Extracts a compile-time number of consecutive columns …","Extracts from this matrix a compile-time number of …","Extracts from this matrix <code>ncols</code> columns. The number of …","Extracts from this matrix <code>ncols</code> columns skipping <code>step</code> …","Slices this matrix starting at its component <code>(irow, icol)</code> …","Slices this matrix starting at its component …","Slices this matrix starting at its component <code>(irow, icol)</code> …","Slices this matrix starting at its component …","Creates a slice that may or may not have a fixed size and …","Creates a slice that may or may not have a fixed size and …","Splits this NxM matrix into two parts delimited by two …","Splits this NxM matrix into two parts delimited by two …","Slices a sub-matrix containing the rows indexed by the …","Slice containing all the rows indexed by the range <code>rows</code>.","Slice containing all the columns indexed by the range <code>rows</code>…","Slices a mutable sub-matrix containing the rows indexed …","Slice containing all the rows indexed by the range <code>rows</code>.","Slice containing all the columns indexed by the range <code>cols</code>…","The squared L2 norm of this vector.","The L2 norm of this matrix.","Compute the distance between <code>self</code> and <code>rhs</code> using the …","Uses the given <code>norm</code> to compute the norm of <code>self</code>.","Uses the metric induced by the given <code>norm</code> to compute the …","A synonym for the norm of this matrix.","A synonym for the squared norm of this matrix.","Sets the magnitude of this vector.","Returns a normalized version of this matrix.","The Lp norm of this matrix.","Attempts to normalize <code>self</code>.","Sets the magnitude of this vector unless it is smaller …","Returns a new vector with the same magnitude as <code>self</code> …","Returns a new vector with the same magnitude as <code>self</code> …","Returns a normalized version of this matrix unless its …","Normalizes this matrix in-place and returns its norm.","Normalizes this matrix in-place and return its norm.","Normalizes this matrix in-place or does nothing if its …","Orthonormalizes the given family of vectors. The largest …","Applies the given closure to each element of the …","Orthonormalizes the given family of vectors. The largest …","Applies the given closure to each element of the …","The total number of elements of this matrix.","Returns true if the matrix contains no elements.","Indicates if this is a square matrix.","Indicated if this is the identity matrix within a …","Checks that <code>Mᵀ × M = Id</code>.","Checks that this matrix is orthogonal and has a …","Returns <code>true</code> if this matrix is invertible.","Checks that this matrix is orthogonal and has a …","Returns <code>true</code> if this matrix is invertible.","Tests if <code>Self</code> the same as the type <code>T</code>","Performance hack: Clone doesn’t get inlined for Copy …","Returns a row vector where each element is the result of …","Returns a column vector where each element is the result …","Returns a column vector resulting from the folding of <code>f</code> …","The sum of all the elements of this matrix.","The sum of all the rows of this matrix.","The sum of all the rows of this matrix. The result is …","The sum of all the columns of this matrix.","The variance of all the elements of this matrix.","The variance of all the rows of this matrix.","The variance of all the rows of this matrix. The result …","The variance of all the columns of this matrix.","The mean of all the elements of this matrix.","The mean of all the rows of this matrix.","The mean of all the rows of this matrix. The result is …","The mean of all the columns of this matrix.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Normalize the given vector and return it wrapped on a <code>Unit</code>…","Attempts to normalize the given vector and return it …","Normalize the given vector and return it wrapped on a <code>Unit</code>…","Normalize the given vector and return it wrapped on a <code>Unit</code>…","Normalizes this vector again. This is useful when …","Normalizes this vector again using a first-order Taylor …","Wraps the given value, assuming it is already normalized.","Wraps the given reference, assuming it is already …","Retrieves the underlying value.","Retrieves the underlying value. Deprecated: use […","Returns a mutable reference to the underlying value. This …","Creates a new dynamic matrix data storage from the given …","The underlying data storage.","The underlying mutable data storage.","Resizes the underlying mutable data storage and unwraps …","The number of elements on the underlying vector.","Returns true if the underlying vector contains no …","Returns <code>self * (1.0 - t) + rhs * t</code>, i.e., the linear …","Computes the spherical linear interpolation between two …","Returns <code>self * (1.0 - t) + rhs * t</code>, i.e., the linear …","Computes the spherical linear interpolation between two …","Computes the spherical linear interpolation between two …","Computes the spherical linear interpolation between two …","Returns the absolute value of the component with the …","Returns the the 1-norm of the complex component with the …","Returns the component with the largest value.","Returns the absolute value of the component with the …","Returns the the 1-norm of the complex component with the …","Returns the component with the smallest value.","Computes the index of the matrix component with the …","Computes the index of the matrix component with the …","Computes the index of the vector component with the …","Computes the index and value of the vector component with …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index and value of the vector component with …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index and value of the vector component with …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index and value of the vector component with …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Apply the inverse rotation to the given unit vector.","Returns a point containing the result of <code>f</code> applied to …","Replaces each component of <code>self</code> by the result of a …","Converts this point into a vector in homogeneous …","Creates a new point with the given coordinates.","The dimension of this point.","Returns true if the point contains no elements.","The stride of this point. This is the number of buffer …","Iterates through this point coordinates.","Gets a reference to i-th element of this point without …","Mutably iterates through this point coordinates.","Gets a mutable reference to i-th element of this point …","Swaps two entries without bound-checking.","Computes the infimum (aka. componentwise min) of two …","Computes the supremum (aka. componentwise max) of two …","Computes the (infimum, supremum) of two points.","Creates a new point with uninitialized coordinates.","Creates a new point with all coordinates equal to zero.","Creates a new point from a slice.","Creates a new point from its homogeneous vector …","Cast the components of <code>self</code> to another type.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Creates a new rotation from the given square matrix.","A reference to the underlying matrix representation of …","A mutable reference to the underlying matrix …","A mutable reference to the underlying matrix …","Unwraps the underlying matrix.","Unwraps the underlying matrix. Deprecated: Use […","Converts this rotation into its equivalent homogeneous …","Transposes <code>self</code>.","Inverts <code>self</code>.","Transposes <code>self</code> in-place.","Inverts <code>self</code> in-place.","Rotate the given point.","Rotate the given vector.","Rotate the given point by the inverse of this rotation. …","Rotate the given vector by the inverse of this rotation. …","Rotate the given vector by the inverse of this rotation. …","Creates a new square identity rotation of the given …","Cast the components of <code>self</code> to another type.","Spherical linear interpolation between two rotation …","Spherical linear interpolation between two rotation …","Spherical linear interpolation between two rotation …","Computes the spherical linear interpolation between two …","Spherical linear interpolation between two rotation …","Computes the spherical linear interpolation between two …","Builds a 2 dimensional rotation matrix from an angle in …","Builds a 2 dimensional rotation matrix from an angle in …","Builds a 2 dimensional rotation matrix from an angle in …","Builds a 2 dimensional rotation matrix from an angle in …","Builds a rotation from a basis assumed to be orthonormal.","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","The rotation matrix required to align <code>a</code> and <code>b</code> but with …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The rotation matrix needed to make <code>self</code> and <code>other</code> …","Ensure this rotation is an orthonormal rotation matrix. …","Raise the quaternion to a given floating power, i.e., …","Builds a rotation from a basis assumed to be orthonormal.","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","The rotation matrix required to align <code>a</code> and <code>b</code> but with …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The rotation matrix needed to make <code>self</code> and <code>other</code> …","Ensure this rotation is an orthonormal rotation matrix. …","Raise the quaternion to a given floating power, i.e., …","The rotation angle.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle returned as a 1-dimensional vector.","The rotation angle.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle returned as a 1-dimensional vector.","Builds a 3 dimensional rotation matrix from an axis and …","Builds a 3D rotation matrix from an axis scaled by the …","Builds a 3D rotation matrix from an axis and a rotation …","Creates a new rotation from Euler angles.","Builds a 3 dimensional rotation matrix from an axis and …","Builds a 3D rotation matrix from an axis scaled by the …","Builds a 3D rotation matrix from an axis and a rotation …","Creates a new rotation from Euler angles.","Creates a rotation that corresponds to the local frame of …","Deprecated: Use [Rotation3::face_towards] instead.","Builds a right-handed look-at view matrix without …","Builds a left-handed look-at view matrix without …","Creates a rotation that corresponds to the local frame of …","Deprecated: Use [Rotation3::face_towards] instead.","Builds a right-handed look-at view matrix without …","Builds a left-handed look-at view matrix without …","The rotation matrix required to align <code>a</code> and <code>b</code> but with …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The rotation matrix needed to make <code>self</code> and <code>other</code> …","Raise the quaternion to a given floating power, i.e., …","Builds a rotation from a basis assumed to be orthonormal.","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Ensure this rotation is an orthonormal rotation matrix. …","The rotation matrix required to align <code>a</code> and <code>b</code> but with …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The rotation matrix needed to make <code>self</code> and <code>other</code> …","Raise the quaternion to a given floating power, i.e., …","Builds a rotation from a basis assumed to be orthonormal.","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Ensure this rotation is an orthonormal rotation matrix. …","The rotation angle in [0; pi].","The rotation axis. Returns <code>None</code> if the rotation angle is …","The rotation axis multiplied by the rotation angle.","The rotation axis and angle in ]0, pi] of this unit …","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","Creates Euler angles from a rotation.","Euler angles corresponding to this rotation from a …","The rotation angle in [0; pi].","The rotation axis. Returns <code>None</code> if the rotation angle is …","The rotation axis multiplied by the rotation angle.","The rotation axis and angle in ]0, pi] of this unit …","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","Creates Euler angles from a rotation.","Euler angles corresponding to this rotation from a …","Moves this unit quaternion into one that owns its data.","Clones this unit quaternion into one that owns its data.","Normalizes this quaternion.","The imaginary part of this quaternion.","The conjugate of this quaternion.","Linear interpolation between two quaternion.","The vector part <code>(i, j, k)</code> of this quaternion.","The scalar part <code>w</code> of this quaternion.","Reinterprets this quaternion as a 4D vector.","The norm of this quaternion.","A synonym for the norm of this quaternion.","The squared norm of this quaternion.","A synonym for the squared norm of this quaternion.","The dot product of two quaternions.","Inverts this quaternion if it is not zero.","Attempt to inverse this quaternion.","Calculates the inner product (also known as the dot …","Calculates the outer product (also known as the wedge …","Calculates the projection of <code>self</code> onto <code>other</code> (also known …","Calculates the rejection of <code>self</code> from <code>other</code> (also known …","The polar decomposition of this quaternion.","Compute the natural logarithm of a quaternion.","Compute the exponential of a quaternion.","Compute the exponential of a quaternion. Returns the …","Raise the quaternion to a given floating power.","Transforms this quaternion into its 4D vector form …","The mutable vector part <code>(i, j, k)</code> of this quaternion.","Replaces this quaternion by its conjugate.","Inverts this quaternion in-place if it is not zero.","Normalizes this quaternion.","Calculates square of a quaternion.","Divides quaternion into two.","Calculates square root.","Check if the quaternion is pure.","Convert quaternion to pure quaternion.","Left quaternionic division.","Right quaternionic division.","Calculates the quaternionic cosinus.","Calculates the quaternionic arccosinus.","Calculates the quaternionic sinus.","Calculates the quaternionic arcsinus.","Calculates the quaternionic tangent.","Calculates the quaternionic arctangent.","Calculates the hyperbolic quaternionic sinus.","Calculates the hyperbolic quaternionic arcsinus.","Calculates the hyperbolic quaternionic cosinus.","Calculates the hyperbolic quaternionic arccosinus.","Calculates the hyperbolic quaternionic tangent.","Calculates the hyperbolic quaternionic arctangent.","The rotation angle in [0; pi] of this unit quaternion.","The underlying quaternion.","Compute the conjugate of this unit quaternion.","Inverts this quaternion if it is not zero.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The unit quaternion needed to make <code>self</code> and <code>other</code> …","Linear interpolation between two unit quaternions.","Normalized linear interpolation between two unit …","Spherical linear interpolation between two unit …","Computes the spherical linear interpolation between two …","Compute the conjugate of this unit quaternion in-place.","Inverts this quaternion if it is not zero.","The rotation axis of this unit quaternion or <code>None</code> if the …","The rotation axis of this unit quaternion multiplied by …","The rotation axis and angle in ]0, pi] of this unit …","Compute the exponential of a quaternion.","Compute the natural logarithm of a quaternion.","Raise the quaternion to a given floating power.","Builds a rotation matrix from this unit quaternion.","Converts this unit quaternion into its equivalent Euler …","Retrieves the euler angles corresponding to this unit …","Converts this unit quaternion into its equivalent …","Rotate a point by this unit quaternion.","Rotate a vector by this unit quaternion.","Rotate a point by the inverse of this unit quaternion. …","Rotate a vector by the inverse of this unit quaternion. …","Rotate a vector by the inverse of this unit quaternion. …","Appends to <code>self</code> a rotation given in the axis-angle form, …","Creates a quaternion from a 4D vector. The quaternion …","Creates a new quaternion from its individual components. …","Cast the components of <code>self</code> to another type.","Constructs a pure quaternion.","Creates a new quaternion from its scalar and vector …","Constructs a real quaternion.","The quaternion multiplicative identity.","Creates a new quaternion from its polar decomposition.","The rotation identity.","Cast the components of <code>self</code> to another type.","Creates a new quaternion from a unit vector (the rotation …","Creates a new unit quaternion from a quaternion.","Creates a new unit quaternion from Euler angles.","Builds an unit quaternion from a basis assumed to be …","Builds an unit quaternion from a rotation matrix.","Builds an unit quaternion by extracting the rotation part …","Builds an unit quaternion by extracting the rotation part …","The unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","Creates an unit quaternion that corresponds to the local …","Deprecated: Use [UnitQuaternion::face_towards] instead.","Builds a right-handed look-at view matrix without …","Builds a left-handed look-at view matrix without …","Creates a new unit quaternion rotation from a rotation …","Creates a new unit quaternion rotation from a rotation …","Creates a new unit quaternion rotation from a rotation …","Creates a new unit quaternion rotation from a rotation …","Create the mean unit quaternion from a data structure …","Normalizes this quaternion.","Normalizes this quaternion.","The conjugate of this dual quaternion, containing the …","Replaces this quaternion by its conjugate.","Inverts this dual quaternion if it is not zero.","Inverts this dual quaternion in-place if it is not zero.","Linear interpolation between two dual quaternions.","The underlying dual quaternion.","Compute the conjugate of this unit quaternion.","Compute the conjugate of this unit quaternion in-place.","Inverts this dual quaternion if it is not zero.","Inverts this dual quaternion in place if it is not zero.","The unit dual quaternion needed to make <code>self</code> and <code>other</code> …","Linear interpolation between two unit dual quaternions.","Normalized linear interpolation between two unit …","Screw linear interpolation between two unit quaternions. …","Computes the screw-linear interpolation between two unit …","Return the rotation part of this unit dual quaternion.","Return the translation part of this unit dual quaternion.","Builds an isometry from this unit dual quaternion.","Rotate and translate a point by this unit dual quaternion …","Rotate a vector by this unit dual quaternion, ignoring …","Rotate and translate a point by the inverse of this unit …","Rotate a vector by the inverse of this unit quaternion, …","Rotate a unit vector by the inverse of this unit …","Converts this unit dual quaternion interpreted as an …","Creates a dual quaternion from its rotation and …","The dual quaternion multiplicative identity.","Cast the components of <code>self</code> to another type.","Creates a dual quaternion from only its real part, with …","The unit dual quaternion multiplicative identity, which …","Cast the components of <code>self</code> to another type.","Return a dual quaternion representing the translation and …","Return a unit dual quaternion representing the …","Creates a dual quaternion from a unit quaternion rotation.","The rotation angle in <code>]-pi; pi]</code> of this unit complex …","The sine of the rotation angle.","The cosine of the rotation angle.","The rotation angle returned as a 1-dimensional vector.","The rotation axis and angle in ]0, pi] of this complex …","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","Compute the conjugate of this unit complex number.","Inverts this complex number if it is not zero.","Compute in-place the conjugate of this unit complex …","Inverts in-place this unit complex number.","Builds the rotation matrix corresponding to this unit …","Converts this unit complex number into its equivalent …","Rotate the given point by this unit complex number.","Rotate the given vector by this unit complex number.","Rotate the given point by the inverse of this unit …","Rotate the given vector by the inverse of this unit …","Rotate the given vector by the inverse of this unit …","Spherical linear interpolation between two rotations …","The unit complex number multiplicative identity.","Builds the unit complex number corresponding to the …","Builds the unit complex number corresponding to the …","Builds the unit complex number from the sinus and cosinus …","Builds a unit complex rotation from an angle in radian …","Cast the components of <code>self</code> to another type.","The underlying complex number.","Creates a new unit complex number from a complex number.","Creates a new unit complex number from a complex number.","Builds the unit complex number from the corresponding 2D …","Builds a rotation from a basis assumed to be orthonormal.","Builds an unit complex by extracting the rotation part of …","Builds an unit complex by extracting the rotation part of …","The unit complex number needed to make <code>self</code> and <code>other</code> …","Raise this unit complex number to a given floating power.","The unit complex needed to make <code>a</code> and <code>b</code> be collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","The unit complex needed to make <code>a</code> and <code>b</code> be collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear …","Creates a new translation from the given vector.","Inverts <code>self</code>.","Converts this translation into its equivalent homogeneous …","Inverts <code>self</code> in-place.","Translate the given point.","Translate the given point by the inverse of this …","Creates a new identity translation.","Cast the components of <code>self</code> to another type.","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this translation from its components.","Creates a new isometry from its rotational and …","Inverts <code>self</code>.","Inverts <code>self</code> in-place.","Computes <code>self.inverse() * rhs</code> in a more efficient way.","Appends to <code>self</code> the given translation in-place.","Appends to <code>self</code> the given rotation in-place.","Appends in-place to <code>self</code> a rotation centered at the point …","Appends in-place to <code>self</code> a rotation centered at the point …","Transform the given point by this isometry.","Transform the given vector by this isometry, ignoring the …","Transform the given point by the inverse of this …","Transform the given vector by the inverse of this …","Transform the given unit vector by the inverse of this …","Converts this isometry into its equivalent homogeneous …","Converts this isometry into its equivalent homogeneous …","Creates a new identity isometry.","The isometry that applies the rotation <code>r</code> with its axis …","Creates a new 2D isometry from a translation and a …","Creates a new isometry from the given translation …","Creates a new isometry from the given rotation angle.","Cast the components of <code>self</code> to another type.","Creates a new 2D isometry from a translation and a …","Creates a new isometry from the given translation …","Creates a new isometry from the given rotation angle.","Cast the components of <code>self</code> to another type.","Creates a new 2D isometry from a translation and a …","Creates a new isometry from the given translation …","Creates a new isometry from the given rotation angle.","Cast the components of <code>self</code> to another type.","Creates a new 2D isometry from a translation and a …","Creates a new isometry from the given translation …","Creates a new isometry from the given rotation angle.","Cast the components of <code>self</code> to another type.","Creates a new isometry from a translation and a rotation …","Creates a new isometry from the given translation …","Creates a new isometry from the given rotation angle.","Cast the components of <code>self</code> to another type.","Creates a new isometry from a translation and a rotation …","Creates a new isometry from the given translation …","Creates a new isometry from the given rotation angle.","Cast the components of <code>self</code> to another type.","Creates a new isometry from a translation and a rotation …","Creates a new isometry from the given translation …","Creates a new isometry from the given rotation angle.","Cast the components of <code>self</code> to another type.","Creates a new isometry from a translation and a rotation …","Creates a new isometry from the given translation …","Creates a new isometry from the given rotation angle.","Cast the components of <code>self</code> to another type.","Creates an isometry that corresponds to the local frame …","Deprecated: Use [Isometry::face_towards] instead.","Builds a right-handed look-at view matrix.","Builds a left-handed look-at view matrix.","Creates an isometry that corresponds to the local frame …","Deprecated: Use [Isometry::face_towards] instead.","Builds a right-handed look-at view matrix.","Builds a left-handed look-at view matrix.","Creates an isometry that corresponds to the local frame …","Deprecated: Use [Isometry::face_towards] instead.","Builds a right-handed look-at view matrix.","Builds a left-handed look-at view matrix.","Creates an isometry that corresponds to the local frame …","Deprecated: Use [Isometry::face_towards] instead.","Builds a right-handed look-at view matrix.","Builds a left-handed look-at view matrix.","Interpolates between two isometries using a linear …","Attempts to interpolate between two isometries using a …","Interpolates between two isometries using a linear …","Attempts to interpolate between two isometries using a …","Interpolates between two isometries using a linear …","Attempts to interpolate between two isometries using a …","Interpolates between two isometries using a linear …","Attempts to interpolate between two isometries using a …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Creates a new similarity from its rotational and …","Creates a new similarity from its rotational and …","The scaling factor of this similarity transformation.","The scaling factor of this similarity transformation.","Creates a new similarity that applies only a scaling …","Inverts <code>self</code>.","Inverts <code>self</code> in-place.","The similarity transformation that applies a scaling …","The similarity transformation that applies a scaling …","Sets <code>self</code> to the similarity transformation that applies a …","Sets <code>self</code> to the similarity transformation that applies a …","Appends to <code>self</code> the given translation in-place.","Appends to <code>self</code> the given rotation in-place.","Appends in-place to <code>self</code> a rotation centered at the point …","Appends in-place to <code>self</code> a rotation centered at the point …","Transform the given point by this similarity.","Transform the given vector by this similarity, ignoring …","Transform the given point by the inverse of this …","Transform the given vector by the inverse of this …","Converts this similarity into its equivalent homogeneous …","Creates a new identity similarity.","The similarity that applies the scaling factor <code>scaling</code>, …","Creates a new similarity from a translation, a rotation, …","Cast the components of <code>self</code> to another type.","Creates a new similarity from a translation and a …","Cast the components of <code>self</code> to another type.","Creates a new similarity from a translation, rotation …","Cast the components of <code>self</code> to another type.","Creates an similarity that corresponds to a scaling …","Deprecated: Use [SimilarityMatrix3::face_towards] instead.","Builds a right-handed look-at view matrix including …","Builds a left-handed look-at view matrix including a …","Creates a new similarity from a translation, rotation …","Cast the components of <code>self</code> to another type.","Creates an similarity that corresponds to a scaling …","Deprecated: Use [SimilarityMatrix3::face_towards] instead.","Builds a right-handed look-at view matrix including …","Builds a left-handed look-at view matrix including a …","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Indicates whether a <code>Transform</code> with the category <code>Self</code> has …","Creates a new transformation from the given homogeneous …","Retrieves the underlying matrix.","Retrieves the underlying matrix. Deprecated: Use […","A reference to the underlying matrix.","A mutable reference to the underlying matrix.","Sets the category of this transform.","Clones this transform into one that owns its data.","Converts this transform into its equivalent homogeneous …","Attempts to invert this transformation. You may use …","Inverts this transformation. Use <code>.try_inverse</code> if this …","Attempts to invert this transformation in-place. You may …","Inverts this transformation in-place. Use <code>.try_inverse_mut</code>…","Transform the given point by this transformation.","Transform the given vector by this transformation, …","Transform the given point by the inverse of this …","Transform the given vector by the inverse of this …","A mutable reference to underlying matrix. Use …","Creates a new identity transform.","Creates a new reflection wrt. the plane orthogonal to the …","Creates a new reflection wrt the plane orthogonal to the …","The reflexion axis.","Applies the reflection to the columns of <code>rhs</code>.","Applies the reflection to the columns of <code>rhs</code>.","Applies the reflection to the rows of <code>lhs</code>.","Applies the reflection to the rows of <code>lhs</code>.","Creates a new orthographic projection matrix.","Wraps the given matrix to interpret it as a 3D …","Creates a new orthographic projection matrix from an …","Retrieves the inverse of the underlying homogeneous …","Computes the corresponding homogeneous matrix.","A reference to the underlying homogeneous transformation …","A reference to this transformation seen as a <code>Projective3</code>.","This transformation seen as a <code>Projective3</code>.","Retrieves the underlying homogeneous matrix.","Retrieves the underlying homogeneous matrix. Deprecated: …","The left offset of the view cuboid.","The right offset of the view cuboid.","The bottom offset of the view cuboid.","The top offset of the view cuboid.","The near plane offset of the view cuboid.","The far plane offset of the view cuboid.","Projects a point. Faster than matrix multiplication.","Un-projects a point. Faster than multiplication by the …","Projects a vector. Faster than matrix multiplication.","Sets the left offset of the view cuboid.","Sets the right offset of the view cuboid.","Sets the bottom offset of the view cuboid.","Sets the top offset of the view cuboid.","Sets the near plane offset of the view cuboid.","Sets the far plane offset of the view cuboid.","Sets the view cuboid offsets along the <code>x</code> axis.","Sets the view cuboid offsets along the <code>y</code> axis.","Sets the near and far plane offsets of the view cuboid.","Creates a new perspective matrix from the aspect ratio, y …","Wraps the given matrix to interpret it as a 3D …","Retrieves the inverse of the underlying homogeneous …","Computes the corresponding homogeneous matrix.","A reference to the underlying homogeneous transformation …","A reference to this transformation seen as a <code>Projective3</code>.","This transformation seen as a <code>Projective3</code>.","Retrieves the underlying homogeneous matrix.","Retrieves the underlying homogeneous matrix. Deprecated: …","Gets the <code>width / height</code> aspect ratio of the view frustum.","Gets the y field of view of the view frustum.","Gets the near plane offset of the view frustum.","Gets the far plane offset of the view frustum.","Projects a point. Faster than matrix multiplication.","Un-projects a point. Faster than multiplication by the …","Projects a vector. Faster than matrix multiplication.","Updates this perspective matrix with a new <code>width / height</code> …","Updates this perspective with a new y field of view of …","Updates this perspective matrix with a new near plane …","Updates this perspective matrix with a new far plane …","Updates this perspective matrix with new near and far …","Computes the Bidiagonal decomposition using householder …","Indicates whether this decomposition contains an …","Unpacks this decomposition into its three matrix factors …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Computes the orthogonal matrix <code>U</code> of this <code>U * D * V</code> …","Computes the orthogonal matrix <code>V_t</code> of this <code>U * D * V_t</code> …","The diagonal part of this decomposed matrix.","The off-diagonal part of this decomposed matrix.","Computes the Cholesky decomposition of <code>matrix</code> without …","Retrieves the lower-triangular factor of the Cholesky …","Retrieves the lower-triangular factor of the Cholesky …","Retrieves the lower-triangular factor of the Cholesky …","Retrieves the lower-triangular factor of the Cholesky …","Solves the system <code>self * x = b</code> where <code>self</code> is the …","Returns the solution of the system <code>self * x = b</code> where <code>self</code>…","Computes the inverse of the decomposed matrix.","Computes the determinant of the decomposed matrix.","Attempts to compute the Cholesky decomposition of <code>matrix</code>.","Given the Cholesky decomposition of a matrix <code>M</code>, a scalar …","Updates the decomposition such that we get the …","Updates the decomposition such that we get the …","Computes the ColPivQR decomposition using householder …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Computes the orthogonal matrix <code>Q</code> of this decomposition.","Retrieves the column permutation of this decomposition.","Unpacks this decomposition into its two matrix factors.","Multiplies the provided matrix by the transpose of the <code>Q</code> …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Computes the inverse of the decomposed matrix.","Indicates if the decomposed matrix is invertible.","Computes the determinant of the decomposed matrix.","Computes the LU decomposition with full pivoting of <code>matrix</code>…","The lower triangular matrix of this decomposition.","The upper triangular matrix of this decomposition.","The row permutations of this decomposition.","The column permutations of this decomposition.","The two matrices of this decomposition and the row and …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Computes the inverse of the decomposed matrix.","Indicates if the decomposed matrix is invertible.","Computes the determinant of the decomposed matrix.","Computes the Hessenberg decomposition using householder …","Computes the Hessenberg decomposition using householder …","Retrieves <code>(q, h)</code> with <code>q</code> the orthogonal matrix of this …","Retrieves the upper trapezoidal submatrix <code>H</code> of this …","Retrieves the upper trapezoidal submatrix <code>H</code> of this …","Computes the orthogonal matrix <code>Q</code> of this decomposition.","Computes the LU decomposition with partial (row) pivoting …","The lower triangular matrix of this decomposition.","The lower triangular matrix of this decomposition.","The upper triangular matrix of this decomposition.","The row permutations of this decomposition.","The row permutations and two triangular matrices of this …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Computes the inverse of the decomposed matrix.","Computes the inverse of the decomposed matrix and outputs …","Computes the determinant of the decomposed matrix.","Indicates if the decomposed matrix is invertible.","Creates a new statically-allocated sequence of <code>D</code> identity …","Creates a new dynamically-allocated sequence of <code>n</code> …","Creates a new sequence of D identity permutations.","Adds the interchange of the row (or column) <code>i</code> with the …","Applies this sequence of permutations to the rows of <code>rhs</code>.","Applies this sequence of permutations in reverse to the …","Applies this sequence of permutations to the columns of …","Applies this sequence of permutations in reverse to the …","The number of non-identity permutations applied by this …","Returns true if the permutation sequence contains no …","The determinant of the matrix corresponding to this …","Computes the QR decomposition using householder …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Computes the orthogonal matrix <code>Q</code> of this decomposition.","Unpacks this decomposition into its two matrix factors.","Multiplies the provided matrix by the transpose of the <code>Q</code> …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Computes the inverse of the decomposed matrix.","Indicates if the decomposed matrix is invertible.","Computes the Schur decomposition of a square matrix.","Attempts to compute the Schur decomposition of a square …","Retrieves the unitary matrix <code>Q</code> and the …","Computes the real eigenvalues of the decomposed matrix.","Computes the complex eigenvalues of the decomposed matrix.","Computes the Singular Value Decomposition of <code>matrix</code> using …","Attempts to compute the Singular Value Decomposition of …","Computes the rank of the decomposed matrix, i.e., the …","Rebuild the original matrix.","Computes the pseudo-inverse of the decomposed matrix.","Solves the system <code>self * x = b</code> where <code>self</code> is the …","Computes the eigendecomposition of the given symmetric …","Computes the eigendecomposition of the given symmetric …","Rebuild the original matrix.","Computes the tridiagonalization of the symmetric matrix <code>m</code>.","Retrieve the orthogonal transformation, diagonal, and off …","Retrieve the diagonal, and off diagonal elements of this …","The diagonal components of this decomposition.","The off-diagonal components of this decomposition.","Computes the orthogonal matrix <code>Q</code> of this decomposition.","Recomputes the original symmetric matrix.","Computes the UDU^T factorization.","Returns the diagonal elements as a matrix","Create a new Complex","Returns imaginary unit","Returns the square of the norm (since <code>T</code> doesn’t …","Multiplies <code>self</code> by the scalar <code>t</code>.","Divides <code>self</code> by the scalar <code>t</code>.","Raises <code>self</code> to an unsigned integer power.","Returns the complex conjugate. i.e. <code>re - i im</code>","Returns <code>1/self</code>","Raises <code>self</code> to a signed integer power.","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance…","Checks if the given complex number is NaN","Checks if the given complex number is infinite","Checks if the given complex number is finite","Checks if the given complex number is normal"],"i":[0,0,0,1,1,1,0,2,0,0,0,0,0,0,0,0,3,0,4,0,5,0,6,0,0,7,0,8,8,0,9,9,9,0,10,10,10,10,0,11,11,11,11,11,0,12,12,12,12,12,12,0,13,13,13,13,0,14,14,14,14,0,15,15,15,15,15,15,0,16,16,16,16,16,16,16,16,0,17,17,17,17,17,17,17,17,17,17,0,18,18,18,18,18,18,18,18,18,18,18,18,0,19,19,19,19,19,19,0,20,20,20,20,20,20,20,20,20,0,21,21,21,21,21,21,21,21,21,21,21,21,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,24,24,24,24,24,24,24,24,0,25,25,25,25,25,25,25,25,25,25,25,25,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,29,29,29,29,29,29,29,29,29,29,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,34,34,34,34,34,34,34,34,34,34,34,34,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,0,0,0,39,0,0,0,40,40,40,40,0,0,41,41,0,0,42,42,0,0,43,43,0,0,44,44,0,0,45,45,0,0,46,46,0,0,47,47,0,0,48,48,0,0,49,49,0,0,50,50,0,0,51,51,0,0,52,52,0,0,53,53,53,0,54,0,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,57,0,0,0,0,0,0,0,0,0,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,0,59,59,59,59,59,59,59,59,0,0,0,60,60,0,0,61,0,62,0,0,0,0,0,0,0,63,0,64,64,0,0,65,0,0,66,66,0,0,67,67,67,67,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,0,0,69,69,69,69,0,0,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0,71,71,71,71,71,71,71,71,0,72,0,0,0,0,0,0,0,0,0,0,73,0,0,74,74,0,0,0,75,0,0,0,0,0,0,0,76,76,0,0,0,0,0,77,0,0,0,0,0,78,78,0,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,63,63,80,80,80,63,81,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,82,0,0,83,83,83,83,83,83,83,83,83,83,83,0,63,81,63,81,63,63,63,63,81,81,63,63,63,63,63,63,63,63,63,63,63,63,63,81,81,81,81,81,81,81,81,81,81,81,81,81,63,63,63,63,63,63,63,63,63,63,63,63,63,81,81,81,81,81,81,81,81,81,81,81,81,81,63,63,63,63,81,0,0,0,0,0,0,0,0,0,0,0,84,84,84,0,85,85,0,0,0,86,86,0,87,87,0,0,0,0,0,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,0,0,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,0,90,90,90,90,90,90,90,90,90,90,0,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,0,92,92,92,92,92,92,92,92,92,92,92,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,0,94,94,94,94,94,94,94,94,94,94,94,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,95,95,95,95,95,95,95,95,95,95,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38,96,96,96,96,96,96,96,96,96,96,96,39,39,39,39,39,39,39,39,39,39,39,39,39,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,56,56,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,57,57,98,98,98,98,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,101,101,101,101,68,68,68,68,68,68,68,68,68,68,68,68,68,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,102,102,102,102,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,104,104,104,65,65,65,65,65,65,65,65,65,65,65,105,105,105,105,105,105,105,105,105,105,105,70,70,70,70,70,70,70,70,70,70,70,70,70,70,106,106,106,106,106,106,106,106,106,106,106,106,106,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,107,107,107,107,107,107,107,107,107,107,107,107,107,107,73,73,73,73,73,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,77,77,77,77,108,108,108,108,108,108,108,108,108,108,108,108,108,109,109,109,109,109,109,109,109,109,109,109,109,109,110,110,110,110,110,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,112,112,112,113,113,113,113,113,113,113,113,113,113,113,113,113,114,114,114,114,114,114,114,114,114,114,114,114,114,115,115,115,115,115,115,115,115,115,115,115,115,115,116,116,116,116,116,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,118,118,118,118,118,83,83,83,83,83,83,83,83,83,83,83,83,83,119,119,119,119,119,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,121,121,121,122,122,122,122,122,122,122,122,122,122,122,122,122,123,123,123,123,123,123,123,123,123,123,123,123,123,84,84,84,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,85,85,85,124,124,124,124,124,124,124,124,124,124,124,124,124,86,86,86,86,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,96,96,96,96,96,96,96,96,96,96,96,96,96,39,39,39,97,97,97,97,97,68,68,68,68,68,68,68,102,102,102,102,102,102,102,103,103,103,103,103,103,103,106,106,106,106,106,106,106,106,106,106,106,106,106,106,68,68,103,103,106,106,106,106,68,106,106,106,106,104,104,65,65,105,105,82,82,82,82,73,73,73,73,74,74,74,74,87,87,87,87,107,107,107,107,107,107,107,107,125,125,125,125,125,125,125,126,126,126,126,126,126,126,108,109,110,110,97,39,97,97,39,97,97,39,97,97,39,97,97,39,97,97,39,97,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,74,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,70,74,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,63,63,63,63,63,63,127,127,128,129,130,131,82,82,82,82,127,70,70,70,70,132,133,134,135,136,137,138,72,72,72,72,72,139,140,141,139,107,107,107,107,141,142,125,139,73,73,73,73,73,73,125,125,125,125,141,143,144,145,126,139,140,126,126,126,126,82,75,75,75,75,75,76,82,76,76,76,76,82,77,77,77,77,82,141,141,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,106,56,57,56,57,98,99,100,101,63,63,63,106,106,106,106,56,56,56,57,57,57,98,98,98,99,99,99,100,100,100,101,101,101,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,97,98,100,68,63,102,70,106,72,107,73,74,75,76,77,108,109,110,111,113,114,115,116,117,118,83,119,120,121,122,123,84,85,124,86,68,63,73,125,74,144,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,97,68,68,63,70,106,106,72,107,73,125,74,74,144,126,75,76,77,108,109,110,111,113,114,63,63,63,63,63,72,72,72,72,72,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,70,72,72,72,72,72,72,73,75,75,75,75,75,75,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,72,72,72,72,72,72,73,75,75,75,75,75,75,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,97,68,63,102,103,70,106,72,107,73,74,75,76,77,108,109,110,111,113,114,115,116,117,118,83,119,120,121,122,123,84,85,124,86,63,72,107,73,125,144,126,75,76,77,63,63,63,72,107,107,63,63,125,125,125,125,107,107,73,74,74,144,144,144,144,125,125,144,144,146,146,144,144,143,143,74,126,126,126,126,107,107,75,75,76,76,76,76,107,107,76,76,125,125,76,76,77,77,77,77,76,76,77,77,107,107,77,77,125,125,77,77,111,111,111,111,107,107,111,111,125,125,111,111,75,75,39,63,63,72,72,72,72,73,73,74,74,39,63,63,72,72,73,73,74,74,63,63,63,63,63,72,107,107,107,107,63,63,107,107,107,107,73,73,125,125,125,125,107,107,125,125,125,125,125,125,73,74,74,74,74,144,144,144,144,144,144,125,125,144,144,146,146,144,144,143,143,144,144,144,144,144,144,74,126,126,126,126,107,107,126,126,126,126,126,126,126,126,126,126,126,126,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,75,75,107,107,125,125,76,76,107,107,76,76,125,125,75,75,75,75,76,76,77,77,77,77,76,76,77,77,77,77,77,77,75,75,77,77,107,107,77,77,125,125,77,77,111,111,111,111,111,111,111,111,107,107,111,111,125,125,111,111,76,76,111,111,77,77,111,111,75,75,63,70,72,73,74,144,63,63,72,72,73,73,74,74,63,63,72,72,73,73,74,74,63,63,63,72,107,107,147,147,73,73,73,125,125,125,125,74,74,74,74,144,144,144,144,144,144,144,144,74,126,126,126,126,107,107,75,75,76,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,77,77,111,111,111,111,111,111,111,111,111,111,111,111,63,72,107,107,147,147,73,125,125,125,125,74,74,144,144,144,144,144,144,144,144,74,126,126,126,126,107,107,75,75,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,111,111,111,111,111,111,111,111,63,63,72,107,73,74,111,63,63,72,73,74,111,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,97,68,63,70,72,107,73,75,76,77,108,109,110,63,63,63,63,63,82,82,82,82,82,82,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,97,68,63,70,106,72,107,73,74,75,76,77,111,113,114,115,116,117,118,119,120,121,122,123,84,85,124,86,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,97,68,63,70,106,72,107,73,74,75,76,77,111,113,114,115,116,117,118,119,120,121,122,123,84,85,124,86,63,63,70,70,72,72,107,107,73,73,125,125,74,74,144,144,126,126,75,75,76,76,77,77,111,111,63,63,70,70,72,72,107,107,73,73,125,125,74,74,144,144,126,126,75,75,76,76,77,77,111,111,63,63,70,70,72,72,107,107,73,73,125,125,74,74,144,144,126,126,75,75,76,76,77,77,111,111,82,82,72,72,82,82,73,73,74,74,82,107,73,125,74,144,126,75,76,77,111,82,82,82,72,72,72,72,72,72,107,107,107,142,142,142,142,142,142,145,145,145,107,107,107,107,107,107,107,107,107,107,107,107,73,73,73,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,74,74,74,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,75,75,75,75,75,75,146,146,146,75,75,75,75,75,75,75,75,75,76,76,76,143,143,143,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,111,111,111,111,111,111,82,82,82,82,82,82,82,72,72,72,72,72,72,72,107,107,107,107,107,107,107,73,73,73,73,73,73,73,125,125,125,125,125,125,125,126,126,126,126,126,126,126,75,75,75,75,75,75,75,76,76,76,76,76,76,76,77,77,77,77,77,77,77,111,111,111,111,111,111,111,63,63,63,63,63,63,63,63,63,63,63,80,80,80,80,80,80,80,80,63,63,63,63,63,63,63,63,63,63,63,63,81,81,81,81,63,63,63,63,63,63,63,63,63,63,63,63,82,82,82,63,63,139,139,63,63,63,63,63,63,63,63,63,63,63,63,141,141,141,141,141,141,141,141,141,141,141,141,63,63,63,63,63,63,63,63,63,63,63,63,81,81,81,81,81,81,81,81,81,81,81,81,63,81,63,81,63,81,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,82,82,82,82,82,82,82,82,82,82,82,82,82,82,63,82,63,63,63,63,63,63,63,63,63,82,82,82,82,82,82,82,82,82,63,63,63,63,63,63,63,63,63,82,82,82,82,82,82,82,82,82,63,63,63,63,63,63,63,63,63,82,82,82,82,82,82,82,82,82,63,63,63,63,63,63,63,63,63,82,82,82,82,82,82,82,82,82,63,63,63,82,82,82,63,63,63,82,82,82,63,63,63,82,82,82,63,63,63,82,82,82,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,138,138,138,138,138,138,138,138,138,138,138,138,138,138,63,63,127,127,63,63,127,127,63,63,127,127,63,63,127,127,63,63,127,127,63,63,127,127,63,63,127,127,63,63,127,127,63,63,127,127,63,63,127,127,63,63,148,148,63,63,148,148,63,63,148,148,63,63,148,148,63,63,148,148,63,63,148,148,63,63,148,148,63,63,148,148,63,63,148,148,63,63,148,148,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,82,63,82,63,82,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,80,63,80,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,81,81,81,63,63,81,81,63,63,63,80,80,63,80,63,63,63,80,63,102,102,102,103,103,103,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,138,138,63,63,63,63,63,63,63,81,81,66,66,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,70,70,70,70,70,70,70,70,70,70,70,106,106,106,106,106,106,63,63,80,80,70,70,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,80,80,80,80,80,80,80,71,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,132,72,133,72,134,72,135,72,136,72,137,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,145,107,107,142,142,107,107,145,145,107,107,107,107,107,107,107,107,145,145,145,145,145,145,145,145,107,107,107,145,145,145,107,107,107,107,142,142,142,142,107,107,107,107,142,142,142,142,107,107,107,107,107,107,107,107,142,142,142,142,142,142,142,142,107,107,107,107,107,107,107,142,142,142,142,142,142,142,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,73,73,73,73,73,73,73,73,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,74,74,74,74,74,74,74,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,74,74,74,74,144,144,144,144,144,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,75,75,75,75,75,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,149,149,149,149,76,76,76,76,150,150,150,150,76,76,76,76,143,143,143,143,76,76,76,76,151,151,151,151,76,76,76,76,143,143,143,143,76,76,76,76,151,151,151,151,76,76,143,143,76,76,151,151,76,150,76,149,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,78,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,115,115,115,115,115,115,115,115,116,116,116,116,116,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,118,118,118,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,121,122,122,122,122,122,122,122,122,122,122,123,123,123,123,123,84,84,84,84,84,84,85,85,85,124,124,124,124,124,124,124,86,86,87,87,87,87,87,87,87,87,87,87,87,87,87,87],"f":[null,null,null,null,[[],["maybeuninit",19]],[[["intoiterator",8]]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]]],null,null,null,[[],["bool",15]],[[],[["usize",15],["option",4]]],[[],["usize",15]],[[["usize",15]]],null,null,null,[[]],null,null,null,[[]],null,null,null,[[]],null,null,null,[[]],null,null,null,[[]],null,null,null,[[]],null,null,null,[[]],null,null,null,[[]],null,null,null,[[]],null,null,null,[[]],null,null,null,[[]],null,null,null,[[]],null,null,null,[[]],[[],["usize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["matrixiter",3]],null,[[],["matrixitermut",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[]],[[],["owned",6]],[[],["owned",6]],null,[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["matrix",3]]],[[["matrix",3],["matrix",3]]],null,null,null,null,null,[[],["bool",15]],[[]],null,null,null,[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["usize",15]],[[],["usize",15]],[[]],null,null,null,[[]],[[],["quaternion",3]],[[]],[[]],[[]],[[]],[[],["quaternion",3]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],[["option",4],["unit",3]]],[[],["vector3",6]],[[],["option",4]],[[],["quaternion",3]],[[],["quaternion",3]],[[]],[[],["rotation",3]],[[]],[[]],[[],["matrix4",6]],[[["point3",6]],["point3",6]],[[["vector3",6]],["vector3",6]],[[["point3",6]],["point3",6]],[[["vector3",6]],["vector3",6]],[[["unit",3]],[["vector3",6],["unit",3]]],[[["vector3",6]]],[[]],[[],[["unitquaternion",6],["scalar",8]]],[[["unit",3]]],[[["quaternion",3]]],[[]],[[]],[[["rotation3",6]]],[[["matrix3",6]]],[[["usize",15],["matrix3",6]]],[[["vector",6],["vector",6]],["option",4]],[[["vector",6],["vector",6]],["option",4]],[[["unit",3],["unit",3]],["option",4]],[[["unit",3],["unit",3]],["option",4]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["u3",6]]],[[["vector",6],["u3",6]]],[[["vector",6],["u3",6]]],[[["vector",6],["u3",6]]],[[]],[[],["dualquaternion",3]],[[]],[[]],[[]],[[]],[[]],[[],["dualquaternion",3]],[[]],[[]],[[],["option",4]],[[],["unitquaternion",6]],[[],["translation3",6]],[[],["isometry3",6]],[[["point3",6]],["point3",6]],[[["vector3",6]],["vector3",6]],[[["point3",6]],["point3",6]],[[["vector3",6]],["vector3",6]],[[["unit",3]],[["vector3",6],["unit",3]]],[[],["matrix4",6]],[[]],[[],[["unitdualquaternion",6],["scalar",8]]],[[["translation3",6],["unitquaternion",6]]],[[["isometry3",6]]],[[["unitquaternion",6]]],[[]],[[]],[[]],[[],["vector1",6]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[],["rotation2",6]],[[],["matrix3",6]],[[["point2",6]],["point2",6]],[[["vector2",6]],["vector2",6]],[[["point2",6]],["point2",6]],[[["vector2",6]],["vector2",6]],[[["unit",3]],[["vector2",6],["unit",3]]],[[]],[[]],[[]],[[]],[[]],[[["vector",6],["storage",8],["u1",6]]],[[],[["unitcomplex",6],["scalar",8]]],[[],["complex",3]],[[["complex",3]]],[[["complex",3]]],[[["rotation2",6]]],[[]],[[["matrix2",6]]],[[["matrix2",6],["usize",15]]],[[]],[[]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["unit",3],["unit",3]]],[[["unit",3],["unit",3]]],null,[[]],[[]],[[]],[[["svector",6]],["svector",6]],[[["point",3]],["point",3]],[[["ovector",6]],[["ovector",6],["const",3]]],[[["unit",3]],[["svector",6],["unit",3]]],[[["point",3]],["point",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[["omatrix",6]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["omatrix",6]],[["dim",8],["ovector",6],["realfield",8]]],[[["ovector",6],["omatrix",6]]],[[["vector",6]],[["ovector",6],["dimdiff",6]]],[[["vector",6]],[["ovector",6],["dimdiff",6]]],[[["vector",6]],["ovector",6]],[[["vector",6]],[["ovector",6],["dimdiff",6]]],[[["vector",6]],[["ovector",6],["dimdiff",6]]],[[["vector",6]],["ovector",6]],[[]],[[]],[[],["bidiagonal",3]],[[],["fullpivlu",3]],[[],["lu",3]],[[],["qr",3]],[[],["colpivqr",3]],[[["bool",15]],["svd",3]],[[["bool",15],["usize",15]],[["option",4],["svd",3]]],[[],[["option",4],["cholesky",3]]],[[],[["option",4],["udu",3]]],[[],["hessenberg",3]],[[],["schur",3]],[[["usize",15]],[["schur",3],["option",4]]],[[],["symmetriceigen",3]],[[["usize",15]],[["option",4],["symmetriceigen",3]]],[[],["symmetrictridiagonal",3]],[[]],[[]],null,null,[[]],[[]],[[]],[[],["option",4]],[[["vector",6]],["option",4]],[[["vector",6]],["option",4]],[[]],[[]],[[]],[[["matrix",3]]],[[["matrix",3]]],null,[[],[["omatrix",6],["option",4]]],[[],[["omatrix",6],["option",4]]],[[],["bool",15]],[[],["bool",15]],[[["primint",8],["divassign",8]],["result",4]],[[["primint",8],["divassign",8]],[["omatrix",6],["option",4]]],[[],[["option",4],["ovector",6]]],[[],[["ovector",6],["numcomplex",3]]],[[],[["option",4],["ovector",6]]],[[],[["ovector",6],["numcomplex",3]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[["matrix",3]]],[[["matrix",3]]],[[],[["ovector",6],["dimminimum",6]]],[[],["usize",15]],[[],[["result",4],["omatrix",6],["str",15]]],[[],["ovector",6]],[[],["ovector",6]],null,null,null,null,null,null,[[["dim",8],["complexfield",8],["omatrix",6],["matrix",3]],["bool",15]],null,null,null,null,null,null,null,null,null,null,[[["complexfield",8]],["complexfield",8]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[],["bool",15]],[[],["option",4]],null,null,[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["u64",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["one",8]],[[],["zero",8]],[[]],[[["partialord",8]],["partialord",8]],[[["ord",8]],["ord",8]],[[["ord",8]],["ord",8]],[[],["signed",8]],[[["omatrix",6]],[["omatrix",6],["dim",8]]],[[["omatrix",6]],[["omatrix",6],["dim",8]]],[[["omatrix",6]]],[[],[["option",4],["ordering",4]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["point",3]],[["point",3],["simdcomplexfield",8]]],[[["point",3]]],[[["point",3]]],[[],["supersetof",8]],[[["supersetof",8]],["option",4]],[[],["bool",15]],[[["supersetof",8]]],[[],["supersetof",8]],[[],["option",4]],[[]],null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["dynamic",3]],["dynamic",3]],[[["dynamic",3]],["dynamic",3]],[[["dynamic",3]],["dynamic",3]],[[["dynamic",3]],["dynamic",3]],[[["dynamic",3]],["dynamic",3]],[[["dynamic",3]],["dynamic",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[["complex",3]],["complex",3]],[[["complex",3]],["bool",15]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["i32",15]],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["autosimd",3]],[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[["autosimd",3],["complex",3]],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[["i32",15]],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[["autosimd",3]],[["autosimd",3],["complex",3]]],[[["autosimd",3],["complex",3]],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["i32",15]],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["autosimd",3]],[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["i32",15]],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["autosimd",3]],[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["i32",15]],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["autosimd",3]],[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["i32",15]],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[["autosimd",3]],[["complex",3],["autosimd",3]]],[[["complex",3],["autosimd",3]],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[],[["complex",3],["autosimd",3]]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[["complex",3],["autosimd",3]],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[["i32",15]],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[["complex",3],["autosimd",3]]],[[],[["autosimd",3],["complex",3]]],[[["autosimd",3]],[["autosimd",3],["complex",3]]],[[["complex",3],["autosimd",3]],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],[["autosimd",3],["complex",3]]],[[],["usize",15]],[[],["complex",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["complex",3]],["complex",3]],[[],["complex",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[["complex",3]],["complex",3]],[[]],[[],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[["i32",15]],["complex",3]],[[],["bool",15]],[[],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[],[["complex",3],["option",4]]],[[["complex",3]]],[[],["complex",3]],[[],["complex",3]],[[["complex",3]],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[]],[[],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[]],[[],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[["complex",3]]],[[]],[[]],[[["complex",3]]],[[]],[[["complex",3]]],[[["complex",3]]],[[]],[[["complex",3]]],[[["complex",3]]],[[],["complex",3]],[[],["complex",3]],[[],[["option",4],["usize",15]]],[[],[["isize",15],["option",4]]],[[],[["option",4],["u8",15]]],[[],[["option",4],["u16",15]]],[[],[["u32",15],["option",4]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["i8",15]]],[[],[["option",4],["i16",15]]],[[],[["option",4],["i32",15]]],[[],[["i64",15],["option",4]]],[[],[["u128",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["f32",15]]],[[],[["option",4],["f64",15]]],[[["str",15]],[["result",4],["complex",3]]],[[["complex",3]]],[[]],[[["complex",3]]],[[]],[[["complex",3]]],[[]],[[]],[[["complex",3]]],[[["u32",15],["str",15]],[["result",4],["complex",3]]],[[["complex",3]]],[[]],[[]],[[["complex",3]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[],["complex",3]],[[],["complex",3]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[["complex",3]]],[[["complex",3]]],[[]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[],["result",4]],[[["complex",3]],["complex",3]],[[]],[[]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[],[["option",4],["complex",3]]],[[["formatter",3]],[["error",3],["result",4]]],[[["usize",15]],[["option",4],["complex",3]]],[[["isize",15]],[["option",4],["complex",3]]],[[["u8",15]],[["option",4],["complex",3]]],[[["u16",15]],[["option",4],["complex",3]]],[[["u32",15]],[["option",4],["complex",3]]],[[["u64",15]],[["option",4],["complex",3]]],[[["i8",15]],[["option",4],["complex",3]]],[[["i16",15]],[["option",4],["complex",3]]],[[["i32",15]],[["option",4],["complex",3]]],[[["i64",15]],[["option",4],["complex",3]]],[[["u128",15]],[["option",4],["complex",3]]],[[["i128",15]],[["option",4],["complex",3]]],[[["f32",15]],[["option",4],["complex",3]]],[[["f64",15]],[["option",4],["complex",3]]],[[],["complex",3]],[[]],[[["complex",3]]],[[]],[[["complex",3]]],[[],["complex",3]],[[],["bool",15]],[[]],[[],["complex",3]],[[],["bool",15]],[[]],[[],[["complex",3],["result",4]]],[[],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[["complex",3]]],[[]],[[]],[[["complex",3]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[["formatter",3]],[["error",3],["result",4]]],[[["complex",3]],["bool",15]],[[["complex",3]],["bool",15]],[[]],[[["const",3],["const",3]],["maybeuninit",19]],[[["const",3],["const",3],["intoiterator",8]]],[[["dynamic",3]],["maybeuninit",19]],[[["dynamic",3],["intoiterator",8]]],[[["dynamic",3]],["maybeuninit",19]],[[["dynamic",3],["intoiterator",8]]],[[["const",3],["const",3]],["arraystorage",3]],[[["dynamic",3],["arraystorage",3]],[["vecstorage",3],["dynamic",3]]],[[["dynamic",3],["arraystorage",3]],[["dynamic",3],["vecstorage",3]]],[[["dynamic",3],["vecstorage",3]],[["vecstorage",3],["dynamic",3]]],[[["dynamic",3],["vecstorage",3]],[["dynamic",3],["vecstorage",3]]],[[["dynamic",3],["vecstorage",3]],[["vecstorage",3],["dynamic",3]]],[[["dynamic",3],["vecstorage",3]],[["dynamic",3],["vecstorage",3]]],[[],[["usize",15],["option",4]]],[[["usize",15]]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[],["usize",15]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[],["bool",15]],[[],[["const",3],["owned",6],["const",3]]],[[],[["const",3],["owned",6],["const",3]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["owned",6]],[[],["owned",6]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["owned",6]],[[],["owned",6]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],[["dynamic",3],["owned",6]]],[[],[["dynamic",3],["owned",6]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],[["owned",6],["dynamic",3]]],[[],[["owned",6],["dynamic",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["const",3],["const",3]]],[[["dynamic",3]]],[[["dynamic",3]]],[[["dynamic",3]]],[[["dynamic",3]]],[[["matrix",3]]],[[["matrix",3],["matrix",3]]],[[["matrix",3]]],[[["matrix",3],["matrix",3]]],[[["matrix",3]]],[[["matrix",3],["matrix",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["svector",6]],["svector",6]],[[["point",3]],["point",3]],[[["svector",6]],["svector",6]],[[["unit",3]],[["svector",6],["unit",3]]],[[["point",3]],["point",3]],[[]],[[]],[[]],[[["svector",6]],["svector",6]],[[["point",3]],["point",3]],[[["svector",6]],["svector",6]],[[["point",3]],["point",3]],[[]],[[]],[[]],[[["svector",6]],["svector",6]],[[["point",3]],["point",3]],[[["svector",6]],["svector",6]],[[["point",3]],["point",3]],[[["omatrix",6]],["bool",15]],[[["omatrix",6]],["bool",15]],[[],["bool",15]],[[["omatrix",6]],["bool",15]],[[["const",3]]],[[],["dynamic",3]],[[["const",3]]],[[["const",3]]],[[],["dynamic",3]],[[["const",3]]],[[["const",3]]],[[],["dynamic",3]],[[["const",3]]],[[["const",3]]],[[],["dynamic",3]],[[["const",3]]],[[["const",3]]],[[],["dynamic",3]],[[["const",3]]],[[["const",3]]],[[],["dynamic",3]],[[["constmatrixslice",6],["const",3],["const",3]]],[[["matrixslice",6],["dynamic",3]]],[[["matrixslice",6],["dynamic",3]]],[[["const",3],["const",3],["matrixslicemut",6]]],[[["dynamic",3],["matrixslicemut",6]]],[[["matrixslicemut",6],["dynamic",3]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[["vec",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["matrixslicemut",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["point",3]]],[[["ovector",6],["const",3]]],[[]],[[]],[[]],[[]],[[["rotation2",6]]],[[["rotation2",6]]],[[["rotation3",6]]],[[["rotation3",6]]],[[]],[[]],[[]],[[]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["rotation3",6]]],[[["unitquaternion",6]]],[[["vector4",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["isometry3",6]]],[[["unitcomplex",6]]],[[["rotation2",6]]],[[["unitcomplex",6]],["matrix3",6]],[[["unitcomplex",6]]],[[]],[[]],[[]],[[]],[[["translation",3]]],[[["ovector",6],["const",3]]],[[]],[[]],[[]],[[]],[[["translation",3]]],[[["isometry",3]]],[[]],[[]],[[]],[[]],[[["similarity",3]]],[[]],[[]],[[]],[[]],[[["transform",3]]],[[["orthographic3",3]]],[[["perspective3",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["option",4]],[[]],[[],["usize",15]],[[],["option",4]],[[]],[[],["usize",15]],[[],["option",4]],[[]],[[],["usize",15]],[[],["option",4]],[[]],[[],["usize",15]],[[],["option",4]],[[]],[[],["usize",15]],[[],["option",4]],[[]],[[],["usize",15]],[[],["x",3]],[[],["xy",3]],[[],["xyz",3]],[[],["xyzw",3]],[[],["xyzwa",3]],[[],["xyzwab",3]],[[],["ijkw",3]],[[],["m2x2",3]],[[],["m2x3",3]],[[],["m2x4",3]],[[],["m2x5",3]],[[],["m2x6",3]],[[],["m3x2",3]],[[],["m3x3",3]],[[],["m3x4",3]],[[],["m3x5",3]],[[],["m3x6",3]],[[],["m4x2",3]],[[],["m4x3",3]],[[],["m4x4",3]],[[],["m4x5",3]],[[],["m4x6",3]],[[],["m5x2",3]],[[],["m5x3",3]],[[],["m5x4",3]],[[],["m5x5",3]],[[],["m5x6",3]],[[],["m6x2",3]],[[],["m6x3",3]],[[],["m6x4",3]],[[],["m6x5",3]],[[],["m6x6",3]],[[],["dynamic",3]],[[],["const",3]],[[],["rowiter",3]],[[],["columniter",3]],[[],["arraystorage",3]],[[],["matrix",3]],[[]],[[],["unit",3]],[[],["vecstorage",3]],[[],["point",3]],[[]],[[],["quaternion",3]],[[],["dualquaternion",3]],[[]],[[]],[[]],[[],["tgeneral",4]],[[],["tprojective",4]],[[],["taffine",4]],[[]],[[]],[[]],[[],["bidiagonal",3]],[[],["cholesky",3]],[[],["colpivqr",3]],[[],["fullpivlu",3]],[[],["givensrotation",3]],[[],["hessenberg",3]],[[],["lu",3]],[[],["permutationsequence",3]],[[],["qr",3]],[[],["schur",3]],[[],["svd",3]],[[],["symmetriceigen",3]],[[],["symmetrictridiagonal",3]],[[],["udu",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["x",3]],["bool",15]],[[["x",3]],["bool",15]],[[["xy",3]],["bool",15]],[[["xy",3]],["bool",15]],[[["xyz",3]],["bool",15]],[[["xyz",3]],["bool",15]],[[["xyzw",3]],["bool",15]],[[["xyzw",3]],["bool",15]],[[["xyzwa",3]],["bool",15]],[[["xyzwa",3]],["bool",15]],[[["xyzwab",3]],["bool",15]],[[["xyzwab",3]],["bool",15]],[[["ijkw",3]],["bool",15]],[[["ijkw",3]],["bool",15]],[[["m2x2",3]],["bool",15]],[[["m2x2",3]],["bool",15]],[[["m2x3",3]],["bool",15]],[[["m2x3",3]],["bool",15]],[[["m2x4",3]],["bool",15]],[[["m2x4",3]],["bool",15]],[[["m2x5",3]],["bool",15]],[[["m2x5",3]],["bool",15]],[[["m2x6",3]],["bool",15]],[[["m2x6",3]],["bool",15]],[[["m3x2",3]],["bool",15]],[[["m3x2",3]],["bool",15]],[[["m3x3",3]],["bool",15]],[[["m3x3",3]],["bool",15]],[[["m3x4",3]],["bool",15]],[[["m3x4",3]],["bool",15]],[[["m3x5",3]],["bool",15]],[[["m3x5",3]],["bool",15]],[[["m3x6",3]],["bool",15]],[[["m3x6",3]],["bool",15]],[[["m4x2",3]],["bool",15]],[[["m4x2",3]],["bool",15]],[[["m4x3",3]],["bool",15]],[[["m4x3",3]],["bool",15]],[[["m4x4",3]],["bool",15]],[[["m4x4",3]],["bool",15]],[[["m4x5",3]],["bool",15]],[[["m4x5",3]],["bool",15]],[[["m4x6",3]],["bool",15]],[[["m4x6",3]],["bool",15]],[[["m5x2",3]],["bool",15]],[[["m5x2",3]],["bool",15]],[[["m5x3",3]],["bool",15]],[[["m5x3",3]],["bool",15]],[[["m5x4",3]],["bool",15]],[[["m5x4",3]],["bool",15]],[[["m5x5",3]],["bool",15]],[[["m5x5",3]],["bool",15]],[[["m5x6",3]],["bool",15]],[[["m5x6",3]],["bool",15]],[[["m6x2",3]],["bool",15]],[[["m6x2",3]],["bool",15]],[[["m6x3",3]],["bool",15]],[[["m6x3",3]],["bool",15]],[[["m6x4",3]],["bool",15]],[[["m6x4",3]],["bool",15]],[[["m6x5",3]],["bool",15]],[[["m6x5",3]],["bool",15]],[[["m6x6",3]],["bool",15]],[[["m6x6",3]],["bool",15]],[[["dynamic",3]],["bool",15]],[[["dynamic",3]],["bool",15]],[[["const",3]],["bool",15]],[[["arraystorage",3]],["bool",15]],[[["arraystorage",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[],["bool",15]],[[["vecstorage",3]],["bool",15]],[[["vecstorage",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["dualquaternion",3]],["bool",15]],[[["dualquaternion",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["translation",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["tgeneral",4]],["bool",15]],[[["tprojective",4]],["bool",15]],[[["taffine",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["option",4],["ordering",4]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["option",4],["ordering",4]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["boolformatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["rotation",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["translation3",6]]],[[["translation3",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["isometry3",6]]],[[["isometry3",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[]],[[]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["translation",3]]],[[["translation",3]]],[[["isometry",3]]],[[["isometry",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["isometry",3],["rotation",3]]],[[["isometry",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["isometry",3],["unitquaternion",6]]],[[["isometry",3]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["similarity",3]]],[[["similarity",3]]],[[["isometry",3]]],[[["isometry",3]]],[[["similarity",3]]],[[["similarity",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["rotation",3],["similarity",3]]],[[["similarity",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["unitquaternion",6],["similarity",3]]],[[["similarity",3]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["transform",3]]],[[["transform",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["transform",3]]],[[["transform",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["transform",3]]],[[["transform",3]]],[[["translation",3]]],[[["translation",3]]],[[["transform",3]]],[[["transform",3]]],[[["usize",15]]],[[["matrix",3]]],[[["matrix",3]]],[[["point",3]]],[[["point",3]]],[[["vector",6]]],[[["vector",6]]],[[["quaternion",3]]],[[["quaternion",3]]],[[["dualquaternion",3]]],[[["dualquaternion",3]]],[[["usize",15]]],[[["matrix",3]]],[[["matrix",3]]],[[["vector",6]]],[[["vector",6]]],[[["quaternion",3]]],[[["quaternion",3]]],[[["dualquaternion",3]]],[[["dualquaternion",3]]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[["point",3]]],[[["point",3]]],[[]],[[["rotation",3]]],[[["rotation",3]]],[[["matrix",3]]],[[["matrix",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["point",3]]],[[["point",3]]],[[["unit",3],["vector",6]]],[[["unit",3]]],[[["quaternion",3]]],[[["quaternion",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["vector",6]]],[[["vector",6],["u3",6]]],[[["point3",6]]],[[["point3",6]]],[[["unit",3]]],[[["unit",3],["vector",6]]],[[]],[[["dualquaternion",3]]],[[["dualquaternion",3]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["dualquaternion",3]]],[[["dualquaternion",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["translation3",6]]],[[["translation3",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["isometry3",6]]],[[["isometry3",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["vector",6]]],[[["vector",6],["u3",6]]],[[["point3",6]]],[[["point3",6]]],[[["unit",3]]],[[["unit",3],["vector",6]]],[[]],[[]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["point2",6]]],[[["point2",6]]],[[["vector",6],["const",3]]],[[["vector",6]]],[[["unit",3],["vector",6]]],[[["unit",3]]],[[["isometry",3],["unitcomplex",6]]],[[["isometry",3]]],[[["similarity",3],["unitcomplex",6]]],[[["similarity",3]]],[[["translation",3]]],[[["translation",3]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["translation",3]]],[[["translation",3]]],[[["point",3]]],[[["point",3]]],[[["isometry",3]]],[[["isometry",3]]],[[["point",3]]],[[["point",3]]],[[["svector",6]]],[[["svector",6]]],[[["svector",6],["unit",3]]],[[["unit",3]]],[[["translation",3]]],[[["translation",3]]],[[["isometry",3]]],[[["isometry",3]]],[[["translation",3]]],[[["translation",3]]],[[["translation",3]]],[[["translation",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["isometry",3],["rotation",3]]],[[["isometry",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["isometry",3],["unitquaternion",6]]],[[["isometry",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["similarity",3]]],[[["similarity",3]]],[[["isometry",3]]],[[["isometry",3]]],[[["similarity",3]]],[[["similarity",3]]],[[["point",3]]],[[["point",3]]],[[["svector",6]]],[[["svector",6]]],[[["translation",3]]],[[["translation",3]]],[[["similarity",3]]],[[["similarity",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["rotation",3],["similarity",3]]],[[["similarity",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["unitquaternion",6],["similarity",3]]],[[["similarity",3]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["svector",6]]],[[["svector",6]]],[[["point",3]]],[[["point",3]]],[[["transform",3]]],[[["transform",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["transform",3]]],[[["transform",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["transform",3]]],[[["transform",3]]],[[["isometry",3]]],[[["isometry",3]]],[[["transform",3]]],[[["transform",3]]],[[["similarity",3]]],[[["similarity",3]]],[[["transform",3]]],[[["transform",3]]],[[["translation",3]]],[[["translation",3]]],[[["transform",3]]],[[["transform",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[["vector",6]]],[[["vector",6]]],[[["quaternion",3]]],[[["quaternion",3]]],[[["dualquaternion",3]]],[[["dualquaternion",3]]],[[["matrix",3]]],[[["matrix",3]]],[[["vector",6]]],[[["vector",6]]],[[["quaternion",3]]],[[["quaternion",3]]],[[["dualquaternion",3]]],[[["dualquaternion",3]]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[]],[[["rotation",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["rotation",3]]],[[]],[[["quaternion",3]]],[[["quaternion",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["rotation",3]]],[[["rotation",3]]],[[["dualquaternion",3]]],[[["dualquaternion",3]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["translation3",6]]],[[["translation3",6]]],[[["isometry3",6]]],[[["isometry3",6]]],[[]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["translation",3]]],[[["translation",3]]],[[["translation",3]]],[[["translation",3]]],[[["isometry",3]]],[[["isometry",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["translation",3]]],[[["translation",3]]],[[["similarity",3]]],[[["similarity",3]]],[[["isometry",3]]],[[["isometry",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["transform",3]]],[[["transform",3]]],[[["similarity",3]]],[[["similarity",3]]],[[["isometry",3]]],[[["isometry",3]]],[[["translation",3]]],[[["translation",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[]],[[]],[[["rotation",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["rotation",3]]],[[]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitdualquaternion",6]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["translation3",6]]],[[["translation3",6]]],[[["isometry3",6]]],[[["isometry3",6]]],[[]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["translation",3]]],[[["translation",3]]],[[["isometry",3]]],[[["isometry",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["similarity",3]]],[[["similarity",3]]],[[["isometry",3]]],[[["isometry",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["unitcomplex",6]]],[[["unitcomplex",6]]],[[["transform",3]]],[[["transform",3]]],[[["translation",3]]],[[["translation",3]]],[[["rotation",3]]],[[["rotation",3]]],[[["unitquaternion",6]]],[[["unitquaternion",6]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["iterator",8]],["omatrix",6]],[[["iterator",8]],[["omatrix",6],["dynamic",3]]],[[["iterator",8]],["omatrix",6]],[[["iterator",8]],[["omatrix",6],["dynamic",3]]],[[["iterator",8]],["omatrix",6]],[[["iterator",8]],["omatrix",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["omatrix",6]],[[["omatrix",6]],["bool",15]],[[["omatrix",6]]],[[],["point",3]],[[["point",3]],["bool",15]],[[["point",3]]],[[],[["dimnamesum",6],["ovector",6]]],[[["ovector",6]],["bool",15]],[[["ovector",6]]],[[],["rotation",3]],[[["rotation",3]],["bool",15]],[[["rotation",3]]],[[],["unitquaternion",6]],[[["unitquaternion",6]],["bool",15]],[[["unitquaternion",6]]],[[],["unitdualquaternion",6]],[[["unitdualquaternion",6]],["bool",15]],[[["unitdualquaternion",6]]],[[],["unitcomplex",6]],[[["unitcomplex",6]],["bool",15]],[[["unitcomplex",6]]],[[],["isometry",3]],[[["isometry",3]],["bool",15]],[[["isometry",3]]],[[],["similarity",3]],[[["similarity",3]],["bool",15]],[[["similarity",3]]],[[],["transform",3]],[[["transform",3]],["bool",15]],[[["transform",3]]],[[],[["dimnamesum",6],["omatrix",6]]],[[["omatrix",6]],["bool",15]],[[["omatrix",6]]],[[],["quaternion",3]],[[["quaternion",3]],["bool",15]],[[["quaternion",3]]],[[],["unitquaternion",6]],[[["unitquaternion",6]],["bool",15]],[[["unitquaternion",6]]],[[],["rotation3",6]],[[["rotation3",6]],["bool",15]],[[["rotation3",6]]],[[],["isometry",3]],[[["isometry",3]],["bool",15]],[[["isometry",3]]],[[],["unitdualquaternion",6]],[[["unitdualquaternion",6]],["bool",15]],[[["unitdualquaternion",6]]],[[],["similarity",3]],[[["similarity",3]],["bool",15]],[[["similarity",3]]],[[],["transform",3]],[[["transform",3]],["bool",15]],[[["transform",3]]],[[],["matrix4",6]],[[["matrix4",6]],["bool",15]],[[["matrix4",6]]],[[],["dualquaternion",3]],[[["dualquaternion",3]],["bool",15]],[[["dualquaternion",3]]],[[],["unitdualquaternion",6]],[[["unitdualquaternion",6]],["bool",15]],[[["unitdualquaternion",6]]],[[],["isometry3",6]],[[["isometry3",6]],["bool",15]],[[["isometry3",6]]],[[],["similarity3",6]],[[["similarity3",6]],["bool",15]],[[["similarity3",6]]],[[],["transform",3]],[[["transform",3]],["bool",15]],[[["transform",3]]],[[],["matrix4",6]],[[["matrix4",6]],["bool",15]],[[["matrix4",6]]],[[],["unitcomplex",6]],[[["unitcomplex",6]],["bool",15]],[[["unitcomplex",6]]],[[],["rotation2",6]],[[["rotation2",6]],["bool",15]],[[["rotation2",6]]],[[],["isometry",3]],[[["isometry",3]],["bool",15]],[[["isometry",3]]],[[],["similarity",3]],[[["similarity",3]],["bool",15]],[[["similarity",3]]],[[],["transform",3]],[[["transform",3]],["bool",15]],[[["transform",3]]],[[],["matrix3",6]],[[["matrix3",6]],["bool",15]],[[["matrix3",6]]],[[],["translation",3]],[[["translation",3]],["bool",15]],[[["translation",3]]],[[],["isometry",3]],[[["isometry",3]],["bool",15]],[[["isometry",3]]],[[],["unitdualquaternion",6]],[[["unitdualquaternion",6]],["bool",15]],[[["unitdualquaternion",6]]],[[],["similarity",3]],[[["similarity",3]],["bool",15]],[[["similarity",3]]],[[],["transform",3]],[[["transform",3]],["bool",15]],[[["transform",3]]],[[],[["dimnamesum",6],["omatrix",6]]],[[["omatrix",6]],["bool",15]],[[["omatrix",6]]],[[],["isometry",3]],[[["isometry",3]],["bool",15]],[[["isometry",3]]],[[],["unitdualquaternion",6]],[[["unitdualquaternion",6]],["bool",15]],[[["unitdualquaternion",6]]],[[],["similarity",3]],[[["similarity",3]],["bool",15]],[[["similarity",3]]],[[],["transform",3]],[[["transform",3]],["bool",15]],[[["transform",3]]],[[],[["dimnamesum",6],["omatrix",6]]],[[["omatrix",6]],["bool",15]],[[["omatrix",6]]],[[],["similarity",3]],[[["similarity",3]],["bool",15]],[[["similarity",3]]],[[],["transform",3]],[[["transform",3]],["bool",15]],[[["transform",3]]],[[],[["dimnamesum",6],["omatrix",6]]],[[["omatrix",6]],["bool",15]],[[["omatrix",6]]],[[],["transform",3]],[[["transform",3]],["bool",15]],[[["transform",3]]],[[],[["dimnamesum",6],["omatrix",6]]],[[["omatrix",6]],["bool",15]],[[["omatrix",6]]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[["vector",6]]],[[["vector",6]]],[[["vector",6],["matrix",3]]],[[["vector",6],["squarematrix",6]]],[[["vector",6],["squarematrix",6]]],[[["vector",6],["squarematrix",6]]],[[["vector",6],["matrix",3]]],[[["vector",6],["matrix",3]]],[[["vector",6]]],[[["vector",6]]],[[["vector",6],["matrix",3]]],[[["vector",6],["squarematrix",6]]],[[["vector",6],["squarematrix",6]]],[[["vector",6],["squarematrix",6]]],[[["vector",6],["matrix",3]]],[[["vector",6],["matrix",3]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["matrix",3],["matrix",3]]],[[["matrix",3],["matrix",3]]],[[["matrix",3],["matrix",3]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["matrix",3],["squarematrix",6]]],[[["squarematrix",6],["matrix",3]]],[[["matrix",3],["vector",6],["squarematrix",6]]],[[["squarematrix",6],["matrix",3]]],[[["vector",6],["matrix",3],["squarematrix",6]]],[[["squarematrix",6],["matrix",3]]],[[["matrix",3],["vector",6],["squarematrix",6]]],[[["squarematrix",6],["matrix",3]]],[[]],[[["matrix",3],["matrix",3]]],[[["matrix",3],["matrix",3]]],[[["matrix",3]],[["omatrix",6],["dim",8]]],[[["matrix",3]],[["omatrix",6],["dim",8]]],[[["matrix",3],["matrix",3]]],[[["matrix",3],["matrix",3]]],[[["matrix",3],["matrix",3]]],[[["matrix",3]],[["dimprod",6],["dimprod",6],["omatrix",6]]],[[]],[[["vector",6]]],[[["vector",6]]],[[]],[[["vector",6]]],[[["vector",6]]],[[]],[[["vector2",6],["point2",6]]],[[]],[[["vector2",6],["point2",6]]],[[["vector3",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6]]],[[]],[[["unit",3]]],[[]],[[]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["vector3",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6],["point3",6]]],[[["vector3",6]]],[[]],[[["unit",3]]],[[]],[[]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[],["omatrix",6]],[[],["omatrix",6]],[[["vector",6]],["omatrix",6]],[[["vector",6]],["omatrix",6]],[[["vector",6]],["omatrix",6]],[[["vector",6]],["omatrix",6]],[[]],[[]],[[["vector",6]]],[[["vector",6]]],[[["vector",6]]],[[["vector",6]]],[[],["omatrix",6]],[[],["omatrix",6]],[[["vector",6]],["omatrix",6]],[[["vector",6]],["omatrix",6]],[[["vector",6]],["omatrix",6]],[[["vector",6]],["omatrix",6]],[[]],[[]],[[["vector",6]]],[[["vector",6]]],[[["vector",6]]],[[["vector",6]]],[[["ovector",6]],[["ovector",6],["dimnamediff",6]]],[[["ovector",6]],[["ovector",6],["dimnamediff",6]]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[],["omatrix",6]],[[["matrix",3]],["matrixsum",6]],[[["matrix",3],["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]],["matrixsum",6]],[[["matrix",3],["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[],["omatrix",6]],[[],["omatrix",6]],[[]],[[],["omatrix",6]],[[]],[[],["maybeuninit",19]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]]],[[],["maybeuninit",19]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]]],[[["vector",6]]],[[["vector",6]]],[[],["maybeuninit",19]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["maybeuninit",19]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["maybeuninit",19]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["maybeuninit",19]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["maybeuninit",19]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["maybeuninit",19]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["maybeuninit",19]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["maybeuninit",19]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["vec",3]]],[[]],[[]],[[["vec",3]]],[[]],[[]],[[["vec",3]]],[[]],[[]],[[["vec",3]]],[[]],[[]],[[["vec",3]]],[[]],[[]],[[["vec",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["vec",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["vec",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]],["unit",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["unit",3]],[[],["unit",3]],[[],["unit",3]],[[],["unit",3]],[[],["unit",3]],[[],["unit",3]],[[["usize",15]]],[[["usize",15]],["unit",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["unit",3]],[[],["unit",3]],[[],["unit",3]],[[],["unit",3]],[[],["unit",3]],[[],["unit",3]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["omatrix",6]],[[],["omatrix",6]],[[],[["omatrix",6],["dynamic",3]]],[[],[["omatrix",6],["dynamic",3]]],[[["vector",6]]],[[]],[[["usize",15],["rowvector",6]]],[[["usize",15],["vector",6]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["omatrix",6],["dimdiff",6]]],[[],[["omatrix",6],["dynamic",3]]],[[],[["omatrix",6],["dynamic",3]]],[[["usize",15]],[["dimdiff",6],["omatrix",6]]],[[["usize",15]],[["omatrix",6],["dynamic",3]]],[[["usize",15]],[["dimdiff",6],["omatrix",6]]],[[["usize",15]],[["omatrix",6],["dimdiff",6]]],[[["usize",15]],[["omatrix",6],["dimdiff",6]]],[[["usize",15]],[["omatrix",6],["dynamic",3]]],[[["usize",15]],[["dimdiff",6],["omatrix",6]]],[[["usize",15]],[["omatrix",6],["dimsum",6]]],[[["usize",15]],[["omatrix",6],["dimsum",6]]],[[["usize",15]],[["omatrix",6],["dynamic",3]]],[[["usize",15]],[["omatrix",6],["dimsum",6]]],[[["usize",15]],[["dimsum",6],["omatrix",6]]],[[["usize",15]],[["dimsum",6],["omatrix",6]]],[[["usize",15]],[["omatrix",6],["dynamic",3]]],[[["usize",15]],[["dimsum",6],["omatrix",6]]],[[["usize",15]],[["dynamic",3],["omatrix",6]]],[[["usize",15]],[["omatrix",6],["dynamic",3]]],[[["usize",15]],[["omatrix",6],["dynamic",3]]],[[],[["const",3],["omatrix",6],["const",3]]],[[["dim",8]],[["dim",8],["omatrix",6]]],[[],["matrix",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["matrix",3]],[[]],[[["maybeuninit",19]],["maybeuninit",19]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[["usize",15]]],[[]],[[["matrix",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[],["omatrix",6]],[[],["matrixsum",6]],[[],["omatrix",6]],[[],["matrixsum",6]],[[["matrix",3]]],[[],["omatrix",6]],[[["fnmut",8]],[["scalar",8],["omatrix",6]]],[[],[["scalar",8],["omatrix",6]]],[[]],[[["fnmut",8]],[["scalar",8],["omatrix",6]]],[[["matrix",3]],["omatrix",6]],[[["matrix",3],["matrix",3]],["omatrix",6]],[[]],[[["matrix",3]]],[[["fnmut",8]]],[[["matrix",3]]],[[["matrix",3],["matrix",3]]],[[],["matrixiter",3]],[[],["rowiter",3]],[[],["columniter",3]],[[],["matrixitermut",3]],[[],["rowitermut",3]],[[],["columnitermut",3]],[[]],[[]],[[]],[[]],[[["matrix",3]]],[[["matrix",3]]],[[["fnmut",8]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["matrix",3]]],[[],["omatrix",6]],[[["matrix",3]]],[[],["omatrix",6]],[[],["omatrix",6]],[[],["omatrix",6]],[[],["omatrix",6]],[[]],[[]],[[]],[[]],[[]],[[],["ovector",6]],[[],[["ovector",6],["scalar",8]]],[[]],[[],["ovector",6]],[[],[["ovector",6],["scalar",8]]],[[]],[[],["omatrix",6]],[[],["omatrix",6]],[[],["omatrix",6]],[[],["omatrix",6]],[[],[["omatrix",6],["dimsum",6]]],[[],[["ovector",6],["dimsum",6]]],[[["vector",6],["dimsum",6]],[["option",4],["ovector",6]]],[[],[["ovector",6],["dimsum",6]]],[[["vector",6],["dimsum",6]],[["option",4],["ovector",6]]],[[],[["ovector",6],["dimsum",6]]],[[],[["ovector",6],["dimsum",6]]],[[["matrix",3]]],[[["matrix",3]],["matrixcross",6]],[[],[["u3",6],["omatrix",6]]],[[],[["u3",6],["omatrix",6]]],[[["matrix",3]]],[[]],[[],["slicestorage",3]],[[],["slicestorage",3]],[[]],[[],["slicestoragemut",3]],[[],["slicestoragemut",3]],[[["usize",15]],[["u1",6],["matrixslice",6]]],[[["usize",15]],[["matrixslice",6],["u1",6],["dynamic",3]]],[[["usize",15]],[["dynamic",3],["matrixslice",6]]],[[["usize",15]],[["matrixslice",6],["dynamic",3]]],[[["usize",15]],[["matrixslice",6],["const",3]]],[[["usize",15]],[["matrixslice",6],["dynamic",3],["const",3]]],[[["usize",15],["dim",8]],[["matrixslice",6],["dim",8]]],[[["usize",15]],[["matrixslice",6],["dynamic",3]]],[[["usize",15]],[["u1",6],["matrixslice",6]]],[[["usize",15]],[["matrixslice",6],["dynamic",3],["u1",6]]],[[["usize",15]],[["dynamic",3],["matrixslice",6]]],[[["usize",15]],[["matrixslice",6],["dynamic",3]]],[[["usize",15]],[["matrixslice",6],["const",3]]],[[["usize",15]],[["matrixslice",6],["const",3],["dynamic",3]]],[[["usize",15],["dim",8]],[["dim",8],["matrixslice",6]]],[[["usize",15],["dim",8]],[["dim",8],["dynamic",3],["matrixslice",6]]],[[],[["matrixslice",6],["dynamic",3]]],[[],[["matrixslice",6],["dynamic",3]]],[[["usize",15]],[["const",3],["matrixslice",6],["const",3]]],[[],[["const",3],["matrixslice",6],["const",3],["dynamic",3]]],[[],["matrixslice",6]],[[],[["matrixslice",6],["dynamic",3]]],[[["slicerange",8]]],[[["slicerange",8]]],[[["usize",15]],[["u1",6],["matrixslicemut",6]]],[[["usize",15]],[["dynamic",3],["u1",6],["matrixslicemut",6]]],[[["usize",15]],[["matrixslicemut",6],["dynamic",3]]],[[["usize",15]],[["dynamic",3],["matrixslicemut",6]]],[[["usize",15]],[["matrixslicemut",6],["const",3]]],[[["usize",15]],[["dynamic",3],["const",3],["matrixslicemut",6]]],[[["usize",15],["dim",8]],[["matrixslicemut",6],["dim",8]]],[[["usize",15]],[["dynamic",3],["matrixslicemut",6]]],[[["usize",15]],[["matrixslicemut",6],["u1",6]]],[[["usize",15]],[["dynamic",3],["u1",6],["matrixslicemut",6]]],[[["usize",15]],[["dynamic",3],["matrixslicemut",6]]],[[["usize",15]],[["dynamic",3],["matrixslicemut",6]]],[[["usize",15]],[["const",3],["matrixslicemut",6]]],[[["usize",15]],[["matrixslicemut",6],["const",3],["dynamic",3]]],[[["usize",15],["dim",8]],[["dim",8],["matrixslicemut",6]]],[[["usize",15],["dim",8]],[["dim",8],["matrixslicemut",6],["dynamic",3]]],[[],[["matrixslicemut",6],["dynamic",3]]],[[],[["dynamic",3],["matrixslicemut",6]]],[[["usize",15]],[["matrixslicemut",6],["const",3],["const",3]]],[[],[["const",3],["matrixslicemut",6],["const",3],["dynamic",3]]],[[],["matrixslicemut",6]],[[],[["dynamic",3],["matrixslicemut",6]]],[[["slicerange",8]]],[[["slicerange",8]]],[[],["matrixslice",6]],[[["slicerange",8]],["matrixslice",6]],[[["slicerange",8]],["matrixslice",6]],[[],["matrixslicemut",6]],[[["slicerange",8]],["matrixslicemut",6]],[[["slicerange",8]],["matrixslicemut",6]],[[]],[[]],[[["matrix",3]]],[[]],[[["matrix",3]]],[[]],[[]],[[]],[[],["omatrix",6]],[[["i32",15]]],[[],[["omatrix",6],["simdoption",3]]],[[]],[[],["omatrix",6]],[[],["omatrix",6]],[[],[["omatrix",6],["option",4]]],[[]],[[],["simdoption",3]],[[],["option",4]],[[],["usize",15]],[[]],[[],["usize",15]],[[]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["rowovector",6]],[[],["ovector",6]],[[["ovector",6]],["ovector",6]],[[]],[[],["rowovector",6]],[[],["ovector",6]],[[],["ovector",6]],[[]],[[],["rowovector",6]],[[],["ovector",6]],[[],["ovector",6]],[[]],[[],["rowovector",6]],[[],["ovector",6]],[[],["ovector",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector2",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[],["vector3",6]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]]],[[],["vec",3]],[[],["vec",3]],[[["usize",15]],["vec",3]],[[],["usize",15]],[[],["bool",15]],[[["vector",6]],["ovector",6]],[[["vector",6]],["ovector",6]],[[["vector",6]],["ovector",6]],[[["vector",6]],["ovector",6]],[[["unit",3]],[["unit",3],["ovector",6]]],[[["unit",3]],[["option",4],["unit",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[["unit",3]],[["svector",6],["unit",3]]],[[["fnmut",8]],[["point",3],["scalar",8]]],[[["fnmut",8]]],[[],[["ovector",6],["dimnamesum",6]]],[[["svector",6]]],[[],["usize",15]],[[],["bool",15]],[[],["usize",15]],[[],[["const",3],["const",3],["matrixiter",3]]],[[["usize",15]]],[[],[["const",3],["const",3],["matrixitermut",3]]],[[["usize",15]]],[[["usize",15]]],[[],["point",3]],[[],["point",3]],[[]],[[]],[[]],[[]],[[["ovector",6],["dimnamesum",6]],["option",4]],[[],[["point",3],["scalar",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["smatrix",6]]],[[],["smatrix",6]],[[],["smatrix",6]],[[],["smatrix",6]],[[],["smatrix",6]],[[],["smatrix",6]],[[],[["dimnamesum",6],["omatrix",6]]],[[]],[[]],[[]],[[]],[[["point",3]],["point",3]],[[["svector",6]],["svector",6]],[[["point",3]],["point",3]],[[["svector",6]],["svector",6]],[[["unit",3]],[["svector",6],["unit",3]]],[[],["rotation",3]],[[],[["rotation",3],["scalar",8]]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[["vector",6],["storage",8],["u1",6]]],[[]],[[["vector",6],["storage",8],["u1",6]]],[[]],[[["matrix2",6]]],[[["matrix2",6],["usize",15]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[]],[[]],[[]],[[]],[[["matrix2",6]]],[[["matrix2",6],["usize",15]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[]],[[]],[[]],[[]],[[]],[[],["svector",6]],[[]],[[]],[[],["svector",6]],[[["vector",6],["storage",8],["u3",6]]],[[["vector",6],["storage",8],["u3",6]]],[[["unit",3]]],[[]],[[["vector",6],["storage",8],["u3",6]]],[[["vector",6],["storage",8],["u3",6]]],[[["unit",3]]],[[]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]],["option",4]],[[["vector",6],["vector",6]],["option",4]],[[]],[[]],[[]],[[["matrix3",6]]],[[["usize",15],["matrix3",6]]],[[]],[[["vector",6],["vector",6]],["option",4]],[[["vector",6],["vector",6]],["option",4]],[[]],[[]],[[]],[[["matrix3",6]]],[[["usize",15],["matrix3",6]]],[[]],[[]],[[],[["option",4],["unit",3]]],[[],["vector3",6]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],[["option",4],["unit",3]]],[[],["vector3",6]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vector3",6]],[[]],[[]],[[],[["matrixslice",6],["u1",6],["rstride",6],["cstride",6],["u3",6]]],[[]],[[],["vector4",6]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["simdoption",3]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[],["vector4",6]],[[],[["u1",6],["matrixslicemut",6],["rstride",6],["cstride",6],["u3",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["quaternion",3]],[[]],[[]],[[]],[[]],[[],["quaternion",3]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],[["option",4],["unit",3]]],[[],["vector3",6]],[[],["option",4]],[[],["quaternion",3]],[[],["quaternion",3]],[[]],[[],["rotation",3]],[[]],[[]],[[],["matrix4",6]],[[["point3",6]],["point3",6]],[[["vector3",6]],["vector3",6]],[[["point3",6]],["point3",6]],[[["vector3",6]],["vector3",6]],[[["unit",3]],[["vector3",6],["unit",3]]],[[["vector3",6]]],[[["vector4",6]]],[[]],[[],[["quaternion",3],["scalar",8]]],[[["vector3",6]]],[[["vector",6],["u3",6]]],[[]],[[]],[[["unit",3],["vector",6]]],[[]],[[],[["unitquaternion",6],["scalar",8]]],[[["unit",3]]],[[["quaternion",3]]],[[]],[[]],[[["rotation3",6]]],[[["matrix3",6]]],[[["usize",15],["matrix3",6]]],[[["vector",6],["vector",6]],["option",4]],[[["vector",6],["vector",6]],["option",4]],[[["unit",3],["unit",3]],["option",4]],[[["unit",3],["unit",3]],["option",4]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["vector",6],["u3",6]]],[[["vector",6],["u3",6]]],[[["vector",6],["u3",6]]],[[["vector",6],["u3",6]]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[],["dualquaternion",3]],[[]],[[]],[[]],[[]],[[]],[[],["dualquaternion",3]],[[]],[[]],[[],["option",4]],[[],["unitquaternion",6]],[[],["translation3",6]],[[],["isometry3",6]],[[["point3",6]],["point3",6]],[[["vector3",6]],["vector3",6]],[[["point3",6]],["point3",6]],[[["vector3",6]],["vector3",6]],[[["unit",3]],[["vector3",6],["unit",3]]],[[],["matrix4",6]],[[["quaternion",3]]],[[]],[[],[["scalar",8],["dualquaternion",3]]],[[["quaternion",3]]],[[]],[[],[["unitdualquaternion",6],["scalar",8]]],[[["translation3",6],["unitquaternion",6]]],[[["isometry3",6]]],[[["unitquaternion",6]]],[[]],[[]],[[]],[[],["vector1",6]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[],["rotation2",6]],[[],["matrix3",6]],[[["point2",6]],["point2",6]],[[["vector2",6]],["vector2",6]],[[["point2",6]],["point2",6]],[[["vector2",6]],["vector2",6]],[[["unit",3]],[["vector2",6],["unit",3]]],[[]],[[]],[[]],[[]],[[]],[[["vector",6],["storage",8],["u1",6]]],[[],[["unitcomplex",6],["scalar",8]]],[[],["complex",3]],[[["complex",3]]],[[["complex",3]]],[[["rotation2",6]]],[[]],[[["matrix2",6]]],[[["matrix2",6],["usize",15]]],[[]],[[]],[[["vector",6],["vector",6]]],[[["vector",6],["vector",6]]],[[["unit",3],["unit",3]]],[[["unit",3],["unit",3]]],[[["svector",6]],["translation",3]],[[],["translation",3]],[[],[["dimnamesum",6],["omatrix",6]]],[[]],[[["point",3]],["point",3]],[[["point",3]],["point",3]],[[],["translation",3]],[[],[["scalar",8],["translation",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["translation",3]]],[[]],[[]],[[["isometry",3]]],[[["translation",3]]],[[]],[[["point",3]]],[[]],[[["point",3]],["point",3]],[[["svector",6]],["svector",6]],[[["point",3]],["point",3]],[[["svector",6]],["svector",6]],[[["unit",3]],[["svector",6],["unit",3]]],[[],[["dimnamesum",6],["omatrix",6]]],[[],[["dimnamesum",6],["omatrix",6]]],[[]],[[["point",3]]],[[["vector2",6]]],[[]],[[]],[[],[["scalar",8],["isometrymatrix2",6]]],[[["vector2",6]]],[[]],[[]],[[],[["scalar",8],["isometrymatrix2",6]]],[[["vector2",6]]],[[]],[[]],[[],[["isometry2",6],["scalar",8]]],[[["vector2",6]]],[[]],[[]],[[],[["isometry2",6],["scalar",8]]],[[["vector3",6]]],[[]],[[["vector3",6]]],[[],[["scalar",8],["isometry3",6]]],[[["vector3",6]]],[[]],[[["vector3",6]]],[[],[["scalar",8],["isometry3",6]]],[[["vector3",6]]],[[]],[[["vector3",6]]],[[],[["isometrymatrix3",6],["scalar",8]]],[[["vector3",6]]],[[]],[[["vector3",6]]],[[],[["isometrymatrix3",6],["scalar",8]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[["translation",3]]],[[["isometry",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["translation",3]]],[[]],[[["point",3]]],[[]],[[["point",3]],["point",3]],[[["svector",6]],["svector",6]],[[["point",3]],["point",3]],[[["svector",6]],["svector",6]],[[],[["dimnamesum",6],["omatrix",6]]],[[]],[[["point",3]]],[[["vector2",6]]],[[],[["similarity",3],["rotation2",6],["scalar",8]]],[[["vector2",6]]],[[],[["unitcomplex",6],["similarity",3],["scalar",8]]],[[["vector3",6]]],[[],[["rotation3",6],["similarity",3],["scalar",8]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["vector3",6]]],[[],[["unitquaternion",6],["similarity",3],["scalar",8]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[["point3",6],["vector3",6]]],[[],["point2",6]],[[],["point3",6]],[[],["point2",6]],[[],["point2",6]],[[],["point2",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point2",6]],[[],["point2",6]],[[],["point2",6]],[[],["point2",6]],[[],["point2",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["point3",6]],[[],["bool",15]],[[["dimnamesum",6],["omatrix",6]]],[[],[["dimnamesum",6],["omatrix",6]]],[[],[["dimnamesum",6],["omatrix",6]]],[[],["omatrix",6]],[[],["omatrix",6]],[[],[["supertcategoryof",8],["transform",3]]],[[],["transform",3]],[[],[["dimnamesum",6],["omatrix",6]]],[[],[["transform",3],["option",4]]],[[],["transform",3]],[[],["bool",15]],[[]],[[["point",3]],["point",3]],[[["svector",6]],["svector",6]],[[["point",3]],["point",3]],[[["svector",6]],["svector",6]],[[],["omatrix",6]],[[]],[[["unit",3],["point",3],["vector",6]]],[[["unit",3],["vector",6]]],[[],["vector",6]],[[["matrix",3]]],[[["matrix",3]]],[[["vector",6],["matrix",3]]],[[["vector",6],["matrix",3]]],[[]],[[["matrix4",6]]],[[]],[[],["matrix4",6]],[[],["matrix4",6]],[[],["matrix4",6]],[[],["projective3",6]],[[],["projective3",6]],[[],["matrix4",6]],[[],["matrix4",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["point3",6]],["point3",6]],[[["point3",6]],["point3",6]],[[["vector",6]],["vector3",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["matrix4",6]]],[[],["matrix4",6]],[[],["matrix4",6]],[[],["matrix4",6]],[[],["projective3",6]],[[],["projective3",6]],[[],["matrix4",6]],[[],["matrix4",6]],[[]],[[]],[[]],[[]],[[["point3",6]],["point3",6]],[[["point3",6]],["point3",6]],[[["vector",6]],["vector3",6]],[[]],[[]],[[]],[[]],[[]],[[["omatrix",6]]],[[],["bool",15]],[[]],[[],[["dimminimum",6],["omatrix",6]]],[[],[["omatrix",6],["dimminimum",6]]],[[],[["omatrix",6],["dimminimum",6]]],[[],[["ovector",6],["dimminimum",6]]],[[],[["ovector",6],["dimdiff",6]]],[[["omatrix",6]]],[[],["omatrix",6]],[[],["omatrix",6]],[[],["omatrix",6]],[[],["omatrix",6]],[[["matrix",3]]],[[["matrix",3]],[["dim",8],["omatrix",6]]],[[],["omatrix",6]],[[]],[[["omatrix",6]],["option",4]],[[["vector",6]]],[[["usize",15],["vector",6]],[["cholesky",3],["dimsum",6]]],[[["usize",15]],[["dimdiff",6],["cholesky",3]]],[[["omatrix",6]]],[[],[["omatrix",6],["dimminimum",6]]],[[],[["omatrix",6],["dimminimum",6]]],[[],[["omatrix",6],["dimminimum",6]]],[[],["permutationsequence",3]],[[]],[[["matrix",3]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[],[["omatrix",6],["option",4]]],[[],["bool",15]],[[]],[[["omatrix",6]]],[[],[["omatrix",6],["dimminimum",6]]],[[],[["omatrix",6],["dimminimum",6]]],[[],["permutationsequence",3]],[[],["permutationsequence",3]],[[]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[],[["omatrix",6],["option",4]]],[[],["bool",15]],[[]],[[["omatrix",6]]],[[["omatrix",6],["ovector",6]]],[[]],[[],["omatrix",6]],[[],["omatrix",6]],[[],["omatrix",6]],[[["omatrix",6]]],[[],[["omatrix",6],["dimminimum",6]]],[[],[["omatrix",6],["dimminimum",6]]],[[],[["omatrix",6],["dimminimum",6]]],[[],["permutationsequence",3]],[[]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[],[["omatrix",6],["option",4]]],[[["matrix",3]],["bool",15]],[[]],[[],["bool",15]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[["matrix",3]]],[[],["usize",15]],[[],["bool",15]],[[],[["closedneg",8],["one",8]]],[[["omatrix",6]]],[[],[["omatrix",6],["dimminimum",6]]],[[],[["omatrix",6],["dimminimum",6]]],[[],[["omatrix",6],["dimminimum",6]]],[[]],[[["matrix",3]]],[[["matrix",3]],[["option",4],["omatrix",6]]],[[["matrix",3]],["bool",15]],[[],[["omatrix",6],["option",4]]],[[],["bool",15]],[[["omatrix",6]]],[[["usize",15],["omatrix",6]],["option",4]],[[]],[[],[["option",4],["ovector",6]]],[[],[["ovector",6],["numcomplex",3]]],[[["omatrix",6],["bool",15]]],[[["omatrix",6],["bool",15],["usize",15]],["option",4]],[[],["usize",15]],[[],[["result",4],["omatrix",6],["str",15]]],[[],[["result",4],["omatrix",6],["str",15]]],[[["matrix",3]],[["result",4],["str",15],["omatrix",6]]],[[["omatrix",6]]],[[["usize",15],["omatrix",6]],["option",4]],[[],["omatrix",6]],[[["omatrix",6]]],[[]],[[]],[[],["ovector",6]],[[],[["dimdiff",6],["ovector",6]]],[[],["omatrix",6]],[[],["omatrix",6]],[[["omatrix",6]],["option",4]],[[],["omatrix",6]],[[],["complex",3]],[[],["complex",3]],[[]],[[],["complex",3]],[[],["complex",3]],[[["u32",15]],["complex",3]],[[],["complex",3]],[[],["complex",3]],[[["i32",15]],["complex",3]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]]],"p":[[8,"Allocator"],[8,"Reallocator"],[8,"DimEq"],[8,"SameNumberOfRows"],[8,"SameNumberOfColumns"],[8,"SameDimension"],[3,"X"],[3,"XY"],[3,"XYZ"],[3,"XYZW"],[3,"XYZWA"],[3,"XYZWAB"],[3,"IJKW"],[3,"M2x2"],[3,"M2x3"],[3,"M2x4"],[3,"M2x5"],[3,"M2x6"],[3,"M3x2"],[3,"M3x3"],[3,"M3x4"],[3,"M3x5"],[3,"M3x6"],[3,"M4x2"],[3,"M4x3"],[3,"M4x4"],[3,"M4x5"],[3,"M4x6"],[3,"M5x2"],[3,"M5x3"],[3,"M5x4"],[3,"M5x5"],[3,"M5x6"],[3,"M6x2"],[3,"M6x3"],[3,"M6x4"],[3,"M6x5"],[3,"M6x6"],[3,"Dynamic"],[8,"Dim"],[8,"DimAdd"],[8,"DimNameAdd"],[8,"DimMul"],[8,"DimNameMul"],[8,"DimSub"],[8,"DimNameSub"],[8,"DimDiv"],[8,"DimNameDiv"],[8,"DimMin"],[8,"DimNameMin"],[8,"DimMax"],[8,"DimNameMax"],[8,"DimName"],[8,"ToConst"],[8,"ToTypenum"],[3,"MatrixIter"],[3,"MatrixIterMut"],[8,"Storage"],[8,"StorageMut"],[8,"ReshapableStorage"],[8,"MatrixIndex"],[8,"MatrixIndexMut"],[3,"Matrix"],[8,"Norm"],[3,"LpNorm"],[8,"Scalar"],[8,"Normed"],[3,"ArrayStorage"],[8,"SliceRange"],[3,"Unit"],[8,"AbstractRotation"],[3,"Point"],[3,"Quaternion"],[3,"DualQuaternion"],[3,"Translation"],[3,"Isometry"],[3,"Similarity"],[8,"TCategory"],[8,"TCategoryMul"],[6,"Vector"],[6,"SquareMatrix"],[6,"OMatrix"],[3,"GivensRotation"],[3,"SVD"],[3,"SymmetricEigen"],[3,"UDU"],[3,"Complex"],[8,"ComplexField"],[8,"RealField"],[8,"SimdBool"],[8,"SimdComplexField"],[8,"SimdPartialOrd"],[8,"SimdRealField"],[8,"SimdValue"],[3,"ShapeConstraint"],[3,"DefaultAllocator"],[3,"Const"],[3,"RowIter"],[3,"RowIterMut"],[3,"ColumnIter"],[3,"ColumnIterMut"],[3,"SliceStorage"],[3,"SliceStorageMut"],[3,"EuclideanNorm"],[3,"UniformNorm"],[3,"VecStorage"],[3,"Rotation"],[4,"TGeneral"],[4,"TProjective"],[4,"TAffine"],[3,"Transform"],[3,"Reflection"],[3,"Orthographic3"],[3,"Perspective3"],[3,"Bidiagonal"],[3,"Cholesky"],[3,"ColPivQR"],[3,"FullPivLU"],[3,"Hessenberg"],[3,"LU"],[3,"PermutationSequence"],[3,"QR"],[3,"Schur"],[3,"SymmetricTridiagonal"],[6,"UnitQuaternion"],[6,"UnitComplex"],[6,"MatrixSlice"],[6,"MatrixSliceMut"],[6,"DVector"],[6,"DVectorSlice"],[6,"DVectorSliceMut"],[6,"Point1"],[6,"Point2"],[6,"Point3"],[6,"Point4"],[6,"Point5"],[6,"Point6"],[6,"OVector"],[6,"Matrix3"],[6,"Matrix2"],[6,"Matrix4"],[6,"Rotation3"],[6,"Isometry3"],[6,"UnitDualQuaternion"],[6,"Rotation2"],[6,"Translation3"],[6,"SMatrix"],[6,"MatrixSliceMutMN"],[6,"IsometryMatrix2"],[6,"Isometry2"],[6,"IsometryMatrix3"]]},\
"ndarray":{"doc":"The <code>ndarray</code> crate provides an <em>n</em>-dimensional container for …","t":[0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,0,0,0,3,0,5,5,8,16,10,3,5,3,12,3,12,12,12,8,18,16,16,16,10,10,11,11,11,11,10,11,10,8,16,10,8,10,8,16,8,16,3,8,4,13,13,13,13,13,13,3,5,5,8,16,10,10,3,3,12,12,12,8,16,10,10,10,3,4,13,12,12,12,13,13,8,8,8,5,5,5,3,8,16,10,10,10,3,8,16,16,10,10,10,10,3,8,10,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,8,8,16,8,8,16,10,8,8,8,16,10,5,5,5,5,5,5,5,5,8,16,10,10,5,5,5,5,4,13,13,8,16,16,16,10,8,16,16,10,10,3,6,6,3,6,6,6,6,6,6,6,3,3,3,3,4,13,13,11,11,8,14,14,14,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["iter","Axes","Indices","IndicesIter","AxisChunksIter","AxisChunksIterMut","AxisIter","AxisIterMut","ExactChunks","ExactChunksIter","ExactChunksIterMut","ExactChunksMut","IndexedIter","IndexedIterMut","Iter","IterMut","Lanes","LanesIter","LanesIterMut","LanesMut","Windows","split_at","split_at","split_at","split_at","prelude","parallel","prelude","Parallel","linalg","general_mat_mul","general_mat_vec_mul","Dot","Output","dot","Dim","Dim","Axis","0","AxisDescription","axis","len","stride","Dimension","NDIM","Pattern","Smaller","Larger","ndim","into_pattern","size","size_checked","as_array_view","as_array_view_mut","zeros","into_dyn","__private__","IntoDimension","Dim","into_dimension","RemoveAxis","remove_axis","DimAdd","Output","DimMax","Output","IxDynImpl","NdIndex","ErrorKind","IncompatibleShape","IncompatibleLayout","RangeLimited","OutOfBounds","Unsupported","Overflow","ShapeError","indices","indices_of","MultiSliceArg","Output","multi_slice_move","__private__","NewAxis","Slice","start","end","step","SliceArg","OutDim","in_ndim","out_ndim","__private__","SliceInfo","SliceInfoElem","Slice","start","end","step","Index","NewAxis","AsArray","NdFloat","LinalgScalar","concatenate","stack","stack_new_axis","MathCell","IndexLonger","Output","index","get","uget","Shape","ShapeBuilder","Dim","Strides","into_shape","f","set_f","strides","StrideShape","AssignElem","assign_elem","Ix0","Ix1","Ix2","Ix3","Ix4","Ix5","Ix6","IxDyn","Ix0","Ix1","Ix2","Ix3","Ix4","Ix5","Ix6","IxDyn","Array0","Array1","Array2","Array3","Array4","Array5","Array6","ArrayD","ArrayView0","ArrayView1","ArrayView2","ArrayView3","ArrayView4","ArrayView5","ArrayView6","ArrayViewD","ArrayViewMut0","ArrayViewMut1","ArrayViewMut2","ArrayViewMut3","ArrayViewMut4","ArrayViewMut5","ArrayViewMut6","ArrayViewMutD","ArcArray1","ArcArray2","Data","DataMut","DataOwned","MaybeUninit","DataShared","RawData","Elem","__private__","RawDataClone","RawDataMut","RawDataSubst","Output","data_subst","arr0","arr1","rcarr1","aview0","aview1","aview2","aview_mut1","aview_mut2","FixedInitializer","Elem","as_init_slice","len","arr2","rcarr2","arr3","rcarr3","FoldWhile","Continue","Done","IntoNdProducer","Item","Dim","Output","into_producer","NdProducer","Item","Dim","raw_dim","__private__","Zip","Ix","Ixs","ArrayBase","ArcArray","Array","CowArray","ArrayView","ArrayViewMut","RawArrayView","RawArrayViewMut","OwnedRepr","OwnedArcRepr","RawViewRepr","ViewRepr","CowRepr","View","Owned","is_view","is_owned","ScalarOperand","array","s","stack","concatenate","stack_new_axis","azip","par_azip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","into_par_iter","init","deref","deref_mut","drop","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","par_iter","par_iter_mut","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","_data_slice","_data_slice","_data_slice","_data_slice","_data_slice","_data_slice","_data_slice","try_ensure_unique","try_is_unique","try_ensure_unique","try_is_unique","try_ensure_unique","try_is_unique","try_ensure_unique","try_is_unique","try_ensure_unique","try_is_unique","clone_with_ptr","clone_with_ptr","clone_with_ptr","clone_with_ptr","clone_from_with_ptr","clone_with_ptr","clone_with_ptr","into_owned","to_shared","into_owned","into_owned","into_owned","into_owned","new","into_shared","new","into_shared","data_subst","data_subst","data_subst","data_subst","data_subst","data_subst","into_shape","f","set_f","strides","in_ndim","out_ndim","in_ndim","out_ndim","in_ndim","out_ndim","in_ndim","out_ndim","in_ndim","out_ndim","in_ndim","out_ndim","in_ndim","out_ndim","in_ndim","out_ndim","contiguous_stride","contiguous_stride","contiguous_stride","contiguous_stride","contiguous_stride","contiguous_stride","contiguous_stride","into_dimension","into_dimension","ndim","slice","slice_mut","_fastest_varying_stride_order","into_pattern","zeros","next_for","insert_axis","try_remove_axis","ndim","slice","slice_mut","into_pattern","zeros","next_for","equal","size","size_checked","default_strides","_fastest_varying_stride_order","min_stride_axis","max_stride_axis","first_index","stride_offset","stride_offset_checked","insert_axis","try_remove_axis","from_dimension","ndim","into_pattern","slice","slice_mut","zeros","next_for","equal","size","size_checked","last_elem","set_last_elem","default_strides","fortran_strides","_fastest_varying_stride_order","min_stride_axis","first_index","stride_offset","stride_offset_checked","insert_axis","try_remove_axis","ndim","into_pattern","slice","slice_mut","size","zeros","next_for","stride_offset","stride_offset_checked","_fastest_varying_stride_order","insert_axis","try_remove_axis","ndim","into_pattern","slice","slice_mut","zeros","insert_axis","try_remove_axis","ndim","into_pattern","slice","slice_mut","zeros","insert_axis","try_remove_axis","ndim","into_pattern","slice","slice_mut","zeros","insert_axis","try_remove_axis","ndim","slice","slice_mut","into_pattern","zeros","insert_axis","try_remove_axis","from_dimension","into_dyn","index_checked","index_unchecked","index_checked","index_unchecked","index_checked","index_unchecked","index_checked","index_unchecked","index_checked","index_unchecked","index_checked","index_unchecked","index_checked","index_unchecked","index_checked","index_unchecked","index_checked","index_unchecked","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","remove_axis","dot","dot","dot","dot","index","get","uget","drop","as_ref","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","next_back","nth_back","rfold","next_back","nth_back","rfold","next_back","next_back","next_back","next_back","next_back","len","len","len","len","len","len","len","len","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","next","size_hint","fold","next","size_hint","next","size_hint","next","size_hint","fold","nth","collect","all","any","find","find_map","count","last","position","next","size_hint","next","size_hint","fold","nth","collect","all","any","find","find_map","count","last","position","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","fold","size_hint","clone","clone_from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from","clone","default","default","default","default","cmp","cmp","eq","eq","eq","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","partial_cmp","lt","le","gt","ge","partial_cmp","deref","deref","deref","deref_mut","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","div","div","div","rem","rem","rem","sub","sub","sub","sub","sub","add","add","add","add","add","mul","mul","mul","mul","mul","neg","add_assign","add_assign","add_assign","add_assign","add_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","div_assign","div_assign","rem_assign","rem_assign","not","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","shl","shl","shl","shr","shr","shr","bitand_assign","bitand_assign","bitor_assign","bitor_assign","bitxor_assign","bitxor_assign","shl_assign","shl_assign","shr_assign","shr_assign","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","hash","hash","hash","hash","hash","hash","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","from_iter","fmt","fmt","with_producer","len","drive","with_producer","len","drive","with_producer","len","drive","with_producer","len","drive","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","into_par_iter","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","serialize","serialize","serialize","deserialize","deserialize","deserialize","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","kind","from_kind","new","into_inner","swap","size","new","step_by","is_slice","is_index","is_new_axis","new","in_ndim","out_ndim","from","indexed","size","for_each","apply","fold","fold_while","all","and","and_broadcast","map_collect","apply_collect","map_assign_into","apply_assign_into","split","for_each","apply","fold","fold_while","all","and","and_broadcast","map_collect","apply_collect","map_assign_into","apply_assign_into","split","for_each","apply","fold","fold_while","all","and","and_broadcast","map_collect","apply_collect","map_assign_into","apply_assign_into","split","for_each","apply","fold","fold_while","all","and","and_broadcast","map_collect","apply_collect","map_assign_into","apply_assign_into","split","for_each","apply","fold","fold_while","all","and","and_broadcast","map_collect","apply_collect","map_assign_into","apply_assign_into","split","for_each","apply","fold","fold_while","all","split","into_inner","is_done","axis","len","stride","index","NDIM","size","size_checked","as_array_view","as_array_view_mut","into_dyn","zeros","zeros","from_vec","from_iter","linspace","range","logspace","geomspace","eye","from_diag","from_elem","zeros","ones","default","from_shape_simple_fn","from_shape_fn","from_shape_vec","from_shape_vec_unchecked","uninit","uninitialized","maybe_uninit","len","len_of","is_empty","ndim","dim","raw_dim","shape","strides","stride_of","view","view_mut","cell_view","to_owned","to_shared","into_owned","into_shared","first","first_mut","iter","iter_mut","indexed_iter","indexed_iter_mut","slice","slice_mut","multi_slice_mut","slice_move","slice_collapse","slice_axis","slice_axis_mut","slice_axis_inplace","slice_each_axis","slice_each_axis_mut","slice_each_axis_inplace","get","get_mut","uget","uget_mut","swap","uswap","index_axis","index_axis_mut","index_axis_move","collapse_axis","select","rows","genrows","rows_mut","genrows_mut","columns","gencolumns","columns_mut","gencolumns_mut","lanes","lanes_mut","outer_iter","outer_iter_mut","axis_iter","axis_iter_mut","axis_chunks_iter","axis_chunks_iter_mut","exact_chunks","exact_chunks_mut","windows","diag","diag_mut","into_diag","is_standard_layout","as_standard_layout","as_ptr","as_mut_ptr","raw_view","raw_view_mut","as_slice","as_slice_mut","as_slice_memory_order","as_slice_memory_order_mut","into_shape","reshape","into_dyn","into_dimensionality","broadcast","swap_axes","permuted_axes","reversed_axes","t","axes","max_stride_axis","invert_axis","merge_axes","insert_axis","remove_axis","assign","assign_to","fill","zip_mut_with","fold","map","map_mut","mapv","mapv_into","map_inplace","mapv_inplace","for_each","visit","fold_axis","map_axis","map_axis_mut","accumulate_axis_inplace","into_scalar","into_scalar","into_raw_vec","into_raw_vec","assume_init","par_map_inplace","par_mapv_inplace","par_for_each","par_apply","par_map_collect","par_apply_collect","par_map_assign_into","par_apply_assign_into","par_for_each","par_apply","par_map_collect","par_apply_collect","par_map_assign_into","par_apply_assign_into","par_for_each","par_apply","par_map_collect","par_apply_collect","par_map_assign_into","par_apply_assign_into","par_for_each","par_apply","par_map_collect","par_apply_collect","par_map_assign_into","par_apply_assign_into","par_for_each","par_apply","par_map_collect","par_apply_collect","par_map_assign_into","par_apply_assign_into","par_for_each","par_apply","to_vec","row","row_mut","nrows","column","column_mut","ncols","is_square","insert_axis_inplace","index_axis_inplace","sum","scalar_sum","mean","product","var","std","sum_axis","mean_axis","var_axis","std_axis","dot","dot","scaled_add","from_shape","from_shape_ptr","from_shape","from_shape_ptr","from_shape","from_shape_ptr","reborrow","from_shape","from_shape_ptr","reborrow","reborrow","to_slice","reborrow","to_slice","into_scalar","into_scalar","into_scalar","into_scalar","into_slice","into_cell_view","into_slice","into_cell_view","split_at","split_at","split_at","multi_slice_move","split_at","multi_slice_move","from_shape_ptr","deref_into_view","split_at","cast","from_shape_ptr","deref_into_view","split_at","cast","from_shape_ptr","deref_into_view","deref_into_view_mut","split_at","cast","from_shape_ptr","deref_into_view","deref_into_view_mut","split_at","cast","is_view","is_owned","is_view","is_owned"],"q":["ndarray","ndarray::iter","","","","","","","","","","","","","","","","","","","","","","","","ndarray","","ndarray::parallel","","ndarray","ndarray::linalg","","","","","ndarray","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray::SliceInfoElem","","","ndarray","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarrayndarray::parallel","","","","","","","","","","","","","","ndarray","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray::iter","","","ndarrayndarray::iter","","","","","","","","","","","","","","","","","","","ndarray","","ndarray::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray","","","","ndarray::iter","","","","","","","","","","","ndarray","","","","","","","","","","ndarray::iter","ndarray","","","","","","","","ndarray::parallel","ndarray","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray::iter","","ndarray","","","","","","","","","ndarray::iter","ndarray","","","","","ndarray::parallel","ndarray","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray::parallel","","","","","","","","","","","","ndarray::iter","","","","ndarray","","","","","","","","ndarray::parallel","","","","","","","","","","","","","","","","","","","","","","","","ndarrayd":["Producers, iterables and iterators.","An iterator over the length and stride of each axis of an …","Indices producer and iterable.","An iterator over the indexes of an array shape.","An iterator that traverses over the specified axis and …","An iterator that traverses over the specified axis and …","An iterator that traverses over an axis and and yields …","An iterator that traverses over an axis and and yields …","Exact chunks producer and iterable.","Exact chunks iterator.","Exact chunks iterator.","Exact chunks producer and iterable.","An iterator over the indexes and elements of an array.","An iterator over the indexes and elements of an array …","An iterator over the elements of an array.","An iterator over the elements of an array (mutable).","See <code>.lanes()</code> for more information.","An iterator that traverses over all axes but one, and …","An iterator that traverses over all dimensions but the …","See <code>.lanes_mut()</code> for more information.","Window producer and iterable","Splits the iterator at <code>index</code>, yielding two disjoint …","Splits the iterator at <code>index</code>, yielding two disjoint …","Splits the iterator at index, yielding two disjoint …","Splits the iterator at index, yielding two disjoint …","ndarray prelude.","Parallelization features for ndarray.","Into- traits for creating parallelized iterators and/or …","Parallel iterator wrapper.","Linear algebra.","General matrix-matrix multiplication.","General matrix-vector multiplication.","Matrix Multiplication","The result of the operation.","","Dimension description.","Create a new dimension value.","An axis index.","","Description of the axis, its length and its stride.","","","","Array shape and index trait.","For fixed-size dimension representations (e.g. <code>Ix2</code>), this …","Pattern matching friendly form of the dimension value.","Next smaller dimension (if applicable)","Next larger dimension","Returns the number of dimensions (number of axes).","Convert the dimension into a pattern matching friendly …","Compute the size of the dimension (number of elements)","Compute the size while checking for overflow.","Borrow as a read-only array view.","Borrow as a read-write array view.","Creates a dimension of all zeros with the specified ndim.","Convert the dimensional into a dynamic dimensional …","This trait is private to implement; this method exists to …","Argument conversion a dimension.","","","Array shape with a next smaller dimension.","","Adds the two dimensions at compile time.","The sum of the two dimensions.","","The resulting dimension type after broadcasting.","Dynamic dimension or index type.","Tuple or fixed size arrays that can be used to index an …","Error code for an error related to array shape or layout.","incompatible shape","incompatible memory layout","the shape does not fit inside type limits","out of bounds indexing","aliasing array elements","overflow when computing offset, length, etc.","An error related to array shape or layout.","Create an iterable of the array shape <code>shape</code>.","Return an iterable of the indices of the passed-in array.","Slicing information describing multiple mutable, disjoint …","The type of the slices created by <code>.multi_slice_move()</code>.","Split the view into multiple disjoint slices.","This trait is private to implement; this method exists to …","Token to represent a new axis in a slice description.","A slice (range with step size).","","","","A type that can slice an array of dimension <code>D</code>.","Dimensionality of the output array.","Returns the number of axes in the input array.","Returns the number of axes in the output array.","This trait is private to implement; this method exists to …","Represents all of the necessary information to perform a …","A slice (range with step), an index, or a new axis token.","A range with step size. <code>end</code> is an exclusive index. …","","","","A single index.","A new axis of length 1.","Argument conversion into an array view","Floating-point element types <code>f32</code> and <code>f64</code>.","Elements that support linear algebra operations.","Concatenate arrays along the given axis.","Stack arrays along the new axis.","Stack arrays along the new axis.","A transparent wrapper of <code>Cell<T></code> which is identical in …","Extra indexing methods for array views","The type of the reference to the element that is …","Get a reference of a element through the view.","Get a reference of a element through the view.","Get a reference of a element through the view without …","A contiguous array shape of n dimensions.","A trait for <code>Shape</code> and <code>D where D: Dimension</code> that allows …","","","","","","","An array shape of n dimensions in c-order, f-order or …","A producer element that can be assigned to once","Assign the value <code>input</code> to the element that self …","Create a zero-dimensional index","Create a one-dimensional index","Create a two-dimensional index","Create a three-dimensional index","Create a four-dimensional index","Create a five-dimensional index","Create a six-dimensional index","Create a dynamic-dimensional index","zero-dimensionial","one-dimensional","two-dimensional","three-dimensional","four-dimensional","five-dimensional","six-dimensional","dynamic-dimensional","zero-dimensional array","one-dimensional array","two-dimensional array","three-dimensional array","four-dimensional array","five-dimensional array","six-dimensional array","dynamic-dimensional array","zero-dimensional array view","one-dimensional array view","two-dimensional array view","three-dimensional array view","four-dimensional array view","five-dimensional array view","six-dimensional array view","dynamic-dimensional array view","zero-dimensional read-write array view","one-dimensional read-write array view","two-dimensional read-write array view","three-dimensional read-write array view","four-dimensional read-write array view","five-dimensional read-write array view","six-dimensional read-write array view","dynamic-dimensional read-write array view","one-dimensional shared ownership array","two-dimensional shared ownership array","Array representation trait.","Array representation trait.","Array representation trait.","Corresponding owned data with MaybeUninit elements","Array representation trait.","Array representation trait.","The array element type.","This trait is private to implement; this method exists to …","Array representation trait.","Array representation trait.","Array representation trait.","The resulting array storage of the same kind but …","Unsafely translate the data representation from one …","Create a zero-dimensional array with the element <code>x</code>.","Create a one-dimensional array with elements from <code>xs</code>.","Create a one-dimensional array with elements from <code>xs</code>.","Create a zero-dimensional array view borrowing <code>x</code>.","Create a one-dimensional array view with elements …","Create a two-dimensional array view with elements …","Create a one-dimensional read-write array view with …","Create a two-dimensional read-write array view with …","Fixed-size array used for array initialization","","","","Create a two-dimensional array with elements from <code>xs</code>.","Create a two-dimensional array with elements from <code>xs</code>.","Create a three-dimensional array with elements from <code>xs</code>.","Create a three-dimensional array with elements from <code>xs</code>.","Value controlling the execution of <code>.fold_while</code> on <code>Zip</code>.","Continue folding with this value","Fold is complete and will return this value","Argument conversion into a producer.","The element produced per iteration.","Dimension type of the producer","","Convert the value into an <code>NdProducer</code>.","A producer of an n-dimensional set of elements; for …","The element produced per iteration.","Dimension type","Return the shape of the producer.","This trait is private to implement; this method exists to …","Lock step function application across several arrays or …","Array index type","Array index type (signed)","An <em>n</em>-dimensional array.","An array where the data has shared ownership and is copy …","An array that owns its data uniquely.","An array with copy-on-write behavior.","A read-only array view.","A read-write array view.","A read-only array view without a lifetime.","A mutable array view without a lifetime.","Array’s representation.","ArcArray’s representation.","Array pointer’s representation.","Array view’s representation.","CowArray’s representation.","Borrowed data.","Owned data.","Returns <code>true</code> iff the data is the <code>View</code> variant.","Returns <code>true</code> iff the data is the <code>Owned</code> variant.","Elements that can be used as direct operands in …","Create an <strong><code>Array</code></strong> with one, two or three dimensions.","Slice argument constructor.","Stack arrays along the new axis.","Concatenate arrays along the given axis.","Stack arrays along the new axis.","Array zip macro: lock step function application across …","Parallelized array zip macro: lock step function …elf is an index, return the stride offset","Return stride offset for this dimension and index.","","","","","","","","","","","","","","","","","","","","Self is an index, return the stride offset","Return stride offset for this dimension and index.","","","","","","","","","","Self is an index, return the stride offset","Return stride offset for this dimension and index.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compute the dot product of one-dimensional arrays.","Perform the matrix multiplication of the row vector <code>self</code> …","","","Convert a mutable array view to a mutable reference of a …","Convert a mutable array view to a mutable reference of a …","Convert a mutable array view to a mutable reference of a …","","","Create a one-dimensional array from a vector (no copying …","Create a one-dimensional read-only array view of the data …","Create a read-only array view of the array.","Create a one-dimensional read-write array view of the …","Create a read-write array view of the array.","Converts the <code>Vec</code> of arrays to an owned 2-D array.","Converts the <code>Vec</code> of arrays to an owned 3-D array.","Create a <code>Shape</code> from <code>dimension</code>, using the default memory …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Array</code> implements <code>.clone_from()</code> to reuse an array’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Perform an elementwise negation of <code>self</code> and return the …","","","","","","","","","","","","","","","","","","","","Perform an elementwise unary not of <code>self</code> and return the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a one-dimensional array from an iterable.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the <code>ErrorKind</code> of this error.","Create a new <code>ShapeError</code>","Create a new cell with the given value","Return the inner value","Swap value with another cell","Return the size of the shape in number of elements","Create a new <code>Slice</code> with the given extents.","Create a new <code>Slice</code> with the given step size (multiplied …","Returns <code>true</code> if <code>self</code> is a <code>Slice</code> value.","Returns <code>true</code> if <code>self</code> is an <code>Index</code> value.","Returns <code>true</code> if <code>self</code> is a <code>NewAxis</code> value.","Returns a new <code>SliceInfo</code> instance.","Returns the number of dimensions of the input array for …","Returns the number of dimensions after calling <code>.slice()</code> …","Create a new <code>Zip</code> from the input array or other producer <code>p</code>.","Create a new <code>Zip</code> with an index producer and the producer <code>p</code>…","Return a the number of element tuples in the Zip","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to the input arrays while the return…","Tests if every element of the iterator matches a …","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Split the <code>Zip</code> evenly in two.","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to the input arrays while the return…","Tests if every element of the iterator matches a …","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Split the <code>Zip</code> evenly in two.","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to the input arrays while the return…","Tests if every element of the iterator matches a …","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Split the <code>Zip</code> evenly in two.","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to the input arrays while the return…","Tests if every element of the iterator matches a …","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Split the <code>Zip</code> evenly in two.","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to the input arrays while the return…","Tests if every element of the iterator matches a …","Include the producer <code>p</code> in the Zip.","Include the producer <code>p</code> in the Zip, broadcasting if needed.","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and assign the results into the producer <code>into</code>, which …","Map and assign the results into the producer <code>into</code>, which …","Split the <code>Zip</code> evenly in two.","Apply a function to all elements of the input arrays, …","Apply a function to all elements of the input arrays, …","Apply a fold function to all elements of the input arrays,…","Apply a fold function to the input arrays while the return…","Tests if every element of the iterator matches a …","Split the <code>Zip</code> evenly in two.","Return the inner value","Return true if it is <code>Done</code>, false if <code>Continue</code>","Return axis","Return length","Return stride","Return the index of the axis.","For fixed-size dimension representations (e.g. <code>Ix2</code>), this …","Compute the size of the dimension (number of elements)","Compute the size while checking for overflow.","Borrow as a read-only array view.","Borrow as a read-write array view.","Convert the dimensional into a dynamic dimensional …","Create a new dimension value with <code>n</code> axes, all zeros","Create a new dimension value with <code>n</code> axes, all zeros","Create a one-dimensional array from a vector (no copying …","Create a one-dimensional array from an iterator or …","Create a one-dimensional array with <code>n</code> evenly spaced …","Create a one-dimensional array with elements from <code>start</code> …","Create a one-dimensional array with <code>n</code> logarithmically …","Create a one-dimensional array with <code>n</code> geometrically …","Create an identity matrix of size <code>n</code> (square 2D array).","Create a 2D matrix from its diagonal","Create an array with copies of <code>elem</code>, shape <code>shape</code>.","Create an array with zeros, shape <code>shape</code>.","Create an array with ones, shape <code>shape</code>.","Create an array with default values, shape <code>shape</code>","Create an array with values created by the function <code>f</code>.","Create an array with values created by the function <code>f</code>.","Create an array with the given shape from a vector. (No …","Creates an array from a vector and interpret it according …","Create an array with uninitalized elements, shape <code>shape</code>.","Create an array with uninitalized elements, shape <code>shape</code>.","Create an array with uninitalized elements, shape <code>shape</code>.","Return the total number of elements in the array.","Return the length of <code>axis</code>.","Return whether the array has any elements","Return the number of dimensions (axes) in the array","Return the shape of the array in its “pattern” form, …","Return the shape of the array as it’s stored in the …","Return the shape of the array as a slice.","Return the strides of the array as a slice.","Return the stride of <code>axis</code>.","Return a read-only view of the array","Return a read-write view of the array","Return a shared view of the array with elements as if …","Return an uniquely owned copy of the array.","Return a shared ownership (copy on write) array, cloning …","Turn the array into a uniquely owned array, cloning the …","Turn the array into a shared ownership (copy on write) …","Returns a reference to the first element of the array, or …","Returns a mutable reference to the first element of the …","Return an iterator of references to the elements of the …","Return an iterator of mutable references to the elements …","Return an iterator of indexes and references to the …","Return an iterator of indexes and mutable references to …","Return a sliced view of the array.","Return a sliced read-write view of the array.","Return multiple disjoint, sliced, mutable views of the …","Slice the array, possibly changing the number of …","Slice the array in place without changing the number of …","Return a view of the array, sliced along the specified …","Return a mutable view of the array, sliced along the …","Slice the array in place along the specified axis.","Return a view of a slice of the array, with a closure …","Return a mutable view of a slice of the array, with a …","Slice the array in place, with a closure specifying the …","Return a reference to the element at <code>index</code>, or return <code>None</code>…","Return a mutable reference to the element at <code>index</code>, or …","Perform <em>unchecked</em> array indexing.","Perform <em>unchecked</em> array indexing.","Swap elements at indices <code>index1</code> and <code>index2</code>.","Swap elements <em>unchecked</em> at indices <code>index1</code> and <code>index2</code>.","Returns a view restricted to <code>index</code> along the axis, with …","Returns a mutable view restricted to <code>index</code> along the …","Collapses the array to <code>index</code> along the axis and removes …","Selects <code>index</code> along the axis, collapsing the axis into …","Along <code>axis</code>, select arbitrary subviews corresponding to …","Return a producer and iterable that traverses over the <em>…","","Return a producer and iterable that traverses over the <em>…","","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over the <em>…","Return a producer and iterable that traverses over all 1D …","Return a producer and iterable that traverses over all 1D …","Return an iterator that traverses over the outermost …","Return an iterator that traverses over the outermost …","Return an iterator that traverses over <code>axis</code> and yields …","Return an iterator that traverses over <code>axis</code> and yields …","Return an iterator that traverses over <code>axis</code> by chunks of …","Return an iterator that traverses over <code>axis</code> by chunks of …","Return an exact chunks producer (and iterable).","Return an exact chunks producer (and iterable).","Return a window producer and iterable.","Return a view of the diagonal elements of the array.","Return a read-write view over the diagonal elements of …","Return the diagonal as a one-dimensional array.","Return <code>true</code> if the array data is laid out in contiguous …","Return a standard-layout array containing the data, …","Return a pointer to the first element in the array.","Return a mutable pointer to the first element in the …","Return a raw view of the array.","Return a raw mutable view of the array.","Return the array’s data as a slice, if it is contiguous …","Return the array’s data as a slice, if it is contiguous …","Return the array’s data as a slice if it is contiguous, …","Return the array’s data as a slice if it is contiguous, …","Transform the array into <code>shape</code>; any shape with the same …","<em>Note: Reshape is for <code>ArcArray</code> only. Use <code>.into_shape()</code> for …","Convert any array or array view to a dynamic dimensional …","Convert an array or array view to another with the same …","Act like a larger size and/or shape array by <em>broadcasting</em> …","Swap axes <code>ax</code> and <code>bx</code>.","Permute the axes.","Transpose the array by reversing axes.","Return a transposed view of the array.","Return an iterator over the length and stride of each …","Return the axis with the greatest stride (by absolute …","Reverse the stride of <code>axis</code>.","If possible, merge in the axis <code>take</code> to <code>into</code>.","Insert new array axis at <code>axis</code> and return the result.","Remove array axis <code>axis</code> and return the result.","Perform an elementwise assigment to <code>self</code> from <code>rhs</code>.","Perform an elementwise assigment of values cloned from …","Perform an elementwise assigment to <code>self</code> from element <code>x</code>.","Traverse two arrays in unspecified order, in lock step, …","Traverse the array elements and apply a fold, returning …","Call <code>f</code> by reference on each element and create a new array…","Call <code>f</code> on a mutable reference of each element and create …","Call <code>f</code> by <strong>v</strong>alue on each element and create a new array …","Call <code>f</code> by <strong>v</strong>alue on each element, update the array with …","Modify the array in place by calling <code>f</code> by mutable …","Modify the array in place by calling <code>f</code> by <strong>v</strong>alue on each …","Call <code>f</code> for each element in the array.","Visit each element in the array by calling <code>f</code> by reference …","Fold along an axis.","Reduce the values along an axis into just one value, …","Reduce the values along an axis into just one value, …","Iterates over pairs of consecutive elements along the …","Returns the single element in the array without cloning …","Returns the single element in the array without cloning …","Return a vector of the elements in the array, in the way …","Return a vector of the elements in the array, in the way …","<strong>Promise</strong> that the array’s elements are all fully …","Parallel version of <code>map_inplace</code>.","Parallel version of <code>mapv_inplace</code>.","The <code>par_for_each</code> method for <code>Zip</code>.","The <code>par_apply</code> method for <code>Zip</code>.","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and assign the results into the producer <code>into</code>, which …","Apply and assign the results into the producer <code>into</code>, …","The <code>par_for_each</code> method for <code>Zip</code>.","The <code>par_apply</code> method for <code>Zip</code>.","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and assign the results into the producer <code>into</code>, which …","Apply and assign the results into the producer <code>into</code>, …","The <code>par_for_each</code> method for <code>Zip</code>.","The <code>par_apply</code> method for <code>Zip</code>.","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and assign the results into the producer <code>into</code>, which …","Apply and assign the results into the producer <code>into</code>, …","The <code>par_for_each</code> method for <code>Zip</code>.","The <code>par_apply</code> method for <code>Zip</code>.","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and assign the results into the producer <code>into</code>, which …","Apply and assign the results into the producer <code>into</code>, …","The <code>par_for_each</code> method for <code>Zip</code>.","The <code>par_apply</code> method for <code>Zip</code>.","Map and collect the results into a new array, which has …","Map and collect the results into a new array, which has …","Map and assign the results into the producer <code>into</code>, which …","Apply and assign the results into the producer <code>into</code>, …","The <code>par_for_each</code> method for <code>Zip</code>.","The <code>par_apply</code> method for <code>Zip</code>.","Return an vector with the elements of the one-dimensional …","Return an array view of row <code>index</code>.","Return a mutable array view of row <code>index</code>.","Return the number of rows (length of <code>Axis(0)</code>) in the …","Return an array view of column <code>index</code>.","Return a mutable array view of column <code>index</code>.","Return the number of columns (length of <code>Axis(1)</code>) in the …","Return true if the array is square, false otherwise.","Insert new array axis of length 1 at <code>axis</code>, modifying the …","Collapses the array to <code>index</code> along the axis and removes …","Return the sum of all elements in the array.","Return the sum of all elements in the array.","Returns the arithmetic mean x̅ of all elements in the …","Return the product of all elements in the array.","Return variance of elements in the array.","Return standard deviation of elements in the array.","Return sum along <code>axis</code>.","Return mean along <code>axis</code>.","Return variance along <code>axis</code>.","Return standard deviation along <code>axis</code>.","Perform dot product or matrix multiplication of arrays …","Perform matrix multiplication of rectangular arrays <code>self</code> …","Perform the operation <code>self += alpha * rhs</code> efficiently, …","Create a read-only array view borrowing its data from a …","Create an <code>ArrayView<A, D></code> from shape information and a …","Create a read-only array view borrowing its data from a …","Create an <code>ArrayView<A, D></code> from shape information and a …","Create a read-write array view borrowing its data from a …","Create an <code>ArrayViewMut<A, D></code> from shape information and a …","Convert the view into an <code>ArrayViewMut<\'b, A, D></code> where <code>\'b</code> …","Create a read-write array view borrowing its data from a …","Create an <code>ArrayViewMut<A, D></code> from shape information and a …","Convert the view into an <code>ArrayViewMut<\'b, A, D></code> where <code>\'b</code> …","Convert the view into an <code>ArrayView<\'b, A, D></code> where <code>\'b</code> is …","Return the array’s data as a slice, if it is contiguous …","Convert the view into an <code>ArrayView<\'b, A, D></code> where <code>\'b</code> is …","Return the array’s data as a slice, if it is contiguous …","Consume the view and return a reference to the single …","Consume the view and return a reference to the single …","Consume the mutable view and return a mutable reference …","Consume the mutable view and return a mutable reference …","Return the array’s data as a slice, if it is contiguous …","Return a shared view of the array with elements as if …","Return the array’s data as a slice, if it is contiguous …","Return a shared view of the array with elements as if …","Split the array view along <code>axis</code> and return one view …","Split the array view along <code>axis</code> and return one view …","Split the array view along <code>axis</code> and return one mutable …","Split the view into multiple disjoint slices.","Split the array view along <code>axis</code> and return one mutable …","Split the view into multiple disjoint slices.","Create an <code>RawArrayView<A, D></code> from shape information and a …","Converts to a read-only view of the array.","Split the array view along <code>axis</code> and return one array …","Cast the raw pointer of the raw array view to a different …","Create an <code>RawArrayView<A, D></code> from shape information and a …","Converts to a read-only view of the array.","Split the array view along <code>axis</code> and return one array …","Cast the raw pointer of the raw array view to a different …","Create an <code>RawArrayViewMut<A, D></code> from shape information …","Converts to a read-only view of the array.","Converts to a mutable view of the array.","Split the array view along <code>axis</code> and return one array …","Cast the raw pointer of the raw array view to a different …","Create an <code>RawArrayViewMut<A, D></code> from shape information …","Converts to a read-only view of the array.","Converts to a mutable view of the array.","Split the array view along <code>axis</code> and return one array …","Cast the raw pointer of the raw array view to a different …","Returns <code>true</code> iff the array is the view (borrowed) variant.","Returns <code>true</code> iff the array is the owned variant.","Returns <code>true</code> iff the array is the view (borrowed) variant.","Returns <code>true</code> iff the array is the owned variant."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,0,0,0,0,0,5,5,0,0,0,6,0,7,7,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,9,0,10,0,11,0,12,0,0,0,13,13,13,13,13,13,0,0,0,0,14,14,14,0,0,15,15,15,0,16,16,16,16,0,0,17,18,18,18,17,17,0,0,0,0,0,0,0,0,19,19,19,19,0,0,20,20,20,20,20,20,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,23,23,0,0,0,24,24,0,0,0,0,0,0,0,0,0,25,25,25,0,0,0,0,0,26,26,0,27,27,27,27,0,28,28,28,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,29,29,29,0,0,0,0,0,0,0,0,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,47,47,47,47,13,13,13,13,13,13,13,13,13,13,13,13,13,48,48,48,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,50,50,50,15,15,15,15,15,15,15,15,15,15,15,15,15,51,51,51,51,51,51,51,51,51,51,51,51,51,17,17,17,17,17,17,17,17,17,17,17,17,17,17,52,52,52,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,53,53,53,26,26,26,26,26,26,26,26,26,26,26,26,26,7,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,54,54,54,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,60,60,60,29,29,29,29,29,29,29,29,29,29,29,59,59,58,30,60,60,29,59,59,58,58,30,30,60,60,29,29,59,59,58,30,30,60,29,58,58,30,60,60,29,30,30,58,58,30,58,59,59,60,60,49,49,49,49,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,32,1,2,61,62,63,64,65,55,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,66,66,66,66,66,66,66,66,66,65,65,65,65,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,57,57,57,57,62,62,62,30,52,57,61,61,62,62,67,68,49,50,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,15,17,17,17,17,17,17,52,55,55,69,69,40,40,40,41,41,41,1,2,3,4,31,40,38,41,39,43,44,1,2,61,62,32,34,37,42,45,46,33,33,33,35,35,36,36,40,40,40,40,40,40,40,40,40,40,40,40,38,38,41,41,41,41,41,41,41,41,41,41,41,41,39,39,43,43,44,44,1,1,2,2,3,3,4,4,31,31,31,30,30,47,13,33,32,34,35,42,46,40,38,43,1,3,48,49,50,15,51,17,52,53,26,7,31,6,54,55,58,59,60,57,57,56,57,48,54,55,48,6,57,57,13,47,48,15,15,17,17,6,6,54,54,54,55,55,48,48,48,48,48,6,48,52,55,48,55,57,30,13,47,32,1,48,49,50,15,51,17,52,53,26,31,7,6,54,55,58,56,57,47,17,57,57,57,57,57,57,57,57,54,54,57,57,57,54,54,57,57,57,54,54,57,57,57,57,54,54,54,57,57,54,54,54,57,57,54,54,54,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,54,54,54,54,54,54,54,54,55,57,54,54,54,54,54,54,54,54,55,57,15,17,6,54,55,52,52,52,52,52,52,52,52,52,52,52,57,57,57,56,56,56,56,56,56,56,56,56,56,56,56,1,2,3,4,61,62,53,53,53,53,53,53,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,54,66,57,54,66,57,54,54,54,54,54,54,54,54,54,54,54,54,54,54,47,47,48,48,48,49,15,15,17,17,17,52,52,52,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,26,26,7,7,7,6,8,8,8,8,8,8,54,66,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,70,57,70,57,57,57,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,61,61,57,57,57,62,62,62,57,57,61,61,57,61,57,62,57,57,62,62,57,61,57,57,62,62,57,57,57,57,63,63,63,63,57,57,57,57,57,64,64,64,64,64,57,57,69,69],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,null,null,null,[[["arraybase",3],["arraybase",3],["arraybase",3]]],[[["arraybase",3],["arraybase",3],["arraybase",3]]],null,null,[[]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,[[],["usize",15]],[[]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[],[["arrayview1",6],["ix",6]]],[[],[["arrayviewmut1",6],["ix",6]]],[[["usize",15]]],[[],["ixdyn",6]],[[],["privatemarker",3]],null,null,[[]],null,[[["axis",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["indices",3]],[[["arraybase",3]],["indices",3]],null,null,[[["arrayviewmut",6]]],[[],["privatemarker",3]],null,null,null,null,null,null,null,[[],["usize",15]],[[],["usize",15]],[[],["privatemarker",3]],null,null,null,null,null,null,null,null,null,null,null,[[["axis",3]],[["result",4],["array",6],["shapeerror",3]]],[[["axis",3]],[["shapeerror",3],["result",4],["array",6]]],[[["axis",3]],[["shapeerror",3],["result",4],["array",6]]],null,null,null,[[]],[[],["option",4]],[[]],null,null,null,null,[[],["shape",3]],[[],["shape",3]],[[["bool",15]],["shape",3]],[[],["strideshape",3]],null,null,[[]],[[],["ix0",6]],[[["ix",6]],["ix1",6]],[[["ix",6]],["ix2",6]],[[["ix",6]],["ix3",6]],[[["ix",6]],["ix4",6]],[[["ix",6]],["ix5",6]],[[["ix",6]],["ix6",6]],[[],["ixdyn",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["privatemarker",3]],null,null,null,null,[[]],[[],["array0",6]],[[],[["clone",8],["array1",6]]],[[],[["clone",8],["arcarray1",6]]],[[],["arrayview0",6]],[[],["arrayview1",6]],[[],["arrayview2",6]],[[],["arrayviewmut1",6]],[[],["arrayviewmut2",6]],null,null,[[]],[[],["usize",15]],[[],[["clone",8],["array2",6]]],[[],[["clone",8],["arcarray2",6]]],[[],[["clone",8],["array3",6]]],[[],[["arcarray",6],["clone",8],["ix3",6]]],null,null,null,null,null,null,null,[[]],null,null,null,[[]],[[],["privatemarker",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["arraybase",3]]],[[],[["option",4],["bool",15]]],[[["arraybase",3]]],[[],[["option",4],["bool",15]]],[[["arraybase",3]]],[[],[["option",4],["bool",15]]],[[["arraybase",3]]],[[],[["option",4],["bool",15]]],[[["arraybase",3]]],[[],[["option",4],["bool",15]]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3]]],[[["nonnull",3]],["nonnull",3]],[[["nonnull",3]]],[[["nonnull",3]]],[[["arraybase",3]],[["ownedrepr",3],["arraybase",3]]],[[["arraybase",3]],[["arraybase",3],["ownedarcrepr",3]]],[[["arraybase",3]],[["ownedrepr",3],["arraybase",3]]],[[["arraybase",3]],[["ownedrepr",3],["arraybase",3]]],[[["arraybase",3]],[["ownedrepr",3],["arraybase",3]]],[[["cowrepr",4],["arraybase",3]],[["ownedrepr",3],["arraybase",3]]],[[["vec",3]]],[[],["ownedarcrepr",3]],[[["vec",3]]],[[],["ownedarcrepr",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["shape",3]],[[]],[[["bool",15]]],[[],["strideshape",3]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["isize",15]],[[],["isize",15]],[[]],[[]],[[]],[[]],[[],["ix1",6]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["option",4]],[[["axis",3]]],[[["axis",3]]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[]],[[]],[[],["axis",3]],[[],["axis",3]],[[],["option",4]],[[],["isize",15]],[[],[["option",4],["isize",15]]],[[["axis",3]]],[[["axis",3]]],[[],["option",4]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]]],[[],["option",4]],[[],["bool",15]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[],["usize",15]],[[["usize",15]]],[[]],[[]],[[]],[[],["axis",3]],[[],["option",4]],[[],["isize",15]],[[],[["option",4],["isize",15]]],[[["axis",3]]],[[["axis",3]]],[[],["usize",15]],[[]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[],["option",4]],[[],["isize",15]],[[],[["option",4],["isize",15]]],[[]],[[["axis",3]]],[[["axis",3]]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]]],[[["axis",3]]],[[["axis",3]]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]]],[[["axis",3]]],[[["axis",3]]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]]],[[["axis",3]]],[[["axis",3]]],[[],["usize",15]],[[]],[[]],[[]],[[["usize",15]]],[[["axis",3]]],[[["axis",3]]],[[],["option",4]],[[],["ixdyn",6]],[[["ix1",6]],[["option",4],["isize",15]]],[[["ix1",6]],["isize",15]],[[["ixdyn",6]],[["option",4],["isize",15]]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],[["option",4],["isize",15]]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],[["option",4],["isize",15]]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],[["option",4],["isize",15]]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],[["option",4],["isize",15]]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],[["option",4],["isize",15]]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],[["option",4],["isize",15]]],[[["ixdyn",6]],["isize",15]],[[["ixdyn",6]],[["option",4],["isize",15]]],[[["ixdyn",6]],["isize",15]],[[["axis",3]]],[[["axis",3]],["ix0",6]],[[["axis",3]],["ix1",6]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["axis",3]]],[[["arraybase",3]]],[[["arraybase",3]],[["ix1",6],["array",6]]],[[["arraybase",3]],["array2",6]],[[["arraybase",3]],[["ix1",6],["array",6]]],[[]],[[],["option",4]],[[]],[[]],[[]],[[["vec",3]]],[[]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[["vec",3]]],[[["vec",3]]],[[],["shape",3]],[[]],[[["range",3],["isize",15]],["slice",3]],[[["isize",15],["rangeinclusive",3]],["slice",3]],[[["isize",15],["rangefrom",3]],["slice",3]],[[["rangeto",3],["isize",15]],["slice",3]],[[["rangetoinclusive",3],["isize",15]],["slice",3]],[[["range",3],["usize",15]],["slice",3]],[[["usize",15],["rangeinclusive",3]],["slice",3]],[[["rangefrom",3],["usize",15]],["slice",3]],[[["usize",15],["rangeto",3]],["slice",3]],[[["usize",15],["rangetoinclusive",3]],["slice",3]],[[["range",3],["i32",15]],["slice",3]],[[["rangeinclusive",3],["i32",15]],["slice",3]],[[["rangefrom",3],["i32",15]],["slice",3]],[[["rangeto",3],["i32",15]],["slice",3]],[[["rangetoinclusive",3],["i32",15]],["slice",3]],[[["range",3],["isize",15]],["sliceinfoelem",4]],[[["isize",15],["rangeinclusive",3]],["sliceinfoelem",4]],[[["isize",15],["rangefrom",3]],["sliceinfoelem",4]],[[["rangeto",3],["isize",15]],["sliceinfoelem",4]],[[["rangetoinclusive",3],["isize",15]],["sliceinfoelem",4]],[[["range",3],["usize",15]],["sliceinfoelem",4]],[[["usize",15],["rangeinclusive",3]],["sliceinfoelem",4]],[[["rangefrom",3],["usize",15]],["sliceinfoelem",4]],[[["usize",15],["rangeto",3]],["sliceinfoelem",4]],[[["usize",15],["rangetoinclusive",3]],["sliceinfoelem",4]],[[["range",3],["i32",15]],["sliceinfoelem",4]],[[["rangeinclusive",3],["i32",15]],["sliceinfoelem",4]],[[["rangefrom",3],["i32",15]],["sliceinfoelem",4]],[[["rangeto",3],["i32",15]],["sliceinfoelem",4]],[[["rangetoinclusive",3],["i32",15]],["sliceinfoelem",4]],[[["rangefull",3]],["slice",3]],[[["rangefull",3]],["sliceinfoelem",4]],[[["slice",3]],["sliceinfoelem",4]],[[["isize",15]],["sliceinfoelem",4]],[[["usize",15]],["sliceinfoelem",4]],[[["i32",15]],["sliceinfoelem",4]],[[["newaxis",3]],["sliceinfoelem",4]],[[["sliceinfo",3]],["sliceinfo",3]],[[]],[[["ix",6],["vec",3]]],[[["arrayview",6]],["cowarray",6]],[[["array",6]],["cowarray",6]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[["usize",15]],["option",4]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["option",4]],[[],[["usize",15],["option",4]]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[["usize",15]],["option",4]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["option",4]],[[],[["usize",15],["option",4]]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["shapeerror",3]],[[],["errorkind",4]],[[],["indicesiter",3]],[[],["indices",3]],[[]],[[]],[[]],[[]],[[]],[[],["indexediter",3]],[[]],[[]],[[]],[[]],[[],["shape",3]],[[],["strideshape",3]],[[],["slice",3]],[[],["newaxis",3]],[[]],[[]],[[],["zip",3]],[[],["foldwhile",4]],[[]],[[]],[[],["axis",3]],[[],["dim",3]],[[],["ixdynimpl",3]],[[]],[[],["rawviewrepr",3]],[[],["viewrepr",3]],[[],["arraybase",3]],[[]],[[],["parallel",3]],[[]],[[],["mathcell",3]],[[],["dim",3]],[[],["ixdynimpl",3]],[[],["ordering",4]],[[["axis",3]],["ordering",4]],[[["arraybase",3]],["bool",15]],[[["arraybase",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["slice",3]],["bool",15]],[[["slice",3]],["bool",15]],[[["sliceinfoelem",4]],["bool",15]],[[["sliceinfoelem",4]],["bool",15]],[[["axis",3]],["bool",15]],[[["axis",3]],["bool",15]],[[["dim",3]],["bool",15]],[[["dim",3]],["bool",15]],[[],["bool",15]],[[["ixdynimpl",3]],["bool",15]],[[["ixdynimpl",3]],["bool",15]],[[],[["option",4],["ordering",4]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["axis",3]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[]],[[["ix",6]]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[]],[[["ix",6]]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[]],[[["ix",6]]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[]],[[]],[[]],[[["ix",6]]],[[["arraybase",3]]],[[]],[[]],[[]],[[["ix",6]]],[[["arraybase",3]]],[[]],[[]],[[]],[[["ix",6]]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[]],[[]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[["arraybase",3]]],[[],["arraybase",3]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[]],[[["arraybase",3]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["sliceinfo",3],["result",4],["shapeerror",3]]],[[["vec",3],["sliceinfoelem",4]],[["result",4],["sliceinfo",3],["shapeerror",3]]],[[],[["result",4],["shapeerror",3],["sliceinfo",3]]],[[],[["result",4],["sliceinfo",3],["shapeerror",3]]],[[],[["sliceinfo",3],["result",4],["shapeerror",3]]],[[],[["result",4],["sliceinfo",3],["shapeerror",3]]],[[],[["shapeerror",3],["result",4],["sliceinfo",3]]],[[],[["result",4],["shapeerror",3],["sliceinfo",3]]],[[],[["sliceinfo",3],["result",4],["shapeerror",3]]],[[],[["result",4],["sliceinfo",3],["shapeerror",3]]],[[],[["shapeerror",3],["sliceinfo",3],["result",4]]],[[],[["ix1",6],["arraybase",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["arraybase",3],["result",4]]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["errorkind",4]],[[["errorkind",4]]],[[]],[[]],[[]],[[],["usize",15]],[[["option",4],["isize",15]],["slice",3]],[[["isize",15]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["shapeerror",3],["result",4],["sliceinfo",3]]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[],["foldwhile",4]],[[],["bool",15]],[[],["zip",3]],[[],["zip",3]],[[],["array",6]],[[],["array",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["foldwhile",4]],[[],["bool",15]],[[],["zip",3]],[[],["zip",3]],[[],["array",6]],[[],["array",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["foldwhile",4]],[[],["bool",15]],[[],["zip",3]],[[],["zip",3]],[[],["array",6]],[[],["array",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["foldwhile",4]],[[],["bool",15]],[[],["zip",3]],[[],["zip",3]],[[],["array",6]],[[],["array",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["foldwhile",4]],[[],["bool",15]],[[],["zip",3]],[[],["zip",3]],[[],["array",6]],[[],["array",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["foldwhile",4]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["axis",3]],[[],["ix",6]],[[],["ixs",6]],[[],["usize",15]],null,[[],["usize",15]],[[],[["usize",15],["option",4]]],[[],[["arrayview1",6],["ix",6]]],[[],[["arrayviewmut1",6],["ix",6]]],[[],["ixdyn",6]],[[["usize",15]],["ixdyn",6]],[[["usize",15]],["ixdyn",6]],[[["vec",3]]],[[["intoiterator",8]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]],["option",4]],[[["ix",6]]],[[["arraybase",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]],[["result",4],["shapeerror",3]]],[[["vec",3]]],[[],["arraybase",3]],[[]],[[]],[[],["usize",15]],[[["axis",3]],["usize",15]],[[],["bool",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["axis",3]],["isize",15]],[[],["arrayview",6]],[[],["arrayviewmut",6]],[[],[["arrayview",6],["mathcell",3]]],[[],["array",6]],[[],["arcarray",6]],[[],["array",6]],[[],["arcarray",6]],[[],["option",4]],[[],["option",4]],[[],["iter",3]],[[],["itermut",3]],[[],["indexediter",3]],[[],["indexeditermut",3]],[[],["arrayview",6]],[[],["arrayviewmut",6]],[[]],[[],["arraybase",3]],[[]],[[["axis",3],["slice",3]],["arrayview",6]],[[["axis",3],["slice",3]],["arrayviewmut",6]],[[["axis",3],["slice",3]]],[[],["arrayview",6]],[[],["arrayviewmut",6]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[["axis",3],["usize",15]],["arrayview",6]],[[["axis",3],["usize",15]],["arrayviewmut",6]],[[["axis",3],["usize",15]],["arraybase",3]],[[["axis",3],["usize",15]]],[[["axis",3]],["array",6]],[[],["lanes",3]],[[],["lanes",3]],[[],["lanesmut",3]],[[],["lanesmut",3]],[[],["lanes",3]],[[],["lanes",3]],[[],["lanesmut",3]],[[],["lanesmut",3]],[[["axis",3]],["lanes",3]],[[["axis",3]],["lanesmut",3]],[[],["axisiter",3]],[[],["axisitermut",3]],[[["axis",3]],["axisiter",3]],[[["axis",3]],["axisitermut",3]],[[["axis",3],["usize",15]],["axischunksiter",3]],[[["axis",3],["usize",15]],["axischunksitermut",3]],[[],["exactchunks",3]],[[],["exactchunksmut",3]],[[],["windows",3]],[[],["arrayview1",6]],[[],["arrayviewmut1",6]],[[],[["ix1",6],["arraybase",3]]],[[],["bool",15]],[[],["cowarray",6]],[[]],[[]],[[],["rawarrayview",6]],[[],["rawarrayviewmut",6]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],[["result",4],["shapeerror",3],["arraybase",3]]],[[],["arraybase",3]],[[],[["arraybase",3],["ixdyn",6]]],[[],[["shapeerror",3],["result",4],["arraybase",3]]],[[],[["arrayview",6],["option",4]]],[[["usize",15]]],[[],["arraybase",3]],[[],["arraybase",3]],[[],["arrayview",6]],[[],["axes",3]],[[],["axis",3]],[[["axis",3]]],[[["axis",3]],["bool",15]],[[["axis",3]],["arraybase",3]],[[["axis",3]],["arraybase",3]],[[["arraybase",3]]],[[]],[[]],[[["arraybase",3]]],[[]],[[],["array",6]],[[],["array",6]],[[],["array",6]],[[]],[[]],[[]],[[]],[[]],[[["axis",3]],["array",6]],[[["axis",3]],["array",6]],[[["axis",3]],["array",6]],[[["axis",3]]],[[]],[[]],[[],["vec",3]],[[],["vec",3]],[[],["arraybase",3]],[[]],[[]],[[]],[[]],[[],["array",6]],[[],["array",6]],[[]],[[]],[[]],[[]],[[],["array",6]],[[],["array",6]],[[]],[[]],[[]],[[]],[[],["array",6]],[[],["array",6]],[[]],[[]],[[]],[[]],[[],["array",6]],[[],["array",6]],[[]],[[]],[[]],[[]],[[],["array",6]],[[],["array",6]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[["ix",6]],["arrayview1",6]],[[["ix",6]],["arrayviewmut1",6]],[[],["usize",15]],[[["ix",6]],["arrayview1",6]],[[["ix",6]],["arrayviewmut1",6]],[[],["usize",15]],[[],["bool",15]],[[["axis",3]]],[[["axis",3],["usize",15]]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[["axis",3]],["array",6]],[[["axis",3]],[["array",6],["option",4]]],[[["axis",3]],["array",6]],[[["axis",3]],["array",6]],[[]],[[]],[[["arraybase",3]]],[[],[["result",4],["shapeerror",3]]],[[]],[[],[["result",4],["shapeerror",3]]],[[]],[[],[["result",4],["shapeerror",3]]],[[]],[[],["arrayviewmut",6]],[[],[["result",4],["shapeerror",3]]],[[]],[[],["arrayviewmut",6]],[[],["arrayview",6]],[[],["option",4]],[[],["arrayview",6]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],[["mathcell",3],["arrayview",6]]],[[],["option",4]],[[],[["mathcell",3],["arrayview",6]]],[[["axis",3],["ix",6]]],[[["axis",3],["ix",6]]],[[["axis",3],["ix",6]]],[[]],[[["axis",3],["ix",6]]],[[]],[[]],[[],["arrayview",6]],[[["axis",3],["ix",6]]],[[],["rawarrayview",6]],[[]],[[],["arrayview",6]],[[["axis",3],["ix",6]]],[[],["rawarrayview",6]],[[]],[[],["arrayview",6]],[[],["arrayviewmut",6]],[[["axis",3],["ix",6]]],[[],["rawarrayviewmut",6]],[[]],[[],["arrayview",6]],[[],["arrayviewmut",6]],[[["axis",3],["ix",6]]],[[],["rawarrayviewmut",6]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]]],"p":[[3,"AxisIter"],[3,"AxisIterMut"],[3,"AxisChunksIter"],[3,"AxisChunksIterMut"],[8,"Dot"],[3,"Axis"],[3,"AxisDescription"],[8,"Dimension"],[8,"IntoDimension"],[8,"RemoveAxis"],[8,"DimAdd"],[8,"DimMax"],[4,"ErrorKind"],[8,"MultiSliceArg"],[3,"Slice"],[8,"SliceArg"],[4,"SliceInfoElem"],[13,"Slice"],[8,"IndexLonger"],[8,"ShapeBuilder"],[8,"AssignElem"],[8,"DataOwned"],[8,"RawData"],[8,"RawDataSubst"],[8,"FixedInitializer"],[4,"FoldWhile"],[8,"IntoNdProducer"],[8,"NdProducer"],[4,"CowRepr"],[3,"OwnedRepr"],[3,"Axes"],[3,"Indices"],[3,"IndicesIter"],[3,"ExactChunks"],[3,"ExactChunksIter"],[3,"ExactChunksIterMut"],[3,"ExactChunksMut"],[3,"IndexedIter"],[3,"IndexedIterMut"],[3,"Iter"],[3,"IterMut"],[3,"Lanes"],[3,"LanesIter"],[3,"LanesIterMut"],[3,"LanesMut"],[3,"Windows"],[3,"ShapeError"],[3,"MathCell"],[3,"Shape"],[3,"StrideShape"],[3,"NewAxis"],[3,"SliceInfo"],[3,"Zip"],[3,"Dim"],[3,"IxDynImpl"],[3,"Parallel"],[3,"ArrayBase"],[3,"OwnedArcRepr"],[3,"RawViewRepr"],[3,"ViewRepr"],[6,"ArrayView"],[6,"ArrayViewMut"],[6,"RawArrayView"],[6,"RawArrayViewMut"],[6,"Ix"],[6,"IxDyn"],[6,"Array2"],[6,"Array3"],[6,"CowArray"],[6,"Array"]]},\
"ndarray_parallel":{"doc":"Parallelization features for ndarray.","t":[0,8,16,16,10,8,16,16,10,8,16,16,10,8,10,8,10,8,10,8,10,8,10,8,10,8,16,10,10,3,8,16,16,10,8,16,16,10,8,16,16,10,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["prelude","NdarrayIntoParallelIterator","Iter","Item","into_par_iter","NdarrayIntoParallelRefIterator","Iter","Item","par_iter","NdarrayIntoParallelRefMutIterator","Iter","Item","par_iter_mut","ParApply1","par_apply","ParApply2","par_apply","ParApply3","par_apply","ParApply4","par_apply","ParApply5","par_apply","ParApply6","par_apply","ParMap","Item","par_map_inplace","par_mapv_inplace","Parallel","NdarrayIntoParallelIterator","Iter","Item","into_par_iter","NdarrayIntoParallelRefIterator","Iter","Item","par_iter","NdarrayIntoParallelRefMutIterator","Iter","Item","par_iter_mut","par_azip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","into_par_iter","init","deref","deref_mut","drop","clone","fmt","with_producer","len","drive","with_producer","len","drive","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len"],"q":["ndarray_parallel","ndarray_parallel::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_parallel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Into- traits for creating parallelized iterators.","","","","","","","","","","","","","The <code>par_apply</code> method for <code>Zip</code>.","","The <code>par_apply</code> method for <code>Zip</code>.","","The <code>par_apply</code> method for <code>Zip</code>.","","The <code>par_apply</code> method for <code>Zip</code>.","","The <code>par_apply</code> method for <code>Zip</code>.","","The <code>par_apply</code> method for <code>Zip</code>.","","Parallel versions of <code>map_inplace</code> and <code>mapv_inplace</code>.","","","","Parallel iterator wrapper.","","","","","","","","","","","","","Parallel version of the <code>azip!</code> macro.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,0,2,2,2,0,3,3,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,10,10,0,0,1,1,1,0,2,2,2,0,3,3,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"f":[null,null,null,null,[[]],null,null,null,[[]],null,null,null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,null,[[]],[[]],null,null,null,null,[[]],null,null,null,[[]],null,null,null,[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["parallel",3]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]]],"p":[[8,"NdarrayIntoParallelIterator"],[8,"NdarrayIntoParallelRefIterator"],[8,"NdarrayIntoParallelRefMutIterator"],[8,"ParApply1"],[8,"ParApply2"],[8,"ParApply3"],[8,"ParApply4"],[8,"ParApply5"],[8,"ParApply6"],[8,"ParMap"],[3,"Parallel"]]},\
"ndarray_stats":{"doc":"The <code>ndarray-stats</code> crate exposes statistical routines for …","t":[0,8,10,3,3,3,3,3,0,3,4,13,13,3,12,12,4,13,13,11,11,4,13,13,0,0,3,4,13,13,11,11,0,8,16,10,10,10,3,3,3,3,3,11,11,11,11,11,3,3,3,3,3,8,10,10,8,10,10,10,8,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,10,8,10,10,8,16,10,10,10,10,10,10,8,10,10,10,10,10,10,8,10,10,10,8,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["interpolate","Interpolate","__private__","Higher","Lower","Nearest","Midpoint","Linear","errors","EmptyInput","MinMaxError","EmptyInput","UndefinedOrder","ShapeMismatch","first_shape","second_shape","MultiInputError","EmptyInput","ShapeMismatch","is_empty_input","is_shape_mismatch","QuantileError","EmptyInput","InvalidQuantile","histogram","errors","BinNotFound","BinsBuildError","EmptyInput","Strategy","is_empty_input","is_strategy","strategies","BinsBuildingStrategy","Elem","from_array","build","n_bins","Sqrt","Rice","Sturges","FreedmanDiaconis","Auto","bin_width","bin_width","bin_width","bin_width","bin_width","Bins","Edges","Grid","GridBuilder","Histogram","HistogramExt","histogram","__private__","CorrelationExt","cov","pearson_correlation","__private__","DeviationExt","count_eq","count_neq","sq_l2_dist","l2_dist","l1_dist","linf_dist","mean_abs_err","mean_sq_err","root_mean_sq_err","peak_signal_to_noise_ratio","__private__","EntropyExt","entropy","kl_divergence","cross_entropy","__private__","HistogramExt","histogram","__private__","MaybeNan","NotNan","is_nan","try_as_not_nan","from_not_nan","from_not_nan_opt","from_not_nan_ref_opt","remove_nan_mut","MaybeNanExt","fold_skipnan","indexed_fold_skipnan","visit_skipnan","fold_axis_skipnan","map_axis_skipnan_mut","__private__","Quantile1dExt","quantile_mut","quantiles_mut","__private__","QuantileExt","argmin","argmin_skipnan","min","min_skipnan","argmax","argmax_skipnan","max","max_skipnan","quantile_axis_mut","quantiles_axis_mut","quantile_axis_skipnan_mut","__private__","Sort1dExt","get_from_sorted_mut","get_many_from_sorted_mut","partition_mut","__private__","SummaryStatisticsExt","mean","weighted_mean","weighted_sum","weighted_mean_axis","weighted_sum_axis","harmonic_mean","geometric_mean","weighted_var","weighted_std","weighted_var_axis","weighted_std_axis","kurtosis","skewness","central_moment","central_moments","__private__","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","equivalent","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","equivalent","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","equivalent","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","equivalent","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","equivalent","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","vzip","from_array","build","n_bins","from_array","build","n_bins","from_array","build","n_bins","from_array","build","n_bins","from_array","build","n_bins","needs_lower","needs_higher","interpolate","__private__","needs_lower","needs_higher","interpolate","__private__","needs_lower","needs_higher","interpolate","__private__","needs_lower","needs_higher","interpolate","__private__","needs_lower","needs_higher","interpolate","__private__","from","from","from","from","from","from","from","from","from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","index","description","description","len","is_empty","as_array_view","indices_of","iter","new","len","is_empty","index_of","range_of","index","ndim","shape","projections","index_of","index","from_array","build","new","add_observation","ndim","counts","grid"],"q":["ndarray_stats","ndarray_stats::interpolate","","","","","","","ndarray_stats","ndarray_stats::errors","","","","","","","","","","","","","","","ndarray_stats","ndarray_stats::histogram","ndarray_stats::histogram::errors","","","","","","ndarray_stats::histogram","ndarray_stats::histogram::strategies","","","","","","","","","","","","","","","ndarray_stats::histogram","","","","","","","","ndarray_stats","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_stats::interpolate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_stats::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_stats::histogram","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_stats::histogram::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_stats::histogram","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_stats::histogram::strategies","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_stats::interpolate","","","","","","","","","","","","","","","","","","","","ndarray_stats::errors","","","","ndarray_stats::histogram","","ndarray_stats::histogram::errors","","ndarray_stats::histogram","ndarray_stats::errors","","","","","ndarray_stats::histogram","","ndarray_stats::histogram::errors","","ndarray_stats::histogram","ndarray_stats::errors","","","","","","","","ndarray_stats::histogram","","","","","","ndarray_stats::errors","","","","","ndarray_stats::histogram","","ndarray_stats::histogram::errors","","ndarray_stats::histogram","ndarray_stats::histogram::strategies","","","","","ndarray_stats::errors","","","","","ndarray_stats::histogram::errors","","ndarray_stats::histogram","ndarray_stats::histogram::errors","","ndarray_stats::histogram","","","","","","","","","","","","","","","","","","","","","",""],"d":["Interpolation strategies.","Used to provide an interpolation strategy to …","This method makes this trait impossible to implement …","Select the higher value.","Select the lower value.","Select the nearest value.","Select the midpoint of the two values (…","Linearly interpolate between the two values (…","Custom errors returned from our methods and functions.","An error that indicates that the input array was empty.","An error computing a minimum/maximum value.","The input was empty.","The ordering between a tested pair of values was …","An error used by methods and functions that take two …","","","An error for methods that take multiple non-empty array …","One or more of the arrays were empty.","The arrays did not have the same shape.","Returns whether <code>self</code> is the <code>EmptyInput</code> variant.","Returns whether <code>self</code> is the <code>ShapeMismatch</code> variant.","An error computing a quantile.","The input was empty.","The <code>q</code> was not between <code>0.</code> and <code>1.</code> (inclusive).","Histogram functionalities.","","Error to denote that no bin has been found for a certain …","Error computing the set of histogram bins.","The input array was empty.","The strategy for computing appropriate bins failed.","Returns whether <code>self</code> is the <code>EmptyInput</code> variant.","Returns whether <code>self</code> is the <code>Strategy</code> variant.","Strategies used by <code>GridBuilder</code> to infer optimal …","A trait implemented by all strategies to build <code>Bins</code> with …","","Returns a strategy that has learnt the required parameter …","Returns a <code>Bins</code> instance, according to parameters inferred …","Returns the optimal number of bins, according to …","Square root (of data size) strategy, used by Excel and …","A strategy that does not take variability into account, …","R’s default strategy, only accounts for data size. Only …","Robust (resilient to outliers) strategy that takes into …","Maximum of the <code>Sturges</code> and <code>FreedmanDiaconis</code> strategies. …","The bin width (or bin length) according to the fitted …","The bin width (or bin length) according to the fitted …","The bin width (or bin length) according to the fitted …","The bin width (or bin length) according to the fitted …","The bin width (or bin length) according to the fitted …","A sorted collection of non-overlapping 1-dimensional …","A sorted collection of type <code>A</code> elements used to represent …","An orthogonal partition of a rectangular region in an <em>n</em>…","A builder used to create <code>Grid</code> instances for <code>histogram</code> …","Histogram data structure.","Extension trait for <code>ArrayBase</code> providing methods to …","Returns the histogram for a 2-dimensional array of points …","This method makes this trait impossible to implement …","Extension trait for <code>ArrayBase</code> providing functions to …","Return the covariance matrix <code>C</code> for a 2-dimensional array …","Return the Pearson correlation coefficients for a …","This method makes this trait impossible to implement …","An extension trait for <code>ArrayBase</code> providing functions to …","Counts the number of indices at which the elements of the …","Counts the number of indices at which the elements of the …","Computes the squared L2 distance between <code>self</code> and <code>other</code>.","Computes the L2 distance between <code>self</code> and <code>other</code>.","Computes the L1 distance between <code>self</code> and <code>other</code>.","Computes the L∞ distance between <code>self</code> and <code>other</code>.","Computes the mean absolute error between <code>self</code> and <code>other</code>.","Computes the mean squared error between <code>self</code> and <code>other</code>.","Computes the unnormalized root-mean-square error between …","Computes the peak signal-to-noise ratio between <code>self</code> and …","This method makes this trait impossible to implement …","Extension trait for <code>ArrayBase</code> providing methods to …","Computes the entropy <em>S</em> of the array values, defined as","Computes the Kullback-Leibler divergence <em>Dₖₗ(p,q)</em> …","Computes the cross entropy <em>H(p,q)</em> between two arrays, …","This method makes this trait impossible to implement …","Extension trait for <code>ArrayBase</code> providing methods to …","Returns the histogram for a 2-dimensional array of points …","This method makes this trait impossible to implement …","A number type that can have not-a-number values.","A type that is guaranteed not to be a NaN value.","Returns <code>true</code> if the value is a NaN value.","Tries to convert the value to <code>NotNan</code>.","Converts the value.","Converts the value.","Converts the value.","Returns a view with the NaN values removed.","Extension trait for <code>ArrayBase</code> providing NaN-related …","Traverse the non-NaN array elements and apply a fold, …","Traverse the non-NaN elements and their indices and apply …","Visit each non-NaN element in the array by calling <code>f</code> on …","Fold non-NaN values along an axis.","Reduce the values along an axis into just one value, …","This method makes this trait impossible to implement …","Quantile methods for 1-D arrays.","Return the qth quantile of the data.","A bulk version of <code>quantile_mut</code>, optimized to retrieve …","This method makes this trait impossible to implement …","Quantile methods for <code>ArrayBase</code>.","Finds the index of the minimum value of the array.","Finds the index of the minimum value of the array …","Finds the elementwise minimum of the array.","Finds the elementwise minimum of the array, skipping NaN …","Finds the index of the maximum value of the array.","Finds the index of the maximum value of the array …","Finds the elementwise maximum of the array.","Finds the elementwise maximum of the array, skipping NaN …","Return the qth quantile of the data along the specified …","A bulk version of <code>quantile_axis_mut</code>, optimized to …","Return the <code>q</code>th quantile of the data along the specified …","This method makes this trait impossible to implement …","Methods for sorting and partitioning 1-D arrays.","Return the element that would occupy the <code>i</code>-th position if …","A bulk version of <code>get_from_sorted_mut</code>, optimized to …","Partitions the array in increasing order based on the …","This method makes this trait impossible to implement …","Extension trait for <code>ArrayBase</code> providing methods to …","Returns the <code>arithmetic mean</code> x̅ of all elements in the …","Returns the [<code>arithmetic weighted mean</code>] x̅ of all …","Returns the weighted sum of all elements in the array, …","Returns the [<code>arithmetic weighted mean</code>] x̅ along <code>axis</code>. …","Returns the weighted sum along <code>axis</code>, that is, the dot …","Returns the <code>harmonic mean</code> <code>HM(X)</code> of all elements in the …","Returns the <code>geometric mean</code> <code>GM(X)</code> of all elements in the …","Return weighted variance of all elements in the array.","Return weighted standard deviation of all elements in the …","Return weighted variance along <code>axis</code>.","Return weighted standard deviation along <code>axis</code>.","Returns the kurtosis <code>Kurt[X]</code> of all elements in the array:","Returns the Pearson’s moment coefficient of skewness …","Returns the <em>p</em>-th central moment of all elements in the …","Returns the first <em>p</em> central moments of all elements in …","This method makes this trait impossible to implement …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>Err(BinsBuildError::Strategy)</code> if the array is …","","","Returns <code>Err(BinsBuildError::Strategy)</code> if the array is …","","","Returns <code>Err(BinsBuildError::Strategy)</code> if the array is …","","","Returns <code>Err(BinsBuildError::Strategy)</code> if <code>IQR==0</code>. Returns …","","","Returns <code>Err(BinsBuildError::Strategy)</code> if <code>IQR==0</code>. Returns …","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a <code>Vec<A></code> into an <code>Edges<A></code>, consuming the edges. …","Converts an <code>Array1<A></code> into an <code>Edges<A></code>, consuming the …","","","Converts a <code>Vec<Bins<A>></code> into a <code>Grid<A></code>, consuming the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the <code>i</code>-th edge in <code>self</code>.","","","Returns the number of edges in <code>self</code>.","Returns <code>true</code> if <code>self</code> contains no edges.","Returns an immutable 1-dimensional array view of edges.","Returns indices of two consecutive <code>edges</code> in <code>self</code>, if the …","Returns an iterator over the <code>edges</code> in <code>self</code>.","Returns a <code>Bins</code> instance where each bin corresponds to two …","Returns the number of bins in <code>self</code>.","Returns <code>true</code> if the number of bins is zero, i.e. if the …","Returns the index of the bin in <code>self</code> that contains the …","Returns a range as the bin which contains the given <code>value</code>…","Returns a range as the bin at the given <code>index</code> position.","Returns the number of dimensions of the region …","Returns the numbers of bins along each coordinate axis.","Returns the grid projections on each coordinate axis as a …","Returns an <code>n-dimensional</code> index, of bins along each axis …","Given an <code>n</code>-dimensional index, <code>i = (i_0, ..., i_{n-1})</code>, …","Returns a <code>GridBuilder</code> for building a <code>Grid</code> with a given …","Returns a <code>Grid</code> instance, with building parameters infered …","Returns a new instance of Histogram given a <code>Grid</code>.","Adds a single observation to the histogram.","Returns the number of dimensions of the space the …","Borrows a view on the histogram counts matrix.","Borrows an immutable reference to the histogram grid."],"i":[0,0,1,0,0,0,0,0,0,0,0,2,2,0,3,3,0,4,4,4,4,0,5,5,0,0,0,0,6,6,6,6,0,0,7,7,7,7,0,0,0,0,0,8,9,10,11,12,0,0,0,0,0,0,13,13,0,14,14,14,0,15,15,15,15,15,15,15,15,15,15,15,0,16,16,16,16,0,13,13,0,17,17,17,17,17,17,17,0,18,18,18,18,18,18,0,19,19,19,0,20,20,20,20,20,20,20,20,20,20,20,20,0,21,21,21,21,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,23,23,23,23,24,24,24,24,25,25,25,25,26,26,26,26,27,27,27,27,2,4,4,5,29,29,6,6,32,28,2,3,4,5,29,30,31,6,32,28,2,3,3,4,4,5,5,29,29,30,30,32,32,28,2,3,4,5,29,30,31,6,32,8,9,10,11,12,28,2,3,4,5,31,6,29,31,6,29,29,29,29,29,30,30,30,30,30,30,32,32,32,32,32,33,33,34,34,34,34,34],"f":[null,null,[[["privatemarker",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],null,null,null,[[["arraybase",3]],[["binsbuilderror",4],["result",4]]],[[],["bins",3]],[[],["usize",15]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[["grid",3]],["histogram",3]],[[["privatemarker",3]]],null,[[],[["emptyinput",3],["array2",6],["result",4]]],[[],[["emptyinput",3],["array2",6],["result",4]]],[[["privatemarker",3]]],null,[[["arraybase",3]],[["result",4],["usize",15],["multiinputerror",4]]],[[["arraybase",3]],[["result",4],["usize",15],["multiinputerror",4]]],[[["arraybase",3]],[["result",4],["multiinputerror",4]]],[[["arraybase",3]],[["f64",15],["result",4],["multiinputerror",4]]],[[["arraybase",3]],[["result",4],["multiinputerror",4]]],[[["arraybase",3]],[["result",4],["multiinputerror",4]]],[[["arraybase",3]],[["f64",15],["result",4],["multiinputerror",4]]],[[["arraybase",3]],[["f64",15],["result",4],["multiinputerror",4]]],[[["arraybase",3]],[["f64",15],["result",4],["multiinputerror",4]]],[[["arraybase",3]],[["f64",15],["result",4],["multiinputerror",4]]],[[["privatemarker",3]]],null,[[],[["emptyinput",3],["result",4]]],[[["arraybase",3]],[["result",4],["multiinputerror",4]]],[[["arraybase",3]],[["result",4],["multiinputerror",4]]],[[["privatemarker",3]]],null,[[["grid",3]],["histogram",3]],[[["privatemarker",3]]],null,null,[[],["bool",15]],[[],["option",4]],[[]],[[["option",4]]],[[["option",4]]],[[["arrayviewmut1",6]],["arrayviewmut1",6]],null,[[]],[[]],[[]],[[["axis",3]],["array",6]],[[["axis",3]],["array",6]],[[["privatemarker",3]]],null,[[["n64",6]],[["result",4],["quantileerror",4]]],[[["arraybase",3]],[["array1",6],["quantileerror",4],["result",4]]],[[["privatemarker",3]]],null,[[],[["result",4],["minmaxerror",4]]],[[],[["emptyinput",3],["result",4]]],[[],[["result",4],["minmaxerror",4]]],[[]],[[],[["result",4],["minmaxerror",4]]],[[],[["emptyinput",3],["result",4]]],[[],[["result",4],["minmaxerror",4]]],[[]],[[["axis",3],["n64",6]],[["quantileerror",4],["result",4],["array",6]]],[[["axis",3],["arraybase",3]],[["quantileerror",4],["array",6],["result",4]]],[[["axis",3],["n64",6]],[["quantileerror",4],["result",4],["array",6]]],[[["privatemarker",3]]],null,[[["usize",15]]],[[["arraybase",3]],[["usize",15],["indexmap",3]]],[[["usize",15]],["usize",15]],[[["privatemarker",3]]],null,[[],[["emptyinput",3],["result",4]]],[[],[["result",4],["multiinputerror",4]]],[[],[["result",4],["multiinputerror",4]]],[[["axis",3],["arraybase",3]],[["array",6],["multiinputerror",4],["result",4]]],[[["axis",3],["arraybase",3]],[["array",6],["multiinputerror",4],["result",4]]],[[],[["emptyinput",3],["result",4]]],[[],[["emptyinput",3],["result",4]]],[[],[["result",4],["multiinputerror",4]]],[[],[["result",4],["multiinputerror",4]]],[[["axis",3],["arraybase",3]],[["array",6],["multiinputerror",4],["result",4]]],[[["axis",3],["arraybase",3]],[["array",6],["multiinputerror",4],["result",4]]],[[],[["emptyinput",3],["result",4]]],[[],[["emptyinput",3],["result",4]]],[[["u16",15]],[["emptyinput",3],["result",4]]],[[["u16",15]],[["emptyinput",3],["result",4],["vec",3]]],[[["privatemarker",3]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["arraybase",3]],[["binsbuilderror",4],["result",4]]],[[],["bins",3]],[[],["usize",15]],[[["arraybase",3]],[["binsbuilderror",4],["result",4]]],[[],["bins",3]],[[],["usize",15]],[[["arraybase",3]],[["binsbuilderror",4],["result",4]]],[[],["bins",3]],[[],["usize",15]],[[["arraybase",3]],[["binsbuilderror",4],["result",4]]],[[],["bins",3]],[[],["usize",15]],[[["arraybase",3]],[["binsbuilderror",4],["result",4]]],[[],["bins",3]],[[],["usize",15]],[[["usize",15],["n64",6]],["bool",15]],[[["usize",15],["n64",6]],["bool",15]],[[["usize",15],["n64",6],["option",4]]],[[["privatemarker",3]]],[[["usize",15],["n64",6]],["bool",15]],[[["usize",15],["n64",6]],["bool",15]],[[["usize",15],["n64",6],["option",4]]],[[["privatemarker",3]]],[[["usize",15],["n64",6]],["bool",15]],[[["usize",15],["n64",6]],["bool",15]],[[["usize",15],["n64",6],["option",4]]],[[["privatemarker",3]]],[[["usize",15],["n64",6]],["bool",15]],[[["usize",15],["n64",6]],["bool",15]],[[["usize",15],["n64",6],["option",4]]],[[["privatemarker",3]]],[[["usize",15],["n64",6]],["bool",15]],[[["usize",15],["n64",6]],["bool",15]],[[["usize",15],["n64",6],["option",4]]],[[["privatemarker",3]]],[[["emptyinput",3]],["minmaxerror",4]],[[["emptyinput",3]]],[[["shapemismatch",3]]],[[["emptyinput",3]],["quantileerror",4]],[[["vec",3]]],[[["array1",6]]],[[["emptyinput",3]]],[[["minmaxerror",4]],["binsbuilderror",4]],[[["vec",3],["bins",3]]],[[],["emptyinput",3]],[[],["minmaxerror",4]],[[],["shapemismatch",3]],[[],["multiinputerror",4]],[[],["quantileerror",4]],[[],["edges",3]],[[],["bins",3]],[[],["binnotfound",3]],[[],["binsbuilderror",4]],[[],["grid",3]],[[["emptyinput",3]],["bool",15]],[[["minmaxerror",4]],["bool",15]],[[["shapemismatch",3]],["bool",15]],[[["shapemismatch",3]],["bool",15]],[[["multiinputerror",4]],["bool",15]],[[["multiinputerror",4]],["bool",15]],[[["quantileerror",4]],["bool",15]],[[["quantileerror",4]],["bool",15]],[[["edges",3]],["bool",15]],[[["edges",3]],["bool",15]],[[["bins",3]],["bool",15]],[[["bins",3]],["bool",15]],[[["grid",3]],["bool",15]],[[["grid",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]]],[[],["str",15]],[[],["str",15]],[[],["usize",15]],[[],["bool",15]],[[],["arrayview1",6]],[[],["option",4]],[[]],[[["edges",3]]],[[],["usize",15]],[[],["bool",15]],[[],[["usize",15],["option",4]]],[[],[["range",3],["option",4]]],[[["usize",15]],["range",3]],[[],["usize",15]],[[],[["usize",15],["vec",3]]],[[]],[[["arraybase",3]],[["option",4],["vec",3]]],[[],[["vec",3],["range",3]]],[[["arraybase",3]],[["binsbuilderror",4],["result",4]]],[[],["grid",3]],[[["grid",3]]],[[["arraybase",3]],[["binnotfound",3],["result",4]]],[[],["usize",15]],[[],[["usize",15],["arrayviewd",6]]],[[],["grid",3]]],"p":[[8,"Interpolate"],[4,"MinMaxError"],[3,"ShapeMismatch"],[4,"MultiInputError"],[4,"QuantileError"],[4,"BinsBuildError"],[8,"BinsBuildingStrategy"],[3,"Sqrt"],[3,"Rice"],[3,"Sturges"],[3,"FreedmanDiaconis"],[3,"Auto"],[8,"HistogramExt"],[8,"CorrelationExt"],[8,"DeviationExt"],[8,"EntropyExt"],[8,"MaybeNan"],[8,"MaybeNanExt"],[8,"Quantile1dExt"],[8,"QuantileExt"],[8,"Sort1dExt"],[8,"SummaryStatisticsExt"],[3,"Higher"],[3,"Lower"],[3,"Nearest"],[3,"Midpoint"],[3,"Linear"],[3,"EmptyInput"],[3,"Edges"],[3,"Bins"],[3,"BinNotFound"],[3,"Grid"],[3,"GridBuilder"],[3,"Histogram"]]},\
"netcdf":{"doc":"Rust bindings for Unidata’s libnetcdf","t":[0,3,11,11,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,3,3,11,11,11,11,0,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,6,0,3,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,4,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,3,11,11,3,11,11,11,11,3,11,11,3,11,11,11,11,3,11,11,11,11,11,4,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,3,4,13,13,13,11,11,11,11,11,11,11,11,11,8,18,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["attribute","Attribute","name","value","AttrValue","Uchar","Uchars","Schar","Schars","Ushort","Ushorts","Short","Shorts","Uint","Uints","Int","Ints","Ulonglong","Ulonglongs","Longlong","Longlongs","Float","Floats","Double","Doubles","Str","dimension","Dimension","Identifier","len","is_unlimited","name","identifier","error","Error","Netcdf","Str","IndexLen","SliceLen","BufferLen","IndexMismatch","SliceMismatch","ZeroSlice","Stride","TypeMismatch","TypeUnknown","AlreadyExists","NotFound","Ambiguous","Overflow","Conversion","WrongDataset","Utf8Conversion","is_ambigous","Result","file","Options","WRITE","NOCLOBBER","DISKLESS","_64BIT_DATA","_64BIT_OFFSET","CLASSIC","SHARE","NETCDF4","INMEMORY","empty","all","bits","from_bits","from_bits_truncate","from_bits_unchecked","is_empty","is_all","intersects","contains","insert","remove","toggle","set","File","path","root","variable","variables","attribute","attributes","dimension","dimensions","group","groups","types","MutableFile","root_mut","variable_mut","variables_mut","group_mut","groups_mut","add_attribute","add_dimension","add_unlimited_dimension","add_group","add_variable","add_variable_with_type","add_opaque_type","add_vlen_type","add_enum_type","add_compound_type","add_string_variable","add_variable_from_identifiers","group","Group","GroupMut","name","variable","variables","attribute","attributes","dimension","dimensions","group","groups","types","variable_mut","variables_mut","group_mut","groups_mut","add_opaque_type","add_vlen_type","add_enum_type","add_compound_type","add_attribute","add_dimension","add_unlimited_dimension","add_group","add_variable","add_string_variable","add_variable_from_identifiers","add_variable_with_type","types","BasicType","Byte","Char","Ubyte","Short","Ushort","Int","Uint","Int64","Uint64","Float","Double","name","is_i8","is_char","is_u8","is_i16","is_u16","is_i32","is_u32","is_i64","is_u64","is_f32","is_f64","OpaqueType","name","size","VlenType","name","typ","EnumType","typ","members","name","name_from_value","CompoundType","name","fields","CompoundField","name","typ","offset","dimensions","CompoundBuilder","add_type","add","add_array","add_array_type","build","VariableType","Basic","String","Opaque","Vlen","Enum","Compound","as_basic","name","is_string","is_i8","is_u8","is_i16","is_u16","is_i32","is_u32","is_i64","is_u64","is_f32","is_f64","variable","Variable","VariableMut","Endianness","Native","Little","Big","name","attribute","attributes","dimensions","vartype","len","endian_value","compression","chunking","Numeric","NCTYPE","single_value_from_variable","variable_to_ptr","put_value_at","put_values_at","get_values_strided","put_values_strided","add_attribute","value","string_value","values","fill_value","values_to","values_strided_to","raw_values","vlen","put_value","put_string","put_values","put_values_strided","set_fill_value","set_nofill","endian","put_raw_values","put_vlen","create","create_with","append","append_with","open","open_with","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","extend","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","cmp","eq","ne","eq","ne","eq","eq","partial_cmp","deref","deref","deref","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","sub","sub_assign","not","bitand","bitor","bitxor","bitand_assign","bitor_assign","bitxor_assign","hash","from_iter","fmt","fmt","fmt","fmt","source"],"q":["netcdf","netcdf::attribute","","","","","","","","","","","","","","","","","","","","","","","","","netcdf","netcdf::dimension","","","","","","netcdf","netcdf::error","","","","","","","","","","","","","","","","","","","","","netcdf","netcdf::file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","netcdf","netcdf::group","","","","","","","","","","","","","","","","","","","","","","","","","","","","netcdf","netcdf::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","netcdf","netcdf::variable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","netcdf","","","","","","netcdf::attribute","","","","","","","","","","","","","","","","","","netcdf::dimension","","","","","","","","","","","","","","","","","","netcdf::error","","","","","","","","netcdf::file","","","","","","","","","","","","","","","","","","","","","","","netcdf::group","","","","","","","","","","","","","","","","netcdf::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","netcdf::variable","","","","","","","","","","","","","","","","","","","","","","","","","netcdf::attribute","","","","","","","","","","","","","","","","","","","","","","netcdf::error","","","","","netcdf::types","","","","","netcdf::file","netcdf::attribute","","netcdf::dimension","","netcdf::file","netcdf::group","netcdf::types","","","","","","netcdf::variable","","netcdf::file","","netcdf::attribute","","netcdf::file","","netcdf::types","netcdf::variable","netcdf::file","","netcdf::group","netcdf::variable","netcdf::attribute","","netcdf::dimension","","netcdf::error","netcdf::file","","","netcdf::group","","netcdf::types","","","","","","netcdf::variable","","","netcdf::error","netcdf::file","","","","","","","","","","","","","","","netcdf::error"],"d":["Add and read attributes from netcdf groups and variables","Extra properties of a variable or a group can be …","Get the name of the attribute","Get the value of the attribute","Holds the attribute value which can be inserted and …","","","","","","","","","","","","","","","","","","","","","","Interact with netcdf dimensions","Represents a netcdf dimension","Unique identifier for a dimensions in a file. Used when …","Get current length of this dimension","Checks whether the dimension is growable","Gets the name of the dimension","Grabs the unique identifier for this dimension, which can …","Errors that can appear when interacting with netcdf files.…","Various error types that can occur in this crate","Errors from the wrapped netcdf library","Misc errors","Length of the request indices is inconsistent","Length of the slice indices is inconsistent","Supplied the wrong length of the buffer","Some index is greater than expected","Requested a mismatched total slice","Requested a zero slice","Zero stride or matched with length != 1","Supplied the wrong type of parameter","Does not know the type (probably library error…)","Variable/dimension already exists","Could not find variable/attribute/etc","Slice lengths are ambiguous","Overflows possible lengths","Conversion error","Identifier belongs to another dataset","Name is not valid utf-8","Was the error due to ambiguity of the indices or lengths?","Result type used in this crate","Open, create, and append netcdf files","Options for opening, creating, and appending files","Open with write permissions (use <code>append</code> for a mutable …","Overwrite existing file","Reads file into memory","Use 64 bit dimensions and sizes (<code>CDF-5</code> format)","Use 64 bit file offsets","Use a subset compatible with older software","Limits internal caching","Use the <code>hdf5</code> storage format","Read from memory","Returns an empty set of flags","Returns the set containing all flags.","Returns the raw value of the flags currently stored.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Inserts the specified flags in-place.","Removes the specified flags in-place.","Toggles the specified flags in-place.","Inserts or removes the specified flags depending on the …","Read only accessible file","path used to open/create the file","Main entrypoint for interacting with the netcdf file.","Get a variable from the group","Iterate over all variables in a group","Get a single attribute","Get all attributes in the root group","Get a single dimension","Iterator over all dimensions in the root group","Get a group","Iterator over all subgroups in the root group","Return all types in the root group","Mutable access to file","Mutable access to the root group","Get a mutable variable from the group","Iterate over all variables in the root group, with …","Mutable access to subgroup","Iterator over all groups (mutable access)","Add an attribute to the root group","Adds a dimension with the given name and size. A size of …","Adds a dimension with unbounded size","Add an empty group to the dataset","Create a Variable into the dataset, with no data written …","Create a variable with the specified type","Add an opaque datatype, with <code>size</code> bytes","Add a variable length datatype","Add an enum datatype","Build a compound type","Adds a variable with a basic type of string","Adds a variable from a set of unique identifiers, …","All netcdf items belong in the root group, which can be …","Main component of the netcdf format. Holds all variables, …","Mutable access to a group","Name of the current group","Get a variable from the group","Iterate over all variables in a group","Get a single attribute","Get all attributes in the group","Get a single dimension","Iterator over all dimensions","Get a group","Iterator over all subgroups in this group","Return all types in this group","Get a mutable variable from the group","Iterate over all variables in a group, with mutable access","Mutable access to subgroup","Iterator over all groups (mutable access)","Add an opaque datatype, with <code>size</code> bytes","Add a variable length datatype","Add an enum datatype","Build a compound type","Add an attribute to the group","Adds a dimension with the given name and size. A size of …","Adds a dimension with unbounded size","Add an empty group to the dataset","Create a Variable into the dataset, with no data written …","Adds a variable with a basic type of string","Adds a variable from a set of unique identifiers, …","Create a variable with the specified type","Contains functions and enums describing variable types","Basic numeric types","Signed 1 byte integer","ISO/ASCII character","Unsigned 1 byte integer","Signed 2 byte integer","Unsigned 2 byte integer","Signed 4 byte integer","Unsigned 4 byte integer","Signed 8 byte integer","Unsigned 8 byte integer","Single precision floating point number","Double precision floating point number","<code>rusty</code> name of the type","","","","","","","","","","","","A set of bytes which with unspecified endianess","Get the name of this opaque type","Number of bytes this type occupies","Type of variable length","Name of the type","Internal type","Multiple string values stored as integer type","Get the base type of the enum","Get all members of the enum","Name of the type","Get the name from the enum value","A type consisting of other types","Get the name of this type","Get the fields of the compound","Subfield of a compound","Name of the compound field","type of the field","Offset in bytes of this field in the compound type","Get dimensionality of this compound field","A builder for a compound type","Add a type to the compound","Add a basic numeric type","Add an array of a basic type","Add a type as an array","Finalize the compound type","Description of the variable","A basic numeric type","A string type","Some bytes","Variable length array","Enum type","Compound type","Get the basic type, if this type is a simple numeric type","Get the name of the type. The basic numeric types will …","","","","","","","","","","","","Variables in the netcdf file","This struct defines a <code>netCDF</code> variable.","Mutable access to a variable.","Enum for variables endianness","Native endianness, depends on machine architecture …","Lille endian","Big endian","Get name of variable","Get an attribute of this variable","Iterator over all the attributes of this variable","Dimensions for a variable","Get the type of this variable","Get current length of the variable","Get endianness of the variable.","Sets compression on the variable. Must be set before …","Set chunking for variable. Must be set before inserting …","This trait allow an implicit cast when fetching a netCDF …","Constant corresponding to a netcdf type","Returns a single indexed value of the variable as Self","Get multiple values at once, without checking the …","Put a single value into a netCDF variable","put a SLICE of values into a netCDF variable at the given …","get a SLICE of values into the variable, with the source …","put a SLICE of values into the variable, with the …","Adds an attribute to the variable","Fetches one specific value at specific indices indices …","Reads a string variable. This involves two copies per …","Fetches variable","Get the fill value of a variable","Fetches variable into slice buffer must be able to hold …","Fetches variable into slice buffer must be able to hold …","Get values of any type as bytes, with no further …","Get a vlen element","Put a single value at <code>indices</code>","Internally converts to a <code>CString</code>, avoid using this …","Put a slice of values at <code>indices</code>","Put a slice of values at <code>indices</code>, with destination strided","Set a Fill Value","Set the fill value to no value. Use this when wanting to …","Set endianness of the variable. Must be set before …","Get values of any type as bytes","Get a vlen element","Open a netcdf file in create mode","Open a <code>netCDF</code> file in create mode with the given options","Open a <code>netCDF</code> file in append mode","Open a <code>netCDF</code> file in append mode with the given options","Open a <code>netCDF</code> file in read mode","Open a <code>netCDF</code> file in read mode with the given optionseturns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the complement of this set of flags.","Returns the intersection between the two sets of flags.","Returns the union of the two sets of flags.","Returns the left flags, but with all the right flags …","Disables all flags disabled in the set.","Adds the set of flags.","Toggles the set of flags.","","","","","","",""],"i":[0,0,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,3,3,3,3,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,6,6,6,6,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,11,11,0,12,12,0,13,13,13,13,0,14,14,0,15,15,15,15,0,16,16,16,16,16,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,18,18,18,19,19,19,19,19,19,19,20,20,0,21,21,21,21,21,21,21,20,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,22,22,22,22,22,22,22,22,22,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,18,18,18,18,18,18,18,18,18,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,17,17,17,17,17,5,1,2,3,22,5,8,10,11,12,13,14,17,19,18,5,5,2,2,5,5,10,18,5,7,9,20,1,2,3,22,4,5,6,7,8,9,10,11,12,13,14,17,19,20,18,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4],"f":[null,null,[[],["str",15]],[[],[["attrvalue",4],["result",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["usize",15]],[[],["bool",15]],[[],["string",3]],[[],["identifier",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["options",3]],[[],["options",3]],[[],["nc_type",6]],[[["nc_type",6]],[["option",4],["options",3]]],[[["nc_type",6]],["options",3]],[[["nc_type",6]],["options",3]],[[],["bool",15]],[[],["bool",15]],[[["options",3]],["bool",15]],[[["options",3]],["bool",15]],[[["options",3]]],[[["options",3]]],[[["options",3]]],[[["bool",15],["options",3]]],null,[[],[["pathbuf",3],["result",6]]],[[],[["group",3],["option",4]]],[[["str",15]],[["variable",3],["option",4]]],[[]],[[["str",15]],[["attribute",3],["option",4]]],[[]],[[["str",15]],[["option",4],["dimension",3]]],[[]],[[["str",15]],[["result",6],["option",4]]],[[],["result",6]],[[],["result",6]],null,[[],[["groupmut",3],["option",4]]],[[["str",15]],[["option",4],["variablemut",3]]],[[]],[[["str",15]],[["option",4],["result",6]]],[[],["result",6]],[[["str",15]],[["result",6],["attribute",3]]],[[["usize",15],["str",15]],[["dimension",3],["result",6]]],[[["str",15]],[["result",6],["dimension",3]]],[[["str",15]],[["result",6],["groupmut",3]]],[[["str",15]],[["result",6],["variablemut",3]]],[[["variabletype",4],["str",15]],[["result",6],["variablemut",3]]],[[["usize",15],["str",15]],[["opaquetype",3],["result",6]]],[[["str",15]],[["vlentype",3],["result",6]]],[[["str",15]],[["enumtype",3],["result",6]]],[[["str",15]],[["result",6],["compoundbuilder",3]]],[[["str",15]],[["result",6],["variablemut",3]]],[[["str",15]],[["result",6],["variablemut",3]]],null,null,null,[[],["string",3]],[[["str",15]],[["option",4],["variable",3]]],[[]],[[["str",15]],[["option",4],["attribute",3]]],[[]],[[["str",15]],[["dimension",3],["option",4]]],[[]],[[["str",15]],[["option",4],["group",3]]],[[]],[[]],[[["str",15]],[["option",4],["variablemut",3]]],[[]],[[["str",15]],[["groupmut",3],["option",4]]],[[]],[[["usize",15],["str",15]],[["opaquetype",3],["result",6]]],[[["str",15]],[["vlentype",3],["result",6]]],[[["str",15]],[["enumtype",3],["result",6]]],[[["str",15]],[["result",6],["compoundbuilder",3]]],[[["str",15]],[["result",6],["attribute",3]]],[[["usize",15],["str",15]],[["dimension",3],["result",6]]],[[["str",15]],[["dimension",3],["result",6]]],[[["str",15]],[["groupmut",3],["result",6]]],[[["str",15]],[["result",6],["variablemut",3]]],[[["str",15]],[["result",6],["variablemut",3]]],[[["str",15]],[["result",6],["variablemut",3]]],[[["variabletype",4],["str",15]],[["result",6],["variablemut",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["string",3]],[[],["usize",15]],null,[[],["string",3]],[[],["basictype",4]],null,[[],["basictype",4]],[[],["result",6]],[[],["string",3]],[[["i64",15]],[["string",3],["option",4]]],null,[[],["string",3]],[[]],null,[[],["string",3]],[[],["variabletype",4]],[[],["usize",15]],[[],[["option",4],["vec",3]]],null,[[["variabletype",4],["str",15]],["result",6]],[[["str",15]],["result",6]],[[["str",15]],["result",6]],[[["variabletype",4],["str",15]],["result",6]],[[],[["compoundtype",3],["result",6]]],null,null,null,null,null,null,null,[[],[["option",4],["basictype",4]]],[[],["string",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,[[],["string",3]],[[["str",15]],[["option",4],["attribute",3]]],[[]],[[]],[[],["variabletype",4]],[[],["usize",15]],[[],[["endianness",4],["result",6]]],[[["nc_type",6]],["result",6]],[[],["result",6]],null,null,[[["variable",3]],["result",6]],[[["variable",3]],["result",6]],[[["variablemut",3]],["result",6]],[[["variablemut",3]],["result",6]],[[["variable",3]],["result",6]],[[["variablemut",3]],["result",6]],[[["str",15]],[["attribute",3],["result",6]]],[[["option",4]],[["result",6],["numeric",8]]],[[["option",4]],[["result",6],["string",3]]],[[["option",4]],[["arrayd",6],["result",6]]],[[],[["option",4],["result",6]]],[[["option",4]],["result",6]],[[["option",4]],[["usize",15],["result",6]]],[[],["result",6]],[[],[["vec",3],["result",6]]],[[["option",4],["numeric",8]],["result",6]],[[["option",4],["str",15]],["result",6]],[[["option",4]],["result",6]],[[["option",4]],[["usize",15],["result",6]]],[[],["result",6]],[[],["result",6]],[[["endianness",4]],["result",6]],[[],["result",6]],[[],["result",6]],[[],[["result",6],["mutablefile",3]]],[[["options",3]],[["result",6],["mutablefile",3]]],[[],[["result",6],["mutablefile",3]]],[[["options",3]],[["result",6],["mutablefile",3]]],[[],[["file",3],["result",6]]],[[["options",3]],[["file",3],["result",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["u8",15]]],[[["vec",3],["u8",15]]],[[["i8",15]]],[[["vec",3],["i8",15]]],[[["u16",15]]],[[["vec",3],["u16",15]]],[[["i16",15]]],[[["i16",15],["vec",3]]],[[["u32",15]]],[[["vec",3],["u32",15]]],[[["i32",15]]],[[["vec",3],["i32",15]]],[[["u64",15]]],[[["vec",3],["u64",15]]],[[["i64",15]]],[[["i64",15],["vec",3]]],[[["f32",15]]],[[["f32",15],["vec",3]]],[[["f64",15]]],[[["f64",15],["vec",3]]],[[["str",15]]],[[["string",3]]],[[["str",15]]],[[["string",3]]],[[["nc_type",6]]],[[["tryfrominterror",3]]],[[["fromutf8error",3]]],[[["compoundtype",3]]],[[["basictype",4]]],[[["enumtype",3]]],[[["vlentype",3]]],[[["opaquetype",3]]],[[["intoiterator",8]]],[[],["attribute",3]],[[],["attrvalue",4]],[[],["dimension",3]],[[],["identifier",3]],[[],["options",3]],[[],["group",3]],[[],["basictype",4]],[[],["opaquetype",3]],[[],["vlentype",3]],[[],["enumtype",3]],[[],["compoundtype",3]],[[],["variabletype",4]],[[],["variable",3]],[[],["endianness",4]],[[],["options",3]],[[["options",3]],["ordering",4]],[[["attrvalue",4]],["bool",15]],[[["attrvalue",4]],["bool",15]],[[["options",3]],["bool",15]],[[["options",3]],["bool",15]],[[["basictype",4]],["bool",15]],[[["endianness",4]],["bool",15]],[[["options",3]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["options",3]],["options",3]],[[["options",3]]],[[],["options",3]],[[["options",3]],["options",3]],[[["options",3]],["options",3]],[[["options",3]],["options",3]],[[["options",3]]],[[["options",3]]],[[["options",3]]],[[]],[[["intoiterator",8]],["options",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["option",4],["error",8]]]],"p":[[3,"Attribute"],[4,"AttrValue"],[3,"Dimension"],[4,"Error"],[3,"Options"],[3,"File"],[3,"MutableFile"],[3,"Group"],[3,"GroupMut"],[4,"BasicType"],[3,"OpaqueType"],[3,"VlenType"],[3,"EnumType"],[3,"CompoundType"],[3,"CompoundField"],[3,"CompoundBuilder"],[4,"VariableType"],[4,"Endianness"],[3,"Variable"],[3,"VariableMut"],[8,"Numeric"],[3,"Identifier"]]},\
"netcdf_sys":{"doc":"","t":[7,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,3,12,12,6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,11,11,11,11,11,11,11],"n":["ncerr","ncopts","nc_inq_libvers","nc_strerror","nc__create","nc_create","nc__open","nc_open","nc_inq_path","nc_inq_ncid","nc_inq_grps","nc_inq_grpname","nc_inq_grpname_full","nc_inq_grpname_len","nc_inq_grp_parent","nc_inq_grp_ncid","nc_inq_grp_full_ncid","nc_inq_varids","nc_inq_dimids","nc_inq_typeids","nc_inq_type_equal","nc_def_grp","nc_rename_grp","nc_def_compound","nc_insert_compound","nc_insert_array_compound","nc_inq_type","nc_inq_typeid","nc_inq_compound","nc_inq_compound_name","nc_inq_compound_size","nc_inq_compound_nfields","nc_inq_compound_field","nc_inq_compound_fieldname","nc_inq_compound_fieldindex","nc_inq_compound_fieldoffset","nc_inq_compound_fieldtype","nc_inq_compound_fieldndims","nc_inq_compound_fielddim_sizes","nc_def_vlen","nc_inq_vlen","nc_free_vlen","nc_free_vlens","nc_put_vlen_element","nc_get_vlen_element","nc_free_string","nc_inq_user_type","nc_put_att","nc_get_att","nc_def_enum","nc_insert_enum","nc_inq_enum","nc_inq_enum_member","nc_inq_enum_ident","nc_def_opaque","nc_inq_opaque","nc_put_var","nc_get_var","nc_put_var1","nc_get_var1","nc_put_vara","nc_get_vara","nc_put_vars","nc_get_vars","nc_put_varm","nc_get_varm","nc_def_var_deflate","nc_inq_var_deflate","nc_inq_var_szip","nc_def_var_fletcher32","nc_inq_var_fletcher32","nc_def_var_chunking","nc_inq_var_chunking","nc_def_var_fill","nc_inq_var_fill","nc_def_var_endian","nc_inq_var_endian","nc_set_fill","nc_set_default_format","nc_set_chunk_cache","nc_get_chunk_cache","nc_set_var_chunk_cache","nc_get_var_chunk_cache","nc_redef","nc__enddef","nc_enddef","nc_sync","nc_abort","nc_close","nc_inq","nc_inq_ndims","nc_inq_nvars","nc_inq_natts","nc_inq_unlimdim","nc_inq_unlimdims","nc_inq_format","nc_inq_format_extended","nc_def_dim","nc_inq_dimid","nc_inq_dim","nc_inq_dimname","nc_inq_dimlen","nc_rename_dim","nc_inq_att","nc_inq_attid","nc_inq_atttype","nc_inq_attlen","nc_inq_attname","nc_copy_att","nc_rename_att","nc_del_att","nc_put_att_text","nc_get_att_text","nc_put_att_uchar","nc_get_att_uchar","nc_put_att_schar","nc_get_att_schar","nc_put_att_short","nc_get_att_short","nc_put_att_int","nc_get_att_int","nc_put_att_long","nc_get_att_long","nc_put_att_float","nc_get_att_float","nc_put_att_double","nc_get_att_double","nc_put_att_ushort","nc_get_att_ushort","nc_put_att_uint","nc_get_att_uint","nc_put_att_longlong","nc_get_att_longlong","nc_put_att_ulonglong","nc_get_att_ulonglong","nc_put_att_string","nc_get_att_string","nc_def_var","nc_inq_var","nc_inq_varid","nc_inq_varname","nc_inq_vartype","nc_inq_varndims","nc_inq_vardimid","nc_inq_varnatts","nc_rename_var","nc_copy_var","nc_put_var1_text","nc_get_var1_text","nc_put_var1_uchar","nc_get_var1_uchar","nc_put_var1_schar","nc_get_var1_schar","nc_put_var1_short","nc_get_var1_short","nc_put_var1_int","nc_get_var1_int","nc_put_var1_long","nc_get_var1_long","nc_put_var1_float","nc_get_var1_float","nc_put_var1_double","nc_get_var1_double","nc_put_var1_ushort","nc_get_var1_ushort","nc_put_var1_uint","nc_get_var1_uint","nc_put_var1_longlong","nc_get_var1_longlong","nc_put_var1_ulonglong","nc_get_var1_ulonglong","nc_put_var1_string","nc_get_var1_string","nc_put_vara_text","nc_get_vara_text","nc_put_vara_uchar","nc_get_vara_uchar","nc_put_vara_schar","nc_get_vara_schar","nc_put_vara_short","nc_get_vara_short","nc_put_vara_int","nc_get_vara_int","nc_put_vara_long","nc_get_vara_long","nc_put_vara_float","nc_get_vara_float","nc_put_vara_double","nc_get_vara_double","nc_put_vara_ushort","nc_get_vara_ushort","nc_put_vara_uint","nc_get_vara_uint","nc_put_vara_longlong","nc_get_vara_longlong","nc_put_vara_ulonglong","nc_get_vara_ulonglong","nc_put_vara_string","nc_get_vara_string","nc_put_vars_text","nc_get_vars_text","nc_put_vars_uchar","nc_get_vars_uchar","nc_put_vars_schar","nc_get_vars_schar","nc_put_vars_short","nc_get_vars_short","nc_put_vars_int","nc_get_vars_int","nc_put_vars_long","nc_get_vars_long","nc_put_vars_float","nc_get_vars_float","nc_put_vars_double","nc_get_vars_double","nc_put_vars_ushort","nc_get_vars_ushort","nc_put_vars_uint","nc_get_vars_uint","nc_put_vars_longlong","nc_get_vars_longlong","nc_put_vars_ulonglong","nc_get_vars_ulonglong","nc_put_vars_string","nc_get_vars_string","nc_put_varm_text","nc_get_varm_text","nc_put_varm_uchar","nc_get_varm_uchar","nc_put_varm_schar","nc_get_varm_schar","nc_put_varm_short","nc_get_varm_short","nc_put_varm_int","nc_get_varm_int","nc_put_varm_long","nc_get_varm_long","nc_put_varm_float","nc_get_varm_float","nc_put_varm_double","nc_get_varm_double","nc_put_varm_ushort","nc_get_varm_ushort","nc_put_varm_uint","nc_get_varm_uint","nc_put_varm_longlong","nc_get_varm_longlong","nc_put_varm_ulonglong","nc_get_varm_ulonglong","nc_put_varm_string","nc_get_varm_string","nc_put_var_text","nc_get_var_text","nc_put_var_uchar","nc_get_var_uchar","nc_put_var_schar","nc_get_var_schar","nc_put_var_short","nc_get_var_short","nc_put_var_int","nc_get_var_int","nc_put_var_long","nc_get_var_long","nc_put_var_float","nc_get_var_float","nc_put_var_double","nc_get_var_double","nc_put_var_ushort","nc_get_var_ushort","nc_put_var_uint","nc_get_var_uint","nc_put_var_longlong","nc_get_var_longlong","nc_put_var_ulonglong","nc_get_var_ulonglong","nc_put_var_string","nc_get_var_string","nc_put_att_ubyte","nc_get_att_ubyte","nc_put_var1_ubyte","nc_get_var1_ubyte","nc_put_vara_ubyte","nc_get_vara_ubyte","nc_put_vars_ubyte","nc_get_vars_ubyte","nc_put_varm_ubyte","nc_get_varm_ubyte","nc_put_var_ubyte","nc_get_var_ubyte","nc_show_metadata","nc__create_mp","nc__open_mp","nc_delete","nc_delete_mp","nc_set_base_pe","nc_inq_base_pe","nctypelen","nc_advise","nccreate","ncopen","ncsetfill","ncredef","ncendef","ncsync","ncabort","ncclose","ncinquire","ncdimdef","ncdimid","ncdiminq","ncdimrename","ncattput","ncattinq","ncattget","ncattcopy","ncattname","ncattrename","ncattdel","ncvardef","ncvarid","ncvarinq","ncvarput1","ncvarget1","ncvarput","ncvarget","ncvarputs","ncvargets","ncvarputg","ncvargetg","ncvarrename","ncrecinq","ncrecget","ncrecput","nc_type","nc_vlen_t","len","p","nclong","NC_NAT","NC_BYTE","NC_CHAR","NC_SHORT","NC_INT","NC_LONG","NC_FLOAT","NC_DOUBLE","NC_UBYTE","NC_USHORT","NC_UINT","NC_INT64","NC_UINT64","NC_STRING","NC_MAX_ATOMIC_TYPE","NC_VLEN","NC_OPAQUE","NC_ENUM","NC_COMPOUND","NC_FIRSTUSERTYPEID","NC_FILL_INT","NC_FILL_UBYTE","NC_FILL_USHORT","NC_FILL_UINT","NC_MAX_BYTE","NC_MIN_BYTE","NC_MAX_CHAR","NC_MAX_SHORT","NC_MIN_SHORT","NC_MAX_INT","NC_MIN_INT","NC_MAX_UBYTE","NC_MAX_USHORT","NC_MAX_UINT","NC_MAX_INT64","NC_MIN_INT64","NC_MAX_UINT64","X_INT64_MAX","X_INT64_MIN","X_UINT64_MAX","_FillValue","NC_FILL","NC_NOFILL","NC_NOWRITE","NC_WRITE","NC_CLOBBER","NC_NOCLOBBER","NC_DISKLESS","NC_MMAP","NC_64BIT_DATA","NC_CDF5","NC_CLASSIC_MODEL","NC_64BIT_OFFSET","NC_LOCK","NC_SHARE","NC_NETCDF4","NC_MPIIO","NC_MPIPOSIX","NC_INMEMORY","NC_PNETCDF","NC_FORMAT_CLASSIC","NC_FORMAT_64BIT","NC_FORMAT_NETCDF4","NC_FORMAT_NETCDF4_CLASSIC","NC_FORMAT_NC3","NC_FORMAT_NC_HDF5","NC_FORMAT_NC_HDF4","NC_FORMAT_PNETCDF","NC_FORMAT_DAP2","NC_FORMAT_DAP4","NC_FORMAT_UNDEFINED","NC_SIZEHINT_DEFAULT","NC_UNLIMITED","NC_GLOBAL","NC_MAX_DIMS","NC_MAX_ATTRS","NC_MAX_VARS","NC_MAX_NAME","NC_MAX_VAR_DIMS","NC_MAX_HDF4_NAME","NC_ENDIAN_NATIVE","NC_ENDIAN_LITTLE","NC_ENDIAN_BIG","NC_CHUNKED","NC_CONTIGUOUS","NC_NOCHECKSUM","NC_FLETCHER32","NC_NOSHUFFLE","NC_SHUFFLE","NC_MIN_DEFLATE_LEVEL","NC_MAX_DEFLATE_LEVEL","NC_NOERR","NC2_ERR","NC_EBADID","NC_ENFILE","NC_EEXIST","NC_EINVAL","NC_EPERM","NC_ENOTINDEFINE","NC_EINDEFINE","NC_EINVALCOORDS","NC_EMAXDIMS","NC_ENAMEINUSE","NC_ENOTATT","NC_EMAXATTS","NC_EBADTYPE","NC_EBADDIM","NC_EUNLIMPOS","NC_EMAXVARS","NC_ENOTVAR","NC_EGLOBAL","NC_ENOTNC","NC_ESTS","NC_EMAXNAME","NC_EUNLIMIT","NC_ENORECVARS","NC_ECHAR","NC_EEDGE","NC_ESTRIDE","NC_EBADNAME","NC_ERANGE","NC_ENOMEM","NC_EVARSIZE","NC_EDIMSIZE","NC_ETRUNC","NC_EAXISTYPE","NC_EDAP","NC_ECURL","NC_EIO","NC_ENODATA","NC_EDAPSVC","NC_EDAS","NC_EDDS","NC_EDATADDS","NC_EDAPURL","NC_EDAPCONSTRAINT","NC_ETRANSLATION","NC_EACCESS","NC_EAUTH","NC_ENOTFOUND","NC_ECANTREMOVE","NC4_FIRST_ERROR","NC_EHDFERR","NC_ECANTREAD","NC_ECANTWRITE","NC_ECANTCREATE","NC_EFILEMETA","NC_EDIMMETA","NC_EATTMETA","NC_EVARMETA","NC_ENOCOMPOUND","NC_EATTEXISTS","NC_ENOTNC4","NC_ESTRICTNC3","NC_ENOTNC3","NC_ENOPAR","NC_EPARINIT","NC_EBADGRPID","NC_EBADTYPID","NC_ETYPDEFINED","NC_EBADFIELD","NC_EBADCLASS","NC_EMAPTYPE","NC_ELATEFILL","NC_ELATEDEF","NC_EDIMSCALE","NC_ENOGRP","NC_ESTORAGE","NC_EBADCHUNK","NC_ENOTBUILT","NC_EDISKLESS","NC_ECANTEXTEND","NC_EMPI","NC4_LAST_ERROR","DIM_WITHOUT_VARIABLE","NC_HAVE_NEW_CHUNKING_API","NC_EURL","NC_ECONSTRAINT","FILL_LONG","MAX_NC_DIMS","MAX_NC_ATTRS","MAX_NC_VARS","MAX_NC_NAME","MAX_VAR_DIMS","NC_ENTOOL","NC_EXDR","NC_SYSERR","NC_FATAL","NC_VERBOSE","from","into","borrow","borrow_mut","try_from","try_into","type_id"],"q":["netcdf_sysdi":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"nc_vlen_t"]]},\
"noisy_float":{"doc":"This crate contains floating point types that panic if …","t":[0,3,3,0,6,6,6,6,5,5,5,5,11,11,11,11,11,11,11,11,0,8,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["checkers","NumChecker","FiniteChecker","types","N32","N64","R32","R64","n32","n64","r32","r64","unchecked_new","const_raw","unchecked_new","const_raw","unchecked_new","const_raw","unchecked_new","const_raw","prelude","FloatChecker","check","assert","NoisyFloat","new","try_new","borrowed","try_borrowed","borrowed_mut","try_borrowed_mut","from_f32","from_f64","raw","min","max","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","min_value","min_positive_value","epsilon","max_value","floor","ceil","round","trunc","fract","abs","signum","is_sign_positive","is_sign_negative","mul_add","recip","powi","powf","sqrt","exp","exp2","ln","log","log2","log10","to_degrees","to_radians","max","min","abs_sub","cbrt","hypot","sin","cos","tan","asin","acos","atan","atan2","sin_cos","exp_m1","ln_1p","sinh","cosh","tanh","asinh","acosh","atanh","to_owned","clone_into","to_string","assert","check","assert","check","fmt","fmt","fmt","fmt","div","div","div","div","rem","rem","rem","rem","sub","sub","sub","sub","eq","eq","cmp","partial_cmp","lt","le","gt","ge","partial_cmp","lt","le","gt","ge","add","add","add","add","mul","mul","mul","mul","neg","add_assign","add_assign","add_assign","add_assign","sub_assign","sub_assign","sub_assign","sub_assign","mul_assign","mul_assign","mul_assign","mul_assign","div_assign","div_assign","div_assign","div_assign","rem_assign","rem_assign","rem_assign","rem_assign","hash","hash","try_from","try_from","sum","sum","product","product","from","as_ref","clone","default","min_value","max_value","to_i64","to_u64","to_isize","to_i8","to_i16","to_i32","to_usize","to_u8","to_u16","to_u32","to_f32","to_f64","from_isize","from_i8","from_i16","from_i32","from_i64","from_i128","from_usize","from_u8","from_u16","from_u32","from_u64","from_u128","from_f32","from_f64","from","nan","infinity","neg_infinity","neg_zero","min_value","min_positive_value","max_value","is_nan","is_infinite","is_finite","is_normal","classify","floor","ceil","round","trunc","fract","abs","signum","is_sign_positive","is_sign_negative","mul_add","recip","powi","powf","sqrt","exp","exp2","ln","log","log2","log10","max","min","abs_sub","cbrt","hypot","sin","cos","tan","asin","acos","atan","atan2","sin_cos","exp_m1","ln_1p","sinh","cosh","tanh","asinh","acosh","atanh","integer_decode","epsilon","to_degrees","to_radians","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","LN_10","LN_2","LOG10_E","LOG2_E","PI","SQRT_2","from_str_radix","zero","is_zero","one","abs","abs_sub","signum","is_positive","is_negative","unchecked_new","const_raw","unchecked_new","const_raw","unchecked_new","const_raw","unchecked_new","const_raw"],"q":["noisy_float","noisy_float::checkers","","noisy_float","noisy_float::types","","","","","","","","","","","","","","","","noisy_float","","","","","","","","","","","","","","","","noisy_float::checkers","","","","","","","","","","","","","","noisy_float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","noisy_float::checkers","","","","noisy_floatd":["Standard implementations of <code>FloatChecker</code>.","A <code>FloatChecker</code> that considers all values valid except NaN.","A <code>FloatChecker</code> that considers all values valid except NaN …","Standard definitions of <code>NoisyFloat</code>.","A floating point number behaving like <code>f32</code> that does not …","A floating point number behaving like <code>f64</code> that does not …","A floating point number behaving like <code>f32</code> that does not …","A floating point number behaving like <code>f64</code> that does not …","Shorthand for <code>N32::new(value)</code>.","Shorthand for <code>N64::new(value)</code>.","Shorthand for <code>R32::new(value)</code>.","Shorthand for <code>R64::new(value)</code>.","A const constructor that does not check whether <code>value</code> is …","A const function that returns the underlying float value.","A const constructor that does not check whether <code>value</code> is …","A const function that returns the underlying float value.","A const constructor that does not check whether <code>value</code> is …","A const function that returns the underlying float value.","A const constructor that does not check whether <code>value</code> is …","A const function that returns the underlying float value.","Prelude for the <code>noisy_float</code> crate.","Trait for checking whether a floating point number is <em>…","Returns <code>true</code> if (and only if) the given floating point …","A function that may panic if the floating point number is <em>…","A floating point number with a restricted set of legal …","Constructs a <code>NoisyFloat</code> with the given value.","Tries to construct a <code>NoisyFloat</code> with the given value.","Converts the value in-place to a reference to a <code>NoisyFloat</code>…","Tries to convert the value in-place to a reference to a …","Converts the value in-place to a mutable reference to a …","Tries to convert the value in-place to a mutable …","Constructs a <code>NoisyFloat</code> with the given <code>f32</code> value.","Constructs a <code>NoisyFloat</code> with the given <code>f64</code> value.","Returns the underlying float value.","Compares and returns the minimum of two values.","Compares and returns the maximum of two valuesconst constructor that does not check whether <code>value</code> is …","A const function that returns the underlying float value.","A const constructor that does not check whether <code>value</code> is …","A const function that returns the underlying float value.","A const constructor that does not check whether <code>value</code> is …","A const function that returns the underlying float value.","A const constructor that does not check whether <code>value</code> is …","A const function that returns the underlying float value."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,3,3,4,4,0,0,5,5,0,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,8,8,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],"f":[null,null,null,null,null,null,null,null,[[["f32",15]],["n32",6]],[[["f64",15]],["n64",6]],[[["f32",15]],["r32",6]],[[["f64",15]],["r64",6]],[[["f32",15]]],[[],["f32",15]],[[["f64",15]]],[[],["f64",15]],[[["f32",15]]],[[],["f32",15]],[[["f64",15]]],[[],["f64",15]],null,null,[[],["bool",15]],[[]],null,[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[["f32",15]]],[[["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["ordering",4]],[[],[["ordering",4],["option",4]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["ordering",4],["option",4]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15]],["result",4]],[[["f32",15]],["result",4]],[[]],[[]],[[]],[[]],[[["noisyfloat",3],["finitechecker",3]]],[[]],[[]],[[]],[[]],[[]],[[],[["i64",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["isize",15],["option",4]]],[[],[["option",4],["i8",15]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["usize",15],["option",4]]],[[],[["option",4],["u8",15]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["f32",15]]],[[],[["f64",15],["option",4]]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i128",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["toprimitive",8]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15],["str",15]],["result",4]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["f32",15]]],[[],["f32",15]],[[["f64",15]]],[[],["f64",15]],[[["f32",15]]],[[],["f32",15]],[[["f64",15]]],[[],["f64",15]]],"p":[[6,"N32"],[6,"N64"],[6,"R32"],[6,"R64"],[8,"FloatChecker"],[3,"NoisyFloat"],[3,"NumChecker"],[3,"FiniteChecker"]]},\
"num_complex":{"doc":"Complex numbers.","t":[3,12,12,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Complex","re","im","Complex32","Complex64","new","i","norm_sqr","scale","unscale","powu","conj","inv","powi","l1_norm","is_nan","is_infinite","is_finite","is_normal","ParseComplexError","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_string","fmt","fmt","fmt","fmt","fmt","fmt","div","div","div","div","rem","rem","rem","rem","sub","sub","sub","sub","eq","ne","eq","ne","add","add","add","add","mul","mul","mul","mul","neg","add_assign","add_assign","add_assign","add_assign","sub_assign","sub_assign","sub_assign","sub_assign","mul_assign","mul_assign","mul_assign","mul_assign","div_assign","div_assign","div_assign","div_assign","rem_assign","rem_assign","rem_assign","rem_assign","hash","from_str","fmt","fmt","fmt","fmt","sum","sum","product","product","from","from","clone","default","to_usize","to_isize","to_u8","to_u16","to_u32","to_u64","to_i8","to_i16","to_i32","to_i64","to_u128","to_i128","to_f32","to_f64","from_usize","from_isize","from_u8","from_u16","from_u32","from_u64","from_i8","from_i16","from_i32","from_i64","from_u128","from_i128","from_f32","from_f64","from","as_","from_str_radix","zero","is_zero","set_zero","one","is_one","set_one","inv","mul_add","mul_add_assign","mul_add_assign"],"q":["num_complex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A complex number in Cartesian form.","Real portion of the complex number","Imaginary portion of the complex number","","","Create a new Complex","Returns imaginary unit","Returns the square of the norm (since <code>T</code> doesn’t …","Multiplies <code>self</code> by the scalar <code>t</code>.","Divides <code>self</code> by the scalar <code>t</code>.","Raises <code>self</code> to an unsigned integer power.","Returns the complex conjugate. i.e. <code>re - i im</code>","Returns <code>1/self</code>","Raises <code>self</code> to a signed integer power.","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance…","Checks if the given complex number is NaN","Checks if the given complex number is infinite","Checks if the given complex number is finite","Checks if the given complex number is normal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","","",""],"i":[0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[]],[[]],[[["i32",15]]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["string",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["complex",3]]],[[]],[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[["complex",3]],["bool",15]],[[["complex",3]],["bool",15]],[[["parsecomplexerror",3]],["bool",15]],[[["parsecomplexerror",3]],["bool",15]],[[["complex",3]]],[[]],[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[],["complex",3]],[[],[["usize",15],["option",4]]],[[],[["isize",15],["option",4]]],[[],[["option",4],["u8",15]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["u64",15],["option",4]]],[[],[["option",4],["i8",15]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["i64",15],["option",4]]],[[],[["option",4],["u128",15]]],[[],[["i128",15],["option",4]]],[[],[["option",4],["f32",15]]],[[],[["f64",15],["option",4]]],[[["usize",15]],["option",4]],[[["isize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["u128",15]],["option",4]],[[["i128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["toprimitive",8]],["option",4]],[[]],[[["u32",15],["str",15]],["result",4]],[[]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[["complex",3]],["complex",3]],[[["complex",3]]],[[["complex",3]]]],"p":[[3,"Complex"],[3,"ParseComplexError"]]},\
"num_cpus":{"doc":"A crate with utilities to determine the number of CPUs …","t":[5,5],"n":["get","get_physical"],"q":["num_cpus",""],"d":["Returns the number of available CPUs of the current …","Returns the number of physical cores of the current …"],"i":[0,0],"f":[[[],["usize",15]],[[],["usize",15]]],"p":[]},\
"num_integer":{"doc":"Integer trait and functions.","t":[8,10,11,11,5,5,5,8,10,10,5,5,8,10,10,11,10,10,11,11,11,10,10,10,10,10,11,11,11,3,12,12,12,5,5,5,5,5,5,5,5,3,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Roots","nth_root","sqrt","cbrt","cbrt","nth_root","sqrt","Average","average_ceil","average_floor","average_ceil","average_floor","Integer","div_floor","mod_floor","div_ceil","gcd","lcm","gcd_lcm","extended_gcd","extended_gcd_lcm","divides","is_multiple_of","is_even","is_odd","div_rem","div_mod_floor","next_multiple_of","prev_multiple_of","ExtendedGcd","gcd","x","y","div_rem","div_floor","mod_floor","div_mod_floor","div_ceil","gcd","lcm","gcd_lcm","IterBinomial","new","binomial","multinomial","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","fmt","eq","ne","next","clone","sqrt","cbrt"],"q":["num_integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Provides methods to compute an integer’s square root, …","Returns the truncated principal <code>n</code>th root of an integer –…","Returns the truncated principal square root of an integer …","Returns the truncated principal cube root of an integer …","Returns the truncated principal cube root of an integer …","Returns the truncated principal <code>n</code>th root of an integer –…","Returns the truncated principal square root of an integer …","Provides methods to compute the average of two integers, …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>…","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","","Floored integer division.","Floored integer modulo, satisfying:","Ceiled integer division.","Greatest Common Divisor (GCD).","Lowest Common Multiple (LCM).","Greatest Common Divisor (GCD) and Lowest Common Multiple …","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","Deprecated, use <code>is_multiple_of</code> instead.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is even.","Returns <code>true</code> if the number is odd.","Simultaneous truncated integer division and modulus. …","Simultaneous floored integer division and modulus. …","Rounds up to nearest multiple of argument.","Rounds down to nearest multiple of argument.","Greatest common divisor and Bézout coefficients","","","","Simultaneous integer division and modulus","Floored integer division","Floored integer modulus","Simultaneous floored integer division and modulus","Ceiled integer division","Calculates the Greatest Common Divisor (GCD) of the …","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Greatest Common Divisor (GCD) and Lowest …","An iterator over binomial coefficients.","For a given n, iterate over all binomial coefficients …","Calculate the binomial coefficient.","Calculate the multinomial coefficient.","","","","","","","","","","","","","","","","","","","","","","","Returns the truncated principal square root of an integer …","Returns the truncated principal cube root of an integer …"],"i":[0,1,1,1,0,0,0,0,2,2,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,4,4,4,0,0,0,0,0,0,0,0,0,5,0,0,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,4,4,4,5,4,1,1],"f":[null,[[["u32",15]]],[[]],[[]],[[["roots",8]],["roots",8]],[[["u32",15],["roots",8]],["roots",8]],[[["roots",8]],["roots",8]],null,[[]],[[]],[[["average",8]],["average",8]],[[["average",8]],["average",8]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["extendedgcd",3]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],null,null,null,null,[[["integer",8]]],[[["integer",8]],["integer",8]],[[["integer",8]],["integer",8]],[[["integer",8]]],[[["integer",8]],["integer",8]],[[["integer",8]],["integer",8]],[[["integer",8]],["integer",8]],[[["integer",8]]],null,[[],["iterbinomial",3]],[[["clone",8],["integer",8]],[["clone",8],["integer",8]]],[[],[["clone",8],["integer",8]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[["extendedgcd",3]],["bool",15]],[[["extendedgcd",3]],["bool",15]],[[],["option",4]],[[],["extendedgcd",3]],[[]],[[]]],"p":[[8,"Roots"],[8,"Average"],[8,"Integer"],[3,"ExtendedGcd"],[3,"IterBinomial"]]},\
"num_rational":{"doc":"Rational numbers","tn":["Ratio","Rational","Rational32","Rational64","new_raw","numer","denom","new","from_integer","to_integer","is_integer","reduced","recip","floor","ceil","round","trunc","fract","pow","ParseRatioError","approximate_float","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","fmt","fmt","fmt","fmt","fmt","fmt","div","div","div","div","rem","rem","rem","rem","sub","sub","sub","sub","eq","eq","ne","cmp","partial_cmp","add","add","add","add","mul","mul","mul","mul","neg","add_assign","add_assign","add_assign","add_assign","sub_assign","sub_assign","sub_assign","sub_assign","mul_assign","mul_assign","mul_assign","mul_assign","div_assign","div_assign","div_assign","div_assign","rem_assign","rem_assign","rem_assign","rem_assign","hash","from_str","fmt","fmt","fmt","fmt","sum","sum","product","product","from","from","into","clone","clone","to_i64","to_i128","to_u64","to_u128","to_f64","to_i64","to_i128","to_u64","to_u128","to_f64","to_i64","to_i128","to_u64","to_u128","to_f64","to_i64","to_i128","to_u64","to_u128","to_f64","to_i64","to_i128","to_u64","to_u128","to_f64","to_i64","to_i128","to_u64","to_u128","to_f64","to_i64","to_i128","to_u64","to_u128","to_f64","to_i64","to_i128","to_u64","to_u128","to_f64","to_i64","to_i128","to_u64","to_u128","to_f64","to_i64","to_i128","to_u64","to_u128","to_f64","from_i64","from_i128","from_u64","from_u128","from_f32","from_f64","from_i64","from_i128","from_u64","from_u128","from_f32","from_f64","from_i64","from_i128","from_u64","from_u128","from_f32","from_f64","from_i64","from_i128","from_u64","from_u128","from_f32","from_f64","from_i64","from_i128","from_u64","from_u128","from_f32","from_f64","from_i64","from_i128","from_u64","from_u128","from_f32","from_f64","from_i64","from_i128","from_u64","from_u128","from_f32","from_f64","from_i64","from_i128","from_u64","from_u128","from_f32","from_f64","from_i64","from_i128","from_u64","from_u128","from_f32","from_f64","from_i64","from_i128","from_u64","from_u128","from_f32","from_f64","from_i64","from_i128","from_u64","from_u128","from_f32","from_f64","from_i64","from_i128","from_u64","from_u128","from_f32","from_f64","from_str_radix","zero","is_zero","set_zero","one","is_one","set_one","checked_add","checked_sub","checked_mul","checked_div","inv","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","abs","abs_sub","signum","is_positive","is_negative"],"q":["num_rationald":["Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","Gets an immutable reference to the denominator.","Creates a new <code>Ratio</code>.","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Converts to an integer, rounding towards zero.","Returns true if the rational number is an integer …","Returns a reduced copy of self.","Returns the reciprocal.","Rounds towards minus infinity.","Rounds towards plus infinity.","Rounds to the nearest integer. Rounds half-way cases away …","Rounds towards zero.","Returns the fractional part of a number, with division …","Raises the <code>Ratio</code> to the power of an exponent.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses <code>numer/denom</code> or just <code>numer</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,[[],["ratio",3]],[[]],[[]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[],["bool",15]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[["i32",15]],["ratio",3]],null,[[["floatcore",8],["numcast",8]],[["ratio",3],["option",4]]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[],["bool",15]],[[["parseratioerror",3]],["bool",15]],[[["parseratioerror",3]],["bool",15]],[[],["ordering",4]],[[],[["option",4],["ordering",4]]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[],["ratio",3]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[]],[[["ratio",3]]],[[]],[[]],[[["str",15]],[["ratio",3],["parseratioerror",3],["result",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["ratio",3]],[[],["ratio",3]],[[]],[[],["ratio",3]],[[],["parseratioerror",3]],[[],[["i64",15],["option",4]]],[[],[["i128",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["option",4],["u128",15]]],[[],[["f64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i128",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["option",4],["u128",15]]],[[],[["f64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i128",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["option",4],["u128",15]]],[[],[["f64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i128",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["option",4],["u128",15]]],[[],[["f64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i128",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["option",4],["u128",15]]],[[],[["f64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i128",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["option",4],["u128",15]]],[[],[["f64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i128",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["option",4],["u128",15]]],[[],[["f64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i128",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["option",4],["u128",15]]],[[],[["f64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i128",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["option",4],["u128",15]]],[[],[["f64",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["i128",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["option",4],["u128",15]]],[[],[["f64",15],["option",4]]],[[["i64",15]],["option",4]],[[["i128",15]],["option",4]],[[["u64",15]],["option",4]],[[["u128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i128",15]],["option",4]],[[["u64",15]],["option",4]],[[["u128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i128",15]],["option",4]],[[["u64",15]],["option",4]],[[["u128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i128",15]],["option",4]],[[["u64",15]],["option",4]],[[["u128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i128",15]],["option",4]],[[["u64",15]],["option",4]],[[["u128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i128",15]],["option",4]],[[["u64",15]],["option",4]],[[["u128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i128",15]],["option",4]],[[["u64",15]],["option",4]],[[["u128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i128",15]],["option",4]],[[["u64",15]],["option",4]],[[["u128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i128",15]],["option",4]],[[["u64",15]],["option",4]],[[["u128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i128",15]],["option",4]],[[["u64",15]],["option",4]],[[["u128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i128",15]],["option",4]],[[["u64",15]],["option",4]],[[["u128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["i128",15]],["option",4]],[[["u64",15]],["option",4]],[[["u128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["u32",15],["str",15]],[["ratio",3],["parseratioerror",3],["result",4]]],[[],["ratio",3]],[[],["bool",15]],[[]],[[],["ratio",3]],[[],["bool",15]],[[]],[[["ratio",3]],[["ratio",3],["option",4]]],[[["ratio",3]],[["ratio",3],["option",4]]],[[["ratio",3]],[["ratio",3],["option",4]]],[[["ratio",3]],[["ratio",3],["option",4]]],[[],["ratio",3]],[[["u8",15]],["ratio",3]],[[["u8",15]],["ratio",3]],[[["u16",15]],["ratio",3]],[[["u16",15]],["ratio",3]],[[["u32",15]],["ratio",3]],[[["u32",15]],["ratio",3]],[[["u64",15]],["ratio",3]],[[["u64",15]],["ratio",3]],[[["u128",15]],["ratio",3]],[[["u128",15]],["ratio",3]],[[["usize",15]],["ratio",3]],[[["usize",15]],["ratio",3]],[[["i8",15]],["ratio",3]],[[["i8",15]],["ratio",3]],[[["i16",15]],["ratio",3]],[[["i16",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["i32",15]],["ratio",3]],[[["i64",15]],["ratio",3]],[[["i64",15]],["ratio",3]],[[["i128",15]],["ratio",3]],[[["i128",15]],["ratio",3]],[[["isize",15]],["ratio",3]],[[["isize",15]],["ratio",3]],[[],["ratio",3]],[[["ratio",3]],["ratio",3]],[[],["ratio",3]],[[],["bool",15]],[[],["bool",15]]],"p":[[3,"Ratio"],[3,"ParseRatioError"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":[0,8,10,10,0,8,11,11,11,11,10,11,11,11,11,11,10,11,11,11,8,11,11,11,11,10,11,11,11,11,11,10,11,11,11,5,8,10,8,10,0,8,10,10,10,10,10,10,10,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,8,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,0,8,10,11,10,8,10,11,11,5,5,0,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,0,8,16,10,0,8,16,10,8,10,0,8,10,8,10,8,10,0,8,10,10,8,10,8,10,8,10,0,8,10,8,10,8,10,8,10,8,10,8,10,0,8,16,10,5,5,0,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,8,10,10,10,10,10,5,5,5,8,8,16,10,8,8,8,8,8,8,4,13,13,3,12,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["bounds","Bounded","min_value","max_value","cast","ToPrimitive","to_isize","to_i8","to_i16","to_i32","to_i64","to_i128","to_usize","to_u8","to_u16","to_u32","to_u64","to_u128","to_f32","to_f64","FromPrimitive","from_isize","from_i8","from_i16","from_i32","from_i64","from_i128","from_usize","from_u8","from_u16","from_u32","from_u64","from_u128","from_f32","from_f64","cast","NumCast","from","AsPrimitive","as_","float","FloatCore","infinity","neg_infinity","nan","neg_zero","min_value","min_positive_value","epsilon","max_value","is_nan","is_infinite","is_finite","is_normal","classify","floor","ceil","round","trunc","fract","abs","signum","is_sign_positive","is_sign_negative","min","max","recip","powi","to_degrees","to_radians","integer_decode","Float","nan","infinity","neg_infinity","neg_zero","min_value","min_positive_value","epsilon","max_value","is_nan","is_infinite","is_finite","is_normal","classify","floor","ceil","round","trunc","fract","abs","signum","is_sign_positive","is_sign_negative","mul_add","recip","powi","powf","sqrt","exp","exp2","ln","log","log2","log10","to_degrees","to_radians","max","min","abs_sub","cbrt","hypot","sin","cos","tan","asin","acos","atan","atan2","sin_cos","exp_m1","ln_1p","sinh","cosh","tanh","asinh","acosh","atanh","integer_decode","FloatConst","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","LN_10","LN_2","LOG10_E","LOG2_E","PI","SQRT_2","TAU","LOG10_2","LOG2_10","identities","Zero","zero","set_zero","is_zero","One","one","set_one","is_one","zero","one","int","PrimInt","count_ones","count_zeros","leading_zeros","trailing_zeros","rotate_left","rotate_right","signed_shl","signed_shr","unsigned_shl","unsigned_shr","swap_bytes","from_be","from_le","to_be","to_le","pow","ops","checked","CheckedAdd","checked_add","CheckedSub","checked_sub","CheckedMul","checked_mul","CheckedDiv","checked_div","CheckedRem","checked_rem","CheckedNeg","checked_neg","CheckedShl","checked_shl","CheckedShr","checked_shr","inv","Inv","Output","inv","mul_add","MulAdd","Output","mul_add","MulAddAssign","mul_add_assign","overflowing","OverflowingAdd","overflowing_add","OverflowingSub","overflowing_sub","OverflowingMul","overflowing_mul","saturating","Saturating","saturating_add","saturating_sub","SaturatingAdd","saturating_add","SaturatingSub","saturating_sub","SaturatingMul","saturating_mul","wrapping","WrappingAdd","wrapping_add","WrappingSub","wrapping_sub","WrappingMul","wrapping_mul","WrappingNeg","wrapping_neg","WrappingShl","wrapping_shl","WrappingShr","wrapping_shr","pow","Pow","Output","pow","pow","checked_pow","real","Real","min_value","min_positive_value","epsilon","max_value","floor","ceil","round","trunc","fract","abs","signum","is_sign_positive","is_sign_negative","mul_add","recip","powi","powf","sqrt","exp","exp2","ln","log","log2","log10","to_degrees","to_radians","max","min","abs_sub","cbrt","hypot","sin","cos","tan","asin","acos","atan","atan2","sin_cos","exp_m1","ln_1p","sinh","cosh","tanh","asinh","acosh","atanh","sign","Signed","abs","abs_sub","signum","is_positive","is_negative","abs","abs_sub","signum","Unsigned","Num","FromStrRadixErr","from_str_radix","NumOps","NumRef","RefNum","NumAssignOps","NumAssign","NumAssignRef","FloatErrorKind","Empty","Invalid","ParseFloatError","kind","clamp","clamp_min","clamp_max","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_string","fmt","fmt","fmt"],"q":["num_traits","num_traits::bounds","","","num_traits","num_traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits","num_traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits","num_traits::identities","","","","","","","","","","num_traits","num_traits::int","","","","","","","","","","","","","","","","","num_traits","num_traits::ops","num_traits::ops::checked","","","","","","","","","","","","","","","","num_traits::ops","num_traits::ops::inv","","","num_traits::ops","num_traits::ops::mul_add","","","","","num_traits::ops","num_traits::ops::overflowing","","","","","","num_traits::ops","num_traits::ops::saturating","","","","","","","","","num_traits::ops","num_traits::ops::wrapping","","","","","","","","","","","","num_traits","num_traits::pow","","","","","num_traits","num_traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits","num_traits::sign","","","","","","","","","","num_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Numbers which have upper and lower bounds","returns the smallest finite number this type can represent","returns the largest finite number this type can represent","","A generic trait for converting a value to a number.","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","A generic trait for converting a number to a value.","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts a <code>usize</code> to return an optional value of this …","Converts an <code>u8</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u128</code> to return an optional value of this …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Cast from one machine scalar to another.","An interface for casting between machine scalars.","Creates a number from another value that can be converted …","A generic interface for casting between machine scalars …","Convert a value to another, using the <code>as</code> operator.","","Generic trait for floating point numbers that works with …","Returns positive infinity.","Returns negative infinity.","Returns NaN.","Returns <code>-0.0</code>.","Returns the smallest finite value that this type can …","Returns the smallest positive, normalized value that this …","Returns epsilon, a small positive value.","Returns the largest finite value that this type can …","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns the floating point category of the number. If …","Returns the largest integer less than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the nearest integer to a number. Round half-way …","Return the integer part of a number.","Returns the fractional part of a number.","Computes the absolute value of <code>self</code>. Returns …","Returns a number that represents the sign of <code>self</code>.","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns the minimum of the two numbers.","Returns the maximum of the two numbers.","Returns the reciprocal (multiplicative inverse) of the …","Raise a number to an integer power.","Converts to degrees, assuming the number is in radians.","Converts to radians, assuming the number is in degrees.","Returns the mantissa, base 2 exponent, and sign as …","Generic trait for floating point numbers","Returns the <code>NaN</code> value.","Returns the infinite value.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns the smallest finite value that this type can …","Returns the smallest positive, normalized value that this …","Returns epsilon, a small positive value.","Returns the largest finite value that this type can …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns the floating point category of the number. If …","Returns the largest integer less than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the nearest integer to a number. Round half-way …","Return the integer part of a number.","Returns the fractional part of a number.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Returns a number that represents the sign of <code>self</code>.","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Raise a number to an integer power.","Raise a number to a floating point power.","Take the square root of a number.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns the natural logarithm of the number.","Returns the logarithm of the number with respect to an …","Returns the base 2 logarithm of the number.","Returns the base 10 logarithm of the number.","Converts radians to degrees.","Converts degrees to radians.","Returns the maximum of the two numbers.","Returns the minimum of the two numbers.","The positive difference of two numbers.","Take the cubic root of a number.","Calculate the length of the hypotenuse of a right-angle …","Computes the sine of a number (in radians).","Computes the cosine of a number (in radians).","Computes the tangent of a number (in radians).","Computes the arcsine of a number. Return value is in …","Computes the arccosine of a number. Return value is in …","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Simultaneously computes the sine and cosine of the …","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Hyperbolic sine function.","Hyperbolic cosine function.","Hyperbolic tangent function.","Inverse hyperbolic sine function.","Inverse hyperbolic cosine function.","Inverse hyperbolic tangent function.","Returns the mantissa, base 2 exponent, and sign as …","","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Return <code>log10(2.0)</code>.","Return <code>log2(10.0)</code>.","","Defines an additive identity element for <code>Self</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Defines a multiplicative identity element for <code>Self</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns the additive identity, <code>0</code>.","Returns the multiplicative identity, <code>1</code>.","","Generic trait for primitive integers.","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of leading zeros in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Raises self to the power of <code>exp</code>, using exponentiation by …","","","Performs addition that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Performs subtraction that returns <code>None</code> instead of …","Subtracts two numbers, checking for underflow. If …","Performs multiplication that returns <code>None</code> instead of …","Multiplies two numbers, checking for underflow or …","Performs division that returns <code>None</code> instead of panicking …","Divides two numbers, checking for underflow, overflow and …","Performs an integral remainder that returns <code>None</code> instead …","Finds the remainder of dividing two numbers, checking for …","Performs negation that returns <code>None</code> if the result can’t …","Negates a number, returning <code>None</code> for results that can’t …","Performs a left shift that returns <code>None</code> on shifts larger …","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …","Performs a right shift that returns <code>None</code> on shifts larger …","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …","","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","The fused multiply-add assignment operation.","Performs the fused multiply-add operation.","","Performs addition with a flag for overflow.","Returns a tuple of the sum along with a boolean …","Performs substraction with a flag for overflow.","Returns a tuple of the difference along with a boolean …","Performs multiplication with a flag for overflow.","Returns a tuple of the product along with a boolean …","","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Saturating addition operator. Returns a+b, saturating at …","Saturating subtraction operator. Returns a-b, saturating …","Performs addition that saturates at the numeric bounds …","Saturating addition. Computes <code>self + other</code>, saturating at …","Performs subtraction that saturates at the numeric bounds …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs multiplication that saturates at the numeric …","Saturating multiplication. Computes <code>self * other</code>, …","","Performs addition that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Performs subtraction that wraps around on overflow.","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","Performs multiplication that wraps around on overflow.","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Performs a negation that does not panic.","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Performs a left shift that does not panic.","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …","Performs a right shift that does not panic.","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …","","Binary operator for raising a value to a power.","The result after applying the operator.","Returns <code>self</code> to the power <code>rhs</code>.","Raises a value to the power of exp, using exponentiation …","Raises a value to the power of exp, returning <code>None</code> if an …","","A trait for real number types that do not necessarily have…","Returns the smallest finite value that this type can …","Returns the smallest positive, normalized value that this …","Returns epsilon, a small positive value.","Returns the largest finite value that this type can …","Returns the largest integer less than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the nearest integer to a number. Round half-way …","Return the integer part of a number.","Returns the fractional part of a number.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Returns a number that represents the sign of <code>self</code>.","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Raise a number to an integer power.","Raise a number to a real number power.","Take the square root of a number.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns the natural logarithm of the number.","Returns the logarithm of the number with respect to an …","Returns the base 2 logarithm of the number.","Returns the base 10 logarithm of the number.","Converts radians to degrees.","Converts degrees to radians.","Returns the maximum of the two numbers.","Returns the minimum of the two numbers.","The positive difference of two numbers.","Take the cubic root of a number.","Calculate the length of the hypotenuse of a right-angle …","Computes the sine of a number (in radians).","Computes the cosine of a number (in radians).","Computes the tangent of a number (in radians).","Computes the arcsine of a number. Return value is in …","Computes the arccosine of a number. Return value is in …","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Simultaneously computes the sine and cosine of the …","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Hyperbolic sine function.","Hyperbolic cosine function.","Hyperbolic tangent function.","Inverse hyperbolic sine function.","Inverse hyperbolic cosine function.","Inverse hyperbolic tangent function.","","Useful functions for signed numbers (i.e. numbers that …","Computes the absolute value.","The positive difference of two numbers.","Returns the sign of the number.","Returns true if the number is positive and false if the …","Returns true if the number is negative and false if the …","Computes the absolute value.","The positive difference of two numbers.","Returns the sign of the number.","A trait for values which cannot be negative","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…","","Convert from a string and radix (typically <code>2..=36</code>).","The trait for types implementing basic numeric operations","The trait for <code>Num</code> types which also implement numeric …","The trait for references which implement numeric …","The trait for types implementing numeric assignment …","The trait for <code>Num</code> types which also implement assignment …","The trait for <code>NumAssign</code> types which also implement …","","","","","","A value bounded by a minimum and a maximum","A value bounded by a minimum value","A value bounded by a maximum value","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,4,0,5,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,9,9,9,0,10,10,10,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,0,20,20,0,0,21,21,0,22,0,0,23,0,24,0,25,0,0,26,26,0,27,0,28,0,29,0,0,30,0,31,0,32,0,33,0,34,0,35,0,0,36,36,0,0,0,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,38,38,38,38,38,0,0,0,0,0,39,39,0,0,0,0,0,0,0,40,40,0,41,0,0,0,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,40,41,41],"f":[null,null,[[]],[[]],null,null,[[],[["isize",15],["option",4]]],[[],[["option",4],["i8",15]]],[[],[["i16",15],["option",4]]],[[],[["option",4],["i32",15]]],[[],[["i64",15],["option",4]]],[[],[["i128",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["option",4],["u8",15]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["u64",15],["option",4]]],[[],[["option",4],["u128",15]]],[[],[["option",4],["f32",15]]],[[],[["f64",15],["option",4]]],null,[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i128",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["numcast",8]],[["option",4],["numcast",8]]],null,[[["toprimitive",8]],["option",4]],null,[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[],["bool",15]],null,[[]],[[]],[[],["bool",15]],[[],["zero",8]],[[],["one",8]],null,null,[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],null,null,null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[["u32",15]],["option",4]],null,[[["u32",15]],["option",4]],null,null,null,[[]],null,null,null,[[]],null,[[]],null,null,[[]],null,[[]],null,[[]],null,null,[[]],[[]],null,[[]],null,[[]],null,[[]],null,null,[[]],null,[[]],null,[[]],null,[[]],null,[[["u32",15]]],null,[[["u32",15]]],null,null,null,[[]],[[["usize",15],["clone",8],["one",8],["mul",8]],[["clone",8],["one",8],["mul",8]]],[[["checkedmul",8],["clone",8],["one",8],["usize",15]],[["checkedmul",8],["clone",8],["one",8],["option",4]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["signed",8]],["signed",8]],[[["signed",8]],["signed",8]],[[["signed",8]],["signed",8]],null,null,null,[[["u32",15],["str",15]],["result",4]],null,null,null,null,null,null,null,null,null,null,null,[[["partialord",8]],["partialord",8]],[[["partialord",8]],["partialord",8]],[[["partialord",8]],["partialord",8]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["string",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]]],"p":[[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingSub"],[8,"OverflowingMul"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingSub"],[8,"SaturatingMul"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"]]},\
"number_prefix":{"doc":"This is a library for formatting numbers with numeric …","t":[8,10,10,10,10,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,11,11,8,18,18,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["PrefixNames","upper","caps","lower","symbol","Prefix","Kilo","Mega","Giga","Tera","Peta","Exa","Zetta","Yotta","Kibi","Mibi","Gibi","Tebi","Pebi","Exbi","Zebi","Yobi","NumberPrefix","Standalone","Prefixed","decimal","binary","Amounts","NUM_1000","NUM_1024","is_negative","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","upper","caps","lower","symbol","clone","clone","eq","eq","ne","fmt","fmt","fmt"],"q":["number_prefix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Formatting methods for prefix, for when you want to …","Returns the name in uppercase, such as “KILO”.","Returns the name with the first letter capitalised, such …","Returns the name in lowercase, such as “giga”.","Returns the short-hand symbol, such as “T” (for …","A numeric prefix, either binary or decimal.","","","","","","","","","","","","","","","","","The result of trying to apply a prefix to a …","A <strong>standalone</strong> value is returned when the number is too …","A <strong>prefixed</strong> value <em>is</em> large enough for prefixes. This holds …","Formats the given floating-point number using <strong>decimal</strong> …","Formats the given floating-point number using <strong>binary</strong> …","Traits for floating-point values for both the possible …","The constant representing 1000, for decimal prefixes.","The constant representing 1024, for binary prefixes.","Whether this number is negative. This is used internally.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,0,4,4,4,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,2,2,2,2,2,3,2,3,3,2,3,2],"f":[null,[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,null,null,[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["prefix",4]],[[],["numberprefix",4]],[[["prefix",4]],["bool",15]],[[["numberprefix",4]],["bool",15]],[[["numberprefix",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]]],"p":[[8,"PrefixNames"],[4,"Prefix"],[4,"NumberPrefix"],[8,"Amounts"]]},\
"once_cell":{"doc":"Overview","t":[0,3,11,11,11,11,11,11,11,11,3,11,11,11,0,3,11,11,11,11,11,11,11,11,11,3,11,11,11,0,3,11,11,11,11,11,3,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["unsync","OnceCell","new","get","get_mut","set","get_or_init","get_or_try_init","take","into_inner","Lazy","new","into_value","force","sync","OnceCell","new","get","get_mut","get_unchecked","set","get_or_init","get_or_try_init","take","into_inner","Lazy","new","into_value","force","race","OnceNonZeroUsize","new","get","set","get_or_init","get_or_try_init","OnceBool","new","get","set","get_or_init","get_or_try_init","OnceBox","from","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","drop","from","from","clone","clone","default","default","default","default","default","default","default","eq","eq","deref","deref","deref_mut","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","new","get","set","get_or_init","get_or_try_init"],"q":["once_cell","once_cell::unsync","","","","","","","","","","","","","once_cell","once_cell::sync","","","","","","","","","","","","","","once_cell","once_cell::race","","","","","","","","","","","","","once_cell::unsync","","","","","","","","","","","","","","","","","once_cell::sync","","","","","","","","","","","","","","","","","once_cell::race","","","","","","","","","","","","","","","","","","","","","","once_cell::unsync","once_cell::sync","once_cell::unsync","once_cell::sync","once_cell::unsync","","once_cell::sync","","once_cell::race","","","once_cell::unsync","once_cell::sync","once_cell::unsync","once_cell::sync","once_cell::unsync","once_cell::sync","once_cell::unsync","","once_cell::sync","","once_cell::race","","","","","","",""],"d":["","A cell which can be written to only once. It is not …","Creates a new empty cell.","Gets a reference to the underlying value.","Gets a mutable reference to the underlying value.","Sets the contents of this cell to <code>value</code>.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Takes the value out of this <code>OnceCell</code>, moving it back to …","Consumes the <code>OnceCell</code>, returning the wrapped value.","A value which is initialized on the first access.","Creates a new lazy value with the given initializing …","Consumes this <code>Lazy</code> returning the stored value.","Forces the evaluation of this lazy value and returns a …","","A thread-safe cell which can be written to only once.","Creates a new empty cell.","Gets the reference to the underlying value.","Gets the mutable reference to the underlying value.","Get the reference to the underlying value, without …","Sets the contents of this cell to <code>value</code>.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Takes the value out of this <code>OnceCell</code>, moving it back to …","Consumes the <code>OnceCell</code>, returning the wrapped value. …","A value which is initialized on the first access.","Creates a new lazy value with the given initializing …","Consumes this <code>Lazy</code> returning the stored value.","Forces the evaluation of this lazy value and returns a …","“First one wins” flavor of <code>OnceCell</code>.","A thread-safe cell which can be written to only once.","Creates a new empty cell.","Gets the underlying value.","Sets the contents of this cell to <code>value</code>.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","A thread-safe cell which can be written to only once.","Creates a new empty cell.","Gets the underlying value.","Sets the contents of this cell to <code>value</code>.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","A thread-safe cell which can be written to only once.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new lazy value using <code>Default</code> as the …","","Creates a new lazy value using <code>Default</code> as the …","","","","","","","","","","","","","","","","","Creates a new empty cell.","Gets a reference to the underlying value.","Sets the contents of this cell to <code>value</code>.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …"],"i":[0,0,1,1,1,1,1,1,1,1,0,2,2,2,0,0,3,3,3,3,3,3,3,3,3,0,4,4,4,0,0,5,5,5,5,5,0,6,6,6,6,6,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,7,7,7,7,7,7,7,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,1,3,1,3,1,2,3,4,5,6,7,1,3,2,4,2,4,1,2,3,4,5,6,7,7,7,7,7,7],"f":[null,null,[[],["oncecell",3]],[[],["option",4]],[[],["option",4]],[[],["result",4]],[[]],[[],["result",4]],[[],["option",4]],[[],["option",4]],null,[[],["lazy",3]],[[["lazy",3]],["result",4]],[[["lazy",3]]],null,null,[[],["oncecell",3]],[[],["option",4]],[[],["option",4]],[[]],[[],["result",4]],[[]],[[],["result",4]],[[],["option",4]],[[],["option",4]],null,[[],["lazy",3]],[[["lazy",3]],["result",4]],[[["lazy",3]]],null,null,[[],["oncenonzerousize",3]],[[],[["nonzerousize",3],["option",4]]],[[["nonzerousize",3]],["result",4]],[[],["nonzerousize",3]],[[],[["nonzerousize",3],["result",4]]],null,[[],["oncebool",3]],[[],[["option",4],["bool",15]]],[[["bool",15]],["result",4]],[[],["bool",15]],[[],[["bool",15],["result",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["oncecell",3]],[[],["oncecell",3]],[[]],[[],["lazy",3]],[[],["oncecell",3]],[[],["lazy",3]],[[],["oncenonzerousize",3]],[[],["oncebool",3]],[[]],[[],["bool",15]],[[["oncecell",3]],["bool",15]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["oncebox",3]],[[],["option",4]],[[["box",3]],[["box",3],["result",4]]],[[]],[[],["result",4]]],"p":[[3,"OnceCell"],[3,"Lazy"],[3,"OnceCell"],[3,"Lazy"],[3,"OnceNonZeroUsize"],[3,"OnceBool"],[3,"OnceBox"]]},\
"palette":{"doc":"A library that makes linear color calculations and …","t":[0,4,13,13,13,13,13,3,12,12,12,12,4,13,13,13,13,13,13,13,13,13,13,3,12,12,3,12,12,8,16,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,0,3,11,11,11,11,11,11,3,3,11,11,11,11,3,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,5,0,3,12,12,6,6,6,6,6,6,6,8,16,16,0,3,12,12,12,12,6,6,6,6,6,6,6,8,16,16,8,16,16,8,10,10,10,0,4,13,13,13,3,12,12,8,10,11,8,11,10,8,11,10,0,0,3,0,3,3,8,18,3,0,3,3,0,8,18,8,10,10,10,10,10,8,18,11,11,11,11,11,11,11,11,11,8,10,10,0,8,10,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,8,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,3,12,12,8,16,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,12,12,6,3,12,12,12,12,6,3,12,12,12,12,6,3,12,12,12,12,6,3,12,12,12,12,6,3,12,12,12,12,6,3,12,12,12,12,6,8,10,11,10,8,10,10,10,3,8,10,11,11,11,11,11,11,11,11,8,10,11,11,11,11,11,11,11,11,3,3,6,8,10,10,10,8,16,10,8,16,10,11,8,16,10,8,10,10,8,16,10,11,8,16,10,10,8,18,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18],"n":["blend","Equation","Add","Subtract","ReverseSubtract","Min","Max","Equations","color_equation","alpha_equation","color_parameters","alpha_parameters","Parameter","One","Zero","SourceColor","OneMinusSourceColor","DestinationColor","OneMinusDestinationColor","SourceAlpha","OneMinusSourceAlpha","DestinationAlpha","OneMinusDestinationAlpha","Parameters","source","destination","PreAlpha","color","alpha","Blend","Color","into_premultiplied","from_premultiplied","blend","over","inside","outside","atop","xor","plus","multiply","screen","overlay","darken","lighten","dodge","burn","hard_light","soft_light","difference","exclusion","BlendFunction","apply_to","gradient","Gradient","new","with_domain","get","take","slice","domain","Take","Slice","get","take","slice","domain","Range","named","ALICEBLUE","ANTIQUEWHITE","AQUA","AQUAMARINE","AZURE","BEIGE","BISQUE","BLACK","BLANCHEDALMOND","BLUE","BLUEVIOLET","BROWN","BURLYWOOD","CADETBLUE","CHARTREUSE","CHOCOLATE","CORAL","CORNFLOWERBLUE","CORNSILK","CRIMSON","CYAN","DARKBLUE","DARKCYAN","DARKGOLDENROD","DARKGRAY","DARKGREEN","DARKGREY","DARKKHAKI","DARKMAGENTA","DARKOLIVEGREEN","DARKORANGE","DARKORCHID","DARKRED","DARKSALMON","DARKSEAGREEN","DARKSLATEBLUE","DARKSLATEGRAY","DARKSLATEGREY","DARKTURQUOISE","DARKVIOLET","DEEPPINK","DEEPSKYBLUE","DIMGRAY","DIMGREY","DODGERBLUE","FIREBRICK","FLORALWHITE","FORESTGREEN","FUCHSIA","GAINSBORO","GHOSTWHITE","GOLD","GOLDENROD","GRAY","GREY","GREEN","GREENYELLOW","HONEYDEW","HOTPINK","INDIANRED","INDIGO","IVORY","KHAKI","LAVENDER","LAVENDERBLUSH","LAWNGREEN","LEMONCHIFFON","LIGHTBLUE","LIGHTCORAL","LIGHTCYAN","LIGHTGOLDENRODYELLOW","LIGHTGRAY","LIGHTGREEN","LIGHTGREY","LIGHTPINK","LIGHTSALMON","LIGHTSEAGREEN","LIGHTSKYBLUE","LIGHTSLATEGRAY","LIGHTSLATEGREY","LIGHTSTEELBLUE","LIGHTYELLOW","LIME","LIMEGREEN","LINEN","MAGENTA","MAROON","MEDIUMAQUAMARINE","MEDIUMBLUE","MEDIUMORCHID","MEDIUMPURPLE","MEDIUMSEAGREEN","MEDIUMSLATEBLUE","MEDIUMSPRINGGREEN","MEDIUMTURQUOISE","MEDIUMVIOLETRED","MIDNIGHTBLUE","MINTCREAM","MISTYROSE","MOCCASIN","NAVAJOWHITE","NAVY","OLDLACE","OLIVE","OLIVEDRAB","ORANGE","ORANGERED","ORCHID","PALEGOLDENROD","PALEGREEN","PALETURQUOISE","PALEVIOLETRED","PAPAYAWHIP","PEACHPUFF","PERU","PINK","PLUM","POWDERBLUE","PURPLE","REBECCAPURPLE","RED","ROSYBROWN","ROYALBLUE","SADDLEBROWN","SALMON","SANDYBROWN","SEAGREEN","SEASHELL","SIENNA","SILVER","SKYBLUE","SLATEBLUE","SLATEGRAY","SLATEGREY","SNOW","SPRINGGREEN","STEELBLUE","TAN","TEAL","THISTLE","TOMATO","TURQUOISE","VIOLET","WHEAT","WHITE","WHITESMOKE","YELLOW","YELLOWGREEN","from_str","luma","Luma","luma","standard","Lumaa","SrgbLuma","SrgbLumaa","LinLuma","LinLumaa","GammaLuma","GammaLumaa","LumaStandard","WhitePoint","TransferFn","rgb","Rgb","red","green","blue","standard","Rgba","Srgb","Srgba","LinSrgb","LinSrgba","GammaSrgb","GammaSrgba","RgbStandard","Space","TransferFn","RgbSpace","Primaries","WhitePoint","Primaries","red","green","blue","chromatic_adaptation","Method","Bradford","VonKries","XyzScaling","ConeResponseMatrices","ma","inv_ma","TransformMatrix","get_cone_response","generate_transform_matrix","AdaptFrom","adapt_from","adapt_from_using","AdaptInto","adapt_into","adapt_into_using","encoding","srgb","Srgb","gamma","Gamma","GammaFn","Number","VALUE","F2p2","linear","Linear","LinearFn","pixel","RawPixelSized","CHANNELS","RawPixel","channels","from_raw_parts","from_raw_parts_mut","as_ptr","as_mut_ptr","Pixel","CHANNELS","as_raw","as_raw_mut","into_raw","from_raw","from_raw_mut","from_raw_slice","from_raw_slice_mut","into_raw_slice","into_raw_slice_mut","TransferFn","from_linear","into_linear","white_point","WhitePoint","get_xyz","A","B","C","D50","D55","D65","D75","E","F2","F7","F11","D50Degree10","D55Degree10","D65Degree10","D75Degree10","float","Float","nan","infinity","neg_infinity","neg_zero","min_value","min_positive_value","epsilon","max_value","is_nan","is_infinite","is_finite","is_normal","classify","floor","ceil","round","trunc","fract","abs","signum","is_sign_positive","is_sign_negative","mul_add","recip","powi","powf","sqrt","exp","exp2","ln","log","log2","log10","to_degrees","to_radians","max","min","abs_sub","cbrt","hypot","sin","cos","tan","asin","acos","atan","atan2","sin_cos","exp_m1","ln_1p","sinh","cosh","tanh","asinh","acosh","atanh","integer_decode","Alpha","color","alpha","Blend","Color","into_premultiplied","from_premultiplied","blend","over","inside","outside","atop","xor","plus","multiply","screen","overlay","darken","lighten","dodge","burn","hard_light","soft_light","difference","exclusion","Hsl","hue","saturation","lightness","space","Hsla","Hsv","hue","saturation","value","space","Hsva","Hwb","hue","whiteness","blackness","space","Hwba","Lab","l","a","b","white_point","Laba","Lch","l","chroma","hue","white_point","Lcha","Xyz","x","y","z","white_point","Xyza","Yxy","x","y","luma","white_point","Yxya","ConvertFrom","convert_from","convert_unclamped_from","try_convert_from","ConvertInto","convert_into","convert_unclamped_into","try_convert_into","OutOfBounds","FromColor","from_xyz","from_yxy","from_lab","from_lch","from_rgb","from_hsl","from_hsv","from_hwb","from_luma","IntoColor","into_xyz","into_yxy","into_lab","into_lch","into_rgb","into_hsl","into_hsv","into_hwb","into_luma","LabHue","RgbHue","Mat3","Limited","is_valid","clamp","clamp_self","Mix","Scalar","mix","Shade","Scalar","lighten","darken","GetHue","Hue","get_hue","Hue","with_hue","shift_hue","Saturate","Scalar","saturate","desaturate","ComponentWise","Scalar","component_wise","component_wise_self","Component","LIMITED","max_intensity","convert","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_from_using","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_from_using","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_from_using","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_from_using","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_from_using","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_from_using","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_from_using","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_from_using","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_from_using","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","adapt_into_using","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","into_premultiplied","from_premultiplied","into_premultiplied","from_premultiplied","into_premultiplied","from_premultiplied","into_premultiplied","from_premultiplied","apply_to","red","green","blue","get_cone_response","from_xyz","from_rgb","from_hsv","from_hsl","from_xyz","from_rgb","from_hsl","from_hwb","from_hsv","from_xyz","from_hsv","from_hwb","from_xyz","from_lab","from_lch","from_xyz","from_lab","from_lch","from_xyz","from_yxy","from_luma","from_xyz","from_hsv","from_hsl","from_luma","from_rgb","from_xyz","from_rgb","from_lab","from_yxy","from_luma","from_xyz","from_yxy","from_luma","into_xyz","into_yxy","into_luma","into_xyz","into_yxy","into_lab","into_lch","into_rgb","into_hsl","into_hsv","into_hwb","into_luma","into_xyz","into_yxy","into_lab","into_lch","into_rgb","into_hsl","into_hsv","into_luma","into_xyz","into_yxy","into_lab","into_lch","into_rgb","into_hsl","into_hsv","into_luma","into_xyz","into_yxy","into_lab","into_lch","into_rgb","into_hsl","into_hsv","into_luma","into_xyz","into_yxy","into_lab","into_lch","into_rgb","into_hsl","into_hsv","into_luma","into_xyz","into_yxy","into_lab","into_lch","into_rgb","into_hsl","into_hsv","into_luma","into_xyz","into_yxy","into_lab","into_lch","into_rgb","into_hsl","into_hsv","into_luma","into_xyz","into_yxy","into_lab","into_lch","into_rgb","into_hsl","into_hsv","into_luma","into_linear","from_linear","into_linear","from_linear","into_linear","from_linear","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","get_xyz","is_valid","clamp","clamp_self","is_valid","clamp","clamp_self","is_valid","clamp","clamp_self","is_valid","clamp","clamp_self","is_valid","clamp","clamp_self","is_valid","clamp","clamp_self","is_valid","clamp","clamp_self","is_valid","clamp","clamp_self","is_valid","clamp","clamp_self","is_valid","clamp","clamp_self","mix","mix","mix","mix","mix","mix","mix","mix","mix","mix","mix","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","lighten","get_hue","get_hue","get_hue","get_hue","get_hue","get_hue","get_hue","with_hue","shift_hue","with_hue","shift_hue","with_hue","shift_hue","with_hue","shift_hue","with_hue","shift_hue","saturate","saturate","saturate","saturate","component_wise","component_wise_self","component_wise","component_wise_self","component_wise","component_wise_self","component_wise","component_wise_self","component_wise","component_wise_self","component_wise","component_wise_self","component_wise","component_wise_self","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","next","size_hint","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","default","default","default","default","default","default","eq","ne","eq","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","eq","eq","eq","ne","eq","ne","eq","eq","ne","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","deref","deref","deref_mut","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","div","div","div","div","div","div","div","div","div","div","div","div","div","div","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","fmt","fmt","fmt","fmt","fmt","fmt","description","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","default_epsilon","abs_diff_eq","abs_diff_ne","default_epsilon","abs_diff_eq","abs_diff_ne","default_epsilon","abs_diff_eq","abs_diff_ne","default_epsilon","abs_diff_eq","abs_diff_ne","default_epsilon","abs_diff_eq","abs_diff_ne","default_epsilon","abs_diff_eq","abs_diff_ne","default_max_relative","relative_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","default_max_relative","relative_eq","relative_ne","default_max_relative","relative_eq","relative_ne","default_max_relative","relative_eq","relative_ne","default_max_relative","relative_eq","relative_ne","default_max_relative","relative_eq","relative_ne","default_max_relative","relative_eq","relative_ne","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","default_max_ulps","ulps_eq","ulps_ne","default_max_ulps","ulps_eq","ulps_ne","default_max_ulps","ulps_eq","ulps_ne","default_max_ulps","ulps_eq","ulps_ne","default_max_ulps","ulps_eq","ulps_ne","default_max_ulps","ulps_eq","ulps_ne","from_equations","from_parameters","blend","over","inside","outside","atop","xor","plus","multiply","screen","overlay","darken","lighten","dodge","burn","hard_light","soft_light","difference","exclusion","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","into_format","from_format","into_components","from_components","into_linear","from_linear","into_encoding","from_encoding","new","into_format","from_format","into_components","from_components","into_linear","from_linear","into_encoding","from_encoding","new","into_format","from_format","into_components","from_components","into_linear","from_linear","into_encoding","from_encoding","new","into_format","from_format","into_components","from_components","into_linear","from_linear","into_encoding","from_encoding","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","new","with_wp","into_components","from_components","from_degrees","from_radians","to_degrees","to_radians","to_positive_degrees","to_positive_radians","to_raw_degrees","to_raw_radians","from_degrees","from_radians","to_degrees","to_radians","to_positive_degrees","to_positive_radians","to_raw_degrees","to_raw_radians","from_yxy","from_lab","from_lch","from_rgb","from_hsl","from_hsv","from_hwb","from_luma","into_yxy","into_lab","into_lch","into_rgb","into_hsl","into_hsv","into_hwb","into_luma","color","convert_unclamped_from","CHANNELS"],"q":["palette","palette::blend","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette","palette::gradient","","","","","","","","","","","","","","palette","palette::named","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette","palette::luma","","","","","","","","","","","","","palette","palette::rgb","","","","","","","","","","","","","","","","","","","","","","palette","palette::chromatic_adaptation","","","","","","","","","","","","","","","","palette","palette::encoding","palette::encoding::srgb","palette::encoding","palette::encoding::gamma","","","","","palette::encoding","palette::encoding::linear","","palette::encoding","palette::encoding::pixel","","","","","","","","","","","","","","","","","","","palette::encoding","","","palette","palette::white_point","","","","","","","","","","","","","","","","","palette","palette::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette","","","","","","","palette::blend","","","","","","","","","","","","","","","","","","palette","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::blend","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::gradient","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::luma","","","","","","","","","","","palette::rgb","","","","","","","","","","","palette","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::chromatic_adaptation","","","","","","","","","","","","","","","","palette","","","","","","","","","palette::encoding::srgb","","","","","","","","","","palette::encoding::gamma","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::encoding::linear","","","","","","","","","","","","","","","","","","","","palette::white_point","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::blend","","palette","","palette::luma","","palette::rgb","","palette::blend","palette::encoding::srgb","","","palette::chromatic_adaptation","palette","","","","","","","","","","","","","","","","","","palette::luma","","","palette::rgb","","","","","palette","","","","","","","","palette::luma","","","palette::rgb","","","","","","","","","palette","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::encoding::srgb","","palette::encoding::gamma","","palette::encoding::linear","","palette::white_point","","","","","","","","","","","","","","","palette","","","","","","","","","","","","","","","","","","palette::luma","","","palette::rgb","","","palette","","","","","","palette::blend","palette","","","","","","palette::luma","palette::rgb","palette","","","","","","","","palette::luma","palette::rgb","palette","","","","","","","","palette::rgb","palette","","","","","","","","","","","","","","palette::blend","","palette","","","","palette::luma","","palette::rgb","","palette","","","","palette::blend","palette","","","","","","palette::luma","palette::rgb","palette","","palette::blend","palette","","","","","","palette::luma","palette::rgb","palette","","palette::blend","palette","palette::gradient","","","","palette","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::luma","palette","palette::luma","palette","palette::luma","","palette","palette::luma","palette","palette::luma","palette","palette::luma","palette","palette::luma","palette","palette::luma","palette","palette::luma","palette","palette::luma","palette","palette::luma","palette","palette::luma","palette","","palette::luma","palette","","palette::luma","palette","palette::luma","","","palette","palette::rgb","palette","palette::rgb","palette","","palette::rgb","palette","","palette::rgb","palette","palette::rgb","palette","palette::rgb","palette","palette::rgb","palette","palette::rgb","palette","palette::rgb","palette","palette::rgb","palette","","palette::rgb","palette","palette::rgb","palette","palette::rgb","palette","palette::rgb","","","","","palette","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::luma","palette","palette::rgb","palette","","","","","","","","","","","palette::gradient","","palette::blend","","","","","palette::gradient","","","","palette","","","","","","palette::luma","palette::rgb","palette","","","","palette::encoding::srgb","palette::encoding::gamma","","","palette::encoding::linear","","palette::white_point","","","","","","","","","","","","","","","palette::blend","palette","","","","","","palette::luma","palette::rgb","palette","","","","palette::blend","","","","","","","","palette::gradient","","palette","","","","","","","","","","","","palette::luma","","palette::rgb","","palette","","","","","","","","palette::encoding::srgb","palette::encoding::gamma","","","","","palette::encoding::linear","","","palette::white_point","","","","","","","","","","","","","","","palette::blend","palette","palette::blend","palette","palette::blend","","","","","palette::gradient","","","palette","","","","","","palette::luma","palette::rgb","palette","","","","","palette::encoding::srgb","palette::encoding::gamma","","","palette::encoding::linear","","palette::white_point","","","","","","","","","","","","","","","palette","palette::blend","","palette","","","","palette::luma","","palette::rgb","","palette","","","","palette::blend","","palette","","","","","","","","","","","","palette::luma","","palette::rgb","","palette","","","","","","","","palette::blend","","palette","","","","","","","","","","","","palette::luma","","palette::rgb","","palette","","","","","","","","palette::blend","","palette","","","","palette::luma","","palette::rgb","","palette","","","","palette::blend","","palette","","","","","","","","","","","","palette::luma","","palette::rgb","","palette","","","","","","","","palette::blend","","palette","","","","","","","","","","","","palette::luma","","palette::rgb","","palette","","","","","","","","palette::blend","","palette","","","","palette::luma","","palette::rgb","","palette","","","","palette::blend","","palette","","","","palette::luma","","palette::rgb","","palette","","","","","palette::luma","palette::rgb","palette","palette::luma","palette::rgb","palette","palette::blend","","palette::gradient","","palette","","","","","","","","palette::luma","","palette::rgb","","palette","","","","","","","","","","","","","","","","","","palette::blend","","palette::gradient","","palette","","","","","","","","palette::luma","","palette::rgb","","palette","","","","","","","","","","","","","","","","","","palette::blend","","palette::gradient","","palette","","","","","","","","palette::luma","","palette::rgb","","palette","","","","","","","","","","","","","","","","","","palette::blend","","","","","","","","","","","","","","","","","","","","palette","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::luma","","","","","","","","","palette","","","","","","","","","palette::rgb","","","","","","","","","palette","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","palette::encoding::pixel"],"d":["Color blending and blending equations.","A blending equation.","Add the source and destination, according to …","Subtract the destination from the source, according to …","Subtract the source from the destination, according to …","Create a color where each component is the smallest of …","Create a color where each component is the largest of …","A pair of blending equations and corresponding parameters.","The equation for the color components.","The equation for the alpha component.","The parameters for the color components.","The parameters for the alpha component.","A blending parameter.","A simple 1.","A simple 0.","The source color, or alpha.","One minus the source color, or alpha.","The destination color, or alpha.","One minus the destination color, or alpha.","The source alpha.","One minus the source alpha.","The destination alpha.","One minus the destination alpha.","A pair of source and destination parameters.","The source parameter.","The destination parameter.","Premultiplied alpha wrapper.","The premultiplied color components (…","The transparency component. 0.0 is fully transparent and …","A trait for colors that can be blended together.","The core color type. Typically <code>Self</code> for color types …","Convert the color to premultiplied alpha.","Convert the color from premultiplied alpha.","Blend self, as the source color, with <code>destination</code>, using …","Place <code>self</code> over <code>other</code>. This is the good old common alpha …","Results in the parts of <code>self</code> that overlaps the visible …","Results in the parts of <code>self</code> that lies outside the …","Place <code>self</code> over only the visible parts of <code>other</code>.","Results in either <code>self</code> or <code>other</code>, where they do not …","Add <code>self</code> and <code>other</code>. This uses the alpha component to …","Multiply <code>self</code> with <code>other</code>. This uses the alpha component …","Make a color which is at least as light as <code>self</code> or <code>other</code>.","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them …","Return the darkest parts of <code>self</code> and <code>other</code>.","Return the lightest parts of <code>self</code> and <code>other</code>.","Lighten <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is…","Darken <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is …","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them …","Lighten <code>other</code> if <code>self</code> is light, or darken <code>other</code> as if it…","Return the absolute difference between <code>self</code> and <code>other</code>. It…","Similar to <code>difference</code>, but appears to result in a lower …","A trait for custom blend functions.","Apply this blend function to a pair of colors.","Types for interpolation between multiple colors.","A linear interpolation between colors.","Create a gradient of evenly spaced colors with the domain …","Create a gradient of colors with custom spacing and …","Get a color from the gradient. The color of the closest …","Take <code>n</code> evenly spaced colors from the gradient, as an …","Slice this gradient to limit its domain.","Get the limits of this gradient’s domain.","An iterator over interpolated colors.","A slice of a Gradient that limits its domain.","Get a color from the gradient slice. The color of the …","Take <code>n</code> evenly spaced colors from the gradient slice, as …","Slice this gradient slice to further limit its domain. …","Get the limits of this gradient slice’s domain.","A domain range for gradient slices.","A collection of named color constants. Can be toggled …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get a SVG/CSS3 color by name. Can be toggled with the …","Luminance types.","Luminance.","The lightness of the color. 0.0 is black and 1.0 is white.","The kind of RGB standard. sRGB is the default.","Luminance with an alpha component. See the <code>Lumaa</code> …","sRGB encoded luminance.","sRGB encoded luminance with an alpha component.","Linear luminance.","Linear luminance with an alpha component.","Gamma 2.2 encoded luminance.","Gamma 2.2 encoded luminance with an alpha component.","A white point and a transfer function.","The white point of the color space.","The transfer function for the luminance component.","RGB types, spaces and standards.","Generic RGB.","The amount of red light, where 0.0 is no red light and …","The amount of green light, where 0.0 is no green light …","The amount of blue light, where 0.0 is no blue light and …","The kind of RGB standard. sRGB is the default.","Generic RGB with an alpha component. See the <code>Rgba</code> …","Nonlinear sRGB.","Nonlinear sRGB with an alpha component.","Linear sRGB.","Linear sRGB with an alpha component.","Gamma 2.2 encoded sRGB.","Gamma 2.2 encoded sRGB with an alpha component.","An RGB space and a transfer function.","The RGB color space.","The transfer function for the color components.","A set of primaries and a white point.","The primaries of the RGB color space.","The white point of the RGB color space.","Represents the red, green and blue primaries of an RGB …","Primary red.","Primary green.","Primary blue.","Convert colors from one reference white point to another","Chromatic adaptation methods implemented in the library","Bradford chromatic adaptation method","VonKries chromatic adaptation method","XyzScaling chromatic adaptation method","Holds the matrix coeffecients for the chromatic …","3x3 matrix for the cone response domains","3x3 matrix for the inverse of the cone response domains","Generates a conversion matrix to convert the Xyz …","Get the cone response functions for the chromatic …","Generates a 3x3 transformation matrix to convert color …","Trait to convert color from one reference white point to …","Convert the source color to the destination color using …","Convert the source color to the destination color using …","Trait to convert color with one reference white point …","Convert the source color to the destination color using …","Convert the source color to the destination color using …","Various encoding traits, types and standards.","The sRGB standard.","The sRGB color space.","Gamma encoding.","Gamma encoding.","The transfer function for gamma encoded colors.","A type level float constant.","The represented number.","Represents <code>2.2f32</code>.","Linear encoding","A generic standard with linear components.","Linear color component encoding.","Pixel encodings and pixel format conversion.","A contiguous sequence of pixel channels with a known …","The guaranteed number of channels in the sequence.","A contiguous sequence of pixel channels.","The length of the sequence.","Convert from a pointer and a length.","Convert from a mutable pointer and a length.","Convert to a pointer.","Convert to a mutable pointer.","Represents colors that can be serialized and deserialized …","The number of color channels.","Cast as a reference to raw color components.","Cast as a mutable reference to raw color components.","Convert from raw color components.","Cast from a reference to raw color components.","Cast from a mutable reference to raw color components.","Cast a slice of raw color components to a slice of colors.","Cast a mutable slice of raw color components to a mutable …","Cast a slice of colors to a slice of raw color components.","Cast a mutable slice of colors to a mutable slice of raw …","A transfer function to and from linear space.","Convert the color component <code>x</code> from linear space.","Convert the color component <code>x</code> into linear space.","Defines the tristimulus values of the CIE Illuminants.","WhitePoint defines the Xyz color co-ordinates for a given …","Get the Xyz chromacity co-ordinates for the white point.","CIE standard illuminant A","CIE standard illuminant B","CIE standard illuminant C","CIE D series standard illuminant - D50","CIE D series standard illuminant - D55","CIE D series standard illuminant - D65","CIE D series standard illuminant - D75","CIE standard illuminant E","CIE fluorescent illuminant series - F2","CIE fluorescent illuminant series - F7","CIE fluorescent illuminant series - F11","CIE D series standard illuminant - D50","CIE D series standard illuminant - D55","CIE D series standard illuminant - D65","CIE D series standard illuminant - D75","Floating point trait","Generic trait for floating point numbers","Returns the <code>NaN</code> value.","Returns the infinite value.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns the smallest finite value that this type can …","Returns the smallest positive, normalized value that this …","Returns epsilon, a small positive value.","Returns the largest finite value that this type can …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns the floating point category of the number. If …","Returns the largest integer less than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the nearest integer to a number. Round half-way …","Return the integer part of a number.","Returns the fractional part of a number.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Returns a number that represents the sign of <code>self</code>.","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Raise a number to an integer power.","Raise a number to a floating point power.","Take the square root of a number.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns the natural logarithm of the number.","Returns the logarithm of the number with respect to an …","Returns the base 2 logarithm of the number.","Returns the base 10 logarithm of the number.","Converts radians to degrees.","Converts degrees to radians.","Returns the maximum of the two numbers.","Returns the minimum of the two numbers.","The positive difference of two numbers.","Take the cubic root of a number.","Calculate the length of the hypotenuse of a right-angle …","Computes the sine of a number (in radians).","Computes the cosine of a number (in radians).","Computes the tangent of a number (in radians).","Computes the arcsine of a number. Return value is in …","Computes the arccosine of a number. Return value is in …","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Simultaneously computes the sine and cosine of the …","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Hyperbolic sine function.","Hyperbolic cosine function.","Hyperbolic tangent function.","Inverse hyperbolic sine function.","Inverse hyperbolic cosine function.","Inverse hyperbolic tangent function.","Returns the mantissa, base 2 exponent, and sign as …","An alpha component wrapper for colors.","The color.","The transparency component. 0.0 is fully transparent and …","A trait for colors that can be blended together.","The core color type. Typically <code>Self</code> for color types …","Convert the color to premultiplied alpha.","Convert the color from premultiplied alpha.","Blend self, as the source color, with <code>destination</code>, using …","Place <code>self</code> over <code>other</code>. This is the good old common alpha …","Results in the parts of <code>self</code> that overlaps the visible …","Results in the parts of <code>self</code> that lies outside the …","Place <code>self</code> over only the visible parts of <code>other</code>.","Results in either <code>self</code> or <code>other</code>, where they do not …","Add <code>self</code> and <code>other</code>. This uses the alpha component to …","Multiply <code>self</code> with <code>other</code>. This uses the alpha component …","Make a color which is at least as light as <code>self</code> or <code>other</code>.","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them …","Return the darkest parts of <code>self</code> and <code>other</code>.","Return the lightest parts of <code>self</code> and <code>other</code>.","Lighten <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is…","Darken <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is …","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them …","Lighten <code>other</code> if <code>self</code> is light, or darken <code>other</code> as if it…","Return the absolute difference between <code>self</code> and <code>other</code>. It…","Similar to <code>difference</code>, but appears to result in a lower …","Linear HSL color space.","The hue of the color, in degrees. Decides if it’s red, …","The colorfulness of the color. 0.0 gives gray scale …","Decides how light the color will look. 0.0 will be black, …","The white point and RGB primaries this color is adapted …","Linear HSL with an alpha component. See the <code>Hsla</code> …","Linear HSV color space.","The hue of the color, in degrees. Decides if it’s red, …","The colorfulness of the color. 0.0 gives gray scale …","Decides how bright the color will look. 0.0 will be …","The white point and RGB primaries this color is adapted …","Linear HSV with an alpha component. See the <code>Hsva</code> …","Linear HWB color space.","The hue of the color, in degrees. Decides if it’s red, …","The whiteness of the color. It specifies the amount white …","The blackness of the color. It specifies the amount black …","The white point and RGB primaries this color is adapted …","Linear HWB with an alpha component. See the <code>Hwba</code> …","The CIE L*a*b* (CIELAB) color space.","L* is the lightness of the color. 0.0 gives absolute …","a* goes from red at -128 to green at 127.","b* goes from yellow at -128 to blue at 127.","The white point associated with the color’s illuminant …","CIE L*a*b* (CIELAB) with an alpha component. See the <code>Laba</code> …","CIE L*C*h°, a polar version of CIE L*a*b*.","L* is the lightness of the color. 0.0 gives absolute …","C* is the colorfulness of the color. It’s similar to …","The hue of the color, in degrees. Decides if it’s red, …","The white point associated with the color’s illuminant …","CIE L*C*h° with an alpha component. See the <code>Lcha</code> …","The CIE 1931 XYZ color space.","X is the scale of what can be seen as a response curve …","Y is the luminance of the color, where 0.0 is black and …","Z is the scale of what can be seen as the blue …","The white point associated with the color’s illuminant …","CIE 1931 XYZ with an alpha component. See the <code>Xyza</code> …","The CIE 1931 Yxy (xyY)  color space.","x chromacity co-ordinate derived from XYZ color space as …","y chromacity co-ordinate derived from XYZ color space as …","luma (Y) was a measure of the brightness or luminance of …","The white point associated with the color’s illuminant …","CIE 1931 Yxy (xyY) with an alpha component. See the <code>Yxya</code> …","A trait for converting one color from another.","Convert from T with values clamped to the color defined …","Convert from T. The resulting color might be invalid in …","Convert from T, returning ok if the color is inside of …","A trait for converting a color into another.","Convert into T with values clamped to the color defined …","Convert into T. The resulting color might be invalid in …","Convert into T, returning ok if the color is inside of …","The error type for a color conversion that converted a …","FromColor provides conversion from the colors.","Convert from XYZ color space","Convert from Yxy color space","Convert from L*a*b* color space","Convert from L*C*h° color space","Convert from RGB color space","Convert from HSL color space","Convert from HSV color space","Convert from HWB color space","Convert from Luma","IntoColor provides conversion to the colors.","Convert into XYZ space","Convert into Yxy color space","Convert into L*a*b* color space","Convert into L*C*h° color space","Convert into RGB color space.","Convert into HSL color space","Convert into HSV color space","Convert into HWB color space","Convert into Luma","A hue type for the CIE L*a*b* family of color spaces.","A hue type for the RGB family of color spaces.","A 9 element array representing a 3x3 matrix","A trait for clamping and checking if colors are within …","Check if the color’s components are within the expected …","Return a new color where the components has been clamped …","Clamp the color’s components to the nearest valid …","A trait for linear color interpolation.","The type of the mixing factor.","Mix the color with an other color, by <code>factor</code>.","The <code>Shade</code> trait allows a color to be lightened or …","The type of the lighten/darken amount.","Lighten the color by <code>amount</code>.","Darken the color by <code>amount</code>.","A trait for colors where a hue may be calculated.","The kind of hue unit this color space uses.","Calculate a hue if possible.","A trait for colors where the hue can be manipulated …","Return a new copy of <code>self</code>, but with a specific hue.","Return a new copy of <code>self</code>, but with the hue shifted by …","A trait for colors where the saturation (or chroma) can …","The type of the (de)saturation factor.","Increase the saturation by <code>factor</code>.","Decrease the saturation by <code>factor</code>.","Perform a unary or binary operation on each component of …","The scalar type for color components.","Perform a binary operation on this and an other color.","Perform a unary operation on this color.","Common trait for color components.","True if the max intensity is also the highest possible …","The highest displayable value this component type can …","Convert into another color component type, including …onvert to a raw pixel format.","Convert to a raw pixel format.","","","","","","","","","","Convert to a raw pixel format.","Convert to a raw pixel formatreate a pair of blending equations, where all the …","Create a pair of additive blending equations with the …","Blend self, as the source color, with <code>destination</code>, using …","Place <code>self</code> over <code>other</code>. This is the good old common alpha …","Results in the parts of <code>self</code> that overlaps the visible …","Results in the parts of <code>self</code> that lies outside the …","Place <code>self</code> over only the visible parts of <code>other</code>.","Results in either <code>self</code> or <code>other</code>, where they do not …","Add <code>self</code> and <code>other</code>. This uses the alpha component to …","Multiply <code>self</code> with <code>other</code>. This uses the alpha component …","Make a color which is at least as light as <code>self</code> or <code>other</code>.","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them …","Return the darkest parts of <code>self</code> and <code>other</code>.","Return the lightest parts of <code>self</code> and <code>other</code>.","Lighten <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is…","Darken <code>other</code> to reflect <code>self</code>. Results in <code>other</code> if <code>self</code> is …","Multiply <code>self</code> or <code>other</code> if other is dark, or screen them …","Lighten <code>other</code> if <code>self</code> is light, or darken <code>other</code> as if it…","Return the absolute difference between <code>self</code> and <code>other</code>. It…","Similar to <code>difference</code>, but appears to result in a lower …","HSL for linear sRGB.","Linear HSL.","Convert to a <code>(hue, saturation, lightness)</code> tuple.","Convert from a <code>(hue, saturation, lightness)</code> tuple.","HSL and transparency for linear sRGB.","Linear HSL and transparency.","Convert to a <code>(hue, saturation, lightness, alpha)</code> tuple.","Convert from a <code>(hue, saturation, lightness, alpha)</code> tuple.","HSV for linear sRGB.","Linear HSV.","Convert to a <code>(hue, saturation, value)</code> tuple.","Convert from a <code>(hue, saturation, value)</code> tuple.","HSV and transparency for linear sRGB.","Linear HSV and transparency.","Convert to a <code>(hue, saturation, value, alpha)</code> tuple.","Convert from a <code>(hue, saturation, value, alpha)</code> tuple.","HWB for linear sRGB.","Linear HWB.","Convert to a <code>(hue, whiteness, blackness)</code> tuple.","Convert from a <code>(hue, whiteness, blackness)</code> tuple.","HWB and transparency for linear sRGB.","Linear HWB and transparency.","Convert to a <code>(hue, whiteness, blackness, alpha)</code> tuple.","Convert from a <code>(hue, whiteness, blackness, alpha)</code> tuple.","CIE L*a*b* with white point D65.","CIE L*a*b*.","Convert to a <code>(L\\\\*, a\\\\*, b\\\\*)</code> tuple.","Convert from a <code>(L\\\\*, a\\\\*, b\\\\*)</code> tuple.","CIE L*a*b* and transparency and white point D65.","CIE L*a*b* and transparency.","Convert to a <code>(L\\\\*, a\\\\*, b\\\\*, alpha)</code> tuple.","Convert from a <code>(L\\\\*, a\\\\*, b\\\\*, alpha)</code> tuple.","CIE L*C*h° with white point D65.","CIE L*C*h°.","Convert to a <code>(L\\\\*, C\\\\*, h°)</code> tuple.","Convert from a <code>(L\\\\*, C\\\\*, h°)</code> tuple.","CIE L*C*h° and transparency with white point D65.","CIE L*C*h° and transparency.","Convert to a <code>(L\\\\*, C\\\\*, h°, alpha)</code> tuple.","Convert from a <code>(L\\\\*, C\\\\*, h°, alpha)</code> tuple.","Create a luminance color.","Convert into another component type.","Convert from another component type.","Convert to a <code>(luma,)</code> tuple.","Convert from a <code>(luma,)</code> tuple.","Convert the color to linear luminance.","Convert linear luminance to nonlinear luminance.","Convert the color to a different encoding.","Convert luminance from a different encoding.","Create a luminance color with transparency.","Convert into another component type.","Convert from another component type.","Convert to a <code>(luma, alpha)</code> tuple.","Convert from a <code>(luma, alpha)</code> tuple.","Convert the color to linear luminance with transparency.","Convert linear luminance to nonlinear luminance with …","Convert the color to a different encoding with …","Convert luminance from a different encoding with …","Create an RGB color.","Convert into another component type.","Convert from another component type.","Convert to a <code>(red, green, blue)</code> tuple.","Convert from a <code>(red, green, blue)</code> tuple.","Convert the color to linear RGB.","Convert linear RGB to nonlinear RGB.","Convert the color to a different encoding.","Convert RGB from a different encoding.","Nonlinear RGB.","Convert into another component type.","Convert from another component type.","Convert to a <code>(red, green, blue, alpha)</code> tuple.","Convert from a <code>(red, green, blue, alpha)</code> tuple.","Convert the color to linear RGB with transparency.","Convert linear RGB to nonlinear RGB with transparency.","Convert the color to a different encoding with …","Convert RGB from a different encoding with transparency.","CIE XYZ with whtie point D65.","CIE XYZ.","Convert to a <code>(X, Y, Z)</code> tuple.","Convert from a <code>(X, Y, Z)</code> tuple.","CIE Yxy and transparency with white point D65.","CIE XYZ and transparency.","Convert to a <code>(X, Y, Z, alpha)</code> tuple.","Convert from a <code>(X, Y, Z, alpha)</code> tuple.","CIE Yxy with white point D65.","CIE Yxy.","Convert to a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.","Convert from a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.","CIE Yxy and transparency with white point D65.","CIE Yxy and transparency.","Convert to a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.","Convert from a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.","Create a new hue from degrees.","Create a new hue from radians, instead of degrees.","Get the hue as degrees, in the range <code>(-180, 180]</code>.","Convert the hue to radians, in the range <code>(-π, π]</code>.","Convert the hue to positive degrees, in the range <code>[0, 360)</code>…","Convert the hue to positive radians, in the range <code>[0, 2π)</code>…","Get the internal representation, without normalizing it.","Get the internal representation as radians, without …","Create a new hue from degrees.","Create a new hue from radians, instead of degrees.","Get the hue as degrees, in the range <code>(-180, 180]</code>.","Convert the hue to radians, in the range <code>(-π, π]</code>.","Convert the hue to positive degrees, in the range <code>[0, 360)</code>…","Convert the hue to positive radians, in the range <code>[0, 2π)</code>…","Get the internal representation, without normalizing it.","Get the internal representation as radians, without …","Convert from Yxy color space","Convert from L*a*b* color space","Convert from L*C*h° color space","Convert from RGB color space","Convert from HSL color space","Convert from HSV color space","Convert from HWB color space","Convert from Luma","Convert into Yxy color space","Convert into L*a*b* color space","Convert into L*C*h° color space","Convert into RGB color space.","Convert into HSL color space","Convert into HSV color space","Convert into HWB color space","Convert into Luma","Consume this error and return the wrapped color","Convert from T. The resulting color might be invalid in …","The guaranteed number of channels in the sequence."],"i":[0,0,1,1,1,1,1,0,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,0,4,4,0,5,5,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,7,0,0,8,8,8,8,8,8,0,0,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,0,0,0,0,0,0,0,0,11,11,0,0,12,12,12,12,0,0,0,0,0,0,0,0,13,13,0,14,14,0,15,15,15,0,0,16,16,16,0,17,17,0,18,18,0,19,19,0,20,20,0,0,0,0,0,0,0,21,0,0,0,0,0,0,22,0,23,23,23,23,23,0,24,24,24,24,24,24,24,24,24,24,0,25,25,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,28,28,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,29,29,29,29,0,0,30,30,30,30,0,0,31,31,31,31,0,0,32,32,32,32,0,0,33,33,33,33,0,0,34,34,34,34,0,0,35,35,35,35,0,0,36,36,36,0,37,37,37,0,0,38,38,38,38,38,38,38,38,38,0,39,39,39,39,39,39,39,39,39,0,0,0,0,40,40,40,0,41,41,0,42,42,42,0,43,43,0,44,44,0,45,45,45,0,46,46,46,0,47,47,47,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5,5,5,8,8,8,8,8,8,8,8,8,8,48,48,48,48,48,48,48,48,48,48,48,9,9,9,9,9,9,9,9,9,9,49,49,49,49,49,49,49,49,49,49,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,10,10,10,10,10,10,10,10,10,10,10,12,12,12,12,12,12,12,12,12,12,12,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,50,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,51,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,73,5,5,28,28,10,10,12,12,2,53,53,53,16,29,29,29,29,30,30,30,30,30,31,31,31,32,32,32,33,33,33,10,10,10,12,12,12,12,12,34,34,34,34,34,35,35,35,10,10,10,12,12,12,12,12,12,12,12,12,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,53,53,55,55,58,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,28,28,28,29,29,29,30,30,30,31,31,31,32,32,32,33,33,33,10,10,10,12,12,12,34,34,34,35,35,35,5,28,29,30,31,32,33,10,12,34,35,28,29,30,31,32,33,10,12,34,35,28,29,30,31,32,33,12,28,28,29,29,30,30,31,31,33,33,28,29,30,33,5,5,28,28,32,32,10,10,12,12,34,34,35,35,5,28,29,30,31,32,33,10,12,34,35,5,28,29,30,31,32,33,10,12,34,35,5,28,49,49,49,49,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,28,29,28,29,28,29,28,29,29,29,28,30,28,30,28,30,28,30,28,28,30,28,30,28,30,28,30,28,30,28,30,28,30,28,28,30,28,30,28,30,28,30,30,30,30,28,31,28,31,28,31,28,31,28,31,28,31,28,28,31,28,31,31,28,31,28,31,28,31,28,28,31,28,31,28,31,28,31,31,31,28,32,28,32,28,32,28,32,28,32,28,32,28,32,28,32,28,32,28,32,28,32,28,32,28,28,32,28,32,28,32,28,32,32,32,28,33,28,33,28,33,28,33,28,33,28,33,28,33,28,33,28,33,28,33,28,28,33,28,33,28,33,28,33,28,33,28,33,33,33,28,10,28,10,28,10,10,28,10,28,10,28,10,28,10,28,10,28,10,28,10,28,10,28,10,28,28,10,28,28,10,28,10,10,10,28,12,28,12,28,28,12,28,28,12,28,12,28,12,28,12,28,12,28,12,28,12,28,28,12,28,12,28,12,28,12,12,12,12,12,28,28,34,28,28,34,28,34,28,34,28,34,28,34,28,34,28,34,28,28,34,28,34,28,34,28,34,28,34,28,34,34,34,34,34,28,35,28,35,28,28,35,28,35,28,35,28,35,28,35,28,35,28,35,28,35,28,35,28,35,28,35,28,28,35,28,35,35,35,35,28,50,51,29,28,30,28,31,28,32,28,33,28,10,28,12,28,34,28,35,28,50,50,50,51,51,51,48,48,2,1,4,3,5,8,48,9,49,28,29,30,31,32,33,10,12,34,35,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,5,28,29,30,31,32,33,10,12,34,35,50,51,2,2,1,4,4,3,5,5,49,49,28,28,29,29,30,30,31,31,32,32,33,33,10,10,12,12,34,34,35,35,50,50,51,51,53,54,54,55,55,56,57,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,5,28,5,28,2,1,4,3,5,8,9,49,28,29,30,31,32,33,10,12,34,35,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,52,5,5,28,28,32,32,10,10,12,12,34,34,35,35,5,5,28,28,29,29,30,30,31,31,32,32,33,33,10,10,12,12,34,34,35,35,50,50,51,51,5,5,28,28,29,29,30,30,31,31,32,32,33,33,10,10,12,12,34,34,35,35,50,50,51,51,5,5,28,28,32,32,10,10,12,12,34,34,35,35,5,5,28,28,29,29,30,30,31,31,32,32,33,33,10,10,12,12,34,34,35,35,50,50,51,51,5,5,28,28,29,29,30,30,31,31,32,32,33,33,10,10,12,12,34,34,35,35,50,50,51,51,5,5,28,28,32,32,10,10,12,12,34,34,35,35,5,5,28,28,32,32,10,10,12,12,34,34,35,35,28,10,12,28,10,12,52,5,5,49,49,28,28,29,29,30,30,31,31,10,10,12,12,34,34,34,35,35,35,32,32,32,33,33,33,50,50,50,51,51,51,5,5,49,49,28,28,29,29,30,30,31,31,10,10,12,12,34,34,34,35,35,35,32,32,32,33,33,33,50,50,50,51,51,51,5,5,49,49,28,28,29,29,30,30,31,31,10,10,12,12,34,34,34,35,35,35,32,32,32,33,33,33,50,50,50,51,51,51,2,2,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,29,29,29,29,28,28,28,28,30,30,30,30,28,28,28,28,31,31,31,31,28,28,28,28,32,32,32,32,28,28,28,28,33,33,33,33,28,28,28,28,10,10,10,10,10,10,10,10,10,28,28,28,28,28,28,28,28,28,12,12,12,12,12,12,12,12,12,28,28,28,28,28,28,28,28,28,34,34,34,34,28,28,28,28,35,35,35,35,28,28,28,28,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,52,36,22],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["prealpha",3]],[[["prealpha",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["prealpha",3]],["prealpha",3]],null,null,[[["intoiterator",8]],["gradient",3]],[[["vec",3]],["gradient",3]],[[]],[[["usize",15]],["take",3]],[[["range",3],["into",8]],["slice",3]],[[]],null,null,[[]],[[["usize",15]],["take",3]],[[["range",3],["into",8]],["slice",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15]],[["option",4],["srgb",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["yxy",3],["whitepoint",8],["float",8],["component",8]]],[[],[["yxy",3],["whitepoint",8],["float",8],["component",8]]],[[],[["yxy",3],["whitepoint",8],["float",8],["component",8]]],null,null,null,null,null,null,null,null,null,[[],["coneresponsematrices",3]],[[],["mat3",6]],null,[[]],[[["transformmatrix",8]]],null,[[]],[[["transformmatrix",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],null,null,[[]],[[]],[[],["rawpixelsized",8]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["float",8]],["float",8]],[[["float",8]],["float",8]],null,null,[[],[["xyz",3],["whitepoint",8],["float",8],["component",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[],["prealpha",3]],[[["prealpha",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],[["outofbounds",3],["result",4]]],null,[[]],[[]],[[],[["result",4],["outofbounds",3]]],null,null,[[["xyz",3]]],[[["yxy",3]]],[[["lab",3]]],[[["lch",3]]],[[["linear",3],["rgb",3]]],[[["rgbspace",8],["hsl",3]]],[[["rgbspace",8],["hsv",3]]],[[["hwb",3],["rgbspace",8]]],[[["linear",3],["luma",3]]],null,[[],["xyz",3]],[[],["yxy",3]],[[],["lab",3]],[[],["lch",3]],[[],[["linear",3],["rgb",3]]],[[],[["rgbspace",8],["hsl",3]]],[[],[["rgbspace",8],["hsv",3]]],[[],[["hwb",3],["rgbspace",8]]],[[],[["linear",3],["luma",3]]],null,null,null,null,[[],["bool",15]],[[]],[[]],null,null,[[]],null,null,[[]],[[]],null,null,[[],["option",4]],null,[[["into",8]]],[[["into",8]]],null,null,[[]],[[]],null,null,[[["fnmut",8]]],[[["fnmut",8]]],null,null,[[]],[[],["component",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["prealpha",3]],[[["prealpha",3]],["prealpha",3]],[[],["prealpha",3]],[[["prealpha",3]],["alpha",3]],[[],[["prealpha",3],["luma",3]]],[[["prealpha",3],["luma",3]]],[[],[["prealpha",3],["rgb",3]]],[[["prealpha",3],["rgb",3]]],[[["prealpha",3]],["prealpha",3]],[[],[["yxy",3],["whitepoint",8],["float",8],["component",8]]],[[],[["yxy",3],["whitepoint",8],["float",8],["component",8]]],[[],[["yxy",3],["whitepoint",8],["float",8],["component",8]]],[[],["coneresponsematrices",3]],[[["xyz",3]]],[[["rgb",3],["linear",3]]],[[["hsv",3],["rgbspace",8]]],[[["hsl",3],["rgbspace",8]]],[[["xyz",3]]],[[["rgb",3],["linear",3]]],[[["hsl",3],["rgbspace",8]]],[[["hwb",3],["rgbspace",8]]],[[["hsv",3],["rgbspace",8]]],[[["xyz",3]]],[[["hsv",3],["rgbspace",8]]],[[["hwb",3],["rgbspace",8]]],[[["xyz",3]]],[[["lab",3]]],[[["lch",3]]],[[["xyz",3]]],[[["lab",3]]],[[["lch",3]]],[[["xyz",3]]],[[["yxy",3]]],[[["linear",3],["luma",3]]],[[["xyz",3]]],[[["rgbspace",8],["hsv",3]]],[[["hsl",3],["rgbspace",8]]],[[["linear",3],["luma",3]]],[[["rgb",3],["linear",3]]],[[["xyz",3]]],[[["rgb",3],["linear",3]]],[[["lab",3]]],[[["yxy",3]]],[[["luma",3],["linear",3]]],[[["xyz",3]]],[[["yxy",3]]],[[["luma",3],["linear",3]]],[[],["xyz",3]],[[],["yxy",3]],[[],[["linear",3],["luma",3]]],[[],["xyz",3]],[[],["yxy",3]],[[],["lab",3]],[[],["lch",3]],[[],[["rgb",3],["linear",3]]],[[],[["rgbspace",8],["hsl",3]]],[[],[["rgbspace",8],["hsv",3]]],[[],[["rgbspace",8],["hwb",3]]],[[],[["linear",3],["luma",3]]],[[],["xyz",3]],[[],["yxy",3]],[[],["lab",3]],[[],["lch",3]],[[],[["linear",3],["rgb",3]]],[[],[["rgbspace",8],["hsl",3]]],[[],[["rgbspace",8],["hsv",3]]],[[],[["linear",3],["luma",3]]],[[],["xyz",3]],[[],["yxy",3]],[[],["lab",3]],[[],["lch",3]],[[],[["linear",3],["rgb",3]]],[[],[["rgbspace",8],["hsl",3]]],[[],[["rgbspace",8],["hsv",3]]],[[],[["linear",3],["luma",3]]],[[],["xyz",3]],[[],["yxy",3]],[[],["lab",3]],[[],["lch",3]],[[],[["linear",3],["rgb",3]]],[[],[["rgbspace",8],["hsl",3]]],[[],[["rgbspace",8],["hsv",3]]],[[],[["linear",3],["luma",3]]],[[],["xyz",3]],[[],["yxy",3]],[[],["lab",3]],[[],["lch",3]],[[],[["linear",3],["rgb",3]]],[[],[["rgbspace",8],["hsl",3]]],[[],[["rgbspace",8],["hsv",3]]],[[],[["linear",3],["luma",3]]],[[],["xyz",3]],[[],["yxy",3]],[[],["lab",3]],[[],["lch",3]],[[],[["rgb",3],["linear",3]]],[[],[["rgbspace",8],["hsl",3]]],[[],[["rgbspace",8],["hsv",3]]],[[],[["linear",3],["luma",3]]],[[],["xyz",3]],[[],["yxy",3]],[[],["lab",3]],[[],["lch",3]],[[],[["rgb",3],["linear",3]]],[[],[["rgbspace",8],["hsl",3]]],[[],[["rgbspace",8],["hsv",3]]],[[],[["linear",3],["luma",3]]],[[],["xyz",3]],[[],["yxy",3]],[[],["lab",3]],[[],["lch",3]],[[],[["rgb",3],["linear",3]]],[[],[["rgbspace",8],["hsl",3]]],[[],[["rgbspace",8],["hsv",3]]],[[],[["linear",3],["luma",3]]],[[["float",8]],["float",8]],[[["float",8]],["float",8]],[[["float",8]],["float",8]],[[["float",8]],["float",8]],[[["float",8]],["float",8]],[[["float",8]],["float",8]],[[],[["xyz",3],["whitepoint",8],["float",8],["component",8]]],[[],[["xyz",3],["whitepoint",8],["float",8],["component",8]]],[[],[["xyz",3],["whitepoint",8],["float",8],["component",8]]],[[],[["xyz",3],["whitepoint",8],["float",8],["component",8]]],[[],[["xyz",3],["whitepoint",8],["float",8],["component",8]]],[[],[["xyz",3],["whitepoint",8],["float",8],["component",8]]],[[],[["xyz",3],["whitepoint",8],["float",8],["component",8]]],[[],[["xyz",3],["whitepoint",8],["float",8],["component",8]]],[[],[["xyz",3],["whitepoint",8],["float",8],["component",8]]],[[],[["xyz",3],["whitepoint",8],["float",8],["component",8]]],[[],[["xyz",3],["whitepoint",8],["float",8],["component",8]]],[[],[["xyz",3],["whitepoint",8],["float",8],["component",8]]],[[],[["xyz",3],["whitepoint",8],["float",8],["component",8]]],[[],[["xyz",3],["whitepoint",8],["float",8],["component",8]]],[[],[["xyz",3],["whitepoint",8],["float",8],["component",8]]],[[],["bool",15]],[[],["alpha",3]],[[]],[[],["bool",15]],[[],["hsl",3]],[[]],[[],["bool",15]],[[],["hsv",3]],[[]],[[],["bool",15]],[[],["hwb",3]],[[]],[[],["bool",15]],[[],["lab",3]],[[]],[[],["bool",15]],[[],["lch",3]],[[]],[[],["bool",15]],[[],["luma",3]],[[]],[[],["bool",15]],[[],["rgb",3]],[[]],[[],["bool",15]],[[],["xyz",3]],[[]],[[],["bool",15]],[[],["yxy",3]],[[]],[[["prealpha",3]],["prealpha",3]],[[["alpha",3]],["alpha",3]],[[["hsl",3]],["hsl",3]],[[["hsv",3]],["hsv",3]],[[["hwb",3]],["hwb",3]],[[["lab",3]],["lab",3]],[[["lch",3]],["lch",3]],[[["luma",3]],["luma",3]],[[["rgb",3]],["rgb",3]],[[["xyz",3]],["xyz",3]],[[["yxy",3]],["yxy",3]],[[],["alpha",3]],[[],["hsl",3]],[[],["hsv",3]],[[],["hwb",3]],[[],["lab",3]],[[],["lch",3]],[[],["luma",3]],[[],["rgb",3]],[[],["xyz",3]],[[],["yxy",3]],[[],["option",4]],[[],[["option",4],["rgbhue",3]]],[[],[["option",4],["rgbhue",3]]],[[],[["option",4],["rgbhue",3]]],[[],[["labhue",3],["option",4]]],[[],[["labhue",3],["option",4]]],[[],[["option",4],["rgbhue",3]]],[[["into",8]],["alpha",3]],[[["into",8]],["alpha",3]],[[["into",8]],["hsl",3]],[[["into",8]],["hsl",3]],[[["into",8]],["hsv",3]],[[["into",8]],["hsv",3]],[[["into",8]],["hwb",3]],[[["into",8]],["hwb",3]],[[["into",8]],["lch",3]],[[["into",8]],["lch",3]],[[],["alpha",3]],[[],["hsl",3]],[[],["hsv",3]],[[],["lch",3]],[[["prealpha",3],["fnmut",8]],["prealpha",3]],[[["fnmut",8]],["prealpha",3]],[[["fnmut",8],["alpha",3]],["alpha",3]],[[["fnmut",8]],["alpha",3]],[[["lab",3],["fnmut",8]],["lab",3]],[[["fnmut",8]],["lab",3]],[[["luma",3],["fnmut",8]],["luma",3]],[[["fnmut",8]],["luma",3]],[[["rgb",3],["fnmut",8]],["rgb",3]],[[["fnmut",8]],["rgb",3]],[[["xyz",3],["fnmut",8]],["xyz",3]],[[["fnmut",8]],["xyz",3]],[[["yxy",3],["fnmut",8]],["yxy",3]],[[["fnmut",8]],["yxy",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["alpha",3]],["prealpha",3]],[[["prealpha",3]],["alpha",3]],[[["range",3]],["range",3]],[[["rangefrom",3]],["range",3]],[[["rangeto",3]],["range",3]],[[["rangefull",3]],["range",3]],[[],["alpha",3]],[[["rgb",3]]],[[["rgb",3]]],[[["alpha",3],["rgb",3]]],[[["alpha",3],["rgb",3]]],[[["luma",3]]],[[["luma",3]]],[[["alpha",3],["luma",3]]],[[["alpha",3],["luma",3]]],[[["alpha",3],["hsl",3]]],[[["hsv",3]]],[[["hsv",3],["alpha",3]]],[[["hsv",3],["alpha",3]]],[[["hwb",3]]],[[["hwb",3]]],[[["alpha",3],["hwb",3]]],[[["alpha",3],["hwb",3]]],[[["lab",3]]],[[["lab",3]]],[[["alpha",3],["lab",3]]],[[["alpha",3],["lab",3]]],[[["lch",3]]],[[["lch",3]]],[[["lch",3],["alpha",3]]],[[["lch",3],["alpha",3]]],[[["xyz",3]]],[[["alpha",3],["xyz",3]]],[[["alpha",3],["xyz",3]]],[[["yxy",3]]],[[["yxy",3]]],[[["alpha",3],["yxy",3]]],[[["alpha",3],["yxy",3]]],[[["xyz",3]]],[[["hsv",3]]],[[]],[[]],[[["rgb",3]]],[[["rgb",3]]],[[["alpha",3],["rgb",3]]],[[["alpha",3],["rgb",3]]],[[["luma",3]]],[[["luma",3]]],[[["alpha",3],["luma",3]]],[[["alpha",3],["luma",3]]],[[["hsl",3]]],[[["alpha",3],["hsl",3]]],[[["alpha",3],["hsl",3]]],[[["hsv",3],["alpha",3]]],[[["hwb",3]]],[[["alpha",3],["hwb",3]]],[[["alpha",3],["hwb",3]]],[[["lab",3]]],[[["lab",3]]],[[["alpha",3],["lab",3]]],[[["alpha",3],["lab",3]]],[[["lch",3]]],[[["lch",3]]],[[["lch",3],["alpha",3]]],[[["lch",3],["alpha",3]]],[[["xyz",3]]],[[["alpha",3],["xyz",3]]],[[["alpha",3],["xyz",3]]],[[["yxy",3]]],[[["yxy",3]]],[[["alpha",3],["yxy",3]]],[[["alpha",3],["yxy",3]]],[[["xyz",3]]],[[["hsl",3]]],[[["hwb",3]]],[[]],[[]],[[["rgb",3]]],[[["rgb",3]]],[[["alpha",3],["rgb",3]]],[[["alpha",3],["rgb",3]]],[[["luma",3]]],[[["luma",3]]],[[["alpha",3],["luma",3]]],[[["alpha",3],["luma",3]]],[[["hsl",3]]],[[["hsl",3]]],[[["alpha",3],["hsl",3]]],[[["alpha",3],["hsl",3]]],[[["hsv",3]]],[[["hsv",3],["alpha",3]]],[[["hsv",3],["alpha",3]]],[[["alpha",3],["hwb",3]]],[[["lab",3]]],[[["lab",3]]],[[["alpha",3],["lab",3]]],[[["alpha",3],["lab",3]]],[[["lch",3]]],[[["lch",3]]],[[["lch",3],["alpha",3]]],[[["lch",3],["alpha",3]]],[[["xyz",3]]],[[["alpha",3],["xyz",3]]],[[["alpha",3],["xyz",3]]],[[["yxy",3]]],[[["yxy",3]]],[[["alpha",3],["yxy",3]]],[[["alpha",3],["yxy",3]]],[[["xyz",3]]],[[["hsv",3]]],[[]],[[]],[[["rgb",3]]],[[["rgb",3]]],[[["alpha",3],["rgb",3]]],[[["alpha",3],["rgb",3]]],[[["luma",3]]],[[["luma",3]]],[[["alpha",3],["luma",3]]],[[["alpha",3],["luma",3]]],[[["hsl",3]]],[[["hsl",3]]],[[["alpha",3],["hsl",3]]],[[["alpha",3],["hsl",3]]],[[["hsv",3]]],[[["hsv",3]]],[[["alpha",3],["hsv",3]]],[[["alpha",3],["hsv",3]]],[[["hwb",3]]],[[["hwb",3]]],[[["alpha",3],["hwb",3]]],[[["alpha",3],["hwb",3]]],[[["alpha",3],["lab",3]]],[[["lch",3]]],[[["lch",3],["alpha",3]]],[[["lch",3],["alpha",3]]],[[["xyz",3]]],[[["alpha",3],["xyz",3]]],[[["alpha",3],["xyz",3]]],[[["yxy",3]]],[[["yxy",3]]],[[["alpha",3],["yxy",3]]],[[["alpha",3],["yxy",3]]],[[["xyz",3]]],[[["lch",3]]],[[]],[[]],[[["rgb",3]]],[[["rgb",3]]],[[["alpha",3],["rgb",3]]],[[["alpha",3],["rgb",3]]],[[["luma",3]]],[[["luma",3]]],[[["alpha",3],["luma",3]]],[[["alpha",3],["luma",3]]],[[["hsl",3]]],[[["hsl",3]]],[[["alpha",3],["hsl",3]]],[[["alpha",3],["hsl",3]]],[[["hsv",3]]],[[["hsv",3]]],[[["alpha",3],["hsv",3]]],[[["alpha",3],["hsv",3]]],[[["hwb",3]]],[[["hwb",3]]],[[["alpha",3],["hwb",3]]],[[["alpha",3],["hwb",3]]],[[["lab",3]]],[[["alpha",3],["lab",3]]],[[["alpha",3],["lab",3]]],[[["lch",3],["alpha",3]]],[[["xyz",3]]],[[["alpha",3],["xyz",3]]],[[["alpha",3],["xyz",3]]],[[["yxy",3]]],[[["yxy",3]]],[[["alpha",3],["yxy",3]]],[[["alpha",3],["yxy",3]]],[[["xyz",3]]],[[["lab",3]]],[[]],[[]],[[["rgb",3]]],[[["rgb",3]]],[[["alpha",3],["rgb",3]]],[[["alpha",3],["rgb",3]]],[[["alpha",3],["luma",3]]],[[["hsl",3]]],[[["hsl",3]]],[[["alpha",3],["hsl",3]]],[[["alpha",3],["hsl",3]]],[[["hsv",3]]],[[["hsv",3]]],[[["alpha",3],["hsv",3]]],[[["alpha",3],["hsv",3]]],[[["hwb",3]]],[[["hwb",3]]],[[["alpha",3],["hwb",3]]],[[["alpha",3],["hwb",3]]],[[["lab",3]]],[[["lab",3]]],[[["alpha",3],["lab",3]]],[[["alpha",3],["lab",3]]],[[["lch",3]]],[[["lch",3]]],[[["alpha",3],["lch",3]]],[[["alpha",3],["lch",3]]],[[["xyz",3]]],[[["alpha",3],["xyz",3]]],[[["alpha",3],["xyz",3]]],[[["yxy",3]]],[[["alpha",3],["yxy",3]]],[[["alpha",3],["yxy",3]]],[[["xyz",3]]],[[["yxy",3]]],[[]],[[]],[[["alpha",3],["rgb",3]]],[[["luma",3]]],[[["alpha",3],["luma",3]]],[[["alpha",3],["luma",3]]],[[["hsl",3]]],[[["alpha",3],["hsl",3]]],[[["alpha",3],["hsl",3]]],[[["hsv",3]]],[[["hsv",3],["alpha",3]]],[[["hsv",3],["alpha",3]]],[[["hwb",3]]],[[["hwb",3]]],[[["alpha",3],["hwb",3]]],[[["alpha",3],["hwb",3]]],[[["lab",3]]],[[["lab",3]]],[[["alpha",3],["lab",3]]],[[["alpha",3],["lab",3]]],[[["lch",3]]],[[["lch",3]]],[[["alpha",3],["lch",3]]],[[["alpha",3],["lch",3]]],[[["xyz",3]]],[[["xyz",3],["alpha",3]]],[[["xyz",3],["alpha",3]]],[[["yxy",3]]],[[["yxy",3]]],[[["alpha",3],["yxy",3]]],[[["alpha",3],["yxy",3]]],[[["xyz",3]]],[[["hsl",3]]],[[["hsv",3]]],[[["luma",3]]],[[]],[[]],[[["rgb",3]]],[[["alpha",3],["rgb",3]]],[[["alpha",3],["rgb",3]]],[[["luma",3]]],[[["alpha",3],["luma",3]]],[[["alpha",3],["luma",3]]],[[["hsl",3]]],[[["hsl",3]]],[[["alpha",3],["hsl",3]]],[[["alpha",3],["hsl",3]]],[[["hsv",3]]],[[["hsv",3]]],[[["alpha",3],["hsv",3]]],[[["alpha",3],["hsv",3]]],[[["hwb",3]]],[[["hwb",3]]],[[["alpha",3],["hwb",3]]],[[["alpha",3],["hwb",3]]],[[["lab",3]]],[[["alpha",3],["lab",3]]],[[["alpha",3],["lab",3]]],[[["lch",3]]],[[["lch",3]]],[[["lch",3],["alpha",3]]],[[["lch",3],["alpha",3]]],[[["alpha",3],["xyz",3]]],[[["yxy",3]]],[[["alpha",3],["yxy",3]]],[[["alpha",3],["yxy",3]]],[[["rgb",3]]],[[["yxy",3]]],[[["lab",3]]],[[["luma",3]]],[[]],[[]],[[["rgb",3]]],[[["rgb",3]]],[[["alpha",3],["rgb",3]]],[[["alpha",3],["rgb",3]]],[[["luma",3]]],[[["alpha",3],["luma",3]]],[[["alpha",3],["luma",3]]],[[["hsl",3]]],[[["hsl",3]]],[[["alpha",3],["hsl",3]]],[[["alpha",3],["hsl",3]]],[[["hsv",3]]],[[["hsv",3]]],[[["alpha",3],["hsv",3]]],[[["alpha",3],["hsv",3]]],[[["hwb",3]]],[[["hwb",3]]],[[["alpha",3],["hwb",3]]],[[["alpha",3],["hwb",3]]],[[["lab",3]]],[[["lab",3]]],[[["alpha",3],["lab",3]]],[[["alpha",3],["lab",3]]],[[["lch",3]]],[[["lch",3]]],[[["lch",3],["alpha",3]]],[[["lch",3],["alpha",3]]],[[["xyz",3]]],[[["alpha",3],["xyz",3]]],[[["alpha",3],["xyz",3]]],[[["alpha",3],["yxy",3]]],[[["xyz",3]]],[[["luma",3]]],[[]],[[]],[[],["labhue",3]],[[],["rgbhue",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["f64",15]],[[],["f32",15]],[[],["f32",15]],[[],["f64",15]],[[],["f32",15]],[[],["f32",15]],[[],["option",4]],[[]],[[],["equations",3]],[[],["equation",4]],[[],["parameters",3]],[[],["parameter",4]],[[],["prealpha",3]],[[],["gradient",3]],[[],["take",3]],[[],["slice",3]],[[],["range",3]],[[],["alpha",3]],[[],["hsl",3]],[[],["hsv",3]],[[],["hwb",3]],[[],["lab",3]],[[],["lch",3]],[[],["luma",3]],[[],["rgb",3]],[[],["xyz",3]],[[],["yxy",3]],[[],["labhue",3]],[[],["rgbhue",3]],[[],["srgb",3]],[[],["gamma",3]],[[],["gammafn",3]],[[],["f2p2",3]],[[],["linear",3]],[[],["linearfn",3]],[[],["a",3]],[[],["b",3]],[[],["c",3]],[[],["d50",3]],[[],["d55",3]],[[],["d65",3]],[[],["d75",3]],[[],["e",3]],[[],["f2",3]],[[],["f7",3]],[[],["f11",3]],[[],["d50degree10",3]],[[],["d55degree10",3]],[[],["d65degree10",3]],[[],["d75degree10",3]],[[],["prealpha",3]],[[],["alpha",3]],[[],["hsl",3]],[[],["hsv",3]],[[],["hwb",3]],[[],["lab",3]],[[],["lch",3]],[[],["luma",3]],[[],["rgb",3]],[[],["xyz",3]],[[],["yxy",3]],[[],["labhue",3]],[[],["rgbhue",3]],[[["equations",3]],["bool",15]],[[["equations",3]],["bool",15]],[[["equation",4]],["bool",15]],[[["parameters",3]],["bool",15]],[[["parameters",3]],["bool",15]],[[["parameter",4]],["bool",15]],[[["prealpha",3]],["bool",15]],[[["prealpha",3]],["bool",15]],[[["range",3]],["bool",15]],[[["range",3]],["bool",15]],[[["alpha",3]],["bool",15]],[[["alpha",3]],["bool",15]],[[["hsl",3]],["bool",15]],[[["hsl",3]],["bool",15]],[[["hsv",3]],["bool",15]],[[["hsv",3]],["bool",15]],[[["hwb",3]],["bool",15]],[[["hwb",3]],["bool",15]],[[["lab",3]],["bool",15]],[[["lab",3]],["bool",15]],[[["lch",3]],["bool",15]],[[["lch",3]],["bool",15]],[[["luma",3]],["bool",15]],[[["luma",3]],["bool",15]],[[["rgb",3]],["bool",15]],[[["rgb",3]],["bool",15]],[[["xyz",3]],["bool",15]],[[["xyz",3]],["bool",15]],[[["yxy",3]],["bool",15]],[[["yxy",3]],["bool",15]],[[["labhue",3]],["bool",15]],[[],["bool",15]],[[["rgbhue",3]],["bool",15]],[[],["bool",15]],[[["srgb",3]],["bool",15]],[[["gamma",3]],["bool",15]],[[["gamma",3]],["bool",15]],[[["gammafn",3]],["bool",15]],[[["gammafn",3]],["bool",15]],[[["f2p2",3]],["bool",15]],[[["linear",3]],["bool",15]],[[["linear",3]],["bool",15]],[[["linearfn",3]],["bool",15]],[[["a",3]],["bool",15]],[[["b",3]],["bool",15]],[[["c",3]],["bool",15]],[[["d50",3]],["bool",15]],[[["d55",3]],["bool",15]],[[["d65",3]],["bool",15]],[[["d75",3]],["bool",15]],[[["e",3]],["bool",15]],[[["f2",3]],["bool",15]],[[["f7",3]],["bool",15]],[[["f11",3]],["bool",15]],[[["d50degree10",3]],["bool",15]],[[["d55degree10",3]],["bool",15]],[[["d65degree10",3]],["bool",15]],[[["d75degree10",3]],["bool",15]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["prealpha",3]]],[[]],[[["alpha",3]]],[[]],[[["lab",3]]],[[]],[[["luma",3]]],[[]],[[["rgb",3]]],[[]],[[["xyz",3]]],[[]],[[["yxy",3]]],[[]],[[["prealpha",3]]],[[]],[[["alpha",3]]],[[]],[[["hsl",3]]],[[]],[[["hsv",3]]],[[]],[[["hwb",3]]],[[]],[[["lab",3]]],[[]],[[["lch",3]]],[[]],[[["luma",3]]],[[]],[[["rgb",3]]],[[]],[[["xyz",3]]],[[]],[[["yxy",3]]],[[]],[[["labhue",3]],["labhue",3]],[[],["labhue",3]],[[["rgbhue",3]],["rgbhue",3]],[[],["rgbhue",3]],[[["prealpha",3]]],[[]],[[["alpha",3]]],[[]],[[["hsl",3]]],[[]],[[["hsv",3]]],[[]],[[["hwb",3]]],[[]],[[["lab",3]]],[[]],[[["lch",3]]],[[]],[[["luma",3]]],[[]],[[["rgb",3]]],[[]],[[["xyz",3]]],[[]],[[["yxy",3]]],[[]],[[["labhue",3]],["labhue",3]],[[],["labhue",3]],[[["rgbhue",3]],["rgbhue",3]],[[],["rgbhue",3]],[[["prealpha",3]]],[[]],[[["alpha",3]]],[[]],[[["lab",3]]],[[]],[[["luma",3]]],[[]],[[["rgb",3]]],[[]],[[["xyz",3]]],[[]],[[["yxy",3]]],[[]],[[["prealpha",3]]],[[]],[[["alpha",3]]],[[]],[[["hsl",3]]],[[]],[[["hsv",3]]],[[]],[[["hwb",3]]],[[]],[[["lab",3]]],[[]],[[["lch",3]]],[[]],[[["luma",3]]],[[]],[[["rgb",3]]],[[]],[[["xyz",3]]],[[]],[[["yxy",3]]],[[]],[[["labhue",3]]],[[]],[[["rgbhue",3]]],[[]],[[["prealpha",3]]],[[]],[[["alpha",3]]],[[]],[[["hsl",3]]],[[]],[[["hsv",3]]],[[]],[[["hwb",3]]],[[]],[[["lab",3]]],[[]],[[["lch",3]]],[[]],[[["luma",3]]],[[]],[[["rgb",3]]],[[]],[[["xyz",3]]],[[]],[[["yxy",3]]],[[]],[[["labhue",3]]],[[]],[[["rgbhue",3]]],[[]],[[["prealpha",3]]],[[]],[[["alpha",3]]],[[]],[[["lab",3]]],[[]],[[["luma",3]]],[[]],[[["rgb",3]]],[[]],[[["xyz",3]]],[[]],[[["yxy",3]]],[[]],[[["prealpha",3]]],[[]],[[["alpha",3]]],[[]],[[["lab",3]]],[[]],[[["luma",3]]],[[]],[[["rgb",3]]],[[]],[[["xyz",3]]],[[]],[[["yxy",3]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["str",15]],[[]],[[["prealpha",3]],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[["prealpha",3]],["bool",15]],[[]],[[["range",3]],["bool",15]],[[]],[[["alpha",3]],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["u32",15]],[[["prealpha",3],["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15],["range",3]],["bool",15]],[[],["u32",15]],[[["u32",15],["alpha",3]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[],["u32",15]],[[["u32",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["equation",4]],["equations",3]],[[["parameter",4]],["equations",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["into",8],["rgbhue",3]],[["hsl",3],["srgb",3]]],[[["into",8],["rgbhue",3]],["hsl",3]],[[]],[[]],[[["into",8],["rgbhue",3]]],[[["into",8],["rgbhue",3]]],[[]],[[]],[[["into",8],["rgbhue",3]],[["hsv",3],["srgb",3]]],[[["into",8],["rgbhue",3]],["hsv",3]],[[]],[[]],[[["into",8],["rgbhue",3]]],[[["into",8],["rgbhue",3]]],[[]],[[]],[[["into",8],["rgbhue",3]],[["srgb",3],["hwb",3]]],[[["into",8],["rgbhue",3]],["hwb",3]],[[]],[[]],[[["into",8],["rgbhue",3]]],[[["into",8],["rgbhue",3]]],[[]],[[]],[[],[["lab",3],["d65",3]]],[[],["lab",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["into",8],["labhue",3]],[["lch",3],["d65",3]]],[[["into",8],["labhue",3]],["lch",3]],[[]],[[]],[[["into",8],["labhue",3]]],[[["into",8],["labhue",3]]],[[]],[[]],[[],["luma",3]],[[],[["component",8],["luma",3]]],[[["component",8],["luma",3]]],[[]],[[]],[[],[["linear",3],["luma",3]]],[[["linear",3],["luma",3]],["luma",3]],[[],[["luma",3],["lumastandard",8]]],[[["luma",3],["lumastandard",8]],["luma",3]],[[]],[[],[["alpha",3],["component",8],["luma",3]]],[[["alpha",3],["component",8],["luma",3]]],[[]],[[]],[[],[["luma",3],["alpha",3]]],[[["luma",3],["alpha",3]],[["alpha",3],["luma",3]]],[[],[["luma",3],["alpha",3]]],[[["luma",3],["alpha",3]],[["alpha",3],["luma",3]]],[[],["rgb",3]],[[],[["rgb",3],["component",8]]],[[["rgb",3],["component",8]]],[[]],[[]],[[],[["linear",3],["rgb",3]]],[[["linear",3],["rgb",3]],["rgb",3]],[[],[["rgb",3],["rgbstandard",8]]],[[["rgb",3],["rgbstandard",8]],["rgb",3]],[[]],[[],[["alpha",3],["rgb",3],["component",8]]],[[["alpha",3],["rgb",3],["component",8]]],[[]],[[]],[[],[["alpha",3],["rgb",3]]],[[["alpha",3],["rgb",3]]],[[],[["rgb",3],["alpha",3]]],[[["rgb",3],["alpha",3]]],[[],[["xyz",3],["d65",3]]],[[],["xyz",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["yxy",3],["d65",3]]],[[],["yxy",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["labhue",3]],[[],["labhue",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rgbhue",3]],[[],["rgbhue",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["yxy",3]]],[[["lab",3]]],[[["lch",3]]],[[["linear",3],["rgb",3]]],[[["rgbspace",8],["hsl",3]]],[[["rgbspace",8],["hsv",3]]],[[["hwb",3],["rgbspace",8]]],[[["linear",3],["luma",3]]],[[],["yxy",3]],[[],["lab",3]],[[],["lch",3]],[[],[["linear",3],["rgb",3]]],[[],[["rgbspace",8],["hsl",3]]],[[],[["rgbspace",8],["hsv",3]]],[[],[["hwb",3],["rgbspace",8]]],[[],[["linear",3],["luma",3]]],[[]],[[]],null],"p":[[4,"Equation"],[3,"Equations"],[4,"Parameter"],[3,"Parameters"],[3,"PreAlpha"],[8,"Blend"],[8,"BlendFunction"],[3,"Gradient"],[3,"Slice"],[3,"Luma"],[8,"LumaStandard"],[3,"Rgb"],[8,"RgbStandard"],[8,"RgbSpace"],[8,"Primaries"],[4,"Method"],[3,"ConeResponseMatrices"],[8,"TransformMatrix"],[8,"AdaptFrom"],[8,"AdaptInto"],[8,"Number"],[8,"RawPixelSized"],[8,"RawPixel"],[8,"Pixel"],[8,"TransferFn"],[8,"WhitePoint"],[8,"Float"],[3,"Alpha"],[3,"Hsl"],[3,"Hsv"],[3,"Hwb"],[3,"Lab"],[3,"Lch"],[3,"Xyz"],[3,"Yxy"],[8,"ConvertFrom"],[8,"ConvertInto"],[8,"FromColor"],[8,"IntoColor"],[8,"Limited"],[8,"Mix"],[8,"Shade"],[8,"GetHue"],[8,"Hue"],[8,"Saturate"],[8,"ComponentWise"],[8,"Component"],[3,"Take"],[3,"Range"],[3,"LabHue"],[3,"RgbHue"],[3,"OutOfBounds"],[3,"Srgb"],[3,"Gamma"],[3,"GammaFn"],[3,"F2p2"],[3,"Linear"],[3,"LinearFn"],[3,"A"],[3,"B"],[3,"C"],[3,"D50"],[3,"D55"],[3,"D65"],[3,"D75"],[3,"E"],[3,"F2"],[3,"F7"],[3,"F11"],[3,"D50Degree10"],[3,"D55Degree10"],[3,"D65Degree10"],[3,"D75Degree10"]]},\
"palette_derive":{"doc":"Derives traits from the palette crate.","t":[24,24,24],"n":["FromColor","IntoColor","Pixel"],"q":["palette_derive","",""],"d":["","",""],"i":[0,0,0],"f":[null,null,null],"p":[]},\
"paste":{"doc":"github crates-io docs-rs","t":[14],"n":["paste"],"q":["paste"],"d":[""],"i":[0],"f":[null],"p":[]},\
"pest":{"doc":"pest. The Elegant Parser","t":[0,3,12,12,12,4,13,12,12,13,12,4,13,13,4,13,13,11,11,11,11,0,3,3,3,3,0,4,13,13,3,11,3,11,11,8,10,5,4,13,13,13,4,13,13,13,4,13,13,6,3,3,3,3,4,13,12,12,13,12,12,8,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["error","Error","variant","location","line_col","ErrorVariant","ParsingError","positives","negatives","CustomError","message","InputLocation","Pos","Span","LineColLocation","Pos","Span","new_from_pos","new_from_span","with_path","renamed_rules","iterators","FlatPairs","Pair","Pairs","Tokens","prec_climber","Assoc","Left","Right","Operator","new","PrecClimber","new","climb","Parser","parse","state","Atomicity","Atomic","CompoundAtomic","NonAtomic","Lookahead","Positive","Negative","None","MatchDir","BottomToTop","TopToBottom","ParseResult","ParserState","Position","Lines","Span","Token","Start","rule","pos","End","rule","pos","RuleType","parses_to","fails_with","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","next_back","next_back","next_back","next","next","next","next","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","eq","eq","eq","eq","eq","eq","ne","partial_cmp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","bitor","hash","hash","hash","hash","hash","hash","hash","hash","hash","description","tokens","as_rule","as_str","into_span","as_span","into_inner","tokens","single","as_str","concat","flatten","tokens","peek","new","position","atomicity","rule","sequence","repeat","optional","match_char_by","match_string","match_insensitive","match_range","skip","skip_until","start_of_input","end_of_input","lookahead","atomic","stack_push","stack_peek","stack_pop","stack_match_peek_slice","stack_match_peek","stack_match_pop","stack_drop","restore_on_err","new","from_start","pos","span","line_col","line_of","new","start","end","start_pos","end_pos","split","as_str","lines"],"q":["pest","pest::error","","","","","","pest::error::ErrorVariant","","pest::error","pest::error::ErrorVariant","pest::error","","","","","","","","","","pest","pest::iterators","","","","pest","pest::prec_climber","","","","","","","","pest","","","","","","","","","","","","","","","","","","","","","pest::Token","","pest","pest::Token","","pest","","","pest::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pest::iterators","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pest","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pest::prec_climber","","","","","","","","","","","","","","","","","","","","","","","pest","","","","","","","","","","","","","","","","","","","","","","","","","","pest::iterators","","","","","","pest","pest::error","","","","pest::iterators","","","","pest","","","","pest::prec_climber","pest","","","pest::error","","","","","","","","pest::iterators","","pest","","","","pest::prec_climber","pest","","","","pest::error","","","","pest::iterators","","","","pest","","","","","pest::prec_climber","","","pest","","pest::error","pest::iterators","","pest::prec_climber","pest::error","","","","pest::iterators","","pest","","","pest::error","pest::iterators","","","","","","","","","","","","","pest","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Types for different kinds of parsing failures.","Parse-related error type.","Variant of the error","Location within the input string","Line/column within the input string","Different kinds of parsing errors.","Generated parsing error with expected and unexpected <code>Rule</code>s","Positive attempts","Negative attempts","Custom error with a message","Short explanation","Where an <code>Error</code> has occurred.","<code>Error</code> was created by <code>Error::new_from_pos</code>","<code>Error</code> was created by <code>Error::new_from_span</code>","Line/column where an <code>Error</code> has occurred.","Line/column pair if <code>Error</code> was created by …","Line/column pairs if <code>Error</code> was created by …","Creates <code>Error</code> from <code>ErrorVariant</code> and <code>Position</code>.","Creates <code>Error</code> from <code>ErrorVariant</code> and <code>Span</code>.","Returns <code>Error</code> variant with <code>path</code> which is shown when …","Renames all <code>Rule</code>s if this is a <code>ParsingError</code>. It does …","Types and iterators for parser output.","An iterator over <code>Pair</code>s. It is created by <code>Pairs::flatten</code>.","A matching pair of <code>Token</code>s and everything between them.","An iterator over <code>Pair</code>s. It is created by <code>pest::state</code> and …","An iterator over <code>Token</code>s. It is created by <code>Pair::tokens</code> …","Constructs useful in infix operator parsing with the …","Associativity of an <code>Operator</code>.","Left <code>Operator</code> associativity","Right <code>Operator</code> associativity","Infix operator used in <code>PrecClimber</code>.","Creates a new <code>Operator</code> from a <code>Rule</code> and <code>Assoc</code>.","List of operators and precedences, which can perform …","Creates a new <code>PrecClimber</code> from the <code>Operator</code>s contained in …","Performs the precedence climbing algorithm on the <code>pairs</code> …","A trait with a single method that parses strings.","Parses a <code>&str</code> starting from <code>rule</code>.","Creates a <code>ParserState</code> from a <code>&str</code>, supplying it to a …","The current atomicity of a <code>ParserState</code>.","","","","The current lookahead status of a <code>ParserState</code>.","","","","Match direction for the stack. Used in <code>PEEK[a..b]</code>/…","","","Type alias to simplify specifying the return value of …","The complete state of a <code>Parser</code>.","A cursor position in a <code>&str</code> which provides useful methods …","Line iterator for Spans, created by <code>Span::lines()</code>.","A span over a <code>&str</code>. It is created from either two <code>Position</code>…","A token generated by a <code>Parser</code>.","The starting <code>Position</code> of a matched <code>Rule</code>","","","The ending <code>Position</code> of a matched <code>Rule</code>","","","A trait which parser rules must implement.","Testing tool that compares produced tokens.","Testing tool that compares produced errorseturns the <code>Tokens</code> for these pairs.","Returns the <code>Rule</code> of the <code>Pair</code>.","Captures a slice from the <code>&str</code> defined by the token <code>Pair</code>.","Returns the <code>Span</code> defined by the <code>Pair</code>, consuming it.","Returns the <code>Span</code> defined by the <code>Pair</code>, <strong>without</strong> consuming …","Returns the inner <code>Pairs</code> between the <code>Pair</code>, consuming it.","Returns the <code>Tokens</code> for the <code>Pair</code>.","Create a new <code>Pairs</code> iterator containing just the single …","Captures a slice from the <code>&str</code> defined by the starting …","Captures inner token <code>Pair</code>s and concatenates resulting <code>&str</code>…","Flattens the <code>Pairs</code>.","Returns the <code>Tokens</code> for the <code>Pairs</code>.","Peek at the first inner <code>Pair</code> without changing the …","Allocates a fresh <code>ParserState</code> object to the heap and …","Returns a reference to the current <code>Position</code> of the …","Returns the current atomicity of the <code>ParserState</code>.","Wrapper needed to generate tokens. This will associate …","Starts a sequence of transformations provided by <code>f</code> from …","Repeatedly applies the transformation provided by <code>f</code> from …","Optionally applies the transformation provided by <code>f</code> from …","Attempts to match a single character based on a filter …","Attempts to match the given string. Returns <code>Ok</code> with the …","Attempts to case-insensitively match the given string. …","Attempts to match a single character from the given …","Attempts to skip <code>n</code> characters forward. Returns <code>Ok</code> with …","Attempts to skip forward until one of the given strings …","Attempts to match the start of the input. Returns <code>Ok</code> with …","Attempts to match the end of the input. Returns <code>Ok</code> with …","Starts a lookahead transformation provided by <code>f</code> from the …","Transformation which stops <code>Token</code>s from being generated …","Evaluates the result of closure <code>f</code> and pushes the span of …","Peeks the top of the stack and attempts to match the …","Pops the top of the stack and attempts to match the …","Matches part of the state of the stack.","Matches the full state of the stack.","Matches the full state of the stack. This method will …","Drops the top of the stack. Returns <code>Ok(Box<ParserState>)</code> …","Restores the original state of the <code>ParserState</code> when <code>f</code> …","Attempts to create a new <code>Position</code> at the given position. …","Creates a <code>Position</code> at the start of a <code>&str</code>.","Returns the byte position of this <code>Position</code> as a <code>usize</code>.","Creates a <code>Span</code> from two <code>Position</code>s.","Returns the line and column number of this <code>Position</code>.","Returns the entire line of the input that contains this …","Attempts to create a new span. Will return <code>None</code> if …","Returns the <code>Span</code>’s start byte position as a <code>usize</code>.","Returns the <code>Span</code>’s end byte position as a <code>usize</code>.","Returns the <code>Span</code>’s start <code>Position</code>.","Returns the <code>Span</code>’s end <code>Position</code>.","Splits the <code>Span</code> into a pair of <code>Position</code>s.","Captures a slice from the <code>&str</code> defined by the <code>Span</code>.","Iterates over all lines (partially) covered by this span."],"i":[0,0,1,1,1,0,2,3,3,2,4,0,5,5,0,6,6,1,1,1,1,0,0,0,0,0,0,0,7,7,0,8,0,9,9,0,10,0,0,11,11,11,0,12,12,12,0,13,13,0,0,0,0,0,0,14,15,15,14,16,16,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,9,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,14,14,14,14,14,14,14,14,14,17,19,20,17,19,20,24,1,2,5,6,17,18,19,20,12,11,13,22,7,23,14,22,1,1,2,2,5,5,6,6,18,19,12,11,13,22,7,23,14,14,22,1,2,5,6,17,18,19,20,12,11,13,21,22,7,8,9,23,14,1,18,19,8,1,2,5,6,18,19,22,23,14,1,17,18,18,18,18,18,18,19,19,19,19,19,19,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,23,23,23,23,23,23,23,23],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["errorvariant",4],["position",3]],["error",3]],[[["errorvariant",4],["span",3]],["error",3]],[[["str",15]],["error",3]],[[],["error",3]],null,null,null,null,null,null,null,null,null,null,[[["assoc",4]],["operator",3]],null,[[["vec",3],["operator",3]],["precclimber",3]],[[]],null,[[["str",15]],[["pairs",3],["result",4],["error",3]]],[[["str",15]],[["pairs",3],["error",3],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],[["str",15],["option",4]]],[[],["error",3]],[[],["errorvariant",4]],[[],["inputlocation",4]],[[],["linecollocation",4]],[[],["flatpairs",3]],[[],["pair",3]],[[],["pairs",3]],[[],["tokens",3]],[[],["lookahead",4]],[[],["atomicity",4]],[[],["matchdir",4]],[[],["position",3]],[[],["assoc",4]],[[],["span",3]],[[],["token",4]],[[["position",3]],["ordering",4]],[[["error",3]],["bool",15]],[[["error",3]],["bool",15]],[[["errorvariant",4]],["bool",15]],[[["errorvariant",4]],["bool",15]],[[["inputlocation",4]],["bool",15]],[[["inputlocation",4]],["bool",15]],[[["linecollocation",4]],["bool",15]],[[["linecollocation",4]],["bool",15]],[[["pair",3]],["bool",15]],[[["pairs",3]],["bool",15]],[[["lookahead",4]],["bool",15]],[[["atomicity",4]],["bool",15]],[[["matchdir",4]],["bool",15]],[[["position",3]],["bool",15]],[[["assoc",4]],["bool",15]],[[["span",3]],["bool",15]],[[["token",4]],["bool",15]],[[["token",4]],["bool",15]],[[["position",3]],[["option",4],["ordering",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[],["tokens",3]],[[]],[[],["str",15]],[[],["span",3]],[[],["span",3]],[[],["pairs",3]],[[],["tokens",3]],[[["pair",3]]],[[],["str",15]],[[],["string",3]],[[],["flatpairs",3]],[[],["tokens",3]],[[],[["option",4],["pair",3]]],[[["str",15]],["box",3]],[[],["position",3]],[[],["atomicity",4]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3],["str",15]],[["box",3],["parseresult",6]]],[[["box",3],["str",15]],[["box",3],["parseresult",6]]],[[["box",3],["char",15],["range",3]],[["box",3],["parseresult",6]]],[[["box",3],["usize",15]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3],["bool",15]],[["box",3],["parseresult",6]]],[[["box",3],["atomicity",4]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["matchdir",4],["option",4],["box",3],["i32",15]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["box",3]],[["box",3],["parseresult",6]]],[[["usize",15],["str",15]],[["position",3],["option",4]]],[[["str",15]],["position",3]],[[],["usize",15]],[[["position",3]],["span",3]],[[]],[[],["str",15]],[[["usize",15],["str",15]],[["span",3],["option",4]]],[[],["usize",15]],[[],["usize",15]],[[],["position",3]],[[],["position",3]],[[]],[[],["str",15]],[[],["lines",3]]],"p":[[3,"Error"],[4,"ErrorVariant"],[13,"ParsingError"],[13,"CustomError"],[4,"InputLocation"],[4,"LineColLocation"],[4,"Assoc"],[3,"Operator"],[3,"PrecClimber"],[8,"Parser"],[4,"Atomicity"],[4,"Lookahead"],[4,"MatchDir"],[4,"Token"],[13,"Start"],[13,"End"],[3,"FlatPairs"],[3,"Pair"],[3,"Pairs"],[3,"Tokens"],[3,"ParserState"],[3,"Position"],[3,"Span"],[3,"Lines"]]},\
"pest_derive":{"doc":"pest. The Elegant Parser","t":[24],"n":["Parser"],"q":["pest_derive"],"d":[""],"i":[0],"f":[null],"p":[]},\
"pest_generator":{"doc":"","t":[5],"n":["derive_parser"],"q":["pest_generator"],"d":[""],"i":[0],"f":[[[["bool",15],["tokenstream",3]],["tokenstream",3]]],"p":[]},\
"pest_meta":{"doc":"","t":[0,3,12,12,12,4,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,3,11,0,5,3,12,12,12,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,3,11,0,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,5,3,12,12,12,12,3,12,12,11,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,5,0,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ast","Rule","name","ty","expr","RuleType","Normal","Silent","Atomic","CompoundAtomic","NonAtomic","Expr","Str","Insens","Range","Ident","PeekSlice","PosPred","NegPred","Seq","Choice","Opt","Rep","RepOnce","RepExact","RepMin","RepMax","RepMinMax","Skip","Push","iter_top_down","map_top_down","map_bottom_up","ExprTopDownIterator","new","optimizer","optimize","OptimizedRule","name","ty","expr","OptimizedExpr","Str","Insens","Range","Ident","PeekSlice","PosPred","NegPred","Seq","Choice","Opt","Rep","Skip","Push","RestoreOnErr","iter_top_down","map_top_down","map_bottom_up","OptimizedExprTopDownIterator","new","parser","PestParser","Rule","EOI","grammar_rules","grammar_rule","assignment_operator","opening_brace","closing_brace","opening_paren","closing_paren","opening_brack","closing_brack","modifier","silent_modifier","atomic_modifier","compound_atomic_modifier","non_atomic_modifier","expression","term","node","terminal","prefix_operator","infix_operator","postfix_operator","positive_predicate_operator","negative_predicate_operator","sequence_operator","choice_operator","optional_operator","repeat_operator","repeat_once_operator","repeat_exact","repeat_min","repeat_max","repeat_min_max","number","integer","comma","_push","peek_slice","identifier","alpha","alpha_num","string","insensitive_string","range","character","inner_str","inner_chr","escape","code","unicode","hex_digit","quote","single_quote","range_operator","newline","WHITESPACE","block_comment","COMMENT","parse","ParserRule","name","span","ty","node","ParserNode","expr","span","filter_map_top_down","ParserExpr","Str","Insens","Range","Ident","PeekSlice","PosPred","NegPred","Seq","Choice","Opt","Rep","RepOnce","RepExact","RepMin","RepMax","RepMinMax","Push","consume_rules","validator","validate_pairs","validate_rust_keywords","validate_pest_keywords","validate_already_defined","validate_undefined","validate_ast","unwrap_or_report","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","next","next","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","partial_cmp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","hash","parse"],"q":["pest_meta","pest_meta::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pest_meta","pest_meta::optimizer","","","","","","","","","","","","","","","","","","","","","","","","","pest_meta","pest_meta::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pest_meta","pest_meta::validator","","","","","","pest_meta","pest_meta::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pest_meta::optimizer","","","","","","","","","","","","","","","","","","","","","","","","","","pest_meta::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pest_meta::ast","pest_meta::optimizer","pest_meta::ast","","","pest_meta::optimizer","","pest_meta::parser","","","","","pest_meta::ast","","","","","pest_meta::optimizer","","","","pest_meta::parser","","","","","","","","pest_meta::ast","","","pest_meta::optimizer","","pest_meta::parser","","","","",""],"d":["","","","","","","","","","","","","Matches an exact string, e.g. <code>\\\"a\\\"</code>","Matches an exact string, case insensitively (ASCII only), …","Matches one character in the range, e.g. <code>\'a\'..\'z\'</code>","Matches the rule with the given name, e.g. <code>a</code>","Matches a custom part of the stack, e.g. <code>PEEK[..]</code>","Positive lookahead; matches expression without making …","Negative lookahead; matches if expression doesn’t …","Matches a sequence of two expressions, e.g. <code>e1 ~ e2</code>","Matches either of two expressions, e.g. <code>e1 | e2</code>","Optionally matches an expression, e.g. <code>e?</code>","Matches an expression zero or more times, e.g. <code>e*</code>","Matches an expression one or more times, e.g. <code>e+</code>","Matches an expression an exact number of times, e.g. <code>e{n}</code>","Matches an expression at least a number of times, e.g. …","Matches an expression at most a number of times, e.g. …","Matches an expression a number of times within a range, …","Continues to match expressions until one of the strings …","Matches an expression and pushes it to the stack, e.g. …i":[0,0,1,1,1,0,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,4,0,0,0,5,5,5,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,7,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,9,9,9,9,0,10,10,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,12,12,12,12,12,12,12,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,4,7,1,2,3,5,6,8,9,10,11,8,1,1,2,3,3,5,5,6,6,8,9,9,10,10,11,11,8,1,2,3,5,6,8,9,10,11,8,12],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["exprtopdowniterator",3]],[[],["expr",4]],[[],["expr",4]],null,[[["expr",4]]],null,[[["vec",3],["rule",3]],[["optimizedrule",3],["vec",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["optimizedexprtopdowniterator",3]],[[],["optimizedexpr",4]],[[],["optimizedexpr",4]],null,[[["optimizedexpr",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15],["rule",4]],[["pairs",3],["error",3],["result",4]]],null,null,null,null,null,null,null,null,[[],["vec",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["pairs",3],["rule",4]],[["vec",3],["vec",3],["result",4]]],null,[[["pairs",3],["rule",4]],[["vec",3],["vec",3],["result",4]]],[[["hashset",3],["vec",3]],[["vec",3],["error",3]]],[[["hashset",3],["vec",3]],[["vec",3],["error",3]]],[[["vec",3]],[["vec",3],["error",3]]],[[["hashset",3],["vec",3]],[["vec",3],["error",3]]],[[["vec",3]],[["vec",3],["error",3]]],[[["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["option",4]],[[],["rule",3]],[[],["ruletype",4]],[[],["expr",4]],[[],["optimizedrule",3]],[[],["optimizedexpr",4]],[[],["rule",4]],[[],["parserrule",3]],[[],["parsernode",3]],[[],["parserexpr",4]],[[["rule",4]],["ordering",4]],[[["rule",3]],["bool",15]],[[["rule",3]],["bool",15]],[[["ruletype",4]],["bool",15]],[[["expr",4]],["bool",15]],[[["expr",4]],["bool",15]],[[["optimizedrule",3]],["bool",15]],[[["optimizedrule",3]],["bool",15]],[[["optimizedexpr",4]],["bool",15]],[[["optimizedexpr",4]],["bool",15]],[[["rule",4]],["bool",15]],[[["parserrule",3]],["bool",15]],[[["parserrule",3]],["bool",15]],[[["parsernode",3]],["bool",15]],[[["parsernode",3]],["bool",15]],[[["parserexpr",4]],["bool",15]],[[["parserexpr",4]],["bool",15]],[[["rule",4]],[["ordering",4],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["str",15],["rule",4]],[["error",3],["pairs",3],["result",4]]]],"p":[[3,"Rule"],[4,"RuleType"],[4,"Expr"],[3,"ExprTopDownIterator"],[3,"OptimizedRule"],[4,"OptimizedExpr"],[3,"OptimizedExprTopDownIterator"],[4,"Rule"],[3,"ParserRule"],[3,"ParserNode"],[4,"ParserExpr"],[3,"PestParser"]]},\
"phf":{"doc":"Compile-time generated maps and sets.","t":[0,3,11,11,11,11,11,11,11,11,11,3,3,3,0,3,11,11,11,11,11,11,11,11,3,8,10,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["map","Map","is_empty","len","contains_key","get","get_key","get_entry","entries","keys","values","Entries","Keys","Values","set","Set","len","is_empty","get_key","contains","iter","is_disjoint","is_subset","is_superset","Iter","PhfHash","phf_hash","phf_hash_slice","Map","Set","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","next_back","next_back","next_back","next_back","next","size_hint","next","size_hint","next","size_hint","next","size_hint","fmt","fmt","index"],"q":["phf","phf::map","","","","","","","","","","","","","phf","phf::set","","","","","","","","","","phf","","","","","","","","","","","","phf::map","","","","","","","","","","","","","","","","","","","","","","","","phf","","","","","","","phf::set","","","","","","","","phf::map","","","phf::set","phf::map","","","","","","phf::set","","phf","",""],"d":["An immutable map constructed at compile time.","An immutable map constructed at compile time.","Returns true if the <code>Map</code> is empty.","Returns the number of entries in the <code>Map</code>.","Determines if <code>key</code> is in the <code>Map</code>.","Returns a reference to the value that <code>key</code> maps to.","Returns a reference to the map’s internal static …","Like <code>get</code>, but returns both the key and the value.","Returns an iterator over the key/value pairs in the map.","Returns an iterator over the keys in the map.","Returns an iterator over the values in the map.","An iterator over the key/value pairs in a <code>Map</code>.","An iterator over the keys in a <code>Map</code>.","An iterator over the values in a <code>Map</code>.","An immutable set constructed at compile time.","An immutable set constructed at compile time.","Returns the number of elements in the <code>Set</code>.","Returns true if the <code>Set</code> contains no elements.","Returns a reference to the set’s internal static …","Returns true if <code>value</code> is in the <code>Set</code>.","Returns an iterator over the values in the set.","Returns true if <code>other</code> shares no elements with <code>self</code>.","Returns true if <code>other</code> contains all values in <code>self</code>.","Returns true if <code>self</code> contains all values in <code>other</code>.","An iterator over the values in a <code>Set</code>.","A trait implemented by types which can be used in PHF …","Feeds the value into the state given, updating the hasher …","Feeds a slice of this type into the state provided.","An immutable map constructed at compile time.","An immutable set constructed at compile time.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,3,3,0,0,1,1,1,1,1,1,1,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,2,2,2,2,2,2,2,7,7,7,7,7,7,7,7,4,5,6,7,4,4,5,5,6,6,7,7,1,2,1],"f":[null,null,[[],["bool",15]],[[],["usize",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["entries",3]],[[],["keys",3]],[[],["values",3]],null,null,null,null,null,[[],["usize",15]],[[],["bool",15]],[[],["option",4]],[[],["bool",15]],[[],["iter",3]],[[["set",3]],["bool",15]],[[["set",3]],["bool",15]],[[["set",3]],["bool",15]],null,null,[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]]],"p":[[3,"Map"],[3,"Set"],[8,"PhfHash"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"Iter"]]},\
"phf_shared":{"doc":"","t":[3,12,12,12,6,5,5,5,8,10,11,8,10,11,11,11,11,11,11,11],"n":["Hashes","g","f1","f2","HashKey","displace","hash","get_index","PhfHash","phf_hash","phf_hash_slice","FmtConst","fmt_const","from","into","borrow","borrow_mut","try_from","try_into","type_id"],"q":["phf_shared","","","","","","","","","","","","","","","","","","",""],"d":["","","","","A central typedef for hash keys","","<code>key</code> is from <code>phf_generator::HashState</code>.","Return an index into <code>phf_generator::HashState::map</code>.","A trait implemented by types which can be used in PHF …","Feeds the value into the state given, updating the hasher …","Feeds a slice of this type into the state provided.","Trait for printing types with <code>const</code> constructors, used by …","Print a <code>const</code> expression representing this value.","","","","","","",""],"i":[0,1,1,1,0,0,0,0,0,2,2,0,3,1,1,1,1,1,1,1],"f":[null,null,null,null,null,[[["u32",15]],["u32",15]],[[["hashkey",6]],["hashes",3]],[[["usize",15],["hashes",3]],["u32",15]],null,[[]],[[]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Hashes"],[8,"PhfHash"],[8,"FmtConst"]]},\
"physical_constants":{"doc":"Provides access to the CODATA recommended values for …","tn":["LATTICE_SPACING_220_OF_SILICON","ALPHA_PARTICLE_ELECTRON_MASS_RATIO","ALPHA_PARTICLE_MASS","ALPHA_PARTICLE_MASS_ENERGY_EQUIVALENT","ALPHA_PARTICLE_MASS_ENERGY_EQUIVALENT_IN_MEV","ALPHA_PARTICLE_MASS_IN_U","ALPHA_PARTICLE_MOLAR_MASS","ALPHA_PARTICLE_PROTON_MASS_RATIO","ANGSTROM_STAR","ATOMIC_MASS_CONSTANT","ATOMIC_MASS_CONSTANT_ENERGY_EQUIVALENT","ATOMIC_MASS_CONSTANT_ENERGY_EQUIVALENT_IN_MEV","ATOMIC_MASS_UNIT_ELECTRON_VOLT_RELATIONSHIP","ATOMIC_MASS_UNIT_HARTREE_RELATIONSHIP","ATOMIC_MASS_UNIT_HERTZ_RELATIONSHIP","ATOMIC_MASS_UNIT_INVERSE_METER_RELATIONSHIP","ATOMIC_MASS_UNIT_JOULE_RELATIONSHIP","ATOMIC_MASS_UNIT_KELVIN_RELATIONSHIP","ATOMIC_MASS_UNIT_KILOGRAM_RELATIONSHIP","ATOMIC_UNIT_OF_1ST_HYPERPOLARIZABILITY","ATOMIC_UNIT_OF_2ND_HYPERPOLARIZABILITY","ATOMIC_UNIT_OF_ACTION","ATOMIC_UNIT_OF_CHARGE","ATOMIC_UNIT_OF_CHARGE_DENSITY","ATOMIC_UNIT_OF_CURRENT","ATOMIC_UNIT_OF_ELECTRIC_DIPOLE_MOM","ATOMIC_UNIT_OF_ELECTRIC_FIELD","ATOMIC_UNIT_OF_ELECTRIC_FIELD_GRADIENT","ATOMIC_UNIT_OF_ELECTRIC_POLARIZABILITY","ATOMIC_UNIT_OF_ELECTRIC_POTENTIAL","ATOMIC_UNIT_OF_ELECTRIC_QUADRUPOLE_MOM","ATOMIC_UNIT_OF_ENERGY","ATOMIC_UNIT_OF_FORCE","ATOMIC_UNIT_OF_LENGTH","ATOMIC_UNIT_OF_MAG_DIPOLE_MOM","ATOMIC_UNIT_OF_MAG_FLUX_DENSITY","ATOMIC_UNIT_OF_MAGNETIZABILITY","ATOMIC_UNIT_OF_MASS","ATOMIC_UNIT_OF_MOMENTUM","ATOMIC_UNIT_OF_PERMITTIVITY","ATOMIC_UNIT_OF_TIME","ATOMIC_UNIT_OF_VELOCITY","AVOGADRO_CONSTANT","BOHR_MAGNETON","BOHR_MAGNETON_IN_EV_PER_T","BOHR_MAGNETON_IN_HZ_PER_T","BOHR_MAGNETON_IN_INVERSE_METERS_PER_TESLA","BOHR_MAGNETON_IN_K_PER_T","BOHR_RADIUS","BOLTZMANN_CONSTANT","BOLTZMANN_CONSTANT_IN_EV_PER_K","BOLTZMANN_CONSTANT_IN_HZ_PER_K","BOLTZMANN_CONSTANT_IN_INVERSE_METERS_PER_KELVIN","CHARACTERISTIC_IMPEDANCE_OF_VACUUM","CLASSICAL_ELECTRON_RADIUS","COMPTON_WAVELENGTH","COMPTON_WAVELENGTH_OVER_2_PI","CONDUCTANCE_QUANTUM","CONVENTIONAL_VALUE_OF_JOSEPHSON_CONSTANT","CONVENTIONAL_VALUE_OF_VON_KLITZING_CONSTANT","CU_X_UNIT","DEUTERON_ELECTRON_MAG_MOM_RATIO","DEUTERON_ELECTRON_MASS_RATIO","DEUTERON_G_FACTOR","DEUTERON_MAG_MOM","DEUTERON_MAG_MOM_TO_BOHR_MAGNETON_RATIO","DEUTERON_MAG_MOM_TO_NUCLEAR_MAGNETON_RATIO","DEUTERON_MASS","DEUTERON_MASS_ENERGY_EQUIVALENT","DEUTERON_MASS_ENERGY_EQUIVALENT_IN_MEV","DEUTERON_MASS_IN_U","DEUTERON_MOLAR_MASS","DEUTERON_NEUTRON_MAG_MOM_RATIO","DEUTERON_PROTON_MAG_MOM_RATIO","DEUTERON_PROTON_MASS_RATIO","DEUTERON_RMS_CHARGE_RADIUS","ELECTRIC_CONSTANT","ELECTRON_CHARGE_TO_MASS_QUOTIENT","ELECTRON_DEUTERON_MAG_MOM_RATIO","ELECTRON_DEUTERON_MASS_RATIO","ELECTRON_G_FACTOR","ELECTRON_GYROMAG_RATIO","ELECTRON_GYROMAG_RATIO_OVER_2_PI","ELECTRON_HELION_MASS_RATIO","ELECTRON_MAG_MOM","ELECTRON_MAG_MOM_ANOMALY","ELECTRON_MAG_MOM_TO_BOHR_MAGNETON_RATIO","ELECTRON_MAG_MOM_TO_NUCLEAR_MAGNETON_RATIO","ELECTRON_MASS","ELECTRON_MASS_ENERGY_EQUIVALENT","ELECTRON_MASS_ENERGY_EQUIVALENT_IN_MEV","ELECTRON_MASS_IN_U","ELECTRON_MOLAR_MASS","ELECTRON_MUON_MAG_MOM_RATIO","ELECTRON_MUON_MASS_RATIO","ELECTRON_NEUTRON_MAG_MOM_RATIO","ELECTRON_NEUTRON_MASS_RATIO","ELECTRON_PROTON_MAG_MOM_RATIO","ELECTRON_PROTON_MASS_RATIO","ELECTRON_TAU_MASS_RATIO","ELECTRON_TO_ALPHA_PARTICLE_MASS_RATIO","ELECTRON_TO_SHIELDED_HELION_MAG_MOM_RATIO","ELECTRON_TO_SHIELDED_PROTON_MAG_MOM_RATIO","ELECTRON_TRITON_MASS_RATIO","ELECTRON_VOLT","ELECTRON_VOLT_ATOMIC_MASS_UNIT_RELATIONSHIP","ELECTRON_VOLT_HARTREE_RELATIONSHIP","ELECTRON_VOLT_HERTZ_RELATIONSHIP","ELECTRON_VOLT_INVERSE_METER_RELATIONSHIP","ELECTRON_VOLT_JOULE_RELATIONSHIP","ELECTRON_VOLT_KELVIN_RELATIONSHIP","ELECTRON_VOLT_KILOGRAM_RELATIONSHIP","ELEMENTARY_CHARGE","ELEMENTARY_CHARGE_OVER_H","FARADAY_CONSTANT","FARADAY_CONSTANT_FOR_CONVENTIONAL_ELECTRIC_CURRENT","FERMI_COUPLING_CONSTANT","FINE_STRUCTURE_CONSTANT","FIRST_RADIATION_CONSTANT","FIRST_RADIATION_CONSTANT_FOR_SPECTRAL_RADIANCE","HARTREE_ATOMIC_MASS_UNIT_RELATIONSHIP","HARTREE_ELECTRON_VOLT_RELATIONSHIP","HARTREE_ENERGY","HARTREE_ENERGY_IN_EV","HARTREE_HERTZ_RELATIONSHIP","HARTREE_INVERSE_METER_RELATIONSHIP","HARTREE_JOULE_RELATIONSHIP","HARTREE_KELVIN_RELATIONSHIP","HARTREE_KILOGRAM_RELATIONSHIP","HELION_ELECTRON_MASS_RATIO","HELION_G_FACTOR","HELION_MAG_MOM","HELION_MAG_MOM_TO_BOHR_MAGNETON_RATIO","HELION_MAG_MOM_TO_NUCLEAR_MAGNETON_RATIO","HELION_MASS","HELION_MASS_ENERGY_EQUIVALENT","HELION_MASS_ENERGY_EQUIVALENT_IN_MEV","HELION_MASS_IN_U","HELION_MOLAR_MASS","HELION_PROTON_MASS_RATIO","HERTZ_ATOMIC_MASS_UNIT_RELATIONSHIP","HERTZ_ELECTRON_VOLT_RELATIONSHIP","HERTZ_HARTREE_RELATIONSHIP","HERTZ_INVERSE_METER_RELATIONSHIP","HERTZ_JOULE_RELATIONSHIP","HERTZ_KELVIN_RELATIONSHIP","HERTZ_KILOGRAM_RELATIONSHIP","INVERSE_FINE_STRUCTURE_CONSTANT","INVERSE_METER_ATOMIC_MASS_UNIT_RELATIONSHIP","INVERSE_METER_ELECTRON_VOLT_RELATIONSHIP","INVERSE_METER_HARTREE_RELATIONSHIP","INVERSE_METER_HERTZ_RELATIONSHIP","INVERSE_METER_JOULE_RELATIONSHIP","INVERSE_METER_KELVIN_RELATIONSHIP","INVERSE_METER_KILOGRAM_RELATIONSHIP","INVERSE_OF_CONDUCTANCE_QUANTUM","JOSEPHSON_CONSTANT","JOULE_ATOMIC_MASS_UNIT_RELATIONSHIP","JOULE_ELECTRON_VOLT_RELATIONSHIP","JOULE_HARTREE_RELATIONSHIP","JOULE_HERTZ_RELATIONSHIP","JOULE_INVERSE_METER_RELATIONSHIP","JOULE_KELVIN_RELATIONSHIP","JOULE_KILOGRAM_RELATIONSHIP","KELVIN_ATOMIC_MASS_UNIT_RELATIONSHIP","KELVIN_ELECTRON_VOLT_RELATIONSHIP","KELVIN_HARTREE_RELATIONSHIP","KELVIN_HERTZ_RELATIONSHIP","KELVIN_INVERSE_METER_RELATIONSHIP","KELVIN_JOULE_RELATIONSHIP","KELVIN_KILOGRAM_RELATIONSHIP","KILOGRAM_ATOMIC_MASS_UNIT_RELATIONSHIP","KILOGRAM_ELECTRON_VOLT_RELATIONSHIP","KILOGRAM_HARTREE_RELATIONSHIP","KILOGRAM_HERTZ_RELATIONSHIP","KILOGRAM_INVERSE_METER_RELATIONSHIP","KILOGRAM_JOULE_RELATIONSHIP","KILOGRAM_KELVIN_RELATIONSHIP","LATTICE_PARAMETER_OF_SILICON","LOSCHMIDT_CONSTANT_27315_K_100_KPA","LOSCHMIDT_CONSTANT_27315_K_101325_KPA","MAG_CONSTANT","MAG_FLUX_QUANTUM","MOLAR_GAS_CONSTANT","MOLAR_MASS_CONSTANT","MOLAR_MASS_OF_CARBON_12","MOLAR_PLANCK_CONSTANT","MOLAR_PLANCK_CONSTANT_TIMES_C","MOLAR_VOLUME_OF_IDEAL_GAS_27315_K_100_KPA","MOLAR_VOLUME_OF_IDEAL_GAS_27315_K_101325_KPA","MOLAR_VOLUME_OF_SILICON","MO_X_UNIT","MUON_COMPTON_WAVELENGTH","MUON_COMPTON_WAVELENGTH_OVER_2_PI","MUON_ELECTRON_MASS_RATIO","MUON_G_FACTOR","MUON_MAG_MOM","MUON_MAG_MOM_ANOMALY","MUON_MAG_MOM_TO_BOHR_MAGNETON_RATIO","MUON_MAG_MOM_TO_NUCLEAR_MAGNETON_RATIO","MUON_MASS","MUON_MASS_ENERGY_EQUIVALENT","MUON_MASS_ENERGY_EQUIVALENT_IN_MEV","MUON_MASS_IN_U","MUON_MOLAR_MASS","MUON_NEUTRON_MASS_RATIO","MUON_PROTON_MAG_MOM_RATIO","MUON_PROTON_MASS_RATIO","MUON_TAU_MASS_RATIO","NATURAL_UNIT_OF_ACTION","NATURAL_UNIT_OF_ACTION_IN_EV_S","NATURAL_UNIT_OF_ENERGY","NATURAL_UNIT_OF_ENERGY_IN_MEV","NATURAL_UNIT_OF_LENGTH","NATURAL_UNIT_OF_MASS","NATURAL_UNIT_OF_MOMENTUM","NATURAL_UNIT_OF_MOMENTUM_IN_MEV_PER_C","NATURAL_UNIT_OF_TIME","NATURAL_UNIT_OF_VELOCITY","NEUTRON_COMPTON_WAVELENGTH","NEUTRON_COMPTON_WAVELENGTH_OVER_2_PI","NEUTRON_ELECTRON_MAG_MOM_RATIO","NEUTRON_ELECTRON_MASS_RATIO","NEUTRON_G_FACTOR","NEUTRON_GYROMAG_RATIO","NEUTRON_GYROMAG_RATIO_OVER_2_PI","NEUTRON_MAG_MOM","NEUTRON_MAG_MOM_TO_BOHR_MAGNETON_RATIO","NEUTRON_MAG_MOM_TO_NUCLEAR_MAGNETON_RATIO","NEUTRON_MASS","NEUTRON_MASS_ENERGY_EQUIVALENT","NEUTRON_MASS_ENERGY_EQUIVALENT_IN_MEV","NEUTRON_MASS_IN_U","NEUTRON_MOLAR_MASS","NEUTRON_MUON_MASS_RATIO","NEUTRON_PROTON_MAG_MOM_RATIO","NEUTRON_PROTON_MASS_DIFFERENCE","NEUTRON_PROTON_MASS_DIFFERENCE_ENERGY_EQUIVALENT","NEUTRON_PROTON_MASS_DIFFERENCE_ENERGY_EQUIVALENT_IN_MEV","NEUTRON_PROTON_MASS_DIFFERENCE_IN_U","NEUTRON_PROTON_MASS_RATIO","NEUTRON_TAU_MASS_RATIO","NEUTRON_TO_SHIELDED_PROTON_MAG_MOM_RATIO","NEWTONIAN_CONSTANT_OF_GRAVITATION","NEWTONIAN_CONSTANT_OF_GRAVITATION_OVER_H_BAR_C","NUCLEAR_MAGNETON","NUCLEAR_MAGNETON_IN_EV_PER_T","NUCLEAR_MAGNETON_IN_INVERSE_METERS_PER_TESLA","NUCLEAR_MAGNETON_IN_K_PER_T","NUCLEAR_MAGNETON_IN_MHZ_PER_T","PLANCK_CONSTANT","PLANCK_CONSTANT_IN_EV_S","PLANCK_CONSTANT_OVER_2_PI","PLANCK_CONSTANT_OVER_2_PI_IN_EV_S","PLANCK_CONSTANT_OVER_2_PI_TIMES_C_IN_MEV_FM","PLANCK_LENGTH","PLANCK_MASS","PLANCK_MASS_ENERGY_EQUIVALENT_IN_GEV","PLANCK_TEMPERATURE","PLANCK_TIME","PROTON_CHARGE_TO_MASS_QUOTIENT","PROTON_COMPTON_WAVELENGTH","PROTON_COMPTON_WAVELENGTH_OVER_2_PI","PROTON_ELECTRON_MASS_RATIO","PROTON_G_FACTOR","PROTON_GYROMAG_RATIO","PROTON_GYROMAG_RATIO_OVER_2_PI","PROTON_MAG_MOM","PROTON_MAG_MOM_TO_BOHR_MAGNETON_RATIO","PROTON_MAG_MOM_TO_NUCLEAR_MAGNETON_RATIO","PROTON_MAG_SHIELDING_CORRECTION","PROTON_MASS","PROTON_MASS_ENERGY_EQUIVALENT","PROTON_MASS_ENERGY_EQUIVALENT_IN_MEV","PROTON_MASS_IN_U","PROTON_MOLAR_MASS","PROTON_MUON_MASS_RATIO","PROTON_NEUTRON_MAG_MOM_RATIO","PROTON_NEUTRON_MASS_RATIO","PROTON_RMS_CHARGE_RADIUS","PROTON_TAU_MASS_RATIO","QUANTUM_OF_CIRCULATION","QUANTUM_OF_CIRCULATION_TIMES_2","RYDBERG_CONSTANT","RYDBERG_CONSTANT_TIMES_C_IN_HZ","RYDBERG_CONSTANT_TIMES_HC_IN_EV","RYDBERG_CONSTANT_TIMES_HC_IN_J","SACKUR_TETRODE_CONSTANT_1_K_100_KPA","SACKUR_TETRODE_CONSTANT_1_K_101325_KPA","SECOND_RADIATION_CONSTANT","SHIELDED_HELION_GYROMAG_RATIO","SHIELDED_HELION_GYROMAG_RATIO_OVER_2_PI","SHIELDED_HELION_MAG_MOM","SHIELDED_HELION_MAG_MOM_TO_BOHR_MAGNETON_RATIO","SHIELDED_HELION_MAG_MOM_TO_NUCLEAR_MAGNETON_RATIO","SHIELDED_HELION_TO_PROTON_MAG_MOM_RATIO","SHIELDED_HELION_TO_SHIELDED_PROTON_MAG_MOM_RATIO","SHIELDED_PROTON_GYROMAG_RATIO","SHIELDED_PROTON_GYROMAG_RATIO_OVER_2_PI","SHIELDED_PROTON_MAG_MOM","SHIELDED_PROTON_MAG_MOM_TO_BOHR_MAGNETON_RATIO","SHIELDED_PROTON_MAG_MOM_TO_NUCLEAR_MAGNETON_RATIO","SPEED_OF_LIGHT_IN_VACUUM","STANDARD_ACCELERATION_OF_GRAVITY","STANDARD_ATMOSPHERE","STANDARD_STATE_PRESSURE","STEFAN_BOLTZMANN_CONSTANT","TAU_COMPTON_WAVELENGTH","TAU_COMPTON_WAVELENGTH_OVER_2_PI","TAU_ELECTRON_MASS_RATIO","TAU_MASS","TAU_MASS_ENERGY_EQUIVALENT","TAU_MASS_ENERGY_EQUIVALENT_IN_MEV","TAU_MASS_IN_U","TAU_MOLAR_MASS","TAU_MUON_MASS_RATIO","TAU_NEUTRON_MASS_RATIO","TAU_PROTON_MASS_RATIO","THOMSON_CROSS_SECTION","TRITON_ELECTRON_MASS_RATIO","TRITON_G_FACTOR","TRITON_MAG_MOM","TRITON_MAG_MOM_TO_BOHR_MAGNETON_RATIO","TRITON_MAG_MOM_TO_NUCLEAR_MAGNETON_RATIO","TRITON_MASS","TRITON_MASS_ENERGY_EQUIVALENT","TRITON_MASS_ENERGY_EQUIVALENT_IN_MEV","TRITON_MASS_IN_U","TRITON_MOLAR_MASS","TRITON_PROTON_MASS_RATIO","UNIFIED_ATOMIC_MASS_UNIT","VON_KLITZING_CONSTANT","WEAK_MIXING_ANGLE","WIEN_FREQUENCY_DISPLACEMENT_LAW_CONSTANT","WIEN_WAVELENGTH_DISPLACEMENT_LAW_CONSTANT"],"q":["physical_constantsd":["{220} lattice spacing of silicon (unit: m)","alpha particle-electron mass ratio (dimensionless)","alpha particle mass (unit: kg)","alpha particle mass energy equivalent (unit: J)","alpha particle mass energy equivalent in MeV (unit: MeV)","alpha particle mass in u (unit: u)","alpha particle molar mass (unit: kg mol^-1)","alpha particle-proton mass ratio (dimensionless)","Angstrom star (unit: m)","atomic mass constant (unit: kg)","atomic mass constant energy equivalent (unit: J)","atomic mass constant energy equivalent in MeV (unit: MeV)","atomic mass unit-electron volt relationship (unit: eV)","atomic mass unit-hartree relationship (unit: E_h)","atomic mass unit-hertz relationship (unit: Hz)","atomic mass unit-inverse meter relationship (unit: m^-1)","atomic mass unit-joule relationship (unit: J)","atomic mass unit-kelvin relationship (unit: K)","atomic mass unit-kilogram relationship (unit: kg)","atomic unit of 1st hyperpolarizability (unit: C^3 m^3 …","atomic unit of 2nd hyperpolarizability (unit: C^4 m^4 …","atomic unit of action (unit: J s)","atomic unit of charge (unit: C)","atomic unit of charge density (unit: C m^-3)","atomic unit of current (unit: A)","atomic unit of electric dipole mom. (unit: C m)","atomic unit of electric field (unit: V m^-1)","atomic unit of electric field gradient (unit: V m^-2)","atomic unit of electric polarizability (unit: C^2 m^2 …","atomic unit of electric potential (unit: V)","atomic unit of electric quadrupole mom. (unit: C m^2)","atomic unit of energy (unit: J)","atomic unit of force (unit: N)","atomic unit of length (unit: m)","atomic unit of mag. dipole mom. (unit: J T^-1)","atomic unit of mag. flux density (unit: T)","atomic unit of magnetizability (unit: J T^-2)","atomic unit of mass (unit: kg)","atomic unit of mom.um (unit: kg m s^-1)","atomic unit of permittivity (unit: F m^-1)","atomic unit of time (unit: s)","atomic unit of velocity (unit: m s^-1)","Avogadro constant (unit: mol^-1)","Bohr magneton (unit: J T^-1)","Bohr magneton in eV/T (unit: eV T^-1)","Bohr magneton in Hz/T (unit: Hz T^-1)","Bohr magneton in inverse meters per tesla (unit: m^-1 …","Bohr magneton in K/T (unit: K T^-1)","Bohr radius (unit: m)","Boltzmann constant (unit: J K^-1)","Boltzmann constant in eV/K (unit: eV K^-1)","Boltzmann constant in Hz/K (unit: Hz K^-1)","Boltzmann constant in inverse meters per kelvin (unit: …","characteristic impedance of vacuum (unit: ohm)","classical electron radius (unit: m)","Compton wavelength (unit: m)","Compton wavelength over 2 pi (unit: m)","conductance quantum (unit: S)","conventional value of Josephson constant (unit: Hz V^-1)","conventional value of von Klitzing constant (unit: ohm)","Cu x unit (unit: m)","deuteron-electron mag. mom. ratio (dimensionless)","deuteron-electron mass ratio (dimensionless)","deuteron g factor (dimensionless)","deuteron mag. mom. (unit: J T^-1)","deuteron mag. mom. to Bohr magneton ratio (dimensionless)","deuteron mag. mom. to nuclear magneton ratio …","deuteron mass (unit: kg)","deuteron mass energy equivalent (unit: J)","deuteron mass energy equivalent in MeV (unit: MeV)","deuteron mass in u (unit: u)","deuteron molar mass (unit: kg mol^-1)","deuteron-neutron mag. mom. ratio (dimensionless)","deuteron-proton mag. mom. ratio (dimensionless)","deuteron-proton mass ratio (dimensionless)","deuteron rms charge radius (unit: m)","electric constant (unit: F m^-1)","electron charge to mass quotient (unit: C kg^-1)","electron-deuteron mag. mom. ratio (dimensionless)","electron-deuteron mass ratio (dimensionless)","electron g factor (dimensionless)","electron gyromag. ratio (unit: s^-1 T^-1)","electron gyromag. ratio over 2 pi (unit: MHz T^-1)","electron-helion mass ratio (dimensionless)","electron mag. mom. (unit: J T^-1)","electron mag. mom. anomaly (dimensionless)","electron mag. mom. to Bohr magneton ratio (dimensionless)","electron mag. mom. to nuclear magneton ratio …","electron mass (unit: kg)","electron mass energy equivalent (unit: J)","electron mass energy equivalent in MeV (unit: MeV)","electron mass in u (unit: u)","electron molar mass (unit: kg mol^-1)","electron-muon mag. mom. ratio (dimensionless)","electron-muon mass ratio (dimensionless)","electron-neutron mag. mom. ratio (dimensionless)","electron-neutron mass ratio (dimensionless)","electron-proton mag. mom. ratio (dimensionless)","electron-proton mass ratio (dimensionless)","electron-tau mass ratio (dimensionless)","electron to alpha particle mass ratio (dimensionless)","electron to shielded helion mag. mom. ratio …","electron to shielded proton mag. mom. ratio …","electron-triton mass ratio (dimensionless)","electron volt (unit: J)","electron volt-atomic mass unit relationship (unit: u)","electron volt-hartree relationship (unit: E_h)","electron volt-hertz relationship (unit: Hz)","electron volt-inverse meter relationship (unit: m^-1)","electron volt-joule relationship (unit: J)","electron volt-kelvin relationship (unit: K)","electron volt-kilogram relationship (unit: kg)","elementary charge (unit: C)","elementary charge over h (unit: A J^-1)","Faraday constant (unit: C mol^-1)","Faraday constant for conventional electric current (unit: …","Fermi coupling constant (unit: GeV^-2)","fine-structure constant (dimensionless)","first radiation constant (unit: W m^2)","first radiation constant for spectral radiance (unit: W …","hartree-atomic mass unit relationship (unit: u)","hartree-electron volt relationship (unit: eV)","Hartree energy (unit: J)","Hartree energy in eV (unit: eV)","hartree-hertz relationship (unit: Hz)","hartree-inverse meter relationship (unit: m^-1)","hartree-joule relationship (unit: J)","hartree-kelvin relationship (unit: K)","hartree-kilogram relationship (unit: kg)","helion-electron mass ratio (dimensionless)","helion g factor (dimensionless)","helion mag. mom. (unit: J T^-1)","helion mag. mom. to Bohr magneton ratio (dimensionless)","helion mag. mom. to nuclear magneton ratio (dimensionless)","helion mass (unit: kg)","helion mass energy equivalent (unit: J)","helion mass energy equivalent in MeV (unit: MeV)","helion mass in u (unit: u)","helion molar mass (unit: kg mol^-1)","helion-proton mass ratio (dimensionless)","hertz-atomic mass unit relationship (unit: u)","hertz-electron volt relationship (unit: eV)","hertz-hartree relationship (unit: E_h)","hertz-inverse meter relationship (unit: m^-1)","hertz-joule relationship (unit: J)","hertz-kelvin relationship (unit: K)","hertz-kilogram relationship (unit: kg)","inverse fine-structure constant (dimensionless)","inverse meter-atomic mass unit relationship (unit: u)","inverse meter-electron volt relationship (unit: eV)","inverse meter-hartree relationship (unit: E_h)","inverse meter-hertz relationship (unit: Hz)","inverse meter-joule relationship (unit: J)","inverse meter-kelvin relationship (unit: K)","inverse meter-kilogram relationship (unit: kg)","inverse of conductance quantum (unit: ohm)","Josephson constant (unit: Hz V^-1)","joule-atomic mass unit relationship (unit: u)","joule-electron volt relationship (unit: eV)","joule-hartree relationship (unit: E_h)","joule-hertz relationship (unit: Hz)","joule-inverse meter relationship (unit: m^-1)","joule-kelvin relationship (unit: K)","joule-kilogram relationship (unit: kg)","kelvin-atomic mass unit relationship (unit: u)","kelvin-electron volt relationship (unit: eV)","kelvin-hartree relationship (unit: E_h)","kelvin-hertz relationship (unit: Hz)","kelvin-inverse meter relationship (unit: m^-1)","kelvin-joule relationship (unit: J)","kelvin-kilogram relationship (unit: kg)","kilogram-atomic mass unit relationship (unit: u)","kilogram-electron volt relationship (unit: eV)","kilogram-hartree relationship (unit: E_h)","kilogram-hertz relationship (unit: Hz)","kilogram-inverse meter relationship (unit: m^-1)","kilogram-joule relationship (unit: J)","kilogram-kelvin relationship (unit: K)","lattice parameter of silicon (unit: m)","Loschmidt constant (273.15 K, 100 kPa) (unit: m^-3)","Loschmidt constant (273.15 K, 101.325 kPa) (unit: m^-3)","mag. constant (unit: N A^-2)","mag. flux quantum (unit: Wb)","molar gas constant (unit: J mol^-1 K^-1)","molar mass constant (unit: kg mol^-1)","molar mass of carbon-12 (unit: kg mol^-1)","molar Planck constant (unit: J s mol^-1)","molar Planck constant times c (unit: J m mol^-1)","molar volume of ideal gas (273.15 K, 100 kPa) (unit: m^3 …","molar volume of ideal gas (273.15 K, 101.325 kPa) (unit: …","molar volume of silicon (unit: m^3 mol^-1)","Mo x unit (unit: m)","muon Compton wavelength (unit: m)","muon Compton wavelength over 2 pi (unit: m)","muon-electron mass ratio (dimensionless)","muon g factor (dimensionless)","muon mag. mom. (unit: J T^-1)","muon mag. mom. anomaly (dimensionless)","muon mag. mom. to Bohr magneton ratio (dimensionless)","muon mag. mom. to nuclear magneton ratio (dimensionless)","muon mass (unit: kg)","muon mass energy equivalent (unit: J)","muon mass energy equivalent in MeV (unit: MeV)","muon mass in u (unit: u)","muon molar mass (unit: kg mol^-1)","muon-neutron mass ratio (dimensionless)","muon-proton mag. mom. ratio (dimensionless)","muon-proton mass ratio (dimensionless)","muon-tau mass ratio (dimensionless)","natural unit of action (unit: J s)","natural unit of action in eV s (unit: eV s)","natural unit of energy (unit: J)","natural unit of energy in MeV (unit: MeV)","natural unit of length (unit: m)","natural unit of mass (unit: kg)","natural unit of mom.um (unit: kg m s^-1)","natural unit of mom.um in MeV/c (unit: MeV/c)","natural unit of time (unit: s)","natural unit of velocity (unit: m s^-1)","neutron Compton wavelength (unit: m)","neutron Compton wavelength over 2 pi (unit: m)","neutron-electron mag. mom. ratio (dimensionless)","neutron-electron mass ratio (dimensionless)","neutron g factor (dimensionless)","neutron gyromag. ratio (unit: s^-1 T^-1)","neutron gyromag. ratio over 2 pi (unit: MHz T^-1)","neutron mag. mom. (unit: J T^-1)","neutron mag. mom. to Bohr magneton ratio (dimensionless)","neutron mag. mom. to nuclear magneton ratio …","neutron mass (unit: kg)","neutron mass energy equivalent (unit: J)","neutron mass energy equivalent in MeV (unit: MeV)","neutron mass in u (unit: u)","neutron molar mass (unit: kg mol^-1)","neutron-muon mass ratio (dimensionless)","neutron-proton mag. mom. ratio (dimensionless)","neutron-proton mass difference (dimensionless)","neutron-proton mass difference energy equivalent …","neutron-proton mass difference energy equivalent in MeV …","neutron-proton mass difference in u (dimensionless)","neutron-proton mass ratio (dimensionless)","neutron-tau mass ratio (dimensionless)","neutron to shielded proton mag. mom. ratio (dimensionless)","Newtonian constant of gravitation (unit: m^3 kg^-1 s^-2)","Newtonian constant of gravitation over h-bar c (unit: …","nuclear magneton (unit: J T^-1)","nuclear magneton in eV/T (unit: eV T^-1)","nuclear magneton in inverse meters per tesla (unit: m^-1 …","nuclear magneton in K/T (unit: K T^-1)","nuclear magneton in MHz/T (unit: MHz T^-1)","Planck constant (unit: J s)","Planck constant in eV s (unit: eV s)","Planck constant over 2 pi (unit: J s)","Planck constant over 2 pi in eV s (unit: eV s)","Planck constant over 2 pi times c in MeV fm (unit: MeV fm)","Planck length (unit: m)","Planck mass (unit: kg)","Planck mass energy equivalent in GeV (unit: GeV)","Planck temperature (unit: K)","Planck time (unit: s)","proton charge to mass quotient (unit: C kg^-1)","proton Compton wavelength (unit: m)","proton Compton wavelength over 2 pi (unit: m)","proton-electron mass ratio (dimensionless)","proton g factor (dimensionless)","proton gyromag. ratio (unit: s^-1 T^-1)","proton gyromag. ratio over 2 pi (unit: MHz T^-1)","proton mag. mom. (unit: J T^-1)","proton mag. mom. to Bohr magneton ratio (dimensionless)","proton mag. mom. to nuclear magneton ratio (dimensionless)","proton mag. shielding correction (dimensionless)","proton mass (unit: kg)","proton mass energy equivalent (unit: J)","proton mass energy equivalent in MeV (unit: MeV)","proton mass in u (unit: u)","proton molar mass (unit: kg mol^-1)","proton-muon mass ratio (dimensionless)","proton-neutron mag. mom. ratio (dimensionless)","proton-neutron mass ratio (dimensionless)","proton rms charge radius (unit: m)","proton-tau mass ratio (dimensionless)","quantum of circulation (unit: m^2 s^-1)","quantum of circulation times 2 (unit: m^2 s^-1)","Rydberg constant (unit: m^-1)","Rydberg constant times c in Hz (unit: Hz)","Rydberg constant times hc in eV (unit: eV)","Rydberg constant times hc in J (unit: J)","Sackur-Tetrode constant (1 K, 100 kPa) (dimensionless)","Sackur-Tetrode constant (1 K, 101.325 kPa) (dimensionless)","second radiation constant (unit: m K)","shielded helion gyromag. ratio (unit: s^-1 T^-1)","shielded helion gyromag. ratio over 2 pi (unit: MHz T^-1)","shielded helion mag. mom. (unit: J T^-1)","shielded helion mag. mom. to Bohr magneton ratio …","shielded helion mag. mom. to nuclear magneton ratio …","shielded helion to proton mag. mom. ratio (dimensionless)","shielded helion to shielded proton mag. mom. ratio …","shielded proton gyromag. ratio (unit: s^-1 T^-1)","shielded proton gyromag. ratio over 2 pi (unit: MHz T^-1)","shielded proton mag. mom. (unit: J T^-1)","shielded proton mag. mom. to Bohr magneton ratio …","shielded proton mag. mom. to nuclear magneton ratio …","speed of light in vacuum (unit: m s^-1)","standard acceleration of gravity (unit: m s^-2)","standard atmosphere (unit: Pa)","standard-state pressure (unit: Pa)","Stefan-Boltzmann constant (unit: W m^-2 K^-4)","tau Compton wavelength (unit: m)","tau Compton wavelength over 2 pi (unit: m)","tau-electron mass ratio (dimensionless)","tau mass (unit: kg)","tau mass energy equivalent (unit: J)","tau mass energy equivalent in MeV (unit: MeV)","tau mass in u (unit: u)","tau molar mass (unit: kg mol^-1)","tau-muon mass ratio (dimensionless)","tau-neutron mass ratio (dimensionless)","tau-proton mass ratio (dimensionless)","Thomson cross section (unit: m^2)","triton-electron mass ratio (dimensionless)","triton g factor (dimensionless)","triton mag. mom. (unit: J T^-1)","triton mag. mom. to Bohr magneton ratio (dimensionless)","triton mag. mom. to nuclear magneton ratio (dimensionless)","triton mass (unit: kg)","triton mass energy equivalent (unit: J)","triton mass energy equivalent in MeV (unit: MeV)","triton mass in u (unit: u)","triton molar mass (unit: kg mol^-1)","triton-proton mass ratio (dimensionless)","unified atomic mass unit (unit: kg)","von Klitzing constant (unit: ohm)","weak mixing angle (dimensionless)","Wien frequency displacement law constant (unit: Hz K^-1)","Wien wavelength displacement law constant (unit: m K)"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[]},\
"png":{"doc":"PNG encoder and decoder","t":[0,6,17,17,17,17,17,17,17,17,17,17,17,5,5,5,5,4,13,13,13,13,13,4,13,13,13,13,13,3,12,12,12,4,13,13,4,13,13,13,4,13,13,3,12,12,12,12,12,12,12,12,12,3,12,12,4,13,13,13,13,13,3,12,12,12,12,12,12,12,12,12,12,12,12,3,4,13,13,13,13,13,13,13,13,13,13,13,3,4,13,13,13,13,12,12,12,12,13,13,13,3,12,3,12,12,12,12,12,3,3,3,4,13,13,3,3,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["chunk","ChunkType","IHDR","PLTE","IDAT","IEND","tRNS","bKGD","tIME","pHYs","acTL","fcTL","fdAT","is_critical","is_private","reserved_set","safe_to_copy","ColorType","Grayscale","RGB","Indexed","GrayscaleAlpha","RGBA","BitDepth","One","Two","Four","Eight","Sixteen","PixelDimensions","xppu","yppu","unit","Unit","Unspecified","Meter","DisposeOp","None","Background","Previous","BlendOp","Source","Over","FrameControl","sequence_number","width","height","x_offset","y_offset","delay_num","delay_den","dispose_op","blend_op","AnimationControl","num_frames","num_plays","Compression","Default","Fast","Best","Huffman","Rle","Info","width","height","bit_depth","color_type","interlaced","trns","pixel_dims","palette","frame_control","animation_control","compression","filter","Transformations","Decoded","Nothing","Header","ChunkBegin","ChunkComplete","PixelDimensions","AnimationControl","FrameControl","ImageData","ImageDataFlushed","PartialChunk","ImageEnd","Decoder","DecodingError","IoError","Format","InvalidSignature","CrcMismatch","recover","crc_val","crc_sum","chunk","Other","CorruptFlateStream","LimitsExceeded","Limits","bytes","OutputInfo","width","height","color_type","bit_depth","line_size","Reader","StreamingDecoder","Encoder","EncodingError","IoError","Format","StreamWriter","Writer","FilterType","NoFilter","Sub","Up","Avg","Paeth","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","drop","drop","from","from","from","from","extend","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","cmp","eq","eq","eq","eq","eq","eq","ne","eq","ne","eq","partial_cmp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","sub","sub_assign","not","bitand","bitor","bitxor","bitand_assign","bitor_assign","bitxor_assign","hash","from_iter","fmt","fmt","fmt","fmt","cause","cause","write","flush","samples","from_u8","from_u8","from_u8","from_u8","from_u8","set_seq_num","inc_seq_num","size","is_animated","animation_control","frame_control","bits_per_pixel","bytes_per_pixel","raw_bytes","raw_row_length","raw_row_length_from_width","IDENTITY","STRIP_16","STRIP_ALPHA","PACKING","PACKSWAP","EXPAND","INVERT_MONO","SHIFT","BGR","SWAP_ALPHA","SWAP_ENDIAN","INVERT_ALPHA","STRIP_FILLER","STRIP_FILLER_BEFORE","STRIP_FILLER_AFTER","GRAY_TO_RGB","EXPAND_16","SCALE_16","empty","all","bits","from_bits","from_bits_truncate","from_bits_unchecked","is_empty","is_all","intersects","contains","insert","remove","toggle","set","new","reset","update","buffer_size","new","new_with_limits","set_limits","read_info","set_transformations","info","next_frame","next_row","next_interlaced_row","output_color_type","output_buffer_size","output_line_size","new","set_palette","set_trns","write_header","set_color","set_depth","set_compression","set_filter","write_chunk","write_image_data","stream_writer","stream_writer_with_size","into_stream_writer","into_stream_writer_with_size","finish","from_u8"],"q":["png","png::chunk","","","","","","","","","","","","","","","","png","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","png::DecodingError","","","","pngd":["Chunk types and functions","","Image header","Palette","Image data","Image trailer","Transparency","Background colour","Image last-modification time","Physical pixel dimensions","Animation control","Frame control","Frame data","Returns true if the chunk is critical.","Returns true if the chunk is private.","Checks whether the reserved bit of the chunk name is set. …","Returns true if the chunk is safe to copy if unknown.","Describes the layout of samples in a pixel","","","","","","Bit depth of the png file","","","","","","Pixel dimensions information","Pixels per unit, X axis","Pixels per unit, Y axis","Either <em>Meter</em> or <em>Unspecified</em>","Physical unit of the pixel dimensions","","","How to reset buffer of an animated png (APNG) at the end …","Leave the buffer unchanged.","Clear buffer with the background color.","Reset the buffer to the state before the current frame.","How pixels are written into the buffer.","Pixels overwrite the value at their position.","The new pixels are blended into the current state based …","Frame control information","Sequence number of the animation chunk, starting from 0","Width of the following frame","Height of the following frame","X position at which to render the following frame","Y position at which to render the following frame","Frame delay fraction numerator","Frame delay fraction denominator","Type of frame area disposal to be done after rendering …","Type of frame area rendering for this frame","Animation control information","Number of frames","Number of times to loop this APNG.  0 indicates infinite …","The type and strength of applied compression.","Default level  ","Fast minimal compression","Higher compression level","","","PNG info struct","","","","","","","","","","","","","Output transformations","Result of the decoding process","Nothing decoded yet","","","","","","","Decoded raw image data.","The last of a consecutive chunk of IDAT was done. This is …","","","PNG Decoder","","","","","","bytes to skip to try to recover from this error","Stored CRC32 value","Calculated CRC32 sum","","","","","Limits on the resources the <code>Decoder</code> is allowed too use","maximum number of bytes the decoder is allowed to …","Output info","","","","","","PNG reader (mostly high-level interface)","PNG StreamingDecoder (low-level interface)","PNG Encoder","","","","Streaming png writer","PNG writer","The byte level filter applied to scanlines to prepare …eturns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the complement of this set of flags.","Returns the intersection between the two sets of flags.","Returns the union of the two sets of flags.","Returns the left flags, but with all the right flags …","Disables all flags disabled in the set.","Adds the set of flags.","Toggles the set of flags.","","","","","","","","","","","Returns the number of samples used per pixel of <code>ColorType</code>","u8 -> Self. Temporary solution until Rust provides a …","u8 -> Self. Temporary solution until Rust provides a …","u8 -> Self. Temporary solution until Rust provides a …","u8 -> Self. Using enum_primitive or transmute is probably …","u8 -> Self. Using enum_primitive or transmute is probably …","","","Size of the image","Returns true if the image is an APNG image.","Returns the frame control information of the image","Returns the frame control information of the current frame","Returns the bits per pixel","Returns the bytes per pixel","Returns the number of bytes needed for one deinterlaced …","Returns the number of bytes needed for one deinterlaced …","Returns the number of bytes needed for one deinterlaced …","No transformation","Strip 16-bit samples to 8 bits","Discard the alpha channel","Expand 1; 2 and 4-bit samples to bytes","Change order of packed pixels to LSB first","Expand paletted images to RGB; expand grayscale images of …","Invert monochrome images","Normalize pixels to the sBIT depth","Flip RGB to BGR; RGBA to BGRA","Flip RGBA to ARGB or GA to AG","Byte-swap 16-bit samples","Change alpha from opacity to transparency","","","","","","","Returns an empty set of flags","Returns the set containing all flags.","Returns the raw value of the flags currently stored.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all…","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> all of the flags in <code>other</code> are contained …","Inserts the specified flags in-place.","Removes the specified flags in-place.","Toggles the specified flags in-place.","Inserts or removes the specified flags depending on the …","Creates a new StreamingDecoder","Resets the StreamingDecoder","Low level StreamingDecoder interface.","Returns the size needed to hold a decoded frame","","","Limit resource usage","Reads all meta data until the first IDAT chunk","Set the allowed and performed transformations.","Get information on the image.","Decodes the next frame into <code>buf</code>.","Returns the next processed row of the image","Returns the next processed row of the image","Returns the color type and the number of bits per sample …","Returns the number of bytes required to hold a …","Returns the number of bytes required to hold a …","","","","","Set the color of the encoded image.","Set the indicated depth of the image data.","Set compression parameters.","Set the used filter type.","","Writes the image data.","Create an stream writer.","Create a stream writer with custom buffer size.","Turn this into a stream writer for image data.","Turn this into a stream writer with custom buffer size.","","u8 -> Self. Temporary solution until Rust provides a …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,2,2,2,2,2,0,3,3,3,0,4,4,0,5,5,5,0,6,6,0,7,7,7,7,7,7,7,7,7,0,8,8,0,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,10,10,10,0,0,11,11,11,11,11,11,11,11,11,11,11,0,0,12,12,12,12,13,13,13,13,12,12,12,0,14,0,15,15,15,15,15,0,0,0,0,16,16,0,0,0,17,17,17,17,17,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,19,19,19,19,19,19,19,15,15,15,15,15,15,15,14,14,14,14,14,14,14,14,14,20,20,20,20,20,20,20,21,21,21,21,21,21,21,16,16,16,16,16,16,16,16,22,22,22,22,22,22,22,23,23,23,23,23,23,23,24,24,24,24,24,24,24,17,17,17,17,17,17,17,17,17,23,24,9,12,12,16,18,1,2,3,4,5,6,7,8,9,10,18,14,17,7,10,19,14,18,1,2,4,5,6,18,18,15,15,17,18,1,2,3,4,5,6,7,8,9,10,18,11,12,15,14,16,17,5,6,12,16,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,12,16,24,24,1,1,2,4,5,6,7,7,10,10,10,10,10,10,10,10,10,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,15,20,20,20,20,20,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,24,17],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[["chunktype",6]],["bool",15]],[[["chunktype",6]],["bool",15]],[[["chunktype",6]],["bool",15]],[[["chunktype",6]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[["compression",4]]],[[["error",3]],["decodingerror",4]],[[["string",3]],["decodingerror",4]],[[["error",3]],["encodingerror",4]],[[["intoiterator",8]]],[[],["colortype",4]],[[],["bitdepth",4]],[[],["pixeldimensions",3]],[[],["unit",4]],[[],["disposeop",4]],[[],["blendop",4]],[[],["framecontrol",3]],[[],["animationcontrol",3]],[[],["compression",4]],[[],["info",3]],[[],["transformations",3]],[[],["limits",3]],[[],["filtertype",4]],[[],["framecontrol",3]],[[],["info",3]],[[]],[[],["limits",3]],[[["transformations",3]],["ordering",4]],[[["colortype",4]],["bool",15]],[[["bitdepth",4]],["bool",15]],[[["unit",4]],["bool",15]],[[["disposeop",4]],["bool",15]],[[["blendop",4]],["bool",15]],[[["transformations",3]],["bool",15]],[[["transformations",3]],["bool",15]],[[["outputinfo",3]],["bool",15]],[[["outputinfo",3]],["bool",15]],[[["filtertype",4]],["bool",15]],[[["transformations",3]],[["ordering",4],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["transformations",3]],["transformations",3]],[[["transformations",3]]],[[],["transformations",3]],[[["transformations",3]],["transformations",3]],[[["transformations",3]],["transformations",3]],[[["transformations",3]],["transformations",3]],[[["transformations",3]]],[[["transformations",3]]],[[["transformations",3]]],[[]],[[["intoiterator",8]],["transformations",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["error",8],["option",4]]],[[],[["error",8],["option",4]]],[[],[["result",6],["usize",15]]],[[],["result",6]],[[],["usize",15]],[[["u8",15]],[["option",4],["colortype",4]]],[[["u8",15]],[["option",4],["bitdepth",4]]],[[["u8",15]],[["unit",4],["option",4]]],[[["u8",15]],[["option",4],["disposeop",4]]],[[["u8",15]],[["blendop",4],["option",4]]],[[["u32",15]]],[[["u32",15]]],[[]],[[],["bool",15]],[[],[["option",4],["animationcontrol",3]]],[[],[["option",4],["framecontrol",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["u32",15]],["usize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["transformations",3]],[[],["transformations",3]],[[],["u32",15]],[[["u32",15]],[["transformations",3],["option",4]]],[[["u32",15]],["transformations",3]],[[["u32",15]],["transformations",3]],[[],["bool",15]],[[],["bool",15]],[[["transformations",3]],["bool",15]],[[["transformations",3]],["bool",15]],[[["transformations",3]]],[[["transformations",3]]],[[["transformations",3]]],[[["bool",15],["transformations",3]]],[[],["streamingdecoder",3]],[[]],[[["vec",3]],[["result",4],["decodingerror",4]]],[[],["usize",15]],[[],["decoder",3]],[[["limits",3]],["decoder",3]],[[["limits",3]]],[[],[["result",4],["decodingerror",4]]],[[["transformations",3]]],[[],["info",3]],[[],[["result",4],["decodingerror",4]]],[[],[["option",4],["decodingerror",4],["result",4]]],[[],[["result",4],["option",4],["decodingerror",4]]],[[]],[[],["usize",15]],[[["u32",15]],["usize",15]],[[["u32",15]],["encoder",3]],[[["vec",3],["u8",15]]],[[["vec",3],["u8",15]]],[[],[["encodingerror",4],["result",4],["writer",3]]],[[["colortype",4]]],[[["bitdepth",4]]],[[["into",8],["compression",4]]],[[["filtertype",4]]],[[],[["result",4],["encodingerror",4]]],[[],[["result",4],["encodingerror",4]]],[[],["streamwriter",3]],[[["usize",15]],["streamwriter",3]],[[],["streamwriter",3]],[[["usize",15]],["streamwriter",3]],[[],[["result",4],["encodingerror",4]]],[[["u8",15]],[["option",4],["filtertype",4]]]],"p":[[4,"ColorType"],[4,"BitDepth"],[3,"PixelDimensions"],[4,"Unit"],[4,"DisposeOp"],[4,"BlendOp"],[3,"FrameControl"],[3,"AnimationControl"],[4,"Compression"],[3,"Info"],[4,"Decoded"],[4,"DecodingError"],[13,"CrcMismatch"],[3,"Limits"],[3,"OutputInfo"],[4,"EncodingError"],[4,"FilterType"],[3,"Transformations"],[3,"StreamingDecoder"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[3,"Writer"],[3,"StreamWriter"]]},\
"ppv_lite86":{"doc":"","t":[0,19,3,11,11,3,11,11,3,3,3,3,3,3,6,6,6,6,6,6,6,8,16,10,8,10,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,10,8,8,10,8,10,10,8,10,10,8,10,10,10,8,10,10,10,8,10,10,10,10,10,10,10,8,8,8,8,8,8,8,8,8,8,8,10,10,8,10,8,16,16,16,16,16,16,16,16,16,16,11,11,11,11,10,8,10,8,10,10,10,10,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["generic","vec128_storage","vec256_storage","new128","split128","vec512_storage","new128","split128","GenericMachine","u32x4_generic","u64x2_generic","u128x1_generic","G0","G1","u32x4x2_generic","u64x2x2_generic","u64x4_generic","u128x2_generic","u32x4x4_generic","u64x2x4_generic","u128x4_generic","AndNot","Output","andnot","BSwap","bswap","ArithOps","BitOps0","BitOps32","BitOps64","BitOps128","RotateEachWord32","rotate_each_word_right7","rotate_each_word_right8","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right25","RotateEachWord64","rotate_each_word_right32","RotateEachWord128","UnsafeFrom","unsafe_from","Vec2","extract","insert","Vec4","extract","insert","Words4","shuffle1230","shuffle2301","shuffle3012","LaneWords4","shuffle_lane_words1230","shuffle_lane_words2301","shuffle_lane_words3012","Swap64","swap1","swap2","swap4","swap8","swap16","swap32","swap64","u32x4","u64x2","u128x1","u32x4x2","u64x2x2","u64x4","u128x2","u32x4x4","u64x2x4","u128x4","MultiLane","to_lanes","from_lanes","VZip","vzip","Machine","u32x4","u64x2","u128x1","u32x4x2","u64x2x2","u64x4","u128x2","u32x4x4","u64x2x4","u128x4","unpack","vec","read_le","read_be","instance","Store","unpack","StoreBytes","unsafe_read_le","unsafe_read_be","write_le","write_be","dispatch","dispatch_light128","dispatch_light256","dispatch_light512","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","andnot","andnot","andnot","bswap","bswap","bswap","rotate_each_word_right7","rotate_each_word_right8","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right7","rotate_each_word_right8","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right7","rotate_each_word_right8","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right32","rotate_each_word_right32","extract","insert","extract","insert","extract","insert","shuffle2301","shuffle1230","shuffle3012","shuffle2301","shuffle1230","shuffle3012","shuffle_lane_words2301","shuffle_lane_words1230","shuffle_lane_words3012","swap1","swap2","swap4","swap8","swap16","swap32","swap64","swap1","swap2","swap4","swap8","swap16","swap32","swap64","swap1","swap2","swap4","swap8","swap16","swap32","swap64","to_lanes","from_lanes","to_lanes","from_lanes","to_lanes","from_lanes","to_lanes","from_lanes","instance","unpack","unpack","unpack","unsafe_read_le","unsafe_read_be","write_le","write_be","unsafe_read_le","unsafe_read_be","write_le","write_be","fmt","fmt","fmt","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","add","add","add","add_assign","add_assign","add_assign","not","not","not","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitand_assign","bitand_assign","bitand_assign","bitor_assign","bitor_assign","bitor_assign","bitxor_assign","bitxor_assign","bitxor_assign","from","from","from","from","from","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","unpack","vec","read_le","read_be"],"q":["ppv_lite86","ppv_lite86::generic","","","","","","","","","","","","","","","","","","","","ppv_lite86","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ppv_lite86::generic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ppv_lite86","","ppv_lite86::generic","","","ppv_lite86","","","ppv_lite86::generic","","","","","","","","","","","","","","","","","","","","","","","","","","","","ppv_lite86","","ppv_lite86::generic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ppv_lite86","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","Ops that depend on word size","Ops that are independent of word size and endian","","","","","","","","","","","","","","","","","","A vector composed of two elements, which may be words or …","","","A vector composed of four elements, which may be words or …","","","A vector composed of four words; depending on their size, …","","","","A vector composed one or more lanes each composed of four …","","","","Exchange neigboring ranges of bits of the specified size","","","","","","","","","","","","","","","","","","A vector composed of multiple 128-bit lanes.","Split a multi-lane vector into single-lane vectors.","Build a multi-lane vector from individual lanes.","Combine single vectors into a multi-lane vector.","","","","","","","","","","","","","","","","","Safety","","Safety","","Safety","Safetyi":[0,0,0,1,1,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,4,0,0,0,0,0,0,5,5,5,5,5,5,5,5,0,6,0,0,7,0,8,8,0,9,9,0,10,10,10,0,11,11,11,0,12,12,12,12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,13,13,0,14,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,16,0,17,17,17,17,0,0,0,0,18,18,18,18,18,18,18,1,1,1,1,1,1,1,2,2,2,2,2,2,2,19,19,19,19,19,19,19,20,20,20,20,20,20,20,21,21,21,21,21,21,21,22,22,22,22,22,22,22,23,23,23,23,23,23,23,24,24,24,24,24,24,24,20,21,22,20,21,22,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,21,22,21,21,20,20,25,25,20,20,20,25,25,25,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,22,22,22,22,22,22,22,20,20,21,21,25,25,22,22,19,20,21,22,20,20,20,20,21,21,21,21,20,21,22,18,1,1,2,2,20,20,21,21,22,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,20,21,22,18,18,18,18,18,18,1,2,19,20,21,22,23,24,18,1,2,15,15,15,15],"f":[null,null,null,[[]],[[]],null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],null,null,[[]],null,[[["u32",15]]],[[["u32",15]]],null,[[["u32",15]]],[[["u32",15]]],null,[[]],[[]],[[]],null,[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,[[],["store",8]],[[]],[[]],[[]],[[]],null,[[]],null,[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["u64",15]],[[["u32",15],["u64",15]]],[[["u32",15]],["u32",15]],[[["u32",15]]],[[["u32",15]],["u64",15]],[[["u32",15],["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec128_storage",19]]],[[["vec128_storage",19]]],[[["vec128_storage",19]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["bool",15]],[[["vec256_storage",3]],["bool",15]],[[["vec256_storage",3]],["bool",15]],[[["vec512_storage",3]],["bool",15]],[[["vec512_storage",3]],["bool",15]],[[["u32x4_generic",3]],["bool",15]],[[["u32x4_generic",3]],["bool",15]],[[["u64x2_generic",3]],["bool",15]],[[["u64x2_generic",3]],["bool",15]],[[["u128x1_generic",3]],["bool",15]],[[["u128x1_generic",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32x4_generic",3]]],[[["u64x2_generic",3]]],[[["u128x1_generic",3]]],[[],["vec128_storage",19]],[[],["vec256_storage",3]],[[],["vec512_storage",3]],[[],["genericmachine",3]],[[],["u32x4_generic",3]],[[],["u64x2_generic",3]],[[],["u128x1_generic",3]],[[],["g0",3]],[[],["g1",3]],[[]],[[],["vec256_storage",3]],[[],["vec512_storage",3]],[[],["store",8]],[[]],[[]],[[]]],"p":[[3,"vec256_storage"],[3,"vec512_storage"],[8,"AndNot"],[8,"BSwap"],[8,"RotateEachWord32"],[8,"RotateEachWord64"],[8,"UnsafeFrom"],[8,"Vec2"],[8,"Vec4"],[8,"Words4"],[8,"LaneWords4"],[8,"Swap64"],[8,"MultiLane"],[8,"VZip"],[8,"Machine"],[8,"Store"],[8,"StoreBytes"],[19,"vec128_storage"],[3,"GenericMachine"],[3,"u32x4_generic"],[3,"u64x2_generic"],[3,"u128x1_generic"],[3,"G0"],[3,"G1"],[6,"u64x4_generic"]]},\
"proc_macro2":{"doc":"A wrapper around the procedural macro API of the compiler…","t":[0,3,3,3,11,11,3,11,11,11,11,11,11,4,13,13,13,13,11,11,3,4,13,13,13,13,11,11,11,11,11,11,11,3,4,13,13,11,11,11,11,11,3,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["token_stream","IntoIter","TokenStream","LexError","new","is_empty","Span","call_site","mixed_site","resolved_at","located_at","unwrap","join","TokenTree","Group","Ident","Punct","Literal","span","set_span","Group","Delimiter","Parenthesis","Brace","Bracket","None","new","delimiter","stream","span","span_open","span_close","set_span","Punct","Spacing","Alone","Joint","new","as_char","spacing","span","set_span","Ident","new","span","set_span","Literal","u8_suffixed","u16_suffixed","u32_suffixed","u64_suffixed","u128_suffixed","usize_suffixed","i8_suffixed","i16_suffixed","i32_suffixed","i64_suffixed","i128_suffixed","isize_suffixed","u8_unsuffixed","u16_unsuffixed","u32_unsuffixed","u64_unsuffixed","u128_unsuffixed","usize_unsuffixed","i8_unsuffixed","i16_unsuffixed","i32_unsuffixed","i64_unsuffixed","i128_unsuffixed","isize_unsuffixed","f64_unsuffixed","f64_suffixed","f32_unsuffixed","f32_suffixed","string","character","byte_string","span","set_span","subspan","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","from","from","from","from","from","from","extend","extend","into_iter","next","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","cmp","eq","eq","eq","eq","partial_cmp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","hash","from_str","from_iter","from_iter"],"q":["proc_macro2","proc_macro2::token_stream","proc_macro2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","proc_macro2::token_stream","","","","","","","","","","proc_macro2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","proc_macro2::token_stream","proc_macro2","","","","","","","","","proc_macro2::token_stream","proc_macro2","","","","","","","","","","","","","","","","","proc_macro2::token_stream","proc_macro2","","","","","","","","","",""],"d":["Public implementation details for the <code>TokenStream</code> type, …","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","An abstract stream of tokens, or more concretely a …","Error returned from <code>TokenStream::from_str</code>.","Returns an empty <code>TokenStream</code> containing no token trees.","Checks if this <code>TokenStream</code> is empty.","A region of source code, along with macro expansion …","The span of the invocation of the current procedural …","The span located at the invocation of the procedural …","Creates a new span with the same line/column information …","Creates a new span with the same name resolution behavior …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Create a new span encompassing <code>self</code> and <code>other</code>.","A single token or a delimited sequence of token trees …","A token stream surrounded by bracket delimiters.","An identifier.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","A literal character (<code>\'a\'</code>), string (<code>\\\"hello\\\"</code>), number (<code>2.3</code>…","Returns the span of this tree, delegating to the <code>span</code> …","Configures the span for <em>only this token</em>.","A delimited token stream.","Describes how a sequence of token trees is delimited.","<code>( ... )</code>","<code>{ ... }</code>","<code>[ ... ]</code>","<code>Ø ... Ø</code>","Creates a new <code>Group</code> with the given delimiter and token …","Returns the delimiter of this <code>Group</code>","Returns the <code>TokenStream</code> of tokens that are delimited in …","Returns the span for the delimiters of this token stream, …","Returns the span pointing to the opening delimiter of …","Returns the span pointing to the closing delimiter of …","Configures the span for this <code>Group</code>’s delimiters, but …","An <code>Punct</code> is an single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>…","Whether an <code>Punct</code> is followed immediately by another <code>Punct</code> …","E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>\'</code> is <code>Joint</code> in <code>\'#</code>.","Creates a new <code>Punct</code> from the given character and spacing.","Returns the value of this punctuation character as <code>char</code>.","Returns the spacing of this punctuation character, …","Returns the span for this punctuation character.","Configure the span for this punctuation character.","A word of Rust code, which may be a keyword or legal …","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Returns the span of this <code>Ident</code>.","Configures the span of this <code>Ident</code>, possibly changing its …","A literal string (<code>\\\"hello\\\"</code>), byte string (<code>b\\\"hello\\\"</code>), …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed integer literal with the …","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","String literal.","Character literal.","Byte string literal.","Returns the span encompassing this literal.","Configures the span associated for this literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,0,2,2,2,2,2,2,0,3,3,3,3,3,3,0,0,4,4,4,4,5,5,5,5,5,5,5,0,0,6,6,7,7,7,7,7,0,8,8,8,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,1,1,1,1,1,1,1,1,1,1,11,11,11,11,11,11,11,11,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,2,1,1,3,3,3,3,1,1,1,10,1,2,3,5,4,7,6,8,9,10,1,8,4,6,8,8,8,1,11,2,3,4,5,6,7,8,9,10,1,11,3,5,7,8,9,8,1,1,1],"f":[null,null,null,null,[[],["tokenstream",3]],[[],["bool",15]],null,[[],["span",3]],[[],["span",3]],[[["span",3]],["span",3]],[[["span",3]],["span",3]],[[],["span",3]],[[["span",3]],[["span",3],["option",4]]],null,null,null,null,null,[[],["span",3]],[[["span",3]]],null,null,null,null,null,null,[[["tokenstream",3],["delimiter",4]],["group",3]],[[],["delimiter",4]],[[],["tokenstream",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[["span",3]]],null,null,null,null,[[["spacing",4],["char",15]],["punct",3]],[[],["char",15]],[[],["spacing",4]],[[],["span",3]],[[["span",3]]],null,[[["span",3],["str",15]],["ident",3]],[[],["span",3]],[[["span",3]]],null,[[["u8",15]],["literal",3]],[[["u16",15]],["literal",3]],[[["u32",15]],["literal",3]],[[["u64",15]],["literal",3]],[[["u128",15]],["literal",3]],[[["usize",15]],["literal",3]],[[["i8",15]],["literal",3]],[[["i16",15]],["literal",3]],[[["i32",15]],["literal",3]],[[["i64",15]],["literal",3]],[[["i128",15]],["literal",3]],[[["isize",15]],["literal",3]],[[["u8",15]],["literal",3]],[[["u16",15]],["literal",3]],[[["u32",15]],["literal",3]],[[["u64",15]],["literal",3]],[[["u128",15]],["literal",3]],[[["usize",15]],["literal",3]],[[["i8",15]],["literal",3]],[[["i16",15]],["literal",3]],[[["i32",15]],["literal",3]],[[["i64",15]],["literal",3]],[[["i128",15]],["literal",3]],[[["isize",15]],["literal",3]],[[["f64",15]],["literal",3]],[[["f64",15]],["literal",3]],[[["f32",15]],["literal",3]],[[["f32",15]],["literal",3]],[[["str",15]],["literal",3]],[[["char",15]],["literal",3]],[[],["literal",3]],[[],["span",3]],[[["span",3]]],[[["usize",15],["rangebounds",8]],[["span",3],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["span",3]],["span",3]],[[["tokenstream",3]],["tokenstream",3]],[[["tokentree",4]]],[[["group",3]],["tokentree",4]],[[["ident",3]],["tokentree",4]],[[["punct",3]],["tokentree",4]],[[["literal",3]],["tokentree",4]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["intoiter",3]],[[],[["tokentree",4],["option",4]]],[[],["tokenstream",3]],[[],["span",3]],[[],["tokentree",4]],[[],["group",3]],[[],["delimiter",4]],[[],["punct",3]],[[],["spacing",4]],[[],["ident",3]],[[],["literal",3]],[[],["intoiter",3]],[[]],[[["ident",3]],["ordering",4]],[[["delimiter",4]],["bool",15]],[[["spacing",4]],["bool",15]],[[["ident",3]],["bool",15]],[[],["bool",15]],[[["ident",3]],[["option",4],["ordering",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["str",15]],[["tokenstream",3],["result",4],["lexerror",3]]],[[["intoiterator",8]]],[[["intoiterator",8]]]],"p":[[3,"TokenStream"],[3,"Span"],[4,"TokenTree"],[4,"Delimiter"],[3,"Group"],[4,"Spacing"],[3,"Punct"],[3,"Ident"],[3,"Literal"],[3,"IntoIter"],[3,"LexError"]]},\
"quote":{"doc":"github crates-io docs-rs","t":[8,10,10,10,10,8,10,11,8,10,11,11,14,14,14,11,11,11],"n":["TokenStreamExt","append","append_all","append_separated","append_terminated","IdentFragment","fmt","span","ToTokens","to_tokens","to_token_stream","into_token_stream","format_ident","quote","quote_spanned","span","to_token_stream","into_token_stream"],"q":["quote","","","","","","","","","","","","","","","","",""],"d":["TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Specialized formatting trait used by <code>format_ident!</code>.","Format this value as an identifier fragment.","Span associated with this <code>IdentFragment</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","Write <code>self</code> to the given <code>TokenStream</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Formatting macro for constructing <code>Ident</code>s.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object."],"i":[0,1,1,1,1,0,2,2,0,3,3,3,0,0,0,2,3,3],"f":[null,[[]],[[]],[[]],[[]],null,[[["formatter",3]],["result",6]],[[],[["span",3],["option",4]]],null,[[["tokenstream",3]]],[[],["tokenstream",3]],[[],["tokenstream",3]],null,null,null,[[],[["span",3],["option",4]]],[[],["tokenstream",3]],[[],["tokenstream",3]]],"p":[[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]},\
"rand":{"doc":"Utilities for random number generation","t":[0,0,3,11,11,8,16,8,16,10,10,10,11,11,8,10,8,10,10,3,3,3,3,0,0,3,11,8,3,4,13,13,13,13,11,11,3,4,13,3,3,3,3,4,13,13,13,13,3,8,10,11,3,3,0,0,0,3,3,3,0,3,11,3,3,3,0,0,4,11,11,11,11,11,4,4,5,5,8,16,10,10,10,10,10,10,10,10,8,11,11,11,11,3,8,3,8,10,10,10,10,8,16,10,11,11,11,5,8,10,8,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,11,11,11,11,11],"n":["distributions","uniform","Uniform","new","new_inclusive","SampleUniform","Sampler","UniformSampler","X","new","new_inclusive","sample","sample_single","sample_single_inclusive","SampleBorrow","borrow","SampleRange","sample_single","is_empty","UniformInt","UniformChar","UniformFloat","UniformDuration","weighted","alias_method","WeightedIndex","new","Weight","WeightedIndex","WeightedError","NoItem","InvalidWeight","AllWeightsZero","TooMany","new","update_weights","Bernoulli","BernoulliError","InvalidProbability","Open01","OpenClosed01","Alphanumeric","Uniform","WeightedError","NoItem","InvalidWeight","AllWeightsZero","TooMany","WeightedIndex","Distribution","sample","sample_iter","DistIter","Standard","prelude","rngs","adapter","ReadError","ReadRng","ReseedingRng","mock","StepRng","new","StdRng","ThreadRng","OsRng","seq","index","IndexVec","len","is_empty","index","into_vec","iter","IndexVecIter","IndexVecIntoIter","sample","sample_weighted","SliceRandom","Item","choose","choose_mut","choose_multiple","choose_weighted","choose_weighted_mut","choose_multiple_weighted","shuffle","partial_shuffle","IteratorRandom","choose","choose_stable","choose_multiple_fill","choose_multiple","SliceChooseIter","CryptoRng","Error","RngCore","next_u32","next_u64","fill_bytes","try_fill_bytes","SeedableRng","Seed","from_seed","seed_from_u64","from_rng","from_entropy","thread_rng","Fill","try_fill","Rng","gen","gen_range","sample","sample_iter","fill","try_fill","gen_bool","gen_ratio","random","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","vzip","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_string","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","vzip","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","to_owned","clone_into","vzip","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","vzip","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_string","vzip","next_u32","next_u64","fill_bytes","try_fill_bytes","from","from","clone","default","fmt","fmt","fmt","source","read","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","sample_single","sample_single_inclusive","new","new_inclusive","sample","new","new_inclusive","sample","sample_single","new","new_inclusive","sample","sample_single","new","new_inclusive","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","eq","eq","ne","eq","ne","eq","len","next","size_hint","next","size_hint","next","size_hint","next","size_hint","into_iter","from","from","from","from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","source","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","from_seed","from_rng","new","from_ratio","gen","gen_range","sample","sample_iter","fill","try_fill","gen_bool","gen_ratio","new","new","reseed","CUSTOM_START","INTERNAL_START","new","inner","take_inner","raw_os_error","code"],"q":["rand","rand::distributions","rand::distributions::uniform","","","","","","","","","","","","","","","","","","","","","rand::distributions","rand::distributions::weighted","rand::distributions::weighted::alias_method","","","rand::distributions::weighted","","","","","","","","rand::distributions","","","","","","","","","","","","","","","","","","rand","","rand::rngs","rand::rngs::adapter","","","rand::rngs","rand::rngs::mock","","rand::rngs","","","rand","rand::seq","rand::seq::index","","","","","","","","","","rand::seq","","","","","","","","","","","","","","","","rand","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributions::uniform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributions::weighted::alias_method","","","","","","","","rand::distributions::weighted","","","","","","","","","","","","","","","","","","","","","rand::distributions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::rngs::adapter","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::rngs::mock","","","","","","","","","","rand::rngs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::seq::index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::seq","","","","","","","","","rand","","","","","","","","","rand::rngs","","","","rand","","rand::rngs","","rand","","rand::rngs","rand","","rand::distributions::uniform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributions","","rand::distributions::weighted","rand::distributions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributions::uniform","","","","rand::distributions::weighted::alias_method","rand::distributions::weighted","","rand::distributions","","","","","rand::rngs::adapter","","","rand::rngs::mock","rand::rngs","","rand::seq::index","","","rand::seq","rand::distributions","rand::distributions::weighted","rand::rngs::adapter","rand::distributions","rand::distributions::weighted","rand::rngs::mock","","rand::rngs","","rand::seq::index","rand::seq","rand::distributions","","rand::seq::index","","","","rand::seq","","rand::seq::index","rand::distributions","","rand::seq::index","","rand::distributions","","","rand::distributions::uniform","","","","rand::distributions::weighted","","rand::distributions","","","rand::rngs::adapter","rand::rngs::mock","rand::rngs","","rand::seq::index","","rand::rngs","rand::rngs::adapter","","","","","","","","","rand::rngs::mock","","","","rand::rngs","","","","","","","","","","rand::distributions","","rand","","","","","","","","rand::rngs::adapter","","","rand","","","","","",""],"d":["Generating random samples from probability distributions","A distribution uniformly sampling numbers within a given …","Sample values uniformly between two bounds.","Create a new <code>Uniform</code> instance which samples uniformly …","Create a new <code>Uniform</code> instance which samples uniformly …","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Construct self, with inclusive lower bound and exclusive …","Construct self, with inclusive bounds <code>[low, high]</code>.","Sample a value.","Sample a single value uniformly from a range with …","Sample a single value uniformly from a range with …","Helper trait similar to <code>Borrow</code> but implemented only for …","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","Range that supports generating a single sample …","Generate a sample from the given range.","Check whether the range is empty.","The back-end implementing [<code>UniformSampler</code>] for integer …","The back-end implementing [<code>UniformSampler</code>] for <code>char</code>.","The back-end implementing [<code>UniformSampler</code>] for …","The back-end implementing [<code>UniformSampler</code>] for <code>Duration</code>.","Weighted index sampling","","","","","A distribution using weighted sampling of discrete items","Error type returned from <code>WeightedIndex::new</code>.","The provided weight collection contains no items.","A weight is either less than zero, greater than the …","All items in the provided weight collection are zero.","Too many weights are provided (length greater than …","Creates a new a <code>WeightedIndex</code> [<code>Distribution</code>] using the …","Update a subset of weights, without changing the number …","The Bernoulli distribution.","Error type returned from <code>Bernoulli::new</code>.","<code>p < 0</code> or <code>p > 1</code>.","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …","Sample values uniformly between two bounds.","Error type returned from <code>WeightedIndex::new</code>.","The provided weight collection contains no items.","A weight is either less than zero, greater than the …","All items in the provided weight collection are zero.","Too many weights are provided (length greater than …","A distribution using weighted sampling of discrete items","Types (distributions) that can be used to create a random …","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","Create an iterator that generates random values of <code>T</code>, …","An iterator that generates random values of <code>T</code> with …","A generic random value distribution, implemented for many …","Convenience re-export of common members","Random number generators and adapters","Wrappers / adapters forming RNGs","<code>ReadRng</code> error type","An RNG that reads random bytes straight from any type …","A wrapper around any PRNG that implements <code>BlockRngCore</code>, …","Mock random number generator","A simple implementation of <code>RngCore</code> for testing purposes.","Create a <code>StepRng</code>, yielding an arithmetic sequence …","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","A random number generator that retrieves randomness from …","Sequence-related functionality","Low-level API for sampling indices","A vector of indices.","Returns the number of indices","Returns <code>true</code> if the length is 0.","Return the value at the given <code>index</code>.","Return result as a <code>Vec<usize></code>. Conversion may or may not …","Iterate over the indices as a sequence of <code>usize</code> values","Return type of <code>IndexVec::iter</code>.","Return type of <code>IndexVec::into_iter</code>.","Randomly sample exactly <code>amount</code> distinct indices from …","Randomly sample exactly <code>amount</code> distinct indices from …","Extension trait on slices, providing random mutation and …","The element type.","Returns a reference to one random element of the slice, …","Returns a mutable reference to one random element of the …","Chooses <code>amount</code> elements from the slice at random, without …","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","Similar to <code>choose_multiple</code>, but where the likelihood of …","Shuffle a mutable slice in place.","Shuffle a slice in place, but exit early.","Extension trait on iterators, providing random sampling …","Choose one element at random from the iterator.","Choose one element at random from the iterator.","Collects values at random from the iterator into a …","Collects <code>amount</code> values at random from the iterator into a …","An iterator over multiple slice elements.","A marker trait used to indicate that an [<code>RngCore</code>] or …","Error type of random number generators","The core of a random number generator.","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Fill <code>dest</code> with random data.","Fill <code>dest</code> entirely with random data.","A random number generator that can be explicitly seeded.","Seed type, which is restricted to types …","Create a new PRNG using the given seed.","Create a new PRNG using a <code>u64</code> seed.","Create a new PRNG seeded from another <code>Rng</code>.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Retrieve the lazily-initialized thread-local random …","Types which may be filled with random data","Fill self with random data","An automatically-implemented extension trait on [<code>RngCore</code>] …","Return a random value supporting the <code>Standard</code> …","Generate a random value in the given range.","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Fill any type implementing [<code>Fill</code>] with random data","Fill any type implementing <code>Fill</code> with random data","Return a bool with a probability <code>p</code> of being true.","Return a bool with a probability of <code>numerator/denominator</code> …","Generates a random value using the thread-local random …onvert into an iterator over the indices as a sequence …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct a new <code>Bernoulli</code> with the given probability of …","Construct a new <code>Bernoulli</code> with the probability of success …","Return a random value supporting the <code>Standard</code> …","Generate a random value in the given range.","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Fill any type implementing [<code>Fill</code>] with random data","Fill any type implementing <code>Fill</code> with random data","Return a bool with a probability <code>p</code> of being true.","Return a bool with a probability of <code>numerator/denominator</code> …","Create a new <code>ReadRng</code> from a <code>Read</code>.","Create a new <code>ReseedingRng</code> from an existing PRNG, combined …","Reseed the internal PRNG.","Codes at or above this point can be used by users to …","Codes below this point represent OS Errors (i.e. positive …","Construct from any type supporting <code>std::error::Error</code>","Reference the inner error (<code>std</code> only)","Unwrap the inner error (<code>std</code> only)","Extract the raw OS error code (if this error came from …","Retrieve the error code, if any."],"i":[0,0,0,1,1,0,2,0,3,3,3,3,3,3,0,4,0,5,5,0,0,0,0,0,0,0,6,0,0,0,7,7,7,7,8,8,0,0,9,0,0,0,0,0,7,7,7,7,0,0,10,10,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,12,12,12,12,12,0,0,0,0,0,13,13,13,13,13,13,13,13,13,0,14,14,14,14,0,0,0,0,15,15,15,15,0,16,16,16,16,16,0,0,17,0,18,18,18,18,18,18,18,18,0,19,19,19,19,19,19,19,19,19,19,9,9,9,9,9,9,9,9,9,9,9,1,1,1,1,1,1,1,1,1,1,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,11,11,11,11,11,11,11,11,11,11,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,12,12,12,12,12,12,12,12,12,12,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,34,34,34,34,38,38,34,34,38,38,34,38,15,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,22,22,22,22,22,22,22,22,23,23,23,19,1,8,28,24,25,28,24,25,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,26,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,19,9,1,20,21,22,23,6,8,7,24,25,26,27,28,29,30,31,11,32,33,12,35,36,37,9,7,30,9,7,11,11,32,32,12,37,27,27,35,35,36,36,37,37,12,1,1,12,12,19,9,1,20,21,22,23,8,7,24,25,28,31,11,32,33,12,36,33,30,29,29,29,29,31,31,31,31,11,11,11,11,32,32,32,32,33,33,33,33,32,32,19,19,18,18,18,18,18,18,18,18,29,31,31,38,38,38,38,38,38,38],"f":[null,null,null,[[],["uniform",3]],[[],["uniform",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,[[]],null,[[]],[[],["bool",15]],null,null,null,null,null,null,null,[[["vec",3]],[["weightederror",4],["result",4]]],null,null,null,null,null,null,null,[[],[["weightedindex",3],["result",4],["weightederror",4]]],[[],[["weightederror",4],["result",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["distiter",3]],null,null,null,null,null,null,null,null,null,null,[[["u64",15]]],null,null,null,null,null,null,[[],["usize",15]],[[],["bool",15]],[[["usize",15]],["usize",15]],[[],[["usize",15],["vec",3]]],[[],["indexveciter",4]],null,null,[[["usize",15]],["indexvec",4]],[[["usize",15]],[["indexvec",4],["result",4],["weightederror",4]]],null,null,[[],["option",4]],[[],["option",4]],[[["usize",15]],["slicechooseiter",3]],[[],[["weightederror",4],["result",4]]],[[],[["weightederror",4],["result",4]]],[[["usize",15]],[["weightederror",4],["result",4],["slicechooseiter",3]]],[[]],[[["usize",15]]],null,[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[["usize",15]],["vec",3]],null,null,null,null,[[],["u32",15]],[[],["u64",15]],[[]],[[],[["error",3],["result",4]]],null,null,[[]],[[["u64",15]]],[[],[["error",3],["result",4]]],[[]],[[],["threadrng",3]],null,[[],[["result",4],["error",3]]],null,[[]],[[]],[[["distribution",8]]],[[],["distiter",3]],[[]],[[],[["result",4],["error",3]]],[[["f64",15]],["bool",15]],[[["u32",15]],["bool",15]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["string",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["string",3]],[[]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["error",3],["result",4]]],[[["error",3]],["error",3]],[[["nonzerou32",3]],["error",3]],[[],["osrng",3]],[[],["osrng",3]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[],[["error",8],["option",4]]],[[],[["result",4],["usize",15],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["duration",3]],[[],["bool",15]],[[]],[[],["usize",15]],[[],["f32",15]],[[],["f32",15]],[[],["f32",15]],[[],["f64",15]],[[],["f64",15]],[[],["f64",15]],[[],["u8",15]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["u128",15]],[[],["usize",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["i128",15]],[[],["isize",15]],[[],["nonzerou8",3]],[[],["nonzerou16",3]],[[],["nonzerou32",3]],[[],["nonzerou64",3]],[[],["nonzerou128",3]],[[],["nonzerousize",3]],[[],["char",15]],[[],["u8",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["wrapping",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["bernoullierror",4]],["bool",15]],[[["weightederror",4]],["bool",15]],[[["steprng",3]],["bool",15]],[[["steprng",3]],["bool",15]],[[["stdrng",3]],["bool",15]],[[["stdrng",3]],["bool",15]],[[["indexvec",4]],["bool",15]],[[],["usize",15]],[[],["option",4]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["indexvecintoiter",4]],[[["range",3]],["uniform",3]],[[["rangeinclusive",3]],["uniform",3]],[[["vec",3],["u32",15]]],[[["usize",15],["vec",3]]],[[],["bernoulli",3]],[[],["bernoullierror",4]],[[],["uniform",3]],[[],["uniformint",3]],[[],["uniformchar",3]],[[],["uniformfloat",3]],[[],["uniformduration",3]],[[],["weightedindex",3]],[[],["weightederror",4]],[[],["openclosed01",3]],[[],["open01",3]],[[],["standard",3]],[[],["reseedingrng",3]],[[],["steprng",3]],[[],["stdrng",3]],[[],["threadrng",3]],[[],["indexvec",4]],[[],["indexvecintoiter",4]],[[],["threadrng",3]],[[],[["error",8],["option",4]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[]],[[["rngcore",8]],[["result",4],["error",3]]],[[["f64",15]],[["bernoullierror",4],["result",4],["bernoulli",3]]],[[["u32",15]],[["bernoullierror",4],["result",4],["bernoulli",3]]],[[]],[[]],[[["distribution",8]]],[[],["distiter",3]],[[]],[[],[["result",4],["error",3]]],[[["f64",15]],["bool",15]],[[["u32",15]],["bool",15]],[[],["readrng",3]],[[["u64",15]]],[[],[["result",4],["error",3]]],null,null,[[],["error",3]],[[],["error",8]],[[],[["error",8],["box",3],["global",3]]],[[],[["option",4],["i32",15]]],[[],[["nonzerou32",3],["option",4]]]],"p":[[3,"Uniform"],[8,"SampleUniform"],[8,"UniformSampler"],[8,"SampleBorrow"],[8,"SampleRange"],[3,"WeightedIndex"],[4,"WeightedError"],[3,"WeightedIndex"],[4,"BernoulliError"],[8,"Distribution"],[3,"StepRng"],[4,"IndexVec"],[8,"SliceRandom"],[8,"IteratorRandom"],[8,"RngCore"],[8,"SeedableRng"],[8,"Fill"],[8,"Rng"],[3,"Bernoulli"],[3,"UniformInt"],[3,"UniformChar"],[3,"UniformFloat"],[3,"UniformDuration"],[3,"OpenClosed01"],[3,"Open01"],[3,"Alphanumeric"],[3,"DistIter"],[3,"Standard"],[3,"ReadRng"],[3,"ReadError"],[3,"ReseedingRng"],[3,"StdRng"],[3,"ThreadRng"],[3,"OsRng"],[4,"IndexVecIter"],[4,"IndexVecIntoIter"],[3,"SliceChooseIter"],[3,"Error"]]},\
"rand_chacha":{"doc":"The ChaCha random number generator.","t":[3,3,3,3,3,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ChaCha12Core","ChaCha12Rng","ChaCha20Core","ChaCha20Rng","ChaCha8Core","ChaCha8Rng","ChaChaRng","ChaChaCore","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","from","from","clone","clone","clone","clone","clone","clone","eq","ne","eq","eq","ne","eq","eq","ne","eq","fmt","fmt","fmt","fmt","fmt","fmt","generate","generate","generate","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","from_seed","from_seed","from_seed","from_seed","from_seed","from_seed","get_word_pos","set_word_pos","set_stream","get_word_pos","set_word_pos","set_stream","get_word_pos","set_word_pos","set_stream"],"q":["rand_chacha","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["ChaCha with 12 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds","A cryptographically secure random number generator that …","ChaCha with 8 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds","ChaCha with 20 rounds, low-level interface","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","Set the stream number.","Get the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","Set the stream number.","Get the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","Set the stream number."],"i":[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,2,4,6,1,2,3,4,5,6,1,1,2,3,3,4,5,5,6,1,2,3,4,5,6,1,3,5,2,2,2,2,4,4,4,4,6,6,6,6,1,2,3,4,5,6,2,2,2,4,4,4,6,6,6],"f":[null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["chacha20core",3]]],[[["chacha12core",3]]],[[["chacha8core",3]]],[[],["chacha20core",3]],[[],["chacha20rng",3]],[[],["chacha12core",3]],[[],["chacha12rng",3]],[[],["chacha8core",3]],[[],["chacha8rng",3]],[[["chacha20core",3]],["bool",15]],[[["chacha20core",3]],["bool",15]],[[["chacha20rng",3]],["bool",15]],[[["chacha12core",3]],["bool",15]],[[["chacha12core",3]],["bool",15]],[[["chacha12rng",3]],["bool",15]],[[["chacha8core",3]],["bool",15]],[[["chacha8core",3]],["bool",15]],[[["chacha8rng",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["result",4],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u128",15]],[[["u128",15]]],[[["u64",15]]],[[],["u128",15]],[[["u128",15]]],[[["u64",15]]],[[],["u128",15]],[[["u128",15]]],[[["u64",15]]]],"p":[[3,"ChaCha20Core"],[3,"ChaCha20Rng"],[3,"ChaCha12Core"],[3,"ChaCha12Rng"],[3,"ChaCha8Core"],[3,"ChaCha8Rng"]]},\
"rand_core":{"doc":"Random number generation traits","t":[0,8,16,16,10,3,12,11,11,11,11,3,12,11,11,11,11,0,5,5,5,5,5,5,0,5,5,3,3,8,10,10,10,10,8,8,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,11,11,11,11,11],"n":["block","BlockRngCore","Item","Results","generate","BlockRng","core","new","index","reset","generate_and_set","BlockRng64","core","new","index","reset","generate_and_set","impls","next_u64_via_u32","fill_bytes_via_next","fill_via_u32_chunks","fill_via_u64_chunks","next_u32_via_fill","next_u64_via_fill","le","read_u32_into","read_u64_into","Error","OsRng","RngCore","next_u32","next_u64","fill_bytes","try_fill_bytes","CryptoRng","SeedableRng","Seed","from_seed","seed_from_u64","from_rng","from_entropy","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_string","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_owned","clone_into","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","next_u32","next_u64","fill_bytes","try_fill_bytes","from_seed","seed_from_u64","from_rng","from_seed","seed_from_u64","from_rng","fmt","fmt","fmt","fmt","fmt","from","from","clone","clone","clone","default","source","read","CUSTOM_START","INTERNAL_START","new","inner","take_inner","raw_os_error","code"],"q":["rand_core","rand_core::block","","","","","","","","","","","","","","","","rand_core","rand_core::impls","","","","","","rand_core","rand_core::le","","rand_core","","","","","","","","","","","","","","rand_core::block","","","","","","","","","","","","","","","","","","rand_core","","","","","","","","","","","","","","","","","rand_core::block","","","","","","","","rand_core","","","","rand_core::block","","","","","","","","rand_core","","","","","rand_core::block","","rand_core","","","","","","","","","",""],"d":["The <code>BlockRngCore</code> trait and implementation helpers","A trait for RNGs which do not generate random numbers …","Results element type, e.g. <code>u32</code>.","Results type. This is the ‘block’ an RNG implementing …","Generate a new block of results.","A wrapper type implementing [<code>RngCore</code>] for some type …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","Create a new <code>BlockRng</code> from an existing RNG implementing …","Get the index into the result buffer.","Reset the number of available results. This will force a …","Generate a new set of results immediately, setting the …","A wrapper type implementing [<code>RngCore</code>] for some type …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","Create a new <code>BlockRng</code> from an existing RNG implementing …","Get the index into the result buffer.","Reset the number of available results. This will force a …","Generate a new set of results immediately, setting the …","Helper functions for implementing <code>RngCore</code> functions.","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.","Little-Endian utilities","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","Error type of random number generators","A random number generator that retrieves randomness from …","The core of a random number generator.","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Fill <code>dest</code> with random data.","Fill <code>dest</code> entirely with random data.","A marker trait used to indicate that an [<code>RngCore</code>] or …","A random number generator that can be explicitly seeded.","Seed type, which is restricted to types …","Create a new PRNG using the given seed.","Create a new PRNG using a <code>u64</code> seed.","Create a new PRNG seeded from another <code>Rng</code>.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Codes at or above this point can be used by users to …","Codes below this point represent OS Errors (i.e. positive …","Construct from any type supporting <code>std::error::Error</code>","Reference the inner error (<code>std</code> only)","Unwrap the inner error (<code>std</code> only)","Extract the raw OS error code (if this error came from …","Retrieve the error code, if any."],"i":[0,0,1,1,1,0,2,2,2,2,2,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,0,0,5,5,5,5,5,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,2,2,2,2,3,3,3,3,7,7,7,7,2,2,2,3,3,3,2,3,6,7,6,6,6,2,3,7,7,6,4,6,6,6,6,6,6,6],"f":[null,null,null,null,[[]],null,null,[[],["blockrng",3]],[[],["usize",15]],[[]],[[["usize",15]]],null,null,[[],["blockrng64",3]],[[],["usize",15]],[[]],[[["usize",15]]],null,[[],["u64",15]],[[]],[[]],[[]],[[],["u32",15]],[[],["u64",15]],null,[[]],[[]],null,null,null,[[],["u32",15]],[[],["u64",15]],[[]],[[],[["error",3],["result",4]]],null,null,null,[[]],[[["u64",15]]],[[["rngcore",8]],[["error",3],["result",4]]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["error",3],["result",4]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["error",3],["result",4]]],[[],["u32",15]],[[],["u64",15]],[[]],[[],[["error",3],["result",4]]],[[]],[[["u64",15]]],[[["rngcore",8]],[["error",3],["result",4]]],[[]],[[["u64",15]]],[[["rngcore",8]],[["error",3],["result",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["nonzerou32",3]]],[[["error",3]]],[[],["blockrng",3]],[[],["blockrng64",3]],[[],["osrng",3]],[[],["osrng",3]],[[],[["error",8],["option",4]]],[[],[["usize",15],["error",3],["result",4]]],null,null,[[]],[[],["error",8]],[[],[["box",3],["error",8]]],[[],[["option",4],["i32",15]]],[[],[["option",4],["nonzerou32",3]]]],"p":[[8,"BlockRngCore"],[3,"BlockRng"],[3,"BlockRng64"],[8,"RngCore"],[8,"SeedableRng"],[3,"Error"],[3,"OsRng"]]},\
"raw_window_handle":{"doc":"Interoperability library for Rust Windowing applications.","t":[0,3,12,12,11,8,10,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["macos","MacOSHandle","ns_window","ns_view","empty","HasRawWindowHandle","raw_window_handle","RawWindowHandle","MacOS","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","fmt","fmt","eq","ne","eq","ne","hash","hash","clone","clone"],"q":["raw_window_handle","raw_window_handle::macos","","","","raw_window_handle","","","","raw_window_handle::macos","","","","","","","raw_window_handle","","","","","","","raw_window_handle::macos","raw_window_handle","raw_window_handle::macos","","raw_window_handle","","raw_window_handle::macos","raw_window_handle","raw_window_handle::macos","raw_window_handle"],"d":["","Raw window handle for macOS.","","","","Window that wraps around a raw window handle.","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,0,2,0,3,1,1,1,1,1,1,1,3,3,3,3,3,3,3,1,3,1,1,3,3,1,3,1,3],"f":[null,null,null,null,[[],["macoshandle",3]],null,[[],["rawwindowhandle",4]],null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["macoshandle",3]],["bool",15]],[[["macoshandle",3]],["bool",15]],[[["rawwindowhandle",4]],["bool",15]],[[["rawwindowhandle",4]],["bool",15]],[[]],[[]],[[],["macoshandle",3]],[[],["rawwindowhandle",4]]],"p":[[3,"MacOSHandle"],[8,"HasRawWindowHandle"],[4,"RawWindowHandle"]]},\
"rawpointer":{"doc":"Rawpointer adds extra utility methods to raw pointers …","t":[5,8,10,11,11,11,11,11,11,11,11,11],"n":["ptrdistance","PointerExt","offset","add","sub","pre_inc","post_inc","pre_dec","post_dec","inc","dec","stride_offset"],"q":["rawpointer","","","","","","","","","","",""],"d":["Return the number of elements of <code>T</code> from <code>start</code> to <code>end</code>. …","Extension methods for raw pointers","","","","Increment the pointer by 1, and return its new value.","Increment the pointer by 1, but return its old value.","Decrement the pointer by 1, and return its new value.","Decrement the pointer by 1, but return its old value.","Increment by 1","Decrement by 1","Offset the pointer by <code>s</code> multiplied by <code>index</code>."],"i":[0,0,1,1,1,1,1,1,1,1,1,1],"f":[[[],["usize",15]],null,[[["isize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["isize",15]]]],"p":[[8,"PointerExt"]]},\
"rayon":{"doc":"Data-parallelism library that makes it easy to convert …","t":[0,0,3,3,3,0,3,3,3,0,3,3,0,3,3,3,3,0,3,3,3,0,3,3,3,0,3,3,3,3,0,0,8,16,10,8,16,16,10,11,11,10,11,8,16,16,16,10,10,10,8,16,10,11,10,10,8,10,8,10,10,8,16,10,10,5,5,5,4,13,13,3,3,3,3,5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,3,3,3,8,10,3,5,5,3,3,3,3,5,3,3,3,3,3,3,3,3,3,8,16,16,10,8,16,16,10,8,16,16,10,8,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,8,10,8,10,8,16,16,10,8,16,16,10,0,3,3,3,0,8,10,0,3,0,3,0,3,3,3,0,8,10,11,11,11,11,8,10,11,11,11,11,11,11,11,11,11,3,3,3,11,3,3,3,3,11,11,11,3,3,0,8,10,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,0,3,0,3,3,3,3,3,3,3,5,5,5,5,5,3,5,3,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["collections","binary_heap","IntoIter","Iter","Drain","btree_map","IntoIter","Iter","IterMut","btree_set","IntoIter","Iter","hash_map","IntoIter","Iter","IterMut","Drain","hash_set","IntoIter","Iter","Drain","linked_list","IntoIter","Iter","IterMut","vec_deque","IntoIter","Iter","IterMut","Drain","iter","plumbing","ProducerCallback","Output","callback","Producer","Item","IntoIter","into_iter","min_len","max_len","split_at","fold_with","Consumer","Folder","Reducer","Result","split_at","into_folder","full","Folder","Result","consume","consume_iter","complete","full","Reducer","reduce","UnindexedConsumer","split_off_left","to_reducer","UnindexedProducer","Item","split","fold_with","bridge","bridge_producer_consumer","bridge_unindexed","Either","Left","Right","Chain","Chunks","Cloned","Copied","empty","Empty","Enumerate","Filter","FilterMap","FlatMap","FlatMapIter","Flatten","FlattenIter","Fold","FoldWith","Inspect","Interleave","InterleaveShortest","Intersperse","MaxLen","MinLen","Map","MapInit","MapWith","MultiZip","once","Once","PanicFuse","IterBridge","ParallelBridge","par_bridge","Positions","repeat","repeatn","Repeat","RepeatN","Rev","Skip","split","Split","Take","TryFold","TryFoldWith","Update","WhileSome","Zip","ZipEq","StepBy","IntoParallelIterator","Iter","Item","into_par_iter","IntoParallelRefIterator","Iter","Item","par_iter","IntoParallelRefMutIterator","Iter","Item","par_iter_mut","ParallelIterator","Item","for_each","for_each_with","for_each_init","try_for_each","try_for_each_with","try_for_each_init","count","map","map_with","map_init","cloned","copied","inspect","update","filter","filter_map","flat_map","flat_map_iter","flatten","flatten_iter","reduce","reduce_with","try_reduce","try_reduce_with","fold","fold_with","try_fold","try_fold_with","sum","product","min","min_by","min_by_key","max","max_by","max_by_key","chain","find_any","find_first","find_last","find_map_any","find_map_first","find_map_last","any","all","while_some","panic_fuse","collect","unzip","partition","partition_map","intersperse","drive_unindexed","opt_len","IndexedParallelIterator","collect_into_vec","unzip_into_vecs","zip","zip_eq","interleave","interleave_shortest","chunks","cmp","partial_cmp","eq","ne","lt","le","gt","ge","enumerate","step_by","skip","take","position_any","position_first","position_last","positions","rev","with_min_len","with_max_len","len","drive","with_producer","FromParallelIterator","from_par_iter","ParallelExtend","par_extend","ParallelDrainFull","Iter","Item","par_drain","ParallelDrainRange","Iter","Item","par_drain","option","IntoIter","Iter","IterMut","prelude","ParallelBridge","par_bridge","range","Iter","range_inclusive","Iter","result","IntoIter","Iter","IterMut","slice","ParallelSlice","as_parallel_slice","par_split","par_windows","par_chunks","par_chunks_exact","ParallelSliceMut","as_parallel_slice_mut","par_split_mut","par_chunks_mut","par_chunks_exact_mut","par_sort","par_sort_by","par_sort_by_key","par_sort_unstable","par_sort_unstable_by","par_sort_unstable_by_key","Iter","Chunks","ChunksExact","remainder","Windows","IterMut","ChunksMut","ChunksExactMut","into_remainder","remainder","take_remainder","Split","SplitMut","str","ParallelString","as_parallel_string","par_chars","par_char_indices","par_bytes","par_encode_utf16","par_split","par_split_terminator","par_lines","par_split_whitespace","par_matches","par_match_indices","Chars","CharIndices","Bytes","EncodeUtf16","Split","SplitTerminator","Lines","SplitWhitespace","Matches","MatchIndices","string","Drain","vec","IntoIter","Drain","FnContext","ThreadBuilder","ThreadPool","ThreadPoolBuildError","ThreadPoolBuilder","current_num_threads","current_thread_index","join","join_context","scope","Scope","scope_fifo","ScopeFifo","spawn","spawn_fifo","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","into_iter","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","into_par_iter","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","cmp","partial_cmp","deref_mut","as_ref","as_ref","as_ref","next_back","into","as_mut","as_mut","as_mut","from","clone","deref","fmt","extend","fmt","hash","eq","ne","next","size_hint","fold","count","last","nth","collect","all","drop","fmt","description","source","default","fmt","fmt","fmt","fmt","fmt","fmt","fmt","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","drive_unindexed","opt_len","drive_unindexed","drive_unindexed","drive_unindexed","opt_len","drive_unindexed","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","drive_unindexed","opt_len","drive_unindexed","opt_len","drive_unindexed","opt_len","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","with_producer","len","drive","len","with_producer","len","drive","with_producer","len","drive","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","drive","len","with_producer","par_extend","drop","drop","drop","drop","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","take","zip","is_left","is_right","left","right","as_ref","as_mut","flip","map_left","map_right","either","either_with","left_and_then","right_and_then","into_iter","left_or","left_or_default","left_or_else","right_or","right_or_default","right_or_else","unwrap_left","unwrap_right","expect_left","expect_right","factor_first","factor_second","into_inner","map","migrated","index","name","stack_size","run","new","install","current_num_threads","current_thread_index","current_thread_has_pending_tasks","join","scope","scope_fifo","spawn","spawn_fifo","new","build","build_global","build_scoped","spawn_handler","thread_name","num_threads","panic_handler","stack_size","breadth_first","start_handler","exit_handler","spawn","spawn_fifo"],"q":["rayon","rayon::collections","rayon::collections::binary_heap","","","rayon::collections","rayon::collections::btree_map","","","rayon::collections","rayon::collections::btree_set","","rayon::collections","rayon::collections::hash_map","","","","rayon::collections","rayon::collections::hash_set","","","rayon::collections","rayon::collections::linked_list","","","rayon::collections","rayon::collections::vec_deque","","","","rayon","rayon::iter","rayon::iter::plumbing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon","rayon::option","","","rayon","rayon::prelude","","rayon","rayon::range","rayon","rayon::range_inclusive","rayon","rayon::result","","","rayon","rayon::slice","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon","rayon::str","","","","","","","","","","","","","","","","","","","","","","rayon","rayon::string","rayon","rayon::vec","","rayon","","","","","","","","","","","","","","","rayon::collections::binary_heap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::btree_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::btree_set","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::hash_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::hash_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::linked_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::collections::vec_deque","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::iterrayon::option","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::range","","","","","","","","","","","","","","rayon::range_inclusive","","","","","","","","","","","","","","rayon::result","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::slice","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::str","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::string","","","","","","","","","","","","rayon::vec","","","","","","","","","","","","","","","","","","","","","","","","","","rayon","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon","","","","","","","","","","","","rayon::collections::binary_heap","","","","","","rayon::collections::btree_map","","","","","","rayon::collections::btree_set","","","","rayon::collections::hash_map","","","","","","","","rayon::collections::hash_set","","","","","","rayon::collections::linked_list","","","","","","rayon::collections::vec_deque","","","","","","","","rayon::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::option","","","","","","rayon::range","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::range_inclusive","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::result","","","","","","rayon::slice","","","","","","","","","","","","","","","","rayon::str","","","","","","","","","","rayon::string","rayon::vec","","","","rayon::iter","","rayon::collections::binary_heap","","","","","","","","","rayon::collections::vec_deque","","","","","","","","","","","","rayon::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::option","","","","","","","","","rayon::range","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::range_inclusive","","","","","","","","","","","","","","","rayon::result","","","","","","","","","rayon::slice","","","","","","","","","","","","","","","","","","","","","rayon::vec","","","","","","rayon::iter","","","","rayon::collections::binary_heap","rayon::collections::vec_deque","rayon::string","rayon::vec","rayon::collections::binary_heap","","rayon::collections::btree_map","rayon::collections::btree_set","rayon::collections::hash_map","rayon::collections::hash_set","rayon::collections::linked_list","","rayon::collections::vec_deque","","rayon::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::option","","rayon::range","rayon::range_inclusive","rayon::result","","rayon::slice","","","","","rayon::str","","","","","","","","","","rayon::vec","rayon::collections::binary_heap","","","rayon::collections::btree_map","","","rayon::collections::btree_set","","rayon::collections::hash_map","","","","rayon::collections::hash_set","","","rayon::collections::linked_list","","","rayon::collections::vec_deque","","","","rayon::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon::option","","","rayon::range","rayon::range_inclusive","rayon::result","","","rayon::slice","","","","","","","","","rayon::str","","","","","","","","","","rayon::string","rayon::vec","","rayon::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rayon","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Parallel iterator types for standard collections","This module contains the parallel iterator types for heaps…","Parallel iterator over a binary heap","Parallel iterator over an immutable reference to a binary …","Draining parallel iterator that moves out of a binary …","This module contains the parallel iterator types for …","Parallel iterator over a B-Tree map","Parallel iterator over an immutable reference to a B-Tree …","Parallel iterator over a mutable reference to a B-Tree map","This module contains the parallel iterator types for …","Parallel iterator over a B-Tree set","Parallel iterator over an immutable reference to a B-Tree …","This module contains the parallel iterator types for hash …","Parallel iterator over a hash map","Parallel iterator over an immutable reference to a hash …","Parallel iterator over a mutable reference to a hash map","Draining parallel iterator that moves out of a hash map, …","This module contains the parallel iterator types for hash …","Parallel iterator over a hash set","Parallel iterator over an immutable reference to a hash …","Draining parallel iterator that moves out of a hash set, …","This module contains the parallel iterator types for …","Parallel iterator over a linked list","Parallel iterator over an immutable reference to a linked …","Parallel iterator over a mutable reference to a linked …","This module contains the parallel iterator types for …","Parallel iterator over a double-ended queue","Parallel iterator over an immutable reference to a …","Parallel iterator over a mutable reference to a …","Draining parallel iterator that moves a range out of a …","Traits for writing parallel programs using an …","Traits and functions used to implement parallel …","The <code>ProducerCallback</code> trait is a kind of generic closure, …","The type of value returned by this callback. Analogous to …","Invokes the callback with the given producer as argument. …","A <code>Producer</code> is effectively a “splittable <code>IntoIterator</code>”…","The type of item that will be produced by this producer …","The type of iterator we will become.","Convert <code>self</code> into an iterator; at this point, no more …","The minimum number of items that we will process …","The maximum number of items that we will process …","Split into two producers; one produces items <code>0..index</code>, the…","Iterate the producer, feeding each element to <code>folder</code>, and …","A consumer is effectively a generalized “fold” …","The type of folder that this consumer can be converted …","The type of reducer that is produced if this consumer is …","The type of result that this consumer will ultimately …","Divide the consumer into two consumers, one processing …","Convert the consumer into a folder that can consume items …","Hint whether this <code>Consumer</code> would like to stop processing …","The <code>Folder</code> trait encapsulates the standard fold operation…","The type of result that will ultimately be produced by …","Consume next item and return new sequential state.","Consume items from the iterator until full, and return …","Finish consuming items, produce final result.","Hint whether this <code>Folder</code> would like to stop processing …","The reducer is the final step of a <code>Consumer</code> – after a …","Reduce two final results into one; this is executed after …","A stateless consumer can be freely copied. These …","Splits off a “left” consumer and returns it. The <code>self</code> …","Creates a reducer that can be used to combine the results …","A variant on <code>Producer</code> which does not know its exact …","The type of item returned by this producer.","Split midway into a new producer if possible, otherwise …","Iterate the producer, feeding each element to <code>folder</code>, and …","This helper function is used to “connect” a parallel …","This helper function is used to “connect” a producer …","A variant of <code>bridge_producer_consumer</code> where the producer …","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","A value of type <code>L</code>.","A value of type <code>R</code>.","<code>Chain</code> is an iterator that joins <code>b</code> after <code>a</code> in one …","<code>Chunks</code> is an iterator that groups elements of an …","<code>Cloned</code> is an iterator that clones the elements of an …","<code>Copied</code> is an iterator that copies the elements of an …","Creates a parallel iterator that produces nothing.","Iterator adaptor for the <code>empty()</code> function.","<code>Enumerate</code> is an iterator that returns the current count …","<code>Filter</code> takes a predicate <code>filter_op</code> and filters out …","<code>FilterMap</code> creates an iterator that uses <code>filter_op</code> to both …","<code>FlatMap</code> maps each element to a parallel iterator, then …","<code>FlatMapIter</code> maps each element to a serial iterator, then …","<code>Flatten</code> turns each element to a parallel iterator, then …","<code>FlattenIter</code> turns each element to a serial iterator, then …","<code>Fold</code> is an iterator that applies a function over an …","<code>FoldWith</code> is an iterator that applies a function over an …","<code>Inspect</code> is an iterator that calls a function with a …","<code>Interleave</code> is an iterator that interleaves elements of …","<code>InterleaveShortest</code> is an iterator that works similarly to …","<code>Intersperse</code> is an iterator that inserts a particular item …","<code>MaxLen</code> is an iterator that imposes a maximum length on …","<code>MinLen</code> is an iterator that imposes a minimum length on …","<code>Map</code> is an iterator that transforms the elements of an …","<code>MapInit</code> is an iterator that transforms the elements of an …","<code>MapWith</code> is an iterator that transforms the elements of an …","<code>MultiZip</code> is an iterator that zips up a tuple of parallel …","Creates a parallel iterator that produces an element …","Iterator adaptor for the <code>once()</code> function.","<code>PanicFuse</code> is an adaptor that wraps an iterator with a …","<code>IterBridge</code> is a parallel iterator that wraps a sequential …","Conversion trait to convert an <code>Iterator</code> to a …","Creates a bridge from this type to a <code>ParallelIterator</code>.","<code>Positions</code> takes a predicate <code>predicate</code> and filters out …","Creates a parallel iterator that endlessly repeats <code>elt</code> (by…","Creates a parallel iterator that produces <code>n</code> repeats of <code>elt</code>…","Iterator adaptor for the <code>repeat()</code> function.","Iterator adaptor for the <code>repeatn()</code> function.","<code>Rev</code> is an iterator that produces elements in reverse …","<code>Skip</code> is an iterator that skips over the first <code>n</code> elements. …","The <code>split</code> function takes arbitrary data and a closure …","<code>Split</code> is a parallel iterator using arbitrary data and a …","<code>Take</code> is an iterator that iterates over the first <code>n</code> …","<code>TryFold</code> is an iterator that applies a function over an …","<code>TryFoldWith</code> is an iterator that applies a function over …","<code>Update</code> is an iterator that mutates the elements of an …","<code>WhileSome</code> is an iterator that yields the <code>Some</code> elements of …","<code>Zip</code> is an iterator that zips up <code>a</code> and <code>b</code> into a single …","An <code>IndexedParallelIterator</code> that iterates over two …","<code>StepBy</code> is an iterator that skips <code>n</code> elements between each …","<code>IntoParallelIterator</code> implements the conversion to a …","The parallel iterator type that will be created.","The type of item that the parallel iterator will produce.","Converts <code>self</code> into a parallel iterator.","<code>IntoParallelRefIterator</code> implements the conversion to a …","The type of the parallel iterator that will be returned.","The type of item that the parallel iterator will produce. …","Converts <code>self</code> into a parallel iterator.","<code>IntoParallelRefMutIterator</code> implements the conversion to a …","The type of iterator that will be created.","The type of item that will be produced; this is typically …","Creates the parallel iterator from <code>self</code>.","Parallel version of the standard iterator trait.","The type of item that this parallel iterator produces. …","Executes <code>OP</code> on each item produced by the iterator, in …","Executes <code>OP</code> on the given <code>init</code> value with each item …","Executes <code>OP</code> on a value returned by <code>init</code> with each item …","Executes a fallible <code>OP</code> on each item produced by the …","Executes a fallible <code>OP</code> on the given <code>init</code> value with each …","Executes a fallible <code>OP</code> on a value returned by <code>init</code> with …","Counts the number of items in this parallel iterator.","Applies <code>map_op</code> to each item of this iterator, producing a …","Applies <code>map_op</code> to the given <code>init</code> value with each item of …","Applies <code>map_op</code> to a value returned by <code>init</code> with each item …","Creates an iterator which clones all of its elements.  …","Creates an iterator which copies all of its elements.  …","Applies <code>inspect_op</code> to a reference to each item of this …","Mutates each item of this iterator before yielding it.","Applies <code>filter_op</code> to each item of this iterator, …","Applies <code>filter_op</code> to each item of this iterator to get an …","Applies <code>map_op</code> to each item of this iterator to get …","Applies <code>map_op</code> to each item of this iterator to get …","An adaptor that flattens parallel-iterable <code>Item</code>s into one …","An adaptor that flattens serial-iterable <code>Item</code>s into one …","Reduces the items in the iterator into one item using <code>op</code>. …","Reduces the items in the iterator into one item using <code>op</code>. …","Reduces the items in the iterator into one item using a …","Reduces the items in the iterator into one item using a …","Parallel fold is similar to sequential fold except that …","Applies <code>fold_op</code> to the given <code>init</code> value with each item of …","Performs a fallible parallel fold.","Performs a fallible parallel fold with a cloneable <code>init</code> …","Sums up the items in the iterator.","Multiplies all the items in the iterator.","Computes the minimum of all the items in the iterator. If …","Computes the minimum of all the items in the iterator …","Computes the item that yields the minimum value for the …","Computes the maximum of all the items in the iterator. If …","Computes the maximum of all the items in the iterator …","Computes the item that yields the maximum value for the …","Takes two iterators and creates a new iterator over both.","Searches for <strong>some</strong> item in the parallel iterator that …","Searches for the sequentially <strong>first</strong> item in the parallel …","Searches for the sequentially <strong>last</strong> item in the parallel …","Applies the given predicate to the items in the parallel …","Applies the given predicate to the items in the parallel …","Applies the given predicate to the items in the parallel …","Searches for <strong>some</strong> item in the parallel iterator that …","Tests that every item in the parallel iterator matches …","Creates an iterator over the <code>Some</code> items of this iterator, …","Wraps an iterator with a fuse in case of panics, to halt …","Creates a fresh collection containing all the elements …","Unzips the items of a parallel iterator into a pair of …","Partitions the items of a parallel iterator into a pair …","Partitions and maps the items of a parallel iterator into …","Intersperses clones of an element between items of this …","Internal method used to define the behavior of this …","Internal method used to define the behavior of this …","An iterator that supports “random access” to its …","Collects the results of the iterator into the specified …","Unzips the results of the iterator into the specified …","Iterates over tuples <code>(A, B)</code>, where the items <code>A</code> are from …","The same as <code>Zip</code>, but requires that both iterators have …","Interleaves elements of this iterator and the other given …","Interleaves elements of this iterator and the other given …","Splits an iterator up into fixed-size chunks.","Lexicographically compares the elements of this …","Lexicographically compares the elements of this …","Determines if the elements of this <code>ParallelIterator</code> are …","Determines if the elements of this <code>ParallelIterator</code> are …","Determines if the elements of this <code>ParallelIterator</code> are …","Determines if the elements of this <code>ParallelIterator</code> are …","Determines if the elements of this <code>ParallelIterator</code> are …","Determines if the elements of this <code>ParallelIterator</code> are …","Yields an index along with each item.","Creates an iterator that steps by the given amount","Creates an iterator that skips the first <code>n</code> elements.","Creates an iterator that yields the first <code>n</code> elements.","Searches for <strong>some</strong> item in the parallel iterator that …","Searches for the sequentially <strong>first</strong> item in the parallel …","Searches for the sequentially <strong>last</strong> item in the parallel …","Searches for items in the parallel iterator that match …","Produces a new iterator with the elements of this …","Sets the minimum length of iterators desired to process …","Sets the maximum length of iterators desired to process …","Produces an exact count of how many items this iterator …","Internal method used to define the behavior of this …","Internal method used to define the behavior of this …","<code>FromParallelIterator</code> implements the creation of a …","Creates an instance of the collection from the parallel …","<code>ParallelExtend</code> extends an existing collection with items …","Extends an instance of the collection with the elements …","<code>ParallelDrainFull</code> creates a parallel iterator that moves …","The draining parallel iterator type that will be created.","The type of item that the parallel iterator will produce. …","Returns a draining parallel iterator over an entire …","<code>ParallelDrainRange</code> creates a parallel iterator that moves …","The draining parallel iterator type that will be created.","The type of item that the parallel iterator will produce. …","Returns a draining parallel iterator over a range of the …","Parallel iterator types for options","A parallel iterator over the value in <code>Some</code> variant of an …","A parallel iterator over a reference to the <code>Some</code> variant …","A parallel iterator over a mutable reference to the <code>Some</code> …","The rayon prelude imports the various <code>ParallelIterator</code> …","Conversion trait to convert an <code>Iterator</code> to a …","Creates a bridge from this type to a <code>ParallelIterator</code>.","Parallel iterator types for ranges, the type for values …","Parallel iterator over a range, implemented for all …","Parallel iterator types for inclusive ranges, the type …","Parallel iterator over an inclusive range, implemented …","Parallel iterator types for results","Parallel iterator over a result","Parallel iterator over an immutable reference to a result","Parallel iterator over a mutable reference to a result","Parallel iterator types for slices","Parallel extensions for slices.","Returns a plain slice, which is used to implement the …","Returns a parallel iterator over subslices separated by …","Returns a parallel iterator over all contiguous windows …","Returns a parallel iterator over at most <code>chunk_size</code> …","Returns a parallel iterator over <code>chunk_size</code> elements of …","Parallel extensions for mutable slices.","Returns a plain mutable slice, which is used to implement …","Returns a parallel iterator over mutable subslices …","Returns a parallel iterator over at most <code>chunk_size</code> …","Returns a parallel iterator over <code>chunk_size</code> elements of …","Sorts the slice in parallel.","Sorts the slice in parallel with a comparator function.","Sorts the slice in parallel with a key extraction …","Sorts the slice in parallel, but may not preserve the …","Sorts the slice in parallel with a comparator function, …","Sorts the slice in parallel with a key extraction …","Parallel iterator over immutable items in a slice","Parallel iterator over immutable non-overlapping chunks …","Parallel iterator over immutable non-overlapping chunks …","Return the remainder of the original slice that is not …","Parallel iterator over immutable overlapping windows of a …","Parallel iterator over mutable items in a slice","Parallel iterator over mutable non-overlapping chunks of …","Parallel iterator over mutable non-overlapping chunks of …","Return the remainder of the original slice that is not …","Return the remainder of the original slice that is not …","Return the remainder of the original slice that is not …","Parallel iterator over slices separated by a predicate","Parallel iterator over mutable slices separated by a …","Parallel iterator types for strings","Parallel extensions for strings.","Returns a plain string slice, which is used to implement …","Returns a parallel iterator over the characters of a …","Returns a parallel iterator over the characters of a …","Returns a parallel iterator over the bytes of a string.","Returns a parallel iterator over a string encoded as …","Returns a parallel iterator over substrings separated by a…","Returns a parallel iterator over substrings terminated by …","Returns a parallel iterator over the lines of a string, …","Returns a parallel iterator over the sub-slices of a …","Returns a parallel iterator over substrings that match a …","Returns a parallel iterator over substrings that match a …","Parallel iterator over the characters of a string","Parallel iterator over the characters of a string, with …","Parallel iterator over the bytes of a string","Parallel iterator over a string encoded as UTF-16","Parallel iterator over substrings separated by a pattern","Parallel iterator over substrings separated by a …","Parallel iterator over lines in a string","Parallel iterator over substrings separated by whitespace","Parallel iterator over substrings that match a pattern","Parallel iterator over substrings that match a pattern, …","This module contains the parallel iterator types for …","Draining parallel iterator that moves a range of …","Parallel iterator types for vectors (<code>Vec<T></code>)","Parallel iterator that moves out of a vector.","Draining parallel iterator that moves a range out of a …","Provides the calling context to a closure called by …","Thread builder used for customization via …","Represents a user created thread-pool.","Error when initializing a thread pool.","Used to create a new <code>ThreadPool</code> or to configure the …","Returns the number of threads in the current registry. If …","If called from a Rayon worker thread, returns the index …","Takes two closures and <em>potentially</em> runs them in parallel. …","Identical to <code>join</code>, except that the closures have a …","Creates a “fork-join” scope <code>s</code> and invokes the closure …","Represents a fork-join scope which can be used to spawn …","Creates a “fork-join” scope <code>s</code> with FIFO order, and …","Represents a fork-join scope which can be used to spawn …","Fires off a task into the Rayon threadpool in the “…","Fires off a task into the Rayon threadpool in the “…akes only <code>n</code> repeats of the element, similar to the …","Iterates tuples, repeating the element with items from …","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","Convert the left side of <code>Either<L, R></code> to an <code>Option<L></code>.","Convert the right side of <code>Either<L, R></code> to an <code>Option<R></code>.","Convert <code>&Either<L, R></code> to <code>Either<&L, &R></code>.","Convert <code>&mut Either<L, R></code> to <code>Either<&mut L, &mut R></code>.","Convert <code>Either<L, R></code> to <code>Either<R, L></code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Apply one of two functions depending on contents, …","Like <code>either</code>, but provide some context to whichever of the …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Convert the inner value to an iterator.","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","Returns the left value","Returns the right value","Returns the left value","Returns the right value","Factor out a homogeneous type from an either of pairs.","Factor out a homogeneous type from an either of pairs.","Extract the value of an either over two equivalent types.","Map <code>f</code> over the contained value and return the result in …","Returns <code>true</code> if the closure was called from a different …","Gets the index of this thread in the pool, within …","Gets the string that was specified by …","Gets the value that was specified by …","Executes the main loop for this thread. This will not …","Deprecated in favor of <code>ThreadPoolBuilder::build</code>.","Executes <code>op</code> within the threadpool. Any attempts to use …","Returns the (current) number of threads in the thread …","If called from a Rayon worker thread in this thread-pool, …","Returns true if the current worker thread currently has …","Execute <code>oper_a</code> and <code>oper_b</code> in the thread-pool and return …","Creates a scope that executes within this thread-pool. …","Creates a scope that executes within this thread-pool. …","Spawns an asynchronous task in this thread-pool. This …","Spawns an asynchronous task in this thread-pool. This …","Creates and returns a valid rayon thread pool builder, …","Creates a new <code>ThreadPool</code> initialized using this …","Initializes the global thread pool. This initialization is…","Creates a scoped <code>ThreadPool</code> initialized using this …","Sets a custom function for spawning threads.","Sets a closure which takes a thread index and returns the …","Sets the number of threads to be used in the rayon …","Normally, whenever Rayon catches a panic, it tries to …","Sets the stack size of the worker threads","<strong>(DEPRECATED)</strong> Suggest to worker threads that they execute …","Sets a callback to be invoked on thread start.","Sets a callback to be invoked on thread exit.","Spawns a job into the fork-join scope <code>self</code>. This job will …","Spawns a job into the fork-join scope <code>self</code>. This job will …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,2,2,2,2,2,2,2,0,3,3,3,3,3,3,0,4,4,4,4,4,0,5,0,6,6,0,7,7,7,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,10,0,11,11,11,0,12,12,12,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,15,0,16,0,17,17,17,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,19,19,19,19,19,0,20,20,20,20,20,20,20,20,20,20,0,0,0,21,0,0,0,0,22,22,22,0,0,0,0,23,23,23,23,23,23,23,23,23,23,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,86,86,86,86,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,87,87,87,87,87,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,93,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,96,96,96,96,96,96,21,21,21,21,21,21,21,21,21,21,21,21,21,21,97,97,97,97,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,99,99,99,22,22,22,22,22,22,22,22,22,22,22,22,100,100,100,100,100,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,106,106,106,106,106,106,107,107,107,107,107,107,107,107,107,107,107,107,107,107,108,108,108,108,108,108,108,108,108,108,108,108,108,108,109,109,109,109,109,109,109,109,109,109,109,109,109,109,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,112,112,112,112,113,113,113,113,113,113,113,113,113,113,113,113,113,113,114,114,114,114,114,114,114,114,114,114,114,114,115,115,115,115,115,115,115,115,115,115,115,116,116,116,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,118,118,118,118,119,119,119,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,121,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,117,118,118,118,119,120,118,121,116,115,117,119,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,53,54,55,56,57,58,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,70,70,71,71,72,73,74,75,75,76,76,77,77,78,79,79,80,81,82,82,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,92,92,93,93,94,94,95,95,96,96,21,21,97,97,98,98,99,99,22,22,100,101,102,103,104,105,106,107,108,109,110,111,112,113,113,114,114,8,8,24,24,24,25,25,25,26,26,26,42,42,42,43,43,43,44,44,44,45,45,45,46,46,46,47,47,47,48,48,48,49,49,49,50,50,50,51,51,51,60,60,60,61,61,61,62,62,62,63,63,63,64,64,64,65,65,65,66,66,66,67,67,67,68,68,68,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,70,70,70,71,71,71,75,75,75,76,76,76,77,77,77,79,79,79,82,82,82,84,84,84,85,85,85,86,86,86,87,87,87,88,88,88,89,89,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,92,92,92,93,93,93,94,94,94,95,95,95,96,96,96,21,21,21,97,97,97,98,98,98,99,99,99,22,22,22,113,113,113,114,114,114,8,8,8,8,26,45,112,114,24,25,28,31,33,37,39,40,42,43,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,91,92,93,95,96,21,97,100,102,103,104,105,106,107,108,109,110,111,113,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,21,97,98,99,22,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,74,74,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,115,116,116,116,116,117,117,117,117,117,117,117,117,117,117,119,119,119,119,119,119,119,119,119,119,119,119,120,121],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,[[]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]]],[[]],null,null,null,null,[[["usize",15]]],[[]],[[],["bool",15]],null,null,[[]],[[]],[[]],[[],["bool",15]],null,[[]],null,[[]],[[]],null,null,[[]],[[]],[[]],[[["usize",15]]],[[]],null,null,null,null,null,null,null,[[],[["empty",3],["send",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["send",8]],[["send",8],["once",3]]],null,null,null,null,[[],["iterbridge",3]],null,[[["clone",8],["send",8]],[["clone",8],["send",8],["repeat",3]]],[[["clone",8],["send",8],["usize",15]],[["clone",8],["send",8],["repeatn",3]]],null,null,null,null,[[],["split",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,[[]],null,null,null,[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["map",3]],[[],["mapwith",3]],[[],["mapinit",3]],[[],["cloned",3]],[[],["copied",3]],[[],["inspect",3]],[[],["update",3]],[[],["filter",3]],[[],["filtermap",3]],[[],["flatmap",3]],[[],["flatmapiter",3]],[[],["flatten",3]],[[],["flatteniter",3]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[],["fold",3]],[[],["foldwith",3]],[[],["tryfold",3]],[[],["tryfoldwith",3]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["chain",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["bool",15]],[[],["whilesome",3]],[[],["panicfuse",3]],[[]],[[]],[[]],[[]],[[],["intersperse",3]],[[]],[[],[["usize",15],["option",4]]],null,[[["vec",3]]],[[["vec",3],["vec",3]]],[[],["zip",3]],[[],["zipeq",3]],[[],["interleave",3]],[[],["interleaveshortest",3]],[[["usize",15]],["chunks",3]],[[],["ordering",4]],[[],[["option",4],["ordering",4]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["enumerate",3]],[[["usize",15]],["stepby",3]],[[["usize",15]],["skip",3]],[[["usize",15]],["take",3]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],["positions",3]],[[],["rev",3]],[[["usize",15]],["minlen",3]],[[["usize",15]],["maxlen",3]],[[],["usize",15]],[[["consumer",8]]],[[["producercallback",8]]],null,[[]],null,[[]],null,null,null,[[]],null,null,null,[[["rangebounds",8]]],null,null,null,null,null,null,[[],["iterbridge",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[],["split",3]],[[["usize",15]],["windows",3]],[[["usize",15]],["chunks",3]],[[["usize",15]],["chunksexact",3]],null,[[]],[[],["splitmut",3]],[[["usize",15]],["chunksmut",3]],[[["usize",15]],["chunksexactmut",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],null,null,null,null,[[]],[[]],[[]],null,null,null,null,[[],["str",15]],[[],["chars",3]],[[],["charindices",3]],[[],["bytes",3]],[[],["encodeutf16",3]],[[["pattern",8]],[["split",3],["pattern",8]]],[[["pattern",8]],[["pattern",8],["splitterminator",3]]],[[],["lines",3]],[[],["splitwhitespace",3]],[[["pattern",8]],[["matches",3],["pattern",8]]],[[["pattern",8]],[["matchindices",3],["pattern",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["usize",15]],[[],[["option",4],["usize",15]]],[[]],[[]],[[]],null,[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["either",4]],["ordering",4]],[[["either",4]],[["option",4],["ordering",4]]],[[]],[[]],[[],["str",15]],[[]],[[],["option",4]],[[],["result",4]],[[]],[[],["str",15]],[[]],[[["result",4]],["either",4]],[[],["either",4]],[[]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[["either",4]],["bool",15]],[[["either",4]],["bool",15]],[[],["option",4]],[[]],[[]],[[],["usize",15]],[[],["option",4]],[[["usize",15]],["option",4]],[[]],[[],["bool",15]],[[]],[[["formatter",3]],[["error",3],["result",4]]],[[],["str",15]],[[],[["error",8],["option",4]]],[[],[["threadpoolbuilder",3],["defaultspawn",3]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[]],[[]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[]],[[],[["usize",15],["option",4]]],[[]],[[]],[[]],[[],[["usize",15],["option",4]]],[[]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[["consumer",8]]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[["consumer",8]]],[[],["usize",15]],[[]],[[["consumer",8]]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[],["usize",15]],[[["consumer",8]]],[[],["usize",15]],[[]],[[],["usize",15]],[[["consumer",8]]],[[]],[[],["usize",15]],[[["consumer",8]]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[["consumer",8]]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[],["intoiter",3]],[[]],[[],["chain",3]],[[],["chunks",3]],[[],["cloned",3]],[[],["copied",3]],[[]],[[],["enumerate",3]],[[],["filter",3]],[[],["filtermap",3]],[[],["flatmap",3]],[[],["flatmapiter",3]],[[],["flatten",3]],[[],["flatteniter",3]],[[],["fold",3]],[[],["foldwith",3]],[[],["inspect",3]],[[],["interleave",3]],[[],["interleaveshortest",3]],[[],["intersperse",3]],[[],["minlen",3]],[[],["maxlen",3]],[[],["map",3]],[[],["mapwith",3]],[[],["mapinit",3]],[[],["multizip",3]],[[],["once",3]],[[],["panicfuse",3]],[[],["iterbridge",3]],[[],["positions",3]],[[],["repeat",3]],[[],["repeatn",3]],[[],["rev",3]],[[],["skip",3]],[[],["split",3]],[[],["take",3]],[[],["tryfold",3]],[[],["tryfoldwith",3]],[[],["update",3]],[[],["whilesome",3]],[[],["zip",3]],[[],["zipeq",3]],[[],["stepby",3]],[[],["intoiter",3]],[[]],[[],["iter",3]],[[],["iter",3]],[[],["intoiter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["chars",3]],[[],["charindices",3]],[[],["bytes",3]],[[],["encodeutf16",3]],[[],["split",3]],[[],["splitterminator",3]],[[],["lines",3]],[[],["splitwhitespace",3]],[[],["matches",3]],[[],["matchindices",3]],[[],["intoiter",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]],["repeatn",3]],[[],[["zip",3],["repeatn",3]]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["either",4]],[[],["either",4]],[[],["either",4]],[[],["either",4]],[[],["either",4]],[[]],[[]],[[],["either",4]],[[],["either",4]],[[],["either",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]]],[[["str",15]]],[[]],[[]],[[]],[[],["either",4]],[[],["bool",15]],[[],["usize",15]],[[],[["option",4],["str",15]]],[[],[["option",4],["usize",15]]],[[]],[[["configuration",3]],[["result",4],["threadpool",3],["box",3]]],[[]],[[],["usize",15]],[[],[["option",4],["usize",15]]],[[],[["bool",15],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[],[["threadpoolbuilder",3],["defaultspawn",3]]],[[],[["threadpoolbuilderror",3],["result",4],["threadpool",3]]],[[],[["result",4],["threadpoolbuilderror",3]]],[[],[["threadpoolbuilderror",3],["result",4]]],[[],[["threadpoolbuilder",3],["customspawn",3]]],[[],["threadpoolbuilder",3]],[[["usize",15]],["threadpoolbuilder",3]],[[],["threadpoolbuilder",3]],[[["usize",15]],["threadpoolbuilder",3]],[[],["threadpoolbuilder",3]],[[],["threadpoolbuilder",3]],[[],["threadpoolbuilder",3]],[[]],[[]]],"p":[[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[8,"UnindexedProducer"],[4,"Either"],[8,"ParallelBridge"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ParallelIterator"],[8,"IndexedParallelIterator"],[8,"FromParallelIterator"],[8,"ParallelExtend"],[8,"ParallelDrainFull"],[8,"ParallelDrainRange"],[8,"ParallelSlice"],[8,"ParallelSliceMut"],[3,"ChunksExact"],[3,"ChunksExactMut"],[8,"ParallelString"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Drain"],[3,"Chain"],[3,"Chunks"],[3,"Cloned"],[3,"Copied"],[3,"Empty"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[3,"FlatMapIter"],[3,"Flatten"],[3,"FlattenIter"],[3,"Fold"],[3,"FoldWith"],[3,"Inspect"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Intersperse"],[3,"MinLen"],[3,"MaxLen"],[3,"Map"],[3,"MapWith"],[3,"MapInit"],[3,"MultiZip"],[3,"Once"],[3,"PanicFuse"],[3,"IterBridge"],[3,"Positions"],[3,"Repeat"],[3,"RepeatN"],[3,"Rev"],[3,"Skip"],[3,"Split"],[3,"Take"],[3,"TryFold"],[3,"TryFoldWith"],[3,"Update"],[3,"WhileSome"],[3,"Zip"],[3,"ZipEq"],[3,"StepBy"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"Chunks"],[3,"Windows"],[3,"IterMut"],[3,"ChunksMut"],[3,"Split"],[3,"SplitMut"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"EncodeUtf16"],[3,"Split"],[3,"SplitTerminator"],[3,"Lines"],[3,"SplitWhitespace"],[3,"Matches"],[3,"MatchIndices"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"FnContext"],[3,"ThreadBuilder"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"],[3,"ThreadPoolBuilder"],[3,"Scope"],[3,"ScopeFifo"]]},\
"rayon_core":{"doc":"Under construction","t":[5,5,3,5,3,5,3,5,5,5,5,3,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["join","join_context","ThreadBuilder","scope","Scope","scope_fifo","ScopeFifo","spawn","spawn_fifo","current_thread_has_pending_tasks","current_thread_index","ThreadPool","current_num_threads","ThreadPoolBuildError","ThreadPoolBuilder","Configuration","new","build","build_global","build_scoped","spawn_handler","thread_name","num_threads","panic_handler","stack_size","breadth_first","start_handler","exit_handler","new","build","thread_name","num_threads","panic_handler","stack_size","breadth_first","start_handler","exit_handler","initialize","FnContext","migrated","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","init","deref","deref_mut","drop","drop","default","default","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","description","source","index","name","stack_size","run","spawn","spawn_fifo","new","install","current_num_threads","current_thread_index","current_thread_has_pending_tasks","join","scope","scope_fifo","spawn","spawn_fifo"],"q":["rayon_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Takes two closures and <em>potentially</em> runs them in parallel. …","Identical to <code>join</code>, except that the closures have a …","Thread builder used for customization via …","Creates a “fork-join” scope <code>s</code> and invokes the closure …","Represents a fork-join scope which can be used to spawn …","Creates a “fork-join” scope <code>s</code> with FIFO order, and …","Represents a fork-join scope which can be used to spawn …","Fires off a task into the Rayon threadpool in the “…","Fires off a task into the Rayon threadpool in the “…","If called from a Rayon worker thread, indicates whether …","If called from a Rayon worker thread, returns the index …","Represents a user created thread-pool.","Returns the number of threads in the current registry. If …","Error when initializing a thread pool.","Used to create a new <code>ThreadPool</code> or to configure the …","Contains the rayon thread pool configuration. Use …","Creates and returns a valid rayon thread pool builder, …","Creates a new <code>ThreadPool</code> initialized using this …","Initializes the global thread pool. This initialization is…","Creates a scoped <code>ThreadPool</code> initialized using this …","Sets a custom function for spawning threads.","Sets a closure which takes a thread index and returns the …","Sets the number of threads to be used in the rayon …","Normally, whenever Rayon catches a panic, it tries to …","Sets the stack size of the worker threads","<strong>(DEPRECATED)</strong> Suggest to worker threads that they execute …","Sets a callback to be invoked on thread start.","Sets a callback to be invoked on thread exit.","Creates and return a valid rayon thread pool …","Deprecated in favor of <code>ThreadPoolBuilder::build</code>.","Deprecated in favor of <code>ThreadPoolBuilder::thread_name</code>.","Deprecated in favor of <code>ThreadPoolBuilder::num_threads</code>.","Deprecated in favor of <code>ThreadPoolBuilder::panic_handler</code>.","Deprecated in favor of <code>ThreadPoolBuilder::stack_size</code>.","Deprecated in favor of <code>ThreadPoolBuilder::breadth_first</code>.","Deprecated in favor of <code>ThreadPoolBuilder::start_handler</code>.","Deprecated in favor of <code>ThreadPoolBuilder::exit_handler</code>.","Deprecated in favor of <code>ThreadPoolBuilder::build_global</code>.","Provides the calling context to a closure called by …","Returns <code>true</code> if the closure was called from a different …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the index of this thread in the pool, within …","Gets the string that was specified by …","Gets the value that was specified by …","Executes the main loop for this thread. This will not …","Spawns a job into the fork-join scope <code>self</code>. This job will …","Spawns a job into the fork-join scope <code>self</code>. This job will …","Deprecated in favor of <code>ThreadPoolBuilder::build</code>.","Executes <code>op</code> within the threadpool. Any attempts to use …","Returns the (current) number of threads in the thread …","If called from a Rayon worker thread in this thread-pool, …","Returns true if the current worker thread currently has …","Execute <code>oper_a</code> and <code>oper_b</code> in the thread-pool and return …","Creates a scope that executes within this thread-pool. …","Creates a scope that executes within this thread-pool. …","Spawns an asynchronous task in this thread-pool. This …","Spawns an asynchronous task in this thread-pool. This …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,0,0,3,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,7,1,2,4,5,6,7,8,1,2,3,8,8,8,4,4,4,4,5,6,7,7,7,7,7,7,7,7,7,7],"f":[[[]],[[]],null,[[]],null,[[]],null,[[]],[[]],[[],[["option",4],["bool",15]]],[[],[["usize",15],["option",4]]],null,[[],["usize",15]],null,null,null,[[]],[[],[["threadpoolbuilderror",3],["threadpool",3],["result",4]]],[[],[["threadpoolbuilderror",3],["result",4]]],[[],[["result",4],["threadpoolbuilderror",3]]],[[],[["customspawn",3],["threadpoolbuilder",3]]],[[]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[],["configuration",3]],[[],[["result",4],["box",3],["threadpool",3]]],[[]],[[["usize",15]],["configuration",3]],[[],["configuration",3]],[[["usize",15]]],[[]],[[],["configuration",3]],[[],["configuration",3]],[[["configuration",3]],[["result",4],["box",3]]],null,[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["str",15]],[[],[["option",4],["error",8]]],[[],["usize",15]],[[],[["option",4],["str",15]]],[[],[["usize",15],["option",4]]],[[]],[[]],[[]],[[["configuration",3]],[["box",3],["threadpool",3],["result",4]]],[[]],[[],["usize",15]],[[],[["usize",15],["option",4]]],[[],[["option",4],["bool",15]]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"ThreadPoolBuilder"],[3,"Configuration"],[3,"FnContext"],[3,"ThreadBuilder"],[3,"Scope"],[3,"ScopeFifo"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"]]},\
"reactor":{"doc":"Reaction-diffusion simulation binary. Compute the time …","t":[17,5,5,5],"n":["BACKUP_TERM_WIDTH","main","initialisation","load_parameters"],"q":["reactor","","",""],"d":["Backup print width if the terminal width can not be …","Main simulation function.","Initialise the input arguments.","Load the required files and form the input parameters."],"i":[0,0,0,0],"f":[null,[[]],[[["usize",15]]],[[["usize",15],["path",3]],["parameters",3]]],"p":[]},\
"regex":{"doc":"This crate provides a library for parsing, compiling, and …","tn":["bytes","RegexBuilder","RegexSetBuilder","Match","Regex","Matches","CaptureMatches","Split","SplitN","CaptureNames","CaptureLocations","Captures","SubCaptureMatches","Replacer","replace_append","no_expansion","by_ref","ReplacerRef","NoExpand","0","RegexSet","SetMatches","SetMatchesIntoIter","SetMatchesIter","new","build","case_insensitive","multi_line","dot_matches_new_line","swap_greed","ignore_whitespace","unicode","octal","size_limit","dfa_size_limit","nest_limit","new","build","case_insensitive","multi_line","dot_matches_new_line","swap_greed","ignore_whitespace","unicode","octal","size_limit","dfa_size_limit","nest_limit","start","end","range","as_bytes","new","is_match","find","find_iter","captures","captures_iter","split","splitn","replace","replace_all","replacen","shortest_match","shortest_match_at","is_match_at","find_at","captures_read","captures_read_at","as_str","capture_names","captures_len","capture_locations","get","len","get","name","iter","expand","len","no_expansion","by_ref","new","empty","is_match","matches","len","is_empty","patterns","matched_any","matched","len","iter","Error","Syntax","CompiledTooBig","RegexSetBuilder","RegexBuilder","RegexSet","SetMatches","SetMatchesIntoIter","SetMatchesIter","escape","CaptureLocations","CaptureMatches","CaptureNames","Captures","Match","Matches","NoExpand","0","Regex","Replacer","replace_append","no_expansion","by_ref","ReplacerRef","Split","SplitN","SubCaptureMatches","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","replace_append","no_expansion","replace_append","no_expansion","replace_append","no_expansion","replace_append","no_expansion","next_back","next_back","next_back","next_back","into_iter","into_iter","next","next","next","next","size_hint","next","size_hint","count","next","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","count","next","next","size_hint","next","next","next","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","eq","ne","eq","ne","eq","ne","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","index","index","index","index","from_str","from_str","description","new","build","case_insensitive","multi_line","dot_matches_new_line","swap_greed","ignore_whitespace","unicode","octal","size_limit","dfa_size_limit","nest_limit","new","build","case_insensitive","multi_line","dot_matches_new_line","swap_greed","ignore_whitespace","unicode","octal","size_limit","dfa_size_limit","nest_limit","new","empty","is_match","matches","len","is_empty","patterns","matched_any","matched","len","iter","start","end","range","as_str","new","is_match","find","find_iter","captures","captures_iter","split","splitn","replace","replace_all","replacen","shortest_match","shortest_match_at","is_match_at","find_at","captures_read","captures_read_at","as_str","capture_names","captures_len","capture_locations","get","len","get","name","iter","expand","len","no_expansion","by_ref"],"q":["regex","regex::bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex","","","","","","","","","","","","","","","","","","","","","","","","","","","regex::bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex::bytes","","","","regex","","","","","","regex::bytes","","regex","regex::bytes","","","","","","","","","","regex","","","","regex::bytes","","","","regex","","","","","","","","","","regex::bytes","","","","","","regex","","","regex::bytes","","","regex","","","","","","","","regex::bytes","","regex","","","regex::bytes","regex","regex::bytes","regex","regex::bytes","","","","","","","","","","","","regex","","","","regex::bytes","","","","regex","","","","","","","","","","","","","regex::bytes","regex","regex::bytes","","regex","","regex::bytes","regex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Match regular expressions on arbitrary bytes.","A configurable builder for a regular expression.","A configurable builder for a set of regular expressions.","Match represents a single match of a regex in a haystack.","A compiled regular expression for matching arbitrary …","An iterator over all non-overlapping matches for a …","An iterator that yields all non-overlapping capture …","Yields all substrings delimited by a regular expression …","Yields at most <code>N</code> substrings delimited by a regular …","An iterator over the names of all possible captures.","CaptureLocations is a low level representation of the raw …","Captures represents a group of captured byte strings for …","An iterator that yields all capturing matches in the …","Replacer describes types that can be used to replace …","Appends text to <code>dst</code> to replace the current match.","Return a fixed unchanging replacement byte string.","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.","By-reference adaptor for a <code>Replacer</code>","<code>NoExpand</code> indicates literal byte string replacement.","","Match multiple (possibly overlapping) regular expressions …","A set of matches returned by a regex set.","An owned iterator over the set of matches from a regex …","A borrowed iterator over the set of matches from a regex …","Create a new regular expression builder with the given …","Consume the builder and compile the regular expression.","Set the value for the case insensitive (<code>i</code>) flag.","Set the value for the multi-line matching (<code>m</code>) flag.","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …","Set the value for the greedy swap (<code>U</code>) flag.","Set the value for the ignore whitespace (<code>x</code>) flag.","Set the value for the Unicode (<code>u</code>) flag.","Whether to support octal syntax or not.","Set the approximate size limit of the compiled regular …","Set the approximate size of the cache used by the DFA.","Set the nesting limit for this parser.","Create a new regular expression builder with the given …","Consume the builder and compile the regular expressions …","Set the value for the case insensitive (<code>i</code>) flag.","Set the value for the multi-line matching (<code>m</code>) flag.","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …","Set the value for the greedy swap (<code>U</code>) flag.","Set the value for the ignore whitespace (<code>x</code>) flag.","Set the value for the Unicode (<code>u</code>) flag.","Whether to support octal syntax or not.","Set the approximate size limit of the compiled regular …","Set the approximate size of the cache used by the DFA.","Set the nesting limit for this parser.","Returns the starting byte offset of the match in the …","Returns the ending byte offset of the match in the …","Returns the range over the starting and ending byte …","Returns the matched text.","Compiles a regular expression. Once compiled, it can be …","Returns true if and only if there is a match for the …","Returns the start and end byte range of the …","Returns an iterator for each successive non-overlapping …","Returns the capture groups corresponding to the …","Returns an iterator over all the non-overlapping capture …","Returns an iterator of substrings of <code>text</code> delimited by a …","Returns an iterator of at most <code>limit</code> substrings of <code>text</code> …","Replaces the leftmost-first match with the replacement …","Replaces all non-overlapping matches in <code>text</code> with the …","Replaces at most <code>limit</code> non-overlapping matches in <code>text</code> …","Returns the end location of a match in the text given.","Returns the same as shortest_match, but starts the search …","Returns the same as is_match, but starts the search at …","Returns the same as find, but starts the search at the …","This is like <code>captures</code>, but uses <code>CaptureLocations</code> instead …","Returns the same as <code>captures_read</code>, but starts the search …","Returns the original string of this regex.","Returns an iterator over the capture names.","Returns the number of captures.","Returns an empty set of capture locations that can be …","Returns the start and end positions of the Nth capture …","Returns the total number of capturing groups.","Returns the match associated with the capture group at …","Returns the match for the capture group named <code>name</code>. If …","An iterator that yields all capturing matches in the …","Expands all instances of <code>$name</code> in <code>replacement</code> to the …","Returns the number of captured groups.","Return a fixed unchanging replacement byte string.","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.","Create a new regex set with the given regular expressions.","Create a new empty regex set.","Returns true if and only if one of the regexes in this …","Returns the set of regular expressions that match in the …","Returns the total number of regular expressions in this …","Returns <code>true</code> if this set contains no regular expressions.","Returns the patterns that this set will match on.","Whether this set contains any matches.","Whether the regex at the given index matched.","The total number of regexes in the set that created these …","Returns an iterator over indexes in the regex that …","An error that occurred during parsing or compiling a …","A syntax error.","The compiled program exceeded the set size limit. The …","A configurable builder for a set of regular expressions.","A configurable builder for a regular expression.","Match multiple (possibly overlapping) regular expressions …","A set of matches returned by a regex set.","An owned iterator over the set of matches from a regex …","A borrowed iterator over the set of matches from a regex …","Escapes all regular expression meta characters in <code>text</code>.","CaptureLocations is a low level representation of the raw …","An iterator that yields all non-overlapping capture …","An iterator over the names of all possible captures.","Captures represents a group of captured strings for a …","Match represents a single match of a regex in a haystack.","An iterator over all non-overlapping matches for a …","<code>NoExpand</code> indicates literal string replacement.","","A compiled regular expression for matching Unicode …","Replacer describes types that can be used to replace …","Appends text to <code>dst</code> to replace the current match.","Return a fixed unchanging replacement string.","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.","By-reference adaptor for a <code>Replacer</code>","Yields all substrings delimited by a regular expression …","Yields at most <code>N</code> substrings delimited by a regular …","An iterator that yields all capturing matches in the …hows the original regular expression.","","","","","","","","","","","","","","","","","","","","Shows the original regular expression.","","","","","","","","","","","","Shows the original regular expression.","Shows the original regular expression.","","","","","Attempts to parse a string into a regular expression","Attempts to parse a string into a regular expression","","Create a new regular expression builder with the given …","Consume the builder and compile the regular expression.","Set the value for the case insensitive (<code>i</code>) flag.","Set the value for the multi-line matching (<code>m</code>) flag.","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …","Set the value for the greedy swap (<code>U</code>) flag.","Set the value for the ignore whitespace (<code>x</code>) flag.","Set the value for the Unicode (<code>u</code>) flag.","Whether to support octal syntax or not.","Set the approximate size limit of the compiled regular …","Set the approximate size of the cache used by the DFA.","Set the nesting limit for this parser.","Create a new regular expression builder with the given …","Consume the builder and compile the regular expressions …","Set the value for the case insensitive (<code>i</code>) flag.","Set the value for the multi-line matching (<code>m</code>) flag.","Set the value for the any character (<code>s</code>) flag, where in <code>.</code> …","Set the value for the greedy swap (<code>U</code>) flag.","Set the value for the ignore whitespace (<code>x</code>) flag.","Set the value for the Unicode (<code>u</code>) flag.","Whether to support octal syntax or not.","Set the approximate size limit of the compiled regular …","Set the approximate size of the cache used by the DFA.","Set the nesting limit for this parser.","Create a new regex set with the given regular expressions.","Create a new empty regex set.","Returns true if and only if one of the regexes in this …","Returns the set of regular expressions that match in the …","Returns the total number of regular expressions in this …","Returns <code>true</code> if this set contains no regular expressions.","Returns the patterns that this set will match on.","Whether this set contains any matches.","Whether the regex at the given index matched.","The total number of regexes in the set that created these …","Returns an iterator over indexes in the regex that …","Returns the starting byte offset of the match in the …","Returns the ending byte offset of the match in the …","Returns the range over the starting and ending byte …","Returns the matched text.","Compiles a regular expression. Once compiled, it can be …","Returns true if and only if there is a match for the …","Returns the start and end byte range of the …","Returns an iterator for each successive non-overlapping …","Returns the capture groups corresponding to the …","Returns an iterator over all the non-overlapping capture …","Returns an iterator of substrings of <code>text</code> delimited by a …","Returns an iterator of at most <code>limit</code> substrings of <code>text</code> …","Replaces the leftmost-first match with the replacement …","Replaces all non-overlapping matches in <code>text</code> with the …","Replaces at most <code>limit</code> non-overlapping matches in <code>text</code> …","Returns the end location of a match in the text given.","Returns the same as shortest_match, but starts the search …","Returns the same as is_match, but starts the search at …","Returns the same as find, but starts the search at the …","This is like <code>captures</code>, but uses <code>CaptureLocations</code> instead …","Returns the same as captures, but starts the search at …","Returns the original string of this regex.","Returns an iterator over the capture names.","Returns the number of captures.","Returns an empty set of capture locations that can be …","Returns the start and end positions of the Nth capture …","Returns the total number of capturing groups.","Returns the match associated with the capture group at …","Returns the match for the capture group named <code>name</code>. If …","An iterator that yields all capturing matches in the …","Expands all instances of <code>$name</code> in <code>replacement</code> to the …","Returns the number of captured groups.","Return a fixed unchanging replacement string.","Return a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,2,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,8,8,8,8,8,1,1,9,9,9,9,9,9,9,10,10,10,10,0,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,13,13,13,0,0,0,0,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,2,2,2,2,2,2,2,2,2,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,11,11,11,11,11,11,11,11,11,11,23,23,23,23,23,23,23,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,20,20,2,2,39,39,12,12,27,28,21,22,26,10,14,15,16,17,17,18,18,18,19,27,27,28,28,21,21,22,22,31,31,31,32,33,33,36,37,38,11,5,6,18,7,19,2,25,26,28,9,10,22,29,30,31,34,36,12,11,11,5,5,29,29,11,3,23,4,24,5,6,14,15,16,17,18,7,8,19,20,2,26,27,28,25,10,21,22,9,29,30,31,32,33,34,35,36,37,38,39,12,11,6,30,8,8,35,35,6,30,11,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,26,26,26,26,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,34,34,35,35,35,35,35,13,13],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["vec",3],["captures",3]]],[[],[["cow",4],["option",4]]],[[],["replacerref",3]],null,null,null,null,null,null,null,[[["str",15]],["regexbuilder",3]],[[],[["regex",3],["error",4],["result",4]]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexbuilder",3]],[[["usize",15]],["regexbuilder",3]],[[["usize",15]],["regexbuilder",3]],[[["u32",15]],["regexbuilder",3]],[[],["regexsetbuilder",3]],[[],[["regexset",3],["result",4],["error",4]]],[[["bool",15]],["regexsetbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[["usize",15]],["regexsetbuilder",3]],[[["usize",15]],["regexsetbuilder",3]],[[["u32",15]],["regexsetbuilder",3]],[[],["usize",15]],[[],["usize",15]],[[],[["range",3],["usize",15]]],[[]],[[["str",15]],[["regex",3],["error",4],["result",4]]],[[],["bool",15]],[[],[["option",4],["match",3]]],[[],["matches",3]],[[],[["option",4],["captures",3]]],[[],["capturematches",3]],[[],["split",3]],[[["usize",15]],["splitn",3]],[[["replacer",8]],["cow",4]],[[["replacer",8]],["cow",4]],[[["usize",15],["replacer",8]],["cow",4]],[[],[["usize",15],["option",4]]],[[["usize",15]],[["usize",15],["option",4]]],[[["usize",15]],["bool",15]],[[["usize",15]],[["option",4],["match",3]]],[[["capturelocations",3]],[["option",4],["match",3]]],[[["usize",15],["capturelocations",3]],[["option",4],["match",3]]],[[],["str",15]],[[],["capturenames",3]],[[],["usize",15]],[[],["capturelocations",3]],[[["usize",15]],["option",4]],[[],["usize",15]],[[["usize",15]],[["option",4],["match",3]]],[[["str",15]],[["option",4],["match",3]]],[[],["subcapturematches",3]],[[["vec",3]]],[[],["usize",15]],[[],[["cow",4],["option",4]]],[[],["replacerref",3]],[[],[["regexset",3],["result",4],["error",4]]],[[],["regexset",3]],[[],["bool",15]],[[],["setmatches",3]],[[],["usize",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[["usize",15]],["bool",15]],[[],["usize",15]],[[],["setmatchesiter",3]],null,null,null,null,null,null,null,null,null,[[["str",15]],["string",3]],null,null,null,null,null,null,null,null,null,null,[[["captures",3],["string",3]]],[[],[["cow",4],["option",4]]],[[],["replacerref",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["vec",3],["captures",3]]],[[],[["cow",4],["option",4]]],[[["vec",3],["captures",3]]],[[],[["option",4],["cow",4]]],[[["captures",3],["string",3]]],[[],[["option",4],["cow",4]]],[[["captures",3],["string",3]]],[[],[["option",4],["cow",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[]],[[],[["option",4],["match",3]]],[[],[["option",4],["captures",3]]],[[],["option",4]],[[],["option",4]],[[]],[[],[["option",4],["option",4]]],[[]],[[],["usize",15]],[[],[["option",4],["option",4]]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["usize",15],["option",4]]],[[]],[[],[["option",4],["option",4]]],[[]],[[],["usize",15]],[[],[["option",4],["str",15]]],[[],[["option",4],["str",15]]],[[]],[[],[["option",4],["option",4]]],[[],[["option",4],["captures",3]]],[[],[["match",3],["option",4]]],[[],["error",4]],[[],["match",3]],[[],["regex",3]],[[],["capturenames",3]],[[],["capturelocations",3]],[[],["subcapturematches",3]],[[],["noexpand",3]],[[],["regexset",3]],[[],["setmatches",3]],[[],["setmatchesiter",3]],[[],["regexset",3]],[[],["setmatches",3]],[[],["setmatchesiter",3]],[[],["match",3]],[[],["regex",3]],[[],["capturenames",3]],[[],["capturelocations",3]],[[],["subcapturematches",3]],[[],["noexpand",3]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["match",3]],["bool",15]],[[["match",3]],["bool",15]],[[["match",3]],["bool",15]],[[["match",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]]],[[["str",15]]],[[["usize",15]],["str",15]],[[["str",15]],["str",15]],[[["str",15]],[["regex",3],["error",4],["result",4]]],[[["str",15]],[["regex",3],["error",4],["result",4]]],[[],["str",15]],[[["str",15]],["regexbuilder",3]],[[],[["regex",3],["error",4],["result",4]]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexbuilder",3]],[[["bool",15]],["regexbuilder",3]],[[["usize",15]],["regexbuilder",3]],[[["usize",15]],["regexbuilder",3]],[[["u32",15]],["regexbuilder",3]],[[],["regexsetbuilder",3]],[[],[["regexset",3],["error",4],["result",4]]],[[["bool",15]],["regexsetbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[["bool",15]],["regexsetbuilder",3]],[[["usize",15]],["regexsetbuilder",3]],[[["usize",15]],["regexsetbuilder",3]],[[["u32",15]],["regexsetbuilder",3]],[[],[["regexset",3],["error",4],["result",4]]],[[],["regexset",3]],[[["str",15]],["bool",15]],[[["str",15]],["setmatches",3]],[[],["usize",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[["usize",15]],["bool",15]],[[],["usize",15]],[[],["setmatchesiter",3]],[[],["usize",15]],[[],["usize",15]],[[],[["range",3],["usize",15]]],[[],["str",15]],[[["str",15]],[["regex",3],["error",4],["result",4]]],[[["str",15]],["bool",15]],[[["str",15]],[["match",3],["option",4]]],[[["str",15]],["matches",3]],[[["str",15]],[["option",4],["captures",3]]],[[["str",15]],["capturematches",3]],[[["str",15]],["split",3]],[[["usize",15],["str",15]],["splitn",3]],[[["str",15],["replacer",8]],[["cow",4],["str",15]]],[[["str",15],["replacer",8]],[["cow",4],["str",15]]],[[["usize",15],["str",15],["replacer",8]],[["cow",4],["str",15]]],[[["str",15]],[["usize",15],["option",4]]],[[["usize",15],["str",15]],[["usize",15],["option",4]]],[[["usize",15],["str",15]],["bool",15]],[[["usize",15],["str",15]],[["match",3],["option",4]]],[[["capturelocations",3],["str",15]],[["match",3],["option",4]]],[[["usize",15],["capturelocations",3],["str",15]],[["match",3],["option",4]]],[[],["str",15]],[[],["capturenames",3]],[[],["usize",15]],[[],["capturelocations",3]],[[["usize",15]],["option",4]],[[],["usize",15]],[[["usize",15]],[["match",3],["option",4]]],[[["str",15]],[["match",3],["option",4]]],[[],["subcapturematches",3]],[[["string",3],["str",15]]],[[],["usize",15]],[[],[["cow",4],["option",4]]],[[],["replacerref",3]]],"p":[[8,"Replacer"],[3,"NoExpand"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"CaptureLocations"],[3,"Captures"],[3,"RegexSet"],[3,"SetMatches"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"SubCaptureMatches"],[3,"ReplacerRef"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"CaptureLocations"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[3,"ReplacerRef"]]},\
"regex_syntax":{"doc":"This crate provides a robust regular expression parser.","t":[0,0,3,11,11,11,11,11,3,11,11,11,0,3,11,11,5,8,16,16,10,11,11,11,11,11,11,11,11,11,3,11,11,11,11,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,13,12,13,13,13,12,13,13,13,13,13,13,13,13,13,13,13,13,13,3,12,12,3,12,12,12,11,11,11,11,11,11,11,3,12,12,3,12,12,4,13,13,13,13,13,13,13,13,13,13,11,11,3,12,12,11,3,12,12,11,3,12,12,12,11,4,13,13,13,13,13,13,4,13,13,13,13,13,13,13,4,13,13,13,11,4,13,13,13,11,3,12,12,12,4,13,13,13,3,12,12,12,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,3,12,12,12,11,4,13,13,13,12,12,12,4,13,13,13,11,3,12,12,12,4,13,13,11,11,4,13,13,13,13,13,13,13,13,11,3,12,12,12,11,3,12,12,11,11,3,12,12,12,12,4,13,13,13,3,12,12,4,13,13,13,13,13,13,3,12,12,12,12,3,12,12,4,13,13,13,13,4,13,13,13,11,3,12,12,12,11,11,11,4,13,13,13,3,12,12,12,3,12,12,3,12,12,11,11,3,12,12,4,13,13,11,4,13,13,13,13,13,13,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,11,11,0,3,11,11,11,11,11,11,11,11,3,11,11,5,8,16,16,10,11,11,11,11,3,3,11,11,11,4,13,13,13,13,13,13,13,3,4,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,11,4,13,13,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,4,13,13,13,13,4,13,13,13,13,11,3,12,12,4,13,13,12,12,13,3,12,12,12,11,4,13,13,13,13,4,13,13,13,0,4,13,13,13,13,11,11,11,11,3,12,12,11,3,11,4,13,13,6,3,3,3,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ast","parse","ParserBuilder","new","build","nest_limit","octal","ignore_whitespace","Parser","new","parse","parse_with_comments","print","Printer","new","print","visit","Visitor","Output","Err","finish","start","visit_pre","visit_post","visit_alternation_in","visit_class_set_item_pre","visit_class_set_item_post","visit_class_set_binary_op_pre","visit_class_set_binary_op_post","visit_class_set_binary_op_in","Error","kind","pattern","span","auxiliary_span","ErrorKind","CaptureLimitExceeded","ClassEscapeInvalid","ClassRangeInvalid","ClassRangeLiteral","ClassUnclosed","DecimalEmpty","DecimalInvalid","EscapeHexEmpty","EscapeHexInvalid","EscapeHexInvalidDigit","EscapeUnexpectedEof","EscapeUnrecognized","FlagDanglingNegation","FlagDuplicate","original","FlagRepeatedNegation","original","FlagUnexpectedEof","FlagUnrecognized","GroupNameDuplicate","original","GroupNameEmpty","GroupNameInvalid","GroupNameUnexpectedEof","GroupUnclosed","GroupUnopened","NestLimitExceeded","RepetitionCountInvalid","RepetitionCountDecimalEmpty","RepetitionCountUnclosed","RepetitionMissing","UnicodeClassInvalid","UnsupportedBackreference","UnsupportedLookAround","Span","start","end","Position","offset","line","column","new","splat","with_start","with_end","is_one_line","is_empty","new","WithComments","ast","comments","Comment","span","comment","Ast","Empty","Flags","Literal","Dot","Assertion","Class","Repetition","Group","Alternation","Concat","span","is_empty","Alternation","span","asts","into_ast","Concat","span","asts","into_ast","Literal","span","kind","c","byte","LiteralKind","Verbatim","Punctuation","Octal","HexFixed","HexBrace","Special","SpecialLiteralKind","Bell","FormFeed","Tab","LineFeed","CarriageReturn","VerticalTab","Space","HexLiteralKind","X","UnicodeShort","UnicodeLong","digits","Class","Unicode","Perl","Bracketed","span","ClassPerl","span","kind","negated","ClassPerlKind","Digit","Space","Word","ClassAscii","span","kind","negated","ClassAsciiKind","Alnum","Alpha","Ascii","Blank","Cntrl","Digit","Graph","Lower","Print","Punct","Space","Upper","Word","Xdigit","from_name","ClassUnicode","span","negated","kind","is_negated","ClassUnicodeKind","OneLetter","Named","NamedValue","op","name","value","ClassUnicodeOpKind","Equal","Colon","NotEqual","is_equal","ClassBracketed","span","negated","kind","ClassSet","Item","BinaryOp","union","span","ClassSetItem","Empty","Literal","Range","Ascii","Unicode","Perl","Bracketed","Union","span","ClassSetRange","span","start","end","is_valid","ClassSetUnion","span","items","push","into_item","ClassSetBinaryOp","span","kind","lhs","rhs","ClassSetBinaryOpKind","Intersection","Difference","SymmetricDifference","Assertion","span","kind","AssertionKind","StartLine","EndLine","StartText","EndText","WordBoundary","NotWordBoundary","Repetition","span","op","greedy","ast","RepetitionOp","span","kind","RepetitionKind","ZeroOrOne","ZeroOrMore","OneOrMore","Range","RepetitionRange","Exactly","AtLeast","Bounded","is_valid","Group","span","kind","ast","flags","is_capturing","capture_index","GroupKind","CaptureIndex","CaptureName","NonCapturing","CaptureName","span","name","index","SetFlags","span","flags","Flags","span","items","add_item","flag_state","FlagsItem","span","kind","FlagsItemKind","Negation","Flag","is_negation","Flag","CaseInsensitive","MultiLine","DotMatchesNewLine","SwapGreed","Unicode","IgnoreWhitespace","hir","literal","Literals","Literal","empty","prefixes","suffixes","limit_size","set_limit_size","limit_class","set_limit_class","literals","min_len","all_complete","any_complete","contains_empty","is_empty","to_empty","longest_common_prefix","longest_common_suffix","trim_suffix","unambiguous_prefixes","unambiguous_suffixes","union_prefixes","union_suffixes","union","cross_product","cross_add","add","add_char_class","add_byte_class","cut","reverse","clear","new","empty","is_cut","cut","print","Printer","new","print","translate","TranslatorBuilder","new","build","allow_invalid_utf8","case_insensitive","multi_line","dot_matches_new_line","swap_greed","unicode","Translator","new","translate","visit","Visitor","Output","Err","finish","start","visit_pre","visit_post","visit_alternation_in","CaseFoldError","Error","kind","pattern","span","ErrorKind","UnicodeNotAllowed","InvalidUtf8","UnicodePropertyNotFound","UnicodePropertyValueNotFound","UnicodePerlClassNotFound","UnicodeCaseUnavailable","EmptyClassNotAllowed","Hir","HirKind","Empty","Literal","Class","Anchor","WordBoundary","Repetition","Group","Concat","Alternation","kind","into_kind","empty","literal","class","anchor","word_boundary","repetition","group","concat","alternation","dot","any","is_always_utf8","is_all_assertions","is_anchored_start","is_anchored_end","is_line_anchored_start","is_line_anchored_end","is_any_anchored_start","is_any_anchored_end","is_match_empty","is_literal","is_alternation_literal","is_empty","has_subexprs","Literal","Unicode","Byte","is_unicode","Class","Unicode","Bytes","case_fold_simple","negate","is_always_utf8","ClassUnicode","new","empty","push","iter","ranges","case_fold_simple","try_case_fold_simple","negate","union","intersect","difference","symmetric_difference","is_all_ascii","ClassUnicodeIter","ClassUnicodeRange","new","start","end","ClassBytes","new","empty","push","iter","ranges","case_fold_simple","negate","union","intersect","difference","symmetric_difference","is_all_ascii","ClassBytesIter","ClassBytesRange","new","start","end","Anchor","StartLine","EndLine","StartText","EndText","WordBoundary","Unicode","UnicodeNegate","Ascii","AsciiNegate","is_negated","Group","kind","hir","GroupKind","CaptureIndex","CaptureName","name","index","NonCapturing","Repetition","kind","greedy","hir","is_match_empty","RepetitionKind","ZeroOrOne","ZeroOrMore","OneOrMore","Range","RepetitionRange","Exactly","AtLeast","Bounded","utf8","Utf8Sequence","One","Two","Three","Four","as_slice","len","reverse","matches","Utf8Range","start","end","matches","Utf8Sequences","new","Error","Parse","Translate","Result","Parser","ParserBuilder","UnicodeWordError","escape","escape_into","is_meta_character","is_word_character","try_is_word_character","is_word_byte","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","drop","drop","drop","as_ref","from","from","next","next","next","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","cmp","cmp","cmp","cmp","cmp","cmp","cmp","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","ne","eq","ne","eq","eq","ne","eq","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","deref","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","description","description","description","start","visit_pre","visit_post","visit_alternation_in","visit_class_set_item_pre","visit_class_set_item_post","visit_class_set_binary_op_pre","visit_class_set_binary_op_post","visit_class_set_binary_op_in","start","visit_pre","visit_post","visit_alternation_in","new","build","nest_limit","octal","allow_invalid_utf8","ignore_whitespace","case_insensitive","multi_line","dot_matches_new_line","swap_greed","unicode","new","parse"],"q":["regex_syntax","regex_syntax::ast","regex_syntax::ast::parse","","","","","","","","","","regex_syntax::ast","regex_syntax::ast::print","","","regex_syntax::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::ast::ErrorKind","regex_syntax::ast","regex_syntax::ast::ErrorKind","regex_syntax::ast","","","regex_syntax::ast::ErrorKind","regex_syntax::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::ast::ClassUnicodeKind","","","regex_syntax::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax","regex_syntax::hir","regex_syntax::hir::literal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::hir","regex_syntax::hir::print","","","regex_syntax::hir","regex_syntax::hir::translate","","","","","","","","","","","","regex_syntax::hir","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::hir::GroupKind","","regex_syntax::hir","","","","","","","","","","","","","","","regex_syntax","regex_syntax::utf8","","","","","","","","","","","","","","","regex_syntax","","","","","","","","","","","","","regex_syntax::ast::parse","","","","","","","","","","","","","","","","","","regex_syntax::ast::print","","","","","","","regex_syntax::astregex_syntax","","","","","","","","","","regex_syntax::hir::literal","","","","","","","","","","","","","","","","","","regex_syntax::hir::print","","","","","","","regex_syntax::hir::translate","","","","","","","","","","","","","","","","","","regex_syntax::hir","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::utf8","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::ast","","regex_syntax::hir","regex_syntax::hir::literal","regex_syntax","","regex_syntax::hir","","regex_syntax::utf8","regex_syntax::ast::parse","","regex_syntax::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax","regex_syntax::hir::literal","","regex_syntax::hir::translate","","regex_syntax::hir","","","","","","","","","","","","","","","","","regex_syntax","","regex_syntax::utf8","","regex_syntax::ast::parse","regex_syntax::hir::translate","regex_syntax::hir","","regex_syntax","regex_syntax::ast","","regex_syntax::hir::literal","regex_syntax::hir","","regex_syntax::utf8","","regex_syntax::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax","","regex_syntax::hir::literal","","","regex_syntax::hir","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax::utf8","","","","regex_syntax::ast","","regex_syntax::hir::literal","regex_syntax::hir","","regex_syntax::utf8","","regex_syntax::hir::literal","","regex_syntax::ast::parse","","regex_syntax::ast::print","regex_syntax::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","regex_syntax","regex_syntax::hir::literal","","regex_syntax::hir::print","regex_syntax::hir::translate","","regex_syntax::hir","","","","","","","","","","","","","","","","","","","regex_syntax","","regex_syntax::hir","regex_syntax","regex_syntax::utf8","","","regex_syntax::ast","","","regex_syntax","regex_syntax::hir","","","","regex_syntax","regex_syntax::ast","regex_syntax","regex_syntax::hir","regex_syntax::ast","","","","","","","","","regex_syntax::hir","","","","regex_syntax","","","","","","","","","","","",""],"d":["Defines an abstract syntax for regular expressions.","This module provides a regular expression parser.","A builder for a regular expression parser.","Create a new parser builder with a default configuration.","Build a parser from this configuration with the given …","Set the nesting limit for this parser.","Whether to support octal syntax or not.","Enable verbose mode in the regular expression.","A regular expression parser.","Create a new parser with a default configuration.","Parse the regular expression into an abstract syntax tree.","Parse the regular expression and return an abstract …","This module provides a regular expression printer for <code>Ast</code>.","A printer for a regular expression abstract syntax tree.","Create a new printer.","Print the given <code>Ast</code> to the given writer. The writer must …","Executes an implementation of <code>Visitor</code> in constant stack …","A trait for visiting an abstract syntax tree (AST) in …","The result of visiting an AST.","An error that visiting an AST might return.","All implementors of <code>Visitor</code> must provide a <code>finish</code> method, …","This method is called before beginning traversal of the …","This method is called on an <code>Ast</code> before descending into …","This method is called on an <code>Ast</code> after descending all of …","This method is called between child nodes of an …","This method is called on every <code>ClassSetItem</code> before …","This method is called on every <code>ClassSetItem</code> after …","This method is called on every <code>ClassSetBinaryOp</code> before …","This method is called on every <code>ClassSetBinaryOp</code> after …","This method is called between the left hand and right …","An error that occurred while parsing a regular expression …","Return the type of this error.","The original pattern string in which this error occurred.","Return the span at which this error occurred.","Return an auxiliary span. This span exists only for some …","The type of an error that occurred while building an AST.","The capturing group limit was exceeded.","An invalid escape sequence was found in a character class …","An invalid character class range was found. An invalid …","An invalid range boundary was found in a character class. …","An opening <code>[</code> was found with no corresponding closing <code>]</code>.","Note that this error variant is no longer used. Namely, a …","An invalid decimal number was given where one was …","A bracketed hex literal was empty.","A bracketed hex literal did not correspond to a Unicode …","An invalid hexadecimal digit was found.","EOF was found before an escape sequence was completed.","An unrecognized escape sequence.","A dangling negation was used when setting flags, e.g., <code>i-</code>.","A flag was used twice, e.g., <code>i-i</code>.","The position of the original flag. The error position …","The negation operator was used twice, e.g., <code>-i-s</code>.","The position of the original negation operator. The error …","Expected a flag but got EOF, e.g., <code>(?</code>.","Unrecognized flag, e.g., <code>a</code>.","A duplicate capture name was found.","The position of the initial occurrence of the capture …","A capture group name is empty, e.g., <code>(?P<>abc)</code>.","An invalid character was seen for a capture group name. …","A closing <code>></code> could not be found for a capture group name.","An unclosed group, e.g., <code>(ab</code>.","An unopened group, e.g., <code>ab)</code>.","The nest limit was exceeded. The limit stored here is the …","The range provided in a counted repetition operator is …","An opening <code>{</code> was not followed by a valid decimal value. …","An opening <code>{</code> was found with no corresponding closing <code>}</code>.","A repetition operator was applied to a missing …","The Unicode class is not valid. This typically occurs …","When octal support is disabled, this error is produced …","When syntax similar to PCRE’s look-around is used, this …","Span represents the position information of a single AST …","The start byte offset.","The end byte offset.","A single position in a regular expression.","The absolute offset of this position, starting at <code>0</code> from …","The line number, starting at <code>1</code>.","The approximate column number, starting at <code>1</code>.","Create a new span with the given positions.","Create a new span using the given position as the start …","Create a new span by replacing the starting the position …","Create a new span by replacing the ending the position …","Returns true if and only if this span occurs on a single …","Returns true if and only if this span is empty. That is, …","Create a new position with the given information.","An abstract syntax tree for a singular expression along …","The actual ast.","All comments found in the original regular expression.","A comment from a regular expression with an associated …","The span of this comment, including the beginning <code>#</code> and …","The comment text, starting with the first character …","An abstract syntax tree for a single regular expression.","An empty regex that matches everything.","A set of flags, e.g., <code>(?is)</code>.","A single character literal, which includes escape …","The “any character” class.","A single zero-width assertion.","A single character class. This includes all forms of …","A repetition operator applied to an arbitrary regular …","A grouped regular expression.","An alternation of regular expressions.","A concatenation of regular expressions.","Return the span of this abstract syntax tree.","Return true if and only if this Ast is empty.","An alternation of regular expressions.","The span of this alternation.","The alternate regular expressions.","Return this alternation as an AST.","A concatenation of regular expressions.","The span of this concatenation.","The concatenation regular expressions.","Return this concatenation as an AST.","A single literal expression.","The span of this literal.","The kind of this literal.","The Unicode scalar value corresponding to this literal.","If this literal was written as a <code>\\\\x</code> hex escape, then this …","The kind of a single literal expression.","The literal is written verbatim, e.g., <code>a</code> or <code>☃</code>.","The literal is written as an escape because it is …","The literal is written as an octal escape, e.g., <code>\\\\141</code>.","The literal is written as a hex code with a fixed number …","The literal is written as a hex code with a bracketed …","The literal is written as a specially recognized escape, …","The type of a special literal.","Bell, spelled <code>\\\\a</code> (<code>\\\\x07</code>).","Form feed, spelled <code>\\\\f</code> (<code>\\\\x0C</code>).","Tab, spelled <code>\\\\t</code> (<code>\\\\x09</code>).","Line feed, spelled <code>\\\\n</code> (<code>\\\\x0A</code>).","Carriage return, spelled <code>\\\\r</code> (<code>\\\\x0D</code>).","Vertical tab, spelled <code>\\\\v</code> (<code>\\\\x0B</code>).","Space, spelled <code>\\\\ </code> (<code>\\\\x20</code>). Note that this can only appear …","The type of a Unicode hex literal.","A <code>\\\\x</code> prefix. When used without brackets, this form is …","A <code>\\\\u</code> prefix. When used without brackets, this form is …","A <code>\\\\U</code> prefix. When used without brackets, this form is …","The number of digits that must be used with this literal …","A single character class expression.","A Unicode character class, e.g., <code>\\\\pL</code> or <code>\\\\p{Greek}</code>.","A perl character class, e.g., <code>\\\\d</code> or <code>\\\\W</code>.","A bracketed character class set, which may contain zero …","Return the span of this character class.","A Perl character class.","The span of this class.","The kind of Perl class.","Whether the class is negated or not. e.g., <code>\\\\d</code> is not …","The available Perl character classes.","Decimal numbers.","Whitespace.","Word characters.","An ASCII character class.","The span of this class.","The kind of ASCII class.","Whether the class is negated or not. e.g., <code>[[:alpha:]]</code> is …","The available ASCII character classes.","<code>[0-9A-Za-z]</code>","<code>[A-Za-z]</code>","<code>[\\\\x00-\\\\x7F]</code>","<code>[ \\\\t]</code>","<code>[\\\\x00-\\\\x1F\\\\x7F]</code>","<code>[0-9]</code>","<code>[!-~]</code>","<code>[a-z]</code>","<code>[ -~]</code>","<code>[!-/:-@\\\\[-</code>{-~]`","<code>[\\\\t\\\\n\\\\v\\\\f\\\\r ]</code>","<code>[A-Z]</code>","<code>[0-9A-Za-z_]</code>","<code>[0-9A-Fa-f]</code>","Return the corresponding ClassAsciiKind variant for the …","A Unicode character class.","The span of this class.","Whether this class is negated or not.","The kind of Unicode class.","Returns true if this class has been negated.","The available forms of Unicode character classes.","A one letter abbreviated class, e.g., <code>\\\\pN</code>.","A binary property, general category or script. The string …","A property name and an associated value.","The type of Unicode op used to associate <code>name</code> with <code>value</code>.","The property name (which may be empty).","The property value (which may be empty).","The type of op used in a Unicode character class.","A property set to a specific value, e.g., <code>\\\\p{scx=Katakana}</code>…","A property set to a specific value using a colon, e.g., …","A property that isn’t a particular value, e.g., …","Whether the op is an equality op or not.","A bracketed character class, e.g., <code>[a-z0-9]</code>.","The span of this class.","Whether this class is negated or not. e.g., <code>[a]</code> is not …","The type of this set. A set is either a normal union of …","A character class set.","An item, which can be a single literal, range, nested …","A single binary operation (i.e., &&, – or ~~).","Build a set from a union.","Return the span of this character class set.","A single component of a character class set.","An empty item.","A single literal.","A range between two literals.","An ASCII character class, e.g., <code>[:alnum:]</code> or <code>[:punct:]</code>.","A Unicode character class, e.g., <code>\\\\pL</code> or <code>\\\\p{Greek}</code>.","A perl character class, e.g., <code>\\\\d</code> or <code>\\\\W</code>.","A bracketed character class set, which may contain zero …","A union of items.","Return the span of this character class set item.","A single character class range in a set.","The span of this range.","The start of this range.","The end of this range.","Returns true if and only if this character class range is …","A union of items inside a character class set.","The span of the items in this operation. e.g., the <code>a-z0-9</code> …","The sequence of items that make up this union.","Push a new item in this union.","Return this union as a character class set item.","A Unicode character class set operation.","The span of this operation. e.g., the <code>a-z--[h-p]</code> in …","The type of this set operation.","The left hand side of the operation.","The right hand side of the operation.","The type of a Unicode character class set operation.","The intersection of two sets, e.g., <code>\\\\pN&&[a-z]</code>.","The difference of two sets, e.g., <code>\\\\pN--[0-9]</code>.","The symmetric difference of two sets. The symmetric …","A single zero-width assertion.","The span of this assertion.","The assertion kind, e.g., <code>\\\\b</code> or <code>^</code>.","An assertion kind.","<code>^</code>","<code>$</code>","<code>\\\\A</code>","<code>\\\\z</code>","<code>\\\\b</code>","<code>\\\\B</code>","A repetition operation applied to a regular expression.","The span of this operation.","The actual operation.","Whether this operation was applied greedily or not.","The regular expression under repetition.","The repetition operator itself.","The span of this operator. This includes things like <code>+</code>, <code>*?</code>…","The type of operation.","The kind of a repetition operator.","<code>?</code>","<code>*</code>","<code>+</code>","<code>{m,n}</code>","A range repetition operator.","<code>{m}</code>","<code>{m,}</code>","<code>{m,n}</code>","Returns true if and only if this repetition range is …","A grouped regular expression.","The span of this group.","The kind of this group.","The regular expression in this group.","If this group is non-capturing, then this returns the …","Returns true if and only if this group is capturing.","Returns the capture index of this group, if this is a …","The kind of a group.","<code>(a)</code>","<code>(?P<name>a)</code>","<code>(?:a)</code> and <code>(?i:a)</code>","A capture name.","The span of this capture name.","The capture name.","The capture index.","A group of flags that is not applied to a particular …","The span of these flags, including the grouping …","The actual sequence of flags.","A group of flags.","The span of this group of flags.","A sequence of flag items. Each item is either a flag or a …","Add the given item to this sequence of flags.","Returns the state of the given flag in this set.","A single item in a group of flags.","The span of this item.","The kind of this item.","The kind of an item in a group of flags.","A negation operator applied to all subsequent flags in …","A single flag in a group.","Returns true if and only if this item is a negation …","A single flag.","<code>i</code>","<code>m</code>","<code>s</code>","<code>U</code>","<code>u</code>","<code>x</code>","Defines a high-level intermediate representation for …","Provides routines for extracting literal prefixes and …","A set of literal byte strings extracted from a regular …","A single member of a set of literals extracted from a …","Returns a new empty set of literals using default limits.","Returns a set of literal prefixes extracted from the …","Returns a set of literal suffixes extracted from the …","Get the approximate size limit (in bytes) of this set.","Set the approximate size limit (in bytes) of this set.","Get the character class size limit for this set.","Limits the size of character(or byte) classes considered.","Returns the set of literals as a slice. Its order is …","Returns the length of the smallest literal.","Returns true if all members in this set are complete.","Returns true if any member in this set is complete.","Returns true if this set contains an empty literal.","Returns true if this set is empty or if all of its …","Returns a new empty set of literals using this set’s …","Returns the longest common prefix of all members in this …","Returns the longest common suffix of all members in this …","Returns a new set of literals with the given number of …","Returns a new set of prefixes of this set of literals …","Returns a new set of suffixes of this set of literals …","Unions the prefixes from the given expression to this set.","Unions the suffixes from the given expression to this set.","Unions this set with another set.","Extends this set with another set.","Extends each literal in this set with the bytes given.","Adds the given literal to this set.","Extends each literal in this set with the character class …","Extends each literal in this set with the byte class …","Cuts every member of this set. When a member is cut, it …","Reverses all members in place.","Clears this set of all members.","Returns a new complete literal with the bytes given.","Returns a new complete empty literal.","Returns true if this literal was “cut.”","Cuts this literal.","This module provides a regular expression printer for <code>Hir</code>.","A printer for a regular expression’s high-level …","Create a new printer.","Print the given <code>Ast</code> to the given writer. The writer must …","Defines a translator that converts an <code>Ast</code> to an <code>Hir</code>.","A builder for constructing an AST->HIR translator.","Create a new translator builder with a default c …","Build a translator using the current configuration.","When enabled, translation will permit the construction of …","Enable or disable the case insensitive flag (<code>i</code>) by …","Enable or disable the multi-line matching flag (<code>m</code>) by …","Enable or disable the “dot matches any character” …","Enable or disable the “swap greed” flag (<code>U</code>) by …","Enable or disable the Unicode flag (<code>u</code>) by default.","A translator maps abstract syntax to a high level …","Create a new translator using the default configuration.","Translate the given abstract syntax tree (AST) into a …","Executes an implementation of <code>Visitor</code> in constant stack …","A trait for visiting the high-level IR (HIR) in depth …","The result of visiting an HIR.","An error that visiting an HIR might return.","All implementors of <code>Visitor</code> must provide a <code>finish</code> method, …","This method is called before beginning traversal of the …","This method is called on an <code>Hir</code> before descending into …","This method is called on an <code>Hir</code> after descending all of …","This method is called between child nodes of an …","An error that occurs when Unicode-aware simple case …","An error that can occur while translating an <code>Ast</code> to a <code>Hir</code>.","Return the type of this error.","The original pattern string in which this error occurred.","Return the span at which this error occurred.","The type of an error that occurred while building an <code>Hir</code>.","This error occurs when a Unicode feature is used when …","This error occurs when translating a pattern that could …","This occurs when an unrecognized Unicode property name …","This occurs when an unrecognized Unicode property value …","This occurs when a Unicode-aware Perl character class (<code>\\\\w</code>…","This occurs when the Unicode simple case mapping tables …","This occurs when the translator attempts to construct a …","A high-level intermediate representation (HIR) for a …","The kind of an arbitrary <code>Hir</code> expression.","The empty regular expression, which matches everything, …","A single literal character that matches exactly this …","A single character class that matches any of the …","An anchor assertion. An anchor assertion match always has …","A word boundary assertion, which may or may not be …","A repetition operation applied to a child expression.","A possibly capturing group, which contains a child …","A concatenation of expressions. A concatenation always …","An alternation of expressions. An alternation always has …","Returns a reference to the underlying HIR kind.","Consumes ownership of this HIR expression and returns its …","Returns an empty HIR expression.","Creates a literal HIR expression.","Creates a class HIR expression.","Creates an anchor assertion HIR expression.","Creates a word boundary assertion HIR expression.","Creates a repetition HIR expression.","Creates a group HIR expression.","Returns the concatenation of the given expressions.","Returns the alternation of the given expressions.","Build an HIR expression for <code>.</code>.","Build an HIR expression for <code>(?s).</code>.","Return true if and only if this HIR will always match …","Returns true if and only if this entire HIR expression is …","Return true if and only if this HIR is required to match …","Return true if and only if this HIR is required to match …","Return true if and only if this HIR is required to match …","Return true if and only if this HIR is required to match …","Return true if and only if this HIR contains any …","Return true if and only if this HIR contains any …","Return true if and only if the empty string is part of …","Return true if and only if this HIR is a simple literal. …","Return true if and only if this HIR is either a simple …","Return true if and only if this HIR is the empty regular …","Returns true if and only if this kind has any (including …","The high-level intermediate representation of a literal.","A single character represented by a Unicode scalar value.","A single character represented by an arbitrary byte.","Returns true if and only if this literal corresponds to a …","The high-level intermediate representation of a character …","A set of characters represented by Unicode scalar values.","A set of characters represented by arbitrary bytes (one …","Apply Unicode simple case folding to this character …","Negate this character class in place.","Returns true if and only if this character class will …","A set of characters represented by Unicode scalar values.","Create a new class from a sequence of ranges.","Create a new class with no ranges.","Add a new range to this set.","Return an iterator over all ranges in this class.","Return the underlying ranges as a slice.","Expand this character class such that it contains all …","Expand this character class such that it contains all …","Negate this character class.","Union this character class with the given character …","Intersect this character class with the given character …","Subtract the given character class from this character …","Compute the symmetric difference of the given character …","Returns true if and only if this character class will …","An iterator over all ranges in a Unicode character class.","A single range of characters represented by Unicode …","Create a new Unicode scalar value range for a character …","Return the start of this range.","Return the end of this range.","A set of characters represented by arbitrary bytes (where …","Create a new class from a sequence of ranges.","Create a new class with no ranges.","Add a new range to this set.","Return an iterator over all ranges in this class.","Return the underlying ranges as a slice.","Expand this character class such that it contains all …","Negate this byte class.","Union this byte class with the given byte class, in place.","Intersect this byte class with the given byte class, in …","Subtract the given byte class from this byte class, in …","Compute the symmetric difference of the given byte …","Returns true if and only if this character class will …","An iterator over all ranges in a byte character class.","A single range of characters represented by arbitrary …","Create a new byte range for a character class.","Return the start of this range.","Return the end of this range.","The high-level intermediate representation for an anchor …","Match the beginning of a line or the beginning of text. …","Match the end of a line or the end of text. Specifically, …","Match the beginning of text. Specifically, this matches …","Match the end of text. Specifically, this matches at the …","The high-level intermediate representation for a …","Match a Unicode-aware word boundary. That is, this …","Match a Unicode-aware negation of a word boundary.","Match an ASCII-only word boundary. That is, this matches …","Match an ASCII-only negation of a word boundary.","Returns true if and only if this word boundary assertion …","The high-level intermediate representation for a group.","The kind of this group. If it is a capturing group, then …","The expression inside the capturing group, which may be …","The kind of group.","A normal unnamed capturing group.","A named capturing group.","The name of the group.","The capture index of the group.","A non-capturing group.","The high-level intermediate representation of a …","The kind of this repetition operator.","Whether this repetition operator is greedy or not. A …","The expression being repeated.","Returns true if and only if this repetition operator …","The kind of a repetition operator.","Matches a sub-expression zero or one times.","Matches a sub-expression zero or more times.","Matches a sub-expression one or more times.","Matches a sub-expression within a bounded range of times.","The kind of a counted repetition operator.","Matches a sub-expression exactly this many times.","Matches a sub-expression at least this many times.","Matches a sub-expression at least <code>m</code> times and at most <code>n</code> …","Converts ranges of Unicode scalar values to equivalent …","Utf8Sequence represents a sequence of byte ranges.","One byte range.","Two successive byte ranges.","Three successive byte ranges.","Four successive byte ranges.","Returns the underlying sequence of byte ranges as a slice.","Returns the number of byte ranges in this sequence.","Reverses the ranges in this sequence.","Returns true if and only if a prefix of <code>bytes</code> matches …","A single inclusive range of UTF-8 bytes.","Start of byte range (inclusive).","End of byte range (inclusive).","Returns true if and only if the given byte is in this …","An iterator over ranges of matching UTF-8 byte sequences.","Create a new iterator over UTF-8 byte ranges for the …","This error type encompasses any error that can be …","An error that occurred while translating concrete syntax …","An error that occurred while translating abstract syntax …","A type alias for dealing with errors returned by this …","A convenience parser for regular expressions.","A builder for a regular expression parser.","An error that occurs when the Unicode-aware <code>\\\\w</code> class is …","Escapes all regular expression meta characters in <code>text</code>.","Escapes all meta characters in <code>text</code> and writes the result …","Returns true if the give character has significance in a …","Returns true if and only if the given character is a …","Returns true if and only if the given character is a …","Returns true if and only if the given character is an …his method is called before beginning traversal of the …","This method is called on an <code>Ast</code> before descending into …","This method is called on an <code>Ast</code> after descending all of …","This method is called between child nodes of an …","This method is called on every <code>ClassSetItem</code> before …","This method is called on every <code>ClassSetItem</code> after …","This method is called on every <code>ClassSetBinaryOp</code> before …","This method is called on every <code>ClassSetBinaryOp</code> after …","This method is called between the left hand and right …","This method is called before beginning traversal of the …","This method is called on an <code>Hir</code> before descending into …","This method is called on an <code>Hir</code> after descending all of …","This method is called between child nodes of an …","Create a new parser builder with a default configuration.","Build a parser from this configuration with the given …","Set the nesting limit for this parser.","Whether to support octal syntax or not.","When enabled, the parser will permit the construction of …","Enable verbose mode in the regular expression.","Enable or disable the case insensitive flag by default.","Enable or disable the multi-line matching flag by default.","Enable or disable the “dot matches any character” …","Enable or disable the “swap greed” flag by default.","Enable or disable the Unicode flag (<code>u</code>) by default.","Create a new parser with a default configuration.","Parse the regular expression into a high level …"],"i":[0,0,0,1,1,1,1,1,0,2,2,2,0,0,3,3,0,0,4,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,5,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,6,8,6,6,6,9,6,6,6,6,6,6,6,6,6,6,6,6,6,0,10,10,0,11,11,11,10,10,10,10,10,10,11,0,12,12,0,13,13,0,14,14,14,14,14,14,14,14,14,14,14,14,0,15,15,15,0,16,16,16,0,17,17,17,17,0,18,18,18,18,18,18,0,19,19,19,19,19,19,19,0,20,20,20,20,0,21,21,21,21,0,22,22,22,0,23,23,23,0,24,24,24,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,26,26,26,26,0,27,27,27,28,28,28,0,29,29,29,29,0,30,30,30,0,31,31,31,31,0,32,32,32,32,32,32,32,32,32,0,33,33,33,33,0,34,34,34,34,0,35,35,35,35,0,36,36,36,0,37,37,0,38,38,38,38,38,38,0,39,39,39,39,0,40,40,0,41,41,41,41,0,42,42,42,42,0,43,43,43,43,43,43,0,44,44,44,0,45,45,45,0,46,46,0,47,47,47,47,0,48,48,0,49,49,49,0,50,50,50,50,50,50,0,0,0,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,52,52,52,52,0,0,53,53,0,0,54,54,54,54,54,54,54,54,0,55,55,0,0,56,56,56,56,56,56,56,0,0,57,57,57,0,58,58,58,58,58,58,58,0,0,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,59,59,0,61,61,61,0,62,62,62,62,62,0,63,63,63,63,63,63,63,63,63,63,63,63,63,0,0,64,64,64,0,65,65,65,65,65,65,65,65,65,65,65,65,0,0,66,66,66,0,67,67,67,67,0,68,68,68,68,68,0,69,69,0,70,70,71,71,70,0,72,72,72,72,0,73,73,73,73,0,74,74,74,0,0,75,75,75,75,75,75,75,75,0,76,76,76,0,77,0,78,78,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,78,78,78,78,78,78,78,78,78,78,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,79,79,79,79,79,79,79,79,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,60,60,60,60,60,60,60,60,60,60,59,59,59,59,59,59,59,59,59,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,80,80,80,80,80,80,80,80,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,81,81,81,81,81,81,81,81,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,14,31,60,52,78,78,80,81,77,1,2,5,6,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,78,51,52,54,55,57,58,60,59,61,62,63,64,65,66,67,68,69,70,72,73,74,82,83,75,76,1,54,64,66,82,10,11,52,64,66,75,76,5,5,6,6,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,20,21,21,22,22,23,24,24,25,26,26,27,27,29,30,30,31,31,32,32,33,33,34,34,35,35,36,37,37,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,78,78,51,51,52,57,57,58,60,60,59,59,61,61,62,62,63,63,64,64,65,65,66,66,67,68,69,69,70,70,72,72,73,73,74,74,75,75,76,76,10,11,52,64,66,75,76,52,52,1,2,3,5,6,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,78,51,52,53,54,55,57,58,60,59,61,62,63,80,64,65,81,66,67,68,69,70,72,73,74,82,83,79,84,75,76,77,5,6,14,78,57,58,60,79,84,5,78,57,4,4,4,4,4,4,4,4,4,56,56,56,56,82,82,82,82,82,82,82,82,82,82,82,83,83],"f":[null,null,null,[[],["parserbuilder",3]],[[],["parser",3]],[[["u32",15]],["parserbuilder",3]],[[["bool",15]],["parserbuilder",3]],[[["bool",15]],["parserbuilder",3]],null,[[],["parser",3]],[[["str",15]],[["error",3],["ast",4],["result",4]]],[[["str",15]],[["error",3],["withcomments",3],["result",4]]],null,null,[[],["printer",3]],[[["write",8],["ast",4]],["result",6]],[[["visitor",8],["ast",4]],["result",4]],null,null,null,[[],["result",4]],[[]],[[["ast",4]],["result",4]],[[["ast",4]],["result",4]],[[],["result",4]],[[["classsetitem",4]],["result",4]],[[["classsetitem",4]],["result",4]],[[["classsetbinaryop",3]],["result",4]],[[["classsetbinaryop",3]],["result",4]],[[["classsetbinaryop",3]],["result",4]],null,[[],["errorkind",4]],[[],["str",15]],[[],["span",3]],[[],[["span",3],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["position",3]],["span",3]],[[["position",3]],["span",3]],[[["position",3]],["span",3]],[[["position",3]],["span",3]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],["position",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["span",3]],[[],["bool",15]],null,null,null,[[],["ast",4]],null,null,null,[[],["ast",4]],null,null,null,null,[[],[["option",4],["u8",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u32",15]],null,null,null,null,[[],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15]],[["classasciikind",4],["option",4]]],null,null,null,null,[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],null,null,null,null,null,null,null,[[["classsetunion",3]],["classset",4]],[[],["span",3]],null,null,null,null,null,null,null,null,null,[[],["span",3]],null,null,null,null,[[],["bool",15]],null,null,null,[[["classsetitem",4]]],[[],["classsetitem",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],null,null,null,null,[[],[["option",4],["flags",3]]],[[],["bool",15]],[[],[["u32",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["flagsitem",3]],[["usize",15],["option",4]]],[[["flag",4]],[["option",4],["bool",15]]],null,null,null,null,null,null,[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,[[],["literals",3]],[[["hir",3]],["literals",3]],[[["hir",3]],["literals",3]],[[],["usize",15]],[[["usize",15]],["literals",3]],[[],["usize",15]],[[["usize",15]],["literals",3]],[[]],[[],[["usize",15],["option",4]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["literals",3]],[[]],[[]],[[["usize",15]],[["literals",3],["option",4]]],[[],["literals",3]],[[],["literals",3]],[[["hir",3]],["bool",15]],[[["hir",3]],["bool",15]],[[["literals",3]],["bool",15]],[[["literals",3]],["bool",15]],[[],["bool",15]],[[["literal",3]],["bool",15]],[[["classunicode",3]],["bool",15]],[[["classbytes",3]],["bool",15]],[[]],[[]],[[]],[[["vec",3],["u8",15]],["literal",3]],[[],["literal",3]],[[],["bool",15]],[[]],null,null,[[],["printer",3]],[[["hir",3],["write",8]],["result",6]],null,null,[[],["translatorbuilder",3]],[[],["translator",3]],[[["bool",15]],["translatorbuilder",3]],[[["bool",15]],["translatorbuilder",3]],[[["bool",15]],["translatorbuilder",3]],[[["bool",15]],["translatorbuilder",3]],[[["bool",15]],["translatorbuilder",3]],[[["bool",15]],["translatorbuilder",3]],null,[[],["translator",3]],[[["ast",4],["str",15]],[["result",4],["error",3],["hir",3]]],[[["hir",3],["visitor",8]],["result",4]],null,null,null,[[],["result",4]],[[]],[[["hir",3]],["result",4]],[[["hir",3]],["result",4]],[[],["result",4]],null,null,[[],["errorkind",4]],[[],["str",15]],[[],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["hirkind",4]],[[],["hirkind",4]],[[],["hir",3]],[[["literal",4]],["hir",3]],[[["class",4]],["hir",3]],[[["anchor",4]],["hir",3]],[[["wordboundary",4]],["hir",3]],[[["repetition",3]],["hir",3]],[[["group",3]],["hir",3]],[[["vec",3],["hir",3]],["hir",3]],[[["vec",3],["hir",3]],["hir",3]],[[["bool",15]],["hir",3]],[[["bool",15]],["hir",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,[[],["bool",15]],null,null,null,[[]],[[]],[[],["bool",15]],null,[[],["classunicode",3]],[[],["classunicode",3]],[[["classunicoderange",3]]],[[],["classunicodeiter",3]],[[]],[[]],[[],[["result",4],["casefolderror",3]]],[[]],[[["classunicode",3]]],[[["classunicode",3]]],[[["classunicode",3]]],[[["classunicode",3]]],[[],["bool",15]],null,null,[[["char",15]],["classunicoderange",3]],[[],["char",15]],[[],["char",15]],null,[[],["classbytes",3]],[[],["classbytes",3]],[[["classbytesrange",3]]],[[],["classbytesiter",3]],[[]],[[]],[[]],[[["classbytes",3]]],[[["classbytes",3]]],[[["classbytes",3]]],[[["classbytes",3]]],[[],["bool",15]],null,null,[[["u8",15]],["classbytesrange",3]],[[],["u8",15]],[[],["u8",15]],null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["usize",15]],[[]],[[],["bool",15]],null,null,null,[[["u8",15]],["bool",15]],null,[[["char",15]]],null,null,null,null,null,null,null,[[["str",15]],["string",3]],[[["string",3],["str",15]]],[[["char",15]],["bool",15]],[[["char",15]],["bool",15]],[[["char",15]],[["bool",15],["unicodeworderror",3],["result",4]]],[[["u8",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[["error",3]],["error",4]],[[["error",3]],["error",4]],[[],[["option",4],["classunicoderange",3]]],[[],[["option",4],["classbytesrange",3]]],[[],["option",4]],[[],["parserbuilder",3]],[[],["parser",3]],[[],["error",3]],[[],["errorkind",4]],[[],["span",3]],[[],["position",3]],[[],["withcomments",3]],[[],["comment",3]],[[],["ast",4]],[[],["alternation",3]],[[],["concat",3]],[[],["literal",3]],[[],["literalkind",4]],[[],["specialliteralkind",4]],[[],["hexliteralkind",4]],[[],["class",4]],[[],["classperl",3]],[[],["classperlkind",4]],[[],["classascii",3]],[[],["classasciikind",4]],[[],["classunicode",3]],[[],["classunicodekind",4]],[[],["classunicodeopkind",4]],[[],["classbracketed",3]],[[],["classset",4]],[[],["classsetitem",4]],[[],["classsetrange",3]],[[],["classsetunion",3]],[[],["classsetbinaryop",3]],[[],["classsetbinaryopkind",4]],[[],["assertion",3]],[[],["assertionkind",4]],[[],["repetition",3]],[[],["repetitionop",3]],[[],["repetitionkind",4]],[[],["repetitionrange",4]],[[],["group",3]],[[],["groupkind",4]],[[],["capturename",3]],[[],["setflags",3]],[[],["flags",3]],[[],["flagsitem",3]],[[],["flagsitemkind",4]],[[],["flag",4]],[[],["error",4]],[[],["literals",3]],[[],["literal",3]],[[],["translatorbuilder",3]],[[],["translator",3]],[[],["error",3]],[[],["errorkind",4]],[[],["hir",3]],[[],["hirkind",4]],[[],["literal",4]],[[],["class",4]],[[],["classunicode",3]],[[],["classunicoderange",3]],[[],["classbytes",3]],[[],["classbytesrange",3]],[[],["anchor",4]],[[],["wordboundary",4]],[[],["group",3]],[[],["groupkind",4]],[[],["repetition",3]],[[],["repetitionkind",4]],[[],["repetitionrange",4]],[[],["parserbuilder",3]],[[],["parser",3]],[[],["utf8sequence",4]],[[],["utf8range",3]],[[],["parserbuilder",3]],[[],["translatorbuilder",3]],[[],["classunicoderange",3]],[[],["classbytesrange",3]],[[],["parserbuilder",3]],[[["span",3]],["ordering",4]],[[["position",3]],["ordering",4]],[[["literal",3]],["ordering",4]],[[["classunicoderange",3]],["ordering",4]],[[["classbytesrange",3]],["ordering",4]],[[["utf8sequence",4]],["ordering",4]],[[["utf8range",3]],["ordering",4]],[[["error",3]],["bool",15]],[[["error",3]],["bool",15]],[[["errorkind",4]],["bool",15]],[[["errorkind",4]],["bool",15]],[[["span",3]],["bool",15]],[[["span",3]],["bool",15]],[[["position",3]],["bool",15]],[[["position",3]],["bool",15]],[[["withcomments",3]],["bool",15]],[[["withcomments",3]],["bool",15]],[[["comment",3]],["bool",15]],[[["comment",3]],["bool",15]],[[["ast",4]],["bool",15]],[[["ast",4]],["bool",15]],[[["alternation",3]],["bool",15]],[[["alternation",3]],["bool",15]],[[["concat",3]],["bool",15]],[[["concat",3]],["bool",15]],[[["literal",3]],["bool",15]],[[["literal",3]],["bool",15]],[[["literalkind",4]],["bool",15]],[[["literalkind",4]],["bool",15]],[[["specialliteralkind",4]],["bool",15]],[[["hexliteralkind",4]],["bool",15]],[[["class",4]],["bool",15]],[[["class",4]],["bool",15]],[[["classperl",3]],["bool",15]],[[["classperl",3]],["bool",15]],[[["classperlkind",4]],["bool",15]],[[["classascii",3]],["bool",15]],[[["classascii",3]],["bool",15]],[[["classasciikind",4]],["bool",15]],[[["classunicode",3]],["bool",15]],[[["classunicode",3]],["bool",15]],[[["classunicodekind",4]],["bool",15]],[[["classunicodekind",4]],["bool",15]],[[["classunicodeopkind",4]],["bool",15]],[[["classbracketed",3]],["bool",15]],[[["classbracketed",3]],["bool",15]],[[["classset",4]],["bool",15]],[[["classset",4]],["bool",15]],[[["classsetitem",4]],["bool",15]],[[["classsetitem",4]],["bool",15]],[[["classsetrange",3]],["bool",15]],[[["classsetrange",3]],["bool",15]],[[["classsetunion",3]],["bool",15]],[[["classsetunion",3]],["bool",15]],[[["classsetbinaryop",3]],["bool",15]],[[["classsetbinaryop",3]],["bool",15]],[[["classsetbinaryopkind",4]],["bool",15]],[[["assertion",3]],["bool",15]],[[["assertion",3]],["bool",15]],[[["assertionkind",4]],["bool",15]],[[["repetition",3]],["bool",15]],[[["repetition",3]],["bool",15]],[[["repetitionop",3]],["bool",15]],[[["repetitionop",3]],["bool",15]],[[["repetitionkind",4]],["bool",15]],[[["repetitionkind",4]],["bool",15]],[[["repetitionrange",4]],["bool",15]],[[["repetitionrange",4]],["bool",15]],[[["group",3]],["bool",15]],[[["group",3]],["bool",15]],[[["groupkind",4]],["bool",15]],[[["groupkind",4]],["bool",15]],[[["capturename",3]],["bool",15]],[[["capturename",3]],["bool",15]],[[["setflags",3]],["bool",15]],[[["setflags",3]],["bool",15]],[[["flags",3]],["bool",15]],[[["flags",3]],["bool",15]],[[["flagsitem",3]],["bool",15]],[[["flagsitem",3]],["bool",15]],[[["flagsitemkind",4]],["bool",15]],[[["flagsitemkind",4]],["bool",15]],[[["flag",4]],["bool",15]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[["literals",3]],["bool",15]],[[["literals",3]],["bool",15]],[[["literal",3]],["bool",15]],[[["error",3]],["bool",15]],[[["error",3]],["bool",15]],[[["errorkind",4]],["bool",15]],[[["hir",3]],["bool",15]],[[["hir",3]],["bool",15]],[[["hirkind",4]],["bool",15]],[[["hirkind",4]],["bool",15]],[[["literal",4]],["bool",15]],[[["literal",4]],["bool",15]],[[["class",4]],["bool",15]],[[["class",4]],["bool",15]],[[["classunicode",3]],["bool",15]],[[["classunicode",3]],["bool",15]],[[["classunicoderange",3]],["bool",15]],[[["classunicoderange",3]],["bool",15]],[[["classbytes",3]],["bool",15]],[[["classbytes",3]],["bool",15]],[[["classbytesrange",3]],["bool",15]],[[["classbytesrange",3]],["bool",15]],[[["anchor",4]],["bool",15]],[[["wordboundary",4]],["bool",15]],[[["group",3]],["bool",15]],[[["group",3]],["bool",15]],[[["groupkind",4]],["bool",15]],[[["groupkind",4]],["bool",15]],[[["repetition",3]],["bool",15]],[[["repetition",3]],["bool",15]],[[["repetitionkind",4]],["bool",15]],[[["repetitionkind",4]],["bool",15]],[[["repetitionrange",4]],["bool",15]],[[["repetitionrange",4]],["bool",15]],[[["utf8sequence",4]],["bool",15]],[[["utf8sequence",4]],["bool",15]],[[["utf8range",3]],["bool",15]],[[["utf8range",3]],["bool",15]],[[["span",3]],[["option",4],["ordering",4]]],[[["position",3]],[["option",4],["ordering",4]]],[[["literal",3]],[["ordering",4],["option",4]]],[[["classunicoderange",3]],[["ordering",4],["option",4]]],[[["classbytesrange",3]],[["ordering",4],["option",4]]],[[["utf8sequence",4]],[["ordering",4],["option",4]]],[[["utf8range",3]],[["ordering",4],["option",4]]],[[],["vec",3]],[[],["vec",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[]],[[["ast",4]],["result",4]],[[["ast",4]],["result",4]],[[],["result",4]],[[["classsetitem",4]],["result",4]],[[["classsetitem",4]],["result",4]],[[["classsetbinaryop",3]],["result",4]],[[["classsetbinaryop",3]],["result",4]],[[["classsetbinaryop",3]],["result",4]],[[]],[[["hir",3]],["result",4]],[[["hir",3]],["result",4]],[[],["result",4]],[[],["parserbuilder",3]],[[],["parser",3]],[[["u32",15]],["parserbuilder",3]],[[["bool",15]],["parserbuilder",3]],[[["bool",15]],["parserbuilder",3]],[[["bool",15]],["parserbuilder",3]],[[["bool",15]],["parserbuilder",3]],[[["bool",15]],["parserbuilder",3]],[[["bool",15]],["parserbuilder",3]],[[["bool",15]],["parserbuilder",3]],[[["bool",15]],["parserbuilder",3]],[[],["parser",3]],[[["str",15]],[["hir",3],["result",6]]]],"p":[[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[4,"ErrorKind"],[13,"FlagDuplicate"],[13,"FlagRepeatedNegation"],[13,"GroupNameDuplicate"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[4,"Ast"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[3,"ClassPerl"],[4,"ClassPerlKind"],[3,"ClassAscii"],[4,"ClassAsciiKind"],[3,"ClassUnicode"],[4,"ClassUnicodeKind"],[13,"NamedValue"],[4,"ClassUnicodeOpKind"],[3,"ClassBracketed"],[4,"ClassSet"],[4,"ClassSetItem"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[4,"ClassSetBinaryOpKind"],[3,"Assertion"],[4,"AssertionKind"],[3,"Repetition"],[3,"RepetitionOp"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Group"],[4,"GroupKind"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"FlagsItemKind"],[4,"Flag"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[4,"ErrorKind"],[4,"HirKind"],[3,"Hir"],[4,"Literal"],[4,"Class"],[3,"ClassUnicode"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesRange"],[4,"Anchor"],[4,"WordBoundary"],[3,"Group"],[4,"GroupKind"],[13,"CaptureName"],[3,"Repetition"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"Utf8Sequence"],[3,"Utf8Range"],[3,"Utf8Sequences"],[4,"Error"],[3,"CaseFoldError"],[3,"ClassUnicodeIter"],[3,"ClassBytesIter"],[3,"ParserBuilder"],[3,"Parser"],[3,"UnicodeWordError"]]},\
"render":{"doc":"Rendering engine binary. Produce two-dimensional image …","t":[17,5,5,5],"n":["BACKUP_TERM_WIDTH","main","initialisation","load_parameters"],"q":["render","","",""],"d":["Backup print width if the terminal width can not be …","Main program function.","Initialise the input arguments.","Load the required files and form the input parameters."],"i":[0,0,0,0],"f":[null,[[]],[[["usize",15]]],[[["usize",15],["path",3]],["parameters",3]]],"p":[]},\
"rgb":{"doc":"Basic struct for <code>RGB</code> and <code>RGBA</code> pixels. Packed, with red …","t":[0,3,12,12,12,3,12,12,12,12,6,6,6,6,3,12,3,12,12,6,6,6,6,11,11,11,11,11,11,11,8,8,11,8,10,10,8,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,8,11,11,8,10,3,12,12,12,3,12,12,12,12,6,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["alt","BGR","b","g","r","BGRA","b","g","r","a","BGR8","BGR16","BGRA8","BGRA16","Gray","0","GrayAlpha","0","1","GRAY8","GRAY16","GRAYA8","GRAYA16","new","gray","new","gray_mut","alpha","map_alpha","map_gray","Pod","Zeroable","zeroed","AsPixels","as_pixels","as_pixels_mut","FromSlice","as_rgb","as_rgba","as_rgb_mut","as_rgba_mut","as_gray","as_gray_alpha","as_gray_mut","as_gray_alpha_mut","as_bgr","as_bgra","as_bgr_mut","as_bgra_mut","ComponentSlice","as_slice","as_mut_slice","ComponentBytes","as_bytes","as_bytes_mut","ComponentMap","map","RGB","r","g","b","RGBA","r","g","b","a","RGB8","RGB16","RGBA8","RGBA16","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","as_slice","as_mut_slice","as_slice","as_mut_slice","as_slice","as_mut_slice","as_slice","as_mut_slice","as_slice","as_mut_slice","as_slice","as_mut_slice","map","map","map","map","map","map","deref","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","div","div","div","div","sub","sub","sub","sub","sub","sub","sub","sub","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","cmp","cmp","cmp","cmp","cmp","cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","add","add","add","add","add","add","add","add","mul","mul","mul","mul","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","mul_assign","mul_assign","mul_assign","mul_assign","div_assign","div_assign","div_assign","div_assign","hash","hash","hash","hash","hash","hash","from_iter","from_iter","fmt","fmt","fmt","fmt","sum","sum","sum","sum","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","as_ref","as_ref","as_ref","as_ref","as_mut","as_mut","as_mut","as_mut","into","into","into","into","into","into","into","into","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","as_bytes","as_bytes_mut","new","new","iter","alpha","new_alpha","iter","alpha","new_alpha","new","new_alpha","new","new_alpha","rgb_mut","rgb_mut","bgr_mut","rgb","rgb","iter","bgr","map_rgb","alpha","map_alpha","iter","bgr","map_rgb","alpha","map_alpha"],"q":["rgb","rgb::alt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rgb","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rgb::alt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rgb","","","","","","","","","","","","","","","","rgb::alt","","rgb","","rgb::alt","","","","","","rgb","rgb::alt","rgb","rgb::alt","","","","","","","","rgb","","","rgb::alt","rgb","rgb::alt","rgb","","rgb::alt","","rgb","","rgb::alt","","rgb","rgb::alt","rgb","rgb::alt","","","","","","","","","rgb","","","","rgb::alt","","","","rgb","","rgb::alt","","","","rgb","","","","rgb::alt","","rgb","rgb::alt","rgb","rgb::alt","rgb","","rgb::alt","","rgb","","rgb::alt","","rgb","rgb::alt","rgb","rgb::alt","rgb","","rgb::alt","","rgb","rgb::alt","rgb","rgb::alt","rgb","","rgb::alt","","rgb","","rgb::alt","","","","","","rgb","","","","","rgb::alt","rgb","rgb::alt","rgb","rgb::alt","rgb","rgb::alt","rgb","","rgb::alt","","rgb","","rgb::alt","","rgb","","","","","","","","","","","","","","","","","","","","","rgb::alt","","rgb","","rgb::alt","","","","rgb","","","","rgb::alt","","","","rgb","","rgb::alt","","rgb","","rgb::alt","rgb","","rgb::alt","","rgb","","rgb::alt","","","","","","rgb","","rgb::alt","","","","rgb","","","","","rgb::alt","rgb","","","rgb::alt","","","rgb","","rgb::alt","","rgb","rgb::alt","","rgb","rgb::alt","rgb","","","","","rgb::alt","","","",""],"d":["BGR/BGRA alernative layouts & grayscale","RGB in reverse byte order","Blue first","Green","Red last","BGR+A","Blue first","Green","Red","Alpha last","8-bit BGR","16-bit BGR in machine’s native endian","8-bit BGRA","16-bit BGR in machine’s native endian","Grayscale. Use <code>.0</code> or <code>*</code> (deref) to access the value.","brightness level","Grayscale with alpha. Use <code>.0</code>/<code>.1</code> to access.","brightness level","alpha","8-bit gray","16-bit gray in machine’s native endian","8-bit gray with alpha in machine’s native endian","16-bit gray with alpha in machine’s native endian","New grayscale pixel","Copy <code>Gray</code> component out of the <code>GrayAlpha</code> struct","New grayscale+alpha pixel","Provide a mutable view of only <code>Gray</code> component (leaving …","Create a new <code>GrayAlpha</code> with the new alpha value, but same …","Create a new <code>GrayAlpha</code> with a new alpha value created by …","Create new <code>GrayAlpha</code> with the same alpha value, but …","Re-export from <code>bytemuck</code> crate","Re-export from <code>bytemuck</code> crate","Calls <code>zeroed</code>.","Casts a slice of bytes into a slice of pixels, e.g. <code>[u8]</code> …","Reinterpret the slice as a read-only/shared slice of …","Reinterpret the slice as a mutable/exclusive slice of …","Cast a slice of component values (bytes) as a slice of …","Reinterpert slice as RGB pixels","Reinterpert slice as RGBA pixels","Reinterpert mutable slice as RGB pixels","Reinterpert mutable slice as RGBA pixels","Reinterpert mutable slice as grayscale pixels","Reinterpert mutable slice as grayscale pixels with alpha","Reinterpert mutable slice as grayscale pixels","Reinterpert mutable slice as grayscale pixels with alpha","Reinterpert slice as reverse-order BGR pixels","Reinterpert slice as reverse-order BGRA pixels","Reinterpert ntable slice as reverse-order BGR pixels","Reinterpert mutable slice as reverse-order BGRA pixels","Casting the struct to slices of its components","The components interpreted as an array, e.g. one <code>RGB</code> …","The components interpreted as a mutable array, e.g. one …","Casting a slice of <code>RGB/A</code> values to a slice of <code>u8</code>","The components interpreted as raw bytes, in machine’s …","The components interpreted as raw bytes, in machine’s …","Applying operation to every component","Convenience function (equivalent of …","The RGB pixel","Red","Green","Blue","The RGBA pixel","Red","Green","Blue","Alpha","8-bit RGB","16-bit RGB in machine’s native endian","8-bit RGBA, alpha is last. 0 = transparent, 255 = opaque.","16-bit RGB in machine’s native endian. 0 = transparent, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes exactly 3 elements from the iterator and creates a …","Takes exactly 4 elements from the iterator and creates a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The components interpreted as raw bytes, in machine’s …","The components interpreted as raw bytes, in machine’s …","Convenience function for creating a new pixel The order …","Convenience function for creating a new pixel Wargning: …","Iterate over color components (R, G, and B)","Convenience function for converting to RGBA","Convenience function for converting to RGBA with alpha …","Iterate over color components (R, G, and B)","Convenience function for converting to RGBA","Convenience function for converting to RGBA with alpha …","Convenience function for creating a new pixel The order …","Convenience function for creating a new pixel The order …","Convenience function for creating a new pixel Warning: …","Convenience function for creating a new pixel Warning: …","Provide a mutable view of only RGB components (leaving …","Provide a mutable view of only RGB components (leaving …","Provide a mutable view of only RGB components (leaving …","Copy RGB components out of the RGBA struct","Copy RGB components out of the RGBA struct","Iterate over all components (length=4)","Copy RGB components out of the RGBA struct","Create new RGBA with the same alpha value, but different …","Create a new RGBA with the new alpha value, but same RGB …","Create a new RGBA with a new alpha value created by the …","Iterate over all components (length=4)","Copy RGB components out of the RGBA struct","Create new RGBA with the same alpha value, but different …","Create a new RGBA with the new alpha value, but same RGB …","Create a new RGBA with a new alpha value created by the …"],"i":[0,0,1,1,1,0,2,2,2,2,0,0,0,0,0,3,0,4,4,0,0,0,0,3,4,4,4,4,4,4,0,0,5,0,6,6,0,7,7,7,7,7,7,7,7,7,7,7,7,0,8,8,0,9,9,0,10,0,11,11,11,0,12,12,12,12,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,1,1,12,12,2,2,4,4,3,3,11,1,12,2,3,4,3,1,2,3,4,11,12,11,1,12,2,11,12,3,4,11,12,3,4,11,3,12,4,1,1,2,2,3,3,4,4,11,11,12,12,1,2,3,4,11,12,1,2,3,4,11,12,11,12,3,4,11,3,12,4,11,12,3,4,11,12,3,4,11,3,12,4,11,12,3,4,11,3,12,4,11,12,3,4,11,12,3,4,1,2,3,4,11,12,11,12,11,1,11,1,11,3,12,4,11,12,1,2,11,12,1,2,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,12,1,2,11,12,2,2,2,2,12,12,12,12,3,4,4,3,11,12,4,3,11,12,4,11,12,1,2,11,12,1,2,1,2,3,4,11,12,1,2,3,4,11,12,9,9,11,1,11,11,11,1,1,1,12,12,2,2,12,2,2,12,2,12,12,12,12,12,2,2,2,2,2],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["gray",3]],[[]],[[],["gray",3]],[[]],[[],["grayalpha",3]],[[],["grayalpha",3]],null,null,[[]],null,[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],null,[[]],[[]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rgb",3]],[[],["bgr",3]],[[],["rgba",3]],[[],["bgra",3]],[[],["gray",3]],[[],["grayalpha",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rgb",3]]],[[["gray",3]]],[[["rgba",3]]],[[["grayalpha",3]]],[[["bgr",3]],["bool",15]],[[["bgr",3]],["bool",15]],[[["bgra",3]],["bool",15]],[[["bgra",3]],["bool",15]],[[["gray",3]],["bool",15]],[[["gray",3]],["bool",15]],[[["grayalpha",3]],["bool",15]],[[["grayalpha",3]],["bool",15]],[[["rgb",3]],["bool",15]],[[["rgb",3]],["bool",15]],[[["rgba",3]],["bool",15]],[[["rgba",3]],["bool",15]],[[["bgr",3]],["ordering",4]],[[["bgra",3]],["ordering",4]],[[["gray",3]],["ordering",4]],[[["grayalpha",3]],["ordering",4]],[[["rgb",3]],["ordering",4]],[[["rgba",3]],["ordering",4]],[[["bgr",3]],[["option",4],["ordering",4]]],[[["bgra",3]],[["option",4],["ordering",4]]],[[["gray",3]],[["option",4],["ordering",4]]],[[["grayalpha",3]],[["option",4],["ordering",4]]],[[["rgb",3]],[["option",4],["ordering",4]]],[[["rgba",3]],[["option",4],["ordering",4]]],[[]],[[]],[[]],[[]],[[["rgb",3]]],[[["gray",3]]],[[["rgba",3]]],[[["grayalpha",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rgb",3]]],[[["gray",3]]],[[["rgba",3]]],[[["grayalpha",3]]],[[]],[[]],[[]],[[]],[[["rgb",3]]],[[["gray",3]]],[[["rgba",3]]],[[["grayalpha",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rgb",3],["u8",15]]],[[["rgb",3],["u16",15]]],[[["rgb",3],["u8",15]]],[[["rgb",3],["u8",15]]],[[["rgb",3],["u16",15]]],[[["rgb",3],["u16",15]]],[[["rgb",3],["i16",15]]],[[["rgb",3],["i16",15]]],[[["rgb",3],["i32",15]]],[[["rgb",3],["f32",15]]],[[["u16",15],["rgba",3]]],[[["rgba",3],["u8",15]]],[[["rgba",3],["u8",15]]],[[["u16",15],["rgba",3]]],[[["u16",15],["rgba",3]]],[[["i16",15],["rgba",3]]],[[["i16",15],["rgba",3]]],[[["rgba",3],["i32",15]]],[[["rgba",3],["f32",15]]],[[["gray",3]]],[[["grayalpha",3]]],[[["rgb",3]]],[[["rgba",3]]],[[["bgr",3]]],[[["bgra",3]]],[[["bgr",3]]],[[["bgr",3]]],[[["rgb",3]]],[[["rgb",3]]],[[["bgr",3]]],[[["bgr",3]]],[[["rgb",3]]],[[["rgb",3]]],[[]],[[["gray",3]]],[[["gray",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bgr",3]],[[],["bgra",3]],[[],["gray",3]],[[],["grayalpha",3]],[[],["rgb",3]],[[],["rgba",3]],[[],["bgr",3]],[[],["bgra",3]],[[],["gray",3]],[[],["grayalpha",3]],[[],["rgb",3]],[[],["rgba",3]],[[]],[[]],[[]],[[]],[[],[["cloned",3],["iter",3]]],[[],["rgba",3]],[[],["rgba",3]],[[],[["cloned",3],["iter",3]]],[[],["bgra",3]],[[],["bgra",3]],[[]],[[]],[[]],[[]],[[],["rgb",3]],[[],["bgr",3]],[[],["bgr",3]],[[],["rgb",3]],[[],["bgr",3]],[[],[["cloned",3],["iter",3]]],[[],["bgr",3]],[[],["rgba",3]],[[]],[[],["rgba",3]],[[],[["cloned",3],["iter",3]]],[[],["bgr",3]],[[],["bgra",3]],[[]],[[],["bgra",3]]],"p":[[3,"BGR"],[3,"BGRA"],[3,"Gray"],[3,"GrayAlpha"],[8,"Zeroable"],[8,"AsPixels"],[8,"FromSlice"],[8,"ComponentSlice"],[8,"ComponentBytes"],[8,"ComponentMap"],[3,"RGB"],[3,"RGBA"]]},\
"ryu":{"doc":"github crates-io docs-rs","t":[0,5,5,3,8,11,11,11,11,11,11,11,11,11,11,11,11],"n":["raw","format32","format64","Buffer","Float","borrow","borrow_mut","try_from","from","into","try_into","type_id","clone","default","new","format","format_finite"],"q":["ryu","ryu::raw","","ryu","","","","","","","","","","","","",""],"d":["Unsafe functions that mirror the API of the C …","Print f32 to the given buffer and return number of bytes …","Print f64 to the given buffer and return number of bytes …","Safe API for formatting floating point numbers to text.","A floating point number, f32 or f64, that can be written …","","","","","","","","","","This is a cheap operation; you don’t need to worry …","Print a floating point number into this buffer and return …","Print a floating point number into this buffer and return …"],"i":[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[["f32",15]],["usize",15]],[[["f64",15]],["usize",15]],null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[["float",8]],["str",15]],[[["float",8]],["str",15]]],"p":[[3,"Buffer"]]},\
"scopeguard":{"doc":"A scope guard will run a given closure when it goes out …","t":[8,10,4,3,11,11,5,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Strategy","should_run","Always","ScopeGuard","with_strategy","into_inner","guard","defer","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","should_run","deref","deref_mut","fmt","fmt","drop"],"q":["scopeguard","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Controls in which cases the associated code should be run","Return <code>true</code> if the guard’s associated code should run …","Always run on scope exit.","<code>ScopeGuard</code> is a scope guard that may own a protected …","Create a <code>ScopeGuard</code> that owns <code>v</code> (accessible through …","“Defuse” the guard and extract the value without …","Create a new <code>ScopeGuard</code> owning <code>v</code> and with deferred …","Macro to create a <code>ScopeGuard</code> (always run).","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,0,2,2,0,0,3,3,3,3,3,3,3,2,2,2,2,2,2,2,3,2,2,3,2,2],"f":[null,[[],["bool",15]],null,null,[[],["scopeguard",3]],[[]],[[],[["always",4],["scopeguard",3]]],null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]]],"p":[[8,"Strategy"],[3,"ScopeGuard"],[4,"Always"]]},\
"serde":{"doc":"Serde","t":[0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,3,3,3,11,3,11,3,11,11,3,11,3,11,11,3,11,3,8,10,11,11,11,11,11,11,11,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,10,8,10,8,8,16,10,8,16,10,10,10,10,10,10,11,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,8,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,10,11,11,8,16,10,10,11,11,11,11,11,8,16,16,10,11,8,16,10,10,11,10,10,8,16,10,0,3,8,10,8,10,8,16,16,16,16,16,16,16,16,16,10,10,10,10,10,11,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,8,16,16,10,10,8,16,16,10,10,8,16,16,10,10,8,16,16,10,10,8,16,16,10,10,11,10,8,16,16,10,11,10,8,16,16,10,11,10,8,10,8,16,10,10,10,10,10,10,11,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,8,10,8,16,16,16,16,16,16,16,16,16,10,10,10,10,10,11,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["de","value","Error","UnitDeserializer","BoolDeserializer","I8Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","IsizeDeserializer","U8Deserializer","U16Deserializer","U64Deserializer","UsizeDeserializer","F32Deserializer","F64Deserializer","CharDeserializer","I128Deserializer","U128Deserializer","U32Deserializer","StrDeserializer","BorrowedStrDeserializer","new","StringDeserializer","CowStrDeserializer","BytesDeserializer","new","BorrowedBytesDeserializer","new","SeqDeserializer","new","end","SeqAccessDeserializer","new","MapDeserializer","new","end","MapAccessDeserializer","new","IgnoredAny","Error","custom","invalid_type","invalid_value","invalid_length","unknown_variant","unknown_field","missing_field","duplicate_field","Unexpected","Bool","Unsigned","Signed","Float","Char","Str","Bytes","Unit","Option","NewtypeStruct","Seq","Map","Enum","UnitVariant","NewtypeVariant","TupleVariant","StructVariant","Other","Expected","fmt","Deserialize","deserialize","DeserializeOwned","DeserializeSeed","Value","deserialize","Deserializer","Error","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","is_human_readable","Visitor","Value","expecting","visit_bool","visit_i8","visit_i16","visit_i32","visit_i64","visit_i128","visit_u8","visit_u16","visit_u32","visit_u64","visit_u128","visit_f32","visit_f64","visit_char","visit_str","visit_borrowed_str","visit_string","visit_bytes","visit_borrowed_bytes","visit_byte_buf","visit_none","visit_some","visit_unit","visit_newtype_struct","visit_seq","visit_map","visit_enum","SeqAccess","Error","next_element_seed","next_element","size_hint","MapAccess","Error","next_key_seed","next_value_seed","next_entry_seed","next_key","next_value","next_entry","size_hint","EnumAccess","Error","Variant","variant_seed","variant","VariantAccess","Error","unit_variant","newtype_variant_seed","newtype_variant","tuple_variant","struct_variant","IntoDeserializer","Deserializer","into_deserializer","ser","Impossible","Error","custom","Serialize","serialize","Serializer","Ok","Error","SerializeSeq","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","SerializeMap","SerializeStruct","SerializeStructVariant","serialize_bool","serialize_i8","serialize_i16","serialize_i32","serialize_i64","serialize_i128","serialize_u8","serialize_u16","serialize_u32","serialize_u64","serialize_u128","serialize_f32","serialize_f64","serialize_char","serialize_str","serialize_bytes","serialize_none","serialize_some","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_newtype_struct","serialize_newtype_variant","serialize_seq","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_map","serialize_struct","serialize_struct_variant","collect_seq","collect_map","collect_str","is_human_readable","SerializeSeq","Ok","Error","serialize_element","end","SerializeTuple","Ok","Error","serialize_element","end","SerializeTupleStruct","Ok","Error","serialize_field","end","SerializeTupleVariant","Ok","Error","serialize_field","end","SerializeMap","Ok","Error","serialize_key","serialize_value","serialize_entry","end","SerializeStruct","Ok","Error","serialize_field","skip_field","end","SerializeStructVariant","Ok","Error","serialize_field","skip_field","end","Deserialize","deserialize","Deserializer","Error","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","is_human_readable","Serialize","serialize","Serializer","Ok","Error","SerializeSeq","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","SerializeMap","SerializeStruct","SerializeStructVariant","serialize_bool","serialize_i8","serialize_i16","serialize_i32","serialize_i64","serialize_i128","serialize_u8","serialize_u16","serialize_u32","serialize_u64","serialize_u128","serialize_f32","serialize_f64","serialize_char","serialize_str","serialize_bytes","serialize_none","serialize_some","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_newtype_struct","serialize_newtype_variant","serialize_seq","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_map","serialize_struct","serialize_struct_variant","collect_seq","collect_map","collect_str","is_human_readable","forward_to_deserialize_any","serde_if_integer128","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","fmt","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","deserialize","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_option","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_enum","deserialize_any","deserialize_enum","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_enum","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_enum","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_enum","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_seq","deserialize_tuple","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_enum","deserialize_bool","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i128","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u128","deserialize_f32","deserialize_f64","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_identifier","deserialize_ignored_any","expecting","visit_bool","visit_i64","visit_i128","visit_u64","visit_u128","visit_f64","visit_str","visit_none","visit_some","visit_newtype_struct","visit_unit","visit_seq","visit_map","visit_bytes","visit_enum","next_element_seed","size_hint","next_element_seed","size_hint","next_key_seed","next_value_seed","next_entry_seed","size_hint","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","serialize_element","end","serialize_element","end","serialize_field","end","serialize_field","end","serialize_key","serialize_value","end","serialize_field","end","serialize_field","end","custom","custom","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","eq","ne","eq","ne","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","description"],"q":["serde","serde::de","serde::de::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde::de","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde","serde::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde::de::valueserde::de","","","","","","","","","","","","","","","","","","","","serde::ser","","","","","","","serde::de","serde::de::valueserde::de","","","","","","","","","","","","","","","","serde::de::value","","","","","","","","","","","","","","serde::ser","","","","","","","","","","","","","","","serde::de::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde::de","","","serde::de::value","","serde::de","","serde::de::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde::de","","serde::de::value","serde::de","","serde::de::value"],"d":["Generic data structure deserialization framework.","Building blocks for deserializing basic values using the …","A minimal representation of all possible errors that can …","A deserializer holding a <code>()</code>.","A deserializer holding a <code>bool</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>usize</code>.","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding a <code>char</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>&str</code>.","A deserializer holding a <code>&str</code> with a lifetime tied to …","Create a new borrowed deserializer from the given string.","A deserializer holding a <code>String</code>.","A deserializer holding a <code>Cow<str></code>.","A deserializer holding a <code>&[u8]</code>. Always calls […","Create a new deserializer from the given bytes.","A deserializer holding a <code>&[u8]</code> with a lifetime tied to …","Create a new borrowed deserializer from the given …","A deserializer that iterates over a sequence.","Construct a new <code>SeqDeserializer<I, E></code>.","Check for remaining elements after passing a …","A deserializer holding a <code>SeqAccess</code>.","Construct a new <code>SeqAccessDeserializer<A></code>.","A deserializer that iterates over a map.","Construct a new <code>MapDeserializer<I, E></code>.","Check for remaining elements after passing a …","A deserializer holding a <code>MapAccess</code>.","Construct a new <code>MapAccessDeserializer<A></code>.","An efficient way of discarding data from a deserializer.","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","Raised when there is general error when deserializing a …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> enum type received a variant …","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> struct type expected to receive …","Raised when a <code>Deserialize</code> struct type received more than …","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a boolean value that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","The input contained a <code>char</code> that was not expected.","The input contained a <code>&str</code> or <code>String</code> that was not …","The input contained a <code>&[u8]</code> or <code>Vec<u8></code> that was not …","The input contained a unit <code>()</code> that was not expected.","The input contained an <code>Option<T></code> that was not expected.","The input contained a newtype struct that was not …","The input contained a sequence that was not expected.","The input contained a map that was not expected.","The input contained an enum that was not expected.","The input contained a unit variant that was not expected.","The input contained a newtype variant that was not …","The input contained a tuple variant that was not expected.","The input contained a struct variant that was not …","A message stating what uncategorized thing the input …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","Format an explanation of what data was being expected. …","A <strong>data structure</strong> that can be deserialized from any data …","Deserialize this value from the given Serde deserializer.","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","The type produced by using this seed.","Equivalent to the more common <code>Deserialize::deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Determine whether <code>Deserialize</code> implementations should …","This trait represents a visitor that walks through a …","The value produced by this visitor.","Format a message stating what data this Visitor expects …","The input contains a boolean.","The input contains an <code>i8</code>.","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","The input contains a <code>i128</code>.","The input contains a <code>u8</code>.","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","The input contains a <code>u128</code>.","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","The input contains a <code>char</code>.","The input contains a string. The lifetime of the string …","The input contains a string that lives at least as long …","The input contains a string and ownership of the string …","The input contains a byte array. The lifetime of the byte …","The input contains a byte array that lives at least as …","The input contains a byte array and ownership of the byte …","The input contains an optional that is absent.","The input contains an optional that is present.","The input contains a unit <code>()</code>.","The input contains a newtype struct.","The input contains a sequence of elements.","The input contains a key-value map.","The input contains an enum.","Provides a <code>Visitor</code> access to each element of a sequence …","The error type that can be returned if some error occurs …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","Returns the number of elements remaining in the sequence, …","Provides a <code>Visitor</code> access to each entry of a map in the …","The error type that can be returned if some error occurs …","This returns <code>Ok(Some(key))</code> for the next key in the map, …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns <code>Ok(Some((key, value)))</code> for the next …","Returns the number of entries remaining in the map, if …","Provides a <code>Visitor</code> access to the data of an enum in the …","The error type that can be returned if some error occurs …","The <code>Visitor</code> that will be used to deserialize the content …","<code>variant</code> is called to identify which variant to …","<code>variant</code> is called to identify which variant to …","<code>VariantAccess</code> is a visitor that is created by the …","The error type that can be returned if some error occurs …","Called when deserializing a variant with no values.","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","Called when deserializing a tuple-like variant.","Called when deserializing a struct-like variant.","Converts an existing value into a <code>Deserializer</code> from which …","The type of the deserializer being converted into.","Convert this value into a deserializer.","Generic data structure serialization framework.","Helper type for implementing a <code>Serializer</code> that does not …","Trait used by <code>Serialize</code> implementations to generically …","Used when a <code>Serialize</code> implementation encounters any error …","A <strong>data structure</strong> that can be serialized into any data …","Serialize this value into the given Serde serializer.","A <strong>data format</strong> that can serialize any data structure …","The output type produced by this <code>Serializer</code> during …","The error type when some error occurs during …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Serialize a <code>bool</code> value.","Serialize an <code>i8</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i128</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u128</code> value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a character.","Serialize a <code>&str</code>.","Serialize a chunk of raw byte data.","Serialize a <code>None</code> value.","Serialize a <code>Some(T)</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData<T></code>…","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Begin to serialize a variably sized sequence. This call …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Begin to serialize a map. This call must be followed by …","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Collect an iterator as a sequence.","Collect an iterator as a map.","Serialize a string produced by an implementation of …","Determine whether <code>Serialize</code> implementations should …","Returned from <code>Serializer::serialize_seq</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a sequence element.","Finish serializing a sequence.","Returned from <code>Serializer::serialize_tuple</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a tuple element.","Finish serializing a tuple.","Returned from <code>Serializer::serialize_tuple_struct</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a tuple struct field.","Finish serializing a tuple struct.","Returned from <code>Serializer::serialize_tuple_variant</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a tuple variant field.","Finish serializing a tuple variant.","Returned from <code>Serializer::serialize_map</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a map key.","Serialize a map value.","Serialize a map entry consisting of a key and a value.","Finish serializing a map.","Returned from <code>Serializer::serialize_struct</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a struct field.","Indicate that a struct field has been skipped.","Finish serializing a struct.","Returned from <code>Serializer::serialize_struct_variant</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Serialize a struct variant field.","Indicate that a struct variant field has been skipped.","Finish serializing a struct variant.","A <strong>data structure</strong> that can be deserialized from any data …","Deserialize this value from the given Serde deserializer.","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a string …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Determine whether <code>Deserialize</code> implementations should …","A <strong>data structure</strong> that can be serialized into any data …","Serialize this value into the given Serde serializer.","A <strong>data format</strong> that can serialize any data structure …","The output type produced by this <code>Serializer</code> during …","The error type when some error occurs during …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Serialize a <code>bool</code> value.","Serialize an <code>i8</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i128</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u128</code> value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a character.","Serialize a <code>&str</code>.","Serialize a chunk of raw byte data.","Serialize a <code>None</code> value.","Serialize a <code>Some(T)</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData<T></code>…","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Begin to serialize a variably sized sequence. This call …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Begin to serialize a map. This call must be followed by …","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Collect an iterator as a sequence.","Collect an iterator as a map.","Serialize a string produced by an implementation of …","Determine whether <code>Serialize</code> implementations should …","Helper macro when implementing the <code>Deserializer</code> part of a …","Conditional compilation depending on whether Serde is …i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,3,0,4,4,0,5,0,6,6,0,7,0,0,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,0,11,0,0,12,12,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,15,15,15,15,0,16,16,16,16,16,16,16,16,0,17,17,17,17,0,18,18,18,18,18,18,0,19,19,0,0,0,20,0,21,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,23,23,23,23,0,24,24,24,24,0,25,25,25,25,0,26,26,26,26,0,27,27,27,27,27,27,0,28,28,28,28,28,0,29,29,29,29,29,0,11,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,21,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,1,1,1,1,1,1,1,1,1,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,51,51,51,51,51,51,51,51,51,51,9,9,9,9,9,9,9,9,9,9,52,52,52,52,52,52,52,51,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,4,4,6,6,6,6,6,6,47,48,1,49,50,7,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,30,30,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,1,49,50,2,3,4,5,6,7,51,9,51,30,30,9,9,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,1,49,50,2,3,4,5,6,7,51,9,30,9,10,30],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15]],["borrowedstrdeserializer",3]],null,null,null,[[]],null,[[]],null,[[]],[[],["result",4]],null,[[]],null,[[]],[[],["result",4]],null,[[]],null,null,[[]],[[["unexpected",4],["expected",8]]],[[["unexpected",4],["expected",8]]],[[["usize",15],["expected",8]]],[[["str",15]]],[[["str",15]]],[[["str",15]]],[[["str",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["formatter",3]],["result",6]],null,[[],["result",4]],null,null,null,[[],["result",4]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["bool",15]],["result",4]],[[["i8",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i128",15]],["result",4]],[[["u8",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u128",15]],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[["char",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["string",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[["vec",3],["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[],[["option",4],["result",4]]],[[],[["result",4],["option",4]]],[[],[["usize",15],["option",4]]],null,null,[[],[["result",4],["option",4]]],[[],["result",4]],[[],[["result",4],["option",4]]],[[],[["result",4],["option",4]]],[[],["result",4]],[[],[["result",4],["option",4]]],[[],[["usize",15],["option",4]]],null,null,null,[[],["result",4]],[[],["result",4]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[],["result",4]],null,null,[[]],null,null,null,[[]],null,[[],["result",4]],null,null,null,null,null,null,null,null,null,null,[[["bool",15]],["result",4]],[[["i8",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i128",15]],["result",4]],[[["u8",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u128",15]],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[["char",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["usize",15],["option",4]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["u32",15],["str",15],["usize",15]],["result",4]],[[["usize",15],["option",4]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["u32",15],["str",15],["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],null,null,null,[[],["result",4]],[[],["result",4]],null,null,null,[[],["result",4]],[[],["result",4]],null,null,null,[[],["result",4]],[[],["result",4]],null,null,null,[[],["result",4]],[[],["result",4]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],null,null,null,[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],null,[[],["result",4]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],null,[[],["result",4]],null,null,null,null,null,null,null,null,null,null,[[["bool",15]],["result",4]],[[["i8",15]],["result",4]],[[["i16",15]],["result",4]],[[["i32",15]],["result",4]],[[["i64",15]],["result",4]],[[["i128",15]],["result",4]],[[["u8",15]],["result",4]],[[["u16",15]],["result",4]],[[["u32",15]],["result",4]],[[["u64",15]],["result",4]],[[["u128",15]],["result",4]],[[["f32",15]],["result",4]],[[["f64",15]],["result",4]],[[["char",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["usize",15],["option",4]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["u32",15],["str",15],["usize",15]],["result",4]],[[["usize",15],["option",4]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[["u32",15],["str",15],["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],null,null,[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],[["ignoredany",3],["result",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[["formatter",3]],["result",6]],[[["bool",15]],["result",4]],[[["i64",15]],["result",4]],[[["i128",15]],["result",4]],[[["u64",15]],["result",4]],[[["u128",15]],["result",4]],[[["f64",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["result",4],["option",4]]],[[],[["usize",15],["option",4]]],[[],[["option",4],["result",4]]],[[],[["usize",15],["option",4]]],[[],[["option",4],["result",4]]],[[],["result",4]],[[],[["option",4],["result",4]]],[[],[["usize",15],["option",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[]],[[]],[[],["error",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["seqdeserializer",3]],[[],["seqaccessdeserializer",3]],[[]],[[],["mapaccessdeserializer",3]],[[],["ignoredany",3]],[[],["unexpected",4]],[[],["ignoredany",3]],[[["error",3]],["bool",15]],[[["error",3]],["bool",15]],[[["unexpected",4]],["bool",15]],[[["unexpected",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["str",15]]],"p":[[3,"BorrowedStrDeserializer"],[3,"BytesDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[8,"Error"],[4,"Unexpected"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"IgnoredAny"],[3,"Impossible"]]},\
"serde_derive":{"doc":"This crate provides Serde’s two derive macros.","t":[24,24],"n":["Serialize","Deserialize"],"q":["serde_derive",""],"d":["",""],"i":[0,0],"f":[null,null],"p":[]},\
"serde_json":{"doc":"Serde JSON","tn":["de","Read","SliceRead","StrRead","IoRead","Deserializer","new","from_reader","from_slice","from_str","end","into_iter","StreamDeserializer","new","byte_offset","from_reader","from_slice","from_str","error","Error","Result","line","column","classify","is_io","is_syntax","is_data","is_eof","Category","Io","Syntax","Data","Eof","map","Map","new","with_capacity","clear","get","contains_key","get_mut","insert","remove","remove_entry","append","entry","len","is_empty","iter","iter_mut","keys","values","values_mut","Entry","Vacant","Occupied","VacantEntry","OccupiedEntry","key","or_insert","or_insert_with","and_modify","key","insert","key","get","get_mut","into_mut","insert","remove","Iter","IterMut","IntoIter","Keys","Values","ValuesMut","ser","Serializer","new","pretty","with_formatter","into_inner","CharEscape","Quote","ReverseSolidus","Solidus","Backspace","FormFeed","LineFeed","CarriageReturn","Tab","AsciiControl","Formatter","write_null","write_bool","write_i8","write_i16","write_i32","write_i64","write_u8","write_u16","write_u32","write_u64","write_f32","write_f64","write_number_str","begin_string","end_string","write_string_fragment","write_char_escape","begin_array","end_array","begin_array_value","end_array_value","begin_object","end_object","begin_object_key","end_object_key","begin_object_value","end_object_value","write_raw_fragment","CompactFormatter","PrettyFormatter","new","with_indent","to_writer","to_writer_pretty","to_vec","to_vec_pretty","to_string","to_string_pretty","value","Index","Serializer","Number","Value","Null","Bool","Number","String","Array","Object","get","get_mut","is_object","as_object","as_object_mut","is_array","as_array","as_array_mut","is_string","as_str","is_number","is_i64","is_u64","is_f64","as_i64","as_u64","as_f64","is_boolean","as_bool","is_null","as_null","pointer","pointer_mut","take","to_value","from_value","is_i64","is_u64","is_f64","as_i64","as_u64","as_f64","from_f64","new","new","new","from_reader","from_slice","from_str","Deserializer","StreamDeserializer","Error","Result","to_string","to_string_pretty","to_vec","to_vec_pretty","to_writer","to_writer_pretty","Serializer","from_value","to_value","Map","Number","Value","Null","Bool","Number","String","Array","Object","json","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","begin_array","end_array","begin_array_value","end_array_value","begin_object","end_object","begin_object_key","begin_object_value","end_object_value","next","peek","discard","position","peek_position","byte_offset","parse_str","parse_str_raw","ignore_str","decode_hex_escape","set_failed","next","peek","discard","position","peek_position","byte_offset","parse_str","parse_str_raw","ignore_str","decode_hex_escape","set_failed","next","peek","discard","position","peek_position","byte_offset","parse_str","parse_str_raw","ignore_str","decode_hex_escape","set_failed","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","next_back","next_back","next_back","next_back","next_back","next_back","len","len","len","len","len","len","extend","into_iter","next","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","clone","clone","clone","clone","clone","clone","default","default","default","eq","eq","eq","ne","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","ne","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","index","index","index_mut","index_mut","from_str","from_str","from_iter","from_iter","from_iter","source","deserialize_any","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_u128","deserialize_option","deserialize_enum","deserialize_newtype_struct","deserialize_bool","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_unit","deserialize_unit_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_identifier","deserialize_ignored_any","deserialize_any","deserialize_i8","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_u8","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_u128","deserialize_bool","deserialize_char","deserialize_str","deserialize_string","deserialize_bytes","deserialize_byte_buf","deserialize_option","deserialize_unit","deserialize_unit_struct","deserialize_newtype_struct","deserialize_seq","deserialize_tuple","deserialize_tuple_struct","deserialize_map","deserialize_struct","deserialize_enum","deserialize_identifier","deserialize_ignored_any","into_deserializer","custom","serialize","serialize","serialize","serialize_bool","serialize_i8","serialize_i16","serialize_i32","serialize_i64","serialize_u8","serialize_u16","serialize_u32","serialize_u64","serialize_f32","serialize_f64","serialize_char","serialize_str","serialize_bytes","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_some","serialize_seq","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_map","serialize_struct","serialize_struct_variant","collect_str","deserialize","deserialize","deserialize","custom","invalid_type"],"q":["serde_json","serde_json::de","","","","","","","","","","","","","","","","","serde_json","serde_json::error","","","","","","","","","","","","","","serde_json","serde_json::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json","serde_json::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json","serde_json::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::de","","","serde_json","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::de","","","","","","","","","","","","","","","","","","","","","serde_json","","","","","","","","","","","","","","","","","","","","","","","serde_json::error","","","","","","","","","serde_json","","","","","","","","","serde_json::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json","","","","","","","serde_json::ser","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::value","","","","","","","","","","","","","","","","","serde_json","","","","","","","","","","serde_json::ser","","","","","","","","","serde_json::de","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json","","","","","","","","","","","","","","","","","","","","","serde_json::value","","","","","","","","","","serde_json::map","","","","","","","","","","","","serde_json","","","serde_json::map","","","","","","","","","","","","serde_json::error","serde_json","serde_json::ser","","serde_json","serde_json::value","serde_json","serde_json::ser","serde_json","serde_json::error","serde_json","","","","","","","","","","","","","","","","","","","serde_json::value","","serde_json::error","serde_json","","serde_json::ser","","serde_json","serde_json::value","serde_json","","serde_json::value","serde_json","","","","serde_json::value","serde_json","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json","","","","serde_json::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json","","serde_json::value","serde_json",""],"d":["Deserialize JSON data to a Rust data structure.","Trait used by the deserializer for iterating over input. …","JSON input source that reads from a slice of bytes.","JSON input source that reads from a UTF-8 string.","JSON input source that reads from a std::io input stream.","A structure that deserializes JSON into Rust values.","Create a JSON deserializer from one of the possible …","Creates a JSON deserializer from an <code>io::Read</code>.","Creates a JSON deserializer from a <code>&[u8]</code>.","Creates a JSON deserializer from a <code>&str</code>.","The <code>Deserializer::end</code> method should be called after a …","Turn a JSON deserializer into an iterator over values of …","Iterator that deserializes a stream into multiple JSON …","Create a JSON stream deserializer from one of the …","Returns the number of bytes so far deserialized into a …","Deserialize an instance of type <code>T</code> from an IO stream of …","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Deserialize an instance of type <code>T</code> from a string of JSON …","When serializing or deserializing JSON goes wrong.","This type represents all possible errors that can occur …","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","One-based line number at which the error was detected.","One-based column number at which the error was detected.","Categorizes the cause of this error.","Returns true if this error was caused by a failure to …","Returns true if this error was caused by input that was …","Returns true if this error was caused by input data that …","Returns true if this error was caused by prematurely …","Categorizes the cause of a <code>serde_json::Error</code>.","The error was caused by a failure to read or write bytes …","The error was caused by input that was not syntactically …","The error was caused by input data that was semantically …","The error was caused by prematurely reaching the end of …","A map of String to serde_json::Value.","Represents a JSON key/value type.","Makes a new empty Map.","Makes a new empty Map with the given initial capacity.","Clears the map, removing all values.","Returns a reference to the value corresponding to the key.","Returns true if the map contains a value for the …","Returns a mutable reference to the value corresponding to …","Inserts a key-value pair into the map.","Removes a key from the map, returning the value at the …","Removes a key from the map, returning the stored key and …","Moves all elements from other into Self, leaving other …","Gets the given key’s corresponding entry in the map for …","Returns the number of elements in the map.","Returns true if the map contains no elements.","Gets an iterator over the entries of the map.","Gets a mutable iterator over the entries of the map.","Gets an iterator over the keys of the map.","Gets an iterator over the values of the map.","Gets an iterator over mutable values of the map.","A view into a single entry in a map, which may either be …","A vacant Entry.","An occupied Entry.","A vacant Entry. It is part of the <code>Entry</code> enum.","An occupied Entry. It is part of the <code>Entry</code> enum.","Returns a reference to this entry’s key.","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result …","Provides in-place mutable access to an occupied entry …","Gets a reference to the key that would be used when …","Sets the value of the entry with the VacantEntry’s key, …","Gets a reference to the key in the entry.","Gets a reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Converts the entry into a mutable reference to its value.","Sets the value of the entry with the <code>OccupiedEntry</code>’s …","Takes the value of the entry out of the map, and returns …","An iterator over a serde_json::Map’s entries.","A mutable iterator over a serde_json::Map’s entries.","An owning iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s keys.","An iterator over a serde_json::Map’s values.","A mutable iterator over a serde_json::Map’s values.","Serialize a Rust data structure into JSON data.","A structure for serializing Rust values into JSON.","Creates a new JSON serializer.","Creates a new JSON pretty print serializer.","Creates a new JSON visitor whose output will be written …","Unwrap the <code>Writer</code> from the <code>Serializer</code>.","Represents a character escape code in a type-safe manner.","An escaped quote <code>\\\"</code>","An escaped reverse solidus <code>\\\\</code>","An escaped solidus <code>/</code>","An escaped backspace character (usually escaped as <code>\\\\b</code>)","An escaped form feed character (usually escaped as <code>\\\\f</code>)","An escaped line feed character (usually escaped as <code>\\\\n</code>)","An escaped carriage return character (usually escaped as …","An escaped tab character (usually escaped as <code>\\\\t</code>)","An escaped ASCII plane control character (usually escaped …","This trait abstracts away serializing the JSON control …","Writes a <code>null</code> value to the specified writer.","Writes a <code>true</code> or <code>false</code> value to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes a floating point value like <code>-31.26e+12</code> to the …","Writes a floating point value like <code>-31.26e+12</code> to the …","Writes a number that has already been rendered to a …","Called before each series of <code>write_string_fragment</code> and …","Called after each series of <code>write_string_fragment</code> and …","Writes a string fragment that doesn’t need any escaping …","Writes a character escape code to the specified writer.","Called before every array.  Writes a <code>[</code> to the specified …","Called after every array.  Writes a <code>]</code> to the specified …","Called before every array value.  Writes a <code>,</code> if needed to …","Called after every array value.","Called before every object.  Writes a <code>{</code> to the specified …","Called after every object.  Writes a <code>}</code> to the specified …","Called before every object key.","Called after every object key.  A <code>:</code> should be written to …","Called before every object value.  A <code>:</code> should be written …","Called after every object value.","Writes a raw JSON fragment that doesn’t need any …","This structure compacts a JSON value with no extra …","This structure pretty prints a JSON value to make it …","Construct a pretty printer formatter that defaults to …","Construct a pretty printer formatter that uses the <code>indent</code> …","Serialize the given data structure as JSON into the IO …","Serialize the given data structure as pretty-printed JSON …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as a String of JSON.","Serialize the given data structure as a pretty-printed …","The Value enum, a loosely typed way of representing any …","A type that can be used to index into a <code>serde_json::Value</code>.","Serializer whose output is a <code>Value</code>.","Represents a JSON number, whether integer or floating …","Represents any valid JSON value.","Represents a JSON null value.","Represents a JSON boolean.","Represents a JSON number, whether integer or floating …","Represents a JSON string.","Represents a JSON array.","Represents a JSON object.","Index into a JSON array or map. A string index can be …","Mutably index into a JSON array or map. A string index …","Returns true if the <code>Value</code> is an Object. Returns false …","If the <code>Value</code> is an Object, returns the associated Map. …","If the <code>Value</code> is an Object, returns the associated mutable …","Returns true if the <code>Value</code> is an Array. Returns false …","If the <code>Value</code> is an Array, returns the associated vector. …","If the <code>Value</code> is an Array, returns the associated mutable …","Returns true if the <code>Value</code> is a String. Returns false …","If the <code>Value</code> is a String, returns the associated str. …","Returns true if the <code>Value</code> is a Number. Returns false …","Returns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Value</code> is an integer between zero and …","Returns true if the <code>Value</code> is a number that can be …","If the <code>Value</code> is an integer, represent it as i64 if …","If the <code>Value</code> is an integer, represent it as u64 if …","If the <code>Value</code> is a number, represent it as f64 if …","Returns true if the <code>Value</code> is a Boolean. Returns false …","If the <code>Value</code> is a Boolean, returns the associated bool. …","Returns true if the <code>Value</code> is a Null. Returns false …","If the <code>Value</code> is a Null, returns (). Returns None …","Looks up a value by a JSON Pointer.","Looks up a value by a JSON Pointer and returns a mutable …","Takes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","Returns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Number</code> is an integer between zero and …","Returns true if the <code>Number</code> can be represented by f64.","If the <code>Number</code> is an integer, represent it as i64 if …","If the <code>Number</code> is an integer, represent it as u64 if …","Represents the number as f64 if possible. Returns None …","Converts a finite <code>f64</code> to a <code>Number</code>. Infinite or NaN values …","Create a JSON input source to read from a std::io input …","Create a JSON input source to read from a slice of bytes.","Create a JSON input source to read from a UTF-8 string.","Deserialize an instance of type <code>T</code> from an IO stream of …","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Deserialize an instance of type <code>T</code> from a string of JSON …","A structure that deserializes JSON into Rust values.","Iterator that deserializes a stream into multiple JSON …","This type represents all possible errors that can occur …","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","Serialize the given data structure as a String of JSON.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as JSON into the IO …","Serialize the given data structure as pretty-printed JSON …","A structure for serializing Rust values into JSON.","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","Represents a JSON key/value type.","Represents a JSON number, whether integer or floating …","Represents any valid JSON value.","Represents a JSON null value.","Represents a JSON boolean.","Represents a JSON number, whether integer or floating …","Represents a JSON string.","Represents a JSON array.","Represents a JSON object.","Construct a <code>serde_json::Value</code> from a JSON literal.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert 32-bit floating point number to <code>Value</code>","Convert 64-bit floating point number to <code>Value</code>","Convert boolean to <code>Value</code>","Convert <code>String</code> to <code>Value</code>","Convert string slice to <code>Value</code>","Convert copy-on-write string to <code>Value</code>","Convert <code>Number</code> to <code>Value</code>","Convert map (with string keys) to <code>Value</code>","Convert a <code>Vec</code> to <code>Value</code>","Convert a slice to <code>Value</code>","Convert <code>()</code> to <code>Value</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Display a JSON value as a string.","","","Index into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> …","","Write into a <code>serde_json::Value</code> using the syntax …","","","","Convert an iteratable type to a <code>Value</code>","Convert an iteratable type to a <code>Value</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,1,1,1,1,0,2,2,0,0,0,0,0,0,3,3,3,3,3,3,3,0,4,4,4,4,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,0,0,6,6,6,6,7,7,8,8,8,8,8,8,0,0,0,0,0,0,0,0,9,9,9,9,0,10,10,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,12,12,0,0,0,0,0,0,0,0,0,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,14,14,14,14,14,14,14,15,16,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,13,13,13,13,13,0,16,16,16,16,16,16,16,17,17,17,17,17,17,17,15,15,15,15,15,15,15,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,9,9,9,9,9,9,9,10,10,10,10,10,10,10,24,24,24,24,24,24,24,24,24,12,12,12,12,12,12,12,12,12,25,25,25,25,25,25,25,14,14,14,14,14,14,14,14,14,14,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,12,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,18,19,20,21,22,23,18,19,20,21,22,23,5,5,2,18,18,19,19,20,20,21,21,22,22,23,23,4,5,24,12,13,14,5,12,13,4,5,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,4,3,5,24,12,13,14,3,13,14,5,13,5,13,14,13,5,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,13,3,5,13,14,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,5,13,14,3,3],"f":[null,null,null,null,null,null,[[]],[[]],[[]],[[["str",15]]],[[],["result",6]],[[],["streamdeserializer",3]],null,[[]],[[],["usize",15]],[[],["result",6]],[[],["result",6]],[[["str",15]],["result",6]],null,null,null,[[],["usize",15]],[[],["usize",15]],[[],["category",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,[[]],[[["usize",15]]],[[]],[[],[["option",4],["value",4]]],[[],["bool",15]],[[],[["option",4],["value",4]]],[[["string",3],["value",4]],[["option",4],["value",4]]],[[],[["option",4],["value",4]]],[[],["option",4]],[[]],[[],["entry",4]],[[],["usize",15]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["keys",3]],[[],["values",3]],[[],["valuesmut",3]],null,null,null,null,null,[[],["string",3]],[[["value",4]],["value",4]],[[],["value",4]],[[]],[[],["string",3]],[[["value",4]],["value",4]],[[],["string",3]],[[],["value",4]],[[],["value",4]],[[],["value",4]],[[["value",4]],["value",4]],[[],["value",4]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[],["result",6]],[[["bool",15]],["result",6]],[[["i8",15]],["result",6]],[[["i16",15]],["result",6]],[[["i32",15]],["result",6]],[[["i64",15]],["result",6]],[[["u8",15]],["result",6]],[[["u16",15]],["result",6]],[[["u32",15]],["result",6]],[[["u64",15]],["result",6]],[[["f32",15]],["result",6]],[[["f64",15]],["result",6]],[[["str",15]],["result",6]],[[],["result",6]],[[],["result",6]],[[["str",15]],["result",6]],[[["charescape",4]],["result",6]],[[],["result",6]],[[],["result",6]],[[["bool",15]],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["bool",15]],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["str",15]],["result",6]],null,null,[[]],[[]],[[],["result",6]],[[],["result",6]],[[],[["vec",3],["result",6]]],[[],[["vec",3],["result",6]]],[[],[["result",6],["string",3]]],[[],[["result",6],["string",3]]],null,null,null,null,null,null,null,null,null,null,null,[[["index",8]],[["option",4],["value",4]]],[[["index",8]],[["option",4],["value",4]]],[[],["bool",15]],[[],[["map",3],["option",4]]],[[],[["map",3],["option",4]]],[[],["bool",15]],[[],[["vec",3],["option",4]]],[[],[["option",4],["vec",3]]],[[],["bool",15]],[[],[["option",4],["str",15]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["i64",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[],["bool",15]],[[],[["option",4],["bool",15]]],[[],["bool",15]],[[],["option",4]],[[["str",15]],[["option",4],["value",4]]],[[["str",15]],[["option",4],["value",4]]],[[],["value",4]],[[],[["result",4],["value",4],["error",3]]],[[["value",4]],[["result",4],["error",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["i64",15],["option",4]]],[[],[["u64",15],["option",4]]],[[],[["f64",15],["option",4]]],[[["f64",15]],[["number",3],["option",4]]],[[]],[[]],[[["str",15]]],[[],["result",6]],[[],["result",6]],[[["str",15]],["result",6]],null,null,null,null,[[],[["result",6],["string",3]]],[[],[["result",6],["string",3]]],[[],[["vec",3],["result",6]]],[[],[["vec",3],["result",6]]],[[],["result",6]],[[],["result",6]],null,[[["value",4]],[["result",4],["error",3]]],[[],[["result",4],["value",4],["error",3]]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["result",6]],[[],["result",6]],[[["bool",15]],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["bool",15]],["result",6]],[[],["result",6]],[[],["result",6]],[[],[["result",6],["option",4]]],[[],[["result",6],["option",4]]],[[]],[[],["position",3]],[[],["position",3]],[[],["usize",15]],[[["vec",3]],[["result",6],["reference",4]]],[[["vec",3]],[["reference",4],["result",6]]],[[],["result",6]],[[],[["result",6],["u16",15]]],[[["bool",15]]],[[],[["result",6],["option",4]]],[[],[["result",6],["option",4]]],[[]],[[],["position",3]],[[],["position",3]],[[],["usize",15]],[[["vec",3]],[["reference",4],["result",6]]],[[["vec",3]],[["result",6],["reference",4]]],[[],["result",6]],[[],[["result",6],["u16",15]]],[[["bool",15]]],[[],[["result",6],["option",4]]],[[],[["result",6],["option",4]]],[[]],[[],["position",3]],[[],["position",3]],[[],["usize",15]],[[["vec",3]],[["reference",4],["result",6]]],[[["vec",3]],[["result",6],["reference",4]]],[[],["result",6]],[[],[["result",6],["u16",15]]],[[["bool",15]]],[[["i8",15]]],[[["i16",15]]],[[["i32",15]]],[[["i64",15]]],[[["isize",15]]],[[["u8",15]]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["usize",15]]],[[["f32",15]]],[[["f64",15]]],[[["bool",15]]],[[["string",3]]],[[["str",15]]],[[["str",15],["cow",4]]],[[["number",3]]],[[["string",3],["value",4],["map",3]]],[[["vec",3]]],[[]],[[]],[[["u8",15]]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["usize",15]]],[[["i8",15]]],[[["i16",15]]],[[["i32",15]]],[[["i64",15]]],[[["isize",15]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],[["option",4],["result",6]]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["category",4]],[[]],[[],["compactformatter",3]],[[],["prettyformatter",3]],[[],["value",4]],[[],["number",3]],[[]],[[]],[[],["value",4]],[[["category",4]],["bool",15]],[[],["bool",15]],[[["value",4]],["bool",15]],[[["value",4]],["bool",15]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[["string",3]],["bool",15]],[[["i8",15]],["bool",15]],[[["i16",15]],["bool",15]],[[["i32",15]],["bool",15]],[[["i64",15]],["bool",15]],[[["isize",15]],["bool",15]],[[["u8",15]],["bool",15]],[[["u16",15]],["bool",15]],[[["u32",15]],["bool",15]],[[["u64",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["f32",15]],["bool",15]],[[["f64",15]],["bool",15]],[[["bool",15]],["bool",15]],[[["number",3]],["bool",15]],[[["number",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["value",4]],[[],["value",4]],[[],["value",4]],[[],["value",4]],[[["str",15]],["result",4]],[[["str",15]],[["result",4],["value",4],["error",3]]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],[["error",8],["option",4]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[["str",15]],[["result",4],["error",3]]],[[["str",15]],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[["str",15]],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[["usize",15]],[["result",4],["error",3]]],[[["usize",15],["str",15]],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[["str",15]],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15],["str",15]],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[["display",8]],["error",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["bool",15]],[["result",6],["value",4]]],[[["i8",15]],[["result",6],["value",4]]],[[["i16",15]],[["result",6],["value",4]]],[[["i32",15]],[["result",6],["value",4]]],[[["i64",15]],[["result",6],["value",4]]],[[["u8",15]],[["result",6],["value",4]]],[[["u16",15]],[["result",6],["value",4]]],[[["u32",15]],[["result",6],["value",4]]],[[["u64",15]],[["result",6],["value",4]]],[[["f32",15]],[["result",6],["value",4]]],[[["f64",15]],[["result",6],["value",4]]],[[["char",15]],[["result",6],["value",4]]],[[["str",15]],[["result",6],["value",4]]],[[],[["result",6],["value",4]]],[[],[["result",6],["value",4]]],[[["str",15]],[["result",6],["value",4]]],[[["u32",15],["str",15]],[["result",6],["value",4]]],[[["str",15]],[["result",6],["value",4]]],[[["u32",15],["str",15]],[["result",6],["value",4]]],[[],[["result",6],["value",4]]],[[],[["result",6],["value",4]]],[[["usize",15],["option",4]],["result",6]],[[["usize",15]],["result",6]],[[["usize",15],["str",15]],["result",6]],[[["u32",15],["str",15],["usize",15]],["result",6]],[[["usize",15],["option",4]],["result",6]],[[["usize",15],["str",15]],["result",6]],[[["u32",15],["str",15],["usize",15]],["result",6]],[[],[["result",6],["value",4]]],[[],["result",4]],[[],[["result",4],["value",4]]],[[],[["number",3],["result",4]]],[[["display",8]],["error",3]],[[["expected",8],["unexpected",4]]]],"p":[[3,"Deserializer"],[3,"StreamDeserializer"],[3,"Error"],[4,"Category"],[3,"Map"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Serializer"],[4,"CharEscape"],[8,"Formatter"],[3,"PrettyFormatter"],[4,"Value"],[3,"Number"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"CompactFormatter"],[3,"Serializer"]]},\
"simba":{"doc":"<strong>Simba</strong> is a crate defining a set of trait for writing code …","tn":["scalar","ComplexField","RealField","from_real","real","imaginary","modulus","modulus_squared","argument","norm1","scale","unscale","to_polar","to_exp","signum","floor","ceil","round","trunc","fract","mul_add","abs","hypot","recip","conjugate","sin","cos","sin_cos","sinh_cosh","tan","asin","acos","atan","sinh","cosh","tanh","asinh","acosh","atanh","sinc","sinhc","cosc","coshc","log","log2","log10","ln","ln_1p","sqrt","exp","exp2","exp_m1","powi","powf","powc","cbrt","is_finite","try_sqrt","ClosedAdd","ClosedDiv","ClosedMul","ClosedNeg","ClosedSub","Field","RealField","is_sign_positive","is_sign_negative","copysign","max","min","clamp","atan2","pi","two_pi","frac_pi_2","frac_pi_3","frac_pi_4","frac_pi_6","frac_pi_8","frac_1_pi","frac_2_pi","frac_2_sqrt_pi","e","log2_e","log10_e","ln_2","ln_10","SubsetOf","to_superset","from_superset","from_superset_unchecked","is_in_subset","SupersetOf","to_subset","is_in_subset","to_subset_unchecked","from_subset","simd","AutoSimd","0","AutoBoolSimd","0","AutoF32x2","AutoF32x4","AutoF32x8","AutoF32x16","AutoF64x2","AutoF64x4","AutoF64x8","AutoI128x1","AutoI128x2","AutoI128x4","AutoI16x2","AutoI16x4","AutoI16x8","AutoI16x16","AutoI16x32","AutoI32x2","AutoI32x4","AutoI32x8","AutoI32x16","AutoI64x2","AutoI64x4","AutoI64x8","AutoI8x2","AutoI8x4","AutoI8x8","AutoI8x16","AutoI8x32","AutoIsizex2","AutoIsizex4","AutoIsizex8","AutoU128x1","AutoU128x2","AutoU128x4","AutoU16x2","AutoU16x4","AutoU16x8","AutoU16x16","AutoU16x32","AutoU32x2","AutoU32x4","AutoU32x8","AutoU32x16","AutoU64x2","AutoU64x4","AutoU64x8","AutoU8x2","AutoU8x4","AutoU8x8","AutoU8x16","AutoU8x32","AutoUsizex2","AutoUsizex4","AutoUsizex8","AutoBoolx1","AutoBoolx16","AutoBoolx2","AutoBoolx32","AutoBoolx4","AutoBoolx8","SimdBool","bitmask","and","or","xor","all","any","none","if_else","if_else2","if_else3","SimdComplexField","SimdRealField","from_simd_real","simd_real","simd_imaginary","simd_modulus","simd_modulus_squared","simd_argument","simd_norm1","simd_scale","simd_unscale","simd_to_polar","simd_to_exp","simd_signum","simd_floor","simd_ceil","simd_round","simd_trunc","simd_fract","simd_mul_add","simd_abs","simd_hypot","simd_recip","simd_conjugate","simd_sin","simd_cos","simd_sin_cos","simd_sinh_cosh","simd_tan","simd_asin","simd_acos","simd_atan","simd_sinh","simd_cosh","simd_tanh","simd_asinh","simd_acosh","simd_atanh","simd_sinc","simd_sinhc","simd_cosc","simd_coshc","simd_log","simd_log2","simd_log10","simd_ln","simd_ln_1p","simd_sqrt","simd_exp","simd_exp2","simd_exp_m1","simd_powi","simd_powf","simd_powc","simd_cbrt","simd_horizontal_sum","simd_horizontal_product","SimdOption","SimdPartialOrd","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","SimdRealField","simd_copysign","simd_atan2","simd_default_epsilon","simd_pi","simd_two_pi","simd_frac_pi_2","simd_frac_pi_3","simd_frac_pi_4","simd_frac_pi_6","simd_frac_pi_8","simd_frac_1_pi","simd_frac_2_pi","simd_frac_2_sqrt_pi","simd_e","simd_log2_e","simd_log10_e","simd_ln_2","simd_ln_10","SimdSigned","simd_abs","simd_abs_sub","simd_signum","is_simd_positive","is_simd_negative","PrimitiveSimdValue","SimdValue","Element","SimdBool","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","map_lanes","zip_map_lanes","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","to_superset","from_superset","from_superset_unchecked","is_in_subset","bitmask","and","or","xor","all","any","none","if_else","if_else2","if_else3","bitmask","and","or","xor","all","any","none","if_else","if_else2","if_else3","bitmask","and","or","xor","all","any","none","if_else","if_else2","if_else3","bitmask","and","or","xor","all","any","none","if_else","if_else2","if_else3","bitmask","and","or","xor","all","any","none","if_else","if_else2","if_else3","bitmask","and","or","xor","all","any","none","if_else","if_else2","if_else3","simd_horizontal_sum","simd_horizontal_product","from_simd_real","simd_real","simd_imaginary","simd_norm1","simd_modulus","simd_modulus_squared","simd_argument","simd_to_exp","simd_recip","simd_conjugate","simd_scale","simd_unscale","simd_floor","simd_ceil","simd_round","simd_trunc","simd_fract","simd_abs","simd_signum","simd_mul_add","simd_powi","simd_powf","simd_powc","simd_sqrt","simd_exp","simd_exp2","simd_exp_m1","simd_ln_1p","simd_ln","simd_log","simd_log2","simd_log10","simd_cbrt","simd_hypot","simd_sin","simd_cos","simd_tan","simd_asin","simd_acos","simd_atan","simd_sin_cos","simd_sinh","simd_cosh","simd_tanh","simd_asinh","simd_acosh","simd_atanh","simd_horizontal_sum","simd_horizontal_product","from_simd_real","simd_real","simd_imaginary","simd_norm1","simd_modulus","simd_modulus_squared","simd_argument","simd_to_exp","simd_recip","simd_conjugate","simd_scale","simd_unscale","simd_floor","simd_ceil","simd_round","simd_trunc","simd_fract","simd_abs","simd_signum","simd_mul_add","simd_powi","simd_powf","simd_powc","simd_sqrt","simd_exp","simd_exp2","simd_exp_m1","simd_ln_1p","simd_ln","simd_log","simd_log2","simd_log10","simd_cbrt","simd_hypot","simd_sin","simd_cos","simd_tan","simd_asin","simd_acos","simd_atan","simd_sin_cos","simd_sinh","simd_cosh","simd_tanh","simd_asinh","simd_acosh","simd_atanh","simd_horizontal_sum","simd_horizontal_product","from_simd_real","simd_real","simd_imaginary","simd_norm1","simd_modulus","simd_modulus_squared","simd_argument","simd_to_exp","simd_recip","simd_conjugate","simd_scale","simd_unscale","simd_floor","simd_ceil","simd_round","simd_trunc","simd_fract","simd_abs","simd_signum","simd_mul_add","simd_powi","simd_powf","simd_powc","simd_sqrt","simd_exp","simd_exp2","simd_exp_m1","simd_ln_1p","simd_ln","simd_log","simd_log2","simd_log10","simd_cbrt","simd_hypot","simd_sin","simd_cos","simd_tan","simd_asin","simd_acos","simd_atan","simd_sin_cos","simd_sinh","simd_cosh","simd_tanh","simd_asinh","simd_acosh","simd_atanh","simd_horizontal_sum","simd_horizontal_product","from_simd_real","simd_real","simd_imaginary","simd_norm1","simd_modulus","simd_modulus_squared","simd_argument","simd_to_exp","simd_recip","simd_conjugate","simd_scale","simd_unscale","simd_floor","simd_ceil","simd_round","simd_trunc","simd_fract","simd_abs","simd_signum","simd_mul_add","simd_powi","simd_powf","simd_powc","simd_sqrt","simd_exp","simd_exp2","simd_exp_m1","simd_ln_1p","simd_ln","simd_log","simd_log2","simd_log10","simd_cbrt","simd_hypot","simd_sin","simd_cos","simd_tan","simd_asin","simd_acos","simd_atan","simd_sin_cos","simd_sinh","simd_cosh","simd_tanh","simd_asinh","simd_acosh","simd_atanh","simd_horizontal_sum","simd_horizontal_product","from_simd_real","simd_real","simd_imaginary","simd_norm1","simd_modulus","simd_modulus_squared","simd_argument","simd_to_exp","simd_recip","simd_conjugate","simd_scale","simd_unscale","simd_floor","simd_ceil","simd_round","simd_trunc","simd_fract","simd_abs","simd_signum","simd_mul_add","simd_powi","simd_powf","simd_powc","simd_sqrt","simd_exp","simd_exp2","simd_exp_m1","simd_ln_1p","simd_ln","simd_log","simd_log2","simd_log10","simd_cbrt","simd_hypot","simd_sin","simd_cos","simd_tan","simd_asin","simd_acos","simd_atan","simd_sin_cos","simd_sinh","simd_cosh","simd_tanh","simd_asinh","simd_acosh","simd_atanh","simd_horizontal_sum","simd_horizontal_product","from_simd_real","simd_real","simd_imaginary","simd_norm1","simd_modulus","simd_modulus_squared","simd_argument","simd_to_exp","simd_recip","simd_conjugate","simd_scale","simd_unscale","simd_floor","simd_ceil","simd_round","simd_trunc","simd_fract","simd_abs","simd_signum","simd_mul_add","simd_powi","simd_powf","simd_powc","simd_sqrt","simd_exp","simd_exp2","simd_exp_m1","simd_ln_1p","simd_ln","simd_log","simd_log2","simd_log10","simd_cbrt","simd_hypot","simd_sin","simd_cos","simd_tan","simd_asin","simd_acos","simd_atan","simd_sin_cos","simd_sinh","simd_cosh","simd_tanh","simd_asinh","simd_acosh","simd_atanh","simd_horizontal_sum","simd_horizontal_product","from_simd_real","simd_real","simd_imaginary","simd_norm1","simd_modulus","simd_modulus_squared","simd_argument","simd_to_exp","simd_recip","simd_conjugate","simd_scale","simd_unscale","simd_floor","simd_ceil","simd_round","simd_trunc","simd_fract","simd_abs","simd_signum","simd_mul_add","simd_powi","simd_powf","simd_powc","simd_sqrt","simd_exp","simd_exp2","simd_exp_m1","simd_ln_1p","simd_ln","simd_log","simd_log2","simd_log10","simd_cbrt","simd_hypot","simd_sin","simd_cos","simd_tan","simd_asin","simd_acos","simd_atan","simd_sin_cos","simd_sinh","simd_cosh","simd_tanh","simd_asinh","simd_acosh","simd_atanh","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_gt","simd_lt","simd_ge","simd_le","simd_eq","simd_ne","simd_max","simd_min","simd_clamp","simd_horizontal_min","simd_horizontal_max","simd_atan2","simd_copysign","simd_default_epsilon","simd_pi","simd_two_pi","simd_frac_pi_2","simd_frac_pi_3","simd_frac_pi_4","simd_frac_pi_6","simd_frac_pi_8","simd_frac_1_pi","simd_frac_2_pi","simd_frac_2_sqrt_pi","simd_e","simd_log2_e","simd_log10_e","simd_ln_2","simd_ln_10","simd_atan2","simd_copysign","simd_default_epsilon","simd_pi","simd_two_pi","simd_frac_pi_2","simd_frac_pi_3","simd_frac_pi_4","simd_frac_pi_6","simd_frac_pi_8","simd_frac_1_pi","simd_frac_2_pi","simd_frac_2_sqrt_pi","simd_e","simd_log2_e","simd_log10_e","simd_ln_2","simd_ln_10","simd_atan2","simd_copysign","simd_default_epsilon","simd_pi","simd_two_pi","simd_frac_pi_2","simd_frac_pi_3","simd_frac_pi_4","simd_frac_pi_6","simd_frac_pi_8","simd_frac_1_pi","simd_frac_2_pi","simd_frac_2_sqrt_pi","simd_e","simd_log2_e","simd_log10_e","simd_ln_2","simd_ln_10","simd_atan2","simd_copysign","simd_default_epsilon","simd_pi","simd_two_pi","simd_frac_pi_2","simd_frac_pi_3","simd_frac_pi_4","simd_frac_pi_6","simd_frac_pi_8","simd_frac_1_pi","simd_frac_2_pi","simd_frac_2_sqrt_pi","simd_e","simd_log2_e","simd_log10_e","simd_ln_2","simd_ln_10","simd_atan2","simd_copysign","simd_default_epsilon","simd_pi","simd_two_pi","simd_frac_pi_2","simd_frac_pi_3","simd_frac_pi_4","simd_frac_pi_6","simd_frac_pi_8","simd_frac_1_pi","simd_frac_2_pi","simd_frac_2_sqrt_pi","simd_e","simd_log2_e","simd_log10_e","simd_ln_2","simd_ln_10","simd_atan2","simd_copysign","simd_default_epsilon","simd_pi","simd_two_pi","simd_frac_pi_2","simd_frac_pi_3","simd_frac_pi_4","simd_frac_pi_6","simd_frac_pi_8","simd_frac_1_pi","simd_frac_2_pi","simd_frac_2_sqrt_pi","simd_e","simd_log2_e","simd_log10_e","simd_ln_2","simd_ln_10","simd_atan2","simd_copysign","simd_default_epsilon","simd_pi","simd_two_pi","simd_frac_pi_2","simd_frac_pi_3","simd_frac_pi_4","simd_frac_pi_6","simd_frac_pi_8","simd_frac_1_pi","simd_frac_2_pi","simd_frac_2_sqrt_pi","simd_e","simd_log2_e","simd_log10_e","simd_ln_2","simd_ln_10","simd_abs","simd_abs_sub","simd_signum","is_simd_positive","is_simd_negative","simd_abs","simd_abs_sub","simd_signum","is_simd_positive","is_simd_negative","simd_abs","simd_abs_sub","simd_signum","is_simd_positive","is_simd_negative","simd_abs","simd_abs_sub","simd_signum","is_simd_positive","is_simd_negative","simd_abs","simd_abs_sub","simd_signum","is_simd_positive","is_simd_negative","simd_abs","simd_abs_sub","simd_signum","is_simd_positive","is_simd_negative","simd_abs","simd_abs_sub","simd_signum","is_simd_positive","is_simd_negative","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","lanes","splat","extract","extract_unchecked","replace","replace_unchecked","select","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","clone","clone","eq","ne","eq","ne","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","not","not","not","not","not","not","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_i64","from_u64","from_isize","from_i8","from_i16","from_i32","from_usize","from_u8","from_u16","from_u32","from_f32","from_f64","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","zero","is_zero","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","to_polar","to_exp","signum","sinh_cosh","sinc","sinhc","cosc","coshc","from_superset","to_subset","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","simd_to_polar","simd_to_exp","simd_signum","simd_sinh_cosh","simd_sinc","simd_sinhc","simd_cosc","simd_coshc","new","mask","value","option","simd_unwrap","simd_unwrap_or","map_lanes","zip_map_lanes"],"q":["simba","simba::scalar","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","simba","simba::simdsimba::scalar","","","","","","","","","","simba::simd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Traits implemented by scalar, non-SIMD, types.","Trait shared by all complex fields and its subfields …","","Builds a pure-real complex number from the given value.","The real part of this complex number.","The imaginary part of this complex number.","The modulus of this complex number.","The squared modulus of this complex number.","The argument of this complex number.","The sum of the absolute value of this complex number’s …","Multiplies this complex number by <code>factor</code>.","Divides this complex number by <code>factor</code>.","The polar form of this complex number: (modulus, arg)","The exponential form of this complex number: (modulus, …","The exponential part of this complex number: …","","","","","","","The absolute value of this complex number: …","Computes (self.conjugate() * self + other.conjugate() * …","","","","","","","","","","","","","","","","","Cardinal sine","","Cardinal cos","","","","","","","","","","","","","","","","","Trait <strong>alias</strong> for <code>Add</code> and <code>AddAssign</code> with result of type <code>Self</code>…","Trait <strong>alias</strong> for <code>Div</code> and <code>DivAssign</code> with result of type <code>Self</code>…","Trait <strong>alias</strong> for <code>Mul</code> and <code>MulAssign</code> with result of type <code>Self</code>…","Trait <strong>alias</strong> for <code>Neg</code> with result of type <code>Self</code>.","Trait <strong>alias</strong> for <code>Sub</code> and <code>SubAssign</code> with result of type <code>Self</code>…","Trait implemented by fields, i.e., complex numbers and …","Trait shared by all reals.","Is the sign of this real number positive?","Is the sign of this real number negative?","Copies the sign of <code>self</code> to <code>to</code>.","","","","","","","","","","","","","","","","","","","","Nested sets and conversions between them (using an …","The inclusion map: converts <code>self</code> to the equivalent …","The inverse inclusion map: attempts to construct <code>self</code> …","Use with care! Same as <code>self.to_superset</code> but without any …","Checks if <code>element</code> is actually part of the subset <code>Self</code> …","Nested sets and conversions between them. Useful to work …","The inverse inclusion map: attempts to construct <code>self</code> …","Checks if <code>self</code> is actually part of its subset <code>T</code> (and can …","Use with care! Same as <code>self.to_subset</code> but without any …","The inclusion map: converts <code>self</code> to the equivalent …","Traits implemented by SIMD types and non-SIMD types.","An Simd structure that implements all the relevant traits …","","An Simd boolean structure that implements all the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lane-wise generalization of <code>bool</code> for SIMD booleans.","A bit mask representing the boolean state of each lanes …","Lane-wise bitwise and of the vector elements.","Lane-wise bitwise or of the vector elements.","Lane-wise bitwise xor of the vector elements.","Are all vector lanes true?","Is any vector lane true?","Are all vector lanes false?","Merges the value of <code>if_value()</code> and <code>else_value()</code> depending …","Merges the value of <code>if_value()</code> and <code>else_if.1()</code> and …","Merges the value of <code>if_value()</code> and <code>else_if.1()</code> and …","Lane-wise generalisation of <code>ComplexField</code> for SIMD …","Type of the coefficients of a complex number.","Builds a pure-real complex number from the given value.","The real part of this complex number.","The imaginary part of this complex number.","The modulus of this complex number.","The squared modulus of this complex number.","The argument of this complex number.","The sum of the absolute value of this complex number’s …","Multiplies this complex number by <code>factor</code>.","Divides this complex number by <code>factor</code>.","The polar form of this complex number: (modulus, arg)","The exponential form of this complex number: (modulus, …","The exponential part of this complex number: …","","","","","","","The absolute value of this complex number: …","Computes (self.conjugate() * self + other.conjugate() * …","","","","","","","","","","","","","","","","","Cardinal sine","","Cardinal cos","","","","","","","","","","","","","","","Computes the sum of all the lanes of <code>self</code>.","Computes the product of all the lanes of <code>self</code>.","Generalization of Option for SIMD computation.","Lane-wise generalization of the standard <code>PartialOrd</code> for …","Lanewise <em>greater than</em> <code>></code> comparison.","Lanewise <em>less than</em> <code><</code> comparison.","Lanewise <em>greater or equal</em> <code>>=</code> comparison.","Lanewise <em>less or equal</em> <code><=</code> comparison.","Lanewise <em>equal</em> <code>==</code> comparison.","Lanewise <em>not equal</em> <code>!=</code> comparison.","Lanewise max value.","Lanewise min value.","Clamps each lane of <code>self</code> between the corresponding lane …","The min value among all lanes of <code>self</code>.","The max value among all lanes of <code>self</code>.","Lanewise generalization of <code>RealField</code> for SIMD reals.","Copies the sign of <code>sign</code> to <code>self</code>.","","","","","","","","","","","","","","","","","","A lane-wise generalization of <code>num::Signed</code> for SIMD values.","The absolute value of each lane of <code>self</code>.","The absolute difference of each lane of <code>self</code>.","The signum of each lane of <code>Self</code>.","Tests which lane is positive.","Tests which lane is negative.","Marker trait implemented by SIMD and non-SIMD primitive …","Base trait for every SIMD types.","The type of the elements of each lane of this SIMD value.","Type of the result of comparing two SIMD values like <code>self</code>.","The number of lanes of this SIMD value.","Initializes an SIMD value with each lanes set to <code>val</code>.","Extracts the i-th lane of <code>self</code>.","Extracts the i-th lane of <code>self</code> without bound-checking.","Replaces the i-th lane of <code>self</code> by <code>val</code>.","Replaces the i-th lane of <code>self</code> by <code>val</code> without …","Merges <code>self</code> and <code>other</code> depending on the lanes of <code>cond</code>.","Applies a function to each lane of <code>self</code>.","Applies a function to each lane of <code>self</code> paired with the …he polar form of this complex number: (modulus, arg)","The exponential form of this complex number: (modulus, …","The exponential part of this complex number: …","","Cardinal sine","","Cardinal cos","","The inverse inclusion map: attempts to construct <code>self</code> …","The inverse inclusion map: attempts to construct <code>self</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The polar form of this complex number: (modulus, arg)","The exponential form of this complex number: (modulus, …","The exponential part of this complex number: …","","Cardinal sine","","Cardinal cos","","Creates a new SIMD option by combining a value and a mask …","Return the underlying SIMD boolean mask.","Return the underlying unfiltered value.","Converts this SIMD option to a strandard Option.","Retrieve the underlying value if all the bits of <code>self.mask</code>…","Merges the value of <code>self</code> with the value of <code>other</code>.","Applies a function to each lane of <code>self</code>.","Applies a function to each lane of <code>self</code> paired with the …"],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,0,4,4,4,4,0,0,5,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,11,11,11,11,11,0,0,12,12,12,12,12,12,12,12,12,12,12,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,13,13,13,13,13,13,13,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,6,6,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,8,8,8,8,8,8,8,13,13,13,13,13,13,12,12],"f":[null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[],["bool",15]],[[],["option",4]],null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[],["option",4]],[[]],[[],["bool",15]],null,[[],["option",4]],[[],["bool",15]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u64",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["bool",15]],[[],["u64",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["u64",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["u64",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["u64",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["u64",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["u64",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[],["simdvalue",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["iusize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["autosimd",3]],[[],["autoboolsimd",3]],[[["autosimd",3]],["bool",15]],[[["autosimd",3]],["bool",15]],[[["autoboolsimd",3]],["bool",15]],[[["autoboolsimd",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["resulti64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i64",15]],["option",4]],[[["u64",15]],["option",4]],[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f32",15]]],[[["f64",15]]],[[["f64",15]]],[[["f64",15]]],[[["i128",15]]],[[["i128",15]]],[[["i128",15]]],[[["i16",15]]],[[["i16",15]]],[[["i16",15]]],[[["i16",15]]],[[["i16",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i64",15]]],[[["i64",15]]],[[["i64",15]]],[[["i8",15]]],[[["i8",15]]],[[["i8",15]]],[[["i8",15]]],[[["i8",15]]],[[["isize",15]]],[[["isize",15]]],[[["isize",15]]],[[["u128",15]]],[[["u128",15]]],[[["u128",15]]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],[[["u8",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]]],"p":[[8,"ComplexField"],[8,"RealField"],[8,"SubsetOf"],[8,"SupersetOf"],[3,"AutoSimd"],[3,"AutoBoolSimd"],[8,"SimdBool"],[8,"SimdComplexField"],[8,"SimdPartialOrd"],[8,"SimdRealField"],[8,"SimdSigned"],[8,"SimdValue"],[3,"SimdOption"]]},\
"siphasher":{"doc":"","t":[0,3,3,3,11,11,11,11,11,11,11,11,11,0,3,12,12,3,3,3,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["sip","SipHasher13","SipHasher24","SipHasher","new","new_with_keys","keys","new","new_with_keys","keys","new","new_with_keys","keys","sip128","Hash128","h1","h2","SipHasher13","SipHasher24","SipHasher","Hasher128","finish128","new","new_with_keys","keys","new","new_with_keys","keys","new","new_with_keys","keys","as_bytes","as_u128","as_u64","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","finish128","finish128","finish128","fmt","fmt","fmt","fmt","fmt","fmt","fmt","write","finish","write","finish","write","finish","write","finish","write","finish","write","finish","from","into","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default"],"q":["siphasher","siphasher::sip","","","","","","","","","","","","siphasher","siphasher::sip128","","","","","","","","","","","","","","","","","","","","siphasher::sip","","","","","","","","","","","","","","","","","","","","","siphasher::sip128","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","siphasher::sip","","","siphasher::sip128","","","","siphasher::sip","","","","","","siphasher::sip128","","","","","","","","siphasher::sip","","","siphasher::sip128","","","","siphasher::sip","","","siphasher::sip128","","",""],"d":["An implementation of SipHash.","An implementation of SipHash 1-3.","An implementation of SipHash 2-4.","An implementation of SipHash 2-4.","Creates a new <code>SipHasher</code> with the two initial keys set to …","Creates a <code>SipHasher</code> that is keyed off the provided keys.","Get the keys used by this hasher","Creates a new <code>SipHasher13</code> with the two initial keys set …","Creates a <code>SipHasher13</code> that is keyed off the provided keys.","Get the keys used by this hasher","Creates a new <code>SipHasher24</code> with the two initial keys set …","Creates a <code>SipHasher24</code> that is keyed off the provided keys.","Get the keys used by this hasher","An implementation of SipHash with a 128-bit output.","A 128-bit (2x64) hash output","","","An implementation of SipHash128 1-3.","An implementation of SipHash128 2-4.","An implementation of SipHash128 2-4.","","Return a 128-bit hash","Creates a new <code>SipHasher</code> with the two initial keys set to …","Creates a <code>SipHasher</code> that is keyed off the provided keys.","Get the keys used by this hasher","Creates a new <code>SipHasher13</code> with the two initial keys set …","Creates a <code>SipHasher13</code> that is keyed off the provided keys.","Get the keys used by this hasher","Creates a new <code>SipHasher24</code> with the two initial keys set …","Creates a <code>SipHasher24</code> that is keyed off the provided keys.","Get the keys used by this hasher","Convert into a 16-bytes vector","Convert into a <code>u128</code>","Convert into <code>(u64, u64)</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a 128-bit hash","Return a 128-bit hash","Return a 128-bit hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,1,2,2,2,3,3,3,0,0,4,4,0,0,0,0,5,6,6,6,7,7,7,8,8,8,4,4,4,2,2,2,2,2,2,2,3,3,3,3,3,3,3,1,1,1,1,1,1,1,4,4,4,4,4,4,4,7,7,7,7,7,7,7,8,8,8,8,8,8,8,6,6,6,6,6,6,6,6,7,8,2,3,1,4,7,8,6,1,1,2,2,3,3,6,6,7,7,8,8,4,4,2,3,1,4,7,8,6,2,3,1,4,7,8,6],"f":[null,null,null,null,[[],["siphasher",3]],[[["u64",15]],["siphasher",3]],[[]],[[],["siphasher13",3]],[[["u64",15]],["siphasher13",3]],[[]],[[],["siphasher24",3]],[[["u64",15]],["siphasher24",3]],[[]],null,null,null,null,null,null,null,null,[[],["hash128",3]],[[],["siphasher",3]],[[["u64",15]],["siphasher",3]],[[]],[[],["siphasher13",3]],[[["u64",15]],["siphasher13",3]],[[]],[[],["siphasher24",3]],[[["u64",15]],["siphasher24",3]],[[]],[[]],[[],["u128",15]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["hash128",3]],[[],["hash128",3]],[[],["hash128",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["u64",15]],[[]],[[],["u64",15]],[[]],[[],["u64",15]],[[]],[[],["u64",15]],[[]],[[],["u64",15]],[[]],[[],["u64",15]],[[["u128",15]]],[[],["u128",15]],[[],["siphasher13",3]],[[],["siphasher24",3]],[[],["siphasher",3]],[[],["hash128",3]],[[],["siphasher13",3]],[[],["siphasher24",3]],[[],["siphasher",3]],[[],["siphasher13",3]],[[],["siphasher24",3]],[[],["siphasher",3]],[[],["hash128",3]],[[],["siphasher13",3]],[[],["siphasher24",3]],[[],["siphasher",3]]],"p":[[3,"SipHasher"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"Hash128"],[8,"Hasher128"],[3,"SipHasher"],[3,"SipHasher13"],[3,"SipHasher24"]]},\
"slice_of_array":{"doc":"Extension traits for viewing a slice as a slice of arrays …","t":[0,8,16,18,8,10,10,8,10,10,8,10,10,11],"n":["prelude","IsSliceomorphic","Element","LEN","SliceFlatExt","flat","flat_mut","SliceNestExt","nest","nest_mut","SliceArrayExt","as_array","as_mut_array","to_array"],"q":["slice_of_array","","","","","","","","","","","","",""],"d":["This module contains extension traits from <code>slice_of_array</code>.","Marker trait used in bounds of <code>Slice{Flat,Nest,Array}Ext</code>.","","","Permits viewing a slice of arrays as a flat slice.","View <code>&[[T; n]]</code> as <code>&[T]</code>.","View <code>&mut [[T; n]]</code> as <code>&mut [T]</code>","Permits viewing a slice as a slice of arrays.","View <code>&[T]</code> as <code>&[[T; n]]</code> without copying.","View <code>&mut [T]</code> as <code>&mut [[T; n]]</code> without copying.","Permits viewing a slice as an array.","View <code>&[T]</code> as <code>&[T; n]</code>.","View <code>&mut [T]</code> as <code>&mut [T; n]</code>.","Clone <code>&[T]</code> to <code>[T; n]</code>."],"i":[0,0,1,1,0,2,2,0,3,3,0,4,4,4],"f":[null,null,null,null,null,[[]],[[]],null,[[]],[[]],null,[[]],[[]],[[],["issliceomorphic",8]]],"p":[[8,"IsSliceomorphic"],[8,"SliceFlatExt"],[8,"SliceNestExt"],[8,"SliceArrayExt"]]},\
"syn":{"doc":"github crates-io docs-rs","tn":["token","Token","Underscore","spans","Abstract","span","As","span","Async","span","Auto","span","Await","span","Become","span","Box","span","Break","span","Const","span","Continue","span","Crate","span","Default","span","Do","span","Dyn","span","Else","span","Enum","span","Extern","span","Final","span","Fn","span","For","span","If","span","Impl","span","In","span","Let","span","Loop","span","Macro","span","Match","span","Mod","span","Move","span","Mut","span","Override","span","Priv","span","Pub","span","Ref","span","Return","span","SelfType","span","SelfValue","span","Static","span","Struct","span","Super","span","Trait","span","Try","span","Type","span","Typeof","span","Union","span","Unsafe","span","Unsized","span","Use","span","Virtual","span","Where","span","While","span","Yield","span","Add","spans","AddEq","spans","And","spans","AndAnd","spans","AndEq","spans","At","spans","Bang","spans","Caret","spans","CaretEq","spans","Colon","spans","Colon2","spans","Comma","spans","Div","spans","DivEq","spans","Dollar","spans","Dot","spans","Dot2","spans","Dot3","spans","DotDotEq","spans","Eq","spans","EqEq","spans","Ge","spans","Gt","spans","Le","spans","Lt","spans","MulEq","spans","Ne","spans","Or","spans","OrEq","spans","OrOr","spans","Pound","spans","Question","spans","RArrow","spans","LArrow","spans","Rem","spans","RemEq","spans","FatArrow","spans","Semi","spans","Shl","spans","ShlEq","spans","Shr","spans","ShrEq","spans","Star","spans","Sub","spans","SubEq","spans","Tilde","spans","Brace","span","surround","Bracket","span","surround","Paren","span","surround","Group","span","surround","buffer","TokenBuffer","new","new2","begin","Cursor","empty","eof","group","ident","punct","literal","lifetime","token_stream","token_tree","span","ext","IdentExt","parse_any","peek_any","unraw","punctuated","Punctuated","new","is_empty","len","first","first_mut","last","last_mut","iter","iter_mut","pairs","pairs_mut","into_pairs","push_value","push_punct","pop","trailing_punct","empty_or_trailing","push","insert","clear","parse_terminated","parse_terminated_with","parse_separated_nonempty","parse_separated_nonempty_with","Pairs","PairsMut","IntoPairs","IntoIter","Iter","IterMut","Pair","Punctuated","End","into_value","value","value_mut","punct","new","into_tuple","spanned","Spanned","span","visit","Visit","visit_abi","visit_angle_bracketed_generic_arguments","visit_arm","visit_attr_style","visit_attribute","visit_bare_fn_arg","visit_bin_op","visit_binding","visit_block","visit_bound_lifetimes","visit_const_param","visit_constraint","visit_data","visit_data_enum","visit_data_struct","visit_data_union","visit_derive_input","visit_expr","visit_expr_array","visit_expr_assign","visit_expr_assign_op","visit_expr_async","visit_expr_await","visit_expr_binary","visit_expr_block","visit_expr_box","visit_expr_break","visit_expr_call","visit_expr_cast","visit_expr_closure","visit_expr_continue","visit_expr_field","visit_expr_for_loop","visit_expr_group","visit_expr_if","visit_expr_index","visit_expr_let","visit_expr_lit","visit_expr_loop","visit_expr_macro","visit_expr_match","visit_expr_method_call","visit_expr_paren","visit_expr_path","visit_expr_range","visit_expr_reference","visit_expr_repeat","visit_expr_return","visit_expr_struct","visit_expr_try","visit_expr_try_block","visit_expr_tuple","visit_expr_type","visit_expr_unary","visit_expr_unsafe","visit_expr_while","visit_expr_yield","visit_field","visit_field_pat","visit_field_value","visit_fields","visit_fields_named","visit_fields_unnamed","visit_file","visit_fn_arg","visit_foreign_item","visit_foreign_item_fn","visit_foreign_item_macro","visit_foreign_item_static","visit_foreign_item_type","visit_generic_argument","visit_generic_method_argument","visit_generic_param","visit_generics","visit_ident","visit_impl_item","visit_impl_item_const","visit_impl_item_macro","visit_impl_item_method","visit_impl_item_type","visit_index","visit_item","visit_item_const","visit_item_enum","visit_item_extern_crate","visit_item_fn","visit_item_foreign_mod","visit_item_impl","visit_item_macro","visit_item_macro2","visit_item_mod","visit_item_static","visit_item_struct","visit_item_trait","visit_item_trait_alias","visit_item_type","visit_item_union","visit_item_use","visit_label","visit_lifetime","visit_lifetime_def","visit_lit","visit_lit_bool","visit_lit_byte","visit_lit_byte_str","visit_lit_char","visit_lit_float","visit_lit_int","visit_lit_str","visit_local","visit_macro","visit_macro_delimiter","visit_member","visit_meta","visit_meta_list","visit_meta_name_value","visit_method_turbofish","visit_nested_meta","visit_parenthesized_generic_arguments","visit_pat","visit_pat_box","visit_pat_ident","visit_pat_lit","visit_pat_macro","visit_pat_or","visit_pat_path","visit_pat_range","visit_pat_reference","visit_pat_rest","visit_pat_slice","visit_pat_struct","visit_pat_tuple","visit_pat_tuple_struct","visit_pat_type","visit_pat_wild","visit_path","visit_path_arguments","visit_path_segment","visit_predicate_eq","visit_predicate_lifetime","visit_predicate_type","visit_qself","visit_range_limits","visit_receiver","visit_return_type","visit_signature","visit_span","visit_stmt","visit_trait_bound","visit_trait_bound_modifier","visit_trait_item","visit_trait_item_const","visit_trait_item_macro","visit_trait_item_method","visit_trait_item_type","visit_type","visit_type_array","visit_type_bare_fn","visit_type_group","visit_type_impl_trait","visit_type_infer","visit_type_macro","visit_type_never","visit_type_param","visit_type_param_bound","visit_type_paren","visit_type_path","visit_type_ptr","visit_type_reference","visit_type_slice","visit_type_trait_object","visit_type_tuple","visit_un_op","visit_use_glob","visit_use_group","visit_use_name","visit_use_path","visit_use_rename","visit_use_tree","visit_variadic","visit_variant","visit_vis_crate","visit_vis_public","visit_vis_restricted","visit_visibility","visit_where_clause","visit_where_predicate","visit_abi","visit_angle_bracketed_generic_arguments","visit_arm","visit_attr_style","visit_attribute","visit_bare_fn_arg","visit_bin_op","visit_binding","visit_block","visit_bound_lifetimes","visit_const_param","visit_constraint","visit_data","visit_data_enum","visit_data_struct","visit_data_union","visit_derive_input","visit_expr","visit_expr_array","visit_expr_assign","visit_expr_assign_op","visit_expr_async","visit_expr_await","visit_expr_binary","visit_expr_block","visit_expr_box","visit_expr_break","visit_expr_call","visit_expr_cast","visit_expr_closure","visit_expr_continue","visit_expr_field","visit_expr_for_loop","visit_expr_group","visit_expr_if","visit_expr_index","visit_expr_let","visit_expr_lit","visit_expr_loop","visit_expr_macro","visit_expr_match","visit_expr_method_call","visit_expr_paren","visit_expr_path","visit_expr_range","visit_expr_reference","visit_expr_repeat","visit_expr_return","visit_expr_struct","visit_expr_try","visit_expr_try_block","visit_expr_tuple","visit_expr_type","visit_expr_unary","visit_expr_unsafe","visit_expr_while","visit_expr_yield","visit_field","visit_field_pat","visit_field_value","visit_fields","visit_fields_named","visit_fields_unnamed","visit_file","visit_fn_arg","visit_foreign_item","visit_foreign_item_fn","visit_foreign_item_macro","visit_foreign_item_static","visit_foreign_item_type","visit_generic_argument","visit_generic_method_argument","visit_generic_param","visit_generics","visit_ident","visit_impl_item","visit_impl_item_const","visit_impl_item_macro","visit_impl_item_method","visit_impl_item_type","visit_index","visit_item","visit_item_const","visit_item_enum","visit_item_extern_crate","visit_item_fn","visit_item_foreign_mod","visit_item_impl","visit_item_macro","visit_item_macro2","visit_item_mod","visit_item_static","visit_item_struct","visit_item_trait","visit_item_trait_alias","visit_item_type","visit_item_union","visit_item_use","visit_label","visit_lifetime","visit_lifetime_def","visit_lit","visit_lit_bool","visit_lit_byte","visit_lit_byte_str","visit_lit_char","visit_lit_float","visit_lit_int","visit_lit_str","visit_local","visit_macro","visit_macro_delimiter","visit_member","visit_meta","visit_meta_list","visit_meta_name_value","visit_method_turbofish","visit_nested_meta","visit_parenthesized_generic_arguments","visit_pat","visit_pat_box","visit_pat_ident","visit_pat_lit","visit_pat_macro","visit_pat_or","visit_pat_path","visit_pat_range","visit_pat_reference","visit_pat_rest","visit_pat_slice","visit_pat_struct","visit_pat_tuple","visit_pat_tuple_struct","visit_pat_type","visit_pat_wild","visit_path","visit_path_arguments","visit_path_segment","visit_predicate_eq","visit_predicate_lifetime","visit_predicate_type","visit_qself","visit_range_limits","visit_receiver","visit_return_type","visit_signature","visit_span","visit_stmt","visit_trait_bound","visit_trait_bound_modifier","visit_trait_item","visit_trait_item_const","visit_trait_item_macro","visit_trait_item_method","visit_trait_item_type","visit_type","visit_type_array","visit_type_bare_fn","visit_type_group","visit_type_impl_trait","visit_type_infer","visit_type_macro","visit_type_never","visit_type_param","visit_type_param_bound","visit_type_paren","visit_type_path","visit_type_ptr","visit_type_reference","visit_type_slice","visit_type_trait_object","visit_type_tuple","visit_un_op","visit_use_glob","visit_use_group","visit_use_name","visit_use_path","visit_use_rename","visit_use_tree","visit_variadic","visit_variant","visit_vis_crate","visit_vis_public","visit_vis_restricted","visit_visibility","visit_where_clause","visit_where_predicate","parse","discouraged","Speculative","advance_to","Error","Result","Lookahead1","Peek","Parse","parse","ParseStream","ParseBuffer","StepCursor","error","parse","call","peek","peek2","peek3","parse_terminated","is_empty","lookahead1","fork","error","step","span","cursor","Parser","Output","parse2","parse","parse_str","Nothing","new","new_spanned","span","to_compile_error","into_compile_error","combine","Ident","AttrStyle","Outer","Inner","Attribute","pound_token","style","bracket_token","path","tokens","AttributeArgs","Meta","Path","List","NameValue","MetaList","path","paren_token","nested","MetaNameValue","path","eq_token","lit","NestedMeta","Meta","Lit","Field","attrs","vis","ident","colon_token","ty","Fields","Named","Unnamed","Unit","FieldsNamed","brace_token","named","FieldsUnnamed","paren_token","unnamed","Variant","attrs","ident","fields","discriminant","VisCrate","crate_token","VisPublic","pub_token","VisRestricted","pub_token","paren_token","in_token","path","Visibility","Public","Crate","Restricted","Inherited","Arm","attrs","pat","guard","fat_arrow_token","body","comma","FieldValue","attrs","member","colon_token","expr","GenericMethodArgument","Type","Const","Label","name","colon_token","MethodTurbofish","colon2_token","lt_token","args","gt_token","RangeLimits","HalfOpen","Closed","Expr","Array","Assign","AssignOp","Async","Await","Binary","Block","Box","Break","Call","Cast","Closure","Continue","Field","ForLoop","Group","If","Index","Let","Lit","Loop","Macro","Match","MethodCall","Paren","Path","Range","Reference","Repeat","Return","Struct","Try","TryBlock","Tuple","Type","Unary","Unsafe","Verbatim","While","Yield","ExprArray","attrs","bracket_token","elems","ExprAssign","attrs","left","eq_token","right","ExprAssignOp","attrs","left","op","right","ExprAsync","attrs","async_token","capture","block","ExprAwait","attrs","base","dot_token","await_token","ExprBinary","attrs","left","op","right","ExprBlock","attrs","label","block","ExprBox","attrs","box_token","expr","ExprBreak","attrs","break_token","label","expr","ExprCall","attrs","func","paren_token","args","ExprCast","attrs","expr","as_token","ty","ExprClosure","attrs","asyncness","movability","capture","or1_token","inputs","or2_token","output","body","ExprContinue","attrs","continue_token","label","ExprField","attrs","base","dot_token","member","ExprForLoop","attrs","label","for_token","pat","in_token","expr","body","ExprGroup","attrs","group_token","expr","ExprIf","attrs","if_token","cond","then_branch","else_branch","ExprIndex","attrs","expr","bracket_token","index","ExprLet","attrs","let_token","pat","eq_token","expr","ExprLit","attrs","lit","ExprLoop","attrs","label","loop_token","body","ExprMacro","attrs","mac","ExprMatch","attrs","match_token","expr","brace_token","arms","ExprMethodCall","attrs","receiver","dot_token","method","turbofish","paren_token","args","ExprParen","attrs","paren_token","expr","ExprPath","attrs","qself","path","ExprRange","attrs","from","limits","to","ExprReference","attrs","and_token","raw","mutability","expr","ExprRepeat","attrs","bracket_token","expr","semi_token","len","ExprReturn","attrs","return_token","expr","ExprStruct","attrs","path","brace_token","fields","dot2_token","rest","ExprTry","attrs","expr","question_token","ExprTryBlock","attrs","try_token","block","ExprTuple","attrs","paren_token","elems","ExprType","attrs","expr","colon_token","ty","ExprUnary","attrs","op","expr","ExprUnsafe","attrs","unsafe_token","block","ExprWhile","attrs","label","while_token","cond","body","ExprYield","attrs","yield_token","expr","Index","index","span","Member","Named","Unnamed","BoundLifetimes","for_token","lt_token","lifetimes","gt_token","ConstParam","attrs","const_token","ident","colon_token","ty","eq_token","default","GenericParam","Type","Lifetime","Const","Generics","lt_token","params","gt_token","where_clause","LifetimeDef","attrs","lifetime","colon_token","bounds","PredicateEq","lhs_ty","eq_token","rhs_ty","PredicateLifetime","lifetime","colon_token","bounds","PredicateType","lifetimes","bounded_ty","colon_token","bounds","TraitBound","paren_token","modifier","lifetimes","path","TraitBoundModifier","None","Maybe","TypeParam","attrs","ident","colon_token","bounds","eq_token","default","TypeParamBound","Trait","Lifetime","WhereClause","where_token","predicates","WherePredicate","Type","Lifetime","Eq","ImplGenerics","Turbofish","TypeGenerics","FnArg","Receiver","Typed","ForeignItem","Fn","Static","Type","Macro","Verbatim","ForeignItemFn","attrs","vis","sig","semi_token","ForeignItemMacro","attrs","mac","semi_token","ForeignItemStatic","attrs","vis","static_token","mutability","ident","colon_token","ty","semi_token","ForeignItemType","attrs","vis","type_token","ident","semi_token","ImplItem","Const","Method","Type","Macro","Verbatim","ImplItemConst","attrs","vis","defaultness","const_token","ident","colon_token","ty","eq_token","expr","semi_token","ImplItemMacro","attrs","mac","semi_token","ImplItemMethod","attrs","vis","defaultness","sig","block","ImplItemType","attrs","vis","defaultness","type_token","ident","generics","eq_token","ty","semi_token","Item","Const","Enum","ExternCrate","Fn","ForeignMod","Impl","Macro","Macro2","Mod","Static","Struct","Trait","TraitAlias","Type","Union","Use","Verbatim","ItemConst","attrs","vis","const_token","ident","colon_token","ty","eq_token","expr","semi_token","ItemEnum","attrs","vis","enum_token","ident","generics","brace_token","variants","ItemExternCrate","attrs","vis","extern_token","crate_token","ident","rename","semi_token","ItemFn","attrs","vis","sig","block","ItemForeignMod","attrs","abi","brace_token","items","ItemImpl","attrs","defaultness","unsafety","impl_token","generics","trait_","self_ty","brace_token","items","ItemMacro","attrs","ident","mac","semi_token","ItemMacro2","attrs","vis","macro_token","ident","rules","ItemMod","attrs","vis","mod_token","ident","content","semi","ItemStatic","attrs","vis","static_token","mutability","ident","colon_token","ty","eq_token","expr","semi_token","ItemStruct","attrs","vis","struct_token","ident","generics","fields","semi_token","ItemTrait","attrs","vis","unsafety","auto_token","trait_token","ident","generics","colon_token","supertraits","brace_token","items","ItemTraitAlias","attrs","vis","trait_token","ident","generics","eq_token","bounds","semi_token","ItemType","attrs","vis","type_token","ident","generics","eq_token","ty","semi_token","ItemUnion","attrs","vis","union_token","ident","generics","fields","ItemUse","attrs","vis","use_token","leading_colon","tree","semi_token","Receiver","attrs","reference","mutability","self_token","Signature","constness","asyncness","unsafety","abi","fn_token","ident","generics","paren_token","inputs","variadic","output","TraitItem","Const","Method","Type","Macro","Verbatim","TraitItemConst","attrs","const_token","ident","colon_token","ty","default","semi_token","TraitItemMacro","attrs","mac","semi_token","TraitItemMethod","attrs","sig","default","semi_token","TraitItemType","attrs","type_token","ident","generics","colon_token","bounds","default","semi_token","UseGlob","star_token","UseGroup","brace_token","items","UseName","ident","UsePath","ident","colon2_token","tree","UseRename","ident","as_token","rename","UseTree","Path","Name","Rename","Glob","Group","File","shebang","attrs","items","Lifetime","apostrophe","ident","Lit","Str","ByteStr","Byte","Char","Int","Float","Bool","Verbatim","LitBool","value","span","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","StrStyle","Cooked","Raw","Macro","path","bang_token","delimiter","tokens","MacroDelimiter","Paren","Brace","Bracket","Data","Struct","Enum","Union","DataEnum","enum_token","brace_token","variants","DataStruct","struct_token","fields","semi_token","DataUnion","union_token","fields","DeriveInput","attrs","vis","ident","generics","data","BinOp","Add","Sub","Mul","Div","Rem","And","Or","BitXor","BitAnd","BitOr","Shl","Shr","Eq","Lt","Le","Ne","Ge","Gt","AddEq","SubEq","MulEq","DivEq","RemEq","BitXorEq","BitAndEq","BitOrEq","ShlEq","ShrEq","UnOp","Deref","Not","Neg","Block","brace_token","stmts","Local","attrs","let_token","pat","init","semi_token","Stmt","Local","Item","Expr","Semi","Abi","extern_token","name","BareFnArg","attrs","name","ty","ReturnType","Default","Type","Type","Array","BareFn","Group","ImplTrait","Infer","Macro","Never","Paren","Path","Ptr","Reference","Slice","TraitObject","Tuple","Verbatim","TypeArray","bracket_token","elem","semi_token","len","TypeBareFn","lifetimes","unsafety","abi","fn_token","paren_token","inputs","variadic","output","TypeGroup","group_token","elem","TypeImplTrait","impl_token","bounds","TypeInfer","underscore_token","TypeMacro","mac","TypeNever","bang_token","TypeParen","paren_token","elem","TypePath","qself","path","TypePtr","star_token","const_token","mutability","elem","TypeReference","and_token","lifetime","mutability","elem","TypeSlice","bracket_token","elem","TypeTraitObject","dyn_token","bounds","TypeTuple","paren_token","elems","Variadic","attrs","dots","FieldPat","attrs","member","colon_token","pat","Pat","Box","Ident","Lit","Macro","Or","Path","Range","Reference","Rest","Slice","Struct","Tuple","TupleStruct","Type","Verbatim","Wild","PatBox","attrs","box_token","pat","PatIdent","attrs","by_ref","mutability","ident","subpat","PatLit","attrs","expr","PatMacro","attrs","mac","PatOr","attrs","leading_vert","cases","PatPath","attrs","qself","path","PatRange","attrs","lo","limits","hi","PatReference","attrs","and_token","mutability","pat","PatRest","attrs","dot2_token","PatSlice","attrs","bracket_token","elems","PatStruct","attrs","path","brace_token","fields","dot2_token","PatTuple","attrs","paren_token","elems","PatTupleStruct","attrs","path","pat","PatType","attrs","pat","colon_token","ty","PatWild","attrs","underscore_token","AngleBracketedGenericArguments","colon2_token","lt_token","args","gt_token","Binding","ident","eq_token","ty","Constraint","ident","colon_token","bounds","GenericArgument","Lifetime","Type","Binding","Constraint","Const","ParenthesizedGenericArguments","paren_token","inputs","output","Path","leading_colon","segments","PathArguments","None","AngleBracketed","Parenthesized","PathSegment","ident","arguments","QSelf","lt_token","ty","position","as_token","gt_token","Error","Result","parse","parse2","parse_str","parse_file","parenthesized","braced","bracketed","Token","parse_quote","parse_macro_input","custom_keyword","custom_punctuation","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","span","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","clone","fmt","eq","eq","cmp","hash","fmt","partial_cmp","span","fmt","to_tokens","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","peek","display","parse_any","unraw","advance_to","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","drop","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","next_back","next_back","next_back","next_back","next_back","next_back","len","len","len","len","len","len","extend","extend","extend","into_iter","into_iter","into_iter","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","cmp","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","partial_cmp","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","index","index_mut","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","from_iter","from_iter","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","fmt","span","fmt","span","new","span","set_span","parse_meta","parse_args","parse_args_with","parse_outer","parse_inner","path","parse_named","parse_unnamed","iter","iter_mut","len","is_empty","parse_without_eager_brace","type_params","type_params_mut","lifetimes","lifetimes_mut","const_params","const_params_mut","make_where_clause","split_for_impl","as_turbofish","new","receiver","lifetime","new","span","set_span","new","suffix","span","set_span","new","value","parse","parse_with","span","set_span","suffix","new","value","span","set_span","suffix","new","value","span","set_span","suffix","new","value","span","set_span","suffix","new","base10_digits","base10_parse","suffix","span","set_span","new","base10_digits","base10_parse","suffix","span","set_span","new","value","span","set_span","parse_body","parse_body_with","parse_within","without_plus","without_plus","without_plus","parse_mod_style","is_ident","get_ident","is_empty","visit_abi","visit_angle_bracketed_generic_arguments","visit_arm","visit_attr_style","visit_attribute","visit_bare_fn_arg","visit_bin_op","visit_binding","visit_block","visit_bound_lifetimes","visit_const_param","visit_constraint","visit_data","visit_data_enum","visit_data_struct","visit_data_union","visit_derive_input","visit_expr","visit_expr_array","visit_expr_assign","visit_expr_assign_op","visit_expr_async","visit_expr_await","visit_expr_binary","visit_expr_block","visit_expr_box","visit_expr_break","visit_expr_call","visit_expr_cast","visit_expr_closure","visit_expr_continue","visit_expr_field","visit_expr_for_loop","visit_expr_group","visit_expr_if","visit_expr_index","visit_expr_let","visit_expr_lit","visit_expr_loop","visit_expr_macro","visit_expr_match","visit_expr_method_call","visit_expr_paren","visit_expr_path","visit_expr_range","visit_expr_reference","visit_expr_repeat","visit_expr_return","visit_expr_struct","visit_expr_try","visit_expr_try_block","visit_expr_tuple","visit_expr_type","visit_expr_unary","visit_expr_unsafe","visit_expr_while","visit_expr_yield","visit_field","visit_field_pat","visit_field_value","visit_fields","visit_fields_named","visit_fields_unnamed","visit_file","visit_fn_arg","visit_foreign_item","visit_foreign_item_fn","visit_foreign_item_macro","visit_foreign_item_static","visit_foreign_item_type","visit_generic_argument","visit_generic_method_argument","visit_generic_param","visit_generics","visit_ident","visit_impl_item","visit_impl_item_const","visit_impl_item_macro","visit_impl_item_method","visit_impl_item_type","visit_index","visit_item","visit_item_const","visit_item_enum","visit_item_extern_crate","visit_item_fn","visit_item_foreign_mod","visit_item_impl","visit_item_macro","visit_item_macro2","visit_item_mod","visit_item_static","visit_item_struct","visit_item_trait","visit_item_trait_alias","visit_item_type","visit_item_union","visit_item_use","visit_label","visit_lifetime","visit_lifetime_def","visit_lit","visit_lit_bool","visit_lit_byte","visit_lit_byte_str","visit_lit_char","visit_lit_float","visit_lit_int","visit_lit_str","visit_local","visit_macro","visit_macro_delimiter","visit_member","visit_meta","visit_meta_list","visit_meta_name_value","visit_method_turbofish","visit_nested_meta","visit_parenthesized_generic_arguments","visit_pat","visit_pat_box","visit_pat_ident","visit_pat_lit","visit_pat_macro","visit_pat_or","visit_pat_path","visit_pat_range","visit_pat_reference","visit_pat_rest","visit_pat_slice","visit_pat_struct","visit_pat_tuple","visit_pat_tuple_struct","visit_pat_type","visit_pat_wild","visit_path","visit_path_arguments","visit_path_segment","visit_predicate_eq","visit_predicate_lifetime","visit_predicate_type","visit_qself","visit_range_limits","visit_receiver","visit_return_type","visit_signature","visit_span","visit_stmt","visit_trait_bound","visit_trait_bound_modifier","visit_trait_item","visit_trait_item_const","visit_trait_item_macro","visit_trait_item_method","visit_trait_item_type","visit_type","visit_type_array","visit_type_bare_fn","visit_type_group","visit_type_impl_trait","visit_type_infer","visit_type_macro","visit_type_never","visit_type_param","visit_type_param_bound","visit_type_paren","visit_type_path","visit_type_ptr","visit_type_reference","visit_type_slice","visit_type_trait_object","visit_type_tuple","visit_un_op","visit_use_glob","visit_use_group","visit_use_name","visit_use_path","visit_use_rename","visit_use_tree","visit_variadic","visit_variant","visit_vis_crate","visit_vis_public","visit_vis_restricted","visit_visibility","visit_where_clause","visit_where_predicate","peek","error"],"q":["syn","syn::tokensyn","syn::buffer","","","","","","","","","","","","","","","syn","syn::ext","","","","syn","syn::punctuated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","syn::spanned","","syn","syn::visitsyn","syn::parse","syn::parse::discouraged","","syn::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","synsyn::tokensynsyn::buffer","","","","","","","","","","","","","","","","syn::punctuated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::tokensyn","","","","syn::parse","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse","","syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse","syn::punctuated","","","","","","","","","","","","","","syn::parse","syn","syn::punctuated","syn::parse","syn::punctuated","","","","","","","","","","","","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","","","","","","","","syn::buffer","syn::punctuated","","","","","","synsyn::parse","","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","syn::punctuated","syn","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","","","","","","","","","","syn::buffer","syn::punctuated","syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::token","","","","","","","","","","","","","","","","","","","","","","syn::parse","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","","","","","","","","syn::punctuated","synsyn::parse","","syn","","","syn::parse","","syn::punctuated","","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn","","","","","","","","","","","","syn::punctuated","synsyn::punctuated","","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","synsyn::punctuated","","syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::visitsyn::parse",""],"d":["Tokens representing Rust punctuation, keywords, and …","Marker trait for types that represent single tokens.","<code>_</code>","","<code>abstract</code>","","<code>as</code>","","<code>async</code>","","<code>auto</code>","","<code>await</code>","","<code>become</code>","","<code>box</code>","","<code>break</code>","","<code>const</code>","","<code>continue</code>","","<code>crate</code>","","<code>default</code>","","<code>do</code>","","<code>dyn</code>","","<code>else</code>","","<code>enum</code>","","<code>extern</code>","","<code>final</code>","","<code>fn</code>","","<code>for</code>","","<code>if</code>","","<code>impl</code>","","<code>in</code>","","<code>let</code>","","<code>loop</code>","","<code>macro</code>","","<code>match</code>","","<code>mod</code>","","<code>move</code>","","<code>mut</code>","","<code>override</code>","","<code>priv</code>","","<code>pub</code>","","<code>ref</code>","","<code>return</code>","","<code>Self</code>","","<code>self</code>","","<code>static</code>","","<code>struct</code>","","<code>super</code>","","<code>trait</code>","","<code>try</code>","","<code>type</code>","","<code>typeof</code>","","<code>union</code>","","<code>unsafe</code>","","<code>unsized</code>","","<code>use</code>","","<code>virtual</code>","","<code>where</code>","","<code>while</code>","","<code>yield</code>","","<code>+</code>","","<code>+=</code>","","<code>&</code>","","<code>&&</code>","","<code>&=</code>","","<code>@</code>","","<code>!</code>","","<code>^</code>","","<code>^=</code>","","<code>:</code>","","<code>::</code>","","<code>,</code>","","<code>/</code>","","<code>/=</code>","","<code>$</code>","","<code>.</code>","","<code>..</code>","","<code>...</code>","","<code>..=</code>","","<code>=</code>","","<code>==</code>","","<code>>=</code>","","<code>></code>","","<code><=</code>","","<code><</code>","","<code>*=</code>","","<code>!=</code>","","<code>|</code>","","<code>|=</code>","","<code>||</code>","","<code>#</code>","","<code>?</code>","","<code>-></code>","","<code><-</code>","","<code>%</code>","","<code>%=</code>","","<code>=></code>","","<code>;</code>","","<code><<</code>","","<code><<=</code>","","<code>>></code>","","<code>>>=</code>","","<code>*</code>","","<code>-</code>","","<code>-=</code>","","<code>~</code>","","<code>{...}</code>","","","<code>[...]</code>","","","<code>(...)</code>","","","None-delimited group","","","A stably addressed token buffer supporting efficient …","A buffer that can be efficiently traversed multiple …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a cursor referencing the first token in the …","A cheaply copyable cursor into a <code>TokenBuffer</code>.","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the …","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","If the cursor is pointing at an <code>Punct</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","Copies all remaining tokens visible from this cursor into …","If the cursor is pointing at a <code>TokenTree</code>, returns it …","Returns the <code>Span</code> of the current token, or …","Extension traits to provide parsing methods on foreign …","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of …","A punctuated sequence of syntax tree nodes separated by …","A punctuated sequence of syntax tree nodes of type <code>T</code> …","Creates an empty punctuated sequence.","Determines whether this punctuated sequence is empty, …","Returns the number of syntax tree nodes in this …","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Appends a syntax tree node onto the end of this …","Appends a trailing punctuation onto the end of this …","Removes the last punctuated pair from this sequence, or …","Determines whether this punctuated sequence ends with a …","Returns true if either this <code>Punctuated</code> is empty, or it …","Appends a syntax tree node onto the end of this …","Inserts an element at position <code>index</code>.","Clears the sequence of all values and punctuation, making …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","An iterator over borrowed pairs of type <code>Pair<&T, &P></code>.","An iterator over mutably borrowed pairs of type …","An iterator over owned pairs of type <code>Pair<T, P></code>.","An iterator over owned values of type <code>T</code>.","An iterator over borrowed values of type <code>&T</code>.","An iterator over mutably borrowed values of type <code>&mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","","","Extracts the syntax tree node from this punctuated pair, …","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","Borrows the punctuation from this punctuated pair, unless …","Creates a punctuated pair out of a syntax tree node and …","Produces this punctuated pair as a tuple of syntax tree …","A trait that can provide the <code>Span</code> of the complete …","A trait that can provide the <code>Span</code> of the complete …","Returns a <code>Span</code> covering the complete contents of this …","Syntax tree traversal to walk a shared borrow of a syntax …","Syntax tree traversal to walk a shared borrow of a syntax …arsing interface for parsing a token stream into a …","Extensions to the parsing API with niche applicability.","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","Error returned when a Syn parser cannot parse the input …","The result of a Syn parser.","Support for checking the next token in a stream to decide …","Types that can be parsed by looking at just one token.","Parsing interface implemented by all types that can be …","","Input to a Syn parser function.","Cursor position within a buffered token stream.","Cursor state associated with speculative parsing.","Triggers an error at the current position of the parse …","Parses a syntax tree node of type <code>T</code>, advancing the …","Calls the given parser function to parse a syntax tree …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","Parses zero or more occurrences of <code>T</code> separated by …","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Forks a parse stream so that parsing tokens out of either …","Triggers an error at the current position of the parse …","Speculatively parses tokens from this parse stream, …","Returns the <code>Span</code> of the next token in the parse stream, or…","Provides low-level access to the token representation …","Parser that can parse Rust tokens into a particular …","","Parse a proc-macro2 token stream into the chosen syntax …","Parse tokens of source code into the chosen syntax tree …","Parse a string of Rust code into the chosen syntax tree …","An empty syntax tree node that consumes no tokens when …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","The source location of the error.","Render the error as an invocation of <code>compile_error!</code>.","Render the error as an invocation of <code>compile_error!</code>.","Add another error message to self such that when …","A word of Rust code, which may be a keyword or legal …","Distinguishes between attributes that decorate an item …","","","An attribute like <code>#[repr(transparent)]</code>.","","","","","","Conventional argument type associated with an invocation …","Content of a compile-time structured attribute.","","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A structured list within an attribute, like …","","","","A name-value pair within an attribute, like …","","","","Element of a compile-time attribute list.","A structured meta item, like the <code>Copy</code> in <code>#[derive(Copy)]</code> …","A Rust literal, like the <code>\\\"new_name\\\"</code> in …","A field of a struct or enum variant.","Attributes tagged on the field.","Visibility of the field.","Name of the field, if any.","","Type of the field.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","Unit struct or unit variant such as <code>None</code>.","Named fields of a struct or struct variant such as …","","","Unnamed fields of a tuple struct or tuple variant such as …","","","An enum variant.","Attributes tagged on the variant.","Name of the variant.","Content stored in the variant.","Explicit discriminant: <code>Variant = 1</code>","A crate-level visibility: <code>crate</code>.","","A public visibility level: <code>pub</code>.","","A visibility level restricted to some path: <code>pub(self)</code> or …","","","","","The visibility level of an item: inherited or <code>pub</code> or …","A public visibility level: <code>pub</code>.","A crate-level visibility: <code>crate</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","An inherited visibility, which usually means private.","One arm of a <code>match</code> expression: <code>0...10 => { return true; }</code>.","","","","","","","A field-value pair in a struct literal.","Attributes tagged on the field.","Name or index of the field.","The colon in <code>Struct { x: x }</code>. If written in shorthand like…","Value of the field.","An individual generic argument to a method, like <code>T</code>.","A type argument.","A const expression. Must be inside of a block.","A lifetime labeling a <code>for</code>, <code>while</code>, or <code>loop</code>.","","","The <code>::<></code> explicit type parameters passed to a method call:…","","","","","Limit types of a range, inclusive or exclusive.","Inclusive at the beginning, exclusive at the end.","Inclusive at the beginning and end.","A Rust expression.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A blocked scope: <code>{ ... }</code>.","A box expression: <code>box f</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>\\\"foo\\\"</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(\\\"{}\\\", q)</code>.","A <code>match</code> expression: <code>match n { Some(n) => {}, None => {} }</code>.","A method call expression: <code>x.foo::<T>(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&a</code> or <code>&mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A type ascription expression: <code>foo: f64</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","Tokens in expression position not interpreted by Syn.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","A slice literal expression: <code>[a, b, c, d]</code>.","","","","An assignment expression: <code>a = compute()</code>.","","","","","A compound assignment expression: <code>counter += 1</code>.","","","","","An async block: <code>async { ... }</code>.","","","","","An await expression: <code>fut.await</code>.","","","","","A binary operation: <code>a + b</code>, <code>a * b</code>.","","","","","A blocked scope: <code>{ ... }</code>.","","","","A box expression: <code>box f</code>.","","","","A <code>break</code>, with an optional label to break and an optional …","","","","","A function call expression: <code>invoke(a, b)</code>.","","","","","A cast expression: <code>foo as f64</code>.","","","","","A closure expression: <code>|a, b| a + b</code>.","","","","","","","","","","A <code>continue</code>, with an optional label.","","","","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","","","","","A for loop: <code>for pat in expr { ... }</code>.","","","","","","","","An expression contained within invisible delimiters.","","","","An <code>if</code> expression with an optional <code>else</code> block: …","","","","","","A square bracketed indexing expression: <code>vector[2]</code>.","","","","","A <code>let</code> guard: <code>let Some(x) = opt</code>.","","","","","","A literal in place of an expression: <code>1</code>, <code>\\\"foo\\\"</code>.","","","Conditionless loop: <code>loop { ... }</code>.","","","","","A macro invocation expression: <code>format!(\\\"{}\\\", q)</code>.","","","A <code>match</code> expression: <code>match n { Some(n) => {}, None => {} }</code>.","","","","","","A method call expression: <code>x.foo::<T>(a, b)</code>.","","","","","","","","A parenthesized expression: <code>(a + b)</code>.","","","","A path like <code>std::mem::replace</code> possibly containing generic …","","","","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","","","","","A referencing operation: <code>&a</code> or <code>&mut a</code>.","","","","","","An array literal constructed from one repeated element: …","","","","","","A <code>return</code>, with an optional value to be returned.","","","","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","","","","","","","A try-expression: <code>expr?</code>.","","","","A try block: <code>try { ... }</code>.","","","","A tuple expression: <code>(a, b, c, d)</code>.","","","","A type ascription expression: <code>foo: f64</code>.","","","","","A unary operation: <code>!x</code>, <code>*x</code>.","","","","An unsafe block: <code>unsafe { ... }</code>.","","","","A while loop: <code>while expr { ... }</code>.","","","","","","A yield expression: <code>yield expr</code>.","","","","The index of an unnamed tuple struct field.","","","A struct or tuple struct field accessed in a struct …","A named field like <code>self.x</code>.","An unnamed field like <code>self.0</code>.","A set of bound lifetimes: <code>for<\'a, \'b, \'c></code>.","","","","","A const generic parameter: <code>const LENGTH: usize</code>.","","","","","","","","A generic type parameter, lifetime, or const generic: …","A generic type parameter: <code>T: Into<String></code>.","A lifetime definition: <code>\'a: \'b + \'c + \'d</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","Lifetimes and type parameters attached to a declaration …","","","","","A lifetime definition: <code>\'a: \'b + \'c + \'d</code>.","","","","","An equality predicate in a <code>where</code> clause (unsupported).","","","","A lifetime predicate in a <code>where</code> clause: <code>\'a: \'b + \'c</code>.","","","","A type predicate in a <code>where</code> clause: …","Any lifetimes from a <code>for</code> binding","The type being bounded","","Trait and lifetime bounds (<code>Clone+Send+\'static</code>)","A trait used as a bound on a type parameter.","","","The <code>for<\'a></code> in <code>for<\'a> Foo<&\'a T></code>","The <code>Foo<&\'a T></code> in <code>for<\'a> Foo<&\'a T></code>","A modifier on a trait bound, currently only used for the <code>?</code>…","","","A generic type parameter: <code>T: Into<String></code>.","","","","","","","A trait or lifetime used as a bound on a type parameter.","","","A <code>where</code> clause in a definition: …","","","A single predicate in a <code>where</code> clause: <code>T: Deserialize<\'de></code>.","A type predicate in a <code>where</code> clause: …","A lifetime predicate in a <code>where</code> clause: <code>\'a: \'b + \'c</code>.","An equality predicate in a <code>where</code> clause (unsupported).","Returned by <code>Generics::split_for_impl</code>.","Returned by <code>TypeGenerics::as_turbofish</code>.","Returned by <code>Generics::split_for_impl</code>.","An argument in a function signature: the <code>n: usize</code> in …","The <code>self</code> argument of an associated method, whether taken …","A function argument accepted by pattern and type.","An item within an <code>extern</code> block.","A foreign function in an <code>extern</code> block.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A foreign type in an <code>extern</code> block: <code>type void</code>.","A macro invocation within an extern block.","Tokens in an <code>extern</code> block not interpreted by Syn.","A foreign function in an <code>extern</code> block.","","","","","A macro invocation within an extern block.","","","","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","","","","","","","","","A foreign type in an <code>extern</code> block: <code>type void</code>.","","","","","","An item within an impl block.","An associated constant within an impl block.","A method within an impl block.","An associated type within an impl block.","A macro invocation within an impl block.","Tokens within an impl block not interpreted by Syn.","An associated constant within an impl block.","","","","","","","","","","","A macro invocation within an impl block.","","","","A method within an impl block.","","","","","","An associated type within an impl block.","","","","","","","","","","Things that can appear directly inside of a module or …","A constant item: <code>const MAX: u16 = 65535</code>.","An enum definition: <code>enum Foo<A, B> { A(A), B(B) }</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A free-standing function: …","A block of foreign items: <code>extern \\\"C\\\" { ... }</code>.","An impl block providing trait or associated items: …","A macro invocation, which includes <code>macro_rules!</code> …","A 2.0-style declarative macro introduced by the <code>macro</code> …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A struct definition: <code>struct Foo<A> { x: A }</code>.","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: …","A type alias: …","A union definition: <code>union Foo<A, B> { x: A, y: B }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","Tokens forming an item not interpreted by Syn.","A constant item: <code>const MAX: u16 = 65535</code>.","","","","","","","","","","An enum definition: <code>enum Foo<A, B> { A(A), B(B) }</code>.","","","","","","","","An <code>extern crate</code> item: <code>extern crate serde</code>.","","","","","","","","A free-standing function: …","","","","","A block of foreign items: <code>extern \\\"C\\\" { ... }</code>.","","","","","An impl block providing trait or associated items: …","","","","","","Trait this impl implements.","The Self type of the impl.","","","A macro invocation, which includes <code>macro_rules!</code> …","","The <code>example</code> in <code>macro_rules! example { ... }</code>.","","","A 2.0-style declarative macro introduced by the <code>macro</code> …","","","","","","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","","","","","","","A static item: <code>static BIKE: Shed = Shed(42)</code>.","","","","","","","","","","","A struct definition: <code>struct Foo<A> { x: A }</code>.","","","","","","","","A trait definition: <code>pub trait Iterator { ... }</code>.","","","","","","","","","","","","A trait alias: …","","","","","","","","","A type alias: …","","","","","","","","","A union definition: <code>union Foo<A, B> { x: A, y: B }</code>.","","","","","","","A use declaration: <code>use std::collections::HashMap</code>.","","","","","","","The <code>self</code> argument of an associated method, whether taken …","","","","","A function signature in a trait or implementation: …","","","","","","","","","","","","An item declaration within the definition of a trait.","An associated constant within the definition of a trait.","A trait method within the definition of a trait.","An associated type within the definition of a trait.","A macro invocation within the definition of a trait.","Tokens within the definition of a trait not interpreted …","An associated constant within the definition of a trait.","","","","","","","","A macro invocation within the definition of a trait.","","","","A trait method within the definition of a trait.","","","","","An associated type within the definition of a trait.","","","","","","","","","A glob import in a <code>use</code> item: <code>*</code>.","","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","","","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","","","","An renamed identifier imported by a <code>use</code> item: …","","","","A suffix of an import tree in a <code>use</code> item: <code>Type as Renamed</code> …","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","An renamed identifier imported by a <code>use</code> item: …","A glob import in a <code>use</code> item: <code>*</code>.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","A complete file of Rust source code.","","","","A Rust lifetime: <code>\'a</code>.","","","A Rust literal such as a string or integer or boolean.","A UTF-8 string literal: <code>\\\"foo\\\"</code>.","A byte string literal: <code>b\\\"foo\\\"</code>.","A byte literal: <code>b\'f\'</code>.","A character literal: <code>\'a\'</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A raw token literal not interpreted by Syn.","A boolean literal: <code>true</code> or <code>false</code>.","","","A byte literal: <code>b\'f\'</code>.","A byte string literal: <code>b\\\"foo\\\"</code>.","A character literal: <code>\'a\'</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>\\\"foo\\\"</code>.","The style of a string literal, either plain quoted or a …","An ordinary string like <code>\\\"data\\\"</code>.","A raw string like <code>r##\\\"data\\\"##</code>.","A macro invocation: <code>println!(\\\"{}\\\", mac)</code>.","","","","","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","","","","The storage of a struct, enum or union data structure.","A struct input to a <code>proc_macro_derive</code> macro.","An enum input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","An enum input to a <code>proc_macro_derive</code> macro.","","","","A struct input to a <code>proc_macro_derive</code> macro.","","","","An untagged union input to a <code>proc_macro_derive</code> macro.","","","Data structure sent to a <code>proc_macro_derive</code> macro.","Attributes tagged on the whole struct or enum.","Visibility of the struct or enum.","Name of the struct or enum.","Generics required to complete the definition.","Data within the struct or enum.","A binary operator: <code>+</code>, <code>+=</code>, <code>&</code>.","The <code>+</code> operator (addition)","The <code>-</code> operator (subtraction)","The <code>*</code> operator (multiplication)","The <code>/</code> operator (division)","The <code>%</code> operator (modulus)","The <code>&&</code> operator (logical and)","The <code>||</code> operator (logical or)","The <code>^</code> operator (bitwise xor)","The <code>&</code> operator (bitwise and)","The <code>|</code> operator (bitwise or)","The <code><<</code> operator (shift left)","The <code>>></code> operator (shift right)","The <code>==</code> operator (equality)","The <code><</code> operator (less than)","The <code><=</code> operator (less than or equal to)","The <code>!=</code> operator (not equal to)","The <code>>=</code> operator (greater than or equal to)","The <code>></code> operator (greater than)","The <code>+=</code> operator","The <code>-=</code> operator","The <code>*=</code> operator","The <code>/=</code> operator","The <code>%=</code> operator","The <code>^=</code> operator","The <code>&=</code> operator","The <code>|=</code> operator","The <code><<=</code> operator","The <code>>>=</code> operator","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","The <code>*</code> operator for dereferencing","The <code>!</code> operator for logical inversion","The <code>-</code> operator for negation","A braced block containing Rust statements.","","Statements in a block","A local <code>let</code> binding: <code>let x: u64 = s.parse()?</code>.","","","","","","A statement, usually ending in a semicolon.","A local (let) binding.","An item definition.","Expr without trailing semicolon.","Expression with trailing semicolon.","The binary interface of a function: <code>extern \\\"C\\\"</code>.","","","An argument in a function type: the <code>usize</code> in …","","","","Return type of a function signature.","Return type is not specified.","A particular type is returned.","The possible types that a Rust value could have.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -> bool</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the …","A macro in the type position.","The never type: <code>!</code>.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&\'a T</code> or <code>&\'a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …","A tuple type: <code>(A, B, C, String)</code>.","Tokens in type position not interpreted by Syn.","A fixed size array type: <code>[T; n]</code>.","","","","","A bare function type: <code>fn(usize) -> bool</code>.","","","","","","","","","A type contained within invisible delimiters.","","","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","","","Indication that a type should be inferred by the …","","A macro in the type position.","","The never type: <code>!</code>.","","A parenthesized type equivalent to the inner type.","","","A path like <code>std::slice::Iter</code>, optionally qualified with a …","","","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","","","","","A reference type: <code>&\'a T</code> or <code>&\'a mut T</code>.","","","","","A dynamically sized slice type: <code>[T]</code>.","","","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …","","","A tuple type: <code>(A, B, C, String)</code>.","","","The variadic argument of a foreign function.","","","A single field in a struct pattern.","","","","","A pattern in a local binding, function signature, match …","A box pattern: <code>box v</code>.","A pattern that binds a new variable: …","A literal pattern: <code>0</code>.","A macro in pattern position.","A pattern that matches any one of a set of cases.","A path pattern like <code>Color::Red</code>, optionally qualified with …","A range pattern: <code>1..=2</code>.","A reference pattern: <code>&mut var</code>.","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A dynamically sized slice pattern: …","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","A type ascription pattern: <code>foo: f64</code>.","Tokens in pattern position not interpreted by Syn.","A pattern that matches any value: <code>_</code>.","A box pattern: <code>box v</code>.","","","","A pattern that binds a new variable: …","","","","","","A literal pattern: <code>0</code>.","","","A macro in pattern position.","","","A pattern that matches any one of a set of cases.","","","","A path pattern like <code>Color::Red</code>, optionally qualified with …","","","","A range pattern: <code>1..=2</code>.","","","","","A reference pattern: <code>&mut var</code>.","","","","","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","","","A dynamically sized slice pattern: …","","","","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","","","","","","A tuple pattern: <code>(a, b)</code>.","","","","A tuple struct or tuple variant pattern: …","","","","A type ascription pattern: <code>foo: f64</code>.","","","","","A pattern that matches any value: <code>_</code>.","","","Angle bracketed arguments of a path segment: the <code><K, V></code> …","","","","","A binding (equality constraint) on an associated type: …","","","","An associated type bound: <code>Iterator<Item: Display></code>.","","","","An individual generic argument, like <code>\'a</code>, <code>T</code>, or <code>Item = T</code>.","A lifetime argument.","A type argument.","A binding (equality constraint) on an associated type: …","An associated type bound: <code>Iterator<Item: Display></code>.","A const expression. Must be inside of a block.","Arguments of a function path segment: the <code>(A, B) -> C</code> in …","","<code>(A, B)</code>","<code>C</code>","A path at which a named item is exported (e.g. …","","","Angle bracketed or parenthesized arguments of a path …","","The <code><\'a, T></code> in <code>std::slice::iter<\'a, T></code>.","The <code>(A, B) -> C</code> in <code>Fn(A, B) -> C</code>.","A segment of a path together with any path arguments on …","","","The explicit Self type in a qualified path: the <code>T</code> in …","","","","","","Error returned when a Syn parser cannot parse the input …","The result of a Syn parser.","Parse tokens of source code into the chosen syntax tree …","Parse a proc-macro2 token stream into the chosen syntax …","Parse a string of Rust code into the chosen syntax tree …","Parse the content of a file of Rust code.","Parse a set of parentheses and expose their content to …","Parse a set of curly braces and expose their content to …","Parse a set of square brackets and expose their content …","A type-macro that expands to the name of the Rust type …","Quasi-quotation macro that accepts input like the <code>quote!</code> …","Parse the input TokenStream of a macro, triggering a …","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Returns the span of this <code>Ident</code>.","Configures the span of this <code>Ident</code>, possibly changing its …","Parses the content of the attribute, consisting of the …","Parse the arguments to the attribute as a syntax tree.","Parse the arguments to the attribute using the given …","Parses zero or more outer attributes from the stream.","Parses zero or more inner attributes from the stream.","Returns the identifier that begins this structured meta …","Parses a named (braced struct) field.","Parses an unnamed (tuple struct) field.","Get an iterator over the borrowed [<code>Field</code>] items in this …","Get an iterator over the mutably borrowed [<code>Field</code>] items …","Returns the number of fields.","Returns <code>true</code> if there are zero fields.","An alternative to the primary <code>Expr::parse</code> parser (from the…","Returns an Iterator<Item = &TypeParam> over the type …","Returns an Iterator<Item = &mut TypeParam> over the type …","Returns an Iterator<Item = &LifetimeDef> over the …","Returns an Iterator<Item = &mut LifetimeDef> over the …","Returns an Iterator<Item = &ConstParam> over the constant …","Returns an Iterator<Item = &mut ConstParam> over the …","Initializes an empty <code>where</code>-clause if there is not one …","Split a type’s generics into the pieces required for …","Turn a type’s generics like <code><X, Y></code> into a turbofish …","","A method’s <code>self</code> receiver, such as <code>&self</code> or …","","Panics","","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","Parse a syntax tree node from the content of this string …","Invoke parser on the content of this string literal.","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number type.","","","","","","","","","","","","","","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parse the body of a block as zero or more statements, …","In some positions, types may not contain the <code>+</code> character, …","","","Parse a <code>Path</code> containing no path arguments on any of its …","Determines whether this is a path of length 1 equal to …","If this path consists of a single ident, returns the …ooks at the next token in the parse stream to determine …","Triggers an error at the current position of the parse …"],"i":[0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,0,85,0,86,0,87,0,88,0,89,0,90,0,91,0,92,0,93,0,94,0,95,0,96,0,97,0,98,0,99,0,100,100,0,101,101,0,102,102,0,103,103,0,0,104,104,104,0,105,105,105,105,105,105,105,105,105,105,0,0,106,106,106,0,0,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,0,0,0,0,0,0,0,108,108,108,108,108,108,108,108,0,0,109,0,0,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,0,0,0,0,112,0,0,0,113,114,114,114,114,114,114,114,114,114,114,114,114,114,0,115,115,115,115,0,116,116,116,116,116,116,0,0,117,117,0,118,118,118,118,118,0,0,119,119,119,0,120,120,120,0,121,121,121,0,122,122,0,123,123,123,123,123,0,124,124,124,0,125,125,0,126,126,0,127,127,127,127,0,128,0,129,0,130,130,130,130,0,131,131,131,131,0,132,132,132,132,132,132,0,133,133,133,133,0,134,134,0,135,135,0,136,136,136,136,0,137,137,0,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,0,139,139,139,0,140,140,140,140,0,141,141,141,141,0,142,142,142,142,0,143,143,143,143,0,144,144,144,144,0,145,145,145,0,146,146,146,0,147,147,147,147,0,148,148,148,148,0,149,149,149,149,0,150,150,150,150,150,150,150,150,150,0,151,151,151,0,152,152,152,152,0,153,153,153,153,153,153,153,0,154,154,154,0,155,155,155,155,155,0,156,156,156,156,0,157,157,157,157,157,0,158,158,0,159,159,159,159,0,160,160,0,161,161,161,161,161,0,162,162,162,162,162,162,162,0,163,163,163,0,164,164,164,0,165,165,165,165,0,166,166,166,166,166,0,167,167,167,167,167,0,168,168,168,0,169,169,169,169,169,169,0,170,170,170,0,171,171,171,0,172,172,172,0,173,173,173,173,0,174,174,174,0,175,175,175,0,176,176,176,176,176,0,177,177,177,0,178,178,0,179,179,0,180,180,180,180,0,181,181,181,181,181,181,181,0,182,182,182,0,183,183,183,183,0,184,184,184,184,0,185,185,185,0,186,186,186,0,187,187,187,187,0,188,188,188,188,0,189,189,0,190,190,190,190,190,190,0,191,191,0,192,192,0,193,193,193,0,0,0,0,194,194,0,195,195,195,195,195,0,196,196,196,196,0,197,197,197,0,198,198,198,198,198,198,198,198,0,199,199,199,199,199,0,200,200,200,200,200,0,201,201,201,201,201,201,201,201,201,201,0,202,202,202,0,203,203,203,203,203,0,204,204,204,204,204,204,204,204,204,0,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,0,206,206,206,206,206,206,206,206,206,0,207,207,207,207,207,207,207,0,208,208,208,208,208,208,208,0,209,209,209,209,0,210,210,210,210,0,211,211,211,211,211,211,211,211,211,0,212,212,212,212,0,213,213,213,213,213,0,214,214,214,214,214,214,0,215,215,215,215,215,215,215,215,215,215,0,216,216,216,216,216,216,216,0,217,217,217,217,217,217,217,217,217,217,217,0,218,218,218,218,218,218,218,218,0,219,219,219,219,219,219,219,219,0,220,220,220,220,220,220,0,221,221,221,221,221,221,0,222,222,222,222,0,223,223,223,223,223,223,223,223,223,223,223,0,224,224,224,224,224,0,225,225,225,225,225,225,225,0,226,226,226,0,227,227,227,227,0,228,228,228,228,228,228,228,228,0,229,0,230,230,0,231,0,232,232,232,0,233,233,233,0,234,234,234,234,234,0,235,235,235,0,236,236,0,237,237,237,237,237,237,237,237,0,238,238,0,0,0,0,0,0,0,239,239,0,240,240,240,240,0,241,241,241,0,242,242,242,0,243,243,243,0,244,244,244,0,245,245,0,246,246,246,246,246,0,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,0,248,248,248,0,249,249,0,250,250,250,250,250,0,251,251,251,251,0,252,252,0,253,253,253,0,254,254,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,256,256,256,256,0,257,257,257,257,257,257,257,257,0,258,258,0,259,259,0,260,0,261,0,262,0,263,263,0,264,264,0,265,265,265,265,0,266,266,266,266,0,267,267,0,268,268,0,269,269,0,270,270,0,271,271,271,271,0,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,0,273,273,273,0,274,274,274,274,274,0,275,275,0,276,276,0,277,277,277,0,278,278,278,0,279,279,279,279,0,280,280,280,280,0,281,281,0,282,282,282,0,283,283,283,283,283,0,284,284,284,0,285,285,285,0,286,286,286,286,0,287,287,0,288,288,288,288,0,289,289,289,0,290,290,290,0,291,291,291,291,291,0,292,292,292,0,293,293,0,294,294,294,0,295,295,0,296,296,296,296,296,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,297,297,297,297,297,297,297,297,297,297,297,118,118,118,118,118,118,118,118,118,118,117,117,117,117,117,117,117,117,117,119,119,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,122,122,122,122,122,122,122,122,122,122,127,127,127,127,127,127,127,127,127,127,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,123,123,123,123,123,123,123,123,123,123,131,131,131,131,131,131,131,131,131,131,129,129,129,129,129,129,129,129,129,129,128,128,128,128,128,128,128,128,128,128,130,130,130,130,130,130,130,130,130,130,138,138,138,138,138,138,138,138,138,138,139,139,139,139,139,139,139,139,139,139,140,140,140,140,140,140,140,140,140,140,141,141,141,141,141,141,141,141,141,141,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,144,144,144,144,144,144,144,144,144,144,145,145,145,145,145,145,145,145,145,145,146,146,146,146,146,146,146,146,146,146,147,147,147,147,147,147,147,147,147,147,148,148,148,148,148,148,148,148,148,148,149,149,149,149,149,149,149,149,149,149,150,150,150,150,150,150,150,150,150,150,151,151,151,151,151,151,151,151,151,151,152,152,152,152,152,152,152,152,152,152,153,153,153,153,153,153,153,153,153,153,154,154,154,154,154,154,154,154,154,154,155,155,155,155,155,155,155,155,155,155,156,156,156,156,156,156,156,156,156,156,157,157,157,157,157,157,157,157,157,157,158,158,158,158,158,158,158,158,158,158,159,159,159,159,159,159,159,159,159,159,160,160,160,160,160,160,160,160,160,160,161,161,161,161,161,161,161,161,161,161,162,162,162,162,162,162,162,162,162,162,163,163,163,163,163,163,163,163,163,163,164,164,164,164,164,164,164,164,164,164,165,165,165,165,165,165,165,165,165,165,166,166,166,166,166,166,166,166,166,166,167,167,167,167,167,167,167,167,167,167,168,168,168,168,168,168,168,168,168,168,169,169,169,169,169,169,169,169,169,169,170,170,170,170,170,170,170,170,170,170,171,171,171,171,171,171,171,171,171,171,172,172,172,172,172,172,172,172,172,172,173,173,173,173,173,173,173,173,173,173,174,174,174,174,174,174,174,174,174,174,175,175,175,175,175,175,175,175,175,175,176,176,176,176,176,176,176,176,176,176,177,177,177,177,177,177,177,177,177,177,179,179,179,179,179,179,179,179,179,179,178,178,178,178,178,178,178,178,178,178,136,136,136,136,136,136,136,136,136,136,134,134,134,134,134,134,134,134,134,134,133,133,133,133,133,133,133,133,133,133,135,135,135,135,135,135,135,135,135,135,132,132,132,132,132,132,132,132,132,132,137,137,137,137,137,137,137,137,137,183,183,183,183,183,183,183,183,183,183,182,182,182,182,182,182,182,182,182,182,190,190,190,190,190,190,190,190,190,190,184,184,184,184,184,184,184,184,184,184,181,181,181,181,181,181,181,181,181,181,298,298,298,298,298,298,298,298,298,298,299,299,299,299,299,299,299,299,299,299,300,300,300,300,300,300,300,300,300,300,180,180,180,180,180,180,180,180,180,180,191,191,191,191,191,191,191,191,191,191,188,188,188,188,188,188,188,188,188,188,189,189,189,189,189,189,189,189,189,189,192,192,192,192,192,192,192,192,192,192,193,193,193,193,193,193,193,193,193,193,187,187,187,187,187,187,187,187,187,187,186,186,186,186,186,186,186,186,186,186,185,185,185,185,185,185,185,185,185,185,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,207,207,207,207,207,207,207,207,207,207,208,208,208,208,208,208,208,208,208,208,209,209,209,209,209,209,209,209,209,209,210,210,210,210,210,210,210,210,210,210,211,211,211,211,211,211,211,211,211,211,212,212,212,212,212,212,212,212,212,212,213,213,213,213,213,213,213,213,213,213,214,214,214,214,214,214,214,214,214,214,215,215,215,215,215,215,215,215,215,215,216,216,216,216,216,216,216,216,216,216,217,217,217,217,217,217,217,217,217,217,218,218,218,218,218,218,218,218,218,218,219,219,219,219,219,219,219,219,219,219,220,220,220,220,220,220,220,220,220,220,221,221,221,221,221,221,221,221,221,221,234,234,234,234,234,234,234,234,234,234,232,232,232,232,232,232,232,232,232,232,231,231,231,231,231,231,231,231,231,231,233,233,233,233,233,233,233,233,233,233,229,229,229,229,229,229,229,229,229,229,230,230,230,230,230,230,230,230,230,230,195,195,195,195,195,195,195,195,195,195,196,196,196,196,196,196,196,196,196,196,198,198,198,198,198,198,198,198,198,198,199,199,199,199,199,199,199,199,199,199,197,197,197,197,197,197,197,197,197,197,224,224,224,224,224,224,224,224,224,224,225,225,225,225,225,225,225,225,225,225,227,227,227,227,227,227,227,227,227,227,228,228,228,228,228,228,228,228,228,228,226,226,226,226,226,226,226,226,226,226,200,200,200,200,200,200,200,200,200,200,201,201,201,201,201,201,201,201,201,201,203,203,203,203,203,203,203,203,203,203,204,204,204,204,204,204,204,204,204,204,202,202,202,202,202,202,202,202,202,202,223,223,223,223,223,223,223,223,223,223,194,194,194,194,194,194,194,194,194,194,222,222,222,222,222,222,222,222,222,222,235,235,235,235,235,235,235,235,235,235,236,236,236,236,236,236,236,236,236,236,236,237,237,237,237,237,237,237,237,237,237,301,301,301,301,301,301,301,301,301,301,302,302,302,302,302,302,302,302,302,302,303,303,303,303,303,303,303,303,303,303,304,304,304,304,304,304,304,304,304,304,305,305,305,305,305,305,305,305,305,305,305,306,306,306,306,306,306,306,306,306,306,306,238,238,238,238,238,238,238,238,238,238,239,239,239,239,239,239,239,240,240,240,240,240,240,240,240,240,240,241,241,241,241,241,241,241,241,241,246,246,246,246,246,246,246,246,246,246,242,242,242,242,242,242,242,242,242,244,244,244,244,244,244,244,244,244,243,243,243,243,243,243,243,243,243,245,245,245,245,245,245,245,245,245,247,247,247,247,247,247,247,247,247,247,248,248,248,248,248,248,248,248,248,248,249,249,249,249,249,249,249,249,249,249,251,251,251,251,251,251,251,251,251,251,250,250,250,250,250,250,250,250,250,250,255,255,255,255,255,255,255,255,255,255,256,256,256,256,256,256,256,256,256,256,257,257,257,257,257,257,257,257,257,257,258,258,258,258,258,258,258,258,258,258,259,259,259,259,259,259,259,259,259,259,260,260,260,260,260,260,260,260,260,260,261,261,261,261,261,261,261,261,261,261,262,262,262,262,262,262,262,262,262,262,263,263,263,263,263,263,263,263,263,263,264,264,264,264,264,264,264,264,264,264,265,265,265,265,265,265,265,265,265,265,266,266,266,266,266,266,266,266,266,266,267,267,267,267,267,267,267,267,267,267,268,268,268,268,268,268,268,268,268,268,269,269,269,269,269,269,269,269,269,269,252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,253,253,253,253,270,270,270,270,270,270,270,270,270,270,254,254,254,254,254,254,254,254,254,254,272,272,272,272,272,272,272,272,272,272,273,273,273,273,273,273,273,273,273,273,274,274,274,274,274,274,274,274,274,274,275,275,275,275,275,275,275,275,275,275,276,276,276,276,276,276,276,276,276,276,277,277,277,277,277,277,277,277,277,277,278,278,278,278,278,278,278,278,278,278,279,279,279,279,279,279,279,279,279,279,280,280,280,280,280,280,280,280,280,280,281,281,281,281,281,281,281,281,281,281,282,282,282,282,282,282,282,282,282,282,283,283,283,283,283,283,283,283,283,283,284,284,284,284,284,284,284,284,284,284,285,285,285,285,285,285,285,285,285,285,286,286,286,286,286,286,286,286,286,286,287,287,287,287,287,287,287,287,287,287,271,271,271,271,271,271,271,271,271,271,293,293,293,293,293,293,293,293,293,293,295,295,295,295,295,295,295,295,295,295,294,294,294,294,294,294,294,294,294,294,291,291,291,291,291,291,291,291,291,291,288,288,288,288,288,288,288,288,288,288,289,289,289,289,289,289,289,289,289,289,290,290,290,290,290,290,290,290,290,290,292,292,292,292,292,292,292,292,292,292,296,296,296,296,296,296,296,296,296,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,107,107,107,107,107,107,107,107,107,107,307,307,307,307,307,307,307,307,307,307,308,308,308,308,308,308,308,308,309,309,309,309,309,309,309,309,309,309,310,310,310,310,310,310,310,310,310,310,311,311,311,311,311,311,311,311,311,311,312,312,312,312,312,312,312,312,108,108,108,108,108,108,108,108,108,108,313,313,313,313,313,313,313,116,116,116,116,116,116,116,116,116,116,114,114,114,114,114,114,114,114,113,113,113,113,113,113,113,113,113,314,314,314,314,314,314,314,297,297,297,297,297,297,297,297,297,297,297,236,236,237,237,301,301,302,302,303,303,304,304,305,305,306,306,238,238,1,1,102,102,100,100,101,101,103,103,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,297,297,297,297,114,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,297,119,120,121,122,127,125,126,131,138,160,139,167,158,163,155,153,159,161,146,148,162,172,144,174,149,173,157,150,140,141,152,156,165,166,147,151,168,170,177,171,142,176,135,133,169,175,145,137,164,179,132,178,183,182,184,180,190,191,188,189,181,192,193,205,212,213,208,221,234,215,206,223,209,194,222,214,210,195,196,198,199,197,219,216,207,220,217,218,224,225,227,228,226,211,200,201,203,204,202,235,236,237,301,302,303,304,305,306,238,240,246,247,248,249,251,255,267,256,265,266,257,262,260,269,261,264,254,268,259,258,263,253,252,272,293,291,288,292,295,289,290,314,114,297,297,297,297,297,297,119,119,119,122,122,124,124,131,131,131,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,178,182,182,182,190,191,191,193,193,193,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,246,246,246,234,234,234,234,234,195,195,195,195,224,224,224,224,200,200,200,200,194,194,237,237,237,237,237,237,237,305,306,242,242,242,255,255,255,255,255,255,255,255,255,255,255,255,255,255,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,293,295,116,307,308,309,310,311,312,307,308,309,310,311,312,107,107,116,124,107,116,307,307,308,308,309,309,310,310,311,311,312,312,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,298,299,300,236,301,302,303,304,305,306,105,107,307,309,310,311,108,252,288,132,117,118,253,247,289,249,180,181,290,242,243,244,245,246,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,123,271,133,124,125,126,235,194,195,196,197,198,199,291,134,182,183,200,201,202,203,204,178,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,135,184,237,238,250,240,241,179,119,120,121,136,122,292,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,293,294,295,185,186,187,296,137,222,254,223,251,188,189,224,225,226,227,228,255,256,257,258,259,260,261,262,190,191,263,264,265,266,267,268,269,248,229,230,231,232,233,234,270,127,128,129,130,131,192,193,113,116,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,183,180,294,107,236,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,179,178,298,299,300,236,301,302,303,304,305,306,105,107,252,288,132,117,118,253,247,289,249,180,181,290,242,243,244,245,246,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,123,271,133,124,125,126,235,194,195,196,197,198,199,291,134,182,183,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,135,184,237,238,250,240,241,119,120,121,136,122,292,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,293,294,295,185,186,187,296,137,222,254,223,251,188,189,224,225,226,227,228,255,256,257,258,259,260,261,262,190,191,263,264,265,266,267,268,269,248,229,230,231,232,233,234,270,127,128,129,130,131,192,193,236,1,54,56,59,60,61,63,65,66,68,69,73,76,78,81,84,85,88,91,96,97,99,113,1,54,56,59,60,61,63,65,66,68,69,73,76,78,81,84,85,88,91,96,97,99,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,298,299,300,301,302,303,304,305,306,238,107,252,288,132,117,118,253,247,289,249,180,181,290,242,243,244,245,246,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,123,271,133,124,125,126,235,194,195,196,197,198,199,291,134,182,183,200,201,202,203,204,178,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,135,236,184,237,250,240,241,179,119,120,121,136,122,292,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,293,294,295,185,186,187,296,137,222,254,223,251,188,189,224,225,226,227,228,255,256,257,258,259,260,261,262,190,191,263,264,265,266,267,268,269,248,229,230,231,232,233,234,270,127,128,129,130,131,192,193,114,116,236,305,306,114,116,107,107,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,179,178,298,299,300,236,301,302,303,304,305,306,107,252,288,132,117,118,253,247,289,249,180,181,290,242,243,244,245,246,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,123,271,133,124,125,126,235,194,195,196,197,198,199,291,134,182,183,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,135,184,237,238,250,240,241,119,120,121,136,122,292,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,293,294,295,185,186,187,296,137,222,254,223,251,188,189,224,225,226,227,228,255,256,257,258,259,260,261,262,190,191,263,264,265,266,267,268,269,248,229,230,231,232,233,234,270,127,128,129,130,131,192,193,107,107,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,119,122,118,120,121,124,131,127,125,126,123,129,128,130,138,146,139,148,162,136,134,172,144,174,158,149,173,157,155,176,153,159,161,142,143,171,177,150,175,145,140,141,152,179,178,156,165,164,166,147,151,168,160,169,167,154,163,170,135,133,132,182,191,193,183,298,299,300,180,184,190,188,189,181,192,187,186,185,205,234,195,224,200,194,208,221,215,206,209,214,210,219,207,216,220,217,218,211,212,213,232,231,233,229,230,225,227,228,226,201,203,204,202,196,198,199,197,223,222,235,236,237,301,302,303,304,305,306,238,240,246,247,248,249,251,250,255,267,256,265,266,257,262,269,264,268,259,258,263,260,261,254,253,270,252,272,287,274,283,285,286,278,284,273,280,281,275,279,282,276,277,271,293,295,294,291,288,289,290,292,107,108,179,179,178,178,297,297,297,118,118,118,118,118,119,123,123,124,124,124,124,138,183,183,183,183,183,183,183,183,299,184,223,222,236,236,236,237,237,237,237,301,301,301,301,301,301,301,302,302,302,302,302,303,303,303,303,303,304,304,304,304,304,305,305,305,305,305,305,306,306,306,306,306,306,238,238,238,238,240,240,249,255,254,268,293,293,293,294,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,313,313],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["tokenstream",3]]],null,null,[[["tokenstream",3]]],null,null,[[["tokenstream",3]]],null,null,[[["tokenstream",3]]],null,null,[[["tokenstream",3]],["tokenbuffer",3]],[[["tokenstream",3]],["tokenbuffer",3]],[[],["cursor",3]],null,[[]],[[],["bool",15]],[[["delimiter",4]],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["tokenstream",3]],[[],["option",4]],[[],["span",3]],null,null,[[["parsestream",6]],["result",6]],null,[[],["ident",3]],null,null,[[]],[[],["bool",15]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["iter",3]],[[],["itermut",3]],[[],["pairs",3]],[[],["pairsmut",3]],[[],["intopairs",3]],[[]],[[]],[[],[["option",4],["pair",4]]],[[],["bool",15]],[[],["bool",15]],[[]],[[["usize",15]]],[[]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["option",4]],[[["option",4]]],[[]],null,null,[[],["span",3]],null,null,[[["abi",3]]],[[["anglebracketedgenericarguments",3]]],[[["arm",3]]],[[["attrstyle",4]]],[[["attribute",3]]],[[["barefnarg",3]]],[[["binop",4]]],[[["binding",3]]],[[["block",3]]],[[["boundlifetimes",3]]],[[["constparam",3]]],[[["constraint",3]]],[[["data",4]]],[[["dataenum",3]]],[[["datastruct",3]]],[[["dataunion",3]]],[[["deriveinput",3]]],[[["expr",4]]],[[["exprarray",3]]],[[["exprassign",3]]],[[["exprassignop",3]]],[[["exprasync",3]]],[[["exprawait",3]]],[[["exprbinary",3]]],[[["exprblock",3]]],[[["exprbox",3]]],[[["exprbreak",3]]],[[["exprcall",3]]],[[["exprcast",3]]],[[["exprclosure",3]]],[[["exprcontinue",3]]],[[["exprfield",3]]],[[["exprforloop",3]]],[[["exprgroup",3]]],[[["exprif",3]]],[[["exprindex",3]]],[[["exprlet",3]]],[[["exprlit",3]]],[[["exprloop",3]]],[[["exprmacro",3]]],[[["exprmatch",3]]],[[["exprmethodcall",3]]],[[["exprparen",3]]],[[["exprpath",3]]],[[["exprrange",3]]],[[["exprreference",3]]],[[["exprrepeat",3]]],[[["exprreturn",3]]],[[["exprstruct",3]]],[[["exprtry",3]]],[[["exprtryblock",3]]],[[["exprtuple",3]]],[[["exprtype",3]]],[[["exprunary",3]]],[[["exprunsafe",3]]],[[["exprwhile",3]]],[[["expryield",3]]],[[["field",3]]],[[["fieldpat",3]]],[[["fieldvalue",3]]],[[["fields",4]]],[[["fieldsnamed",3]]],[[["fieldsunnamed",3]]],[[["file",3]]],[[["fnarg",4]]],[[["foreignitem",4]]],[[["foreignitemfn",3]]],[[["foreignitemmacro",3]]],[[["foreignitemstatic",3]]],[[["foreignitemtype",3]]],[[["genericargument",4]]],[[["genericmethodargument",4]]],[[["genericparam",4]]],[[["generics",3]]],[[["ident",3]]],[[["implitem",4]]],[[["implitemconst",3]]],[[["implitemmacro",3]]],[[["implitemmethod",3]]],[[["implitemtype",3]]],[[["index",3]]],[[["item",4]]],[[["itemconst",3]]],[[["itemenum",3]]],[[["itemexterncrate",3]]],[[["itemfn",3]]],[[["itemforeignmod",3]]],[[["itemimpl",3]]],[[["itemmacro",3]]],[[["itemmacro2",3]]],[[["itemmod",3]]],[[["itemstatic",3]]],[[["itemstruct",3]]],[[["itemtrait",3]]],[[["itemtraitalias",3]]],[[["itemtype",3]]],[[["itemunion",3]]],[[["itemuse",3]]],[[["label",3]]],[[["lifetime",3]]],[[["lifetimedef",3]]],[[["lit",4]]],[[["litbool",3]]],[[["litbyte",3]]],[[["litbytestr",3]]],[[["litchar",3]]],[[["litfloat",3]]],[[["litint",3]]],[[["litstr",3]]],[[["local",3]]],[[["macro",3]]],[[["macrodelimiter",4]]],[[["member",4]]],[[["meta",4]]],[[["metalist",3]]],[[["metanamevalue",3]]],[[["methodturbofish",3]]],[[["nestedmeta",4]]],[[["parenthesizedgenericarguments",3]]],[[["pat",4]]],[[["patbox",3]]],[[["patident",3]]],[[["patlit",3]]],[[["patmacro",3]]],[[["pator",3]]],[[["patpath",3]]],[[["patrange",3]]],[[["patreference",3]]],[[["patrest",3]]],[[["patslice",3]]],[[["patstruct",3]]],[[["pattuple",3]]],[[["pattuplestruct",3]]],[[["pattype",3]]],[[["patwild",3]]],[[["path",3]]],[[["patharguments",4]]],[[["pathsegment",3]]],[[["predicateeq",3]]],[[["predicatelifetime",3]]],[[["predicatetype",3]]],[[["qself",3]]],[[["rangelimits",4]]],[[["receiver",3]]],[[["returntype",4]]],[[["signature",3]]],[[["span",3]]],[[["stmt",4]]],[[["traitbound",3]]],[[["traitboundmodifier",4]]],[[["traititem",4]]],[[["traititemconst",3]]],[[["traititemmacro",3]]],[[["traititemmethod",3]]],[[["traititemtype",3]]],[[["type",4]]],[[["typearray",3]]],[[["typebarefn",3]]],[[["typegroup",3]]],[[["typeimpltrait",3]]],[[["typeinfer",3]]],[[["typemacro",3]]],[[["typenever",3]]],[[["typeparam",3]]],[[["typeparambound",4]]],[[["typeparen",3]]],[[["typepath",3]]],[[["typeptr",3]]],[[["typereference",3]]],[[["typeslice",3]]],[[["typetraitobject",3]]],[[["typetuple",3]]],[[["unop",4]]],[[["useglob",3]]],[[["usegroup",3]]],[[["usename",3]]],[[["usepath",3]]],[[["userename",3]]],[[["usetree",4]]],[[["variadic",3]]],[[["variant",3]]],[[["viscrate",3]]],[[["vispublic",3]]],[[["visrestricted",3]]],[[["visibility",4]]],[[["whereclause",3]]],[[["wherepredicate",4]]],[[["abi",3]]],[[["anglebracketedgenericarguments",3]]],[[["arm",3]]],[[["attrstyle",4]]],[[["attribute",3]]],[[["barefnarg",3]]],[[["binop",4]]],[[["binding",3]]],[[["block",3]]],[[["boundlifetimes",3]]],[[["constparam",3]]],[[["constraint",3]]],[[["data",4]]],[[["dataenum",3]]],[[["datastruct",3]]],[[["dataunion",3]]],[[["deriveinput",3]]],[[["expr",4]]],[[["exprarray",3]]],[[["exprassign",3]]],[[["exprassignop",3]]],[[["exprasync",3]]],[[["exprawait",3]]],[[["exprbinary",3]]],[[["exprblock",3]]],[[["exprbox",3]]],[[["exprbreak",3]]],[[["exprcall",3]]],[[["exprcast",3]]],[[["exprclosure",3]]],[[["exprcontinue",3]]],[[["exprfield",3]]],[[["exprforloop",3]]],[[["exprgroup",3]]],[[["exprif",3]]],[[["exprindex",3]]],[[["exprlet",3]]],[[["exprlit",3]]],[[["exprloop",3]]],[[["exprmacro",3]]],[[["exprmatch",3]]],[[["exprmethodcall",3]]],[[["exprparen",3]]],[[["exprpath",3]]],[[["exprrange",3]]],[[["exprreference",3]]],[[["exprrepeat",3]]],[[["exprreturn",3]]],[[["exprstruct",3]]],[[["exprtry",3]]],[[["exprtryblock",3]]],[[["exprtuple",3]]],[[["exprtype",3]]],[[["exprunary",3]]],[[["exprunsafe",3]]],[[["exprwhile",3]]],[[["expryield",3]]],[[["field",3]]],[[["fieldpat",3]]],[[["fieldvalue",3]]],[[["fields",4]]],[[["fieldsnamed",3]]],[[["fieldsunnamed",3]]],[[["file",3]]],[[["fnarg",4]]],[[["foreignitem",4]]],[[["foreignitemfn",3]]],[[["foreignitemmacro",3]]],[[["foreignitemstatic",3]]],[[["foreignitemtype",3]]],[[["genericargument",4]]],[[["genericmethodargument",4]]],[[["genericparam",4]]],[[["generics",3]]],[[["ident",3]]],[[["implitem",4]]],[[["implitemconst",3]]],[[["implitemmacro",3]]],[[["implitemmethod",3]]],[[["implitemtype",3]]],[[["index",3]]],[[["item",4]]],[[["itemconst",3]]],[[["itemenum",3]]],[[["itemexterncrate",3]]],[[["itemfn",3]]],[[["itemforeignmod",3]]],[[["itemimpl",3]]],[[["itemmacro",3]]],[[["itemmacro2",3]]],[[["itemmod",3]]],[[["itemstatic",3]]],[[["itemstruct",3]]],[[["itemtrait",3]]],[[["itemtraitalias",3]]],[[["itemtype",3]]],[[["itemunion",3]]],[[["itemuse",3]]],[[["label",3]]],[[["lifetime",3]]],[[["lifetimedef",3]]],[[["lit",4]]],[[["litbool",3]]],[[["litbyte",3]]],[[["litbytestr",3]]],[[["litchar",3]]],[[["litfloat",3]]],[[["litint",3]]],[[["litstr",3]]],[[["local",3]]],[[["macro",3]]],[[["macrodelimiter",4]]],[[["member",4]]],[[["meta",4]]],[[["metalist",3]]],[[["metanamevalue",3]]],[[["methodturbofish",3]]],[[["nestedmeta",4]]],[[["parenthesizedgenericarguments",3]]],[[["pat",4]]],[[["patbox",3]]],[[["patident",3]]],[[["patlit",3]]],[[["patmacro",3]]],[[["pator",3]]],[[["patpath",3]]],[[["patrange",3]]],[[["patreference",3]]],[[["patrest",3]]],[[["patslice",3]]],[[["patstruct",3]]],[[["pattuple",3]]],[[["pattuplestruct",3]]],[[["pattype",3]]],[[["patwild",3]]],[[["path",3]]],[[["patharguments",4]]],[[["pathsegment",3]]],[[["predicateeq",3]]],[[["predicatelifetime",3]]],[[["predicatetype",3]]],[[["qself",3]]],[[["rangelimits",4]]],[[["receiver",3]]],[[["returntype",4]]],[[["signature",3]]],[[["span",3]]],[[["stmt",4]]],[[["traitbound",3]]],[[["traitboundmodifier",4]]],[[["traititem",4]]],[[["traititemconst",3]]],[[["traititemmacro",3]]],[[["traititemmethod",3]]],[[["traititemtype",3]]],[[["type",4]]],[[["typearray",3]]],[[["typebarefn",3]]],[[["typegroup",3]]],[[["typeimpltrait",3]]],[[["typeinfer",3]]],[[["typemacro",3]]],[[["typenever",3]]],[[["typeparam",3]]],[[["typeparambound",4]]],[[["typeparen",3]]],[[["typepath",3]]],[[["typeptr",3]]],[[["typereference",3]]],[[["typeslice",3]]],[[["typetraitobject",3]]],[[["typetuple",3]]],[[["unop",4]]],[[["useglob",3]]],[[["usegroup",3]]],[[["usename",3]]],[[["usepath",3]]],[[["userename",3]]],[[["usetree",4]]],[[["variadic",3]]],[[["variant",3]]],[[["viscrate",3]]],[[["vispublic",3]]],[[["visrestricted",3]]],[[["visibility",4]]],[[["whereclause",3]]],[[["wherepredicate",4]]],null,null,null,[[]],null,null,null,null,null,[[["parsestream",6]],["result",6]],null,null,null,[[["display",8]],["error",3]],[[],[["parse",8],["result",6]]],[[],["result",6]],[[["peek",8]],["bool",15]],[[["peek",8]],["bool",15]],[[["peek",8]],["bool",15]],[[],[["result",6],["punctuated",3]]],[[],["bool",15]],[[],["lookahead1",3]],[[]],[[["display",8]],["error",3]],[[],["result",6]],[[],["span",3]],[[],["cursor",3]],null,null,[[["tokenstream",3]],["result",6]],[[["tokenstream",3]],["result",6]],[[["str",15]],["result",6]],null,[[["display",8],["span",3]]],[[["display",8],["totokens",8]]],[[],["span",3]],[[],["tokenstream",3]],[[],["tokenstream",3]],[[["error",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["tokenstream",3]],[["parse",8],["result",6]]],[[["tokenstream",3]],[["parse",8],["result",6]]],[[["str",15]],[["parse",8],["result",6]]],[[["str",15]],[["result",6],["file",3]]],null,null,null,null,null,null,null,null,[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["ident",3]],[[["formatter",3]],[["error",3],["result",4]]],[[],["bool",15]],[[["ident",3]],["bool",15]],[[["ident",3]],["ordering",4]],[[]],[[["formatter",3]],[["error",3],["result",4]]],[[["ident",3]],[["option",4],["ordering",4]]],[[],[["option",4],["span",3]]],[[["formatter",3]],[["error",3],["result",4]]],[[["tokenstream",3]]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["cursor",3]],["bool",15]],[[],["str",15]],[[["parsestream",6]],["result",6]],[[],["ident",3]],[[]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],[["result",6],["arm",3]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],[["usetree",4],["result",6]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[]],[[["selfvalue",3]],["ident",3]],[[["selftype",3]],["ident",3]],[[["super",3]],["ident",3]],[[["crate",3]],["ident",3]],[[["extern",3]],["ident",3]],[[["underscore",3]],["ident",3]],[[["path",3]],["meta",4]],[[["metalist",3]],["meta",4]],[[["metanamevalue",3]],["meta",4]],[[["meta",4]],["nestedmeta",4]],[[["lit",4]],["nestedmeta",4]],[[["fieldsnamed",3]],["fields",4]],[[["fieldsunnamed",3]],["fields",4]],[[["vispublic",3]],["visibility",4]],[[["viscrate",3]],["visibility",4]],[[["visrestricted",3]],["visibility",4]],[[["exprarray",3]],["expr",4]],[[["exprassign",3]],["expr",4]],[[["exprassignop",3]],["expr",4]],[[["exprasync",3]],["expr",4]],[[["exprawait",3]],["expr",4]],[[["exprbinary",3]],["expr",4]],[[["exprblock",3]],["expr",4]],[[["exprbox",3]],["expr",4]],[[["exprbreak",3]],["expr",4]],[[["exprcall",3]],["expr",4]],[[["exprcast",3]],["expr",4]],[[["exprclosure",3]],["expr",4]],[[["exprcontinue",3]],["expr",4]],[[["exprfield",3]],["expr",4]],[[["exprforloop",3]],["expr",4]],[[["exprgroup",3]],["expr",4]],[[["exprif",3]],["expr",4]],[[["exprindex",3]],["expr",4]],[[["exprlet",3]],["expr",4]],[[["exprlit",3]],["expr",4]],[[["exprloop",3]],["expr",4]],[[["exprmacro",3]],["expr",4]],[[["exprmatch",3]],["expr",4]],[[["exprmethodcall",3]],["expr",4]],[[["exprparen",3]],["expr",4]],[[["exprpath",3]],["expr",4]],[[["exprrange",3]],["expr",4]],[[["exprreference",3]],["expr",4]],[[["exprrepeat",3]],["expr",4]],[[["exprreturn",3]],["expr",4]],[[["exprstruct",3]],["expr",4]],[[["exprtry",3]],["expr",4]],[[["exprtryblock",3]],["expr",4]],[[["exprtuple",3]],["expr",4]],[[["exprtype",3]],["expr",4]],[[["exprunary",3]],["expr",4]],[[["exprunsafe",3]],["expr",4]],[[["exprwhile",3]],["expr",4]],[[["expryield",3]],["expr",4]],[[["usize",15]],["index",3]],[[["typeparam",3]],["genericparam",4]],[[["lifetimedef",3]],["genericparam",4]],[[["constparam",3]],["genericparam",4]],[[["ident",3]]],[[["traitbound",3]],["typeparambound",4]],[[["lifetime",3]],["typeparambound",4]],[[["predicatetype",3]],["wherepredicate",4]],[[["predicatelifetime",3]],["wherepredicate",4]],[[["predicateeq",3]],["wherepredicate",4]],[[["itemconst",3]],["item",4]],[[["itemenum",3]],["item",4]],[[["itemexterncrate",3]],["item",4]],[[["itemfn",3]],["item",4]],[[["itemforeignmod",3]],["item",4]],[[["itemimpl",3]],["item",4]],[[["itemmacro",3]],["item",4]],[[["itemmacro2",3]],["item",4]],[[["itemmod",3]],["item",4]],[[["itemstatic",3]],["item",4]],[[["itemstruct",3]],["item",4]],[[["itemtrait",3]],["item",4]],[[["itemtraitalias",3]],["item",4]],[[["itemtype",3]],["item",4]],[[["itemunion",3]],["item",4]],[[["itemuse",3]],["item",4]],[[["deriveinput",3]],["item",4]],[[["itemstruct",3]],["deriveinput",3]],[[["itemenum",3]],["deriveinput",3]],[[["itemunion",3]],["deriveinput",3]],[[["usepath",3]],["usetree",4]],[[["usename",3]],["usetree",4]],[[["userename",3]],["usetree",4]],[[["useglob",3]],["usetree",4]],[[["usegroup",3]],["usetree",4]],[[["foreignitemfn",3]],["foreignitem",4]],[[["foreignitemstatic",3]],["foreignitem",4]],[[["foreignitemtype",3]],["foreignitem",4]],[[["foreignitemmacro",3]],["foreignitem",4]],[[["traititemconst",3]],["traititem",4]],[[["traititemmethod",3]],["traititem",4]],[[["traititemtype",3]],["traititem",4]],[[["traititemmacro",3]],["traititem",4]],[[["implitemconst",3]],["implitem",4]],[[["implitemmethod",3]],["implitem",4]],[[["implitemtype",3]],["implitem",4]],[[["implitemmacro",3]],["implitem",4]],[[["receiver",3]],["fnarg",4]],[[["pattype",3]],["fnarg",4]],[[["litstr",3]],["lit",4]],[[["litbytestr",3]],["lit",4]],[[["litbyte",3]],["lit",4]],[[["litchar",3]],["lit",4]],[[["litint",3]],["lit",4]],[[["litfloat",3]],["lit",4]],[[["litbool",3]],["lit",4]],[[["literal",3]]],[[["literal",3]]],[[["datastruct",3]],["data",4]],[[["dataenum",3]],["data",4]],[[["dataunion",3]],["data",4]],[[["typearray",3]],["type",4]],[[["typebarefn",3]],["type",4]],[[["typegroup",3]],["type",4]],[[["typeimpltrait",3]],["type",4]],[[["typeinfer",3]],["type",4]],[[["typemacro",3]],["type",4]],[[["typenever",3]],["type",4]],[[["typeparen",3]],["type",4]],[[["typepath",3]],["type",4]],[[["typeptr",3]],["type",4]],[[["typereference",3]],["type",4]],[[["typeslice",3]],["type",4]],[[["typetraitobject",3]],["type",4]],[[["typetuple",3]],["type",4]],[[["patbox",3]],["pat",4]],[[["patident",3]],["pat",4]],[[["patlit",3]],["pat",4]],[[["patmacro",3]],["pat",4]],[[["pator",3]],["pat",4]],[[["patpath",3]],["pat",4]],[[["patrange",3]],["pat",4]],[[["patreference",3]],["pat",4]],[[["patrest",3]],["pat",4]],[[["patslice",3]],["pat",4]],[[["patstruct",3]],["pat",4]],[[["pattuple",3]],["pat",4]],[[["pattuplestruct",3]],["pat",4]],[[["pattype",3]],["pat",4]],[[["patwild",3]],["pat",4]],[[]],[[]],[[["lexerror",3]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["optionlifetime",3]],["ordering",4]],[[["underscore",3]],["bool",15]],[[["abstract",3]],["bool",15]],[[["as",3]],["bool",15]],[[["async",3]],["bool",15]],[[["auto",3]],["bool",15]],[[["await",3]],["bool",15]],[[["become",3]],["bool",15]],[[["box",3]],["bool",15]],[[["break",3]],["bool",15]],[[["const",3]],["bool",15]],[[["continue",3]],["bool",15]],[[["crate",3]],["bool",15]],[[["default",3]],["bool",15]],[[["do",3]],["bool",15]],[[["dyn",3]],["bool",15]],[[["else",3]],["bool",15]],[[["enum",3]],["bool",15]],[[["extern",3]],["bool",15]],[[["final",3]],["bool",15]],[[["fn",3]],["bool",15]],[[["for",3]],["bool",15]],[[["if",3]],["bool",15]],[[["impl",3]],["bool",15]],[[["in",3]],["bool",15]],[[["let",3]],["bool",15]],[[["loop",3]],["bool",15]],[[["macro",3]],["bool",15]],[[["match",3]],["bool",15]],[[["mod",3]],["bool",15]],[[["move",3]],["bool",15]],[[["mut",3]],["bool",15]],[[["override",3]],["bool",15]],[[["priv",3]],["bool",15]],[[["pub",3]],["bool",15]],[[["ref",3]],["bool",15]],[[["return",3]],["bool",15]],[[["selftype",3]],["bool",15]],[[["selfvalue",3]],["bool",15]],[[["static",3]],["bool",15]],[[["struct",3]],["bool",15]],[[["super",3]],["bool",15]],[[["trait",3]],["bool",15]],[[["try",3]],["bool",15]],[[["type",3]],["bool",15]],[[["typeof",3]],["bool",15]],[[["union",3]],["bool",15]],[[["unsafe",3]],["bool",15]],[[["unsized",3]],["bool",15]],[[["use",3]],["bool",15]],[[["virtual",3]],["bool",15]],[[["where",3]],["bool",15]],[[["while",3]],["bool",15]],[[["yield",3]],["bool",15]],[[["add",3]],["bool",15]],[[["addeq",3]],["bool",15]],[[["and",3]],["bool",15]],[[["andand",3]],["bool",15]],[[["andeq",3]],["bool",15]],[[["at",3]],["bool",15]],[[["bang",3]],["bool",15]],[[["caret",3]],["bool",15]],[[["careteq",3]],["bool",15]],[[["colon",3]],["bool",15]],[[["colon2",3]],["bool",15]],[[["comma",3]],["bool",15]],[[["div",3]],["bool",15]],[[["diveq",3]],["bool",15]],[[["dollar",3]],["bool",15]],[[["dot",3]],["bool",15]],[[["dot2",3]],["bool",15]],[[["dot3",3]],["bool",15]],[[["dotdoteq",3]],["bool",15]],[[["eq",3]],["bool",15]],[[["eqeq",3]],["bool",15]],[[["ge",3]],["bool",15]],[[["gt",3]],["bool",15]],[[["le",3]],["bool",15]],[[["lt",3]],["bool",15]],[[["muleq",3]],["bool",15]],[[["ne",3]],["bool",15]],[[["or",3]],["bool",15]],[[["oreq",3]],["bool",15]],[[["oror",3]],["bool",15]],[[["pound",3]],["bool",15]],[[["question",3]],["bool",15]],[[["rarrow",3]],["bool",15]],[[["larrow",3]],["bool",15]],[[["rem",3]],["bool",15]],[[["remeq",3]],["bool",15]],[[["fatarrow",3]],["bool",15]],[[["semi",3]],["bool",15]],[[["shl",3]],["bool",15]],[[["shleq",3]],["bool",15]],[[["shr",3]],["bool",15]],[[["shreq",3]],["bool",15]],[[["star",3]],["bool",15]],[[["sub",3]],["bool",15]],[[["subeq",3]],["bool",15]],[[["tilde",3]],["bool",15]],[[["brace",3]],["bool",15]],[[["bracket",3]],["bool",15]],[[["paren",3]],["bool",15]],[[["group",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["lifetime",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["lifetime",3]],[["option",4],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]]],[[["usizeintoiterator",8]]],[[["intoiterator",8]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["tokenstream",3]]],[[["formatter",3]],["result",6]],[[],[["option",4],["span",3]]],[[["formatter",3]],["result",6]],[[],[["option",4],["span",3]]],[[["span",3],["str",15]],["ident",3]],[[],["span",3]],[[["span",3]]],[[],[["result",6],["meta",4]]],[[],[["parse",8],["result",6]]],[[["parser",8]],["result",6]],[[["parsestream",6]],[["vec",3],["result",6]]],[[["parsestream",6]],[["vec",3],["result",6]]],[[],["path",3]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[],[["field",3],["iter",3]]],[[],[["field",3],["itermut",3]]],[[],["usize",15]],[[],["bool",15]],[[["parsestream",6]],[["expr",4],["result",6]]],[[],["typeparams",3]],[[],["typeparamsmut",3]],[[],["lifetimes",3]],[[],["lifetimesmut",3]],[[],["constparams",3]],[[],["constparamsmut",3]],[[],["whereclause",3]],[[]],[[],["turbofish",3]],[[["lifetime",3]]],[[],[["fnarg",4],["option",4]]],[[],[["lifetime",3],["option",4]]],[[["span",3],["str",15]]],[[],["span",3]],[[["span",3]]],[[["literal",3]]],[[],["str",15]],[[],["span",3]],[[["span",3]]],[[["span",3],["str",15]]],[[],["string",3]],[[],[["parse",8],["result",6]]],[[["parser",8]],["result",6]],[[],["span",3]],[[["span",3]]],[[],["str",15]],[[["span",3]]],[[],[["vec",3],["u8",15]]],[[],["span",3]],[[["span",3]]],[[],["str",15]],[[["span",3],["u8",15]]],[[],["u8",15]],[[],["span",3]],[[["span",3]]],[[],["str",15]],[[["char",15],["span",3]]],[[],["char",15]],[[],["span",3]],[[["span",3]]],[[],["str",15]],[[["span",3],["str",15]]],[[],["str",15]],[[],["result",6]],[[],["str",15]],[[],["span",3]],[[["span",3]]],[[["span",3],["str",15]]],[[],["str",15]],[[],["result",6]],[[],["str",15]],[[],["span",3]],[[["span",3]]],[[["bool",15],["span",3]]],[[],["bool",15]],[[],["span",3]],[[["span",3]]],[[],[["parse",8],["result",6]]],[[["parser",8]],["result",6]],[[["parsestream",6]],[["vec",3],["result",6]]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[["parsestream",6]],["result",6]],[[],["bool",15]],[[],[["ident",3],["option",4]]],[[],["bool",15]],[[["abi",3]]],[[["anglebracketedgenericarguments",3]]],[[["arm",3]]],[[["attrstyle",4]]],[[["attribute",3]]],[[["barefnarg",3]]],[[["binop",4]]],[[["binding",3]]],[[["block",3]]],[[["boundlifetimes",3]]],[[["constparam",3]]],[[["constraint",3]]],[[["data",4]]],[[["dataenum",3]]],[[["datastruct",3]]],[[["dataunion",3]]],[[["deriveinput",3]]],[[["expr",4]]],[[["exprarray",3]]],[[["exprassign",3]]],[[["exprassignop",3]]],[[["exprasync",3]]],[[["exprawait",3]]],[[["exprbinary",3]]],[[["exprblock",3]]],[[["exprbox",3]]],[[["exprbreak",3]]],[[["exprcall",3]]],[[["exprcast",3]]],[[["exprclosure",3]]],[[["exprcontinue",3]]],[[["exprfield",3]]],[[["exprforloop",3]]],[[["exprgroup",3]]],[[["exprif",3]]],[[["exprindex",3]]],[[["exprlet",3]]],[[["exprlit",3]]],[[["exprloop",3]]],[[["exprmacro",3]]],[[["exprmatch",3]]],[[["exprmethodcall",3]]],[[["exprparen",3]]],[[["exprpath",3]]],[[["exprrange",3]]],[[["exprreference",3]]],[[["exprrepeat",3]]],[[["exprreturn",3]]],[[["exprstruct",3]]],[[["exprtry",3]]],[[["exprtryblock",3]]],[[["exprtuple",3]]],[[["exprtype",3]]],[[["exprunary",3]]],[[["exprunsafe",3]]],[[["exprwhile",3]]],[[["expryield",3]]],[[["field",3]]],[[["fieldpat",3]]],[[["fieldvalue",3]]],[[["fields",4]]],[[["fieldsnamed",3]]],[[["fieldsunnamed",3]]],[[["file",3]]],[[["fnarg",4]]],[[["foreignitem",4]]],[[["foreignitemfn",3]]],[[["foreignitemmacro",3]]],[[["foreignitemstatic",3]]],[[["foreignitemtype",3]]],[[["genericargument",4]]],[[["genericmethodargument",4]]],[[["genericparam",4]]],[[["generics",3]]],[[["ident",3]]],[[["implitem",4]]],[[["implitemconst",3]]],[[["implitemmacro",3]]],[[["implitemmethod",3]]],[[["implitemtype",3]]],[[["index",3]]],[[["item",4]]],[[["itemconst",3]]],[[["itemenum",3]]],[[["itemexterncrate",3]]],[[["itemfn",3]]],[[["itemforeignmod",3]]],[[["itemimpl",3]]],[[["itemmacro",3]]],[[["itemmacro2",3]]],[[["itemmod",3]]],[[["itemstatic",3]]],[[["itemstruct",3]]],[[["itemtrait",3]]],[[["itemtraitalias",3]]],[[["itemtype",3]]],[[["itemunion",3]]],[[["itemuse",3]]],[[["label",3]]],[[["lifetime",3]]],[[["lifetimedef",3]]],[[["lit",4]]],[[["litbool",3]]],[[["litbyte",3]]],[[["litbytestr",3]]],[[["litchar",3]]],[[["litfloat",3]]],[[["litint",3]]],[[["litstr",3]]],[[["local",3]]],[[["macro",3]]],[[["macrodelimiter",4]]],[[["member",4]]],[[["meta",4]]],[[["metalist",3]]],[[["metanamevalue",3]]],[[["methodturbofish",3]]],[[["nestedmeta",4]]],[[["parenthesizedgenericarguments",3]]],[[["pat",4]]],[[["patbox",3]]],[[["patident",3]]],[[["patlit",3]]],[[["patmacro",3]]],[[["pator",3]]],[[["patpath",3]]],[[["patrange",3]]],[[["patreference",3]]],[[["patrest",3]]],[[["patslice",3]]],[[["patstruct",3]]],[[["pattuple",3]]],[[["pattuplestruct",3]]],[[["pattype",3]]],[[["patwild",3]]],[[["path",3]]],[[["patharguments",4]]],[[["pathsegment",3]]],[[["predicateeq",3]]],[[["predicatelifetime",3]]],[[["predicatetype",3]]],[[["qself",3]]],[[["rangelimits",4]]],[[["receiver",3]]],[[["returntype",4]]],[[["signature",3]]],[[["span",3]]],[[["stmt",4]]],[[["traitbound",3]]],[[["traitboundmodifier",4]]],[[["traititem",4]]],[[["traititemconst",3]]],[[["traititemmacro",3]]],[[["traititemmethod",3]]],[[["traititemtype",3]]],[[["type",4]]],[[["typearray",3]]],[[["typebarefn",3]]],[[["typegroup",3]]],[[["typeimpltrait",3]]],[[["typeinfer",3]]],[[["typemacro",3]]],[[["typenever",3]]],[[["typeparam",3]]],[[["typeparambound",4]]],[[["typeparen",3]]],[[["typepath",3]]],[[["typeptr",3]]],[[["typereference",3]]],[[["typeslice",3]]],[[["typetraitobject",3]]],[[["typetuple",3]]],[[["unop",4]]],[[["useglob",3]]],[[["usegroup",3]]],[[["usename",3]]],[[["usepath",3]]],[[["userename",3]]],[[["usetree",4]]],[[["variadic",3]]],[[["variant",3]]],[[["viscrate",3]]],[[["vispublic",3]]],[[["visrestricted",3]]],[[["visibility",4]]],[[["whereclause",3]]],[[["wherepredicate",4]]],[[["peek",8]],["bool",15]],[[],["error",3]]],"p":[[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"SelfType"],[3,"SelfValue"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"TokenBuffer"],[3,"Cursor"],[8,"IdentExt"],[3,"Punctuated"],[4,"Pair"],[8,"Spanned"],[8,"Visit"],[8,"Speculative"],[8,"Parse"],[3,"StepCursor"],[3,"ParseBuffer"],[8,"Parser"],[3,"Error"],[4,"AttrStyle"],[3,"Attribute"],[4,"Meta"],[3,"MetaList"],[3,"MetaNameValue"],[4,"NestedMeta"],[3,"Field"],[4,"Fields"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[4,"Visibility"],[3,"Arm"],[3,"FieldValue"],[4,"GenericMethodArgument"],[3,"Label"],[3,"MethodTurbofish"],[4,"RangeLimits"],[4,"Expr"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprAwait"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIndex"],[3,"ExprLet"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[3,"Index"],[4,"Member"],[3,"BoundLifetimes"],[3,"ConstParam"],[4,"GenericParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[4,"TraitBoundModifier"],[3,"TypeParam"],[4,"TypeParamBound"],[3,"WhereClause"],[4,"WherePredicate"],[4,"FnArg"],[4,"ForeignItem"],[3,"ForeignItemFn"],[3,"ForeignItemMacro"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[4,"ImplItem"],[3,"ImplItemConst"],[3,"ImplItemMacro"],[3,"ImplItemMethod"],[3,"ImplItemType"],[4,"Item"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemTraitAlias"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[3,"Receiver"],[3,"Signature"],[4,"TraitItem"],[3,"TraitItemConst"],[3,"TraitItemMacro"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"UseGlob"],[3,"UseGroup"],[3,"UseName"],[3,"UsePath"],[3,"UseRename"],[4,"UseTree"],[3,"File"],[3,"Lifetime"],[4,"Lit"],[3,"LitBool"],[4,"StrStyle"],[3,"Macro"],[4,"MacroDelimiter"],[4,"Data"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[4,"BinOp"],[4,"UnOp"],[3,"Block"],[3,"Local"],[4,"Stmt"],[3,"Abi"],[3,"BareFnArg"],[4,"ReturnType"],[4,"Type"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Variadic"],[3,"FieldPat"],[4,"Pat"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatOr"],[3,"PatPath"],[3,"PatRange"],[3,"PatReference"],[3,"PatRest"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatType"],[3,"PatWild"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[4,"GenericArgument"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[4,"PathArguments"],[3,"PathSegment"],[3,"QSelf"],[3,"Ident"],[3,"ImplGenerics"],[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Lookahead1"],[3,"Nothing"]]},\
"terminal_size":{"doc":"A simple utility for getting the size of a terminal.","t":[3,12,3,12,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Width","0","Height","0","terminal_size","terminal_size_using_fd","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","fmt","fmt"],"q":["terminal_size","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Returns the size of the terminal defaulting to STDOUT, if …","Returns the size of the terminal using the given file …","","","","","","","","","","","","","","","",""],"i":[0,1,0,2,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,1,2],"f":[null,null,null,null,[[],["option",4]],[[["rawfd",6]],["option",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]]],"p":[[3,"Width"],[3,"Height"]]},\
"thread_local":{"doc":"Per-object thread-local storage","t":[3,3,3,3,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CachedIntoIter","CachedIterMut","CachedThreadLocal","ThreadLocal","new","with_capacity","get","get_or","get_or_try","iter","iter_mut","clear","get_or_default","Iter","IterMut","IntoIter","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","drop","into_iter","into_iter","next","size_hint","next","size_hint","next","size_hint","next","size_hint","next","size_hint","default","default","fmt","fmt","fmt","fmt","fmt","new","get","get_or","get_or_try","iter_mut","clear","get_or_default"],"q":["thread_local","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator that moves out of a <code>CachedThreadLocal</code>.","Mutable iterator over the contents of a <code>CachedThreadLocal</code>.","Wrapper around [<code>ThreadLocal</code>].","Thread-local variable wrapper","Creates a new empty <code>ThreadLocal</code>.","Creates a new <code>ThreadLocal</code> with an initial capacity. If …","Returns the element for the current thread, if it exists.","Returns the element for the current thread, or creates it …","Returns the element for the current thread, or creates it …","Returns an iterator over the local values of all threads …","Returns a mutable iterator over the local values of all …","Removes all thread-specific values from the <code>ThreadLocal</code>, …","Returns the element for the current thread, or creates a …","Iterator over the contents of a <code>ThreadLocal</code>.","Mutable iterator over the contents of a <code>ThreadLocal</code>.","An iterator that moves out of a <code>ThreadLocal</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new empty <code>CachedThreadLocal</code>.","Returns the element for the current thread, if it exists.","Returns the element for the current thread, or creates it …","Returns the element for the current thread, or creates it …","Returns a mutable iterator over the local values of all …","Removes all thread-specific values from the <code>ThreadLocal</code>, …","Returns the element for the current thread, or creates a …"],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,1,2,1,3,3,4,4,5,5,6,6,7,7,2,1,2,1,5,6,7,2,2,2,2,2,2,2],"f":[null,null,null,null,[[],["threadlocal",3]],[[["usize",15]],["threadlocal",3]],[[],["option",4]],[[]],[[],["result",4]],[[],["iter",3]],[[],["itermut",3]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["cachedintoiter",3]],[[],["intoiter",3]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["cachedthreadlocal",3]],[[],["threadlocal",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["cachedthreadlocal",3]],[[],["option",4]],[[]],[[],["result",4]],[[],["cacheditermut",3]],[[]],[[]]],"p":[[3,"ThreadLocal"],[3,"CachedThreadLocal"],[3,"CachedIterMut"],[3,"CachedIntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"]]},\
"typenum":{"doc":"This crate provides type-level numbers evaluated at …","t":[0,3,11,3,11,0,3,3,11,11,3,11,0,8,8,10,8,18,18,10,10,8,18,18,18,18,18,18,18,18,18,18,10,10,10,10,10,10,10,10,10,10,8,18,18,18,18,18,10,10,10,10,10,8,8,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,8,16,8,16,8,16,10,8,16,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,10,8,16,8,16,8,16,0,3,11,3,11,8,16,6,8,16,6,0,3,3,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,3,14,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["bit","B0","new","B1","new","int","PInt","NInt","new","new","Z0","new","marker_traits","NonZero","Ord","to_ordering","Bit","U8","BOOL","to_u8","to_bool","Unsigned","U8","U16","U32","U64","USIZE","I8","I16","I32","I64","ISIZE","to_u8","to_u16","to_u32","to_u64","to_usize","to_i8","to_i16","to_i32","to_i64","to_isize","Integer","I8","I16","I32","I64","ISIZE","to_i8","to_i16","to_i32","to_i64","to_isize","TypeArray","PowerOfTwo","operator_aliases","And","Or","Xor","Shleft","Shright","Sum","Diff","Prod","Quot","Mod","PartialQuot","Negate","AbsVal","Exp","Gcf","Add1","Sub1","Double","Square","Cube","Sqrt","Compare","Length","Minimum","Maximum","Le","Eq","Gr","GrEq","LeEq","NotEq","Log2","type_operators","Same","Output","Abs","Output","Pow","Output","powi","Cmp","Output","Len","Output","len","PartialDiv","Output","partial_div","Min","Output","min","Max","Output","max","IsLess","Output","is_less","IsEqual","Output","is_equal","IsGreater","Output","is_greater","IsLessOrEqual","Output","is_less_or_equal","IsNotEqual","Output","is_not_equal","IsGreaterOrEqual","Output","is_greater_or_equal","SquareRoot","Output","Logarithm2","Output","Gcd","Output","uint","UTerm","new","UInt","new","GetBit","Output","GetBitOut","SetBit","Output","SetBitOut","array","ATerm","TArr","consts","True","False","U0","U1","P1","N1","U2","P2","N2","U3","P3","N3","U4","P4","N4","U5","P5","N5","U6","P6","N6","U7","P7","N7","U8","P8","N8","U9","P9","N9","U10","P10","N10","U11","P11","N11","U12","P12","N12","U13","P13","N13","U14","P14","N14","U15","P15","N15","U16","P16","N16","U17","P17","N17","U18","P18","N18","U19","P19","N19","U20","P20","N20","U21","P21","N21","U22","P22","N22","U23","P23","N23","U24","P24","N24","U25","P25","N25","U26","P26","N26","U27","P27","N27","U28","P28","N28","U29","P29","N29","U30","P30","N30","U31","P31","N31","U32","P32","N32","U33","P33","N33","U34","P34","N34","U35","P35","N35","U36","P36","N36","U37","P37","N37","U38","P38","N38","U39","P39","N39","U40","P40","N40","U41","P41","N41","U42","P42","N42","U43","P43","N43","U44","P44","N44","U45","P45","N45","U46","P46","N46","U47","P47","N47","U48","P48","N48","U49","P49","N49","U50","P50","N50","U51","P51","N51","U52","P52","N52","U53","P53","N53","U54","P54","N54","U55","P55","N55","U56","P56","N56","U57","P57","N57","U58","P58","N58","U59","P59","N59","U60","P60","N60","U61","P61","N61","U62","P62","N62","U63","P63","N63","U64","P64","N64","U65","P65","N65","U66","P66","N66","U67","P67","N67","U68","P68","N68","U69","P69","N69","U70","P70","N70","U71","P71","N71","U72","P72","N72","U73","P73","N73","U74","P74","N74","U75","P75","N75","U76","P76","N76","U77","P77","N77","U78","P78","N78","U79","P79","N79","U80","P80","N80","U81","P81","N81","U82","P82","N82","U83","P83","N83","U84","P84","N84","U85","P85","N85","U86","P86","N86","U87","P87","N87","U88","P88","N88","U89","P89","N89","U90","P90","N90","U91","P91","N91","U92","P92","N92","U93","P93","N93","U94","P94","N94","U95","P95","N95","U96","P96","N96","U97","P97","N97","U98","P98","N98","U99","P99","N99","U100","P100","N100","U101","P101","N101","U102","P102","N102","U103","P103","N103","U104","P104","N104","U105","P105","N105","U106","P106","N106","U107","P107","N107","U108","P108","N108","U109","P109","N109","U110","P110","N110","U111","P111","N111","U112","P112","N112","U113","P113","N113","U114","P114","N114","U115","P115","N115","U116","P116","N116","U117","P117","N117","U118","P118","N118","U119","P119","N119","U120","P120","N120","U121","P121","N121","U122","P122","N122","U123","P123","N123","U124","P124","N124","U125","P125","N125","U126","P126","N126","U127","P127","N127","U128","P128","N128","U129","P129","N129","U130","P130","N130","U131","P131","N131","U132","P132","N132","U133","P133","N133","U134","P134","N134","U135","P135","N135","U136","P136","N136","U137","P137","N137","U138","P138","N138","U139","P139","N139","U140","P140","N140","U141","P141","N141","U142","P142","N142","U143","P143","N143","U144","P144","N144","U145","P145","N145","U146","P146","N146","U147","P147","N147","U148","P148","N148","U149","P149","N149","U150","P150","N150","U151","P151","N151","U152","P152","N152","U153","P153","N153","U154","P154","N154","U155","P155","N155","U156","P156","N156","U157","P157","N157","U158","P158","N158","U159","P159","N159","U160","P160","N160","U161","P161","N161","U162","P162","N162","U163","P163","N163","U164","P164","N164","U165","P165","N165","U166","P166","N166","U167","P167","N167","U168","P168","N168","U169","P169","N169","U170","P170","N170","U171","P171","N171","U172","P172","N172","U173","P173","N173","U174","P174","N174","U175","P175","N175","U176","P176","N176","U177","P177","N177","U178","P178","N178","U179","P179","N179","U180","P180","N180","U181","P181","N181","U182","P182","N182","U183","P183","N183","U184","P184","N184","U185","P185","N185","U186","P186","N186","U187","P187","N187","U188","P188","N188","U189","P189","N189","U190","P190","N190","U191","P191","N191","U192","P192","N192","U193","P193","N193","U194","P194","N194","U195","P195","N195","U196","P196","N196","U197","P197","N197","U198","P198","N198","U199","P199","N199","U200","P200","N200","U201","P201","N201","U202","P202","N202","U203","P203","N203","U204","P204","N204","U205","P205","N205","U206","P206","N206","U207","P207","N207","U208","P208","N208","U209","P209","N209","U210","P210","N210","U211","P211","N211","U212","P212","N212","U213","P213","N213","U214","P214","N214","U215","P215","N215","U216","P216","N216","U217","P217","N217","U218","P218","N218","U219","P219","N219","U220","P220","N220","U221","P221","N221","U222","P222","N222","U223","P223","N223","U224","P224","N224","U225","P225","N225","U226","P226","N226","U227","P227","N227","U228","P228","N228","U229","P229","N229","U230","P230","N230","U231","P231","N231","U232","P232","N232","U233","P233","N233","U234","P234","N234","U235","P235","N235","U236","P236","N236","U237","P237","N237","U238","P238","N238","U239","P239","N239","U240","P240","N240","U241","P241","N241","U242","P242","N242","U243","P243","N243","U244","P244","N244","U245","P245","N245","U246","P246","N246","U247","P247","N247","U248","P248","N248","U249","P249","N249","U250","P250","N250","U251","P251","N251","U252","P252","N252","U253","P253","N253","U254","P254","N254","U255","P255","N255","U256","P256","N256","U257","P257","N257","U258","P258","N258","U259","P259","N259","U260","P260","N260","U261","P261","N261","U262","P262","N262","U263","P263","N263","U264","P264","N264","U265","P265","N265","U266","P266","N266","U267","P267","N267","U268","P268","N268","U269","P269","N269","U270","P270","N270","U271","P271","N271","U272","P272","N272","U273","P273","N273","U274","P274","N274","U275","P275","N275","U276","P276","N276","U277","P277","N277","U278","P278","N278","U279","P279","N279","U280","P280","N280","U281","P281","N281","U282","P282","N282","U283","P283","N283","U284","P284","N284","U285","P285","N285","U286","P286","N286","U287","P287","N287","U288","P288","N288","U289","P289","N289","U290","P290","N290","U291","P291","N291","U292","P292","N292","U293","P293","N293","U294","P294","N294","U295","P295","N295","U296","P296","N296","U297","P297","N297","U298","P298","N298","U299","P299","N299","U300","P300","N300","U301","P301","N301","U302","P302","N302","U303","P303","N303","U304","P304","N304","U305","P305","N305","U306","P306","N306","U307","P307","N307","U308","P308","N308","U309","P309","N309","U310","P310","N310","U311","P311","N311","U312","P312","N312","U313","P313","N313","U314","P314","N314","U315","P315","N315","U316","P316","N316","U317","P317","N317","U318","P318","N318","U319","P319","N319","U320","P320","N320","U321","P321","N321","U322","P322","N322","U323","P323","N323","U324","P324","N324","U325","P325","N325","U326","P326","N326","U327","P327","N327","U328","P328","N328","U329","P329","N329","U330","P330","N330","U331","P331","N331","U332","P332","N332","U333","P333","N333","U334","P334","N334","U335","P335","N335","U336","P336","N336","U337","P337","N337","U338","P338","N338","U339","P339","N339","U340","P340","N340","U341","P341","N341","U342","P342","N342","U343","P343","N343","U344","P344","N344","U345","P345","N345","U346","P346","N346","U347","P347","N347","U348","P348","N348","U349","P349","N349","U350","P350","N350","U351","P351","N351","U352","P352","N352","U353","P353","N353","U354","P354","N354","U355","P355","N355","U356","P356","N356","U357","P357","N357","U358","P358","N358","U359","P359","N359","U360","P360","N360","U361","P361","N361","U362","P362","N362","U363","P363","N363","U364","P364","N364","U365","P365","N365","U366","P366","N366","U367","P367","N367","U368","P368","N368","U369","P369","N369","U370","P370","N370","U371","P371","N371","U372","P372","N372","U373","P373","N373","U374","P374","N374","U375","P375","N375","U376","P376","N376","U377","P377","N377","U378","P378","N378","U379","P379","N379","U380","P380","N380","U381","P381","N381","U382","P382","N382","U383","P383","N383","U384","P384","N384","U385","P385","N385","U386","P386","N386","U387","P387","N387","U388","P388","N388","U389","P389","N389","U390","P390","N390","U391","P391","N391","U392","P392","N392","U393","P393","N393","U394","P394","N394","U395","P395","N395","U396","P396","N396","U397","P397","N397","U398","P398","N398","U399","P399","N399","U400","P400","N400","U401","P401","N401","U402","P402","N402","U403","P403","N403","U404","P404","N404","U405","P405","N405","U406","P406","N406","U407","P407","N407","U408","P408","N408","U409","P409","N409","U410","P410","N410","U411","P411","N411","U412","P412","N412","U413","P413","N413","U414","P414","N414","U415","P415","N415","U416","P416","N416","U417","P417","N417","U418","P418","N418","U419","P419","N419","U420","P420","N420","U421","P421","N421","U422","P422","N422","U423","P423","N423","U424","P424","N424","U425","P425","N425","U426","P426","N426","U427","P427","N427","U428","P428","N428","U429","P429","N429","U430","P430","N430","U431","P431","N431","U432","P432","N432","U433","P433","N433","U434","P434","N434","U435","P435","N435","U436","P436","N436","U437","P437","N437","U438","P438","N438","U439","P439","N439","U440","P440","N440","U441","P441","N441","U442","P442","N442","U443","P443","N443","U444","P444","N444","U445","P445","N445","U446","P446","N446","U447","P447","N447","U448","P448","N448","U449","P449","N449","U450","P450","N450","U451","P451","N451","U452","P452","N452","U453","P453","N453","U454","P454","N454","U455","P455","N455","U456","P456","N456","U457","P457","N457","U458","P458","N458","U459","P459","N459","U460","P460","N460","U461","P461","N461","U462","P462","N462","U463","P463","N463","U464","P464","N464","U465","P465","N465","U466","P466","N466","U467","P467","N467","U468","P468","N468","U469","P469","N469","U470","P470","N470","U471","P471","N471","U472","P472","N472","U473","P473","N473","U474","P474","N474","U475","P475","N475","U476","P476","N476","U477","P477","N477","U478","P478","N478","U479","P479","N479","U480","P480","N480","U481","P481","N481","U482","P482","N482","U483","P483","N483","U484","P484","N484","U485","P485","N485","U486","P486","N486","U487","P487","N487","U488","P488","N488","U489","P489","N489","U490","P490","N490","U491","P491","N491","U492","P492","N492","U493","P493","N493","U494","P494","N494","U495","P495","N495","U496","P496","N496","U497","P497","N497","U498","P498","N498","U499","P499","N499","U500","P500","N500","U501","P501","N501","U502","P502","N502","U503","P503","N503","U504","P504","N504","U505","P505","N505","U506","P506","N506","U507","P507","N507","U508","P508","N508","U509","P509","N509","U510","P510","N510","U511","P511","N511","U512","P512","N512","U513","P513","N513","U514","P514","N514","U515","P515","N515","U516","P516","N516","U517","P517","N517","U518","P518","N518","U519","P519","N519","U520","P520","N520","U521","P521","N521","U522","P522","N522","U523","P523","N523","U524","P524","N524","U525","P525","N525","U526","P526","N526","U527","P527","N527","U528","P528","N528","U529","P529","N529","U530","P530","N530","U531","P531","N531","U532","P532","N532","U533","P533","N533","U534","P534","N534","U535","P535","N535","U536","P536","N536","U537","P537","N537","U538","P538","N538","U539","P539","N539","U540","P540","N540","U541","P541","N541","U542","P542","N542","U543","P543","N543","U544","P544","N544","U545","P545","N545","U546","P546","N546","U547","P547","N547","U548","P548","N548","U549","P549","N549","U550","P550","N550","U551","P551","N551","U552","P552","N552","U553","P553","N553","U554","P554","N554","U555","P555","N555","U556","P556","N556","U557","P557","N557","U558","P558","N558","U559","P559","N559","U560","P560","N560","U561","P561","N561","U562","P562","N562","U563","P563","N563","U564","P564","N564","U565","P565","N565","U566","P566","N566","U567","P567","N567","U568","P568","N568","U569","P569","N569","U570","P570","N570","U571","P571","N571","U572","P572","N572","U573","P573","N573","U574","P574","N574","U575","P575","N575","U576","P576","N576","U577","P577","N577","U578","P578","N578","U579","P579","N579","U580","P580","N580","U581","P581","N581","U582","P582","N582","U583","P583","N583","U584","P584","N584","U585","P585","N585","U586","P586","N586","U587","P587","N587","U588","P588","N588","U589","P589","N589","U590","P590","N590","U591","P591","N591","U592","P592","N592","U593","P593","N593","U594","P594","N594","U595","P595","N595","U596","P596","N596","U597","P597","N597","U598","P598","N598","U599","P599","N599","U600","P600","N600","U601","P601","N601","U602","P602","N602","U603","P603","N603","U604","P604","N604","U605","P605","N605","U606","P606","N606","U607","P607","N607","U608","P608","N608","U609","P609","N609","U610","P610","N610","U611","P611","N611","U612","P612","N612","U613","P613","N613","U614","P614","N614","U615","P615","N615","U616","P616","N616","U617","P617","N617","U618","P618","N618","U619","P619","N619","U620","P620","N620","U621","P621","N621","U622","P622","N622","U623","P623","N623","U624","P624","N624","U625","P625","N625","U626","P626","N626","U627","P627","N627","U628","P628","N628","U629","P629","N629","U630","P630","N630","U631","P631","N631","U632","P632","N632","U633","P633","N633","U634","P634","N634","U635","P635","N635","U636","P636","N636","U637","P637","N637","U638","P638","N638","U639","P639","N639","U640","P640","N640","U641","P641","N641","U642","P642","N642","U643","P643","N643","U644","P644","N644","U645","P645","N645","U646","P646","N646","U647","P647","N647","U648","P648","N648","U649","P649","N649","U650","P650","N650","U651","P651","N651","U652","P652","N652","U653","P653","N653","U654","P654","N654","U655","P655","N655","U656","P656","N656","U657","P657","N657","U658","P658","N658","U659","P659","N659","U660","P660","N660","U661","P661","N661","U662","P662","N662","U663","P663","N663","U664","P664","N664","U665","P665","N665","U666","P666","N666","U667","P667","N667","U668","P668","N668","U669","P669","N669","U670","P670","N670","U671","P671","N671","U672","P672","N672","U673","P673","N673","U674","P674","N674","U675","P675","N675","U676","P676","N676","U677","P677","N677","U678","P678","N678","U679","P679","N679","U680","P680","N680","U681","P681","N681","U682","P682","N682","U683","P683","N683","U684","P684","N684","U685","P685","N685","U686","P686","N686","U687","P687","N687","U688","P688","N688","U689","P689","N689","U690","P690","N690","U691","P691","N691","U692","P692","N692","U693","P693","N693","U694","P694","N694","U695","P695","N695","U696","P696","N696","U697","P697","N697","U698","P698","N698","U699","P699","N699","U700","P700","N700","U701","P701","N701","U702","P702","N702","U703","P703","N703","U704","P704","N704","U705","P705","N705","U706","P706","N706","U707","P707","N707","U708","P708","N708","U709","P709","N709","U710","P710","N710","U711","P711","N711","U712","P712","N712","U713","P713","N713","U714","P714","N714","U715","P715","N715","U716","P716","N716","U717","P717","N717","U718","P718","N718","U719","P719","N719","U720","P720","N720","U721","P721","N721","U722","P722","N722","U723","P723","N723","U724","P724","N724","U725","P725","N725","U726","P726","N726","U727","P727","N727","U728","P728","N728","U729","P729","N729","U730","P730","N730","U731","P731","N731","U732","P732","N732","U733","P733","N733","U734","P734","N734","U735","P735","N735","U736","P736","N736","U737","P737","N737","U738","P738","N738","U739","P739","N739","U740","P740","N740","U741","P741","N741","U742","P742","N742","U743","P743","N743","U744","P744","N744","U745","P745","N745","U746","P746","N746","U747","P747","N747","U748","P748","N748","U749","P749","N749","U750","P750","N750","U751","P751","N751","U752","P752","N752","U753","P753","N753","U754","P754","N754","U755","P755","N755","U756","P756","N756","U757","P757","N757","U758","P758","N758","U759","P759","N759","U760","P760","N760","U761","P761","N761","U762","P762","N762","U763","P763","N763","U764","P764","N764","U765","P765","N765","U766","P766","N766","U767","P767","N767","U768","P768","N768","U769","P769","N769","U770","P770","N770","U771","P771","N771","U772","P772","N772","U773","P773","N773","U774","P774","N774","U775","P775","N775","U776","P776","N776","U777","P777","N777","U778","P778","N778","U779","P779","N779","U780","P780","N780","U781","P781","N781","U782","P782","N782","U783","P783","N783","U784","P784","N784","U785","P785","N785","U786","P786","N786","U787","P787","N787","U788","P788","N788","U789","P789","N789","U790","P790","N790","U791","P791","N791","U792","P792","N792","U793","P793","N793","U794","P794","N794","U795","P795","N795","U796","P796","N796","U797","P797","N797","U798","P798","N798","U799","P799","N799","U800","P800","N800","U801","P801","N801","U802","P802","N802","U803","P803","N803","U804","P804","N804","U805","P805","N805","U806","P806","N806","U807","P807","N807","U808","P808","N808","U809","P809","N809","U810","P810","N810","U811","P811","N811","U812","P812","N812","U813","P813","N813","U814","P814","N814","U815","P815","N815","U816","P816","N816","U817","P817","N817","U818","P818","N818","U819","P819","N819","U820","P820","N820","U821","P821","N821","U822","P822","N822","U823","P823","N823","U824","P824","N824","U825","P825","N825","U826","P826","N826","U827","P827","N827","U828","P828","N828","U829","P829","N829","U830","P830","N830","U831","P831","N831","U832","P832","N832","U833","P833","N833","U834","P834","N834","U835","P835","N835","U836","P836","N836","U837","P837","N837","U838","P838","N838","U839","P839","N839","U840","P840","N840","U841","P841","N841","U842","P842","N842","U843","P843","N843","U844","P844","N844","U845","P845","N845","U846","P846","N846","U847","P847","N847","U848","P848","N848","U849","P849","N849","U850","P850","N850","U851","P851","N851","U852","P852","N852","U853","P853","N853","U854","P854","N854","U855","P855","N855","U856","P856","N856","U857","P857","N857","U858","P858","N858","U859","P859","N859","U860","P860","N860","U861","P861","N861","U862","P862","N862","U863","P863","N863","U864","P864","N864","U865","P865","N865","U866","P866","N866","U867","P867","N867","U868","P868","N868","U869","P869","N869","U870","P870","N870","U871","P871","N871","U872","P872","N872","U873","P873","N873","U874","P874","N874","U875","P875","N875","U876","P876","N876","U877","P877","N877","U878","P878","N878","U879","P879","N879","U880","P880","N880","U881","P881","N881","U882","P882","N882","U883","P883","N883","U884","P884","N884","U885","P885","N885","U886","P886","N886","U887","P887","N887","U888","P888","N888","U889","P889","N889","U890","P890","N890","U891","P891","N891","U892","P892","N892","U893","P893","N893","U894","P894","N894","U895","P895","N895","U896","P896","N896","U897","P897","N897","U898","P898","N898","U899","P899","N899","U900","P900","N900","U901","P901","N901","U902","P902","N902","U903","P903","N903","U904","P904","N904","U905","P905","N905","U906","P906","N906","U907","P907","N907","U908","P908","N908","U909","P909","N909","U910","P910","N910","U911","P911","N911","U912","P912","N912","U913","P913","N913","U914","P914","N914","U915","P915","N915","U916","P916","N916","U917","P917","N917","U918","P918","N918","U919","P919","N919","U920","P920","N920","U921","P921","N921","U922","P922","N922","U923","P923","N923","U924","P924","N924","U925","P925","N925","U926","P926","N926","U927","P927","N927","U928","P928","N928","U929","P929","N929","U930","P930","N930","U931","P931","N931","U932","P932","N932","U933","P933","N933","U934","P934","N934","U935","P935","N935","U936","P936","N936","U937","P937","N937","U938","P938","N938","U939","P939","N939","U940","P940","N940","U941","P941","N941","U942","P942","N942","U943","P943","N943","U944","P944","N944","U945","P945","N945","U946","P946","N946","U947","P947","N947","U948","P948","N948","U949","P949","N949","U950","P950","N950","U951","P951","N951","U952","P952","N952","U953","P953","N953","U954","P954","N954","U955","P955","N955","U956","P956","N956","U957","P957","N957","U958","P958","N958","U959","P959","N959","U960","P960","N960","U961","P961","N961","U962","P962","N962","U963","P963","N963","U964","P964","N964","U965","P965","N965","U966","P966","N966","U967","P967","N967","U968","P968","N968","U969","P969","N969","U970","P970","N970","U971","P971","N971","U972","P972","N972","U973","P973","N973","U974","P974","N974","U975","P975","N975","U976","P976","N976","U977","P977","N977","U978","P978","N978","U979","P979","N979","U980","P980","N980","U981","P981","N981","U982","P982","N982","U983","P983","N983","U984","P984","N984","U985","P985","N985","U986","P986","N986","U987","P987","N987","U988","P988","N988","U989","P989","N989","U990","P990","N990","U991","P991","N991","U992","P992","N992","U993","P993","N993","U994","P994","N994","U995","P995","N995","U996","P996","N996","U997","P997","N997","U998","P998","N998","U999","P999","N999","U1000","P1000","N1000","U1001","P1001","N1001","U1002","P1002","N1002","U1003","P1003","N1003","U1004","P1004","N1004","U1005","P1005","N1005","U1006","P1006","N1006","U1007","P1007","N1007","U1008","P1008","N1008","U1009","P1009","N1009","U1010","P1010","N1010","U1011","P1011","N1011","U1012","P1012","N1012","U1013","P1013","N1013","U1014","P1014","N1014","U1015","P1015","N1015","U1016","P1016","N1016","U1017","P1017","N1017","U1018","P1018","N1018","U1019","P1019","N1019","U1020","P1020","N1020","U1021","P1021","N1021","U1022","P1022","N1022","U1023","P1023","N1023","U1024","P1024","N1024","U2048","P2048","N2048","U4096","P4096","N4096","U8192","P8192","N8192","U16384","P16384","N16384","U32768","P32768","N32768","U65536","P65536","N65536","U131072","P131072","N131072","U262144","P262144","N262144","U524288","P524288","N524288","U1048576","P1048576","N1048576","U2097152","P2097152","N2097152","U4194304","P4194304","N4194304","U8388608","P8388608","N8388608","U16777216","P16777216","N16777216","U33554432","P33554432","N33554432","U67108864","P67108864","N67108864","U134217728","P134217728","N134217728","U268435456","P268435456","N268435456","U536870912","P536870912","N536870912","U1073741824","P1073741824","N1073741824","U2147483648","P2147483648","N2147483648","U4294967296","P4294967296","N4294967296","U8589934592","P8589934592","N8589934592","U17179869184","P17179869184","N17179869184","U34359738368","P34359738368","N34359738368","U68719476736","P68719476736","N68719476736","U137438953472","P137438953472","N137438953472","U274877906944","P274877906944","N274877906944","U549755813888","P549755813888","N549755813888","U1099511627776","P1099511627776","N1099511627776","U2199023255552","P2199023255552","N2199023255552","U4398046511104","P4398046511104","N4398046511104","U8796093022208","P8796093022208","N8796093022208","U17592186044416","P17592186044416","N17592186044416","U35184372088832","P35184372088832","N35184372088832","U70368744177664","P70368744177664","N70368744177664","U140737488355328","P140737488355328","N140737488355328","U281474976710656","P281474976710656","N281474976710656","U562949953421312","P562949953421312","N562949953421312","U1125899906842624","P1125899906842624","N1125899906842624","U2251799813685248","P2251799813685248","N2251799813685248","U4503599627370496","P4503599627370496","N4503599627370496","U9007199254740992","P9007199254740992","N9007199254740992","U18014398509481984","P18014398509481984","N18014398509481984","U36028797018963968","P36028797018963968","N36028797018963968","U72057594037927936","P72057594037927936","N72057594037927936","U144115188075855872","P144115188075855872","N144115188075855872","U288230376151711744","P288230376151711744","N288230376151711744","U576460752303423488","P576460752303423488","N576460752303423488","U1152921504606846976","P1152921504606846976","N1152921504606846976","U2305843009213693952","P2305843009213693952","N2305843009213693952","U4611686018427387904","P4611686018427387904","N4611686018427387904","U9223372036854775808","U10000","P10000","N10000","U100000","P100000","N100000","U1000000","P1000000","N1000000","U10000000","P10000000","N10000000","U100000000","P100000000","N100000000","U1000000000","P1000000000","N1000000000","U10000000000","P10000000000","N10000000000","U100000000000","P100000000000","N100000000000","U1000000000000","P1000000000000","N1000000000000","U10000000000000","P10000000000000","N10000000000000","U100000000000000","P100000000000000","N100000000000000","U1000000000000000","P1000000000000000","N1000000000000000","U10000000000000000","P10000000000000000","N10000000000000000","U100000000000000000","P100000000000000000","N100000000000000000","U1000000000000000000","P1000000000000000000","N1000000000000000000","U10000000000000000000","True","False","U0","U1","P1","N1","U2","P2","N2","U3","P3","N3","U4","P4","N4","U5","P5","N5","U6","P6","N6","U7","P7","N7","U8","P8","N8","U9","P9","N9","U10","P10","N10","U11","P11","N11","U12","P12","N12","U13","P13","N13","U14","P14","N14","U15","P15","N15","U16","P16","N16","U17","P17","N17","U18","P18","N18","U19","P19","N19","U20","P20","N20","U21","P21","N21","U22","P22","N22","U23","P23","N23","U24","P24","N24","U25","P25","N25","U26","P26","N26","U27","P27","N27","U28","P28","N28","U29","P29","N29","U30","P30","N30","U31","P31","N31","U32","P32","N32","U33","P33","N33","U34","P34","N34","U35","P35","N35","U36","P36","N36","U37","P37","N37","U38","P38","N38","U39","P39","N39","U40","P40","N40","U41","P41","N41","U42","P42","N42","U43","P43","N43","U44","P44","N44","U45","P45","N45","U46","P46","N46","U47","P47","N47","U48","P48","N48","U49","P49","N49","U50","P50","N50","U51","P51","N51","U52","P52","N52","U53","P53","N53","U54","P54","N54","U55","P55","N55","U56","P56","N56","U57","P57","N57","U58","P58","N58","U59","P59","N59","U60","P60","N60","U61","P61","N61","U62","P62","N62","U63","P63","N63","U64","P64","N64","U65","P65","N65","U66","P66","N66","U67","P67","N67","U68","P68","N68","U69","P69","N69","U70","P70","N70","U71","P71","N71","U72","P72","N72","U73","P73","N73","U74","P74","N74","U75","P75","N75","U76","P76","N76","U77","P77","N77","U78","P78","N78","U79","P79","N79","U80","P80","N80","U81","P81","N81","U82","P82","N82","U83","P83","N83","U84","P84","N84","U85","P85","N85","U86","P86","N86","U87","P87","N87","U88","P88","N88","U89","P89","N89","U90","P90","N90","U91","P91","N91","U92","P92","N92","U93","P93","N93","U94","P94","N94","U95","P95","N95","U96","P96","N96","U97","P97","N97","U98","P98","N98","U99","P99","N99","U100","P100","N100","U101","P101","N101","U102","P102","N102","U103","P103","N103","U104","P104","N104","U105","P105","N105","U106","P106","N106","U107","P107","N107","U108","P108","N108","U109","P109","N109","U110","P110","N110","U111","P111","N111","U112","P112","N112","U113","P113","N113","U114","P114","N114","U115","P115","N115","U116","P116","N116","U117","P117","N117","U118","P118","N118","U119","P119","N119","U120","P120","N120","U121","P121","N121","U122","P122","N122","U123","P123","N123","U124","P124","N124","U125","P125","N125","U126","P126","N126","U127","P127","N127","U128","P128","N128","U129","P129","N129","U130","P130","N130","U131","P131","N131","U132","P132","N132","U133","P133","N133","U134","P134","N134","U135","P135","N135","U136","P136","N136","U137","P137","N137","U138","P138","N138","U139","P139","N139","U140","P140","N140","U141","P141","N141","U142","P142","N142","U143","P143","N143","U144","P144","N144","U145","P145","N145","U146","P146","N146","U147","P147","N147","U148","P148","N148","U149","P149","N149","U150","P150","N150","U151","P151","N151","U152","P152","N152","U153","P153","N153","U154","P154","N154","U155","P155","N155","U156","P156","N156","U157","P157","N157","U158","P158","N158","U159","P159","N159","U160","P160","N160","U161","P161","N161","U162","P162","N162","U163","P163","N163","U164","P164","N164","U165","P165","N165","U166","P166","N166","U167","P167","N167","U168","P168","N168","U169","P169","N169","U170","P170","N170","U171","P171","N171","U172","P172","N172","U173","P173","N173","U174","P174","N174","U175","P175","N175","U176","P176","N176","U177","P177","N177","U178","P178","N178","U179","P179","N179","U180","P180","N180","U181","P181","N181","U182","P182","N182","U183","P183","N183","U184","P184","N184","U185","P185","N185","U186","P186","N186","U187","P187","N187","U188","P188","N188","U189","P189","N189","U190","P190","N190","U191","P191","N191","U192","P192","N192","U193","P193","N193","U194","P194","N194","U195","P195","N195","U196","P196","N196","U197","P197","N197","U198","P198","N198","U199","P199","N199","U200","P200","N200","U201","P201","N201","U202","P202","N202","U203","P203","N203","U204","P204","N204","U205","P205","N205","U206","P206","N206","U207","P207","N207","U208","P208","N208","U209","P209","N209","U210","P210","N210","U211","P211","N211","U212","P212","N212","U213","P213","N213","U214","P214","N214","U215","P215","N215","U216","P216","N216","U217","P217","N217","U218","P218","N218","U219","P219","N219","U220","P220","N220","U221","P221","N221","U222","P222","N222","U223","P223","N223","U224","P224","N224","U225","P225","N225","U226","P226","N226","U227","P227","N227","U228","P228","N228","U229","P229","N229","U230","P230","N230","U231","P231","N231","U232","P232","N232","U233","P233","N233","U234","P234","N234","U235","P235","N235","U236","P236","N236","U237","P237","N237","U238","P238","N238","U239","P239","N239","U240","P240","N240","U241","P241","N241","U242","P242","N242","U243","P243","N243","U244","P244","N244","U245","P245","N245","U246","P246","N246","U247","P247","N247","U248","P248","N248","U249","P249","N249","U250","P250","N250","U251","P251","N251","U252","P252","N252","U253","P253","N253","U254","P254","N254","U255","P255","N255","U256","P256","N256","U257","P257","N257","U258","P258","N258","U259","P259","N259","U260","P260","N260","U261","P261","N261","U262","P262","N262","U263","P263","N263","U264","P264","N264","U265","P265","N265","U266","P266","N266","U267","P267","N267","U268","P268","N268","U269","P269","N269","U270","P270","N270","U271","P271","N271","U272","P272","N272","U273","P273","N273","U274","P274","N274","U275","P275","N275","U276","P276","N276","U277","P277","N277","U278","P278","N278","U279","P279","N279","U280","P280","N280","U281","P281","N281","U282","P282","N282","U283","P283","N283","U284","P284","N284","U285","P285","N285","U286","P286","N286","U287","P287","N287","U288","P288","N288","U289","P289","N289","U290","P290","N290","U291","P291","N291","U292","P292","N292","U293","P293","N293","U294","P294","N294","U295","P295","N295","U296","P296","N296","U297","P297","N297","U298","P298","N298","U299","P299","N299","U300","P300","N300","U301","P301","N301","U302","P302","N302","U303","P303","N303","U304","P304","N304","U305","P305","N305","U306","P306","N306","U307","P307","N307","U308","P308","N308","U309","P309","N309","U310","P310","N310","U311","P311","N311","U312","P312","N312","U313","P313","N313","U314","P314","N314","U315","P315","N315","U316","P316","N316","U317","P317","N317","U318","P318","N318","U319","P319","N319","U320","P320","N320","U321","P321","N321","U322","P322","N322","U323","P323","N323","U324","P324","N324","U325","P325","N325","U326","P326","N326","U327","P327","N327","U328","P328","N328","U329","P329","N329","U330","P330","N330","U331","P331","N331","U332","P332","N332","U333","P333","N333","U334","P334","N334","U335","P335","N335","U336","P336","N336","U337","P337","N337","U338","P338","N338","U339","P339","N339","U340","P340","N340","U341","P341","N341","U342","P342","N342","U343","P343","N343","U344","P344","N344","U345","P345","N345","U346","P346","N346","U347","P347","N347","U348","P348","N348","U349","P349","N349","U350","P350","N350","U351","P351","N351","U352","P352","N352","U353","P353","N353","U354","P354","N354","U355","P355","N355","U356","P356","N356","U357","P357","N357","U358","P358","N358","U359","P359","N359","U360","P360","N360","U361","P361","N361","U362","P362","N362","U363","P363","N363","U364","P364","N364","U365","P365","N365","U366","P366","N366","U367","P367","N367","U368","P368","N368","U369","P369","N369","U370","P370","N370","U371","P371","N371","U372","P372","N372","U373","P373","N373","U374","P374","N374","U375","P375","N375","U376","P376","N376","U377","P377","N377","U378","P378","N378","U379","P379","N379","U380","P380","N380","U381","P381","N381","U382","P382","N382","U383","P383","N383","U384","P384","N384","U385","P385","N385","U386","P386","N386","U387","P387","N387","U388","P388","N388","U389","P389","N389","U390","P390","N390","U391","P391","N391","U392","P392","N392","U393","P393","N393","U394","P394","N394","U395","P395","N395","U396","P396","N396","U397","P397","N397","U398","P398","N398","U399","P399","N399","U400","P400","N400","U401","P401","N401","U402","P402","N402","U403","P403","N403","U404","P404","N404","U405","P405","N405","U406","P406","N406","U407","P407","N407","U408","P408","N408","U409","P409","N409","U410","P410","N410","U411","P411","N411","U412","P412","N412","U413","P413","N413","U414","P414","N414","U415","P415","N415","U416","P416","N416","U417","P417","N417","U418","P418","N418","U419","P419","N419","U420","P420","N420","U421","P421","N421","U422","P422","N422","U423","P423","N423","U424","P424","N424","U425","P425","N425","U426","P426","N426","U427","P427","N427","U428","P428","N428","U429","P429","N429","U430","P430","N430","U431","P431","N431","U432","P432","N432","U433","P433","N433","U434","P434","N434","U435","P435","N435","U436","P436","N436","U437","P437","N437","U438","P438","N438","U439","P439","N439","U440","P440","N440","U441","P441","N441","U442","P442","N442","U443","P443","N443","U444","P444","N444","U445","P445","N445","U446","P446","N446","U447","P447","N447","U448","P448","N448","U449","P449","N449","U450","P450","N450","U451","P451","N451","U452","P452","N452","U453","P453","N453","U454","P454","N454","U455","P455","N455","U456","P456","N456","U457","P457","N457","U458","P458","N458","U459","P459","N459","U460","P460","N460","U461","P461","N461","U462","P462","N462","U463","P463","N463","U464","P464","N464","U465","P465","N465","U466","P466","N466","U467","P467","N467","U468","P468","N468","U469","P469","N469","U470","P470","N470","U471","P471","N471","U472","P472","N472","U473","P473","N473","U474","P474","N474","U475","P475","N475","U476","P476","N476","U477","P477","N477","U478","P478","N478","U479","P479","N479","U480","P480","N480","U481","P481","N481","U482","P482","N482","U483","P483","N483","U484","P484","N484","U485","P485","N485","U486","P486","N486","U487","P487","N487","U488","P488","N488","U489","P489","N489","U490","P490","N490","U491","P491","N491","U492","P492","N492","U493","P493","N493","U494","P494","N494","U495","P495","N495","U496","P496","N496","U497","P497","N497","U498","P498","N498","U499","P499","N499","U500","P500","N500","U501","P501","N501","U502","P502","N502","U503","P503","N503","U504","P504","N504","U505","P505","N505","U506","P506","N506","U507","P507","N507","U508","P508","N508","U509","P509","N509","U510","P510","N510","U511","P511","N511","U512","P512","N512","U513","P513","N513","U514","P514","N514","U515","P515","N515","U516","P516","N516","U517","P517","N517","U518","P518","N518","U519","P519","N519","U520","P520","N520","U521","P521","N521","U522","P522","N522","U523","P523","N523","U524","P524","N524","U525","P525","N525","U526","P526","N526","U527","P527","N527","U528","P528","N528","U529","P529","N529","U530","P530","N530","U531","P531","N531","U532","P532","N532","U533","P533","N533","U534","P534","N534","U535","P535","N535","U536","P536","N536","U537","P537","N537","U538","P538","N538","U539","P539","N539","U540","P540","N540","U541","P541","N541","U542","P542","N542","U543","P543","N543","U544","P544","N544","U545","P545","N545","U546","P546","N546","U547","P547","N547","U548","P548","N548","U549","P549","N549","U550","P550","N550","U551","P551","N551","U552","P552","N552","U553","P553","N553","U554","P554","N554","U555","P555","N555","U556","P556","N556","U557","P557","N557","U558","P558","N558","U559","P559","N559","U560","P560","N560","U561","P561","N561","U562","P562","N562","U563","P563","N563","U564","P564","N564","U565","P565","N565","U566","P566","N566","U567","P567","N567","U568","P568","N568","U569","P569","N569","U570","P570","N570","U571","P571","N571","U572","P572","N572","U573","P573","N573","U574","P574","N574","U575","P575","N575","U576","P576","N576","U577","P577","N577","U578","P578","N578","U579","P579","N579","U580","P580","N580","U581","P581","N581","U582","P582","N582","U583","P583","N583","U584","P584","N584","U585","P585","N585","U586","P586","N586","U587","P587","N587","U588","P588","N588","U589","P589","N589","U590","P590","N590","U591","P591","N591","U592","P592","N592","U593","P593","N593","U594","P594","N594","U595","P595","N595","U596","P596","N596","U597","P597","N597","U598","P598","N598","U599","P599","N599","U600","P600","N600","U601","P601","N601","U602","P602","N602","U603","P603","N603","U604","P604","N604","U605","P605","N605","U606","P606","N606","U607","P607","N607","U608","P608","N608","U609","P609","N609","U610","P610","N610","U611","P611","N611","U612","P612","N612","U613","P613","N613","U614","P614","N614","U615","P615","N615","U616","P616","N616","U617","P617","N617","U618","P618","N618","U619","P619","N619","U620","P620","N620","U621","P621","N621","U622","P622","N622","U623","P623","N623","U624","P624","N624","U625","P625","N625","U626","P626","N626","U627","P627","N627","U628","P628","N628","U629","P629","N629","U630","P630","N630","U631","P631","N631","U632","P632","N632","U633","P633","N633","U634","P634","N634","U635","P635","N635","U636","P636","N636","U637","P637","N637","U638","P638","N638","U639","P639","N639","U640","P640","N640","U641","P641","N641","U642","P642","N642","U643","P643","N643","U644","P644","N644","U645","P645","N645","U646","P646","N646","U647","P647","N647","U648","P648","N648","U649","P649","N649","U650","P650","N650","U651","P651","N651","U652","P652","N652","U653","P653","N653","U654","P654","N654","U655","P655","N655","U656","P656","N656","U657","P657","N657","U658","P658","N658","U659","P659","N659","U660","P660","N660","U661","P661","N661","U662","P662","N662","U663","P663","N663","U664","P664","N664","U665","P665","N665","U666","P666","N666","U667","P667","N667","U668","P668","N668","U669","P669","N669","U670","P670","N670","U671","P671","N671","U672","P672","N672","U673","P673","N673","U674","P674","N674","U675","P675","N675","U676","P676","N676","U677","P677","N677","U678","P678","N678","U679","P679","N679","U680","P680","N680","U681","P681","N681","U682","P682","N682","U683","P683","N683","U684","P684","N684","U685","P685","N685","U686","P686","N686","U687","P687","N687","U688","P688","N688","U689","P689","N689","U690","P690","N690","U691","P691","N691","U692","P692","N692","U693","P693","N693","U694","P694","N694","U695","P695","N695","U696","P696","N696","U697","P697","N697","U698","P698","N698","U699","P699","N699","U700","P700","N700","U701","P701","N701","U702","P702","N702","U703","P703","N703","U704","P704","N704","U705","P705","N705","U706","P706","N706","U707","P707","N707","U708","P708","N708","U709","P709","N709","U710","P710","N710","U711","P711","N711","U712","P712","N712","U713","P713","N713","U714","P714","N714","U715","P715","N715","U716","P716","N716","U717","P717","N717","U718","P718","N718","U719","P719","N719","U720","P720","N720","U721","P721","N721","U722","P722","N722","U723","P723","N723","U724","P724","N724","U725","P725","N725","U726","P726","N726","U727","P727","N727","U728","P728","N728","U729","P729","N729","U730","P730","N730","U731","P731","N731","U732","P732","N732","U733","P733","N733","U734","P734","N734","U735","P735","N735","U736","P736","N736","U737","P737","N737","U738","P738","N738","U739","P739","N739","U740","P740","N740","U741","P741","N741","U742","P742","N742","U743","P743","N743","U744","P744","N744","U745","P745","N745","U746","P746","N746","U747","P747","N747","U748","P748","N748","U749","P749","N749","U750","P750","N750","U751","P751","N751","U752","P752","N752","U753","P753","N753","U754","P754","N754","U755","P755","N755","U756","P756","N756","U757","P757","N757","U758","P758","N758","U759","P759","N759","U760","P760","N760","U761","P761","N761","U762","P762","N762","U763","P763","N763","U764","P764","N764","U765","P765","N765","U766","P766","N766","U767","P767","N767","U768","P768","N768","U769","P769","N769","U770","P770","N770","U771","P771","N771","U772","P772","N772","U773","P773","N773","U774","P774","N774","U775","P775","N775","U776","P776","N776","U777","P777","N777","U778","P778","N778","U779","P779","N779","U780","P780","N780","U781","P781","N781","U782","P782","N782","U783","P783","N783","U784","P784","N784","U785","P785","N785","U786","P786","N786","U787","P787","N787","U788","P788","N788","U789","P789","N789","U790","P790","N790","U791","P791","N791","U792","P792","N792","U793","P793","N793","U794","P794","N794","U795","P795","N795","U796","P796","N796","U797","P797","N797","U798","P798","N798","U799","P799","N799","U800","P800","N800","U801","P801","N801","U802","P802","N802","U803","P803","N803","U804","P804","N804","U805","P805","N805","U806","P806","N806","U807","P807","N807","U808","P808","N808","U809","P809","N809","U810","P810","N810","U811","P811","N811","U812","P812","N812","U813","P813","N813","U814","P814","N814","U815","P815","N815","U816","P816","N816","U817","P817","N817","U818","P818","N818","U819","P819","N819","U820","P820","N820","U821","P821","N821","U822","P822","N822","U823","P823","N823","U824","P824","N824","U825","P825","N825","U826","P826","N826","U827","P827","N827","U828","P828","N828","U829","P829","N829","U830","P830","N830","U831","P831","N831","U832","P832","N832","U833","P833","N833","U834","P834","N834","U835","P835","N835","U836","P836","N836","U837","P837","N837","U838","P838","N838","U839","P839","N839","U840","P840","N840","U841","P841","N841","U842","P842","N842","U843","P843","N843","U844","P844","N844","U845","P845","N845","U846","P846","N846","U847","P847","N847","U848","P848","N848","U849","P849","N849","U850","P850","N850","U851","P851","N851","U852","P852","N852","U853","P853","N853","U854","P854","N854","U855","P855","N855","U856","P856","N856","U857","P857","N857","U858","P858","N858","U859","P859","N859","U860","P860","N860","U861","P861","N861","U862","P862","N862","U863","P863","N863","U864","P864","N864","U865","P865","N865","U866","P866","N866","U867","P867","N867","U868","P868","N868","U869","P869","N869","U870","P870","N870","U871","P871","N871","U872","P872","N872","U873","P873","N873","U874","P874","N874","U875","P875","N875","U876","P876","N876","U877","P877","N877","U878","P878","N878","U879","P879","N879","U880","P880","N880","U881","P881","N881","U882","P882","N882","U883","P883","N883","U884","P884","N884","U885","P885","N885","U886","P886","N886","U887","P887","N887","U888","P888","N888","U889","P889","N889","U890","P890","N890","U891","P891","N891","U892","P892","N892","U893","P893","N893","U894","P894","N894","U895","P895","N895","U896","P896","N896","U897","P897","N897","U898","P898","N898","U899","P899","N899","U900","P900","N900","U901","P901","N901","U902","P902","N902","U903","P903","N903","U904","P904","N904","U905","P905","N905","U906","P906","N906","U907","P907","N907","U908","P908","N908","U909","P909","N909","U910","P910","N910","U911","P911","N911","U912","P912","N912","U913","P913","N913","U914","P914","N914","U915","P915","N915","U916","P916","N916","U917","P917","N917","U918","P918","N918","U919","P919","N919","U920","P920","N920","U921","P921","N921","U922","P922","N922","U923","P923","N923","U924","P924","N924","U925","P925","N925","U926","P926","N926","U927","P927","N927","U928","P928","N928","U929","P929","N929","U930","P930","N930","U931","P931","N931","U932","P932","N932","U933","P933","N933","U934","P934","N934","U935","P935","N935","U936","P936","N936","U937","P937","N937","U938","P938","N938","U939","P939","N939","U940","P940","N940","U941","P941","N941","U942","P942","N942","U943","P943","N943","U944","P944","N944","U945","P945","N945","U946","P946","N946","U947","P947","N947","U948","P948","N948","U949","P949","N949","U950","P950","N950","U951","P951","N951","U952","P952","N952","U953","P953","N953","U954","P954","N954","U955","P955","N955","U956","P956","N956","U957","P957","N957","U958","P958","N958","U959","P959","N959","U960","P960","N960","U961","P961","N961","U962","P962","N962","U963","P963","N963","U964","P964","N964","U965","P965","N965","U966","P966","N966","U967","P967","N967","U968","P968","N968","U969","P969","N969","U970","P970","N970","U971","P971","N971","U972","P972","N972","U973","P973","N973","U974","P974","N974","U975","P975","N975","U976","P976","N976","U977","P977","N977","U978","P978","N978","U979","P979","N979","U980","P980","N980","U981","P981","N981","U982","P982","N982","U983","P983","N983","U984","P984","N984","U985","P985","N985","U986","P986","N986","U987","P987","N987","U988","P988","N988","U989","P989","N989","U990","P990","N990","U991","P991","N991","U992","P992","N992","U993","P993","N993","U994","P994","N994","U995","P995","N995","U996","P996","N996","U997","P997","N997","U998","P998","N998","U999","P999","N999","U1000","P1000","N1000","U1001","P1001","N1001","U1002","P1002","N1002","U1003","P1003","N1003","U1004","P1004","N1004","U1005","P1005","N1005","U1006","P1006","N1006","U1007","P1007","N1007","U1008","P1008","N1008","U1009","P1009","N1009","U1010","P1010","N1010","U1011","P1011","N1011","U1012","P1012","N1012","U1013","P1013","N1013","U1014","P1014","N1014","U1015","P1015","N1015","U1016","P1016","N1016","U1017","P1017","N1017","U1018","P1018","N1018","U1019","P1019","N1019","U1020","P1020","N1020","U1021","P1021","N1021","U1022","P1022","N1022","U1023","P1023","N1023","U1024","P1024","N1024","U2048","P2048","N2048","U4096","P4096","N4096","U8192","P8192","N8192","U16384","P16384","N16384","U32768","P32768","N32768","U65536","P65536","N65536","U131072","P131072","N131072","U262144","P262144","N262144","U524288","P524288","N524288","U1048576","P1048576","N1048576","U2097152","P2097152","N2097152","U4194304","P4194304","N4194304","U8388608","P8388608","N8388608","U16777216","P16777216","N16777216","U33554432","P33554432","N33554432","U67108864","P67108864","N67108864","U134217728","P134217728","N134217728","U268435456","P268435456","N268435456","U536870912","P536870912","N536870912","U1073741824","P1073741824","N1073741824","U2147483648","P2147483648","N2147483648","U4294967296","P4294967296","N4294967296","U8589934592","P8589934592","N8589934592","U17179869184","P17179869184","N17179869184","U34359738368","P34359738368","N34359738368","U68719476736","P68719476736","N68719476736","U137438953472","P137438953472","N137438953472","U274877906944","P274877906944","N274877906944","U549755813888","P549755813888","N549755813888","U1099511627776","P1099511627776","N1099511627776","U2199023255552","P2199023255552","N2199023255552","U4398046511104","P4398046511104","N4398046511104","U8796093022208","P8796093022208","N8796093022208","U17592186044416","P17592186044416","N17592186044416","U35184372088832","P35184372088832","N35184372088832","U70368744177664","P70368744177664","N70368744177664","U140737488355328","P140737488355328","N140737488355328","U281474976710656","P281474976710656","N281474976710656","U562949953421312","P562949953421312","N562949953421312","U1125899906842624","P1125899906842624","N1125899906842624","U2251799813685248","P2251799813685248","N2251799813685248","U4503599627370496","P4503599627370496","N4503599627370496","U9007199254740992","P9007199254740992","N9007199254740992","U18014398509481984","P18014398509481984","N18014398509481984","U36028797018963968","P36028797018963968","N36028797018963968","U72057594037927936","P72057594037927936","N72057594037927936","U144115188075855872","P144115188075855872","N144115188075855872","U288230376151711744","P288230376151711744","N288230376151711744","U576460752303423488","P576460752303423488","N576460752303423488","U1152921504606846976","P1152921504606846976","N1152921504606846976","U2305843009213693952","P2305843009213693952","N2305843009213693952","U4611686018427387904","P4611686018427387904","N4611686018427387904","U9223372036854775808","U10000","P10000","N10000","U100000","P100000","N100000","U1000000","P1000000","N1000000","U10000000","P10000000","N10000000","U100000000","P100000000","N100000000","U1000000000","P1000000000","N1000000000","U10000000000","P10000000000","N10000000000","U100000000000","P100000000000","N100000000000","U1000000000000","P1000000000000","N1000000000000","U10000000000000","P10000000000000","N10000000000000","U100000000000000","P100000000000000","N100000000000000","U1000000000000000","P1000000000000000","N1000000000000000","U10000000000000000","P10000000000000000","N10000000000000000","U100000000000000000","P100000000000000000","N100000000000000000","U1000000000000000000","P1000000000000000000","N1000000000000000000","U10000000000000000000","Greater","Less","Equal","op","cmp","tarr","assert_type_eq","assert_type","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","partial_div","borrow","borrow_mut","try_from","from","into","try_into","type_id","partial_div","borrow","borrow_mut","try_from","from","into","try_into","type_id","partial_div","borrow","borrow_mut","try_from","from","into","try_into","type_id","powi","set_bit","borrow","borrow_mut","try_from","from","into","try_into","type_id","powi","set_bit","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","to_ordering","to_ordering","to_ordering","to_u8","to_bool","to_u8","to_bool","to_u8","to_u16","to_u32","to_u64","to_usize","to_i8","to_i16","to_i32","to_i64","to_isize","to_u8","to_u16","to_u32","to_u64","to_usize","to_i8","to_i16","to_i32","to_i64","to_isize","to_i8","to_i16","to_i32","to_i64","to_isize","to_i8","to_i16","to_i32","to_i64","to_isize","to_i8","to_i16","to_i32","to_i64","to_isize","powi","powi","powi","powi","powi","powi","powi","powi","powi","powi","powi","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","len","len","len","len","partial_div","partial_div","partial_div","partial_div","min","min","min","min","min","min","min","min","min","min","min","min","min","min","min","max","max","max","max","max","max","max","max","max","max","max","max","max","max","max","get_bit","get_bit","get_bit","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","div","div","div","div","div","div","div","div","div","rem","rem","rem","rem","rem","rem","rem","rem","rem","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","eq","eq","eq","ne","eq","ne","eq","eq","eq","ne","eq","eq","ne","eq","eq","eq","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","neg","neg","neg","neg","neg","not","not","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","default","default","default"],"q":["typenum","typenum::bit","","","","typenum","typenum::int","","","","","","typenum","typenum::marker_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum","typenum::operator_aliases","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum","typenum::type_operators","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum","typenum::uint","","","","","","","","","","typenum","typenum::array","","typenum","typenum::conststypenumtypenum::bit","","","","","","","","","","","","","","typenum::int","","","","","","","","","","","","","","","","","","","","","","","","typenum::uint","","","","","","","","","","","","","","","","","","typenum::array","","","","","","","","","","","","","","typenum","","","","","","","","","","","","","","","","","","","","","","","","typenum::bit","","","","typenum::uint","","","","","","","","","","","","","","","","","","","","typenum::int","","","","","","","","","","","","","","","","","","typenum","","","typenum::int","","","","","typenum::bit","","","","typenum::int","","","","","","","","","typenum::uint","","","","","","","","","typenum::array","","typenum::uint","","typenum::array","","typenum::bit","","","","typenum::int","","","","","","","","","typenum::uint","","typenum::bit","","","","typenum::int","","","","","","","","","typenum::uint","","","","","typenum::bit","","typenum::int","","","typenum::uint","","typenum::array","","typenum","","","typenum::int","","","","","typenum::uint","","typenum::array","","typenum::int","","","","","typenum::uint","","typenum::array","","typenum::int","","","","","","","","","typenum::uint","","","","","","","typenum::array","","typenum::bit","","typenum::int","","","","","typenum::uint","","","typenum::array","","","typenum","","","typenum::bit","","typenum::int","","","typenum::uint","","typenum::array","","typenum","","","typenum::bit","","typenum::int","","","typenum::uint","","typenum::array","","typenum","","","typenum::int","","","","","","","typenum::uint","","","","","","","","","","","typenum::array","","typenum::int","","","","","","","typenum::uint","","","","","","","","typenum::array","","typenum::int","","","","","","","","","typenum::array","","typenum::bit","","","","","typenum::uint","","typenum::bit","","","typenum::uint","","","","","","typenum::bit","","","","typenum::uint","","","","","","","","","","","","","","","","typenum::bit","","typenum::int","","","typenum::uint","","typenum::array","","typenum","","","typenum::bit","","typenum::int","","","typenum::uint","","typenum::array","","typenum","","","typenum::bit","","typenum::int","","","typenum::uint","","typenum","",""],"d":["Type-level bits.","The type-level bit 0.","Instantiates a singleton representing this bit.","The type-level bit 1.","Instantiates a singleton representing this bit.","Type-level signed integers.","Type-level signed integers with positive sign.","Type-level signed integers with negative sign.","Instantiates a singleton representing this strictly …","Instantiates a singleton representing this strictly …","The type-level signed integer 0.","Instantiates a singleton representing the integer 0.","All of the <strong>marker traits</strong> used in typenum.","A <strong>marker trait</strong> to designate that a type is not zero. All …","A <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.","","The <strong>marker trait</strong> for compile time bits.","","","","","The <strong>marker trait</strong> for compile time unsigned integers.","","","","","","","","","","","","","","","","","","","","","The <strong>marker trait</strong> for compile time signed integers.","","","","","","","","","","","The <strong>marker trait</strong> for type-level arrays of type-level …","The <strong>marker trait</strong> for type-level numbers which are a power …","Aliases for the type operators used in this crate. Their …","Alias for the associated type of <code>BitAnd</code>: …","Alias for the associated type of <code>BitOr</code>: …","Alias for the associated type of <code>BitXor</code>: …","Alias for the associated type of <code>Shl</code>: …","Alias for the associated type of <code>Shr</code>: …","Alias for the associated type of <code>Add</code>: …","Alias for the associated type of <code>Sub</code>: …","Alias for the associated type of <code>Mul</code>: …","Alias for the associated type of <code>Div</code>: …","Alias for the associated type of <code>Rem</code>: …","Alias for the associated type of <code>PartialDiv</code>: …","Alias for the associated type of <code>Neg</code>: …","Alias for the associated type of <code>Abs</code>: …","Alias for the associated type of <code>Pow</code>: …","Alias for the associated type of <code>Gcd</code>: …","Alias to make it easy to add 1: …","Alias to make it easy to subtract 1: …","Alias to make it easy to multiply by 2. …","Alias to make it easy to square. …","Alias to make it easy to cube. …","Alias for the associated type of <code>SquareRoot</code>: …","Alias for the associated type of <code>Cmp</code>: …","Alias for the associated type of <code>Len</code>: …","Alias for the associated type of <code>Min</code>: …","Alias for the associated type of <code>Max</code>: …","Alias for the associated type of <code>IsLess</code>: …","Alias for the associated type of <code>IsEqual</code>: …","Alias for the associated type of <code>IsGreater</code>: …","Alias for the associated type of <code>IsGreaterOrEqual</code>: …","Alias for the associated type of <code>IsLessOrEqual</code>: …","Alias for the associated type of <code>IsNotEqual</code>: …","Alias for the associated type of <code>Logarithm2</code>: …","Useful <strong>type operators</strong> that are not defined in <code>core::ops</code>.","A <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>…","Should always be <code>Self</code>","A <strong>type operator</strong> that returns the absolute value.","The absolute value.","A <strong>type operator</strong> that provides exponentiation by repeated …","The result of the exponentiation.","This function isn’t used in this crate, but may be …","A <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a …","The result of the comparison. It should only ever be one …","A <strong>type operator</strong> that gives the length of an <code>Array</code> or the …","The length as a type-level unsigned integer.","This function isn’t used in this crate, but may be …","Division as a partial function. This <strong>type operator</strong> …","The type of the result of the division","Method for performing the division","A <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.","The type of the minimum of <code>Self</code> and <code>Rhs</code>","Method returning the minimum","A <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.","The type of the maximum of <code>Self</code> and <code>Rhs</code>","Method returning the maximum","A <strong>type operator</strong> that returns <code>True</code> if <code>Self < Rhs</code>, …","The type representing either <code>True</code> or <code>False</code>","Method returning <code>True</code> or <code>False</code>.","A <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, …","The type representing either <code>True</code> or <code>False</code>","Method returning <code>True</code> or <code>False</code>.","A <strong>type operator</strong> that returns <code>True</code> if <code>Self > Rhs</code>, …","The type representing either <code>True</code> or <code>False</code>","Method returning <code>True</code> or <code>False</code>.","A <strong>type operator</strong> that returns <code>True</code> if <code>Self <= Rhs</code>, …","The type representing either <code>True</code> or <code>False</code>","Method returning <code>True</code> or <code>False</code>.","A <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, …","The type representing either <code>True</code> or <code>False</code>","Method returning <code>True</code> or <code>False</code>.","A <strong>type operator</strong> that returns <code>True</code> if <code>Self >= Rhs</code>, …","The type representing either <code>True</code> or <code>False</code>","Method returning <code>True</code> or <code>False</code>.","A <strong>type operator</strong> for taking the integer square root of <code>Self</code>…","The result of the integer square root.","A <strong>type operator</strong> for taking the integer binary logarithm …","The result of the integer binary logarithm.","A <strong>type operator</strong> that computes the greatest common divisor …","The greatest common divisor.","Type-level unsigned integers.","The terminating type for <code>UInt</code>; it always comes after the …","Instantiates a singleton representing this unsigned …","<code>UInt</code> is defined recursively, where <code>B</code> is the least …","Instantiates a singleton representing this unsigned …","","","","A <strong>type operator</strong> that, when implemented for unsigned …","","Alias for the result of calling <code>SetBit</code>: …","A type-level array of type-level numbers.","The terminating type for type arrays.","<code>TArr</code> is a type that acts as an array of types. It is …","Type aliases for many constantspotential output from <code>Cmp</code>, this is the type equivalent …","A potential output from <code>Cmp</code>, this is the type equivalent …","A potential output from <code>Cmp</code>, this is the type equivalent …","Convenient type operations.","A convenience macro for comparing type numbers. Use <code>op!</code> …","Create a new type-level arrray. Only usable on Rust …","Asserts that two types are the same.","Asserts that a type is <code>True</code>, aka <code>B1</codei":[0,0,1,0,2,0,0,0,3,4,0,5,0,0,0,6,0,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,11,0,12,12,0,13,0,14,14,0,15,15,0,16,16,0,17,17,0,18,18,0,19,19,0,20,20,0,21,21,0,22,22,0,23,23,0,24,0,25,0,26,0,0,27,0,28,0,29,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,31,31,31,31,31,31,31,32,32,32,32,32,32,32,33,33,33,33,33,33,33,34,34,34,34,34,34,34,35,35,35,35,35,35,35,33,34,35,1,1,2,2,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,5,5,5,5,5,3,3,3,3,3,4,4,4,4,4,5,5,5,36,37,37,3,4,3,4,4,1,1,2,2,5,5,5,3,4,4,3,3,4,27,28,27,28,28,28,28,27,28,31,32,27,28,31,32,1,1,2,2,5,5,5,3,4,3,4,3,4,27,28,1,1,2,2,5,5,5,3,4,3,4,3,4,27,28,28,28,27,1,2,3,4,5,27,28,31,32,33,34,35,5,3,3,4,4,27,28,31,32,5,3,3,4,4,27,28,31,32,5,5,5,3,4,3,4,3,4,27,28,28,28,28,27,28,31,32,1,2,3,3,4,4,5,27,28,28,31,32,32,33,34,35,1,2,3,4,5,27,28,31,32,33,34,35,1,2,3,4,5,27,28,31,32,33,34,35,5,3,4,3,4,3,4,27,28,27,28,28,27,28,28,28,28,28,31,32,5,3,4,3,4,3,4,28,27,27,28,28,27,28,28,31,32,5,3,4,5,3,4,5,3,4,31,32,1,2,1,2,2,27,28,1,1,2,27,28,28,28,28,28,1,2,1,2,27,28,27,27,28,28,28,27,28,27,28,27,27,28,28,28,1,2,3,4,5,27,28,31,32,33,34,35,1,2,3,4,5,27,28,31,32,33,34,35,1,2,3,4,5,27,28,33,34,35],"f":[null,null,[[],["b0",3]],null,[[],["b1",3]],null,null,null,[[],["pint",3]],[[],["nint",3]],null,[[],["z0",3]],null,null,null,[[],["ordering",4]],null,null,null,[[],["u8",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,[[],["u8",15]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["usize",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],null,null,null,null,null,null,[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,[[]],null,null,[[]],null,null,[[]],null,null,[[]],null,null,[[]],null,null,[[]],null,null,[[]],null,null,[[]],null,null,[[]],null,null,[[]],null,null,null,null,null,null,null,null,[[],["uterm",3]],null,[[],["uint",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["ordering",4]],[[],["ordering",4]],[[],["ordering",4]],[[],["u8",15]],[[],["bool",15]],[[],["u8",15]],[[],["bool",15]],[[],["u8",15]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["usize",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[],["u8",15]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["usize",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[],["i8",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["nint",3]]],[[["nint",3],["uint",3]]],[[["nint",3],["uint",3]]],[[["z0",3]]],[[["z0",3]]],[[["pint",3]]],[[["pint",3],["uint",3]]],[[["pint",3],["uint",3]]],[[["b0",3]]],[[["b1",3]]],[[["b0",3]]],[[["b1",3]]],[[["z0",3]]],[[["nint",3]]],[[["pint",3]]],[[["z0",3]]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["pint",3]]],[[["nint",3]]],[[["uterm",3]]],[[["uterm",3]]],[[["uint",3]]],[[["uint",3]]],[[["uint",3]]],[[["uint",3]]],[[["uint",3]]],[[]],[[]],[[]],[[]],[[["uint",3]]],[[["uint",3]]],[[]],[[]],[[["b0",3]],["b0",3]],[[["b1",3]],["b0",3]],[[["b0",3]],["b0",3]],[[["b1",3]],["b1",3]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["z0",3]]],[[["z0",3]]],[[["pint",3]]],[[["pint",3]]],[[["nint",3]]],[[["nint",3]]],[[]],[[]],[[["b0",3]],["b0",3]],[[["b1",3]],["b1",3]],[[["b0",3]],["b1",3]],[[["b1",3]],["b1",3]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["z0",3]]],[[["z0",3]]],[[["pint",3]]],[[["pint",3]]],[[["nint",3]]],[[["nint",3]]],[[]],[[]],[[["u0",6]]],[[["uint",3]]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["pint",3]]],[[["nint",3]]],[[["pint",3]]],[[["nint",3]]],[[["uint",3]]],[[["uint",3]]],[[]],[[]],[[]],[[["pint",3]]],[[["nint",3]]],[[["pint",3]]],[[["nint",3]]],[[["uint",3]]],[[["uint",3]]],[[]],[[]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["z0",3]]],[[["z0",3]]],[[["nint",3]]],[[["pint",3]]],[[["pint",3]]],[[["nint",3]]],[[["b0",3]]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[["b1",3]]],[[["uterm",3]]],[[]],[[["aterm",3]]],[[["tarr",3]]],[[["b0",3]],["bool",15]],[[["b1",3]],["bool",15]],[[["pint",3]],["bool",15]],[[["pint",3]],["bool",15]],[[["nint",3]],["bool",15]],[[["nint",3]],["bool",15]],[[["z0",3]],["bool",15]],[[["uterm",3]],["bool",15]],[[["uint",3]],["bool",15]],[[["uint",3]],["bool",15]],[[["aterm",3]],["bool",15]],[[["tarr",3]],["bool",15]],[[["tarr",3]],["bool",15]],[[["greater",3]],["bool",15]],[[["less",3]],["bool",15]],[[["equal",3]],["bool",15]],[[["b0",3]],["ordering",4]],[[["b1",3]],["ordering",4]],[[["pint",3]],["ordering",4]],[[["nint",3]],["ordering",4]],[[["z0",3]],["ordering",4]],[[["uterm",3]],["ordering",4]],[[["uint",3]],["ordering",4]],[[["aterm",3]],["ordering",4]],[[["tarr",3]],["ordering",4]],[[["greater",3]],["ordering",4]],[[["less",3]],["ordering",4]],[[["equal",3]],["ordering",4]],[[["b0",3]],[["option",4],["ordering",4]]],[[["b1",3]],[["option",4],["ordering",4]]],[[["pint",3]],[["option",4],["ordering",4]]],[[["nint",3]],[["option",4],["ordering",4]]],[[["z0",3]],[["option",4],["ordering",4]]],[[["uterm",3]],[["option",4],["ordering",4]]],[[["uint",3]],[["option",4],["ordering",4]]],[[["aterm",3]],[["option",4],["ordering",4]]],[[["tarr",3]],[["option",4],["ordering",4]]],[[["greater",3]],[["option",4],["ordering",4]]],[[["less",3]],[["option",4],["ordering",4]]],[[["equal",3]],[["option",4],["ordering",4]]],[[]],[[["z0",3]]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["nint",3]]],[[["pint",3]]],[[["b0",3]]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[["b1",3]]],[[]],[[["uterm",3]]],[[["b0",3],["uint",3]]],[[["uint",3],["b1",3]]],[[["b0",3],["uint",3]]],[[["uint",3],["b1",3]]],[[["aterm",3]]],[[["tarr",3]]],[[]],[[["z0",3]]],[[["z0",3]]],[[["pint",3]]],[[["nint",3]]],[[["nint",3]]],[[["pint",3]]],[[["b0",3]]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[["uterm",3]]],[[]],[[["uint",3]]],[[["uint",3]]],[[]],[[]],[[["aterm",3]]],[[["aterm",3]]],[[["aterm",3]]],[[["tarr",3]]],[[["tarr",3]]],[[["tarr",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["b0",3]]],[[["b1",3]]],[[]],[[]],[[["b0",3]]],[[["b1",3]]],[[]],[[]],[[["uterm",3]]],[[["b0",3],["uint",3]]],[[["uint",3],["b1",3]]],[[["b0",3],["uint",3]]],[[["uint",3],["b1",3]]],[[["b0",3]]],[[["b0",3]]],[[["b1",3]]],[[["b1",3]]],[[]],[[]],[[["b0",3]]],[[["b1",3]]],[[["b0",3]]],[[["b1",3]]],[[["uterm",3]]],[[]],[[["uint",3]]],[[]],[[["uterm",3]]],[[["b0",3]]],[[["b1",3]]],[[["b0",3]]],[[["b1",3]]],[[["uint",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["b0",3]],[[],["b1",3]],[[],["pint",3]],[[],["nint",3]],[[],["z0",3]],[[],["uterm",3]],[[],["uint",3]],[[],["aterm",3]],[[],["tarr",3]],[[],["greater",3]],[[],["less",3]],[[],["equal",3]],[[],["b0",3]],[[],["b1",3]],[[],["pint",3]],[[],["nint",3]],[[],["z0",3]],[[],["uterm",3]],[[],["uint",3]],[[],["greater",3]],[[],["less",3]],[[],["equal",3]]],"p":[[3,"B0"],[3,"B1"],[3,"PInt"],[3,"NInt"],[3,"Z0"],[8,"Ord"],[8,"Bit"],[8,"Unsigned"],[8,"Integer"],[8,"Same"],[8,"Abs"],[8,"Pow"],[8,"Cmp"],[8,"Len"],[8,"PartialDiv"],[8,"Min"],[8,"Max"],[8,"IsLess"],[8,"IsEqual"],[8,"IsGreater"],[8,"IsLessOrEqual"],[8,"IsNotEqual"],[8,"IsGreaterOrEqual"],[8,"SquareRoot"],[8,"Logarithm2"],[8,"Gcd"],[3,"UTerm"],[3,"UInt"],[8,"GetBit"],[8,"SetBit"],[3,"ATerm"],[3,"TArr"],[3,"Greater"],[3,"Less"],[3,"Equal"],[6,"P1"],[6,"N1"]]},\
"ucd_trie":{"doc":"The ucd-trie crate provides a compressed trie set …","t":[4,13,13,6,3,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Error","InvalidCodepoint","GaveUp","Result","TrieSetOwned","TrieSet","TrieSetSlice","contains_char","contains_u32","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","clone","clone","clone","fmt","fmt","fmt","fmt","from_scalars","from_codepoints","as_slice","contains_char","contains_u32"],"q":["ucd_trie","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An error that can occur during construction of a trie.","This error is returned when an invalid codepoint is given …","This error is returned when a set of Unicode codepoints …","A type alias that maps to …","An owned trie set.","A type alias for <code>TrieSetSlice<\'static></code>.","A borrowed trie set.","Returns true if and only if the given Unicode scalar …","Returns true if and only if the given codepoint is in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new trie set from a set of Unicode scalar values.","Create a new trie set from a set of Unicode scalar values.","Return this set as a slice.","Returns true if and only if the given Unicode scalar …","Returns true if and only if the given codepoint is in …"],"i":[0,1,1,0,0,0,0,2,2,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,1,3,2,1,3,2,1,3,3,3,3,3],"f":[null,null,null,null,null,null,null,[[["char",15]],["bool",15]],[[["u32",15]],["bool",15]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["error",4]],[[],["triesetowned",3]],[[],["triesetslice",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["result",6],["triesetowned",3]]],[[],[["result",6],["triesetowned",3]]],[[],["triesetslice",3]],[[["char",15]],["bool",15]],[[["u32",15]],["bool",15]]],"p":[[4,"Error"],[3,"TrieSetSlice"],[3,"TrieSetOwned"]]},\
"unicode_width":{"doc":"Determine displayed width of <code>char</code> and <code>str</code> types according …","t":[17,8,10,10,8,10,10],"n":["UNICODE_VERSION","UnicodeWidthChar","width","width_cjk","UnicodeWidthStr","width","width_cjk"],"q":["unicode_width","","","","","",""],"d":["The version of Unicode that this version of unicode-width …","Methods for determining displayed width of Unicode …","Returns the character’s displayed width in columns, or …","Returns the character’s displayed width in columns, or …","Methods for determining displayed width of Unicode …","Returns the string’s displayed width in columns.","Returns the string’s displayed width in columns."],"i":[0,0,1,1,0,2,2],"f":[null,null,[[],[["usize",15],["option",4]]],[[],[["usize",15],["option",4]]],null,[[],["usize",15]],[[],["usize",15]]],"p":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]},\
"unicode_xid":{"doc":"Determine if a <code>char</code> is a valid identifier for a parser …","t":[17,8,10,10],"n":["UNICODE_VERSION","UnicodeXID","is_xid_start","is_xid_continue"],"q":["unicode_xid","","",""],"d":["The version of Unicode that this version of unicode-xid …","Methods for determining if a character is a valid …","Returns whether the specified character satisfies the ‘…","Returns whether the specified <code>char</code> satisfies the ‘…"],"i":[0,0,1,1],"f":[null,null,[[],["bool",15]],[[],["bool",15]]],"p":[[8,"UnicodeXID"]]}\
}');
initSearch(searchIndex);